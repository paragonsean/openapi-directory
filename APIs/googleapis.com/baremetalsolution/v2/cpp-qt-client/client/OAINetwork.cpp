/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetwork.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetwork::OAINetwork(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetwork::OAINetwork() {
    this->initializeModel();
}

OAINetwork::~OAINetwork() {}

void OAINetwork::initializeModel() {

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_gateway_ip_isSet = false;
    m_gateway_ip_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_jumbo_frames_enabled_isSet = false;
    m_jumbo_frames_enabled_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_mount_points_isSet = false;
    m_mount_points_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_reservations_isSet = false;
    m_reservations_isValid = false;

    m_services_cidr_isSet = false;
    m_services_cidr_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vlan_id_isSet = false;
    m_vlan_id_isValid = false;

    m_vrf_isSet = false;
    m_vrf_isValid = false;

    m_vrf_attachment_isSet = false;
    m_vrf_attachment_isValid = false;
}

void OAINetwork::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetwork::fromJsonObject(QJsonObject json) {

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_gateway_ip_isValid = ::OpenAPI::fromJsonValue(m_gateway_ip, json[QString("gatewayIp")]);
    m_gateway_ip_isSet = !json[QString("gatewayIp")].isNull() && m_gateway_ip_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_jumbo_frames_enabled_isValid = ::OpenAPI::fromJsonValue(m_jumbo_frames_enabled, json[QString("jumboFramesEnabled")]);
    m_jumbo_frames_enabled_isSet = !json[QString("jumboFramesEnabled")].isNull() && m_jumbo_frames_enabled_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_mount_points_isValid = ::OpenAPI::fromJsonValue(m_mount_points, json[QString("mountPoints")]);
    m_mount_points_isSet = !json[QString("mountPoints")].isNull() && m_mount_points_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_reservations_isValid = ::OpenAPI::fromJsonValue(m_reservations, json[QString("reservations")]);
    m_reservations_isSet = !json[QString("reservations")].isNull() && m_reservations_isValid;

    m_services_cidr_isValid = ::OpenAPI::fromJsonValue(m_services_cidr, json[QString("servicesCidr")]);
    m_services_cidr_isSet = !json[QString("servicesCidr")].isNull() && m_services_cidr_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_vlan_id, json[QString("vlanId")]);
    m_vlan_id_isSet = !json[QString("vlanId")].isNull() && m_vlan_id_isValid;

    m_vrf_isValid = ::OpenAPI::fromJsonValue(m_vrf, json[QString("vrf")]);
    m_vrf_isSet = !json[QString("vrf")].isNull() && m_vrf_isValid;

    m_vrf_attachment_isValid = ::OpenAPI::fromJsonValue(m_vrf_attachment, json[QString("vrfAttachment")]);
    m_vrf_attachment_isSet = !json[QString("vrfAttachment")].isNull() && m_vrf_attachment_isValid;
}

QString OAINetwork::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetwork::asJsonObject() const {
    QJsonObject obj;
    if (m_cidr_isSet) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_gateway_ip_isSet) {
        obj.insert(QString("gatewayIp"), ::OpenAPI::toJsonValue(m_gateway_ip));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_jumbo_frames_enabled_isSet) {
        obj.insert(QString("jumboFramesEnabled"), ::OpenAPI::toJsonValue(m_jumbo_frames_enabled));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_mac_address.size() > 0) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_mount_points.size() > 0) {
        obj.insert(QString("mountPoints"), ::OpenAPI::toJsonValue(m_mount_points));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_reservations.size() > 0) {
        obj.insert(QString("reservations"), ::OpenAPI::toJsonValue(m_reservations));
    }
    if (m_services_cidr_isSet) {
        obj.insert(QString("servicesCidr"), ::OpenAPI::toJsonValue(m_services_cidr));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vlan_id_isSet) {
        obj.insert(QString("vlanId"), ::OpenAPI::toJsonValue(m_vlan_id));
    }
    if (m_vrf.isSet()) {
        obj.insert(QString("vrf"), ::OpenAPI::toJsonValue(m_vrf));
    }
    if (m_vrf_attachment_isSet) {
        obj.insert(QString("vrfAttachment"), ::OpenAPI::toJsonValue(m_vrf_attachment));
    }
    return obj;
}

QString OAINetwork::getCidr() const {
    return m_cidr;
}
void OAINetwork::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAINetwork::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAINetwork::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAINetwork::getGatewayIp() const {
    return m_gateway_ip;
}
void OAINetwork::setGatewayIp(const QString &gateway_ip) {
    m_gateway_ip = gateway_ip;
    m_gateway_ip_isSet = true;
}

bool OAINetwork::is_gateway_ip_Set() const{
    return m_gateway_ip_isSet;
}

bool OAINetwork::is_gateway_ip_Valid() const{
    return m_gateway_ip_isValid;
}

QString OAINetwork::getId() const {
    return m_id;
}
void OAINetwork::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAINetwork::is_id_Set() const{
    return m_id_isSet;
}

bool OAINetwork::is_id_Valid() const{
    return m_id_isValid;
}

QString OAINetwork::getIpAddress() const {
    return m_ip_address;
}
void OAINetwork::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAINetwork::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAINetwork::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

bool OAINetwork::isJumboFramesEnabled() const {
    return m_jumbo_frames_enabled;
}
void OAINetwork::setJumboFramesEnabled(const bool &jumbo_frames_enabled) {
    m_jumbo_frames_enabled = jumbo_frames_enabled;
    m_jumbo_frames_enabled_isSet = true;
}

bool OAINetwork::is_jumbo_frames_enabled_Set() const{
    return m_jumbo_frames_enabled_isSet;
}

bool OAINetwork::is_jumbo_frames_enabled_Valid() const{
    return m_jumbo_frames_enabled_isValid;
}

QMap<QString, QString> OAINetwork::getLabels() const {
    return m_labels;
}
void OAINetwork::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAINetwork::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAINetwork::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAINetwork::getMacAddress() const {
    return m_mac_address;
}
void OAINetwork::setMacAddress(const QList<QString> &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAINetwork::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAINetwork::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

QList<OAINetworkMountPoint> OAINetwork::getMountPoints() const {
    return m_mount_points;
}
void OAINetwork::setMountPoints(const QList<OAINetworkMountPoint> &mount_points) {
    m_mount_points = mount_points;
    m_mount_points_isSet = true;
}

bool OAINetwork::is_mount_points_Set() const{
    return m_mount_points_isSet;
}

bool OAINetwork::is_mount_points_Valid() const{
    return m_mount_points_isValid;
}

QString OAINetwork::getName() const {
    return m_name;
}
void OAINetwork::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINetwork::is_name_Set() const{
    return m_name_isSet;
}

bool OAINetwork::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINetwork::getPod() const {
    return m_pod;
}
void OAINetwork::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAINetwork::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAINetwork::is_pod_Valid() const{
    return m_pod_isValid;
}

QList<OAINetworkAddressReservation> OAINetwork::getReservations() const {
    return m_reservations;
}
void OAINetwork::setReservations(const QList<OAINetworkAddressReservation> &reservations) {
    m_reservations = reservations;
    m_reservations_isSet = true;
}

bool OAINetwork::is_reservations_Set() const{
    return m_reservations_isSet;
}

bool OAINetwork::is_reservations_Valid() const{
    return m_reservations_isValid;
}

QString OAINetwork::getServicesCidr() const {
    return m_services_cidr;
}
void OAINetwork::setServicesCidr(const QString &services_cidr) {
    m_services_cidr = services_cidr;
    m_services_cidr_isSet = true;
}

bool OAINetwork::is_services_cidr_Set() const{
    return m_services_cidr_isSet;
}

bool OAINetwork::is_services_cidr_Valid() const{
    return m_services_cidr_isValid;
}

QString OAINetwork::getState() const {
    return m_state;
}
void OAINetwork::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAINetwork::is_state_Set() const{
    return m_state_isSet;
}

bool OAINetwork::is_state_Valid() const{
    return m_state_isValid;
}

QString OAINetwork::getType() const {
    return m_type;
}
void OAINetwork::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAINetwork::is_type_Set() const{
    return m_type_isSet;
}

bool OAINetwork::is_type_Valid() const{
    return m_type_isValid;
}

QString OAINetwork::getVlanId() const {
    return m_vlan_id;
}
void OAINetwork::setVlanId(const QString &vlan_id) {
    m_vlan_id = vlan_id;
    m_vlan_id_isSet = true;
}

bool OAINetwork::is_vlan_id_Set() const{
    return m_vlan_id_isSet;
}

bool OAINetwork::is_vlan_id_Valid() const{
    return m_vlan_id_isValid;
}

OAIVRF OAINetwork::getVrf() const {
    return m_vrf;
}
void OAINetwork::setVrf(const OAIVRF &vrf) {
    m_vrf = vrf;
    m_vrf_isSet = true;
}

bool OAINetwork::is_vrf_Set() const{
    return m_vrf_isSet;
}

bool OAINetwork::is_vrf_Valid() const{
    return m_vrf_isValid;
}

QString OAINetwork::getVrfAttachment() const {
    return m_vrf_attachment;
}
void OAINetwork::setVrfAttachment(const QString &vrf_attachment) {
    m_vrf_attachment = vrf_attachment;
    m_vrf_attachment_isSet = true;
}

bool OAINetwork::is_vrf_attachment_Set() const{
    return m_vrf_attachment_isSet;
}

bool OAINetwork::is_vrf_attachment_Valid() const{
    return m_vrf_attachment_isValid;
}

bool OAINetwork::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_jumbo_frames_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mount_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vrf_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetwork::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
