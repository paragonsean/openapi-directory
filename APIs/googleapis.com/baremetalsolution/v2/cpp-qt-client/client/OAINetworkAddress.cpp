/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkAddress.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkAddress::OAINetworkAddress(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkAddress::OAINetworkAddress() {
    this->initializeModel();
}

OAINetworkAddress::~OAINetworkAddress() {}

void OAINetworkAddress::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_existing_network_id_isSet = false;
    m_existing_network_id_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;
}

void OAINetworkAddress::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkAddress::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_existing_network_id_isValid = ::OpenAPI::fromJsonValue(m_existing_network_id, json[QString("existingNetworkId")]);
    m_existing_network_id_isSet = !json[QString("existingNetworkId")].isNull() && m_existing_network_id_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;
}

QString OAINetworkAddress::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkAddress::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_existing_network_id_isSet) {
        obj.insert(QString("existingNetworkId"), ::OpenAPI::toJsonValue(m_existing_network_id));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    return obj;
}

QString OAINetworkAddress::getAddress() const {
    return m_address;
}
void OAINetworkAddress::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAINetworkAddress::is_address_Set() const{
    return m_address_isSet;
}

bool OAINetworkAddress::is_address_Valid() const{
    return m_address_isValid;
}

QString OAINetworkAddress::getExistingNetworkId() const {
    return m_existing_network_id;
}
void OAINetworkAddress::setExistingNetworkId(const QString &existing_network_id) {
    m_existing_network_id = existing_network_id;
    m_existing_network_id_isSet = true;
}

bool OAINetworkAddress::is_existing_network_id_Set() const{
    return m_existing_network_id_isSet;
}

bool OAINetworkAddress::is_existing_network_id_Valid() const{
    return m_existing_network_id_isValid;
}

QString OAINetworkAddress::getNetworkId() const {
    return m_network_id;
}
void OAINetworkAddress::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAINetworkAddress::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAINetworkAddress::is_network_id_Valid() const{
    return m_network_id_isValid;
}

bool OAINetworkAddress::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_existing_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkAddress::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
