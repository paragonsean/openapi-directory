/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningConfig::OAIProvisioningConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningConfig::OAIProvisioningConfig() {
    this->initializeModel();
}

OAIProvisioningConfig::~OAIProvisioningConfig() {}

void OAIProvisioningConfig::initializeModel() {

    m_cloud_console_uri_isSet = false;
    m_cloud_console_uri_isValid = false;

    m_custom_id_isSet = false;
    m_custom_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_handover_service_account_isSet = false;
    m_handover_service_account_isValid = false;

    m_instances_isSet = false;
    m_instances_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_networks_isSet = false;
    m_networks_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_ticket_id_isSet = false;
    m_ticket_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_volumes_isSet = false;
    m_volumes_isValid = false;

    m_vpc_sc_enabled_isSet = false;
    m_vpc_sc_enabled_isValid = false;
}

void OAIProvisioningConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProvisioningConfig::fromJsonObject(QJsonObject json) {

    m_cloud_console_uri_isValid = ::OpenAPI::fromJsonValue(m_cloud_console_uri, json[QString("cloudConsoleUri")]);
    m_cloud_console_uri_isSet = !json[QString("cloudConsoleUri")].isNull() && m_cloud_console_uri_isValid;

    m_custom_id_isValid = ::OpenAPI::fromJsonValue(m_custom_id, json[QString("customId")]);
    m_custom_id_isSet = !json[QString("customId")].isNull() && m_custom_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_handover_service_account_isValid = ::OpenAPI::fromJsonValue(m_handover_service_account, json[QString("handoverServiceAccount")]);
    m_handover_service_account_isSet = !json[QString("handoverServiceAccount")].isNull() && m_handover_service_account_isValid;

    m_instances_isValid = ::OpenAPI::fromJsonValue(m_instances, json[QString("instances")]);
    m_instances_isSet = !json[QString("instances")].isNull() && m_instances_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_networks_isValid = ::OpenAPI::fromJsonValue(m_networks, json[QString("networks")]);
    m_networks_isSet = !json[QString("networks")].isNull() && m_networks_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_ticket_id_isValid = ::OpenAPI::fromJsonValue(m_ticket_id, json[QString("ticketId")]);
    m_ticket_id_isSet = !json[QString("ticketId")].isNull() && m_ticket_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_volumes_isValid = ::OpenAPI::fromJsonValue(m_volumes, json[QString("volumes")]);
    m_volumes_isSet = !json[QString("volumes")].isNull() && m_volumes_isValid;

    m_vpc_sc_enabled_isValid = ::OpenAPI::fromJsonValue(m_vpc_sc_enabled, json[QString("vpcScEnabled")]);
    m_vpc_sc_enabled_isSet = !json[QString("vpcScEnabled")].isNull() && m_vpc_sc_enabled_isValid;
}

QString OAIProvisioningConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProvisioningConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_console_uri_isSet) {
        obj.insert(QString("cloudConsoleUri"), ::OpenAPI::toJsonValue(m_cloud_console_uri));
    }
    if (m_custom_id_isSet) {
        obj.insert(QString("customId"), ::OpenAPI::toJsonValue(m_custom_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_handover_service_account_isSet) {
        obj.insert(QString("handoverServiceAccount"), ::OpenAPI::toJsonValue(m_handover_service_account));
    }
    if (m_instances.size() > 0) {
        obj.insert(QString("instances"), ::OpenAPI::toJsonValue(m_instances));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_networks.size() > 0) {
        obj.insert(QString("networks"), ::OpenAPI::toJsonValue(m_networks));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_ticket_id_isSet) {
        obj.insert(QString("ticketId"), ::OpenAPI::toJsonValue(m_ticket_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_volumes.size() > 0) {
        obj.insert(QString("volumes"), ::OpenAPI::toJsonValue(m_volumes));
    }
    if (m_vpc_sc_enabled_isSet) {
        obj.insert(QString("vpcScEnabled"), ::OpenAPI::toJsonValue(m_vpc_sc_enabled));
    }
    return obj;
}

QString OAIProvisioningConfig::getCloudConsoleUri() const {
    return m_cloud_console_uri;
}
void OAIProvisioningConfig::setCloudConsoleUri(const QString &cloud_console_uri) {
    m_cloud_console_uri = cloud_console_uri;
    m_cloud_console_uri_isSet = true;
}

bool OAIProvisioningConfig::is_cloud_console_uri_Set() const{
    return m_cloud_console_uri_isSet;
}

bool OAIProvisioningConfig::is_cloud_console_uri_Valid() const{
    return m_cloud_console_uri_isValid;
}

QString OAIProvisioningConfig::getCustomId() const {
    return m_custom_id;
}
void OAIProvisioningConfig::setCustomId(const QString &custom_id) {
    m_custom_id = custom_id;
    m_custom_id_isSet = true;
}

bool OAIProvisioningConfig::is_custom_id_Set() const{
    return m_custom_id_isSet;
}

bool OAIProvisioningConfig::is_custom_id_Valid() const{
    return m_custom_id_isValid;
}

QString OAIProvisioningConfig::getEmail() const {
    return m_email;
}
void OAIProvisioningConfig::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIProvisioningConfig::is_email_Set() const{
    return m_email_isSet;
}

bool OAIProvisioningConfig::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIProvisioningConfig::getHandoverServiceAccount() const {
    return m_handover_service_account;
}
void OAIProvisioningConfig::setHandoverServiceAccount(const QString &handover_service_account) {
    m_handover_service_account = handover_service_account;
    m_handover_service_account_isSet = true;
}

bool OAIProvisioningConfig::is_handover_service_account_Set() const{
    return m_handover_service_account_isSet;
}

bool OAIProvisioningConfig::is_handover_service_account_Valid() const{
    return m_handover_service_account_isValid;
}

QList<OAIInstanceConfig> OAIProvisioningConfig::getInstances() const {
    return m_instances;
}
void OAIProvisioningConfig::setInstances(const QList<OAIInstanceConfig> &instances) {
    m_instances = instances;
    m_instances_isSet = true;
}

bool OAIProvisioningConfig::is_instances_Set() const{
    return m_instances_isSet;
}

bool OAIProvisioningConfig::is_instances_Valid() const{
    return m_instances_isValid;
}

QString OAIProvisioningConfig::getLocation() const {
    return m_location;
}
void OAIProvisioningConfig::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProvisioningConfig::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProvisioningConfig::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIProvisioningConfig::getName() const {
    return m_name;
}
void OAIProvisioningConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProvisioningConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProvisioningConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINetworkConfig> OAIProvisioningConfig::getNetworks() const {
    return m_networks;
}
void OAIProvisioningConfig::setNetworks(const QList<OAINetworkConfig> &networks) {
    m_networks = networks;
    m_networks_isSet = true;
}

bool OAIProvisioningConfig::is_networks_Set() const{
    return m_networks_isSet;
}

bool OAIProvisioningConfig::is_networks_Valid() const{
    return m_networks_isValid;
}

QString OAIProvisioningConfig::getPod() const {
    return m_pod;
}
void OAIProvisioningConfig::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIProvisioningConfig::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIProvisioningConfig::is_pod_Valid() const{
    return m_pod_isValid;
}

QString OAIProvisioningConfig::getState() const {
    return m_state;
}
void OAIProvisioningConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProvisioningConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProvisioningConfig::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIProvisioningConfig::getStatusMessage() const {
    return m_status_message;
}
void OAIProvisioningConfig::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIProvisioningConfig::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIProvisioningConfig::is_status_message_Valid() const{
    return m_status_message_isValid;
}

QString OAIProvisioningConfig::getTicketId() const {
    return m_ticket_id;
}
void OAIProvisioningConfig::setTicketId(const QString &ticket_id) {
    m_ticket_id = ticket_id;
    m_ticket_id_isSet = true;
}

bool OAIProvisioningConfig::is_ticket_id_Set() const{
    return m_ticket_id_isSet;
}

bool OAIProvisioningConfig::is_ticket_id_Valid() const{
    return m_ticket_id_isValid;
}

QString OAIProvisioningConfig::getUpdateTime() const {
    return m_update_time;
}
void OAIProvisioningConfig::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIProvisioningConfig::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIProvisioningConfig::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QList<OAIVolumeConfig> OAIProvisioningConfig::getVolumes() const {
    return m_volumes;
}
void OAIProvisioningConfig::setVolumes(const QList<OAIVolumeConfig> &volumes) {
    m_volumes = volumes;
    m_volumes_isSet = true;
}

bool OAIProvisioningConfig::is_volumes_Set() const{
    return m_volumes_isSet;
}

bool OAIProvisioningConfig::is_volumes_Valid() const{
    return m_volumes_isValid;
}

bool OAIProvisioningConfig::isVpcScEnabled() const {
    return m_vpc_sc_enabled;
}
void OAIProvisioningConfig::setVpcScEnabled(const bool &vpc_sc_enabled) {
    m_vpc_sc_enabled = vpc_sc_enabled;
    m_vpc_sc_enabled_isSet = true;
}

bool OAIProvisioningConfig::is_vpc_sc_enabled_Set() const{
    return m_vpc_sc_enabled_isSet;
}

bool OAIProvisioningConfig::is_vpc_sc_enabled_Valid() const{
    return m_vpc_sc_enabled_isValid;
}

bool OAIProvisioningConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_console_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_handover_service_account_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ticket_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_volumes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_sc_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProvisioningConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
