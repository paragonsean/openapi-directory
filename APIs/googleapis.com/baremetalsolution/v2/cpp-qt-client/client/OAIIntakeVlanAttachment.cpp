/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntakeVlanAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntakeVlanAttachment::OAIIntakeVlanAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntakeVlanAttachment::OAIIntakeVlanAttachment() {
    this->initializeModel();
}

OAIIntakeVlanAttachment::~OAIIntakeVlanAttachment() {}

void OAIIntakeVlanAttachment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_pairing_key_isSet = false;
    m_pairing_key_isValid = false;
}

void OAIIntakeVlanAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntakeVlanAttachment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_pairing_key_isValid = ::OpenAPI::fromJsonValue(m_pairing_key, json[QString("pairingKey")]);
    m_pairing_key_isSet = !json[QString("pairingKey")].isNull() && m_pairing_key_isValid;
}

QString OAIIntakeVlanAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntakeVlanAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_pairing_key_isSet) {
        obj.insert(QString("pairingKey"), ::OpenAPI::toJsonValue(m_pairing_key));
    }
    return obj;
}

QString OAIIntakeVlanAttachment::getId() const {
    return m_id;
}
void OAIIntakeVlanAttachment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIIntakeVlanAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIIntakeVlanAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIIntakeVlanAttachment::getPairingKey() const {
    return m_pairing_key;
}
void OAIIntakeVlanAttachment::setPairingKey(const QString &pairing_key) {
    m_pairing_key = pairing_key;
    m_pairing_key_isSet = true;
}

bool OAIIntakeVlanAttachment::is_pairing_key_Set() const{
    return m_pairing_key_isSet;
}

bool OAIIntakeVlanAttachment::is_pairing_key_Valid() const{
    return m_pairing_key_isValid;
}

bool OAIIntakeVlanAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pairing_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntakeVlanAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
