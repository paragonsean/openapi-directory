/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetworkConfig.h
 *
 * Configuration parameters for a new network.
 */

#ifndef OAINetworkConfig_H
#define OAINetworkConfig_H

#include <QJsonObject>

#include "OAIIntakeVlanAttachment.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIntakeVlanAttachment;

class OAINetworkConfig : public OAIObject {
public:
    OAINetworkConfig();
    OAINetworkConfig(QString json);
    ~OAINetworkConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBandwidth() const;
    void setBandwidth(const QString &bandwidth);
    bool is_bandwidth_Set() const;
    bool is_bandwidth_Valid() const;

    QString getCidr() const;
    void setCidr(const QString &cidr);
    bool is_cidr_Set() const;
    bool is_cidr_Valid() const;

    QString getGcpService() const;
    void setGcpService(const QString &gcp_service);
    bool is_gcp_service_Set() const;
    bool is_gcp_service_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    bool isJumboFramesEnabled() const;
    void setJumboFramesEnabled(const bool &jumbo_frames_enabled);
    bool is_jumbo_frames_enabled_Set() const;
    bool is_jumbo_frames_enabled_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getServiceCidr() const;
    void setServiceCidr(const QString &service_cidr);
    bool is_service_cidr_Set() const;
    bool is_service_cidr_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getUserNote() const;
    void setUserNote(const QString &user_note);
    bool is_user_note_Set() const;
    bool is_user_note_Valid() const;

    QList<OAIIntakeVlanAttachment> getVlanAttachments() const;
    void setVlanAttachments(const QList<OAIIntakeVlanAttachment> &vlan_attachments);
    bool is_vlan_attachments_Set() const;
    bool is_vlan_attachments_Valid() const;

    bool isVlanSameProject() const;
    void setVlanSameProject(const bool &vlan_same_project);
    bool is_vlan_same_project_Set() const;
    bool is_vlan_same_project_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bandwidth;
    bool m_bandwidth_isSet;
    bool m_bandwidth_isValid;

    QString m_cidr;
    bool m_cidr_isSet;
    bool m_cidr_isValid;

    QString m_gcp_service;
    bool m_gcp_service_isSet;
    bool m_gcp_service_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    bool m_jumbo_frames_enabled;
    bool m_jumbo_frames_enabled_isSet;
    bool m_jumbo_frames_enabled_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_service_cidr;
    bool m_service_cidr_isSet;
    bool m_service_cidr_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_user_note;
    bool m_user_note_isSet;
    bool m_user_note_isValid;

    QList<OAIIntakeVlanAttachment> m_vlan_attachments;
    bool m_vlan_attachments_isSet;
    bool m_vlan_attachments_isValid;

    bool m_vlan_same_project;
    bool m_vlan_same_project_isSet;
    bool m_vlan_same_project_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetworkConfig)

#endif // OAINetworkConfig_H
