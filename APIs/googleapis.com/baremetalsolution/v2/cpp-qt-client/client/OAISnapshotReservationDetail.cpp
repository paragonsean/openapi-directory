/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISnapshotReservationDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISnapshotReservationDetail::OAISnapshotReservationDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISnapshotReservationDetail::OAISnapshotReservationDetail() {
    this->initializeModel();
}

OAISnapshotReservationDetail::~OAISnapshotReservationDetail() {}

void OAISnapshotReservationDetail::initializeModel() {

    m_reserved_space_gib_isSet = false;
    m_reserved_space_gib_isValid = false;

    m_reserved_space_percent_isSet = false;
    m_reserved_space_percent_isValid = false;

    m_reserved_space_remaining_gib_isSet = false;
    m_reserved_space_remaining_gib_isValid = false;

    m_reserved_space_used_percent_isSet = false;
    m_reserved_space_used_percent_isValid = false;
}

void OAISnapshotReservationDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISnapshotReservationDetail::fromJsonObject(QJsonObject json) {

    m_reserved_space_gib_isValid = ::OpenAPI::fromJsonValue(m_reserved_space_gib, json[QString("reservedSpaceGib")]);
    m_reserved_space_gib_isSet = !json[QString("reservedSpaceGib")].isNull() && m_reserved_space_gib_isValid;

    m_reserved_space_percent_isValid = ::OpenAPI::fromJsonValue(m_reserved_space_percent, json[QString("reservedSpacePercent")]);
    m_reserved_space_percent_isSet = !json[QString("reservedSpacePercent")].isNull() && m_reserved_space_percent_isValid;

    m_reserved_space_remaining_gib_isValid = ::OpenAPI::fromJsonValue(m_reserved_space_remaining_gib, json[QString("reservedSpaceRemainingGib")]);
    m_reserved_space_remaining_gib_isSet = !json[QString("reservedSpaceRemainingGib")].isNull() && m_reserved_space_remaining_gib_isValid;

    m_reserved_space_used_percent_isValid = ::OpenAPI::fromJsonValue(m_reserved_space_used_percent, json[QString("reservedSpaceUsedPercent")]);
    m_reserved_space_used_percent_isSet = !json[QString("reservedSpaceUsedPercent")].isNull() && m_reserved_space_used_percent_isValid;
}

QString OAISnapshotReservationDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISnapshotReservationDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_reserved_space_gib_isSet) {
        obj.insert(QString("reservedSpaceGib"), ::OpenAPI::toJsonValue(m_reserved_space_gib));
    }
    if (m_reserved_space_percent_isSet) {
        obj.insert(QString("reservedSpacePercent"), ::OpenAPI::toJsonValue(m_reserved_space_percent));
    }
    if (m_reserved_space_remaining_gib_isSet) {
        obj.insert(QString("reservedSpaceRemainingGib"), ::OpenAPI::toJsonValue(m_reserved_space_remaining_gib));
    }
    if (m_reserved_space_used_percent_isSet) {
        obj.insert(QString("reservedSpaceUsedPercent"), ::OpenAPI::toJsonValue(m_reserved_space_used_percent));
    }
    return obj;
}

QString OAISnapshotReservationDetail::getReservedSpaceGib() const {
    return m_reserved_space_gib;
}
void OAISnapshotReservationDetail::setReservedSpaceGib(const QString &reserved_space_gib) {
    m_reserved_space_gib = reserved_space_gib;
    m_reserved_space_gib_isSet = true;
}

bool OAISnapshotReservationDetail::is_reserved_space_gib_Set() const{
    return m_reserved_space_gib_isSet;
}

bool OAISnapshotReservationDetail::is_reserved_space_gib_Valid() const{
    return m_reserved_space_gib_isValid;
}

qint32 OAISnapshotReservationDetail::getReservedSpacePercent() const {
    return m_reserved_space_percent;
}
void OAISnapshotReservationDetail::setReservedSpacePercent(const qint32 &reserved_space_percent) {
    m_reserved_space_percent = reserved_space_percent;
    m_reserved_space_percent_isSet = true;
}

bool OAISnapshotReservationDetail::is_reserved_space_percent_Set() const{
    return m_reserved_space_percent_isSet;
}

bool OAISnapshotReservationDetail::is_reserved_space_percent_Valid() const{
    return m_reserved_space_percent_isValid;
}

QString OAISnapshotReservationDetail::getReservedSpaceRemainingGib() const {
    return m_reserved_space_remaining_gib;
}
void OAISnapshotReservationDetail::setReservedSpaceRemainingGib(const QString &reserved_space_remaining_gib) {
    m_reserved_space_remaining_gib = reserved_space_remaining_gib;
    m_reserved_space_remaining_gib_isSet = true;
}

bool OAISnapshotReservationDetail::is_reserved_space_remaining_gib_Set() const{
    return m_reserved_space_remaining_gib_isSet;
}

bool OAISnapshotReservationDetail::is_reserved_space_remaining_gib_Valid() const{
    return m_reserved_space_remaining_gib_isValid;
}

qint32 OAISnapshotReservationDetail::getReservedSpaceUsedPercent() const {
    return m_reserved_space_used_percent;
}
void OAISnapshotReservationDetail::setReservedSpaceUsedPercent(const qint32 &reserved_space_used_percent) {
    m_reserved_space_used_percent = reserved_space_used_percent;
    m_reserved_space_used_percent_isSet = true;
}

bool OAISnapshotReservationDetail::is_reserved_space_used_percent_Set() const{
    return m_reserved_space_used_percent_isSet;
}

bool OAISnapshotReservationDetail::is_reserved_space_used_percent_Valid() const{
    return m_reserved_space_used_percent_isValid;
}

bool OAISnapshotReservationDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reserved_space_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_space_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_space_remaining_gib_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reserved_space_used_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISnapshotReservationDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
