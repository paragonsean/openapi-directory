/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVolumeConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVolumeConfig::OAIVolumeConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVolumeConfig::OAIVolumeConfig() {
    this->initializeModel();
}

OAIVolumeConfig::~OAIVolumeConfig() {}

void OAIVolumeConfig::initializeModel() {

    m_gcp_service_isSet = false;
    m_gcp_service_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lun_ranges_isSet = false;
    m_lun_ranges_isValid = false;

    m_machine_ids_isSet = false;
    m_machine_ids_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_nfs_exports_isSet = false;
    m_nfs_exports_isValid = false;

    m_performance_tier_isSet = false;
    m_performance_tier_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_size_gb_isSet = false;
    m_size_gb_isValid = false;

    m_snapshots_enabled_isSet = false;
    m_snapshots_enabled_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_note_isSet = false;
    m_user_note_isValid = false;
}

void OAIVolumeConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVolumeConfig::fromJsonObject(QJsonObject json) {

    m_gcp_service_isValid = ::OpenAPI::fromJsonValue(m_gcp_service, json[QString("gcpService")]);
    m_gcp_service_isSet = !json[QString("gcpService")].isNull() && m_gcp_service_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lun_ranges_isValid = ::OpenAPI::fromJsonValue(m_lun_ranges, json[QString("lunRanges")]);
    m_lun_ranges_isSet = !json[QString("lunRanges")].isNull() && m_lun_ranges_isValid;

    m_machine_ids_isValid = ::OpenAPI::fromJsonValue(m_machine_ids, json[QString("machineIds")]);
    m_machine_ids_isSet = !json[QString("machineIds")].isNull() && m_machine_ids_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_nfs_exports_isValid = ::OpenAPI::fromJsonValue(m_nfs_exports, json[QString("nfsExports")]);
    m_nfs_exports_isSet = !json[QString("nfsExports")].isNull() && m_nfs_exports_isValid;

    m_performance_tier_isValid = ::OpenAPI::fromJsonValue(m_performance_tier, json[QString("performanceTier")]);
    m_performance_tier_isSet = !json[QString("performanceTier")].isNull() && m_performance_tier_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_size_gb_isValid = ::OpenAPI::fromJsonValue(m_size_gb, json[QString("sizeGb")]);
    m_size_gb_isSet = !json[QString("sizeGb")].isNull() && m_size_gb_isValid;

    m_snapshots_enabled_isValid = ::OpenAPI::fromJsonValue(m_snapshots_enabled, json[QString("snapshotsEnabled")]);
    m_snapshots_enabled_isSet = !json[QString("snapshotsEnabled")].isNull() && m_snapshots_enabled_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_note_isValid = ::OpenAPI::fromJsonValue(m_user_note, json[QString("userNote")]);
    m_user_note_isSet = !json[QString("userNote")].isNull() && m_user_note_isValid;
}

QString OAIVolumeConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVolumeConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gcp_service_isSet) {
        obj.insert(QString("gcpService"), ::OpenAPI::toJsonValue(m_gcp_service));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lun_ranges.size() > 0) {
        obj.insert(QString("lunRanges"), ::OpenAPI::toJsonValue(m_lun_ranges));
    }
    if (m_machine_ids.size() > 0) {
        obj.insert(QString("machineIds"), ::OpenAPI::toJsonValue(m_machine_ids));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_nfs_exports.size() > 0) {
        obj.insert(QString("nfsExports"), ::OpenAPI::toJsonValue(m_nfs_exports));
    }
    if (m_performance_tier_isSet) {
        obj.insert(QString("performanceTier"), ::OpenAPI::toJsonValue(m_performance_tier));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_size_gb_isSet) {
        obj.insert(QString("sizeGb"), ::OpenAPI::toJsonValue(m_size_gb));
    }
    if (m_snapshots_enabled_isSet) {
        obj.insert(QString("snapshotsEnabled"), ::OpenAPI::toJsonValue(m_snapshots_enabled));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_note_isSet) {
        obj.insert(QString("userNote"), ::OpenAPI::toJsonValue(m_user_note));
    }
    return obj;
}

QString OAIVolumeConfig::getGcpService() const {
    return m_gcp_service;
}
void OAIVolumeConfig::setGcpService(const QString &gcp_service) {
    m_gcp_service = gcp_service;
    m_gcp_service_isSet = true;
}

bool OAIVolumeConfig::is_gcp_service_Set() const{
    return m_gcp_service_isSet;
}

bool OAIVolumeConfig::is_gcp_service_Valid() const{
    return m_gcp_service_isValid;
}

QString OAIVolumeConfig::getId() const {
    return m_id;
}
void OAIVolumeConfig::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVolumeConfig::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVolumeConfig::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILunRange> OAIVolumeConfig::getLunRanges() const {
    return m_lun_ranges;
}
void OAIVolumeConfig::setLunRanges(const QList<OAILunRange> &lun_ranges) {
    m_lun_ranges = lun_ranges;
    m_lun_ranges_isSet = true;
}

bool OAIVolumeConfig::is_lun_ranges_Set() const{
    return m_lun_ranges_isSet;
}

bool OAIVolumeConfig::is_lun_ranges_Valid() const{
    return m_lun_ranges_isValid;
}

QList<QString> OAIVolumeConfig::getMachineIds() const {
    return m_machine_ids;
}
void OAIVolumeConfig::setMachineIds(const QList<QString> &machine_ids) {
    m_machine_ids = machine_ids;
    m_machine_ids_isSet = true;
}

bool OAIVolumeConfig::is_machine_ids_Set() const{
    return m_machine_ids_isSet;
}

bool OAIVolumeConfig::is_machine_ids_Valid() const{
    return m_machine_ids_isValid;
}

QString OAIVolumeConfig::getName() const {
    return m_name;
}
void OAIVolumeConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVolumeConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVolumeConfig::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAINfsExport> OAIVolumeConfig::getNfsExports() const {
    return m_nfs_exports;
}
void OAIVolumeConfig::setNfsExports(const QList<OAINfsExport> &nfs_exports) {
    m_nfs_exports = nfs_exports;
    m_nfs_exports_isSet = true;
}

bool OAIVolumeConfig::is_nfs_exports_Set() const{
    return m_nfs_exports_isSet;
}

bool OAIVolumeConfig::is_nfs_exports_Valid() const{
    return m_nfs_exports_isValid;
}

QString OAIVolumeConfig::getPerformanceTier() const {
    return m_performance_tier;
}
void OAIVolumeConfig::setPerformanceTier(const QString &performance_tier) {
    m_performance_tier = performance_tier;
    m_performance_tier_isSet = true;
}

bool OAIVolumeConfig::is_performance_tier_Set() const{
    return m_performance_tier_isSet;
}

bool OAIVolumeConfig::is_performance_tier_Valid() const{
    return m_performance_tier_isValid;
}

QString OAIVolumeConfig::getProtocol() const {
    return m_protocol;
}
void OAIVolumeConfig::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIVolumeConfig::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIVolumeConfig::is_protocol_Valid() const{
    return m_protocol_isValid;
}

qint32 OAIVolumeConfig::getSizeGb() const {
    return m_size_gb;
}
void OAIVolumeConfig::setSizeGb(const qint32 &size_gb) {
    m_size_gb = size_gb;
    m_size_gb_isSet = true;
}

bool OAIVolumeConfig::is_size_gb_Set() const{
    return m_size_gb_isSet;
}

bool OAIVolumeConfig::is_size_gb_Valid() const{
    return m_size_gb_isValid;
}

bool OAIVolumeConfig::isSnapshotsEnabled() const {
    return m_snapshots_enabled;
}
void OAIVolumeConfig::setSnapshotsEnabled(const bool &snapshots_enabled) {
    m_snapshots_enabled = snapshots_enabled;
    m_snapshots_enabled_isSet = true;
}

bool OAIVolumeConfig::is_snapshots_enabled_Set() const{
    return m_snapshots_enabled_isSet;
}

bool OAIVolumeConfig::is_snapshots_enabled_Valid() const{
    return m_snapshots_enabled_isValid;
}

QString OAIVolumeConfig::getType() const {
    return m_type;
}
void OAIVolumeConfig::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVolumeConfig::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVolumeConfig::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIVolumeConfig::getUserNote() const {
    return m_user_note;
}
void OAIVolumeConfig::setUserNote(const QString &user_note) {
    m_user_note = user_note;
    m_user_note_isSet = true;
}

bool OAIVolumeConfig::is_user_note_Set() const{
    return m_user_note_isSet;
}

bool OAIVolumeConfig::is_user_note_Valid() const{
    return m_user_note_isValid;
}

bool OAIVolumeConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcp_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lun_ranges.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nfs_exports.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_performance_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshots_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_note_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVolumeConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
