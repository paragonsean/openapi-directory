/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINfsExport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINfsExport::OAINfsExport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINfsExport::OAINfsExport() {
    this->initializeModel();
}

OAINfsExport::~OAINfsExport() {}

void OAINfsExport::initializeModel() {

    m_allow_dev_isSet = false;
    m_allow_dev_isValid = false;

    m_allow_suid_isSet = false;
    m_allow_suid_isValid = false;

    m_cidr_isSet = false;
    m_cidr_isValid = false;

    m_machine_id_isSet = false;
    m_machine_id_isValid = false;

    m_network_id_isSet = false;
    m_network_id_isValid = false;

    m_no_root_squash_isSet = false;
    m_no_root_squash_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;
}

void OAINfsExport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINfsExport::fromJsonObject(QJsonObject json) {

    m_allow_dev_isValid = ::OpenAPI::fromJsonValue(m_allow_dev, json[QString("allowDev")]);
    m_allow_dev_isSet = !json[QString("allowDev")].isNull() && m_allow_dev_isValid;

    m_allow_suid_isValid = ::OpenAPI::fromJsonValue(m_allow_suid, json[QString("allowSuid")]);
    m_allow_suid_isSet = !json[QString("allowSuid")].isNull() && m_allow_suid_isValid;

    m_cidr_isValid = ::OpenAPI::fromJsonValue(m_cidr, json[QString("cidr")]);
    m_cidr_isSet = !json[QString("cidr")].isNull() && m_cidr_isValid;

    m_machine_id_isValid = ::OpenAPI::fromJsonValue(m_machine_id, json[QString("machineId")]);
    m_machine_id_isSet = !json[QString("machineId")].isNull() && m_machine_id_isValid;

    m_network_id_isValid = ::OpenAPI::fromJsonValue(m_network_id, json[QString("networkId")]);
    m_network_id_isSet = !json[QString("networkId")].isNull() && m_network_id_isValid;

    m_no_root_squash_isValid = ::OpenAPI::fromJsonValue(m_no_root_squash, json[QString("noRootSquash")]);
    m_no_root_squash_isSet = !json[QString("noRootSquash")].isNull() && m_no_root_squash_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;
}

QString OAINfsExport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINfsExport::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_dev_isSet) {
        obj.insert(QString("allowDev"), ::OpenAPI::toJsonValue(m_allow_dev));
    }
    if (m_allow_suid_isSet) {
        obj.insert(QString("allowSuid"), ::OpenAPI::toJsonValue(m_allow_suid));
    }
    if (m_cidr_isSet) {
        obj.insert(QString("cidr"), ::OpenAPI::toJsonValue(m_cidr));
    }
    if (m_machine_id_isSet) {
        obj.insert(QString("machineId"), ::OpenAPI::toJsonValue(m_machine_id));
    }
    if (m_network_id_isSet) {
        obj.insert(QString("networkId"), ::OpenAPI::toJsonValue(m_network_id));
    }
    if (m_no_root_squash_isSet) {
        obj.insert(QString("noRootSquash"), ::OpenAPI::toJsonValue(m_no_root_squash));
    }
    if (m_permissions_isSet) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    return obj;
}

bool OAINfsExport::isAllowDev() const {
    return m_allow_dev;
}
void OAINfsExport::setAllowDev(const bool &allow_dev) {
    m_allow_dev = allow_dev;
    m_allow_dev_isSet = true;
}

bool OAINfsExport::is_allow_dev_Set() const{
    return m_allow_dev_isSet;
}

bool OAINfsExport::is_allow_dev_Valid() const{
    return m_allow_dev_isValid;
}

bool OAINfsExport::isAllowSuid() const {
    return m_allow_suid;
}
void OAINfsExport::setAllowSuid(const bool &allow_suid) {
    m_allow_suid = allow_suid;
    m_allow_suid_isSet = true;
}

bool OAINfsExport::is_allow_suid_Set() const{
    return m_allow_suid_isSet;
}

bool OAINfsExport::is_allow_suid_Valid() const{
    return m_allow_suid_isValid;
}

QString OAINfsExport::getCidr() const {
    return m_cidr;
}
void OAINfsExport::setCidr(const QString &cidr) {
    m_cidr = cidr;
    m_cidr_isSet = true;
}

bool OAINfsExport::is_cidr_Set() const{
    return m_cidr_isSet;
}

bool OAINfsExport::is_cidr_Valid() const{
    return m_cidr_isValid;
}

QString OAINfsExport::getMachineId() const {
    return m_machine_id;
}
void OAINfsExport::setMachineId(const QString &machine_id) {
    m_machine_id = machine_id;
    m_machine_id_isSet = true;
}

bool OAINfsExport::is_machine_id_Set() const{
    return m_machine_id_isSet;
}

bool OAINfsExport::is_machine_id_Valid() const{
    return m_machine_id_isValid;
}

QString OAINfsExport::getNetworkId() const {
    return m_network_id;
}
void OAINfsExport::setNetworkId(const QString &network_id) {
    m_network_id = network_id;
    m_network_id_isSet = true;
}

bool OAINfsExport::is_network_id_Set() const{
    return m_network_id_isSet;
}

bool OAINfsExport::is_network_id_Valid() const{
    return m_network_id_isValid;
}

bool OAINfsExport::isNoRootSquash() const {
    return m_no_root_squash;
}
void OAINfsExport::setNoRootSquash(const bool &no_root_squash) {
    m_no_root_squash = no_root_squash;
    m_no_root_squash_isSet = true;
}

bool OAINfsExport::is_no_root_squash_Set() const{
    return m_no_root_squash_isSet;
}

bool OAINfsExport::is_no_root_squash_Valid() const{
    return m_no_root_squash_isValid;
}

QString OAINfsExport::getPermissions() const {
    return m_permissions;
}
void OAINfsExport::setPermissions(const QString &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAINfsExport::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAINfsExport::is_permissions_Valid() const{
    return m_permissions_isValid;
}

bool OAINfsExport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_dev_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_allow_suid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cidr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_machine_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_no_root_squash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINfsExport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
