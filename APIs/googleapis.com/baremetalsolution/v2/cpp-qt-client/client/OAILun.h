/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILun.h
 *
 * A storage volume logical unit number (LUN).
 */

#ifndef OAILun_H
#define OAILun_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILun : public OAIObject {
public:
    OAILun();
    OAILun(QString json);
    ~OAILun() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isBootLun() const;
    void setBootLun(const bool &boot_lun);
    bool is_boot_lun_Set() const;
    bool is_boot_lun_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getInstances() const;
    void setInstances(const QList<QString> &instances);
    bool is_instances_Set() const;
    bool is_instances_Valid() const;

    QString getMultiprotocolType() const;
    void setMultiprotocolType(const QString &multiprotocol_type);
    bool is_multiprotocol_type_Set() const;
    bool is_multiprotocol_type_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    bool isShareable() const;
    void setShareable(const bool &shareable);
    bool is_shareable_Set() const;
    bool is_shareable_Valid() const;

    QString getSizeGb() const;
    void setSizeGb(const QString &size_gb);
    bool is_size_gb_Set() const;
    bool is_size_gb_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getStorageVolume() const;
    void setStorageVolume(const QString &storage_volume);
    bool is_storage_volume_Set() const;
    bool is_storage_volume_Valid() const;

    QString getWwid() const;
    void setWwid(const QString &wwid);
    bool is_wwid_Set() const;
    bool is_wwid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_boot_lun;
    bool m_boot_lun_isSet;
    bool m_boot_lun_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_instances;
    bool m_instances_isSet;
    bool m_instances_isValid;

    QString m_multiprotocol_type;
    bool m_multiprotocol_type_isSet;
    bool m_multiprotocol_type_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    bool m_shareable;
    bool m_shareable_isSet;
    bool m_shareable_isValid;

    QString m_size_gb;
    bool m_size_gb_isSet;
    bool m_size_gb_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_storage_volume;
    bool m_storage_volume_isSet;
    bool m_storage_volume_isValid;

    QString m_wwid;
    bool m_wwid_isSet;
    bool m_wwid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILun)

#endif // OAILun_H
