/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVRF.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVRF::OAIVRF(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVRF::OAIVRF() {
    this->initializeModel();
}

OAIVRF::~OAIVRF() {}

void OAIVRF::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_qos_policy_isSet = false;
    m_qos_policy_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_vlan_attachments_isSet = false;
    m_vlan_attachments_isValid = false;
}

void OAIVRF::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVRF::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_qos_policy_isValid = ::OpenAPI::fromJsonValue(m_qos_policy, json[QString("qosPolicy")]);
    m_qos_policy_isSet = !json[QString("qosPolicy")].isNull() && m_qos_policy_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_vlan_attachments_isValid = ::OpenAPI::fromJsonValue(m_vlan_attachments, json[QString("vlanAttachments")]);
    m_vlan_attachments_isSet = !json[QString("vlanAttachments")].isNull() && m_vlan_attachments_isValid;
}

QString OAIVRF::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVRF::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_qos_policy.isSet()) {
        obj.insert(QString("qosPolicy"), ::OpenAPI::toJsonValue(m_qos_policy));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_vlan_attachments.size() > 0) {
        obj.insert(QString("vlanAttachments"), ::OpenAPI::toJsonValue(m_vlan_attachments));
    }
    return obj;
}

QString OAIVRF::getName() const {
    return m_name;
}
void OAIVRF::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIVRF::is_name_Set() const{
    return m_name_isSet;
}

bool OAIVRF::is_name_Valid() const{
    return m_name_isValid;
}

OAIQosPolicy OAIVRF::getQosPolicy() const {
    return m_qos_policy;
}
void OAIVRF::setQosPolicy(const OAIQosPolicy &qos_policy) {
    m_qos_policy = qos_policy;
    m_qos_policy_isSet = true;
}

bool OAIVRF::is_qos_policy_Set() const{
    return m_qos_policy_isSet;
}

bool OAIVRF::is_qos_policy_Valid() const{
    return m_qos_policy_isValid;
}

QString OAIVRF::getState() const {
    return m_state;
}
void OAIVRF::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVRF::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVRF::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAIVlanAttachment> OAIVRF::getVlanAttachments() const {
    return m_vlan_attachments;
}
void OAIVRF::setVlanAttachments(const QList<OAIVlanAttachment> &vlan_attachments) {
    m_vlan_attachments = vlan_attachments;
    m_vlan_attachments_isSet = true;
}

bool OAIVRF::is_vlan_attachments_Set() const{
    return m_vlan_attachments_isSet;
}

bool OAIVRF::is_vlan_attachments_Valid() const{
    return m_vlan_attachments_isValid;
}

bool OAIVRF::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qos_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vlan_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVRF::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
