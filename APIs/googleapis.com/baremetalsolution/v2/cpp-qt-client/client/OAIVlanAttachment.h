/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVlanAttachment.h
 *
 * VLAN attachment details.
 */

#ifndef OAIVlanAttachment_H
#define OAIVlanAttachment_H

#include <QJsonObject>

#include "OAIQosPolicy.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIQosPolicy;

class OAIVlanAttachment : public OAIObject {
public:
    OAIVlanAttachment();
    OAIVlanAttachment(QString json);
    ~OAIVlanAttachment() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QString getInterconnectAttachment() const;
    void setInterconnectAttachment(const QString &interconnect_attachment);
    bool is_interconnect_attachment_Set() const;
    bool is_interconnect_attachment_Valid() const;

    QString getPairingKey() const;
    void setPairingKey(const QString &pairing_key);
    bool is_pairing_key_Set() const;
    bool is_pairing_key_Valid() const;

    QString getPeerIp() const;
    void setPeerIp(const QString &peer_ip);
    bool is_peer_ip_Set() const;
    bool is_peer_ip_Valid() const;

    QString getPeerVlanId() const;
    void setPeerVlanId(const QString &peer_vlan_id);
    bool is_peer_vlan_id_Set() const;
    bool is_peer_vlan_id_Valid() const;

    OAIQosPolicy getQosPolicy() const;
    void setQosPolicy(const OAIQosPolicy &qos_policy);
    bool is_qos_policy_Set() const;
    bool is_qos_policy_Valid() const;

    QString getRouterIp() const;
    void setRouterIp(const QString &router_ip);
    bool is_router_ip_Set() const;
    bool is_router_ip_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QString m_interconnect_attachment;
    bool m_interconnect_attachment_isSet;
    bool m_interconnect_attachment_isValid;

    QString m_pairing_key;
    bool m_pairing_key_isSet;
    bool m_pairing_key_isValid;

    QString m_peer_ip;
    bool m_peer_ip_isSet;
    bool m_peer_ip_isValid;

    QString m_peer_vlan_id;
    bool m_peer_vlan_id_isSet;
    bool m_peer_vlan_id_isValid;

    OAIQosPolicy m_qos_policy;
    bool m_qos_policy_isSet;
    bool m_qos_policy_isValid;

    QString m_router_ip;
    bool m_router_ip_isSet;
    bool m_router_ip_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVlanAttachment)

#endif // OAIVlanAttachment_H
