/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoadInstanceAuthInfoResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoadInstanceAuthInfoResponse::OAILoadInstanceAuthInfoResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoadInstanceAuthInfoResponse::OAILoadInstanceAuthInfoResponse() {
    this->initializeModel();
}

OAILoadInstanceAuthInfoResponse::~OAILoadInstanceAuthInfoResponse() {}

void OAILoadInstanceAuthInfoResponse::initializeModel() {

    m_ssh_keys_isSet = false;
    m_ssh_keys_isValid = false;

    m_user_accounts_isSet = false;
    m_user_accounts_isValid = false;
}

void OAILoadInstanceAuthInfoResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoadInstanceAuthInfoResponse::fromJsonObject(QJsonObject json) {

    m_ssh_keys_isValid = ::OpenAPI::fromJsonValue(m_ssh_keys, json[QString("sshKeys")]);
    m_ssh_keys_isSet = !json[QString("sshKeys")].isNull() && m_ssh_keys_isValid;

    m_user_accounts_isValid = ::OpenAPI::fromJsonValue(m_user_accounts, json[QString("userAccounts")]);
    m_user_accounts_isSet = !json[QString("userAccounts")].isNull() && m_user_accounts_isValid;
}

QString OAILoadInstanceAuthInfoResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoadInstanceAuthInfoResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_ssh_keys.size() > 0) {
        obj.insert(QString("sshKeys"), ::OpenAPI::toJsonValue(m_ssh_keys));
    }
    if (m_user_accounts.size() > 0) {
        obj.insert(QString("userAccounts"), ::OpenAPI::toJsonValue(m_user_accounts));
    }
    return obj;
}

QList<OAISSHKey> OAILoadInstanceAuthInfoResponse::getSshKeys() const {
    return m_ssh_keys;
}
void OAILoadInstanceAuthInfoResponse::setSshKeys(const QList<OAISSHKey> &ssh_keys) {
    m_ssh_keys = ssh_keys;
    m_ssh_keys_isSet = true;
}

bool OAILoadInstanceAuthInfoResponse::is_ssh_keys_Set() const{
    return m_ssh_keys_isSet;
}

bool OAILoadInstanceAuthInfoResponse::is_ssh_keys_Valid() const{
    return m_ssh_keys_isValid;
}

QMap<QString, OAIUserAccount> OAILoadInstanceAuthInfoResponse::getUserAccounts() const {
    return m_user_accounts;
}
void OAILoadInstanceAuthInfoResponse::setUserAccounts(const QMap<QString, OAIUserAccount> &user_accounts) {
    m_user_accounts = user_accounts;
    m_user_accounts_isSet = true;
}

bool OAILoadInstanceAuthInfoResponse::is_user_accounts_Set() const{
    return m_user_accounts_isSet;
}

bool OAILoadInstanceAuthInfoResponse::is_user_accounts_Valid() const{
    return m_user_accounts_isValid;
}

bool OAILoadInstanceAuthInfoResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ssh_keys.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_accounts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoadInstanceAuthInfoResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
