/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListOSImagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListOSImagesResponse::OAIListOSImagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListOSImagesResponse::OAIListOSImagesResponse() {
    this->initializeModel();
}

OAIListOSImagesResponse::~OAIListOSImagesResponse() {}

void OAIListOSImagesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_os_images_isSet = false;
    m_os_images_isValid = false;
}

void OAIListOSImagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListOSImagesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_os_images_isValid = ::OpenAPI::fromJsonValue(m_os_images, json[QString("osImages")]);
    m_os_images_isSet = !json[QString("osImages")].isNull() && m_os_images_isValid;
}

QString OAIListOSImagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListOSImagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_os_images.size() > 0) {
        obj.insert(QString("osImages"), ::OpenAPI::toJsonValue(m_os_images));
    }
    return obj;
}

QString OAIListOSImagesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListOSImagesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListOSImagesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListOSImagesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIOSImage> OAIListOSImagesResponse::getOsImages() const {
    return m_os_images;
}
void OAIListOSImagesResponse::setOsImages(const QList<OAIOSImage> &os_images) {
    m_os_images = os_images;
    m_os_images_isSet = true;
}

bool OAIListOSImagesResponse::is_os_images_Set() const{
    return m_os_images_isSet;
}

bool OAIListOSImagesResponse::is_os_images_Valid() const{
    return m_os_images_isValid;
}

bool OAIListOSImagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListOSImagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
