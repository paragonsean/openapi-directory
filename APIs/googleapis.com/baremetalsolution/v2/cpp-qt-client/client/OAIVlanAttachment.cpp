/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVlanAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVlanAttachment::OAIVlanAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVlanAttachment::OAIVlanAttachment() {
    this->initializeModel();
}

OAIVlanAttachment::~OAIVlanAttachment() {}

void OAIVlanAttachment::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_interconnect_attachment_isSet = false;
    m_interconnect_attachment_isValid = false;

    m_pairing_key_isSet = false;
    m_pairing_key_isValid = false;

    m_peer_ip_isSet = false;
    m_peer_ip_isValid = false;

    m_peer_vlan_id_isSet = false;
    m_peer_vlan_id_isValid = false;

    m_qos_policy_isSet = false;
    m_qos_policy_isValid = false;

    m_router_ip_isSet = false;
    m_router_ip_isValid = false;
}

void OAIVlanAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVlanAttachment::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interconnect_attachment_isValid = ::OpenAPI::fromJsonValue(m_interconnect_attachment, json[QString("interconnectAttachment")]);
    m_interconnect_attachment_isSet = !json[QString("interconnectAttachment")].isNull() && m_interconnect_attachment_isValid;

    m_pairing_key_isValid = ::OpenAPI::fromJsonValue(m_pairing_key, json[QString("pairingKey")]);
    m_pairing_key_isSet = !json[QString("pairingKey")].isNull() && m_pairing_key_isValid;

    m_peer_ip_isValid = ::OpenAPI::fromJsonValue(m_peer_ip, json[QString("peerIp")]);
    m_peer_ip_isSet = !json[QString("peerIp")].isNull() && m_peer_ip_isValid;

    m_peer_vlan_id_isValid = ::OpenAPI::fromJsonValue(m_peer_vlan_id, json[QString("peerVlanId")]);
    m_peer_vlan_id_isSet = !json[QString("peerVlanId")].isNull() && m_peer_vlan_id_isValid;

    m_qos_policy_isValid = ::OpenAPI::fromJsonValue(m_qos_policy, json[QString("qosPolicy")]);
    m_qos_policy_isSet = !json[QString("qosPolicy")].isNull() && m_qos_policy_isValid;

    m_router_ip_isValid = ::OpenAPI::fromJsonValue(m_router_ip, json[QString("routerIp")]);
    m_router_ip_isSet = !json[QString("routerIp")].isNull() && m_router_ip_isValid;
}

QString OAIVlanAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVlanAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interconnect_attachment_isSet) {
        obj.insert(QString("interconnectAttachment"), ::OpenAPI::toJsonValue(m_interconnect_attachment));
    }
    if (m_pairing_key_isSet) {
        obj.insert(QString("pairingKey"), ::OpenAPI::toJsonValue(m_pairing_key));
    }
    if (m_peer_ip_isSet) {
        obj.insert(QString("peerIp"), ::OpenAPI::toJsonValue(m_peer_ip));
    }
    if (m_peer_vlan_id_isSet) {
        obj.insert(QString("peerVlanId"), ::OpenAPI::toJsonValue(m_peer_vlan_id));
    }
    if (m_qos_policy.isSet()) {
        obj.insert(QString("qosPolicy"), ::OpenAPI::toJsonValue(m_qos_policy));
    }
    if (m_router_ip_isSet) {
        obj.insert(QString("routerIp"), ::OpenAPI::toJsonValue(m_router_ip));
    }
    return obj;
}

QString OAIVlanAttachment::getId() const {
    return m_id;
}
void OAIVlanAttachment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVlanAttachment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVlanAttachment::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIVlanAttachment::getInterconnectAttachment() const {
    return m_interconnect_attachment;
}
void OAIVlanAttachment::setInterconnectAttachment(const QString &interconnect_attachment) {
    m_interconnect_attachment = interconnect_attachment;
    m_interconnect_attachment_isSet = true;
}

bool OAIVlanAttachment::is_interconnect_attachment_Set() const{
    return m_interconnect_attachment_isSet;
}

bool OAIVlanAttachment::is_interconnect_attachment_Valid() const{
    return m_interconnect_attachment_isValid;
}

QString OAIVlanAttachment::getPairingKey() const {
    return m_pairing_key;
}
void OAIVlanAttachment::setPairingKey(const QString &pairing_key) {
    m_pairing_key = pairing_key;
    m_pairing_key_isSet = true;
}

bool OAIVlanAttachment::is_pairing_key_Set() const{
    return m_pairing_key_isSet;
}

bool OAIVlanAttachment::is_pairing_key_Valid() const{
    return m_pairing_key_isValid;
}

QString OAIVlanAttachment::getPeerIp() const {
    return m_peer_ip;
}
void OAIVlanAttachment::setPeerIp(const QString &peer_ip) {
    m_peer_ip = peer_ip;
    m_peer_ip_isSet = true;
}

bool OAIVlanAttachment::is_peer_ip_Set() const{
    return m_peer_ip_isSet;
}

bool OAIVlanAttachment::is_peer_ip_Valid() const{
    return m_peer_ip_isValid;
}

QString OAIVlanAttachment::getPeerVlanId() const {
    return m_peer_vlan_id;
}
void OAIVlanAttachment::setPeerVlanId(const QString &peer_vlan_id) {
    m_peer_vlan_id = peer_vlan_id;
    m_peer_vlan_id_isSet = true;
}

bool OAIVlanAttachment::is_peer_vlan_id_Set() const{
    return m_peer_vlan_id_isSet;
}

bool OAIVlanAttachment::is_peer_vlan_id_Valid() const{
    return m_peer_vlan_id_isValid;
}

OAIQosPolicy OAIVlanAttachment::getQosPolicy() const {
    return m_qos_policy;
}
void OAIVlanAttachment::setQosPolicy(const OAIQosPolicy &qos_policy) {
    m_qos_policy = qos_policy;
    m_qos_policy_isSet = true;
}

bool OAIVlanAttachment::is_qos_policy_Set() const{
    return m_qos_policy_isSet;
}

bool OAIVlanAttachment::is_qos_policy_Valid() const{
    return m_qos_policy_isValid;
}

QString OAIVlanAttachment::getRouterIp() const {
    return m_router_ip;
}
void OAIVlanAttachment::setRouterIp(const QString &router_ip) {
    m_router_ip = router_ip;
    m_router_ip_isSet = true;
}

bool OAIVlanAttachment::is_router_ip_Set() const{
    return m_router_ip_isSet;
}

bool OAIVlanAttachment::is_router_ip_Valid() const{
    return m_router_ip_isValid;
}

bool OAIVlanAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interconnect_attachment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pairing_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_vlan_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qos_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_router_ip_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVlanAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
