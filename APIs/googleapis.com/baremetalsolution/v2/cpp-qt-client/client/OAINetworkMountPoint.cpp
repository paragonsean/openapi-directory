/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkMountPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkMountPoint::OAINetworkMountPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkMountPoint::OAINetworkMountPoint() {
    this->initializeModel();
}

OAINetworkMountPoint::~OAINetworkMountPoint() {}

void OAINetworkMountPoint::initializeModel() {

    m_default_gateway_isSet = false;
    m_default_gateway_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_logical_interface_isSet = false;
    m_logical_interface_isValid = false;
}

void OAINetworkMountPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkMountPoint::fromJsonObject(QJsonObject json) {

    m_default_gateway_isValid = ::OpenAPI::fromJsonValue(m_default_gateway, json[QString("defaultGateway")]);
    m_default_gateway_isSet = !json[QString("defaultGateway")].isNull() && m_default_gateway_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_logical_interface_isValid = ::OpenAPI::fromJsonValue(m_logical_interface, json[QString("logicalInterface")]);
    m_logical_interface_isSet = !json[QString("logicalInterface")].isNull() && m_logical_interface_isValid;
}

QString OAINetworkMountPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkMountPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_default_gateway_isSet) {
        obj.insert(QString("defaultGateway"), ::OpenAPI::toJsonValue(m_default_gateway));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_logical_interface_isSet) {
        obj.insert(QString("logicalInterface"), ::OpenAPI::toJsonValue(m_logical_interface));
    }
    return obj;
}

bool OAINetworkMountPoint::isDefaultGateway() const {
    return m_default_gateway;
}
void OAINetworkMountPoint::setDefaultGateway(const bool &default_gateway) {
    m_default_gateway = default_gateway;
    m_default_gateway_isSet = true;
}

bool OAINetworkMountPoint::is_default_gateway_Set() const{
    return m_default_gateway_isSet;
}

bool OAINetworkMountPoint::is_default_gateway_Valid() const{
    return m_default_gateway_isValid;
}

QString OAINetworkMountPoint::getInstance() const {
    return m_instance;
}
void OAINetworkMountPoint::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAINetworkMountPoint::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAINetworkMountPoint::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAINetworkMountPoint::getIpAddress() const {
    return m_ip_address;
}
void OAINetworkMountPoint::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAINetworkMountPoint::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAINetworkMountPoint::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAINetworkMountPoint::getLogicalInterface() const {
    return m_logical_interface;
}
void OAINetworkMountPoint::setLogicalInterface(const QString &logical_interface) {
    m_logical_interface = logical_interface;
    m_logical_interface_isSet = true;
}

bool OAINetworkMountPoint::is_logical_interface_Set() const{
    return m_logical_interface_isSet;
}

bool OAINetworkMountPoint::is_logical_interface_Valid() const{
    return m_logical_interface_isValid;
}

bool OAINetworkMountPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_gateway_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_interface_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkMountPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
