/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVolume.h
 *
 * A storage volume.
 */

#ifndef OAIVolume_H
#define OAIVolume_H

#include <QJsonObject>

#include "OAISnapshotReservationDetail.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISnapshotReservationDetail;

class OAIVolume : public OAIObject {
public:
    OAIVolume();
    OAIVolume(QString json);
    ~OAIVolume() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isAttached() const;
    void setAttached(const bool &attached);
    bool is_attached_Set() const;
    bool is_attached_Valid() const;

    QString getAutoGrownSizeGib() const;
    void setAutoGrownSizeGib(const QString &auto_grown_size_gib);
    bool is_auto_grown_size_gib_Set() const;
    bool is_auto_grown_size_gib_Valid() const;

    bool isBootVolume() const;
    void setBootVolume(const bool &boot_volume);
    bool is_boot_volume_Set() const;
    bool is_boot_volume_Valid() const;

    QString getCurrentSizeGib() const;
    void setCurrentSizeGib(const QString &current_size_gib);
    bool is_current_size_gib_Set() const;
    bool is_current_size_gib_Valid() const;

    QString getEmergencySizeGib() const;
    void setEmergencySizeGib(const QString &emergency_size_gib);
    bool is_emergency_size_gib_Set() const;
    bool is_emergency_size_gib_Valid() const;

    QString getExpireTime() const;
    void setExpireTime(const QString &expire_time);
    bool is_expire_time_Set() const;
    bool is_expire_time_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<QString> getInstances() const;
    void setInstances(const QList<QString> &instances);
    bool is_instances_Set() const;
    bool is_instances_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getMaxSizeGib() const;
    void setMaxSizeGib(const QString &max_size_gib);
    bool is_max_size_gib_Set() const;
    bool is_max_size_gib_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNotes() const;
    void setNotes(const QString &notes);
    bool is_notes_Set() const;
    bool is_notes_Valid() const;

    QString getOriginallyRequestedSizeGib() const;
    void setOriginallyRequestedSizeGib(const QString &originally_requested_size_gib);
    bool is_originally_requested_size_gib_Set() const;
    bool is_originally_requested_size_gib_Valid() const;

    QString getPerformanceTier() const;
    void setPerformanceTier(const QString &performance_tier);
    bool is_performance_tier_Set() const;
    bool is_performance_tier_Valid() const;

    QString getPod() const;
    void setPod(const QString &pod);
    bool is_pod_Set() const;
    bool is_pod_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getRemainingSpaceGib() const;
    void setRemainingSpaceGib(const QString &remaining_space_gib);
    bool is_remaining_space_gib_Set() const;
    bool is_remaining_space_gib_Valid() const;

    QString getRequestedSizeGib() const;
    void setRequestedSizeGib(const QString &requested_size_gib);
    bool is_requested_size_gib_Set() const;
    bool is_requested_size_gib_Valid() const;

    QString getSnapshotAutoDeleteBehavior() const;
    void setSnapshotAutoDeleteBehavior(const QString &snapshot_auto_delete_behavior);
    bool is_snapshot_auto_delete_behavior_Set() const;
    bool is_snapshot_auto_delete_behavior_Valid() const;

    bool isSnapshotEnabled() const;
    void setSnapshotEnabled(const bool &snapshot_enabled);
    bool is_snapshot_enabled_Set() const;
    bool is_snapshot_enabled_Valid() const;

    OAISnapshotReservationDetail getSnapshotReservationDetail() const;
    void setSnapshotReservationDetail(const OAISnapshotReservationDetail &snapshot_reservation_detail);
    bool is_snapshot_reservation_detail_Set() const;
    bool is_snapshot_reservation_detail_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getStorageType() const;
    void setStorageType(const QString &storage_type);
    bool is_storage_type_Set() const;
    bool is_storage_type_Valid() const;

    QString getWorkloadProfile() const;
    void setWorkloadProfile(const QString &workload_profile);
    bool is_workload_profile_Set() const;
    bool is_workload_profile_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_attached;
    bool m_attached_isSet;
    bool m_attached_isValid;

    QString m_auto_grown_size_gib;
    bool m_auto_grown_size_gib_isSet;
    bool m_auto_grown_size_gib_isValid;

    bool m_boot_volume;
    bool m_boot_volume_isSet;
    bool m_boot_volume_isValid;

    QString m_current_size_gib;
    bool m_current_size_gib_isSet;
    bool m_current_size_gib_isValid;

    QString m_emergency_size_gib;
    bool m_emergency_size_gib_isSet;
    bool m_emergency_size_gib_isValid;

    QString m_expire_time;
    bool m_expire_time_isSet;
    bool m_expire_time_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<QString> m_instances;
    bool m_instances_isSet;
    bool m_instances_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_max_size_gib;
    bool m_max_size_gib_isSet;
    bool m_max_size_gib_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_notes;
    bool m_notes_isSet;
    bool m_notes_isValid;

    QString m_originally_requested_size_gib;
    bool m_originally_requested_size_gib_isSet;
    bool m_originally_requested_size_gib_isValid;

    QString m_performance_tier;
    bool m_performance_tier_isSet;
    bool m_performance_tier_isValid;

    QString m_pod;
    bool m_pod_isSet;
    bool m_pod_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_remaining_space_gib;
    bool m_remaining_space_gib_isSet;
    bool m_remaining_space_gib_isValid;

    QString m_requested_size_gib;
    bool m_requested_size_gib_isSet;
    bool m_requested_size_gib_isValid;

    QString m_snapshot_auto_delete_behavior;
    bool m_snapshot_auto_delete_behavior_isSet;
    bool m_snapshot_auto_delete_behavior_isValid;

    bool m_snapshot_enabled;
    bool m_snapshot_enabled_isSet;
    bool m_snapshot_enabled_isValid;

    OAISnapshotReservationDetail m_snapshot_reservation_detail;
    bool m_snapshot_reservation_detail_isSet;
    bool m_snapshot_reservation_detail_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_storage_type;
    bool m_storage_type_isSet;
    bool m_storage_type_isValid;

    QString m_workload_profile;
    bool m_workload_profile_isSet;
    bool m_workload_profile_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVolume)

#endif // OAIVolume_H
