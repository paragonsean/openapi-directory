/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIProvisioningQuota.h
 *
 * A provisioning quota for a given project.
 */

#ifndef OAIProvisioningQuota_H
#define OAIProvisioningQuota_H

#include <QJsonObject>

#include "OAIInstanceQuota.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInstanceQuota;

class OAIProvisioningQuota : public OAIObject {
public:
    OAIProvisioningQuota();
    OAIProvisioningQuota(QString json);
    ~OAIProvisioningQuota() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAssetType() const;
    void setAssetType(const QString &asset_type);
    bool is_asset_type_Set() const;
    bool is_asset_type_Valid() const;

    qint32 getAvailableCount() const;
    void setAvailableCount(const qint32 &available_count);
    bool is_available_count_Set() const;
    bool is_available_count_Valid() const;

    QString getGcpService() const;
    void setGcpService(const QString &gcp_service);
    bool is_gcp_service_Set() const;
    bool is_gcp_service_Valid() const;

    OAIInstanceQuota getInstanceQuota() const;
    void setInstanceQuota(const OAIInstanceQuota &instance_quota);
    bool is_instance_quota_Set() const;
    bool is_instance_quota_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetworkBandwidth() const;
    void setNetworkBandwidth(const QString &network_bandwidth);
    bool is_network_bandwidth_Set() const;
    bool is_network_bandwidth_Valid() const;

    QString getServerCount() const;
    void setServerCount(const QString &server_count);
    bool is_server_count_Set() const;
    bool is_server_count_Valid() const;

    QString getStorageGib() const;
    void setStorageGib(const QString &storage_gib);
    bool is_storage_gib_Set() const;
    bool is_storage_gib_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_asset_type;
    bool m_asset_type_isSet;
    bool m_asset_type_isValid;

    qint32 m_available_count;
    bool m_available_count_isSet;
    bool m_available_count_isValid;

    QString m_gcp_service;
    bool m_gcp_service_isSet;
    bool m_gcp_service_isValid;

    OAIInstanceQuota m_instance_quota;
    bool m_instance_quota_isSet;
    bool m_instance_quota_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network_bandwidth;
    bool m_network_bandwidth_isSet;
    bool m_network_bandwidth_isValid;

    QString m_server_count;
    bool m_server_count_isSet;
    bool m_server_count_isValid;

    QString m_storage_gib;
    bool m_storage_gib_isSet;
    bool m_storage_gib_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIProvisioningQuota)

#endif // OAIProvisioningQuota_H
