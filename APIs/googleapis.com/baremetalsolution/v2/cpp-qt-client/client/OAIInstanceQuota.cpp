/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceQuota::OAIInstanceQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceQuota::OAIInstanceQuota() {
    this->initializeModel();
}

OAIInstanceQuota::~OAIInstanceQuota() {}

void OAIInstanceQuota::initializeModel() {

    m_available_machine_count_isSet = false;
    m_available_machine_count_isValid = false;

    m_gcp_service_isSet = false;
    m_gcp_service_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIInstanceQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceQuota::fromJsonObject(QJsonObject json) {

    m_available_machine_count_isValid = ::OpenAPI::fromJsonValue(m_available_machine_count, json[QString("availableMachineCount")]);
    m_available_machine_count_isSet = !json[QString("availableMachineCount")].isNull() && m_available_machine_count_isValid;

    m_gcp_service_isValid = ::OpenAPI::fromJsonValue(m_gcp_service, json[QString("gcpService")]);
    m_gcp_service_isSet = !json[QString("gcpService")].isNull() && m_gcp_service_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIInstanceQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_available_machine_count_isSet) {
        obj.insert(QString("availableMachineCount"), ::OpenAPI::toJsonValue(m_available_machine_count));
    }
    if (m_gcp_service_isSet) {
        obj.insert(QString("gcpService"), ::OpenAPI::toJsonValue(m_gcp_service));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

qint32 OAIInstanceQuota::getAvailableMachineCount() const {
    return m_available_machine_count;
}
void OAIInstanceQuota::setAvailableMachineCount(const qint32 &available_machine_count) {
    m_available_machine_count = available_machine_count;
    m_available_machine_count_isSet = true;
}

bool OAIInstanceQuota::is_available_machine_count_Set() const{
    return m_available_machine_count_isSet;
}

bool OAIInstanceQuota::is_available_machine_count_Valid() const{
    return m_available_machine_count_isValid;
}

QString OAIInstanceQuota::getGcpService() const {
    return m_gcp_service;
}
void OAIInstanceQuota::setGcpService(const QString &gcp_service) {
    m_gcp_service = gcp_service;
    m_gcp_service_isSet = true;
}

bool OAIInstanceQuota::is_gcp_service_Set() const{
    return m_gcp_service_isSet;
}

bool OAIInstanceQuota::is_gcp_service_Valid() const{
    return m_gcp_service_isValid;
}

QString OAIInstanceQuota::getInstanceType() const {
    return m_instance_type;
}
void OAIInstanceQuota::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIInstanceQuota::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIInstanceQuota::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QString OAIInstanceQuota::getLocation() const {
    return m_location;
}
void OAIInstanceQuota::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIInstanceQuota::is_location_Set() const{
    return m_location_isSet;
}

bool OAIInstanceQuota::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIInstanceQuota::getName() const {
    return m_name;
}
void OAIInstanceQuota::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstanceQuota::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstanceQuota::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIInstanceQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_machine_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcp_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
