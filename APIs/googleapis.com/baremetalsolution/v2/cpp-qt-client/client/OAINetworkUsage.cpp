/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkUsage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkUsage::OAINetworkUsage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkUsage::OAINetworkUsage() {
    this->initializeModel();
}

OAINetworkUsage::~OAINetworkUsage() {}

void OAINetworkUsage::initializeModel() {

    m_network_isSet = false;
    m_network_isValid = false;

    m_used_ips_isSet = false;
    m_used_ips_isValid = false;
}

void OAINetworkUsage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkUsage::fromJsonObject(QJsonObject json) {

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_used_ips_isValid = ::OpenAPI::fromJsonValue(m_used_ips, json[QString("usedIps")]);
    m_used_ips_isSet = !json[QString("usedIps")].isNull() && m_used_ips_isValid;
}

QString OAINetworkUsage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkUsage::asJsonObject() const {
    QJsonObject obj;
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_used_ips.size() > 0) {
        obj.insert(QString("usedIps"), ::OpenAPI::toJsonValue(m_used_ips));
    }
    return obj;
}

OAINetwork OAINetworkUsage::getNetwork() const {
    return m_network;
}
void OAINetworkUsage::setNetwork(const OAINetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAINetworkUsage::is_network_Set() const{
    return m_network_isSet;
}

bool OAINetworkUsage::is_network_Valid() const{
    return m_network_isValid;
}

QList<QString> OAINetworkUsage::getUsedIps() const {
    return m_used_ips;
}
void OAINetworkUsage::setUsedIps(const QList<QString> &used_ips) {
    m_used_ips = used_ips;
    m_used_ips_isSet = true;
}

bool OAINetworkUsage::is_used_ips_Set() const{
    return m_used_ips_isSet;
}

bool OAINetworkUsage::is_used_ips_Valid() const{
    return m_used_ips_isValid;
}

bool OAINetworkUsage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkUsage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
