/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DetachLunRequest;
import org.openapitools.client.model.ListInstancesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListLunsResponse;
import org.openapitools.client.model.ListNetworkUsageResponse;
import org.openapitools.client.model.ListNetworksResponse;
import org.openapitools.client.model.ListNfsSharesResponse;
import org.openapitools.client.model.ListOSImagesResponse;
import org.openapitools.client.model.ListProvisioningQuotasResponse;
import org.openapitools.client.model.ListSSHKeysResponse;
import org.openapitools.client.model.ListVolumeSnapshotsResponse;
import org.openapitools.client.model.ListVolumesResponse;
import org.openapitools.client.model.LoadInstanceAuthInfoResponse;
import org.openapitools.client.model.NfsShare;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.ProvisioningConfig;
import org.openapitools.client.model.RenameVolumeRequest;
import org.openapitools.client.model.ResizeVolumeRequest;
import org.openapitools.client.model.SSHKey;
import org.openapitools.client.model.SubmitProvisioningConfigRequest;
import org.openapitools.client.model.SubmitProvisioningConfigResponse;
import org.openapitools.client.model.Volume;
import org.openapitools.client.model.VolumeSnapshot;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Detach LUN from Instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesDetachLunTest() throws ApiException {
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DetachLunRequest detachLunRequest = null;
        Operation response = api.baremetalsolutionProjectsLocationsInstancesDetachLun(instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, detachLunRequest);
        // TODO: test validations
    }

    /**
     * Disable the interactive serial console feature on an instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsoleTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsInstancesDisableInteractiveSerialConsole(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Enable the interactive serial console feature on an instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsoleTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsInstancesEnableInteractiveSerialConsole(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * List servers in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInstancesResponse response = api.baremetalsolutionProjectsLocationsInstancesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Load auth info for a server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesLoadAuthInfoTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LoadInstanceAuthInfoResponse response = api.baremetalsolutionProjectsLocationsInstancesLoadAuthInfo(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Perform an ungraceful, hard reset on a server. Equivalent to shutting the power off and then turning it back on.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesResetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsInstancesReset(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Starts a server that was shutdown.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesStartTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsInstancesStart(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Stop a running server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsInstancesStopTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsInstancesStop(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.baremetalsolutionProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List network in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsNetworksListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNetworksResponse response = api.baremetalsolutionProjectsLocationsNetworksList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List all Networks (and used IPs for each Network) in the vendor account associated with the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsNetworksListNetworkUsageTest() throws ApiException {
        String location = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListNetworkUsageResponse response = api.baremetalsolutionProjectsLocationsNetworksListNetworkUsage(location, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Create an NFS share.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsNfsSharesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        NfsShare nfsShare = null;
        Operation response = api.baremetalsolutionProjectsLocationsNfsSharesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, nfsShare);
        // TODO: test validations
    }

    /**
     * List NFS shares.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsNfsSharesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListNfsSharesResponse response = api.baremetalsolutionProjectsLocationsNfsSharesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Retrieves the list of OS images which are currently approved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsOsImagesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOSImagesResponse response = api.baremetalsolutionProjectsLocationsOsImagesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create new ProvisioningConfig.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsProvisioningConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String email = null;
        ProvisioningConfig provisioningConfig = null;
        ProvisioningConfig response = api.baremetalsolutionProjectsLocationsProvisioningConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, email, provisioningConfig);
        // TODO: test validations
    }

    /**
     * Submit a provisiong configuration for a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsProvisioningConfigsSubmitTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubmitProvisioningConfigRequest submitProvisioningConfigRequest = null;
        SubmitProvisioningConfigResponse response = api.baremetalsolutionProjectsLocationsProvisioningConfigsSubmit(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, submitProvisioningConfigRequest);
        // TODO: test validations
    }

    /**
     * List the budget details to provision resources on a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsProvisioningQuotasListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProvisioningQuotasResponse response = api.baremetalsolutionProjectsLocationsProvisioningQuotasList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Register a public SSH key in the specified project for use with the interactive serial console feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsSshKeysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String sshKeyId = null;
        SSHKey ssHKey = null;
        SSHKey response = api.baremetalsolutionProjectsLocationsSshKeysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sshKeyId, ssHKey);
        // TODO: test validations
    }

    /**
     * Lists the public SSH keys registered for the specified project. These SSH keys are used only for the interactive serial console feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsSshKeysListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSSHKeysResponse response = api.baremetalsolutionProjectsLocationsSshKeysList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List storage volumes in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVolumesResponse response = api.baremetalsolutionProjectsLocationsVolumesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Skips lun&#39;s cooloff and deletes it now. Lun must be in cooloff state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesLunsEvictTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsVolumesLunsEvict(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * List storage volume luns for given storage volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesLunsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLunsResponse response = api.baremetalsolutionProjectsLocationsVolumesLunsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Update details of a single storage volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Volume volume = null;
        Operation response = api.baremetalsolutionProjectsLocationsVolumesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, volume);
        // TODO: test validations
    }

    /**
     * RenameVolume sets a new name for a volume. Use with caution, previous names become immediately invalidated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesRenameTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RenameVolumeRequest renameVolumeRequest = null;
        Volume response = api.baremetalsolutionProjectsLocationsVolumesRename(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, renameVolumeRequest);
        // TODO: test validations
    }

    /**
     * Emergency Volume resize.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesResizeTest() throws ApiException {
        String volume = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ResizeVolumeRequest resizeVolumeRequest = null;
        Operation response = api.baremetalsolutionProjectsLocationsVolumesResize(volume, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, resizeVolumeRequest);
        // TODO: test validations
    }

    /**
     * Takes a snapshot of a boot volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesSnapshotsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VolumeSnapshot volumeSnapshot = null;
        VolumeSnapshot response = api.baremetalsolutionProjectsLocationsVolumesSnapshotsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, volumeSnapshot);
        // TODO: test validations
    }

    /**
     * Deletes a volume snapshot. Returns INVALID_ARGUMENT if called for a non-boot volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesSnapshotsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.baremetalsolutionProjectsLocationsVolumesSnapshotsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Returns the specified snapshot resource. Returns INVALID_ARGUMENT if called for a non-boot volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesSnapshotsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        VolumeSnapshot response = api.baremetalsolutionProjectsLocationsVolumesSnapshotsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves the list of snapshots for the specified volume. Returns a response with an empty list of snapshots if called for a non-boot volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesSnapshotsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListVolumeSnapshotsResponse response = api.baremetalsolutionProjectsLocationsVolumesSnapshotsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Uses the specified snapshot to restore its parent volume. Returns INVALID_ARGUMENT if called for a non-boot volume.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void baremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshotTest() throws ApiException {
        String volumeSnapshot = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.baremetalsolutionProjectsLocationsVolumesSnapshotsRestoreVolumeSnapshot(volumeSnapshot, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
