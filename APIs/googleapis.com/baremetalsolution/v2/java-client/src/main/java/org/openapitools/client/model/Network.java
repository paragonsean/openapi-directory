/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.NetworkAddressReservation;
import org.openapitools.client.model.NetworkMountPoint;
import org.openapitools.client.model.VRF;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Network.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Network {
  public static final String SERIALIZED_NAME_CIDR = "cidr";
  @SerializedName(SERIALIZED_NAME_CIDR)
  private String cidr;

  public static final String SERIALIZED_NAME_GATEWAY_IP = "gatewayIp";
  @SerializedName(SERIALIZED_NAME_GATEWAY_IP)
  private String gatewayIp;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_JUMBO_FRAMES_ENABLED = "jumboFramesEnabled";
  @SerializedName(SERIALIZED_NAME_JUMBO_FRAMES_ENABLED)
  private Boolean jumboFramesEnabled;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private List<String> macAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_MOUNT_POINTS = "mountPoints";
  @SerializedName(SERIALIZED_NAME_MOUNT_POINTS)
  private List<NetworkMountPoint> mountPoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  public static final String SERIALIZED_NAME_RESERVATIONS = "reservations";
  @SerializedName(SERIALIZED_NAME_RESERVATIONS)
  private List<NetworkAddressReservation> reservations = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICES_CIDR = "servicesCidr";
  @SerializedName(SERIALIZED_NAME_SERVICES_CIDR)
  private String servicesCidr;

  /**
   * The Network state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONING("PROVISIONING"),
    
    PROVISIONED("PROVISIONED"),
    
    DEPROVISIONING("DEPROVISIONING"),
    
    UPDATING("UPDATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The type of this network.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    TYPE_UNSPECIFIED("TYPE_UNSPECIFIED"),
    
    CLIENT("CLIENT"),
    
    PRIVATE("PRIVATE");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_VLAN_ID = "vlanId";
  @SerializedName(SERIALIZED_NAME_VLAN_ID)
  private String vlanId;

  public static final String SERIALIZED_NAME_VRF = "vrf";
  @SerializedName(SERIALIZED_NAME_VRF)
  private VRF vrf;

  public static final String SERIALIZED_NAME_VRF_ATTACHMENT = "vrfAttachment";
  @SerializedName(SERIALIZED_NAME_VRF_ATTACHMENT)
  private String vrfAttachment;

  public Network() {
  }

  public Network(
     String gatewayIp, 
     String name
  ) {
    this();
    this.gatewayIp = gatewayIp;
    this.name = name;
  }

  public Network cidr(String cidr) {
    this.cidr = cidr;
    return this;
  }

  /**
   * The cidr of the Network.
   * @return cidr
   */
  @javax.annotation.Nullable
  public String getCidr() {
    return cidr;
  }

  public void setCidr(String cidr) {
    this.cidr = cidr;
  }


  /**
   * Output only. Gateway ip address.
   * @return gatewayIp
   */
  @javax.annotation.Nullable
  public String getGatewayIp() {
    return gatewayIp;
  }



  public Network id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier for the &#x60;Network&#x60;, generated by the backend.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Network ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * IP address configured.
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public Network jumboFramesEnabled(Boolean jumboFramesEnabled) {
    this.jumboFramesEnabled = jumboFramesEnabled;
    return this;
  }

  /**
   * Whether network uses standard frames or jumbo ones.
   * @return jumboFramesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getJumboFramesEnabled() {
    return jumboFramesEnabled;
  }

  public void setJumboFramesEnabled(Boolean jumboFramesEnabled) {
    this.jumboFramesEnabled = jumboFramesEnabled;
  }


  public Network labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Network putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Network macAddress(List<String> macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  public Network addMacAddressItem(String macAddressItem) {
    if (this.macAddress == null) {
      this.macAddress = new ArrayList<>();
    }
    this.macAddress.add(macAddressItem);
    return this;
  }

  /**
   * List of physical interfaces.
   * @return macAddress
   */
  @javax.annotation.Nullable
  public List<String> getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(List<String> macAddress) {
    this.macAddress = macAddress;
  }


  public Network mountPoints(List<NetworkMountPoint> mountPoints) {
    this.mountPoints = mountPoints;
    return this;
  }

  public Network addMountPointsItem(NetworkMountPoint mountPointsItem) {
    if (this.mountPoints == null) {
      this.mountPoints = new ArrayList<>();
    }
    this.mountPoints.add(mountPointsItem);
    return this;
  }

  /**
   * Input only. List of mount points to attach the network to.
   * @return mountPoints
   */
  @javax.annotation.Nullable
  public List<NetworkMountPoint> getMountPoints() {
    return mountPoints;
  }

  public void setMountPoints(List<NetworkMountPoint> mountPoints) {
    this.mountPoints = mountPoints;
  }


  /**
   * Output only. The resource name of this &#x60;Network&#x60;. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: &#x60;projects/{project}/locations/{location}/networks/{network}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Network pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod.
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  public Network reservations(List<NetworkAddressReservation> reservations) {
    this.reservations = reservations;
    return this;
  }

  public Network addReservationsItem(NetworkAddressReservation reservationsItem) {
    if (this.reservations == null) {
      this.reservations = new ArrayList<>();
    }
    this.reservations.add(reservationsItem);
    return this;
  }

  /**
   * List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
   * @return reservations
   */
  @javax.annotation.Nullable
  public List<NetworkAddressReservation> getReservations() {
    return reservations;
  }

  public void setReservations(List<NetworkAddressReservation> reservations) {
    this.reservations = reservations;
  }


  public Network servicesCidr(String servicesCidr) {
    this.servicesCidr = servicesCidr;
    return this;
  }

  /**
   * IP range for reserved for services (e.g. NFS).
   * @return servicesCidr
   */
  @javax.annotation.Nullable
  public String getServicesCidr() {
    return servicesCidr;
  }

  public void setServicesCidr(String servicesCidr) {
    this.servicesCidr = servicesCidr;
  }


  public Network state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The Network state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Network type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this network.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Network vlanId(String vlanId) {
    this.vlanId = vlanId;
    return this;
  }

  /**
   * The vlan id of the Network.
   * @return vlanId
   */
  @javax.annotation.Nullable
  public String getVlanId() {
    return vlanId;
  }

  public void setVlanId(String vlanId) {
    this.vlanId = vlanId;
  }


  public Network vrf(VRF vrf) {
    this.vrf = vrf;
    return this;
  }

  /**
   * Get vrf
   * @return vrf
   */
  @javax.annotation.Nullable
  public VRF getVrf() {
    return vrf;
  }

  public void setVrf(VRF vrf) {
    this.vrf = vrf;
  }


  public Network vrfAttachment(String vrfAttachment) {
    this.vrfAttachment = vrfAttachment;
    return this;
  }

  /**
   * Optional. The name of a pre-existing Vrf that the network should be attached to. Format is &#x60;vrfs/{vrf}&#x60;.
   * @return vrfAttachment
   */
  @javax.annotation.Nullable
  public String getVrfAttachment() {
    return vrfAttachment;
  }

  public void setVrfAttachment(String vrfAttachment) {
    this.vrfAttachment = vrfAttachment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Network network = (Network) o;
    return Objects.equals(this.cidr, network.cidr) &&
        Objects.equals(this.gatewayIp, network.gatewayIp) &&
        Objects.equals(this.id, network.id) &&
        Objects.equals(this.ipAddress, network.ipAddress) &&
        Objects.equals(this.jumboFramesEnabled, network.jumboFramesEnabled) &&
        Objects.equals(this.labels, network.labels) &&
        Objects.equals(this.macAddress, network.macAddress) &&
        Objects.equals(this.mountPoints, network.mountPoints) &&
        Objects.equals(this.name, network.name) &&
        Objects.equals(this.pod, network.pod) &&
        Objects.equals(this.reservations, network.reservations) &&
        Objects.equals(this.servicesCidr, network.servicesCidr) &&
        Objects.equals(this.state, network.state) &&
        Objects.equals(this.type, network.type) &&
        Objects.equals(this.vlanId, network.vlanId) &&
        Objects.equals(this.vrf, network.vrf) &&
        Objects.equals(this.vrfAttachment, network.vrfAttachment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidr, gatewayIp, id, ipAddress, jumboFramesEnabled, labels, macAddress, mountPoints, name, pod, reservations, servicesCidr, state, type, vlanId, vrf, vrfAttachment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Network {\n");
    sb.append("    cidr: ").append(toIndentedString(cidr)).append("\n");
    sb.append("    gatewayIp: ").append(toIndentedString(gatewayIp)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    jumboFramesEnabled: ").append(toIndentedString(jumboFramesEnabled)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    mountPoints: ").append(toIndentedString(mountPoints)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    reservations: ").append(toIndentedString(reservations)).append("\n");
    sb.append("    servicesCidr: ").append(toIndentedString(servicesCidr)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    vlanId: ").append(toIndentedString(vlanId)).append("\n");
    sb.append("    vrf: ").append(toIndentedString(vrf)).append("\n");
    sb.append("    vrfAttachment: ").append(toIndentedString(vrfAttachment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cidr");
    openapiFields.add("gatewayIp");
    openapiFields.add("id");
    openapiFields.add("ipAddress");
    openapiFields.add("jumboFramesEnabled");
    openapiFields.add("labels");
    openapiFields.add("macAddress");
    openapiFields.add("mountPoints");
    openapiFields.add("name");
    openapiFields.add("pod");
    openapiFields.add("reservations");
    openapiFields.add("servicesCidr");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("vlanId");
    openapiFields.add("vrf");
    openapiFields.add("vrfAttachment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Network
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Network.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Network is not found in the empty JSON string", Network.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Network.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Network` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cidr") != null && !jsonObj.get("cidr").isJsonNull()) && !jsonObj.get("cidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cidr").toString()));
      }
      if ((jsonObj.get("gatewayIp") != null && !jsonObj.get("gatewayIp").isJsonNull()) && !jsonObj.get("gatewayIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatewayIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatewayIp").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull() && !jsonObj.get("macAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `macAddress` to be an array in the JSON string but got `%s`", jsonObj.get("macAddress").toString()));
      }
      if (jsonObj.get("mountPoints") != null && !jsonObj.get("mountPoints").isJsonNull()) {
        JsonArray jsonArraymountPoints = jsonObj.getAsJsonArray("mountPoints");
        if (jsonArraymountPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mountPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mountPoints` to be an array in the JSON string but got `%s`", jsonObj.get("mountPoints").toString()));
          }

          // validate the optional field `mountPoints` (array)
          for (int i = 0; i < jsonArraymountPoints.size(); i++) {
            NetworkMountPoint.validateJsonElement(jsonArraymountPoints.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      if (jsonObj.get("reservations") != null && !jsonObj.get("reservations").isJsonNull()) {
        JsonArray jsonArrayreservations = jsonObj.getAsJsonArray("reservations");
        if (jsonArrayreservations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reservations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reservations` to be an array in the JSON string but got `%s`", jsonObj.get("reservations").toString()));
          }

          // validate the optional field `reservations` (array)
          for (int i = 0; i < jsonArrayreservations.size(); i++) {
            NetworkAddressReservation.validateJsonElement(jsonArrayreservations.get(i));
          };
        }
      }
      if ((jsonObj.get("servicesCidr") != null && !jsonObj.get("servicesCidr").isJsonNull()) && !jsonObj.get("servicesCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicesCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicesCidr").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("vlanId") != null && !jsonObj.get("vlanId").isJsonNull()) && !jsonObj.get("vlanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vlanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vlanId").toString()));
      }
      // validate the optional field `vrf`
      if (jsonObj.get("vrf") != null && !jsonObj.get("vrf").isJsonNull()) {
        VRF.validateJsonElement(jsonObj.get("vrf"));
      }
      if ((jsonObj.get("vrfAttachment") != null && !jsonObj.get("vrfAttachment").isJsonNull()) && !jsonObj.get("vrfAttachment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vrfAttachment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vrfAttachment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Network.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Network' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Network> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Network.class));

       return (TypeAdapter<T>) new TypeAdapter<Network>() {
           @Override
           public void write(JsonWriter out, Network value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Network read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Network given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Network
   * @throws IOException if the JSON string is invalid with respect to Network
   */
  public static Network fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Network.class);
  }

  /**
   * Convert an instance of Network to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

