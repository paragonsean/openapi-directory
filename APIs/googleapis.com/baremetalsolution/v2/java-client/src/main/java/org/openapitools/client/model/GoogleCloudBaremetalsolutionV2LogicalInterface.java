/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogicalNetworkInterface;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Each logical interface represents a logical abstraction of the underlying physical interface (for eg. bond, nic) of the instance. Each logical interface can effectively map to multiple network-IP pairs and still be mapped to one underlying physical interface.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudBaremetalsolutionV2LogicalInterface {
  public static final String SERIALIZED_NAME_INTERFACE_INDEX = "interfaceIndex";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INTERFACE_INDEX)
  private Integer interfaceIndex;

  public static final String SERIALIZED_NAME_LOGICAL_NETWORK_INTERFACES = "logicalNetworkInterfaces";
  @SerializedName(SERIALIZED_NAME_LOGICAL_NETWORK_INTERFACES)
  private List<LogicalNetworkInterface> logicalNetworkInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public GoogleCloudBaremetalsolutionV2LogicalInterface() {
  }

  @Deprecated
  public GoogleCloudBaremetalsolutionV2LogicalInterface interfaceIndex(Integer interfaceIndex) {
    this.interfaceIndex = interfaceIndex;
    return this;
  }

  /**
   * The index of the logical interface mapping to the index of the hardware bond or nic on the chosen network template. This field is deprecated.
   * @return interfaceIndex
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getInterfaceIndex() {
    return interfaceIndex;
  }

  @Deprecated
  public void setInterfaceIndex(Integer interfaceIndex) {
    this.interfaceIndex = interfaceIndex;
  }


  public GoogleCloudBaremetalsolutionV2LogicalInterface logicalNetworkInterfaces(List<LogicalNetworkInterface> logicalNetworkInterfaces) {
    this.logicalNetworkInterfaces = logicalNetworkInterfaces;
    return this;
  }

  public GoogleCloudBaremetalsolutionV2LogicalInterface addLogicalNetworkInterfacesItem(LogicalNetworkInterface logicalNetworkInterfacesItem) {
    if (this.logicalNetworkInterfaces == null) {
      this.logicalNetworkInterfaces = new ArrayList<>();
    }
    this.logicalNetworkInterfaces.add(logicalNetworkInterfacesItem);
    return this;
  }

  /**
   * List of logical network interfaces within a logical interface.
   * @return logicalNetworkInterfaces
   */
  @javax.annotation.Nullable
  public List<LogicalNetworkInterface> getLogicalNetworkInterfaces() {
    return logicalNetworkInterfaces;
  }

  public void setLogicalNetworkInterfaces(List<LogicalNetworkInterface> logicalNetworkInterfaces) {
    this.logicalNetworkInterfaces = logicalNetworkInterfaces;
  }


  public GoogleCloudBaremetalsolutionV2LogicalInterface name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Interface name. This is of syntax or and forms part of the network template name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudBaremetalsolutionV2LogicalInterface googleCloudBaremetalsolutionV2LogicalInterface = (GoogleCloudBaremetalsolutionV2LogicalInterface) o;
    return Objects.equals(this.interfaceIndex, googleCloudBaremetalsolutionV2LogicalInterface.interfaceIndex) &&
        Objects.equals(this.logicalNetworkInterfaces, googleCloudBaremetalsolutionV2LogicalInterface.logicalNetworkInterfaces) &&
        Objects.equals(this.name, googleCloudBaremetalsolutionV2LogicalInterface.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(interfaceIndex, logicalNetworkInterfaces, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudBaremetalsolutionV2LogicalInterface {\n");
    sb.append("    interfaceIndex: ").append(toIndentedString(interfaceIndex)).append("\n");
    sb.append("    logicalNetworkInterfaces: ").append(toIndentedString(logicalNetworkInterfaces)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("interfaceIndex");
    openapiFields.add("logicalNetworkInterfaces");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudBaremetalsolutionV2LogicalInterface
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudBaremetalsolutionV2LogicalInterface.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudBaremetalsolutionV2LogicalInterface is not found in the empty JSON string", GoogleCloudBaremetalsolutionV2LogicalInterface.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudBaremetalsolutionV2LogicalInterface.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudBaremetalsolutionV2LogicalInterface` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("logicalNetworkInterfaces") != null && !jsonObj.get("logicalNetworkInterfaces").isJsonNull()) {
        JsonArray jsonArraylogicalNetworkInterfaces = jsonObj.getAsJsonArray("logicalNetworkInterfaces");
        if (jsonArraylogicalNetworkInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logicalNetworkInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logicalNetworkInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("logicalNetworkInterfaces").toString()));
          }

          // validate the optional field `logicalNetworkInterfaces` (array)
          for (int i = 0; i < jsonArraylogicalNetworkInterfaces.size(); i++) {
            LogicalNetworkInterface.validateJsonElement(jsonArraylogicalNetworkInterfaces.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudBaremetalsolutionV2LogicalInterface.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudBaremetalsolutionV2LogicalInterface' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudBaremetalsolutionV2LogicalInterface> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudBaremetalsolutionV2LogicalInterface.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudBaremetalsolutionV2LogicalInterface>() {
           @Override
           public void write(JsonWriter out, GoogleCloudBaremetalsolutionV2LogicalInterface value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudBaremetalsolutionV2LogicalInterface read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudBaremetalsolutionV2LogicalInterface given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudBaremetalsolutionV2LogicalInterface
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudBaremetalsolutionV2LogicalInterface
   */
  public static GoogleCloudBaremetalsolutionV2LogicalInterface fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudBaremetalsolutionV2LogicalInterface.class);
  }

  /**
   * Convert an instance of GoogleCloudBaremetalsolutionV2LogicalInterface to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

