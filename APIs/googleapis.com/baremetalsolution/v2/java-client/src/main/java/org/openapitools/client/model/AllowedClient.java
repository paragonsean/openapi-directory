/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents an &#39;access point&#39; for the share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllowedClient {
  public static final String SERIALIZED_NAME_ALLOW_DEV = "allowDev";
  @SerializedName(SERIALIZED_NAME_ALLOW_DEV)
  private Boolean allowDev;

  public static final String SERIALIZED_NAME_ALLOW_SUID = "allowSuid";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUID)
  private Boolean allowSuid;

  public static final String SERIALIZED_NAME_ALLOWED_CLIENTS_CIDR = "allowedClientsCidr";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CLIENTS_CIDR)
  private String allowedClientsCidr;

  /**
   * Mount permissions.
   */
  @JsonAdapter(MountPermissionsEnum.Adapter.class)
  public enum MountPermissionsEnum {
    MOUNT_PERMISSIONS_UNSPECIFIED("MOUNT_PERMISSIONS_UNSPECIFIED"),
    
    READ("READ"),
    
    READ_WRITE("READ_WRITE");

    private String value;

    MountPermissionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MountPermissionsEnum fromValue(String value) {
      for (MountPermissionsEnum b : MountPermissionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MountPermissionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MountPermissionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MountPermissionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MountPermissionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MountPermissionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MOUNT_PERMISSIONS = "mountPermissions";
  @SerializedName(SERIALIZED_NAME_MOUNT_PERMISSIONS)
  private MountPermissionsEnum mountPermissions;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NFS_PATH = "nfsPath";
  @SerializedName(SERIALIZED_NAME_NFS_PATH)
  private String nfsPath;

  public static final String SERIALIZED_NAME_NO_ROOT_SQUASH = "noRootSquash";
  @SerializedName(SERIALIZED_NAME_NO_ROOT_SQUASH)
  private Boolean noRootSquash;

  public static final String SERIALIZED_NAME_SHARE_IP = "shareIp";
  @SerializedName(SERIALIZED_NAME_SHARE_IP)
  private String shareIp;

  public AllowedClient() {
  }

  public AllowedClient(
     String nfsPath, 
     String shareIp
  ) {
    this();
    this.nfsPath = nfsPath;
    this.shareIp = shareIp;
  }

  public AllowedClient allowDev(Boolean allowDev) {
    this.allowDev = allowDev;
    return this;
  }

  /**
   * Allow dev flag. Which controls whether to allow creation of devices.
   * @return allowDev
   */
  @javax.annotation.Nullable
  public Boolean getAllowDev() {
    return allowDev;
  }

  public void setAllowDev(Boolean allowDev) {
    this.allowDev = allowDev;
  }


  public AllowedClient allowSuid(Boolean allowSuid) {
    this.allowSuid = allowSuid;
    return this;
  }

  /**
   * Allow the setuid flag.
   * @return allowSuid
   */
  @javax.annotation.Nullable
  public Boolean getAllowSuid() {
    return allowSuid;
  }

  public void setAllowSuid(Boolean allowSuid) {
    this.allowSuid = allowSuid;
  }


  public AllowedClient allowedClientsCidr(String allowedClientsCidr) {
    this.allowedClientsCidr = allowedClientsCidr;
    return this;
  }

  /**
   * The subnet of IP addresses permitted to access the share.
   * @return allowedClientsCidr
   */
  @javax.annotation.Nullable
  public String getAllowedClientsCidr() {
    return allowedClientsCidr;
  }

  public void setAllowedClientsCidr(String allowedClientsCidr) {
    this.allowedClientsCidr = allowedClientsCidr;
  }


  public AllowedClient mountPermissions(MountPermissionsEnum mountPermissions) {
    this.mountPermissions = mountPermissions;
    return this;
  }

  /**
   * Mount permissions.
   * @return mountPermissions
   */
  @javax.annotation.Nullable
  public MountPermissionsEnum getMountPermissions() {
    return mountPermissions;
  }

  public void setMountPermissions(MountPermissionsEnum mountPermissions) {
    this.mountPermissions = mountPermissions;
  }


  public AllowedClient network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The network the access point sits on.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  /**
   * Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like \&quot;10.0.0.0:/g123456789-nfs001\&quot;
   * @return nfsPath
   */
  @javax.annotation.Nullable
  public String getNfsPath() {
    return nfsPath;
  }



  public AllowedClient noRootSquash(Boolean noRootSquash) {
    this.noRootSquash = noRootSquash;
    return this;
  }

  /**
   * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
   * @return noRootSquash
   */
  @javax.annotation.Nullable
  public Boolean getNoRootSquash() {
    return noRootSquash;
  }

  public void setNoRootSquash(Boolean noRootSquash) {
    this.noRootSquash = noRootSquash;
  }


  /**
   * Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network&#39;s services_cidr.
   * @return shareIp
   */
  @javax.annotation.Nullable
  public String getShareIp() {
    return shareIp;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllowedClient allowedClient = (AllowedClient) o;
    return Objects.equals(this.allowDev, allowedClient.allowDev) &&
        Objects.equals(this.allowSuid, allowedClient.allowSuid) &&
        Objects.equals(this.allowedClientsCidr, allowedClient.allowedClientsCidr) &&
        Objects.equals(this.mountPermissions, allowedClient.mountPermissions) &&
        Objects.equals(this.network, allowedClient.network) &&
        Objects.equals(this.nfsPath, allowedClient.nfsPath) &&
        Objects.equals(this.noRootSquash, allowedClient.noRootSquash) &&
        Objects.equals(this.shareIp, allowedClient.shareIp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowDev, allowSuid, allowedClientsCidr, mountPermissions, network, nfsPath, noRootSquash, shareIp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllowedClient {\n");
    sb.append("    allowDev: ").append(toIndentedString(allowDev)).append("\n");
    sb.append("    allowSuid: ").append(toIndentedString(allowSuid)).append("\n");
    sb.append("    allowedClientsCidr: ").append(toIndentedString(allowedClientsCidr)).append("\n");
    sb.append("    mountPermissions: ").append(toIndentedString(mountPermissions)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    nfsPath: ").append(toIndentedString(nfsPath)).append("\n");
    sb.append("    noRootSquash: ").append(toIndentedString(noRootSquash)).append("\n");
    sb.append("    shareIp: ").append(toIndentedString(shareIp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowDev");
    openapiFields.add("allowSuid");
    openapiFields.add("allowedClientsCidr");
    openapiFields.add("mountPermissions");
    openapiFields.add("network");
    openapiFields.add("nfsPath");
    openapiFields.add("noRootSquash");
    openapiFields.add("shareIp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllowedClient
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllowedClient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllowedClient is not found in the empty JSON string", AllowedClient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllowedClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllowedClient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allowedClientsCidr") != null && !jsonObj.get("allowedClientsCidr").isJsonNull()) && !jsonObj.get("allowedClientsCidr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedClientsCidr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allowedClientsCidr").toString()));
      }
      if ((jsonObj.get("mountPermissions") != null && !jsonObj.get("mountPermissions").isJsonNull()) && !jsonObj.get("mountPermissions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mountPermissions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mountPermissions").toString()));
      }
      // validate the optional field `mountPermissions`
      if (jsonObj.get("mountPermissions") != null && !jsonObj.get("mountPermissions").isJsonNull()) {
        MountPermissionsEnum.validateJsonElement(jsonObj.get("mountPermissions"));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("nfsPath") != null && !jsonObj.get("nfsPath").isJsonNull()) && !jsonObj.get("nfsPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfsPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nfsPath").toString()));
      }
      if ((jsonObj.get("shareIp") != null && !jsonObj.get("shareIp").isJsonNull()) && !jsonObj.get("shareIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareIp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllowedClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllowedClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllowedClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllowedClient.class));

       return (TypeAdapter<T>) new TypeAdapter<AllowedClient>() {
           @Override
           public void write(JsonWriter out, AllowedClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllowedClient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllowedClient given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllowedClient
   * @throws IOException if the JSON string is invalid with respect to AllowedClient
   */
  public static AllowedClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllowedClient.class);
  }

  /**
   * Convert an instance of AllowedClient to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

