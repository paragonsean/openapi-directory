/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstanceQuota;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A provisioning quota for a given project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisioningQuota {
  /**
   * The asset type of this provisioning quota.
   */
  @JsonAdapter(AssetTypeEnum.Adapter.class)
  public enum AssetTypeEnum {
    UNSPECIFIED("ASSET_TYPE_UNSPECIFIED"),
    
    SERVER("ASSET_TYPE_SERVER"),
    
    STORAGE("ASSET_TYPE_STORAGE"),
    
    NETWORK("ASSET_TYPE_NETWORK");

    private String value;

    AssetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssetTypeEnum fromValue(String value) {
      for (AssetTypeEnum b : AssetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSET_TYPE = "assetType";
  @SerializedName(SERIALIZED_NAME_ASSET_TYPE)
  private AssetTypeEnum assetType;

  public static final String SERIALIZED_NAME_AVAILABLE_COUNT = "availableCount";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_COUNT)
  private Integer availableCount;

  public static final String SERIALIZED_NAME_GCP_SERVICE = "gcpService";
  @SerializedName(SERIALIZED_NAME_GCP_SERVICE)
  private String gcpService;

  public static final String SERIALIZED_NAME_INSTANCE_QUOTA = "instanceQuota";
  @SerializedName(SERIALIZED_NAME_INSTANCE_QUOTA)
  private InstanceQuota instanceQuota;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_BANDWIDTH = "networkBandwidth";
  @SerializedName(SERIALIZED_NAME_NETWORK_BANDWIDTH)
  private String networkBandwidth;

  public static final String SERIALIZED_NAME_SERVER_COUNT = "serverCount";
  @SerializedName(SERIALIZED_NAME_SERVER_COUNT)
  private String serverCount;

  public static final String SERIALIZED_NAME_STORAGE_GIB = "storageGib";
  @SerializedName(SERIALIZED_NAME_STORAGE_GIB)
  private String storageGib;

  public ProvisioningQuota() {
  }

  public ProvisioningQuota(
     String name
  ) {
    this();
    this.name = name;
  }

  public ProvisioningQuota assetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
    return this;
  }

  /**
   * The asset type of this provisioning quota.
   * @return assetType
   */
  @javax.annotation.Nullable
  public AssetTypeEnum getAssetType() {
    return assetType;
  }

  public void setAssetType(AssetTypeEnum assetType) {
    this.assetType = assetType;
  }


  public ProvisioningQuota availableCount(Integer availableCount) {
    this.availableCount = availableCount;
    return this;
  }

  /**
   * The available count of the provisioning quota.
   * @return availableCount
   */
  @javax.annotation.Nullable
  public Integer getAvailableCount() {
    return availableCount;
  }

  public void setAvailableCount(Integer availableCount) {
    this.availableCount = availableCount;
  }


  public ProvisioningQuota gcpService(String gcpService) {
    this.gcpService = gcpService;
    return this;
  }

  /**
   * The gcp service of the provisioning quota.
   * @return gcpService
   */
  @javax.annotation.Nullable
  public String getGcpService() {
    return gcpService;
  }

  public void setGcpService(String gcpService) {
    this.gcpService = gcpService;
  }


  public ProvisioningQuota instanceQuota(InstanceQuota instanceQuota) {
    this.instanceQuota = instanceQuota;
    return this;
  }

  /**
   * Get instanceQuota
   * @return instanceQuota
   */
  @javax.annotation.Nullable
  public InstanceQuota getInstanceQuota() {
    return instanceQuota;
  }

  public void setInstanceQuota(InstanceQuota instanceQuota) {
    this.instanceQuota = instanceQuota;
  }


  public ProvisioningQuota location(String location) {
    this.location = location;
    return this;
  }

  /**
   * The specific location of the provisioining quota.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Output only. The name of the provisioning quota.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ProvisioningQuota networkBandwidth(String networkBandwidth) {
    this.networkBandwidth = networkBandwidth;
    return this;
  }

  /**
   * Network bandwidth, Gbps
   * @return networkBandwidth
   */
  @javax.annotation.Nullable
  public String getNetworkBandwidth() {
    return networkBandwidth;
  }

  public void setNetworkBandwidth(String networkBandwidth) {
    this.networkBandwidth = networkBandwidth;
  }


  public ProvisioningQuota serverCount(String serverCount) {
    this.serverCount = serverCount;
    return this;
  }

  /**
   * Server count.
   * @return serverCount
   */
  @javax.annotation.Nullable
  public String getServerCount() {
    return serverCount;
  }

  public void setServerCount(String serverCount) {
    this.serverCount = serverCount;
  }


  public ProvisioningQuota storageGib(String storageGib) {
    this.storageGib = storageGib;
    return this;
  }

  /**
   * Storage size (GB).
   * @return storageGib
   */
  @javax.annotation.Nullable
  public String getStorageGib() {
    return storageGib;
  }

  public void setStorageGib(String storageGib) {
    this.storageGib = storageGib;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisioningQuota provisioningQuota = (ProvisioningQuota) o;
    return Objects.equals(this.assetType, provisioningQuota.assetType) &&
        Objects.equals(this.availableCount, provisioningQuota.availableCount) &&
        Objects.equals(this.gcpService, provisioningQuota.gcpService) &&
        Objects.equals(this.instanceQuota, provisioningQuota.instanceQuota) &&
        Objects.equals(this.location, provisioningQuota.location) &&
        Objects.equals(this.name, provisioningQuota.name) &&
        Objects.equals(this.networkBandwidth, provisioningQuota.networkBandwidth) &&
        Objects.equals(this.serverCount, provisioningQuota.serverCount) &&
        Objects.equals(this.storageGib, provisioningQuota.storageGib);
  }

  @Override
  public int hashCode() {
    return Objects.hash(assetType, availableCount, gcpService, instanceQuota, location, name, networkBandwidth, serverCount, storageGib);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisioningQuota {\n");
    sb.append("    assetType: ").append(toIndentedString(assetType)).append("\n");
    sb.append("    availableCount: ").append(toIndentedString(availableCount)).append("\n");
    sb.append("    gcpService: ").append(toIndentedString(gcpService)).append("\n");
    sb.append("    instanceQuota: ").append(toIndentedString(instanceQuota)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkBandwidth: ").append(toIndentedString(networkBandwidth)).append("\n");
    sb.append("    serverCount: ").append(toIndentedString(serverCount)).append("\n");
    sb.append("    storageGib: ").append(toIndentedString(storageGib)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("assetType");
    openapiFields.add("availableCount");
    openapiFields.add("gcpService");
    openapiFields.add("instanceQuota");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("networkBandwidth");
    openapiFields.add("serverCount");
    openapiFields.add("storageGib");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisioningQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisioningQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisioningQuota is not found in the empty JSON string", ProvisioningQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisioningQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisioningQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonNull()) && !jsonObj.get("assetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetType").toString()));
      }
      // validate the optional field `assetType`
      if (jsonObj.get("assetType") != null && !jsonObj.get("assetType").isJsonNull()) {
        AssetTypeEnum.validateJsonElement(jsonObj.get("assetType"));
      }
      if ((jsonObj.get("gcpService") != null && !jsonObj.get("gcpService").isJsonNull()) && !jsonObj.get("gcpService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcpService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcpService").toString()));
      }
      // validate the optional field `instanceQuota`
      if (jsonObj.get("instanceQuota") != null && !jsonObj.get("instanceQuota").isJsonNull()) {
        InstanceQuota.validateJsonElement(jsonObj.get("instanceQuota"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("networkBandwidth") != null && !jsonObj.get("networkBandwidth").isJsonNull()) && !jsonObj.get("networkBandwidth").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkBandwidth` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkBandwidth").toString()));
      }
      if ((jsonObj.get("serverCount") != null && !jsonObj.get("serverCount").isJsonNull()) && !jsonObj.get("serverCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serverCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serverCount").toString()));
      }
      if ((jsonObj.get("storageGib") != null && !jsonObj.get("storageGib").isJsonNull()) && !jsonObj.get("storageGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageGib").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisioningQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisioningQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisioningQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisioningQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisioningQuota>() {
           @Override
           public void write(JsonWriter out, ProvisioningQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisioningQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisioningQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisioningQuota
   * @throws IOException if the JSON string is invalid with respect to ProvisioningQuota
   */
  public static ProvisioningQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisioningQuota.class);
  }

  /**
   * Convert an instance of ProvisioningQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

