/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Operation System image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSImage {
  public static final String SERIALIZED_NAME_APPLICABLE_INSTANCE_TYPES = "applicableInstanceTypes";
  @SerializedName(SERIALIZED_NAME_APPLICABLE_INSTANCE_TYPES)
  private List<String> applicableInstanceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SUPPORTED_NETWORK_TEMPLATES = "supportedNetworkTemplates";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_NETWORK_TEMPLATES)
  private List<String> supportedNetworkTemplates = new ArrayList<>();

  public OSImage() {
  }

  public OSImage(
     String name
  ) {
    this();
    this.name = name;
  }

  public OSImage applicableInstanceTypes(List<String> applicableInstanceTypes) {
    this.applicableInstanceTypes = applicableInstanceTypes;
    return this;
  }

  public OSImage addApplicableInstanceTypesItem(String applicableInstanceTypesItem) {
    if (this.applicableInstanceTypes == null) {
      this.applicableInstanceTypes = new ArrayList<>();
    }
    this.applicableInstanceTypes.add(applicableInstanceTypesItem);
    return this;
  }

  /**
   * Instance types this image is applicable to. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   * @return applicableInstanceTypes
   */
  @javax.annotation.Nullable
  public List<String> getApplicableInstanceTypes() {
    return applicableInstanceTypes;
  }

  public void setApplicableInstanceTypes(List<String> applicableInstanceTypes) {
    this.applicableInstanceTypes = applicableInstanceTypes;
  }


  public OSImage code(String code) {
    this.code = code;
    return this;
  }

  /**
   * OS Image code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public OSImage description(String description) {
    this.description = description;
    return this;
  }

  /**
   * OS Image description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * Output only. OS Image&#39;s unique name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public OSImage supportedNetworkTemplates(List<String> supportedNetworkTemplates) {
    this.supportedNetworkTemplates = supportedNetworkTemplates;
    return this;
  }

  public OSImage addSupportedNetworkTemplatesItem(String supportedNetworkTemplatesItem) {
    if (this.supportedNetworkTemplates == null) {
      this.supportedNetworkTemplates = new ArrayList<>();
    }
    this.supportedNetworkTemplates.add(supportedNetworkTemplatesItem);
    return this;
  }

  /**
   * Network templates that can be used with this OS Image.
   * @return supportedNetworkTemplates
   */
  @javax.annotation.Nullable
  public List<String> getSupportedNetworkTemplates() {
    return supportedNetworkTemplates;
  }

  public void setSupportedNetworkTemplates(List<String> supportedNetworkTemplates) {
    this.supportedNetworkTemplates = supportedNetworkTemplates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSImage osImage = (OSImage) o;
    return Objects.equals(this.applicableInstanceTypes, osImage.applicableInstanceTypes) &&
        Objects.equals(this.code, osImage.code) &&
        Objects.equals(this.description, osImage.description) &&
        Objects.equals(this.name, osImage.name) &&
        Objects.equals(this.supportedNetworkTemplates, osImage.supportedNetworkTemplates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicableInstanceTypes, code, description, name, supportedNetworkTemplates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSImage {\n");
    sb.append("    applicableInstanceTypes: ").append(toIndentedString(applicableInstanceTypes)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    supportedNetworkTemplates: ").append(toIndentedString(supportedNetworkTemplates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicableInstanceTypes");
    openapiFields.add("code");
    openapiFields.add("description");
    openapiFields.add("name");
    openapiFields.add("supportedNetworkTemplates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSImage is not found in the empty JSON string", OSImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("applicableInstanceTypes") != null && !jsonObj.get("applicableInstanceTypes").isJsonNull() && !jsonObj.get("applicableInstanceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicableInstanceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("applicableInstanceTypes").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedNetworkTemplates") != null && !jsonObj.get("supportedNetworkTemplates").isJsonNull() && !jsonObj.get("supportedNetworkTemplates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedNetworkTemplates` to be an array in the JSON string but got `%s`", jsonObj.get("supportedNetworkTemplates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSImage.class));

       return (TypeAdapter<T>) new TypeAdapter<OSImage>() {
           @Override
           public void write(JsonWriter out, OSImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSImage
   * @throws IOException if the JSON string is invalid with respect to OSImage
   */
  public static OSImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSImage.class);
  }

  /**
   * Convert an instance of OSImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

