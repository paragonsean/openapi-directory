/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudBaremetalsolutionV2LogicalInterface;
import org.openapitools.client.model.Lun;
import org.openapitools.client.model.Network;
import org.openapitools.client.model.Volume;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A server.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Instance {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_FIRMWARE_VERSION = "firmwareVersion";
  @SerializedName(SERIALIZED_NAME_FIRMWARE_VERSION)
  private String firmwareVersion;

  public static final String SERIALIZED_NAME_HYPERTHREADING_ENABLED = "hyperthreadingEnabled";
  @SerializedName(SERIALIZED_NAME_HYPERTHREADING_ENABLED)
  private Boolean hyperthreadingEnabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INTERACTIVE_SERIAL_CONSOLE_ENABLED = "interactiveSerialConsoleEnabled";
  @SerializedName(SERIALIZED_NAME_INTERACTIVE_SERIAL_CONSOLE_ENABLED)
  private Boolean interactiveSerialConsoleEnabled;

  public static final String SERIALIZED_NAME_KMS_KEY_VERSION = "kmsKeyVersion";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_VERSION)
  private String kmsKeyVersion;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOGICAL_INTERFACES = "logicalInterfaces";
  @SerializedName(SERIALIZED_NAME_LOGICAL_INTERFACES)
  private List<GoogleCloudBaremetalsolutionV2LogicalInterface> logicalInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOGIN_INFO = "loginInfo";
  @SerializedName(SERIALIZED_NAME_LOGIN_INFO)
  private String loginInfo;

  public static final String SERIALIZED_NAME_LUNS = "luns";
  @SerializedName(SERIALIZED_NAME_LUNS)
  private List<Lun> luns = new ArrayList<>();

  public static final String SERIALIZED_NAME_MACHINE_TYPE = "machineType";
  @SerializedName(SERIALIZED_NAME_MACHINE_TYPE)
  private String machineType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK_TEMPLATE = "networkTemplate";
  @SerializedName(SERIALIZED_NAME_NETWORK_TEMPLATE)
  private String networkTemplate;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<Network> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_OS_IMAGE = "osImage";
  @SerializedName(SERIALIZED_NAME_OS_IMAGE)
  private String osImage;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  public static final String SERIALIZED_NAME_SSH_KEYS = "sshKeys";
  @SerializedName(SERIALIZED_NAME_SSH_KEYS)
  private List<String> sshKeys = new ArrayList<>();

  /**
   * Output only. The state of the server.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONING("PROVISIONING"),
    
    RUNNING("RUNNING"),
    
    DELETED("DELETED"),
    
    UPDATING("UPDATING"),
    
    STARTING("STARTING"),
    
    STOPPING("STOPPING"),
    
    SHUTDOWN("SHUTDOWN");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<Volume> volumes = new ArrayList<>();

  /**
   * The workload profile for the instance.
   */
  @JsonAdapter(WorkloadProfileEnum.Adapter.class)
  public enum WorkloadProfileEnum {
    UNSPECIFIED("WORKLOAD_PROFILE_UNSPECIFIED"),
    
    GENERIC("WORKLOAD_PROFILE_GENERIC"),
    
    HANA("WORKLOAD_PROFILE_HANA");

    private String value;

    WorkloadProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkloadProfileEnum fromValue(String value) {
      for (WorkloadProfileEnum b : WorkloadProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkloadProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkloadProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkloadProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkloadProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkloadProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKLOAD_PROFILE = "workloadProfile";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_PROFILE)
  private WorkloadProfileEnum workloadProfile;

  public Instance() {
  }

  public Instance(
     String createTime, 
     String firmwareVersion, 
     String id, 
     Boolean interactiveSerialConsoleEnabled, 
     String loginInfo, 
     List<Network> networks, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.firmwareVersion = firmwareVersion;
    this.id = id;
    this.interactiveSerialConsoleEnabled = interactiveSerialConsoleEnabled;
    this.loginInfo = loginInfo;
    this.networks = networks;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Create a time stamp.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The firmware version for the instance.
   * @return firmwareVersion
   */
  @javax.annotation.Nullable
  public String getFirmwareVersion() {
    return firmwareVersion;
  }



  public Instance hyperthreadingEnabled(Boolean hyperthreadingEnabled) {
    this.hyperthreadingEnabled = hyperthreadingEnabled;
    return this;
  }

  /**
   * True if you enable hyperthreading for the server, otherwise false. The default value is false.
   * @return hyperthreadingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getHyperthreadingEnabled() {
    return hyperthreadingEnabled;
  }

  public void setHyperthreadingEnabled(Boolean hyperthreadingEnabled) {
    this.hyperthreadingEnabled = hyperthreadingEnabled;
  }


  /**
   * Output only. An identifier for the &#x60;Instance&#x60;, generated by the backend.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  /**
   * Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
   * @return interactiveSerialConsoleEnabled
   */
  @javax.annotation.Nullable
  public Boolean getInteractiveSerialConsoleEnabled() {
    return interactiveSerialConsoleEnabled;
  }



  public Instance kmsKeyVersion(String kmsKeyVersion) {
    this.kmsKeyVersion = kmsKeyVersion;
    return this;
  }

  /**
   * Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is &#x60;projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}&#x60;.
   * @return kmsKeyVersion
   */
  @javax.annotation.Nullable
  public String getKmsKeyVersion() {
    return kmsKeyVersion;
  }

  public void setKmsKeyVersion(String kmsKeyVersion) {
    this.kmsKeyVersion = kmsKeyVersion;
  }


  public Instance labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Instance putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Instance logicalInterfaces(List<GoogleCloudBaremetalsolutionV2LogicalInterface> logicalInterfaces) {
    this.logicalInterfaces = logicalInterfaces;
    return this;
  }

  public Instance addLogicalInterfacesItem(GoogleCloudBaremetalsolutionV2LogicalInterface logicalInterfacesItem) {
    if (this.logicalInterfaces == null) {
      this.logicalInterfaces = new ArrayList<>();
    }
    this.logicalInterfaces.add(logicalInterfacesItem);
    return this;
  }

  /**
   * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
   * @return logicalInterfaces
   */
  @javax.annotation.Nullable
  public List<GoogleCloudBaremetalsolutionV2LogicalInterface> getLogicalInterfaces() {
    return logicalInterfaces;
  }

  public void setLogicalInterfaces(List<GoogleCloudBaremetalsolutionV2LogicalInterface> logicalInterfaces) {
    this.logicalInterfaces = logicalInterfaces;
  }


  /**
   * Output only. Text field about info for logging in.
   * @return loginInfo
   */
  @javax.annotation.Nullable
  public String getLoginInfo() {
    return loginInfo;
  }



  public Instance luns(List<Lun> luns) {
    this.luns = luns;
    return this;
  }

  public Instance addLunsItem(Lun lunsItem) {
    if (this.luns == null) {
      this.luns = new ArrayList<>();
    }
    this.luns.add(lunsItem);
    return this;
  }

  /**
   * Immutable. List of LUNs associated with this server.
   * @return luns
   */
  @javax.annotation.Nullable
  public List<Lun> getLuns() {
    return luns;
  }

  public void setLuns(List<Lun> luns) {
    this.luns = luns;
  }


  public Instance machineType(String machineType) {
    this.machineType = machineType;
    return this;
  }

  /**
   * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   * @return machineType
   */
  @javax.annotation.Nullable
  public String getMachineType() {
    return machineType;
  }

  public void setMachineType(String machineType) {
    this.machineType = machineType;
  }


  public Instance name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The resource name of this &#x60;Instance&#x60;. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: &#x60;projects/{project}/locations/{location}/instances/{instance}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Instance networkTemplate(String networkTemplate) {
    this.networkTemplate = networkTemplate;
    return this;
  }

  /**
   * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of \&quot;bond\&quot; or \&quot;nic\&quot;.
   * @return networkTemplate
   */
  @javax.annotation.Nullable
  public String getNetworkTemplate() {
    return networkTemplate;
  }

  public void setNetworkTemplate(String networkTemplate) {
    this.networkTemplate = networkTemplate;
  }


  /**
   * Output only. List of networks associated with this server.
   * @return networks
   */
  @javax.annotation.Nullable
  public List<Network> getNetworks() {
    return networks;
  }



  public Instance osImage(String osImage) {
    this.osImage = osImage;
    return this;
  }

  /**
   * The OS image currently installed on the server.
   * @return osImage
   */
  @javax.annotation.Nullable
  public String getOsImage() {
    return osImage;
  }

  public void setOsImage(String osImage) {
    this.osImage = osImage;
  }


  public Instance pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod.
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  public Instance sshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
    return this;
  }

  public Instance addSshKeysItem(String sshKeysItem) {
    if (this.sshKeys == null) {
      this.sshKeys = new ArrayList<>();
    }
    this.sshKeys.add(sshKeysItem);
    return this;
  }

  /**
   * Optional. List of SSH Keys used during instance provisioning.
   * @return sshKeys
   */
  @javax.annotation.Nullable
  public List<String> getSshKeys() {
    return sshKeys;
  }

  public void setSshKeys(List<String> sshKeys) {
    this.sshKeys = sshKeys;
  }


  /**
   * Output only. The state of the server.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Update a time stamp.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public Instance volumes(List<Volume> volumes) {
    this.volumes = volumes;
    return this;
  }

  public Instance addVolumesItem(Volume volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Input only. List of Volumes to attach to this Instance on creation. This field won&#39;t be populated in Get/List responses.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<Volume> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<Volume> volumes) {
    this.volumes = volumes;
  }


  public Instance workloadProfile(WorkloadProfileEnum workloadProfile) {
    this.workloadProfile = workloadProfile;
    return this;
  }

  /**
   * The workload profile for the instance.
   * @return workloadProfile
   */
  @javax.annotation.Nullable
  public WorkloadProfileEnum getWorkloadProfile() {
    return workloadProfile;
  }

  public void setWorkloadProfile(WorkloadProfileEnum workloadProfile) {
    this.workloadProfile = workloadProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instance instance = (Instance) o;
    return Objects.equals(this.createTime, instance.createTime) &&
        Objects.equals(this.firmwareVersion, instance.firmwareVersion) &&
        Objects.equals(this.hyperthreadingEnabled, instance.hyperthreadingEnabled) &&
        Objects.equals(this.id, instance.id) &&
        Objects.equals(this.interactiveSerialConsoleEnabled, instance.interactiveSerialConsoleEnabled) &&
        Objects.equals(this.kmsKeyVersion, instance.kmsKeyVersion) &&
        Objects.equals(this.labels, instance.labels) &&
        Objects.equals(this.logicalInterfaces, instance.logicalInterfaces) &&
        Objects.equals(this.loginInfo, instance.loginInfo) &&
        Objects.equals(this.luns, instance.luns) &&
        Objects.equals(this.machineType, instance.machineType) &&
        Objects.equals(this.name, instance.name) &&
        Objects.equals(this.networkTemplate, instance.networkTemplate) &&
        Objects.equals(this.networks, instance.networks) &&
        Objects.equals(this.osImage, instance.osImage) &&
        Objects.equals(this.pod, instance.pod) &&
        Objects.equals(this.sshKeys, instance.sshKeys) &&
        Objects.equals(this.state, instance.state) &&
        Objects.equals(this.updateTime, instance.updateTime) &&
        Objects.equals(this.volumes, instance.volumes) &&
        Objects.equals(this.workloadProfile, instance.workloadProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, firmwareVersion, hyperthreadingEnabled, id, interactiveSerialConsoleEnabled, kmsKeyVersion, labels, logicalInterfaces, loginInfo, luns, machineType, name, networkTemplate, networks, osImage, pod, sshKeys, state, updateTime, volumes, workloadProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instance {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    firmwareVersion: ").append(toIndentedString(firmwareVersion)).append("\n");
    sb.append("    hyperthreadingEnabled: ").append(toIndentedString(hyperthreadingEnabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interactiveSerialConsoleEnabled: ").append(toIndentedString(interactiveSerialConsoleEnabled)).append("\n");
    sb.append("    kmsKeyVersion: ").append(toIndentedString(kmsKeyVersion)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    logicalInterfaces: ").append(toIndentedString(logicalInterfaces)).append("\n");
    sb.append("    loginInfo: ").append(toIndentedString(loginInfo)).append("\n");
    sb.append("    luns: ").append(toIndentedString(luns)).append("\n");
    sb.append("    machineType: ").append(toIndentedString(machineType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkTemplate: ").append(toIndentedString(networkTemplate)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    osImage: ").append(toIndentedString(osImage)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    sshKeys: ").append(toIndentedString(sshKeys)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    workloadProfile: ").append(toIndentedString(workloadProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("firmwareVersion");
    openapiFields.add("hyperthreadingEnabled");
    openapiFields.add("id");
    openapiFields.add("interactiveSerialConsoleEnabled");
    openapiFields.add("kmsKeyVersion");
    openapiFields.add("labels");
    openapiFields.add("logicalInterfaces");
    openapiFields.add("loginInfo");
    openapiFields.add("luns");
    openapiFields.add("machineType");
    openapiFields.add("name");
    openapiFields.add("networkTemplate");
    openapiFields.add("networks");
    openapiFields.add("osImage");
    openapiFields.add("pod");
    openapiFields.add("sshKeys");
    openapiFields.add("state");
    openapiFields.add("updateTime");
    openapiFields.add("volumes");
    openapiFields.add("workloadProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Instance
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Instance.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Instance is not found in the empty JSON string", Instance.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Instance.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Instance` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("firmwareVersion") != null && !jsonObj.get("firmwareVersion").isJsonNull()) && !jsonObj.get("firmwareVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firmwareVersion").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kmsKeyVersion") != null && !jsonObj.get("kmsKeyVersion").isJsonNull()) && !jsonObj.get("kmsKeyVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyVersion").toString()));
      }
      if (jsonObj.get("logicalInterfaces") != null && !jsonObj.get("logicalInterfaces").isJsonNull()) {
        JsonArray jsonArraylogicalInterfaces = jsonObj.getAsJsonArray("logicalInterfaces");
        if (jsonArraylogicalInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logicalInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logicalInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("logicalInterfaces").toString()));
          }

          // validate the optional field `logicalInterfaces` (array)
          for (int i = 0; i < jsonArraylogicalInterfaces.size(); i++) {
            GoogleCloudBaremetalsolutionV2LogicalInterface.validateJsonElement(jsonArraylogicalInterfaces.get(i));
          };
        }
      }
      if ((jsonObj.get("loginInfo") != null && !jsonObj.get("loginInfo").isJsonNull()) && !jsonObj.get("loginInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginInfo").toString()));
      }
      if (jsonObj.get("luns") != null && !jsonObj.get("luns").isJsonNull()) {
        JsonArray jsonArrayluns = jsonObj.getAsJsonArray("luns");
        if (jsonArrayluns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("luns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `luns` to be an array in the JSON string but got `%s`", jsonObj.get("luns").toString()));
          }

          // validate the optional field `luns` (array)
          for (int i = 0; i < jsonArrayluns.size(); i++) {
            Lun.validateJsonElement(jsonArrayluns.get(i));
          };
        }
      }
      if ((jsonObj.get("machineType") != null && !jsonObj.get("machineType").isJsonNull()) && !jsonObj.get("machineType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `machineType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("machineType").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("networkTemplate") != null && !jsonObj.get("networkTemplate").isJsonNull()) && !jsonObj.get("networkTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkTemplate").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            Network.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("osImage") != null && !jsonObj.get("osImage").isJsonNull()) && !jsonObj.get("osImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osImage").toString()));
      }
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sshKeys") != null && !jsonObj.get("sshKeys").isJsonNull() && !jsonObj.get("sshKeys").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshKeys` to be an array in the JSON string but got `%s`", jsonObj.get("sshKeys").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            Volume.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
      if ((jsonObj.get("workloadProfile") != null && !jsonObj.get("workloadProfile").isJsonNull()) && !jsonObj.get("workloadProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workloadProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workloadProfile").toString()));
      }
      // validate the optional field `workloadProfile`
      if (jsonObj.get("workloadProfile") != null && !jsonObj.get("workloadProfile").isJsonNull()) {
        WorkloadProfileEnum.validateJsonElement(jsonObj.get("workloadProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Instance.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Instance' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Instance> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Instance.class));

       return (TypeAdapter<T>) new TypeAdapter<Instance>() {
           @Override
           public void write(JsonWriter out, Instance value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Instance read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Instance given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Instance
   * @throws IOException if the JSON string is invalid with respect to Instance
   */
  public static Instance fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Instance.class);
  }

  /**
   * Convert an instance of Instance to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

