/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A resource budget.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceQuota {
  public static final String SERIALIZED_NAME_AVAILABLE_MACHINE_COUNT = "availableMachineCount";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_MACHINE_COUNT)
  private Integer availableMachineCount;

  public static final String SERIALIZED_NAME_GCP_SERVICE = "gcpService";
  @SerializedName(SERIALIZED_NAME_GCP_SERVICE)
  private String gcpService;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public InstanceQuota() {
  }

  public InstanceQuota(
     String name
  ) {
    this();
    this.name = name;
  }

  public InstanceQuota availableMachineCount(Integer availableMachineCount) {
    this.availableMachineCount = availableMachineCount;
    return this;
  }

  /**
   * Number of machines than can be created for the given location and instance_type.
   * @return availableMachineCount
   */
  @javax.annotation.Nullable
  public Integer getAvailableMachineCount() {
    return availableMachineCount;
  }

  public void setAvailableMachineCount(Integer availableMachineCount) {
    this.availableMachineCount = availableMachineCount;
  }


  public InstanceQuota gcpService(String gcpService) {
    this.gcpService = gcpService;
    return this;
  }

  /**
   * The gcp service of the provisioning quota.
   * @return gcpService
   */
  @javax.annotation.Nullable
  public String getGcpService() {
    return gcpService;
  }

  public void setGcpService(String gcpService) {
    this.gcpService = gcpService;
  }


  @Deprecated
  public InstanceQuota instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Instance type. Deprecated: use gcp_service.
   * @return instanceType
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  @Deprecated
  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public InstanceQuota location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location where the quota applies.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Output only. The name of the instance quota.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceQuota instanceQuota = (InstanceQuota) o;
    return Objects.equals(this.availableMachineCount, instanceQuota.availableMachineCount) &&
        Objects.equals(this.gcpService, instanceQuota.gcpService) &&
        Objects.equals(this.instanceType, instanceQuota.instanceType) &&
        Objects.equals(this.location, instanceQuota.location) &&
        Objects.equals(this.name, instanceQuota.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableMachineCount, gcpService, instanceType, location, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceQuota {\n");
    sb.append("    availableMachineCount: ").append(toIndentedString(availableMachineCount)).append("\n");
    sb.append("    gcpService: ").append(toIndentedString(gcpService)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availableMachineCount");
    openapiFields.add("gcpService");
    openapiFields.add("instanceType");
    openapiFields.add("location");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceQuota
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceQuota.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceQuota is not found in the empty JSON string", InstanceQuota.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceQuota.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceQuota` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gcpService") != null && !jsonObj.get("gcpService").isJsonNull()) && !jsonObj.get("gcpService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcpService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcpService").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceQuota.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceQuota' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceQuota> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceQuota.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceQuota>() {
           @Override
           public void write(JsonWriter out, InstanceQuota value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceQuota read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceQuota given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceQuota
   * @throws IOException if the JSON string is invalid with respect to InstanceQuota
   */
  public static InstanceQuota fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceQuota.class);
  }

  /**
   * Convert an instance of InstanceQuota to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

