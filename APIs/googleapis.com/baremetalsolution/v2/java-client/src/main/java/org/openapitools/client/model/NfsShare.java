/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AllowedClient;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An NFS share.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NfsShare {
  public static final String SERIALIZED_NAME_ALLOWED_CLIENTS = "allowedClients";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CLIENTS)
  private List<AllowedClient> allowedClients = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NFS_SHARE_ID = "nfsShareId";
  @SerializedName(SERIALIZED_NAME_NFS_SHARE_ID)
  private String nfsShareId;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  public static final String SERIALIZED_NAME_REQUESTED_SIZE_GIB = "requestedSizeGib";
  @SerializedName(SERIALIZED_NAME_REQUESTED_SIZE_GIB)
  private String requestedSizeGib;

  /**
   * Output only. The state of the NFS share.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PROVISIONED("PROVISIONED"),
    
    CREATING("CREATING"),
    
    UPDATING("UPDATING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Immutable. The storage type of the underlying volume.
   */
  @JsonAdapter(StorageTypeEnum.Adapter.class)
  public enum StorageTypeEnum {
    STORAGE_TYPE_UNSPECIFIED("STORAGE_TYPE_UNSPECIFIED"),
    
    SSD("SSD"),
    
    HDD("HDD");

    private String value;

    StorageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageTypeEnum fromValue(String value) {
      for (StorageTypeEnum b : StorageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "storageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private StorageTypeEnum storageType;

  public static final String SERIALIZED_NAME_VOLUME = "volume";
  @SerializedName(SERIALIZED_NAME_VOLUME)
  private String volume;

  public NfsShare() {
  }

  public NfsShare(
     String id, 
     String nfsShareId, 
     StateEnum state, 
     String volume
  ) {
    this();
    this.id = id;
    this.nfsShareId = nfsShareId;
    this.state = state;
    this.volume = volume;
  }

  public NfsShare allowedClients(List<AllowedClient> allowedClients) {
    this.allowedClients = allowedClients;
    return this;
  }

  public NfsShare addAllowedClientsItem(AllowedClient allowedClientsItem) {
    if (this.allowedClients == null) {
      this.allowedClients = new ArrayList<>();
    }
    this.allowedClients.add(allowedClientsItem);
    return this;
  }

  /**
   * List of allowed access points.
   * @return allowedClients
   */
  @javax.annotation.Nullable
  public List<AllowedClient> getAllowedClients() {
    return allowedClients;
  }

  public void setAllowedClients(List<AllowedClient> allowedClients) {
    this.allowedClients = allowedClients;
  }


  /**
   * Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public NfsShare labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public NfsShare putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public NfsShare name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of the NFS share.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use &#x60;id&#x60; instead.
   * @return nfsShareId
   */
  @javax.annotation.Nullable
  public String getNfsShareId() {
    return nfsShareId;
  }



  public NfsShare pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  public NfsShare requestedSizeGib(String requestedSizeGib) {
    this.requestedSizeGib = requestedSizeGib;
    return this;
  }

  /**
   * The requested size, in GiB.
   * @return requestedSizeGib
   */
  @javax.annotation.Nullable
  public String getRequestedSizeGib() {
    return requestedSizeGib;
  }

  public void setRequestedSizeGib(String requestedSizeGib) {
    this.requestedSizeGib = requestedSizeGib;
  }


  /**
   * Output only. The state of the NFS share.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public NfsShare storageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * Immutable. The storage type of the underlying volume.
   * @return storageType
   */
  @javax.annotation.Nullable
  public StorageTypeEnum getStorageType() {
    return storageType;
  }

  public void setStorageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
  }


  /**
   * Output only. The underlying volume of the share. Created automatically during provisioning.
   * @return volume
   */
  @javax.annotation.Nullable
  public String getVolume() {
    return volume;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NfsShare nfsShare = (NfsShare) o;
    return Objects.equals(this.allowedClients, nfsShare.allowedClients) &&
        Objects.equals(this.id, nfsShare.id) &&
        Objects.equals(this.labels, nfsShare.labels) &&
        Objects.equals(this.name, nfsShare.name) &&
        Objects.equals(this.nfsShareId, nfsShare.nfsShareId) &&
        Objects.equals(this.pod, nfsShare.pod) &&
        Objects.equals(this.requestedSizeGib, nfsShare.requestedSizeGib) &&
        Objects.equals(this.state, nfsShare.state) &&
        Objects.equals(this.storageType, nfsShare.storageType) &&
        Objects.equals(this.volume, nfsShare.volume);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedClients, id, labels, name, nfsShareId, pod, requestedSizeGib, state, storageType, volume);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NfsShare {\n");
    sb.append("    allowedClients: ").append(toIndentedString(allowedClients)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nfsShareId: ").append(toIndentedString(nfsShareId)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    requestedSizeGib: ").append(toIndentedString(requestedSizeGib)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedClients");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("nfsShareId");
    openapiFields.add("pod");
    openapiFields.add("requestedSizeGib");
    openapiFields.add("state");
    openapiFields.add("storageType");
    openapiFields.add("volume");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NfsShare
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NfsShare.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NfsShare is not found in the empty JSON string", NfsShare.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NfsShare.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NfsShare` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allowedClients") != null && !jsonObj.get("allowedClients").isJsonNull()) {
        JsonArray jsonArrayallowedClients = jsonObj.getAsJsonArray("allowedClients");
        if (jsonArrayallowedClients != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedClients").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedClients` to be an array in the JSON string but got `%s`", jsonObj.get("allowedClients").toString()));
          }

          // validate the optional field `allowedClients` (array)
          for (int i = 0; i < jsonArrayallowedClients.size(); i++) {
            AllowedClient.validateJsonElement(jsonArrayallowedClients.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("nfsShareId") != null && !jsonObj.get("nfsShareId").isJsonNull()) && !jsonObj.get("nfsShareId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nfsShareId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nfsShareId").toString()));
      }
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      if ((jsonObj.get("requestedSizeGib") != null && !jsonObj.get("requestedSizeGib").isJsonNull()) && !jsonObj.get("requestedSizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedSizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedSizeGib").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) && !jsonObj.get("storageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageType").toString()));
      }
      // validate the optional field `storageType`
      if (jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) {
        StorageTypeEnum.validateJsonElement(jsonObj.get("storageType"));
      }
      if ((jsonObj.get("volume") != null && !jsonObj.get("volume").isJsonNull()) && !jsonObj.get("volume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `volume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("volume").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NfsShare.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NfsShare' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NfsShare> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NfsShare.class));

       return (TypeAdapter<T>) new TypeAdapter<NfsShare>() {
           @Override
           public void write(JsonWriter out, NfsShare value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NfsShare read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NfsShare given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NfsShare
   * @throws IOException if the JSON string is invalid with respect to NfsShare
   */
  public static NfsShare fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NfsShare.class);
  }

  /**
   * Convert an instance of NfsShare to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

