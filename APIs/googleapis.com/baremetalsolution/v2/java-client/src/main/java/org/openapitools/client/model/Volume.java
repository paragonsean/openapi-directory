/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SnapshotReservationDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A storage volume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Volume {
  public static final String SERIALIZED_NAME_ATTACHED = "attached";
  @SerializedName(SERIALIZED_NAME_ATTACHED)
  private Boolean attached;

  public static final String SERIALIZED_NAME_AUTO_GROWN_SIZE_GIB = "autoGrownSizeGib";
  @SerializedName(SERIALIZED_NAME_AUTO_GROWN_SIZE_GIB)
  private String autoGrownSizeGib;

  public static final String SERIALIZED_NAME_BOOT_VOLUME = "bootVolume";
  @SerializedName(SERIALIZED_NAME_BOOT_VOLUME)
  private Boolean bootVolume;

  public static final String SERIALIZED_NAME_CURRENT_SIZE_GIB = "currentSizeGib";
  @SerializedName(SERIALIZED_NAME_CURRENT_SIZE_GIB)
  private String currentSizeGib;

  public static final String SERIALIZED_NAME_EMERGENCY_SIZE_GIB = "emergencySizeGib";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_SIZE_GIB)
  private String emergencySizeGib;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<String> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MAX_SIZE_GIB = "maxSizeGib";
  @SerializedName(SERIALIZED_NAME_MAX_SIZE_GIB)
  private String maxSizeGib;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private String notes;

  public static final String SERIALIZED_NAME_ORIGINALLY_REQUESTED_SIZE_GIB = "originallyRequestedSizeGib";
  @SerializedName(SERIALIZED_NAME_ORIGINALLY_REQUESTED_SIZE_GIB)
  private String originallyRequestedSizeGib;

  /**
   * Immutable. Performance tier of the Volume. Default is SHARED.
   */
  @JsonAdapter(PerformanceTierEnum.Adapter.class)
  public enum PerformanceTierEnum {
    UNSPECIFIED("VOLUME_PERFORMANCE_TIER_UNSPECIFIED"),
    
    SHARED("VOLUME_PERFORMANCE_TIER_SHARED"),
    
    ASSIGNED("VOLUME_PERFORMANCE_TIER_ASSIGNED"),
    
    HT("VOLUME_PERFORMANCE_TIER_HT"),
    
    QOS2_PERFORMANCE("VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE");

    private String value;

    PerformanceTierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PerformanceTierEnum fromValue(String value) {
      for (PerformanceTierEnum b : PerformanceTierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PerformanceTierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PerformanceTierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PerformanceTierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PerformanceTierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PerformanceTierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERFORMANCE_TIER = "performanceTier";
  @SerializedName(SERIALIZED_NAME_PERFORMANCE_TIER)
  private PerformanceTierEnum performanceTier;

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  /**
   * Output only. Storage protocol for the Volume.
   */
  @JsonAdapter(ProtocolEnum.Adapter.class)
  public enum ProtocolEnum {
    PROTOCOL_UNSPECIFIED("PROTOCOL_UNSPECIFIED"),
    
    FIBRE_CHANNEL("FIBRE_CHANNEL"),
    
    NFS("NFS");

    private String value;

    ProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolEnum fromValue(String value) {
      for (ProtocolEnum b : ProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL = "protocol";
  @SerializedName(SERIALIZED_NAME_PROTOCOL)
  private ProtocolEnum protocol;

  public static final String SERIALIZED_NAME_REMAINING_SPACE_GIB = "remainingSpaceGib";
  @SerializedName(SERIALIZED_NAME_REMAINING_SPACE_GIB)
  private String remainingSpaceGib;

  public static final String SERIALIZED_NAME_REQUESTED_SIZE_GIB = "requestedSizeGib";
  @SerializedName(SERIALIZED_NAME_REQUESTED_SIZE_GIB)
  private String requestedSizeGib;

  /**
   * The behavior to use when snapshot reserved space is full.
   */
  @JsonAdapter(SnapshotAutoDeleteBehaviorEnum.Adapter.class)
  public enum SnapshotAutoDeleteBehaviorEnum {
    SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED("SNAPSHOT_AUTO_DELETE_BEHAVIOR_UNSPECIFIED"),
    
    DISABLED("DISABLED"),
    
    OLDEST_FIRST("OLDEST_FIRST"),
    
    NEWEST_FIRST("NEWEST_FIRST");

    private String value;

    SnapshotAutoDeleteBehaviorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SnapshotAutoDeleteBehaviorEnum fromValue(String value) {
      for (SnapshotAutoDeleteBehaviorEnum b : SnapshotAutoDeleteBehaviorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SnapshotAutoDeleteBehaviorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SnapshotAutoDeleteBehaviorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SnapshotAutoDeleteBehaviorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SnapshotAutoDeleteBehaviorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SnapshotAutoDeleteBehaviorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SNAPSHOT_AUTO_DELETE_BEHAVIOR = "snapshotAutoDeleteBehavior";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_AUTO_DELETE_BEHAVIOR)
  private SnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior;

  public static final String SERIALIZED_NAME_SNAPSHOT_ENABLED = "snapshotEnabled";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_ENABLED)
  private Boolean snapshotEnabled;

  public static final String SERIALIZED_NAME_SNAPSHOT_RESERVATION_DETAIL = "snapshotReservationDetail";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_RESERVATION_DETAIL)
  private SnapshotReservationDetail snapshotReservationDetail;

  /**
   * The state of this storage volume.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    READY("READY"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING"),
    
    COOL_OFF("COOL_OFF");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The storage type for this volume.
   */
  @JsonAdapter(StorageTypeEnum.Adapter.class)
  public enum StorageTypeEnum {
    STORAGE_TYPE_UNSPECIFIED("STORAGE_TYPE_UNSPECIFIED"),
    
    SSD("SSD"),
    
    HDD("HDD");

    private String value;

    StorageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageTypeEnum fromValue(String value) {
      for (StorageTypeEnum b : StorageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "storageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private StorageTypeEnum storageType;

  /**
   * The workload profile for the volume.
   */
  @JsonAdapter(WorkloadProfileEnum.Adapter.class)
  public enum WorkloadProfileEnum {
    WORKLOAD_PROFILE_UNSPECIFIED("WORKLOAD_PROFILE_UNSPECIFIED"),
    
    GENERIC("GENERIC"),
    
    HANA("HANA");

    private String value;

    WorkloadProfileEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkloadProfileEnum fromValue(String value) {
      for (WorkloadProfileEnum b : WorkloadProfileEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkloadProfileEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkloadProfileEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkloadProfileEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkloadProfileEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkloadProfileEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORKLOAD_PROFILE = "workloadProfile";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_PROFILE)
  private WorkloadProfileEnum workloadProfile;

  public Volume() {
  }

  public Volume(
     Boolean attached, 
     Boolean bootVolume, 
     String expireTime, 
     List<String> instances, 
     String name, 
     ProtocolEnum protocol
  ) {
    this();
    this.attached = attached;
    this.bootVolume = bootVolume;
    this.expireTime = expireTime;
    this.instances = instances;
    this.name = name;
    this.protocol = protocol;
  }

  /**
   * Output only. Is the Volume attached at at least one instance. This field is a lightweight counterpart of &#x60;instances&#x60; field. It is filled in List responses as well.
   * @return attached
   */
  @javax.annotation.Nullable
  public Boolean getAttached() {
    return attached;
  }



  public Volume autoGrownSizeGib(String autoGrownSizeGib) {
    this.autoGrownSizeGib = autoGrownSizeGib;
    return this;
  }

  /**
   * The size, in GiB, that this storage volume has expanded as a result of an auto grow policy. In the absence of auto-grow, the value is 0.
   * @return autoGrownSizeGib
   */
  @javax.annotation.Nullable
  public String getAutoGrownSizeGib() {
    return autoGrownSizeGib;
  }

  public void setAutoGrownSizeGib(String autoGrownSizeGib) {
    this.autoGrownSizeGib = autoGrownSizeGib;
  }


  /**
   * Output only. Whether this volume is a boot volume. A boot volume is one which contains a boot LUN.
   * @return bootVolume
   */
  @javax.annotation.Nullable
  public Boolean getBootVolume() {
    return bootVolume;
  }



  public Volume currentSizeGib(String currentSizeGib) {
    this.currentSizeGib = currentSizeGib;
    return this;
  }

  /**
   * The current size of this storage volume, in GiB, including space reserved for snapshots. This size might be different than the requested size if the storage volume has been configured with auto grow or auto shrink.
   * @return currentSizeGib
   */
  @javax.annotation.Nullable
  public String getCurrentSizeGib() {
    return currentSizeGib;
  }

  public void setCurrentSizeGib(String currentSizeGib) {
    this.currentSizeGib = currentSizeGib;
  }


  public Volume emergencySizeGib(String emergencySizeGib) {
    this.emergencySizeGib = emergencySizeGib;
    return this;
  }

  /**
   * Additional emergency size that was requested for this Volume, in GiB. current_size_gib includes this value.
   * @return emergencySizeGib
   */
  @javax.annotation.Nullable
  public String getEmergencySizeGib() {
    return emergencySizeGib;
  }

  public void setEmergencySizeGib(String emergencySizeGib) {
    this.emergencySizeGib = emergencySizeGib;
  }


  /**
   * Output only. Time after which volume will be fully deleted. It is filled only for volumes in COOLOFF state.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  public Volume id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier for the &#x60;Volume&#x60;, generated by the backend.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Output only. Instances this Volume is attached to. This field is set only in Get requests.
   * @return instances
   */
  @javax.annotation.Nullable
  public List<String> getInstances() {
    return instances;
  }



  public Volume labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Volume putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels as key value pairs.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Volume maxSizeGib(String maxSizeGib) {
    this.maxSizeGib = maxSizeGib;
    return this;
  }

  /**
   * Maximum size volume can be expanded to in case of evergency, in GiB.
   * @return maxSizeGib
   */
  @javax.annotation.Nullable
  public String getMaxSizeGib() {
    return maxSizeGib;
  }

  public void setMaxSizeGib(String maxSizeGib) {
    this.maxSizeGib = maxSizeGib;
  }


  /**
   * Output only. The resource name of this &#x60;Volume&#x60;. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: &#x60;projects/{project}/locations/{location}/volumes/{volume}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Volume notes(String notes) {
    this.notes = notes;
    return this;
  }

  /**
   * Input only. User-specified notes for new Volume. Used to provision Volumes that require manual intervention.
   * @return notes
   */
  @javax.annotation.Nullable
  public String getNotes() {
    return notes;
  }

  public void setNotes(String notes) {
    this.notes = notes;
  }


  public Volume originallyRequestedSizeGib(String originallyRequestedSizeGib) {
    this.originallyRequestedSizeGib = originallyRequestedSizeGib;
    return this;
  }

  /**
   * Originally requested size, in GiB.
   * @return originallyRequestedSizeGib
   */
  @javax.annotation.Nullable
  public String getOriginallyRequestedSizeGib() {
    return originallyRequestedSizeGib;
  }

  public void setOriginallyRequestedSizeGib(String originallyRequestedSizeGib) {
    this.originallyRequestedSizeGib = originallyRequestedSizeGib;
  }


  public Volume performanceTier(PerformanceTierEnum performanceTier) {
    this.performanceTier = performanceTier;
    return this;
  }

  /**
   * Immutable. Performance tier of the Volume. Default is SHARED.
   * @return performanceTier
   */
  @javax.annotation.Nullable
  public PerformanceTierEnum getPerformanceTier() {
    return performanceTier;
  }

  public void setPerformanceTier(PerformanceTierEnum performanceTier) {
    this.performanceTier = performanceTier;
  }


  public Volume pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Immutable. Pod name. Pod is an independent part of infrastructure. Volume can only be connected to the instances allocated in the same pod.
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  /**
   * Output only. Storage protocol for the Volume.
   * @return protocol
   */
  @javax.annotation.Nullable
  public ProtocolEnum getProtocol() {
    return protocol;
  }



  public Volume remainingSpaceGib(String remainingSpaceGib) {
    this.remainingSpaceGib = remainingSpaceGib;
    return this;
  }

  /**
   * The space remaining in the storage volume for new LUNs, in GiB, excluding space reserved for snapshots.
   * @return remainingSpaceGib
   */
  @javax.annotation.Nullable
  public String getRemainingSpaceGib() {
    return remainingSpaceGib;
  }

  public void setRemainingSpaceGib(String remainingSpaceGib) {
    this.remainingSpaceGib = remainingSpaceGib;
  }


  public Volume requestedSizeGib(String requestedSizeGib) {
    this.requestedSizeGib = requestedSizeGib;
    return this;
  }

  /**
   * The requested size of this storage volume, in GiB.
   * @return requestedSizeGib
   */
  @javax.annotation.Nullable
  public String getRequestedSizeGib() {
    return requestedSizeGib;
  }

  public void setRequestedSizeGib(String requestedSizeGib) {
    this.requestedSizeGib = requestedSizeGib;
  }


  public Volume snapshotAutoDeleteBehavior(SnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior) {
    this.snapshotAutoDeleteBehavior = snapshotAutoDeleteBehavior;
    return this;
  }

  /**
   * The behavior to use when snapshot reserved space is full.
   * @return snapshotAutoDeleteBehavior
   */
  @javax.annotation.Nullable
  public SnapshotAutoDeleteBehaviorEnum getSnapshotAutoDeleteBehavior() {
    return snapshotAutoDeleteBehavior;
  }

  public void setSnapshotAutoDeleteBehavior(SnapshotAutoDeleteBehaviorEnum snapshotAutoDeleteBehavior) {
    this.snapshotAutoDeleteBehavior = snapshotAutoDeleteBehavior;
  }


  public Volume snapshotEnabled(Boolean snapshotEnabled) {
    this.snapshotEnabled = snapshotEnabled;
    return this;
  }

  /**
   * Whether snapshots are enabled.
   * @return snapshotEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSnapshotEnabled() {
    return snapshotEnabled;
  }

  public void setSnapshotEnabled(Boolean snapshotEnabled) {
    this.snapshotEnabled = snapshotEnabled;
  }


  public Volume snapshotReservationDetail(SnapshotReservationDetail snapshotReservationDetail) {
    this.snapshotReservationDetail = snapshotReservationDetail;
    return this;
  }

  /**
   * Get snapshotReservationDetail
   * @return snapshotReservationDetail
   */
  @javax.annotation.Nullable
  public SnapshotReservationDetail getSnapshotReservationDetail() {
    return snapshotReservationDetail;
  }

  public void setSnapshotReservationDetail(SnapshotReservationDetail snapshotReservationDetail) {
    this.snapshotReservationDetail = snapshotReservationDetail;
  }


  public Volume state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of this storage volume.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Volume storageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * The storage type for this volume.
   * @return storageType
   */
  @javax.annotation.Nullable
  public StorageTypeEnum getStorageType() {
    return storageType;
  }

  public void setStorageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
  }


  public Volume workloadProfile(WorkloadProfileEnum workloadProfile) {
    this.workloadProfile = workloadProfile;
    return this;
  }

  /**
   * The workload profile for the volume.
   * @return workloadProfile
   */
  @javax.annotation.Nullable
  public WorkloadProfileEnum getWorkloadProfile() {
    return workloadProfile;
  }

  public void setWorkloadProfile(WorkloadProfileEnum workloadProfile) {
    this.workloadProfile = workloadProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Volume volume = (Volume) o;
    return Objects.equals(this.attached, volume.attached) &&
        Objects.equals(this.autoGrownSizeGib, volume.autoGrownSizeGib) &&
        Objects.equals(this.bootVolume, volume.bootVolume) &&
        Objects.equals(this.currentSizeGib, volume.currentSizeGib) &&
        Objects.equals(this.emergencySizeGib, volume.emergencySizeGib) &&
        Objects.equals(this.expireTime, volume.expireTime) &&
        Objects.equals(this.id, volume.id) &&
        Objects.equals(this.instances, volume.instances) &&
        Objects.equals(this.labels, volume.labels) &&
        Objects.equals(this.maxSizeGib, volume.maxSizeGib) &&
        Objects.equals(this.name, volume.name) &&
        Objects.equals(this.notes, volume.notes) &&
        Objects.equals(this.originallyRequestedSizeGib, volume.originallyRequestedSizeGib) &&
        Objects.equals(this.performanceTier, volume.performanceTier) &&
        Objects.equals(this.pod, volume.pod) &&
        Objects.equals(this.protocol, volume.protocol) &&
        Objects.equals(this.remainingSpaceGib, volume.remainingSpaceGib) &&
        Objects.equals(this.requestedSizeGib, volume.requestedSizeGib) &&
        Objects.equals(this.snapshotAutoDeleteBehavior, volume.snapshotAutoDeleteBehavior) &&
        Objects.equals(this.snapshotEnabled, volume.snapshotEnabled) &&
        Objects.equals(this.snapshotReservationDetail, volume.snapshotReservationDetail) &&
        Objects.equals(this.state, volume.state) &&
        Objects.equals(this.storageType, volume.storageType) &&
        Objects.equals(this.workloadProfile, volume.workloadProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attached, autoGrownSizeGib, bootVolume, currentSizeGib, emergencySizeGib, expireTime, id, instances, labels, maxSizeGib, name, notes, originallyRequestedSizeGib, performanceTier, pod, protocol, remainingSpaceGib, requestedSizeGib, snapshotAutoDeleteBehavior, snapshotEnabled, snapshotReservationDetail, state, storageType, workloadProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Volume {\n");
    sb.append("    attached: ").append(toIndentedString(attached)).append("\n");
    sb.append("    autoGrownSizeGib: ").append(toIndentedString(autoGrownSizeGib)).append("\n");
    sb.append("    bootVolume: ").append(toIndentedString(bootVolume)).append("\n");
    sb.append("    currentSizeGib: ").append(toIndentedString(currentSizeGib)).append("\n");
    sb.append("    emergencySizeGib: ").append(toIndentedString(emergencySizeGib)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    maxSizeGib: ").append(toIndentedString(maxSizeGib)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    originallyRequestedSizeGib: ").append(toIndentedString(originallyRequestedSizeGib)).append("\n");
    sb.append("    performanceTier: ").append(toIndentedString(performanceTier)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    protocol: ").append(toIndentedString(protocol)).append("\n");
    sb.append("    remainingSpaceGib: ").append(toIndentedString(remainingSpaceGib)).append("\n");
    sb.append("    requestedSizeGib: ").append(toIndentedString(requestedSizeGib)).append("\n");
    sb.append("    snapshotAutoDeleteBehavior: ").append(toIndentedString(snapshotAutoDeleteBehavior)).append("\n");
    sb.append("    snapshotEnabled: ").append(toIndentedString(snapshotEnabled)).append("\n");
    sb.append("    snapshotReservationDetail: ").append(toIndentedString(snapshotReservationDetail)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    workloadProfile: ").append(toIndentedString(workloadProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attached");
    openapiFields.add("autoGrownSizeGib");
    openapiFields.add("bootVolume");
    openapiFields.add("currentSizeGib");
    openapiFields.add("emergencySizeGib");
    openapiFields.add("expireTime");
    openapiFields.add("id");
    openapiFields.add("instances");
    openapiFields.add("labels");
    openapiFields.add("maxSizeGib");
    openapiFields.add("name");
    openapiFields.add("notes");
    openapiFields.add("originallyRequestedSizeGib");
    openapiFields.add("performanceTier");
    openapiFields.add("pod");
    openapiFields.add("protocol");
    openapiFields.add("remainingSpaceGib");
    openapiFields.add("requestedSizeGib");
    openapiFields.add("snapshotAutoDeleteBehavior");
    openapiFields.add("snapshotEnabled");
    openapiFields.add("snapshotReservationDetail");
    openapiFields.add("state");
    openapiFields.add("storageType");
    openapiFields.add("workloadProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Volume
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Volume.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Volume is not found in the empty JSON string", Volume.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Volume.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Volume` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("autoGrownSizeGib") != null && !jsonObj.get("autoGrownSizeGib").isJsonNull()) && !jsonObj.get("autoGrownSizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoGrownSizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoGrownSizeGib").toString()));
      }
      if ((jsonObj.get("currentSizeGib") != null && !jsonObj.get("currentSizeGib").isJsonNull()) && !jsonObj.get("currentSizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currentSizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currentSizeGib").toString()));
      }
      if ((jsonObj.get("emergencySizeGib") != null && !jsonObj.get("emergencySizeGib").isJsonNull()) && !jsonObj.get("emergencySizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emergencySizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emergencySizeGib").toString()));
      }
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull() && !jsonObj.get("instances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
      }
      if ((jsonObj.get("maxSizeGib") != null && !jsonObj.get("maxSizeGib").isJsonNull()) && !jsonObj.get("maxSizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxSizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxSizeGib").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("notes") != null && !jsonObj.get("notes").isJsonNull()) && !jsonObj.get("notes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notes").toString()));
      }
      if ((jsonObj.get("originallyRequestedSizeGib") != null && !jsonObj.get("originallyRequestedSizeGib").isJsonNull()) && !jsonObj.get("originallyRequestedSizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originallyRequestedSizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originallyRequestedSizeGib").toString()));
      }
      if ((jsonObj.get("performanceTier") != null && !jsonObj.get("performanceTier").isJsonNull()) && !jsonObj.get("performanceTier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `performanceTier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("performanceTier").toString()));
      }
      // validate the optional field `performanceTier`
      if (jsonObj.get("performanceTier") != null && !jsonObj.get("performanceTier").isJsonNull()) {
        PerformanceTierEnum.validateJsonElement(jsonObj.get("performanceTier"));
      }
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      if ((jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) && !jsonObj.get("protocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocol").toString()));
      }
      // validate the optional field `protocol`
      if (jsonObj.get("protocol") != null && !jsonObj.get("protocol").isJsonNull()) {
        ProtocolEnum.validateJsonElement(jsonObj.get("protocol"));
      }
      if ((jsonObj.get("remainingSpaceGib") != null && !jsonObj.get("remainingSpaceGib").isJsonNull()) && !jsonObj.get("remainingSpaceGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remainingSpaceGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remainingSpaceGib").toString()));
      }
      if ((jsonObj.get("requestedSizeGib") != null && !jsonObj.get("requestedSizeGib").isJsonNull()) && !jsonObj.get("requestedSizeGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestedSizeGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestedSizeGib").toString()));
      }
      if ((jsonObj.get("snapshotAutoDeleteBehavior") != null && !jsonObj.get("snapshotAutoDeleteBehavior").isJsonNull()) && !jsonObj.get("snapshotAutoDeleteBehavior").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotAutoDeleteBehavior` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotAutoDeleteBehavior").toString()));
      }
      // validate the optional field `snapshotAutoDeleteBehavior`
      if (jsonObj.get("snapshotAutoDeleteBehavior") != null && !jsonObj.get("snapshotAutoDeleteBehavior").isJsonNull()) {
        SnapshotAutoDeleteBehaviorEnum.validateJsonElement(jsonObj.get("snapshotAutoDeleteBehavior"));
      }
      // validate the optional field `snapshotReservationDetail`
      if (jsonObj.get("snapshotReservationDetail") != null && !jsonObj.get("snapshotReservationDetail").isJsonNull()) {
        SnapshotReservationDetail.validateJsonElement(jsonObj.get("snapshotReservationDetail"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) && !jsonObj.get("storageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageType").toString()));
      }
      // validate the optional field `storageType`
      if (jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) {
        StorageTypeEnum.validateJsonElement(jsonObj.get("storageType"));
      }
      if ((jsonObj.get("workloadProfile") != null && !jsonObj.get("workloadProfile").isJsonNull()) && !jsonObj.get("workloadProfile").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workloadProfile` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workloadProfile").toString()));
      }
      // validate the optional field `workloadProfile`
      if (jsonObj.get("workloadProfile") != null && !jsonObj.get("workloadProfile").isJsonNull()) {
        WorkloadProfileEnum.validateJsonElement(jsonObj.get("workloadProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Volume.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Volume' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Volume> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Volume.class));

       return (TypeAdapter<T>) new TypeAdapter<Volume>() {
           @Override
           public void write(JsonWriter out, Volume value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Volume read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Volume given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Volume
   * @throws IOException if the JSON string is invalid with respect to Volume
   */
  public static Volume fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Volume.class);
  }

  /**
   * Convert an instance of Volume to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

