/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudBaremetalsolutionV2LogicalInterface;
import org.openapitools.client.model.NetworkAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration parameters for a new instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceConfig {
  public static final String SERIALIZED_NAME_ACCOUNT_NETWORKS_ENABLED = "accountNetworksEnabled";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NETWORKS_ENABLED)
  private Boolean accountNetworksEnabled;

  public static final String SERIALIZED_NAME_CLIENT_NETWORK = "clientNetwork";
  @SerializedName(SERIALIZED_NAME_CLIENT_NETWORK)
  private NetworkAddress clientNetwork;

  public static final String SERIALIZED_NAME_HYPERTHREADING = "hyperthreading";
  @SerializedName(SERIALIZED_NAME_HYPERTHREADING)
  private Boolean hyperthreading;

  public static final String SERIALIZED_NAME_ID = "id";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCE_TYPE = "instanceType";
  @SerializedName(SERIALIZED_NAME_INSTANCE_TYPE)
  private String instanceType;

  public static final String SERIALIZED_NAME_KMS_KEY_VERSION = "kmsKeyVersion";
  @SerializedName(SERIALIZED_NAME_KMS_KEY_VERSION)
  private String kmsKeyVersion;

  public static final String SERIALIZED_NAME_LOGICAL_INTERFACES = "logicalInterfaces";
  @SerializedName(SERIALIZED_NAME_LOGICAL_INTERFACES)
  private List<GoogleCloudBaremetalsolutionV2LogicalInterface> logicalInterfaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of network configuration on the instance.
   */
  @JsonAdapter(NetworkConfigEnum.Adapter.class)
  public enum NetworkConfigEnum {
    NETWORKCONFIG_UNSPECIFIED("NETWORKCONFIG_UNSPECIFIED"),
    
    SINGLE_VLAN("SINGLE_VLAN"),
    
    MULTI_VLAN("MULTI_VLAN");

    private String value;

    NetworkConfigEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NetworkConfigEnum fromValue(String value) {
      for (NetworkConfigEnum b : NetworkConfigEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NetworkConfigEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NetworkConfigEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NetworkConfigEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NetworkConfigEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NetworkConfigEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NETWORK_CONFIG = "networkConfig";
  @SerializedName(SERIALIZED_NAME_NETWORK_CONFIG)
  private NetworkConfigEnum networkConfig;

  public static final String SERIALIZED_NAME_NETWORK_TEMPLATE = "networkTemplate";
  @SerializedName(SERIALIZED_NAME_NETWORK_TEMPLATE)
  private String networkTemplate;

  public static final String SERIALIZED_NAME_OS_IMAGE = "osImage";
  @SerializedName(SERIALIZED_NAME_OS_IMAGE)
  private String osImage;

  public static final String SERIALIZED_NAME_PRIVATE_NETWORK = "privateNetwork";
  @SerializedName(SERIALIZED_NAME_PRIVATE_NETWORK)
  private NetworkAddress privateNetwork;

  public static final String SERIALIZED_NAME_SSH_KEY_NAMES = "sshKeyNames";
  @SerializedName(SERIALIZED_NAME_SSH_KEY_NAMES)
  private List<String> sshKeyNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_NOTE = "userNote";
  @SerializedName(SERIALIZED_NAME_USER_NOTE)
  private String userNote;

  public InstanceConfig() {
  }

  public InstanceConfig accountNetworksEnabled(Boolean accountNetworksEnabled) {
    this.accountNetworksEnabled = accountNetworksEnabled;
    return this;
  }

  /**
   * If true networks can be from different projects of the same vendor account.
   * @return accountNetworksEnabled
   */
  @javax.annotation.Nullable
  public Boolean getAccountNetworksEnabled() {
    return accountNetworksEnabled;
  }

  public void setAccountNetworksEnabled(Boolean accountNetworksEnabled) {
    this.accountNetworksEnabled = accountNetworksEnabled;
  }


  public InstanceConfig clientNetwork(NetworkAddress clientNetwork) {
    this.clientNetwork = clientNetwork;
    return this;
  }

  /**
   * Get clientNetwork
   * @return clientNetwork
   */
  @javax.annotation.Nullable
  public NetworkAddress getClientNetwork() {
    return clientNetwork;
  }

  public void setClientNetwork(NetworkAddress clientNetwork) {
    this.clientNetwork = clientNetwork;
  }


  public InstanceConfig hyperthreading(Boolean hyperthreading) {
    this.hyperthreading = hyperthreading;
    return this;
  }

  /**
   * Whether the instance should be provisioned with Hyperthreading enabled.
   * @return hyperthreading
   */
  @javax.annotation.Nullable
  public Boolean getHyperthreading() {
    return hyperthreading;
  }

  public void setHyperthreading(Boolean hyperthreading) {
    this.hyperthreading = hyperthreading;
  }


  @Deprecated
  public InstanceConfig id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A transient unique identifier to idenfity an instance within an ProvisioningConfig request.
   * @return id
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  @Deprecated
  public void setId(String id) {
    this.id = id;
  }


  public InstanceConfig instanceType(String instanceType) {
    this.instanceType = instanceType;
    return this;
  }

  /**
   * Instance type. [Available types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   * @return instanceType
   */
  @javax.annotation.Nullable
  public String getInstanceType() {
    return instanceType;
  }

  public void setInstanceType(String instanceType) {
    this.instanceType = instanceType;
  }


  public InstanceConfig kmsKeyVersion(String kmsKeyVersion) {
    this.kmsKeyVersion = kmsKeyVersion;
    return this;
  }

  /**
   * Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose.
   * @return kmsKeyVersion
   */
  @javax.annotation.Nullable
  public String getKmsKeyVersion() {
    return kmsKeyVersion;
  }

  public void setKmsKeyVersion(String kmsKeyVersion) {
    this.kmsKeyVersion = kmsKeyVersion;
  }


  public InstanceConfig logicalInterfaces(List<GoogleCloudBaremetalsolutionV2LogicalInterface> logicalInterfaces) {
    this.logicalInterfaces = logicalInterfaces;
    return this;
  }

  public InstanceConfig addLogicalInterfacesItem(GoogleCloudBaremetalsolutionV2LogicalInterface logicalInterfacesItem) {
    if (this.logicalInterfaces == null) {
      this.logicalInterfaces = new ArrayList<>();
    }
    this.logicalInterfaces.add(logicalInterfacesItem);
    return this;
  }

  /**
   * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. Filled if InstanceConfig.multivlan_config is true.
   * @return logicalInterfaces
   */
  @javax.annotation.Nullable
  public List<GoogleCloudBaremetalsolutionV2LogicalInterface> getLogicalInterfaces() {
    return logicalInterfaces;
  }

  public void setLogicalInterfaces(List<GoogleCloudBaremetalsolutionV2LogicalInterface> logicalInterfaces) {
    this.logicalInterfaces = logicalInterfaces;
  }


  public InstanceConfig name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the instance config.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InstanceConfig networkConfig(NetworkConfigEnum networkConfig) {
    this.networkConfig = networkConfig;
    return this;
  }

  /**
   * The type of network configuration on the instance.
   * @return networkConfig
   */
  @javax.annotation.Nullable
  public NetworkConfigEnum getNetworkConfig() {
    return networkConfig;
  }

  public void setNetworkConfig(NetworkConfigEnum networkConfig) {
    this.networkConfig = networkConfig;
  }


  public InstanceConfig networkTemplate(String networkTemplate) {
    this.networkTemplate = networkTemplate;
    return this;
  }

  /**
   * Server network template name. Filled if InstanceConfig.multivlan_config is true.
   * @return networkTemplate
   */
  @javax.annotation.Nullable
  public String getNetworkTemplate() {
    return networkTemplate;
  }

  public void setNetworkTemplate(String networkTemplate) {
    this.networkTemplate = networkTemplate;
  }


  public InstanceConfig osImage(String osImage) {
    this.osImage = osImage;
    return this;
  }

  /**
   * OS image to initialize the instance. [Available images](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
   * @return osImage
   */
  @javax.annotation.Nullable
  public String getOsImage() {
    return osImage;
  }

  public void setOsImage(String osImage) {
    this.osImage = osImage;
  }


  public InstanceConfig privateNetwork(NetworkAddress privateNetwork) {
    this.privateNetwork = privateNetwork;
    return this;
  }

  /**
   * Get privateNetwork
   * @return privateNetwork
   */
  @javax.annotation.Nullable
  public NetworkAddress getPrivateNetwork() {
    return privateNetwork;
  }

  public void setPrivateNetwork(NetworkAddress privateNetwork) {
    this.privateNetwork = privateNetwork;
  }


  public InstanceConfig sshKeyNames(List<String> sshKeyNames) {
    this.sshKeyNames = sshKeyNames;
    return this;
  }

  public InstanceConfig addSshKeyNamesItem(String sshKeyNamesItem) {
    if (this.sshKeyNames == null) {
      this.sshKeyNames = new ArrayList<>();
    }
    this.sshKeyNames.add(sshKeyNamesItem);
    return this;
  }

  /**
   * Optional. List of names of ssh keys used to provision the instance.
   * @return sshKeyNames
   */
  @javax.annotation.Nullable
  public List<String> getSshKeyNames() {
    return sshKeyNames;
  }

  public void setSshKeyNames(List<String> sshKeyNames) {
    this.sshKeyNames = sshKeyNames;
  }


  public InstanceConfig userNote(String userNote) {
    this.userNote = userNote;
    return this;
  }

  /**
   * User note field, it can be used by customers to add additional information for the BMS Ops team .
   * @return userNote
   */
  @javax.annotation.Nullable
  public String getUserNote() {
    return userNote;
  }

  public void setUserNote(String userNote) {
    this.userNote = userNote;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceConfig instanceConfig = (InstanceConfig) o;
    return Objects.equals(this.accountNetworksEnabled, instanceConfig.accountNetworksEnabled) &&
        Objects.equals(this.clientNetwork, instanceConfig.clientNetwork) &&
        Objects.equals(this.hyperthreading, instanceConfig.hyperthreading) &&
        Objects.equals(this.id, instanceConfig.id) &&
        Objects.equals(this.instanceType, instanceConfig.instanceType) &&
        Objects.equals(this.kmsKeyVersion, instanceConfig.kmsKeyVersion) &&
        Objects.equals(this.logicalInterfaces, instanceConfig.logicalInterfaces) &&
        Objects.equals(this.name, instanceConfig.name) &&
        Objects.equals(this.networkConfig, instanceConfig.networkConfig) &&
        Objects.equals(this.networkTemplate, instanceConfig.networkTemplate) &&
        Objects.equals(this.osImage, instanceConfig.osImage) &&
        Objects.equals(this.privateNetwork, instanceConfig.privateNetwork) &&
        Objects.equals(this.sshKeyNames, instanceConfig.sshKeyNames) &&
        Objects.equals(this.userNote, instanceConfig.userNote);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountNetworksEnabled, clientNetwork, hyperthreading, id, instanceType, kmsKeyVersion, logicalInterfaces, name, networkConfig, networkTemplate, osImage, privateNetwork, sshKeyNames, userNote);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceConfig {\n");
    sb.append("    accountNetworksEnabled: ").append(toIndentedString(accountNetworksEnabled)).append("\n");
    sb.append("    clientNetwork: ").append(toIndentedString(clientNetwork)).append("\n");
    sb.append("    hyperthreading: ").append(toIndentedString(hyperthreading)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceType: ").append(toIndentedString(instanceType)).append("\n");
    sb.append("    kmsKeyVersion: ").append(toIndentedString(kmsKeyVersion)).append("\n");
    sb.append("    logicalInterfaces: ").append(toIndentedString(logicalInterfaces)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networkConfig: ").append(toIndentedString(networkConfig)).append("\n");
    sb.append("    networkTemplate: ").append(toIndentedString(networkTemplate)).append("\n");
    sb.append("    osImage: ").append(toIndentedString(osImage)).append("\n");
    sb.append("    privateNetwork: ").append(toIndentedString(privateNetwork)).append("\n");
    sb.append("    sshKeyNames: ").append(toIndentedString(sshKeyNames)).append("\n");
    sb.append("    userNote: ").append(toIndentedString(userNote)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountNetworksEnabled");
    openapiFields.add("clientNetwork");
    openapiFields.add("hyperthreading");
    openapiFields.add("id");
    openapiFields.add("instanceType");
    openapiFields.add("kmsKeyVersion");
    openapiFields.add("logicalInterfaces");
    openapiFields.add("name");
    openapiFields.add("networkConfig");
    openapiFields.add("networkTemplate");
    openapiFields.add("osImage");
    openapiFields.add("privateNetwork");
    openapiFields.add("sshKeyNames");
    openapiFields.add("userNote");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceConfig is not found in the empty JSON string", InstanceConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientNetwork`
      if (jsonObj.get("clientNetwork") != null && !jsonObj.get("clientNetwork").isJsonNull()) {
        NetworkAddress.validateJsonElement(jsonObj.get("clientNetwork"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instanceType") != null && !jsonObj.get("instanceType").isJsonNull()) && !jsonObj.get("instanceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceType").toString()));
      }
      if ((jsonObj.get("kmsKeyVersion") != null && !jsonObj.get("kmsKeyVersion").isJsonNull()) && !jsonObj.get("kmsKeyVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kmsKeyVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kmsKeyVersion").toString()));
      }
      if (jsonObj.get("logicalInterfaces") != null && !jsonObj.get("logicalInterfaces").isJsonNull()) {
        JsonArray jsonArraylogicalInterfaces = jsonObj.getAsJsonArray("logicalInterfaces");
        if (jsonArraylogicalInterfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logicalInterfaces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logicalInterfaces` to be an array in the JSON string but got `%s`", jsonObj.get("logicalInterfaces").toString()));
          }

          // validate the optional field `logicalInterfaces` (array)
          for (int i = 0; i < jsonArraylogicalInterfaces.size(); i++) {
            GoogleCloudBaremetalsolutionV2LogicalInterface.validateJsonElement(jsonArraylogicalInterfaces.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) && !jsonObj.get("networkConfig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkConfig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkConfig").toString()));
      }
      // validate the optional field `networkConfig`
      if (jsonObj.get("networkConfig") != null && !jsonObj.get("networkConfig").isJsonNull()) {
        NetworkConfigEnum.validateJsonElement(jsonObj.get("networkConfig"));
      }
      if ((jsonObj.get("networkTemplate") != null && !jsonObj.get("networkTemplate").isJsonNull()) && !jsonObj.get("networkTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `networkTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("networkTemplate").toString()));
      }
      if ((jsonObj.get("osImage") != null && !jsonObj.get("osImage").isJsonNull()) && !jsonObj.get("osImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osImage").toString()));
      }
      // validate the optional field `privateNetwork`
      if (jsonObj.get("privateNetwork") != null && !jsonObj.get("privateNetwork").isJsonNull()) {
        NetworkAddress.validateJsonElement(jsonObj.get("privateNetwork"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sshKeyNames") != null && !jsonObj.get("sshKeyNames").isJsonNull() && !jsonObj.get("sshKeyNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshKeyNames` to be an array in the JSON string but got `%s`", jsonObj.get("sshKeyNames").toString()));
      }
      if ((jsonObj.get("userNote") != null && !jsonObj.get("userNote").isJsonNull()) && !jsonObj.get("userNote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userNote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userNote").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceConfig>() {
           @Override
           public void write(JsonWriter out, InstanceConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceConfig
   * @throws IOException if the JSON string is invalid with respect to InstanceConfig
   */
  public static InstanceConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceConfig.class);
  }

  /**
   * Convert an instance of InstanceConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

