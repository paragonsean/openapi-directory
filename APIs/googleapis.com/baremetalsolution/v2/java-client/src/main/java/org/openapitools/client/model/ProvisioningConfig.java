/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InstanceConfig;
import org.openapitools.client.model.NetworkConfig;
import org.openapitools.client.model.VolumeConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A provisioning configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProvisioningConfig {
  public static final String SERIALIZED_NAME_CLOUD_CONSOLE_URI = "cloudConsoleUri";
  @SerializedName(SERIALIZED_NAME_CLOUD_CONSOLE_URI)
  private String cloudConsoleUri;

  public static final String SERIALIZED_NAME_CUSTOM_ID = "customId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_HANDOVER_SERVICE_ACCOUNT = "handoverServiceAccount";
  @SerializedName(SERIALIZED_NAME_HANDOVER_SERVICE_ACCOUNT)
  private String handoverServiceAccount;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<InstanceConfig> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORKS = "networks";
  @SerializedName(SERIALIZED_NAME_NETWORKS)
  private List<NetworkConfig> networks = new ArrayList<>();

  public static final String SERIALIZED_NAME_POD = "pod";
  @SerializedName(SERIALIZED_NAME_POD)
  private String pod;

  /**
   * Output only. State of ProvisioningConfig.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    DRAFT("DRAFT"),
    
    SUBMITTED("SUBMITTED"),
    
    PROVISIONING("PROVISIONING"),
    
    PROVISIONED("PROVISIONED"),
    
    VALIDATED("VALIDATED"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TICKET_ID = "ticketId";
  @SerializedName(SERIALIZED_NAME_TICKET_ID)
  private String ticketId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VOLUMES = "volumes";
  @SerializedName(SERIALIZED_NAME_VOLUMES)
  private List<VolumeConfig> volumes = new ArrayList<>();

  public static final String SERIALIZED_NAME_VPC_SC_ENABLED = "vpcScEnabled";
  @SerializedName(SERIALIZED_NAME_VPC_SC_ENABLED)
  private Boolean vpcScEnabled;

  public ProvisioningConfig() {
  }

  public ProvisioningConfig(
     String cloudConsoleUri, 
     String name, 
     StateEnum state, 
     String updateTime
  ) {
    this();
    this.cloudConsoleUri = cloudConsoleUri;
    this.name = name;
    this.state = state;
    this.updateTime = updateTime;
  }

  /**
   * Output only. URI to Cloud Console UI view of this provisioning config.
   * @return cloudConsoleUri
   */
  @javax.annotation.Nullable
  public String getCloudConsoleUri() {
    return cloudConsoleUri;
  }



  public ProvisioningConfig customId(String customId) {
    this.customId = customId;
    return this;
  }

  /**
   * Optional. The user-defined identifier of the provisioning config.
   * @return customId
   */
  @javax.annotation.Nullable
  public String getCustomId() {
    return customId;
  }

  public void setCustomId(String customId) {
    this.customId = customId;
  }


  @Deprecated
  public ProvisioningConfig email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
   * @return email
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  @Deprecated
  public void setEmail(String email) {
    this.email = email;
  }


  public ProvisioningConfig handoverServiceAccount(String handoverServiceAccount) {
    this.handoverServiceAccount = handoverServiceAccount;
    return this;
  }

  /**
   * A service account to enable customers to access instance credentials upon handover.
   * @return handoverServiceAccount
   */
  @javax.annotation.Nullable
  public String getHandoverServiceAccount() {
    return handoverServiceAccount;
  }

  public void setHandoverServiceAccount(String handoverServiceAccount) {
    this.handoverServiceAccount = handoverServiceAccount;
  }


  public ProvisioningConfig instances(List<InstanceConfig> instances) {
    this.instances = instances;
    return this;
  }

  public ProvisioningConfig addInstancesItem(InstanceConfig instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * Instances to be created.
   * @return instances
   */
  @javax.annotation.Nullable
  public List<InstanceConfig> getInstances() {
    return instances;
  }

  public void setInstances(List<InstanceConfig> instances) {
    this.instances = instances;
  }


  public ProvisioningConfig location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  /**
   * Output only. The system-generated name of the provisioning config. This follows the UUID format.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public ProvisioningConfig networks(List<NetworkConfig> networks) {
    this.networks = networks;
    return this;
  }

  public ProvisioningConfig addNetworksItem(NetworkConfig networksItem) {
    if (this.networks == null) {
      this.networks = new ArrayList<>();
    }
    this.networks.add(networksItem);
    return this;
  }

  /**
   * Networks to be created.
   * @return networks
   */
  @javax.annotation.Nullable
  public List<NetworkConfig> getNetworks() {
    return networks;
  }

  public void setNetworks(List<NetworkConfig> networks) {
    this.networks = networks;
  }


  public ProvisioningConfig pod(String pod) {
    this.pod = pod;
    return this;
  }

  /**
   * Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.
   * @return pod
   */
  @javax.annotation.Nullable
  public String getPod() {
    return pod;
  }

  public void setPod(String pod) {
    this.pod = pod;
  }


  /**
   * Output only. State of ProvisioningConfig.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public ProvisioningConfig statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * Optional status messages associated with the FAILED state.
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public ProvisioningConfig ticketId(String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  /**
   * A generated ticket id to track provisioning request.
   * @return ticketId
   */
  @javax.annotation.Nullable
  public String getTicketId() {
    return ticketId;
  }

  public void setTicketId(String ticketId) {
    this.ticketId = ticketId;
  }


  /**
   * Output only. Last update timestamp.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public ProvisioningConfig volumes(List<VolumeConfig> volumes) {
    this.volumes = volumes;
    return this;
  }

  public ProvisioningConfig addVolumesItem(VolumeConfig volumesItem) {
    if (this.volumes == null) {
      this.volumes = new ArrayList<>();
    }
    this.volumes.add(volumesItem);
    return this;
  }

  /**
   * Volumes to be created.
   * @return volumes
   */
  @javax.annotation.Nullable
  public List<VolumeConfig> getVolumes() {
    return volumes;
  }

  public void setVolumes(List<VolumeConfig> volumes) {
    this.volumes = volumes;
  }


  public ProvisioningConfig vpcScEnabled(Boolean vpcScEnabled) {
    this.vpcScEnabled = vpcScEnabled;
    return this;
  }

  /**
   * If true, VPC SC is enabled for the cluster.
   * @return vpcScEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVpcScEnabled() {
    return vpcScEnabled;
  }

  public void setVpcScEnabled(Boolean vpcScEnabled) {
    this.vpcScEnabled = vpcScEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProvisioningConfig provisioningConfig = (ProvisioningConfig) o;
    return Objects.equals(this.cloudConsoleUri, provisioningConfig.cloudConsoleUri) &&
        Objects.equals(this.customId, provisioningConfig.customId) &&
        Objects.equals(this.email, provisioningConfig.email) &&
        Objects.equals(this.handoverServiceAccount, provisioningConfig.handoverServiceAccount) &&
        Objects.equals(this.instances, provisioningConfig.instances) &&
        Objects.equals(this.location, provisioningConfig.location) &&
        Objects.equals(this.name, provisioningConfig.name) &&
        Objects.equals(this.networks, provisioningConfig.networks) &&
        Objects.equals(this.pod, provisioningConfig.pod) &&
        Objects.equals(this.state, provisioningConfig.state) &&
        Objects.equals(this.statusMessage, provisioningConfig.statusMessage) &&
        Objects.equals(this.ticketId, provisioningConfig.ticketId) &&
        Objects.equals(this.updateTime, provisioningConfig.updateTime) &&
        Objects.equals(this.volumes, provisioningConfig.volumes) &&
        Objects.equals(this.vpcScEnabled, provisioningConfig.vpcScEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudConsoleUri, customId, email, handoverServiceAccount, instances, location, name, networks, pod, state, statusMessage, ticketId, updateTime, volumes, vpcScEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProvisioningConfig {\n");
    sb.append("    cloudConsoleUri: ").append(toIndentedString(cloudConsoleUri)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    handoverServiceAccount: ").append(toIndentedString(handoverServiceAccount)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    networks: ").append(toIndentedString(networks)).append("\n");
    sb.append("    pod: ").append(toIndentedString(pod)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    ticketId: ").append(toIndentedString(ticketId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    volumes: ").append(toIndentedString(volumes)).append("\n");
    sb.append("    vpcScEnabled: ").append(toIndentedString(vpcScEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudConsoleUri");
    openapiFields.add("customId");
    openapiFields.add("email");
    openapiFields.add("handoverServiceAccount");
    openapiFields.add("instances");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("networks");
    openapiFields.add("pod");
    openapiFields.add("state");
    openapiFields.add("statusMessage");
    openapiFields.add("ticketId");
    openapiFields.add("updateTime");
    openapiFields.add("volumes");
    openapiFields.add("vpcScEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProvisioningConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProvisioningConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProvisioningConfig is not found in the empty JSON string", ProvisioningConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProvisioningConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProvisioningConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudConsoleUri") != null && !jsonObj.get("cloudConsoleUri").isJsonNull()) && !jsonObj.get("cloudConsoleUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudConsoleUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudConsoleUri").toString()));
      }
      if ((jsonObj.get("customId") != null && !jsonObj.get("customId").isJsonNull()) && !jsonObj.get("customId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("handoverServiceAccount") != null && !jsonObj.get("handoverServiceAccount").isJsonNull()) && !jsonObj.get("handoverServiceAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `handoverServiceAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("handoverServiceAccount").toString()));
      }
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
        if (jsonArrayinstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
          }

          // validate the optional field `instances` (array)
          for (int i = 0; i < jsonArrayinstances.size(); i++) {
            InstanceConfig.validateJsonElement(jsonArrayinstances.get(i));
          };
        }
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("networks") != null && !jsonObj.get("networks").isJsonNull()) {
        JsonArray jsonArraynetworks = jsonObj.getAsJsonArray("networks");
        if (jsonArraynetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("networks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `networks` to be an array in the JSON string but got `%s`", jsonObj.get("networks").toString()));
          }

          // validate the optional field `networks` (array)
          for (int i = 0; i < jsonArraynetworks.size(); i++) {
            NetworkConfig.validateJsonElement(jsonArraynetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("pod") != null && !jsonObj.get("pod").isJsonNull()) && !jsonObj.get("pod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pod").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      if ((jsonObj.get("ticketId") != null && !jsonObj.get("ticketId").isJsonNull()) && !jsonObj.get("ticketId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ticketId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ticketId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if (jsonObj.get("volumes") != null && !jsonObj.get("volumes").isJsonNull()) {
        JsonArray jsonArrayvolumes = jsonObj.getAsJsonArray("volumes");
        if (jsonArrayvolumes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("volumes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `volumes` to be an array in the JSON string but got `%s`", jsonObj.get("volumes").toString()));
          }

          // validate the optional field `volumes` (array)
          for (int i = 0; i < jsonArrayvolumes.size(); i++) {
            VolumeConfig.validateJsonElement(jsonArrayvolumes.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProvisioningConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProvisioningConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProvisioningConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProvisioningConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ProvisioningConfig>() {
           @Override
           public void write(JsonWriter out, ProvisioningConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProvisioningConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProvisioningConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProvisioningConfig
   * @throws IOException if the JSON string is invalid with respect to ProvisioningConfig
   */
  public static ProvisioningConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProvisioningConfig.class);
  }

  /**
   * Convert an instance of ProvisioningConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

