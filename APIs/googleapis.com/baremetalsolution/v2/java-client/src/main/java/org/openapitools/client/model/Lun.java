/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A storage volume logical unit number (LUN).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Lun {
  public static final String SERIALIZED_NAME_BOOT_LUN = "bootLun";
  @SerializedName(SERIALIZED_NAME_BOOT_LUN)
  private Boolean bootLun;

  public static final String SERIALIZED_NAME_EXPIRE_TIME = "expireTime";
  @SerializedName(SERIALIZED_NAME_EXPIRE_TIME)
  private String expireTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<String> instances = new ArrayList<>();

  /**
   * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
   */
  @JsonAdapter(MultiprotocolTypeEnum.Adapter.class)
  public enum MultiprotocolTypeEnum {
    MULTIPROTOCOL_TYPE_UNSPECIFIED("MULTIPROTOCOL_TYPE_UNSPECIFIED"),
    
    LINUX("LINUX");

    private String value;

    MultiprotocolTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MultiprotocolTypeEnum fromValue(String value) {
      for (MultiprotocolTypeEnum b : MultiprotocolTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MultiprotocolTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MultiprotocolTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MultiprotocolTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MultiprotocolTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MultiprotocolTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MULTIPROTOCOL_TYPE = "multiprotocolType";
  @SerializedName(SERIALIZED_NAME_MULTIPROTOCOL_TYPE)
  private MultiprotocolTypeEnum multiprotocolType;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHAREABLE = "shareable";
  @SerializedName(SERIALIZED_NAME_SHAREABLE)
  private Boolean shareable;

  public static final String SERIALIZED_NAME_SIZE_GB = "sizeGb";
  @SerializedName(SERIALIZED_NAME_SIZE_GB)
  private String sizeGb;

  /**
   * The state of this storage volume.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    UPDATING("UPDATING"),
    
    READY("READY"),
    
    DELETING("DELETING"),
    
    COOL_OFF("COOL_OFF");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * The storage type for this LUN.
   */
  @JsonAdapter(StorageTypeEnum.Adapter.class)
  public enum StorageTypeEnum {
    STORAGE_TYPE_UNSPECIFIED("STORAGE_TYPE_UNSPECIFIED"),
    
    SSD("SSD"),
    
    HDD("HDD");

    private String value;

    StorageTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageTypeEnum fromValue(String value) {
      for (StorageTypeEnum b : StorageTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_TYPE = "storageType";
  @SerializedName(SERIALIZED_NAME_STORAGE_TYPE)
  private StorageTypeEnum storageType;

  public static final String SERIALIZED_NAME_STORAGE_VOLUME = "storageVolume";
  @SerializedName(SERIALIZED_NAME_STORAGE_VOLUME)
  private String storageVolume;

  public static final String SERIALIZED_NAME_WWID = "wwid";
  @SerializedName(SERIALIZED_NAME_WWID)
  private String wwid;

  public Lun() {
  }

  public Lun(
     String expireTime, 
     List<String> instances, 
     String name
  ) {
    this();
    this.expireTime = expireTime;
    this.instances = instances;
    this.name = name;
  }

  public Lun bootLun(Boolean bootLun) {
    this.bootLun = bootLun;
    return this;
  }

  /**
   * Display if this LUN is a boot LUN.
   * @return bootLun
   */
  @javax.annotation.Nullable
  public Boolean getBootLun() {
    return bootLun;
  }

  public void setBootLun(Boolean bootLun) {
    this.bootLun = bootLun;
  }


  /**
   * Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
   * @return expireTime
   */
  @javax.annotation.Nullable
  public String getExpireTime() {
    return expireTime;
  }



  public Lun id(String id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier for the LUN, generated by the backend.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  /**
   * Output only. Instances this Lun is attached to.
   * @return instances
   */
  @javax.annotation.Nullable
  public List<String> getInstances() {
    return instances;
  }



  public Lun multiprotocolType(MultiprotocolTypeEnum multiprotocolType) {
    this.multiprotocolType = multiprotocolType;
    return this;
  }

  /**
   * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
   * @return multiprotocolType
   */
  @javax.annotation.Nullable
  public MultiprotocolTypeEnum getMultiprotocolType() {
    return multiprotocolType;
  }

  public void setMultiprotocolType(MultiprotocolTypeEnum multiprotocolType) {
    this.multiprotocolType = multiprotocolType;
  }


  /**
   * Output only. The name of the LUN.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Lun shareable(Boolean shareable) {
    this.shareable = shareable;
    return this;
  }

  /**
   * Display if this LUN can be shared between multiple physical servers.
   * @return shareable
   */
  @javax.annotation.Nullable
  public Boolean getShareable() {
    return shareable;
  }

  public void setShareable(Boolean shareable) {
    this.shareable = shareable;
  }


  public Lun sizeGb(String sizeGb) {
    this.sizeGb = sizeGb;
    return this;
  }

  /**
   * The size of this LUN, in GiB.
   * @return sizeGb
   */
  @javax.annotation.Nullable
  public String getSizeGb() {
    return sizeGb;
  }

  public void setSizeGb(String sizeGb) {
    this.sizeGb = sizeGb;
  }


  public Lun state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of this storage volume.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public Lun storageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
    return this;
  }

  /**
   * The storage type for this LUN.
   * @return storageType
   */
  @javax.annotation.Nullable
  public StorageTypeEnum getStorageType() {
    return storageType;
  }

  public void setStorageType(StorageTypeEnum storageType) {
    this.storageType = storageType;
  }


  public Lun storageVolume(String storageVolume) {
    this.storageVolume = storageVolume;
    return this;
  }

  /**
   * Display the storage volume for this LUN.
   * @return storageVolume
   */
  @javax.annotation.Nullable
  public String getStorageVolume() {
    return storageVolume;
  }

  public void setStorageVolume(String storageVolume) {
    this.storageVolume = storageVolume;
  }


  public Lun wwid(String wwid) {
    this.wwid = wwid;
    return this;
  }

  /**
   * The WWID for this LUN.
   * @return wwid
   */
  @javax.annotation.Nullable
  public String getWwid() {
    return wwid;
  }

  public void setWwid(String wwid) {
    this.wwid = wwid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Lun lun = (Lun) o;
    return Objects.equals(this.bootLun, lun.bootLun) &&
        Objects.equals(this.expireTime, lun.expireTime) &&
        Objects.equals(this.id, lun.id) &&
        Objects.equals(this.instances, lun.instances) &&
        Objects.equals(this.multiprotocolType, lun.multiprotocolType) &&
        Objects.equals(this.name, lun.name) &&
        Objects.equals(this.shareable, lun.shareable) &&
        Objects.equals(this.sizeGb, lun.sizeGb) &&
        Objects.equals(this.state, lun.state) &&
        Objects.equals(this.storageType, lun.storageType) &&
        Objects.equals(this.storageVolume, lun.storageVolume) &&
        Objects.equals(this.wwid, lun.wwid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bootLun, expireTime, id, instances, multiprotocolType, name, shareable, sizeGb, state, storageType, storageVolume, wwid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Lun {\n");
    sb.append("    bootLun: ").append(toIndentedString(bootLun)).append("\n");
    sb.append("    expireTime: ").append(toIndentedString(expireTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    multiprotocolType: ").append(toIndentedString(multiprotocolType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shareable: ").append(toIndentedString(shareable)).append("\n");
    sb.append("    sizeGb: ").append(toIndentedString(sizeGb)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    storageType: ").append(toIndentedString(storageType)).append("\n");
    sb.append("    storageVolume: ").append(toIndentedString(storageVolume)).append("\n");
    sb.append("    wwid: ").append(toIndentedString(wwid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bootLun");
    openapiFields.add("expireTime");
    openapiFields.add("id");
    openapiFields.add("instances");
    openapiFields.add("multiprotocolType");
    openapiFields.add("name");
    openapiFields.add("shareable");
    openapiFields.add("sizeGb");
    openapiFields.add("state");
    openapiFields.add("storageType");
    openapiFields.add("storageVolume");
    openapiFields.add("wwid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Lun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Lun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Lun is not found in the empty JSON string", Lun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Lun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Lun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expireTime") != null && !jsonObj.get("expireTime").isJsonNull()) && !jsonObj.get("expireTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expireTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expireTime").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull() && !jsonObj.get("instances").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
      }
      if ((jsonObj.get("multiprotocolType") != null && !jsonObj.get("multiprotocolType").isJsonNull()) && !jsonObj.get("multiprotocolType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `multiprotocolType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("multiprotocolType").toString()));
      }
      // validate the optional field `multiprotocolType`
      if (jsonObj.get("multiprotocolType") != null && !jsonObj.get("multiprotocolType").isJsonNull()) {
        MultiprotocolTypeEnum.validateJsonElement(jsonObj.get("multiprotocolType"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("sizeGb") != null && !jsonObj.get("sizeGb").isJsonNull()) && !jsonObj.get("sizeGb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sizeGb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sizeGb").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) && !jsonObj.get("storageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageType").toString()));
      }
      // validate the optional field `storageType`
      if (jsonObj.get("storageType") != null && !jsonObj.get("storageType").isJsonNull()) {
        StorageTypeEnum.validateJsonElement(jsonObj.get("storageType"));
      }
      if ((jsonObj.get("storageVolume") != null && !jsonObj.get("storageVolume").isJsonNull()) && !jsonObj.get("storageVolume").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageVolume` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageVolume").toString()));
      }
      if ((jsonObj.get("wwid") != null && !jsonObj.get("wwid").isJsonNull()) && !jsonObj.get("wwid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wwid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wwid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Lun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Lun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Lun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Lun.class));

       return (TypeAdapter<T>) new TypeAdapter<Lun>() {
           @Override
           public void write(JsonWriter out, Lun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Lun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Lun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Lun
   * @throws IOException if the JSON string is invalid with respect to Lun
   */
  public static Lun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Lun.class);
  }

  /**
   * Convert an instance of Lun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

