/*
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details about snapshot space reservation and usage on the storage volume.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:58.386217-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SnapshotReservationDetail {
  public static final String SERIALIZED_NAME_RESERVED_SPACE_GIB = "reservedSpaceGib";
  @SerializedName(SERIALIZED_NAME_RESERVED_SPACE_GIB)
  private String reservedSpaceGib;

  public static final String SERIALIZED_NAME_RESERVED_SPACE_PERCENT = "reservedSpacePercent";
  @SerializedName(SERIALIZED_NAME_RESERVED_SPACE_PERCENT)
  private Integer reservedSpacePercent;

  public static final String SERIALIZED_NAME_RESERVED_SPACE_REMAINING_GIB = "reservedSpaceRemainingGib";
  @SerializedName(SERIALIZED_NAME_RESERVED_SPACE_REMAINING_GIB)
  private String reservedSpaceRemainingGib;

  public static final String SERIALIZED_NAME_RESERVED_SPACE_USED_PERCENT = "reservedSpaceUsedPercent";
  @SerializedName(SERIALIZED_NAME_RESERVED_SPACE_USED_PERCENT)
  private Integer reservedSpaceUsedPercent;

  public SnapshotReservationDetail() {
  }

  public SnapshotReservationDetail reservedSpaceGib(String reservedSpaceGib) {
    this.reservedSpaceGib = reservedSpaceGib;
    return this;
  }

  /**
   * The space on this storage volume reserved for snapshots, shown in GiB.
   * @return reservedSpaceGib
   */
  @javax.annotation.Nullable
  public String getReservedSpaceGib() {
    return reservedSpaceGib;
  }

  public void setReservedSpaceGib(String reservedSpaceGib) {
    this.reservedSpaceGib = reservedSpaceGib;
  }


  public SnapshotReservationDetail reservedSpacePercent(Integer reservedSpacePercent) {
    this.reservedSpacePercent = reservedSpacePercent;
    return this;
  }

  /**
   * Percent of the total Volume size reserved for snapshot copies. Enabling snapshots requires reserving 20% or more of the storage volume space for snapshots. Maximum reserved space for snapshots is 40%. Setting this field will effectively set snapshot_enabled to true.
   * @return reservedSpacePercent
   */
  @javax.annotation.Nullable
  public Integer getReservedSpacePercent() {
    return reservedSpacePercent;
  }

  public void setReservedSpacePercent(Integer reservedSpacePercent) {
    this.reservedSpacePercent = reservedSpacePercent;
  }


  public SnapshotReservationDetail reservedSpaceRemainingGib(String reservedSpaceRemainingGib) {
    this.reservedSpaceRemainingGib = reservedSpaceRemainingGib;
    return this;
  }

  /**
   * The amount, in GiB, of available space in this storage volume&#39;s reserved snapshot space.
   * @return reservedSpaceRemainingGib
   */
  @javax.annotation.Nullable
  public String getReservedSpaceRemainingGib() {
    return reservedSpaceRemainingGib;
  }

  public void setReservedSpaceRemainingGib(String reservedSpaceRemainingGib) {
    this.reservedSpaceRemainingGib = reservedSpaceRemainingGib;
  }


  public SnapshotReservationDetail reservedSpaceUsedPercent(Integer reservedSpaceUsedPercent) {
    this.reservedSpaceUsedPercent = reservedSpaceUsedPercent;
    return this;
  }

  /**
   * The percent of snapshot space on this storage volume actually being used by the snapshot copies. This value might be higher than 100% if the snapshot copies have overflowed into the data portion of the storage volume.
   * @return reservedSpaceUsedPercent
   */
  @javax.annotation.Nullable
  public Integer getReservedSpaceUsedPercent() {
    return reservedSpaceUsedPercent;
  }

  public void setReservedSpaceUsedPercent(Integer reservedSpaceUsedPercent) {
    this.reservedSpaceUsedPercent = reservedSpaceUsedPercent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnapshotReservationDetail snapshotReservationDetail = (SnapshotReservationDetail) o;
    return Objects.equals(this.reservedSpaceGib, snapshotReservationDetail.reservedSpaceGib) &&
        Objects.equals(this.reservedSpacePercent, snapshotReservationDetail.reservedSpacePercent) &&
        Objects.equals(this.reservedSpaceRemainingGib, snapshotReservationDetail.reservedSpaceRemainingGib) &&
        Objects.equals(this.reservedSpaceUsedPercent, snapshotReservationDetail.reservedSpaceUsedPercent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reservedSpaceGib, reservedSpacePercent, reservedSpaceRemainingGib, reservedSpaceUsedPercent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnapshotReservationDetail {\n");
    sb.append("    reservedSpaceGib: ").append(toIndentedString(reservedSpaceGib)).append("\n");
    sb.append("    reservedSpacePercent: ").append(toIndentedString(reservedSpacePercent)).append("\n");
    sb.append("    reservedSpaceRemainingGib: ").append(toIndentedString(reservedSpaceRemainingGib)).append("\n");
    sb.append("    reservedSpaceUsedPercent: ").append(toIndentedString(reservedSpaceUsedPercent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reservedSpaceGib");
    openapiFields.add("reservedSpacePercent");
    openapiFields.add("reservedSpaceRemainingGib");
    openapiFields.add("reservedSpaceUsedPercent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnapshotReservationDetail
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnapshotReservationDetail.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnapshotReservationDetail is not found in the empty JSON string", SnapshotReservationDetail.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnapshotReservationDetail.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnapshotReservationDetail` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("reservedSpaceGib") != null && !jsonObj.get("reservedSpaceGib").isJsonNull()) && !jsonObj.get("reservedSpaceGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedSpaceGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedSpaceGib").toString()));
      }
      if ((jsonObj.get("reservedSpaceRemainingGib") != null && !jsonObj.get("reservedSpaceRemainingGib").isJsonNull()) && !jsonObj.get("reservedSpaceRemainingGib").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reservedSpaceRemainingGib` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reservedSpaceRemainingGib").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnapshotReservationDetail.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnapshotReservationDetail' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnapshotReservationDetail> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnapshotReservationDetail.class));

       return (TypeAdapter<T>) new TypeAdapter<SnapshotReservationDetail>() {
           @Override
           public void write(JsonWriter out, SnapshotReservationDetail value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnapshotReservationDetail read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnapshotReservationDetail given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnapshotReservationDetail
   * @throws IOException if the JSON string is invalid with respect to SnapshotReservationDetail
   */
  public static SnapshotReservationDetail fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnapshotReservationDetail.class);
  }

  /**
   * Convert an instance of SnapshotReservationDetail to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

