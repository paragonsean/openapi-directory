/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllowedClient from './AllowedClient';

/**
 * The NfsShare model module.
 * @module model/NfsShare
 * @version v2
 */
class NfsShare {
    /**
     * Constructs a new <code>NfsShare</code>.
     * An NFS share.
     * @alias module:model/NfsShare
     */
    constructor() { 
        
        NfsShare.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NfsShare</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NfsShare} obj Optional instance to populate.
     * @return {module:model/NfsShare} The populated <code>NfsShare</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NfsShare();

            if (data.hasOwnProperty('allowedClients')) {
                obj['allowedClients'] = ApiClient.convertToType(data['allowedClients'], [AllowedClient]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfsShareId')) {
                obj['nfsShareId'] = ApiClient.convertToType(data['nfsShareId'], 'String');
            }
            if (data.hasOwnProperty('pod')) {
                obj['pod'] = ApiClient.convertToType(data['pod'], 'String');
            }
            if (data.hasOwnProperty('requestedSizeGib')) {
                obj['requestedSizeGib'] = ApiClient.convertToType(data['requestedSizeGib'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('volume')) {
                obj['volume'] = ApiClient.convertToType(data['volume'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NfsShare</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NfsShare</code>.
     */
    static validateJSON(data) {
        if (data['allowedClients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allowedClients'])) {
                throw new Error("Expected the field `allowedClients` to be an array in the JSON data but got " + data['allowedClients']);
            }
            // validate the optional field `allowedClients` (array)
            for (const item of data['allowedClients']) {
                AllowedClient.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['nfsShareId'] && !(typeof data['nfsShareId'] === 'string' || data['nfsShareId'] instanceof String)) {
            throw new Error("Expected the field `nfsShareId` to be a primitive type in the JSON string but got " + data['nfsShareId']);
        }
        // ensure the json data is a string
        if (data['pod'] && !(typeof data['pod'] === 'string' || data['pod'] instanceof String)) {
            throw new Error("Expected the field `pod` to be a primitive type in the JSON string but got " + data['pod']);
        }
        // ensure the json data is a string
        if (data['requestedSizeGib'] && !(typeof data['requestedSizeGib'] === 'string' || data['requestedSizeGib'] instanceof String)) {
            throw new Error("Expected the field `requestedSizeGib` to be a primitive type in the JSON string but got " + data['requestedSizeGib']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // ensure the json data is a string
        if (data['volume'] && !(typeof data['volume'] === 'string' || data['volume'] instanceof String)) {
            throw new Error("Expected the field `volume` to be a primitive type in the JSON string but got " + data['volume']);
        }

        return true;
    }


}



/**
 * List of allowed access points.
 * @member {Array.<module:model/AllowedClient>} allowedClients
 */
NfsShare.prototype['allowedClients'] = undefined;

/**
 * Output only. An identifier for the NFS share, generated by the backend. This is the same value as nfs_share_id and will replace it in the future.
 * @member {String} id
 */
NfsShare.prototype['id'] = undefined;

/**
 * Labels as key value pairs.
 * @member {Object.<String, String>} labels
 */
NfsShare.prototype['labels'] = undefined;

/**
 * Immutable. The name of the NFS share.
 * @member {String} name
 */
NfsShare.prototype['name'] = undefined;

/**
 * Output only. An identifier for the NFS share, generated by the backend. This field will be deprecated in the future, use `id` instead.
 * @member {String} nfsShareId
 */
NfsShare.prototype['nfsShareId'] = undefined;

/**
 * Immutable. Pod name. Pod is an independent part of infrastructure. NFSShare can only be connected to the assets (networks, instances) allocated in the same pod.
 * @member {String} pod
 */
NfsShare.prototype['pod'] = undefined;

/**
 * The requested size, in GiB.
 * @member {String} requestedSizeGib
 */
NfsShare.prototype['requestedSizeGib'] = undefined;

/**
 * Output only. The state of the NFS share.
 * @member {module:model/NfsShare.StateEnum} state
 */
NfsShare.prototype['state'] = undefined;

/**
 * Immutable. The storage type of the underlying volume.
 * @member {module:model/NfsShare.StorageTypeEnum} storageType
 */
NfsShare.prototype['storageType'] = undefined;

/**
 * Output only. The underlying volume of the share. Created automatically during provisioning.
 * @member {String} volume
 */
NfsShare.prototype['volume'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
NfsShare['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONED"
     * @const
     */
    "PROVISIONED": "PROVISIONED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};


/**
 * Allowed values for the <code>storageType</code> property.
 * @enum {String}
 * @readonly
 */
NfsShare['StorageTypeEnum'] = {

    /**
     * value: "STORAGE_TYPE_UNSPECIFIED"
     * @const
     */
    "STORAGE_TYPE_UNSPECIFIED": "STORAGE_TYPE_UNSPECIFIED",

    /**
     * value: "SSD"
     * @const
     */
    "SSD": "SSD",

    /**
     * value: "HDD"
     * @const
     */
    "HDD": "HDD"
};



export default NfsShare;

