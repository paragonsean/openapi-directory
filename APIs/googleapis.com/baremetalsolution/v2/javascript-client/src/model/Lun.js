/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Lun model module.
 * @module model/Lun
 * @version v2
 */
class Lun {
    /**
     * Constructs a new <code>Lun</code>.
     * A storage volume logical unit number (LUN).
     * @alias module:model/Lun
     */
    constructor() { 
        
        Lun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Lun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Lun} obj Optional instance to populate.
     * @return {module:model/Lun} The populated <code>Lun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Lun();

            if (data.hasOwnProperty('bootLun')) {
                obj['bootLun'] = ApiClient.convertToType(data['bootLun'], 'Boolean');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], ['String']);
            }
            if (data.hasOwnProperty('multiprotocolType')) {
                obj['multiprotocolType'] = ApiClient.convertToType(data['multiprotocolType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('shareable')) {
                obj['shareable'] = ApiClient.convertToType(data['shareable'], 'Boolean');
            }
            if (data.hasOwnProperty('sizeGb')) {
                obj['sizeGb'] = ApiClient.convertToType(data['sizeGb'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('storageVolume')) {
                obj['storageVolume'] = ApiClient.convertToType(data['storageVolume'], 'String');
            }
            if (data.hasOwnProperty('wwid')) {
                obj['wwid'] = ApiClient.convertToType(data['wwid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Lun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Lun</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instances'])) {
            throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
        }
        // ensure the json data is a string
        if (data['multiprotocolType'] && !(typeof data['multiprotocolType'] === 'string' || data['multiprotocolType'] instanceof String)) {
            throw new Error("Expected the field `multiprotocolType` to be a primitive type in the JSON string but got " + data['multiprotocolType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['sizeGb'] && !(typeof data['sizeGb'] === 'string' || data['sizeGb'] instanceof String)) {
            throw new Error("Expected the field `sizeGb` to be a primitive type in the JSON string but got " + data['sizeGb']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // ensure the json data is a string
        if (data['storageVolume'] && !(typeof data['storageVolume'] === 'string' || data['storageVolume'] instanceof String)) {
            throw new Error("Expected the field `storageVolume` to be a primitive type in the JSON string but got " + data['storageVolume']);
        }
        // ensure the json data is a string
        if (data['wwid'] && !(typeof data['wwid'] === 'string' || data['wwid'] instanceof String)) {
            throw new Error("Expected the field `wwid` to be a primitive type in the JSON string but got " + data['wwid']);
        }

        return true;
    }


}



/**
 * Display if this LUN is a boot LUN.
 * @member {Boolean} bootLun
 */
Lun.prototype['bootLun'] = undefined;

/**
 * Output only. Time after which LUN will be fully deleted. It is filled only for LUNs in COOL_OFF state.
 * @member {String} expireTime
 */
Lun.prototype['expireTime'] = undefined;

/**
 * An identifier for the LUN, generated by the backend.
 * @member {String} id
 */
Lun.prototype['id'] = undefined;

/**
 * Output only. Instances this Lun is attached to.
 * @member {Array.<String>} instances
 */
Lun.prototype['instances'] = undefined;

/**
 * The LUN multiprotocol type ensures the characteristics of the LUN are optimized for each operating system.
 * @member {module:model/Lun.MultiprotocolTypeEnum} multiprotocolType
 */
Lun.prototype['multiprotocolType'] = undefined;

/**
 * Output only. The name of the LUN.
 * @member {String} name
 */
Lun.prototype['name'] = undefined;

/**
 * Display if this LUN can be shared between multiple physical servers.
 * @member {Boolean} shareable
 */
Lun.prototype['shareable'] = undefined;

/**
 * The size of this LUN, in GiB.
 * @member {String} sizeGb
 */
Lun.prototype['sizeGb'] = undefined;

/**
 * The state of this storage volume.
 * @member {module:model/Lun.StateEnum} state
 */
Lun.prototype['state'] = undefined;

/**
 * The storage type for this LUN.
 * @member {module:model/Lun.StorageTypeEnum} storageType
 */
Lun.prototype['storageType'] = undefined;

/**
 * Display the storage volume for this LUN.
 * @member {String} storageVolume
 */
Lun.prototype['storageVolume'] = undefined;

/**
 * The WWID for this LUN.
 * @member {String} wwid
 */
Lun.prototype['wwid'] = undefined;





/**
 * Allowed values for the <code>multiprotocolType</code> property.
 * @enum {String}
 * @readonly
 */
Lun['MultiprotocolTypeEnum'] = {

    /**
     * value: "MULTIPROTOCOL_TYPE_UNSPECIFIED"
     * @const
     */
    "MULTIPROTOCOL_TYPE_UNSPECIFIED": "MULTIPROTOCOL_TYPE_UNSPECIFIED",

    /**
     * value: "LINUX"
     * @const
     */
    "LINUX": "LINUX"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Lun['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "READY"
     * @const
     */
    "READY": "READY",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "COOL_OFF"
     * @const
     */
    "COOL_OFF": "COOL_OFF"
};


/**
 * Allowed values for the <code>storageType</code> property.
 * @enum {String}
 * @readonly
 */
Lun['StorageTypeEnum'] = {

    /**
     * value: "STORAGE_TYPE_UNSPECIFIED"
     * @const
     */
    "STORAGE_TYPE_UNSPECIFIED": "STORAGE_TYPE_UNSPECIFIED",

    /**
     * value: "SSD"
     * @const
     */
    "SSD": "SSD",

    /**
     * value: "HDD"
     * @const
     */
    "HDD": "HDD"
};



export default Lun;

