/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkAddressReservation from './NetworkAddressReservation';
import NetworkMountPoint from './NetworkMountPoint';
import VRF from './VRF';

/**
 * The Network model module.
 * @module model/Network
 * @version v2
 */
class Network {
    /**
     * Constructs a new <code>Network</code>.
     * A Network.
     * @alias module:model/Network
     */
    constructor() { 
        
        Network.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Network</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Network} obj Optional instance to populate.
     * @return {module:model/Network} The populated <code>Network</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Network();

            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('gatewayIp')) {
                obj['gatewayIp'] = ApiClient.convertToType(data['gatewayIp'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('jumboFramesEnabled')) {
                obj['jumboFramesEnabled'] = ApiClient.convertToType(data['jumboFramesEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], ['String']);
            }
            if (data.hasOwnProperty('mountPoints')) {
                obj['mountPoints'] = ApiClient.convertToType(data['mountPoints'], [NetworkMountPoint]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pod')) {
                obj['pod'] = ApiClient.convertToType(data['pod'], 'String');
            }
            if (data.hasOwnProperty('reservations')) {
                obj['reservations'] = ApiClient.convertToType(data['reservations'], [NetworkAddressReservation]);
            }
            if (data.hasOwnProperty('servicesCidr')) {
                obj['servicesCidr'] = ApiClient.convertToType(data['servicesCidr'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('vlanId')) {
                obj['vlanId'] = ApiClient.convertToType(data['vlanId'], 'String');
            }
            if (data.hasOwnProperty('vrf')) {
                obj['vrf'] = VRF.constructFromObject(data['vrf']);
            }
            if (data.hasOwnProperty('vrfAttachment')) {
                obj['vrfAttachment'] = ApiClient.convertToType(data['vrfAttachment'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Network</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Network</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cidr'] && !(typeof data['cidr'] === 'string' || data['cidr'] instanceof String)) {
            throw new Error("Expected the field `cidr` to be a primitive type in the JSON string but got " + data['cidr']);
        }
        // ensure the json data is a string
        if (data['gatewayIp'] && !(typeof data['gatewayIp'] === 'string' || data['gatewayIp'] instanceof String)) {
            throw new Error("Expected the field `gatewayIp` to be a primitive type in the JSON string but got " + data['gatewayIp']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['macAddress'])) {
            throw new Error("Expected the field `macAddress` to be an array in the JSON data but got " + data['macAddress']);
        }
        if (data['mountPoints']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['mountPoints'])) {
                throw new Error("Expected the field `mountPoints` to be an array in the JSON data but got " + data['mountPoints']);
            }
            // validate the optional field `mountPoints` (array)
            for (const item of data['mountPoints']) {
                NetworkMountPoint.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['pod'] && !(typeof data['pod'] === 'string' || data['pod'] instanceof String)) {
            throw new Error("Expected the field `pod` to be a primitive type in the JSON string but got " + data['pod']);
        }
        if (data['reservations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reservations'])) {
                throw new Error("Expected the field `reservations` to be an array in the JSON data but got " + data['reservations']);
            }
            // validate the optional field `reservations` (array)
            for (const item of data['reservations']) {
                NetworkAddressReservation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['servicesCidr'] && !(typeof data['servicesCidr'] === 'string' || data['servicesCidr'] instanceof String)) {
            throw new Error("Expected the field `servicesCidr` to be a primitive type in the JSON string but got " + data['servicesCidr']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['vlanId'] && !(typeof data['vlanId'] === 'string' || data['vlanId'] instanceof String)) {
            throw new Error("Expected the field `vlanId` to be a primitive type in the JSON string but got " + data['vlanId']);
        }
        // validate the optional field `vrf`
        if (data['vrf']) { // data not null
          VRF.validateJSON(data['vrf']);
        }
        // ensure the json data is a string
        if (data['vrfAttachment'] && !(typeof data['vrfAttachment'] === 'string' || data['vrfAttachment'] instanceof String)) {
            throw new Error("Expected the field `vrfAttachment` to be a primitive type in the JSON string but got " + data['vrfAttachment']);
        }

        return true;
    }


}



/**
 * The cidr of the Network.
 * @member {String} cidr
 */
Network.prototype['cidr'] = undefined;

/**
 * Output only. Gateway ip address.
 * @member {String} gatewayIp
 */
Network.prototype['gatewayIp'] = undefined;

/**
 * An identifier for the `Network`, generated by the backend.
 * @member {String} id
 */
Network.prototype['id'] = undefined;

/**
 * IP address configured.
 * @member {String} ipAddress
 */
Network.prototype['ipAddress'] = undefined;

/**
 * Whether network uses standard frames or jumbo ones.
 * @member {Boolean} jumboFramesEnabled
 */
Network.prototype['jumboFramesEnabled'] = undefined;

/**
 * Labels as key value pairs.
 * @member {Object.<String, String>} labels
 */
Network.prototype['labels'] = undefined;

/**
 * List of physical interfaces.
 * @member {Array.<String>} macAddress
 */
Network.prototype['macAddress'] = undefined;

/**
 * Input only. List of mount points to attach the network to.
 * @member {Array.<module:model/NetworkMountPoint>} mountPoints
 */
Network.prototype['mountPoints'] = undefined;

/**
 * Output only. The resource name of this `Network`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/networks/{network}`
 * @member {String} name
 */
Network.prototype['name'] = undefined;

/**
 * Immutable. Pod name. Pod is an independent part of infrastructure. Network can only be connected to the assets (instances, nfsshares) allocated in the same pod.
 * @member {String} pod
 */
Network.prototype['pod'] = undefined;

/**
 * List of IP address reservations in this network. When updating this field, an error will be generated if a reservation conflicts with an IP address already allocated to a physical server.
 * @member {Array.<module:model/NetworkAddressReservation>} reservations
 */
Network.prototype['reservations'] = undefined;

/**
 * IP range for reserved for services (e.g. NFS).
 * @member {String} servicesCidr
 */
Network.prototype['servicesCidr'] = undefined;

/**
 * The Network state.
 * @member {module:model/Network.StateEnum} state
 */
Network.prototype['state'] = undefined;

/**
 * The type of this network.
 * @member {module:model/Network.TypeEnum} type
 */
Network.prototype['type'] = undefined;

/**
 * The vlan id of the Network.
 * @member {String} vlanId
 */
Network.prototype['vlanId'] = undefined;

/**
 * @member {module:model/VRF} vrf
 */
Network.prototype['vrf'] = undefined;

/**
 * Optional. The name of a pre-existing Vrf that the network should be attached to. Format is `vrfs/{vrf}`.
 * @member {String} vrfAttachment
 */
Network.prototype['vrfAttachment'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Network['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "PROVISIONED"
     * @const
     */
    "PROVISIONED": "PROVISIONED",

    /**
     * value: "DEPROVISIONING"
     * @const
     */
    "DEPROVISIONING": "DEPROVISIONING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Network['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "CLIENT"
     * @const
     */
    "CLIENT": "CLIENT",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE"
};



export default Network;

