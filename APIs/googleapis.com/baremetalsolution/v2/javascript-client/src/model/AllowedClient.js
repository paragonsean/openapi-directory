/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AllowedClient model module.
 * @module model/AllowedClient
 * @version v2
 */
class AllowedClient {
    /**
     * Constructs a new <code>AllowedClient</code>.
     * Represents an &#39;access point&#39; for the share.
     * @alias module:model/AllowedClient
     */
    constructor() { 
        
        AllowedClient.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AllowedClient</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllowedClient} obj Optional instance to populate.
     * @return {module:model/AllowedClient} The populated <code>AllowedClient</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllowedClient();

            if (data.hasOwnProperty('allowDev')) {
                obj['allowDev'] = ApiClient.convertToType(data['allowDev'], 'Boolean');
            }
            if (data.hasOwnProperty('allowSuid')) {
                obj['allowSuid'] = ApiClient.convertToType(data['allowSuid'], 'Boolean');
            }
            if (data.hasOwnProperty('allowedClientsCidr')) {
                obj['allowedClientsCidr'] = ApiClient.convertToType(data['allowedClientsCidr'], 'String');
            }
            if (data.hasOwnProperty('mountPermissions')) {
                obj['mountPermissions'] = ApiClient.convertToType(data['mountPermissions'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('nfsPath')) {
                obj['nfsPath'] = ApiClient.convertToType(data['nfsPath'], 'String');
            }
            if (data.hasOwnProperty('noRootSquash')) {
                obj['noRootSquash'] = ApiClient.convertToType(data['noRootSquash'], 'Boolean');
            }
            if (data.hasOwnProperty('shareIp')) {
                obj['shareIp'] = ApiClient.convertToType(data['shareIp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllowedClient</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllowedClient</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allowedClientsCidr'] && !(typeof data['allowedClientsCidr'] === 'string' || data['allowedClientsCidr'] instanceof String)) {
            throw new Error("Expected the field `allowedClientsCidr` to be a primitive type in the JSON string but got " + data['allowedClientsCidr']);
        }
        // ensure the json data is a string
        if (data['mountPermissions'] && !(typeof data['mountPermissions'] === 'string' || data['mountPermissions'] instanceof String)) {
            throw new Error("Expected the field `mountPermissions` to be a primitive type in the JSON string but got " + data['mountPermissions']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['nfsPath'] && !(typeof data['nfsPath'] === 'string' || data['nfsPath'] instanceof String)) {
            throw new Error("Expected the field `nfsPath` to be a primitive type in the JSON string but got " + data['nfsPath']);
        }
        // ensure the json data is a string
        if (data['shareIp'] && !(typeof data['shareIp'] === 'string' || data['shareIp'] instanceof String)) {
            throw new Error("Expected the field `shareIp` to be a primitive type in the JSON string but got " + data['shareIp']);
        }

        return true;
    }


}



/**
 * Allow dev flag. Which controls whether to allow creation of devices.
 * @member {Boolean} allowDev
 */
AllowedClient.prototype['allowDev'] = undefined;

/**
 * Allow the setuid flag.
 * @member {Boolean} allowSuid
 */
AllowedClient.prototype['allowSuid'] = undefined;

/**
 * The subnet of IP addresses permitted to access the share.
 * @member {String} allowedClientsCidr
 */
AllowedClient.prototype['allowedClientsCidr'] = undefined;

/**
 * Mount permissions.
 * @member {module:model/AllowedClient.MountPermissionsEnum} mountPermissions
 */
AllowedClient.prototype['mountPermissions'] = undefined;

/**
 * The network the access point sits on.
 * @member {String} network
 */
AllowedClient.prototype['network'] = undefined;

/**
 * Output only. The path to access NFS, in format shareIP:/InstanceID InstanceID is the generated ID instead of customer provided name. example like \"10.0.0.0:/g123456789-nfs001\"
 * @member {String} nfsPath
 */
AllowedClient.prototype['nfsPath'] = undefined;

/**
 * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
 * @member {Boolean} noRootSquash
 */
AllowedClient.prototype['noRootSquash'] = undefined;

/**
 * Output only. The IP address of the share on this network. Assigned automatically during provisioning based on the network's services_cidr.
 * @member {String} shareIp
 */
AllowedClient.prototype['shareIp'] = undefined;





/**
 * Allowed values for the <code>mountPermissions</code> property.
 * @enum {String}
 * @readonly
 */
AllowedClient['MountPermissionsEnum'] = {

    /**
     * value: "MOUNT_PERMISSIONS_UNSPECIFIED"
     * @const
     */
    "MOUNT_PERMISSIONS_UNSPECIFIED": "MOUNT_PERMISSIONS_UNSPECIFIED",

    /**
     * value: "READ"
     * @const
     */
    "READ": "READ",

    /**
     * value: "READ_WRITE"
     * @const
     */
    "READ_WRITE": "READ_WRITE"
};



export default AllowedClient;

