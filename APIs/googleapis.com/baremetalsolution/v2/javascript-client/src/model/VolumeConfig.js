/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LunRange from './LunRange';
import NfsExport from './NfsExport';

/**
 * The VolumeConfig model module.
 * @module model/VolumeConfig
 * @version v2
 */
class VolumeConfig {
    /**
     * Constructs a new <code>VolumeConfig</code>.
     * Configuration parameters for a new volume.
     * @alias module:model/VolumeConfig
     */
    constructor() { 
        
        VolumeConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeConfig} obj Optional instance to populate.
     * @return {module:model/VolumeConfig} The populated <code>VolumeConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeConfig();

            if (data.hasOwnProperty('gcpService')) {
                obj['gcpService'] = ApiClient.convertToType(data['gcpService'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('lunRanges')) {
                obj['lunRanges'] = ApiClient.convertToType(data['lunRanges'], [LunRange]);
            }
            if (data.hasOwnProperty('machineIds')) {
                obj['machineIds'] = ApiClient.convertToType(data['machineIds'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nfsExports')) {
                obj['nfsExports'] = ApiClient.convertToType(data['nfsExports'], [NfsExport]);
            }
            if (data.hasOwnProperty('performanceTier')) {
                obj['performanceTier'] = ApiClient.convertToType(data['performanceTier'], 'String');
            }
            if (data.hasOwnProperty('protocol')) {
                obj['protocol'] = ApiClient.convertToType(data['protocol'], 'String');
            }
            if (data.hasOwnProperty('sizeGb')) {
                obj['sizeGb'] = ApiClient.convertToType(data['sizeGb'], 'Number');
            }
            if (data.hasOwnProperty('snapshotsEnabled')) {
                obj['snapshotsEnabled'] = ApiClient.convertToType(data['snapshotsEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userNote')) {
                obj['userNote'] = ApiClient.convertToType(data['userNote'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gcpService'] && !(typeof data['gcpService'] === 'string' || data['gcpService'] instanceof String)) {
            throw new Error("Expected the field `gcpService` to be a primitive type in the JSON string but got " + data['gcpService']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['lunRanges']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['lunRanges'])) {
                throw new Error("Expected the field `lunRanges` to be an array in the JSON data but got " + data['lunRanges']);
            }
            // validate the optional field `lunRanges` (array)
            for (const item of data['lunRanges']) {
                LunRange.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['machineIds'])) {
            throw new Error("Expected the field `machineIds` to be an array in the JSON data but got " + data['machineIds']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['nfsExports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nfsExports'])) {
                throw new Error("Expected the field `nfsExports` to be an array in the JSON data but got " + data['nfsExports']);
            }
            // validate the optional field `nfsExports` (array)
            for (const item of data['nfsExports']) {
                NfsExport.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['performanceTier'] && !(typeof data['performanceTier'] === 'string' || data['performanceTier'] instanceof String)) {
            throw new Error("Expected the field `performanceTier` to be a primitive type in the JSON string but got " + data['performanceTier']);
        }
        // ensure the json data is a string
        if (data['protocol'] && !(typeof data['protocol'] === 'string' || data['protocol'] instanceof String)) {
            throw new Error("Expected the field `protocol` to be a primitive type in the JSON string but got " + data['protocol']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userNote'] && !(typeof data['userNote'] === 'string' || data['userNote'] instanceof String)) {
            throw new Error("Expected the field `userNote` to be a primitive type in the JSON string but got " + data['userNote']);
        }

        return true;
    }


}



/**
 * The GCP service of the storage volume. Available gcp_service are in https://cloud.google.com/bare-metal/docs/bms-planning.
 * @member {String} gcpService
 */
VolumeConfig.prototype['gcpService'] = undefined;

/**
 * A transient unique identifier to identify a volume within an ProvisioningConfig request.
 * @member {String} id
 */
VolumeConfig.prototype['id'] = undefined;

/**
 * LUN ranges to be configured. Set only when protocol is PROTOCOL_FC.
 * @member {Array.<module:model/LunRange>} lunRanges
 */
VolumeConfig.prototype['lunRanges'] = undefined;

/**
 * Machine ids connected to this volume. Set only when protocol is PROTOCOL_FC.
 * @member {Array.<String>} machineIds
 */
VolumeConfig.prototype['machineIds'] = undefined;

/**
 * Output only. The name of the volume config.
 * @member {String} name
 */
VolumeConfig.prototype['name'] = undefined;

/**
 * NFS exports. Set only when protocol is PROTOCOL_NFS.
 * @member {Array.<module:model/NfsExport>} nfsExports
 */
VolumeConfig.prototype['nfsExports'] = undefined;

/**
 * Performance tier of the Volume. Default is SHARED.
 * @member {module:model/VolumeConfig.PerformanceTierEnum} performanceTier
 */
VolumeConfig.prototype['performanceTier'] = undefined;

/**
 * Volume protocol.
 * @member {module:model/VolumeConfig.ProtocolEnum} protocol
 */
VolumeConfig.prototype['protocol'] = undefined;

/**
 * The requested size of this volume, in GB.
 * @member {Number} sizeGb
 */
VolumeConfig.prototype['sizeGb'] = undefined;

/**
 * Whether snapshots should be enabled.
 * @member {Boolean} snapshotsEnabled
 */
VolumeConfig.prototype['snapshotsEnabled'] = undefined;

/**
 * The type of this Volume.
 * @member {module:model/VolumeConfig.TypeEnum} type
 */
VolumeConfig.prototype['type'] = undefined;

/**
 * User note field, it can be used by customers to add additional information for the BMS Ops team .
 * @member {String} userNote
 */
VolumeConfig.prototype['userNote'] = undefined;





/**
 * Allowed values for the <code>performanceTier</code> property.
 * @enum {String}
 * @readonly
 */
VolumeConfig['PerformanceTierEnum'] = {

    /**
     * value: "VOLUME_PERFORMANCE_TIER_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "VOLUME_PERFORMANCE_TIER_UNSPECIFIED",

    /**
     * value: "VOLUME_PERFORMANCE_TIER_SHARED"
     * @const
     */
    "SHARED": "VOLUME_PERFORMANCE_TIER_SHARED",

    /**
     * value: "VOLUME_PERFORMANCE_TIER_ASSIGNED"
     * @const
     */
    "ASSIGNED": "VOLUME_PERFORMANCE_TIER_ASSIGNED",

    /**
     * value: "VOLUME_PERFORMANCE_TIER_HT"
     * @const
     */
    "HT": "VOLUME_PERFORMANCE_TIER_HT",

    /**
     * value: "VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE"
     * @const
     */
    "QOS2_PERFORMANCE": "VOLUME_PERFORMANCE_TIER_QOS2_PERFORMANCE"
};


/**
 * Allowed values for the <code>protocol</code> property.
 * @enum {String}
 * @readonly
 */
VolumeConfig['ProtocolEnum'] = {

    /**
     * value: "PROTOCOL_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "PROTOCOL_UNSPECIFIED",

    /**
     * value: "PROTOCOL_FC"
     * @const
     */
    "FC": "PROTOCOL_FC",

    /**
     * value: "PROTOCOL_NFS"
     * @const
     */
    "NFS": "PROTOCOL_NFS"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
VolumeConfig['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "FLASH"
     * @const
     */
    "FLASH": "FLASH",

    /**
     * value: "DISK"
     * @const
     */
    "DISK": "DISK"
};



export default VolumeConfig;

