/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceConfig from './InstanceConfig';
import NetworkConfig from './NetworkConfig';
import VolumeConfig from './VolumeConfig';

/**
 * The ProvisioningConfig model module.
 * @module model/ProvisioningConfig
 * @version v2
 */
class ProvisioningConfig {
    /**
     * Constructs a new <code>ProvisioningConfig</code>.
     * A provisioning configuration.
     * @alias module:model/ProvisioningConfig
     */
    constructor() { 
        
        ProvisioningConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProvisioningConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProvisioningConfig} obj Optional instance to populate.
     * @return {module:model/ProvisioningConfig} The populated <code>ProvisioningConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProvisioningConfig();

            if (data.hasOwnProperty('cloudConsoleUri')) {
                obj['cloudConsoleUri'] = ApiClient.convertToType(data['cloudConsoleUri'], 'String');
            }
            if (data.hasOwnProperty('customId')) {
                obj['customId'] = ApiClient.convertToType(data['customId'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('handoverServiceAccount')) {
                obj['handoverServiceAccount'] = ApiClient.convertToType(data['handoverServiceAccount'], 'String');
            }
            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [InstanceConfig]);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [NetworkConfig]);
            }
            if (data.hasOwnProperty('pod')) {
                obj['pod'] = ApiClient.convertToType(data['pod'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('ticketId')) {
                obj['ticketId'] = ApiClient.convertToType(data['ticketId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [VolumeConfig]);
            }
            if (data.hasOwnProperty('vpcScEnabled')) {
                obj['vpcScEnabled'] = ApiClient.convertToType(data['vpcScEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProvisioningConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProvisioningConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cloudConsoleUri'] && !(typeof data['cloudConsoleUri'] === 'string' || data['cloudConsoleUri'] instanceof String)) {
            throw new Error("Expected the field `cloudConsoleUri` to be a primitive type in the JSON string but got " + data['cloudConsoleUri']);
        }
        // ensure the json data is a string
        if (data['customId'] && !(typeof data['customId'] === 'string' || data['customId'] instanceof String)) {
            throw new Error("Expected the field `customId` to be a primitive type in the JSON string but got " + data['customId']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['handoverServiceAccount'] && !(typeof data['handoverServiceAccount'] === 'string' || data['handoverServiceAccount'] instanceof String)) {
            throw new Error("Expected the field `handoverServiceAccount` to be a primitive type in the JSON string but got " + data['handoverServiceAccount']);
        }
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                InstanceConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                NetworkConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['pod'] && !(typeof data['pod'] === 'string' || data['pod'] instanceof String)) {
            throw new Error("Expected the field `pod` to be a primitive type in the JSON string but got " + data['pod']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }
        // ensure the json data is a string
        if (data['ticketId'] && !(typeof data['ticketId'] === 'string' || data['ticketId'] instanceof String)) {
            throw new Error("Expected the field `ticketId` to be a primitive type in the JSON string but got " + data['ticketId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                VolumeConfig.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. URI to Cloud Console UI view of this provisioning config.
 * @member {String} cloudConsoleUri
 */
ProvisioningConfig.prototype['cloudConsoleUri'] = undefined;

/**
 * Optional. The user-defined identifier of the provisioning config.
 * @member {String} customId
 */
ProvisioningConfig.prototype['customId'] = undefined;

/**
 * Email provided to send a confirmation with provisioning config to. Deprecated in favour of email field in request messages.
 * @member {String} email
 */
ProvisioningConfig.prototype['email'] = undefined;

/**
 * A service account to enable customers to access instance credentials upon handover.
 * @member {String} handoverServiceAccount
 */
ProvisioningConfig.prototype['handoverServiceAccount'] = undefined;

/**
 * Instances to be created.
 * @member {Array.<module:model/InstanceConfig>} instances
 */
ProvisioningConfig.prototype['instances'] = undefined;

/**
 * Optional. Location name of this ProvisioningConfig. It is optional only for Intake UI transition period.
 * @member {String} location
 */
ProvisioningConfig.prototype['location'] = undefined;

/**
 * Output only. The system-generated name of the provisioning config. This follows the UUID format.
 * @member {String} name
 */
ProvisioningConfig.prototype['name'] = undefined;

/**
 * Networks to be created.
 * @member {Array.<module:model/NetworkConfig>} networks
 */
ProvisioningConfig.prototype['networks'] = undefined;

/**
 * Optional. Pod name. Pod is an independent part of infrastructure. Instance can be connected to the assets (networks, volumes, nfsshares) allocated in the same pod only.
 * @member {String} pod
 */
ProvisioningConfig.prototype['pod'] = undefined;

/**
 * Output only. State of ProvisioningConfig.
 * @member {module:model/ProvisioningConfig.StateEnum} state
 */
ProvisioningConfig.prototype['state'] = undefined;

/**
 * Optional status messages associated with the FAILED state.
 * @member {String} statusMessage
 */
ProvisioningConfig.prototype['statusMessage'] = undefined;

/**
 * A generated ticket id to track provisioning request.
 * @member {String} ticketId
 */
ProvisioningConfig.prototype['ticketId'] = undefined;

/**
 * Output only. Last update timestamp.
 * @member {String} updateTime
 */
ProvisioningConfig.prototype['updateTime'] = undefined;

/**
 * Volumes to be created.
 * @member {Array.<module:model/VolumeConfig>} volumes
 */
ProvisioningConfig.prototype['volumes'] = undefined;

/**
 * If true, VPC SC is enabled for the cluster.
 * @member {Boolean} vpcScEnabled
 */
ProvisioningConfig.prototype['vpcScEnabled'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ProvisioningConfig['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "SUBMITTED"
     * @const
     */
    "SUBMITTED": "SUBMITTED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "PROVISIONED"
     * @const
     */
    "PROVISIONED": "PROVISIONED",

    /**
     * value: "VALIDATED"
     * @const
     */
    "VALIDATED": "VALIDATED",

    /**
     * value: "CANCELLED"
     * @const
     */
    "CANCELLED": "CANCELLED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default ProvisioningConfig;

