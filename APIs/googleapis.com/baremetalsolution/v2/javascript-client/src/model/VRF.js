/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QosPolicy from './QosPolicy';
import VlanAttachment from './VlanAttachment';

/**
 * The VRF model module.
 * @module model/VRF
 * @version v2
 */
class VRF {
    /**
     * Constructs a new <code>VRF</code>.
     * A network VRF.
     * @alias module:model/VRF
     */
    constructor() { 
        
        VRF.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VRF</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VRF} obj Optional instance to populate.
     * @return {module:model/VRF} The populated <code>VRF</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VRF();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('qosPolicy')) {
                obj['qosPolicy'] = QosPolicy.constructFromObject(data['qosPolicy']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('vlanAttachments')) {
                obj['vlanAttachments'] = ApiClient.convertToType(data['vlanAttachments'], [VlanAttachment]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VRF</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VRF</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `qosPolicy`
        if (data['qosPolicy']) { // data not null
          QosPolicy.validateJSON(data['qosPolicy']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['vlanAttachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['vlanAttachments'])) {
                throw new Error("Expected the field `vlanAttachments` to be an array in the JSON data but got " + data['vlanAttachments']);
            }
            // validate the optional field `vlanAttachments` (array)
            for (const item of data['vlanAttachments']) {
                VlanAttachment.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The name of the VRF.
 * @member {String} name
 */
VRF.prototype['name'] = undefined;

/**
 * @member {module:model/QosPolicy} qosPolicy
 */
VRF.prototype['qosPolicy'] = undefined;

/**
 * The possible state of VRF.
 * @member {module:model/VRF.StateEnum} state
 */
VRF.prototype['state'] = undefined;

/**
 * The list of VLAN attachments for the VRF.
 * @member {Array.<module:model/VlanAttachment>} vlanAttachments
 */
VRF.prototype['vlanAttachments'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
VRF['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "PROVISIONED"
     * @const
     */
    "PROVISIONED": "PROVISIONED"
};



export default VRF;

