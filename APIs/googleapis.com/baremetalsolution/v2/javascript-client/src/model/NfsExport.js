/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NfsExport model module.
 * @module model/NfsExport
 * @version v2
 */
class NfsExport {
    /**
     * Constructs a new <code>NfsExport</code>.
     * A NFS export entry.
     * @alias module:model/NfsExport
     */
    constructor() { 
        
        NfsExport.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NfsExport</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NfsExport} obj Optional instance to populate.
     * @return {module:model/NfsExport} The populated <code>NfsExport</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NfsExport();

            if (data.hasOwnProperty('allowDev')) {
                obj['allowDev'] = ApiClient.convertToType(data['allowDev'], 'Boolean');
            }
            if (data.hasOwnProperty('allowSuid')) {
                obj['allowSuid'] = ApiClient.convertToType(data['allowSuid'], 'Boolean');
            }
            if (data.hasOwnProperty('cidr')) {
                obj['cidr'] = ApiClient.convertToType(data['cidr'], 'String');
            }
            if (data.hasOwnProperty('machineId')) {
                obj['machineId'] = ApiClient.convertToType(data['machineId'], 'String');
            }
            if (data.hasOwnProperty('networkId')) {
                obj['networkId'] = ApiClient.convertToType(data['networkId'], 'String');
            }
            if (data.hasOwnProperty('noRootSquash')) {
                obj['noRootSquash'] = ApiClient.convertToType(data['noRootSquash'], 'Boolean');
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = ApiClient.convertToType(data['permissions'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NfsExport</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NfsExport</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cidr'] && !(typeof data['cidr'] === 'string' || data['cidr'] instanceof String)) {
            throw new Error("Expected the field `cidr` to be a primitive type in the JSON string but got " + data['cidr']);
        }
        // ensure the json data is a string
        if (data['machineId'] && !(typeof data['machineId'] === 'string' || data['machineId'] instanceof String)) {
            throw new Error("Expected the field `machineId` to be a primitive type in the JSON string but got " + data['machineId']);
        }
        // ensure the json data is a string
        if (data['networkId'] && !(typeof data['networkId'] === 'string' || data['networkId'] instanceof String)) {
            throw new Error("Expected the field `networkId` to be a primitive type in the JSON string but got " + data['networkId']);
        }
        // ensure the json data is a string
        if (data['permissions'] && !(typeof data['permissions'] === 'string' || data['permissions'] instanceof String)) {
            throw new Error("Expected the field `permissions` to be a primitive type in the JSON string but got " + data['permissions']);
        }

        return true;
    }


}



/**
 * Allow dev flag in NfsShare AllowedClientsRequest.
 * @member {Boolean} allowDev
 */
NfsExport.prototype['allowDev'] = undefined;

/**
 * Allow the setuid flag.
 * @member {Boolean} allowSuid
 */
NfsExport.prototype['allowSuid'] = undefined;

/**
 * A CIDR range.
 * @member {String} cidr
 */
NfsExport.prototype['cidr'] = undefined;

/**
 * Either a single machine, identified by an ID, or a comma-separated list of machine IDs.
 * @member {String} machineId
 */
NfsExport.prototype['machineId'] = undefined;

/**
 * Network to use to publish the export.
 * @member {String} networkId
 */
NfsExport.prototype['networkId'] = undefined;

/**
 * Disable root squashing, which is a feature of NFS. Root squash is a special mapping of the remote superuser (root) identity when using identity authentication.
 * @member {Boolean} noRootSquash
 */
NfsExport.prototype['noRootSquash'] = undefined;

/**
 * Export permissions.
 * @member {module:model/NfsExport.PermissionsEnum} permissions
 */
NfsExport.prototype['permissions'] = undefined;





/**
 * Allowed values for the <code>permissions</code> property.
 * @enum {String}
 * @readonly
 */
NfsExport['PermissionsEnum'] = {

    /**
     * value: "PERMISSIONS_UNSPECIFIED"
     * @const
     */
    "PERMISSIONS_UNSPECIFIED": "PERMISSIONS_UNSPECIFIED",

    /**
     * value: "READ_ONLY"
     * @const
     */
    "READ_ONLY": "READ_ONLY",

    /**
     * value: "READ_WRITE"
     * @const
     */
    "READ_WRITE": "READ_WRITE"
};



export default NfsExport;

