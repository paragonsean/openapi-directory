/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VolumeSnapshot model module.
 * @module model/VolumeSnapshot
 * @version v2
 */
class VolumeSnapshot {
    /**
     * Constructs a new <code>VolumeSnapshot</code>.
     * A snapshot of a volume. Only boot volumes can have snapshots.
     * @alias module:model/VolumeSnapshot
     */
    constructor() { 
        
        VolumeSnapshot.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VolumeSnapshot</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VolumeSnapshot} obj Optional instance to populate.
     * @return {module:model/VolumeSnapshot} The populated <code>VolumeSnapshot</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VolumeSnapshot();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('storageVolume')) {
                obj['storageVolume'] = ApiClient.convertToType(data['storageVolume'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VolumeSnapshot</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VolumeSnapshot</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['storageVolume'] && !(typeof data['storageVolume'] === 'string' || data['storageVolume'] instanceof String)) {
            throw new Error("Expected the field `storageVolume` to be a primitive type in the JSON string but got " + data['storageVolume']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Output only. The creation time of the snapshot.
 * @member {String} createTime
 */
VolumeSnapshot.prototype['createTime'] = undefined;

/**
 * The description of the snapshot.
 * @member {String} description
 */
VolumeSnapshot.prototype['description'] = undefined;

/**
 * Output only. An identifier for the snapshot, generated by the backend.
 * @member {String} id
 */
VolumeSnapshot.prototype['id'] = undefined;

/**
 * The name of the snapshot.
 * @member {String} name
 */
VolumeSnapshot.prototype['name'] = undefined;

/**
 * Output only. The name of the volume which this snapshot belongs to.
 * @member {String} storageVolume
 */
VolumeSnapshot.prototype['storageVolume'] = undefined;

/**
 * Output only. The type of the snapshot which indicates whether it was scheduled or manual/ad-hoc.
 * @member {module:model/VolumeSnapshot.TypeEnum} type
 */
VolumeSnapshot.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
VolumeSnapshot['TypeEnum'] = {

    /**
     * value: "SNAPSHOT_TYPE_UNSPECIFIED"
     * @const
     */
    "SNAPSHOT_TYPE_UNSPECIFIED": "SNAPSHOT_TYPE_UNSPECIFIED",

    /**
     * value: "AD_HOC"
     * @const
     */
    "AD_HOC": "AD_HOC",

    /**
     * value: "SCHEDULED"
     * @const
     */
    "SCHEDULED": "SCHEDULED"
};



export default VolumeSnapshot;

