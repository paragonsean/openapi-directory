/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudBaremetalsolutionV2LogicalInterface from './GoogleCloudBaremetalsolutionV2LogicalInterface';
import Lun from './Lun';
import Network from './Network';
import Volume from './Volume';

/**
 * The Instance model module.
 * @module model/Instance
 * @version v2
 */
class Instance {
    /**
     * Constructs a new <code>Instance</code>.
     * A server.
     * @alias module:model/Instance
     */
    constructor() { 
        
        Instance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instance} obj Optional instance to populate.
     * @return {module:model/Instance} The populated <code>Instance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instance();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('firmwareVersion')) {
                obj['firmwareVersion'] = ApiClient.convertToType(data['firmwareVersion'], 'String');
            }
            if (data.hasOwnProperty('hyperthreadingEnabled')) {
                obj['hyperthreadingEnabled'] = ApiClient.convertToType(data['hyperthreadingEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('interactiveSerialConsoleEnabled')) {
                obj['interactiveSerialConsoleEnabled'] = ApiClient.convertToType(data['interactiveSerialConsoleEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('kmsKeyVersion')) {
                obj['kmsKeyVersion'] = ApiClient.convertToType(data['kmsKeyVersion'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('logicalInterfaces')) {
                obj['logicalInterfaces'] = ApiClient.convertToType(data['logicalInterfaces'], [GoogleCloudBaremetalsolutionV2LogicalInterface]);
            }
            if (data.hasOwnProperty('loginInfo')) {
                obj['loginInfo'] = ApiClient.convertToType(data['loginInfo'], 'String');
            }
            if (data.hasOwnProperty('luns')) {
                obj['luns'] = ApiClient.convertToType(data['luns'], [Lun]);
            }
            if (data.hasOwnProperty('machineType')) {
                obj['machineType'] = ApiClient.convertToType(data['machineType'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('networkTemplate')) {
                obj['networkTemplate'] = ApiClient.convertToType(data['networkTemplate'], 'String');
            }
            if (data.hasOwnProperty('networks')) {
                obj['networks'] = ApiClient.convertToType(data['networks'], [Network]);
            }
            if (data.hasOwnProperty('osImage')) {
                obj['osImage'] = ApiClient.convertToType(data['osImage'], 'String');
            }
            if (data.hasOwnProperty('pod')) {
                obj['pod'] = ApiClient.convertToType(data['pod'], 'String');
            }
            if (data.hasOwnProperty('sshKeys')) {
                obj['sshKeys'] = ApiClient.convertToType(data['sshKeys'], ['String']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('volumes')) {
                obj['volumes'] = ApiClient.convertToType(data['volumes'], [Volume]);
            }
            if (data.hasOwnProperty('workloadProfile')) {
                obj['workloadProfile'] = ApiClient.convertToType(data['workloadProfile'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['firmwareVersion'] && !(typeof data['firmwareVersion'] === 'string' || data['firmwareVersion'] instanceof String)) {
            throw new Error("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got " + data['firmwareVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kmsKeyVersion'] && !(typeof data['kmsKeyVersion'] === 'string' || data['kmsKeyVersion'] instanceof String)) {
            throw new Error("Expected the field `kmsKeyVersion` to be a primitive type in the JSON string but got " + data['kmsKeyVersion']);
        }
        if (data['logicalInterfaces']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logicalInterfaces'])) {
                throw new Error("Expected the field `logicalInterfaces` to be an array in the JSON data but got " + data['logicalInterfaces']);
            }
            // validate the optional field `logicalInterfaces` (array)
            for (const item of data['logicalInterfaces']) {
                GoogleCloudBaremetalsolutionV2LogicalInterface.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['loginInfo'] && !(typeof data['loginInfo'] === 'string' || data['loginInfo'] instanceof String)) {
            throw new Error("Expected the field `loginInfo` to be a primitive type in the JSON string but got " + data['loginInfo']);
        }
        if (data['luns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['luns'])) {
                throw new Error("Expected the field `luns` to be an array in the JSON data but got " + data['luns']);
            }
            // validate the optional field `luns` (array)
            for (const item of data['luns']) {
                Lun.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['machineType'] && !(typeof data['machineType'] === 'string' || data['machineType'] instanceof String)) {
            throw new Error("Expected the field `machineType` to be a primitive type in the JSON string but got " + data['machineType']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['networkTemplate'] && !(typeof data['networkTemplate'] === 'string' || data['networkTemplate'] instanceof String)) {
            throw new Error("Expected the field `networkTemplate` to be a primitive type in the JSON string but got " + data['networkTemplate']);
        }
        if (data['networks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['networks'])) {
                throw new Error("Expected the field `networks` to be an array in the JSON data but got " + data['networks']);
            }
            // validate the optional field `networks` (array)
            for (const item of data['networks']) {
                Network.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['osImage'] && !(typeof data['osImage'] === 'string' || data['osImage'] instanceof String)) {
            throw new Error("Expected the field `osImage` to be a primitive type in the JSON string but got " + data['osImage']);
        }
        // ensure the json data is a string
        if (data['pod'] && !(typeof data['pod'] === 'string' || data['pod'] instanceof String)) {
            throw new Error("Expected the field `pod` to be a primitive type in the JSON string but got " + data['pod']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sshKeys'])) {
            throw new Error("Expected the field `sshKeys` to be an array in the JSON data but got " + data['sshKeys']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        if (data['volumes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['volumes'])) {
                throw new Error("Expected the field `volumes` to be an array in the JSON data but got " + data['volumes']);
            }
            // validate the optional field `volumes` (array)
            for (const item of data['volumes']) {
                Volume.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['workloadProfile'] && !(typeof data['workloadProfile'] === 'string' || data['workloadProfile'] instanceof String)) {
            throw new Error("Expected the field `workloadProfile` to be a primitive type in the JSON string but got " + data['workloadProfile']);
        }

        return true;
    }


}



/**
 * Output only. Create a time stamp.
 * @member {String} createTime
 */
Instance.prototype['createTime'] = undefined;

/**
 * Output only. The firmware version for the instance.
 * @member {String} firmwareVersion
 */
Instance.prototype['firmwareVersion'] = undefined;

/**
 * True if you enable hyperthreading for the server, otherwise false. The default value is false.
 * @member {Boolean} hyperthreadingEnabled
 */
Instance.prototype['hyperthreadingEnabled'] = undefined;

/**
 * Output only. An identifier for the `Instance`, generated by the backend.
 * @member {String} id
 */
Instance.prototype['id'] = undefined;

/**
 * Output only. True if the interactive serial console feature is enabled for the instance, false otherwise. The default value is false.
 * @member {Boolean} interactiveSerialConsoleEnabled
 */
Instance.prototype['interactiveSerialConsoleEnabled'] = undefined;

/**
 * Optional. Name of the KMS crypto key version used to encrypt the initial passwords. The key has to have ASYMMETRIC_DECRYPT purpose. Format is `projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}/cryptoKeyVersions/{version}`.
 * @member {String} kmsKeyVersion
 */
Instance.prototype['kmsKeyVersion'] = undefined;

/**
 * Labels as key value pairs.
 * @member {Object.<String, String>} labels
 */
Instance.prototype['labels'] = undefined;

/**
 * List of logical interfaces for the instance. The number of logical interfaces will be the same as number of hardware bond/nic on the chosen network template. For the non-multivlan configurations (for eg, existing servers) that use existing default network template (bondaa-bondaa), both the Instance.networks field and the Instance.logical_interfaces fields will be filled to ensure backward compatibility. For the others, only Instance.logical_interfaces will be filled.
 * @member {Array.<module:model/GoogleCloudBaremetalsolutionV2LogicalInterface>} logicalInterfaces
 */
Instance.prototype['logicalInterfaces'] = undefined;

/**
 * Output only. Text field about info for logging in.
 * @member {String} loginInfo
 */
Instance.prototype['loginInfo'] = undefined;

/**
 * Immutable. List of LUNs associated with this server.
 * @member {Array.<module:model/Lun>} luns
 */
Instance.prototype['luns'] = undefined;

/**
 * Immutable. The server type. [Available server types](https://cloud.google.com/bare-metal/docs/bms-planning#server_configurations)
 * @member {String} machineType
 */
Instance.prototype['machineType'] = undefined;

/**
 * Immutable. The resource name of this `Instance`. Resource names are schemeless URIs that follow the conventions in https://cloud.google.com/apis/design/resource_names. Format: `projects/{project}/locations/{location}/instances/{instance}`
 * @member {String} name
 */
Instance.prototype['name'] = undefined;

/**
 * Instance network template name. For eg, bondaa-bondaa, bondab-nic, etc. Generally, the template name follows the syntax of \"bond\" or \"nic\".
 * @member {String} networkTemplate
 */
Instance.prototype['networkTemplate'] = undefined;

/**
 * Output only. List of networks associated with this server.
 * @member {Array.<module:model/Network>} networks
 */
Instance.prototype['networks'] = undefined;

/**
 * The OS image currently installed on the server.
 * @member {String} osImage
 */
Instance.prototype['osImage'] = undefined;

/**
 * Immutable. Pod name. Pod is an independent part of infrastructure. Instance can only be connected to the assets (networks, volumes) allocated in the same pod.
 * @member {String} pod
 */
Instance.prototype['pod'] = undefined;

/**
 * Optional. List of SSH Keys used during instance provisioning.
 * @member {Array.<String>} sshKeys
 */
Instance.prototype['sshKeys'] = undefined;

/**
 * Output only. The state of the server.
 * @member {module:model/Instance.StateEnum} state
 */
Instance.prototype['state'] = undefined;

/**
 * Output only. Update a time stamp.
 * @member {String} updateTime
 */
Instance.prototype['updateTime'] = undefined;

/**
 * Input only. List of Volumes to attach to this Instance on creation. This field won't be populated in Get/List responses.
 * @member {Array.<module:model/Volume>} volumes
 */
Instance.prototype['volumes'] = undefined;

/**
 * The workload profile for the instance.
 * @member {module:model/Instance.WorkloadProfileEnum} workloadProfile
 */
Instance.prototype['workloadProfile'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Instance['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PROVISIONING"
     * @const
     */
    "PROVISIONING": "PROVISIONING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "STARTING"
     * @const
     */
    "STARTING": "STARTING",

    /**
     * value: "STOPPING"
     * @const
     */
    "STOPPING": "STOPPING",

    /**
     * value: "SHUTDOWN"
     * @const
     */
    "SHUTDOWN": "SHUTDOWN"
};


/**
 * Allowed values for the <code>workloadProfile</code> property.
 * @enum {String}
 * @readonly
 */
Instance['WorkloadProfileEnum'] = {

    /**
     * value: "WORKLOAD_PROFILE_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "WORKLOAD_PROFILE_UNSPECIFIED",

    /**
     * value: "WORKLOAD_PROFILE_GENERIC"
     * @const
     */
    "GENERIC": "WORKLOAD_PROFILE_GENERIC",

    /**
     * value: "WORKLOAD_PROFILE_HANA"
     * @const
     */
    "HANA": "WORKLOAD_PROFILE_HANA"
};



export default Instance;

