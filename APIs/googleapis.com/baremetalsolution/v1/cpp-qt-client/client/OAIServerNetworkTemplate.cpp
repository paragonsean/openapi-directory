/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerNetworkTemplate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerNetworkTemplate::OAIServerNetworkTemplate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerNetworkTemplate::OAIServerNetworkTemplate() {
    this->initializeModel();
}

OAIServerNetworkTemplate::~OAIServerNetworkTemplate() {}

void OAIServerNetworkTemplate::initializeModel() {

    m_applicable_instance_types_isSet = false;
    m_applicable_instance_types_isValid = false;

    m_logical_interfaces_isSet = false;
    m_logical_interfaces_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIServerNetworkTemplate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerNetworkTemplate::fromJsonObject(QJsonObject json) {

    m_applicable_instance_types_isValid = ::OpenAPI::fromJsonValue(m_applicable_instance_types, json[QString("applicableInstanceTypes")]);
    m_applicable_instance_types_isSet = !json[QString("applicableInstanceTypes")].isNull() && m_applicable_instance_types_isValid;

    m_logical_interfaces_isValid = ::OpenAPI::fromJsonValue(m_logical_interfaces, json[QString("logicalInterfaces")]);
    m_logical_interfaces_isSet = !json[QString("logicalInterfaces")].isNull() && m_logical_interfaces_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIServerNetworkTemplate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerNetworkTemplate::asJsonObject() const {
    QJsonObject obj;
    if (m_applicable_instance_types.size() > 0) {
        obj.insert(QString("applicableInstanceTypes"), ::OpenAPI::toJsonValue(m_applicable_instance_types));
    }
    if (m_logical_interfaces.size() > 0) {
        obj.insert(QString("logicalInterfaces"), ::OpenAPI::toJsonValue(m_logical_interfaces));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QList<QString> OAIServerNetworkTemplate::getApplicableInstanceTypes() const {
    return m_applicable_instance_types;
}
void OAIServerNetworkTemplate::setApplicableInstanceTypes(const QList<QString> &applicable_instance_types) {
    m_applicable_instance_types = applicable_instance_types;
    m_applicable_instance_types_isSet = true;
}

bool OAIServerNetworkTemplate::is_applicable_instance_types_Set() const{
    return m_applicable_instance_types_isSet;
}

bool OAIServerNetworkTemplate::is_applicable_instance_types_Valid() const{
    return m_applicable_instance_types_isValid;
}

QList<OAILogicalInterface> OAIServerNetworkTemplate::getLogicalInterfaces() const {
    return m_logical_interfaces;
}
void OAIServerNetworkTemplate::setLogicalInterfaces(const QList<OAILogicalInterface> &logical_interfaces) {
    m_logical_interfaces = logical_interfaces;
    m_logical_interfaces_isSet = true;
}

bool OAIServerNetworkTemplate::is_logical_interfaces_Set() const{
    return m_logical_interfaces_isSet;
}

bool OAIServerNetworkTemplate::is_logical_interfaces_Valid() const{
    return m_logical_interfaces_isValid;
}

QString OAIServerNetworkTemplate::getName() const {
    return m_name;
}
void OAIServerNetworkTemplate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServerNetworkTemplate::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServerNetworkTemplate::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIServerNetworkTemplate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applicable_instance_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_interfaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerNetworkTemplate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
