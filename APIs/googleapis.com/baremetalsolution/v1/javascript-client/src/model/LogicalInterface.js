/**
 * Bare Metal Solution API
 * Provides ways to manage Bare Metal Solution hardware installed in a regional extension located near a Google Cloud data center.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogicalInterface model module.
 * @module model/LogicalInterface
 * @version v1
 */
class LogicalInterface {
    /**
     * Constructs a new <code>LogicalInterface</code>.
     * Logical interface.
     * @alias module:model/LogicalInterface
     */
    constructor() { 
        
        LogicalInterface.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogicalInterface</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogicalInterface} obj Optional instance to populate.
     * @return {module:model/LogicalInterface} The populated <code>LogicalInterface</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogicalInterface();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogicalInterface</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogicalInterface</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Interface name. This is not a globally unique identifier. Name is unique only inside the ServerNetworkTemplate. This is of syntax or and forms part of the network template name.
 * @member {String} name
 */
LogicalInterface.prototype['name'] = undefined;

/**
 * If true, interface must have network connected.
 * @member {Boolean} required
 */
LogicalInterface.prototype['required'] = undefined;

/**
 * Interface type.
 * @member {module:model/LogicalInterface.TypeEnum} type
 */
LogicalInterface.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
LogicalInterface['TypeEnum'] = {

    /**
     * value: "INTERFACE_TYPE_UNSPECIFIED"
     * @const
     */
    "INTERFACE_TYPE_UNSPECIFIED": "INTERFACE_TYPE_UNSPECIFIED",

    /**
     * value: "BOND"
     * @const
     */
    "BOND": "BOND",

    /**
     * value: "NIC"
     * @const
     */
    "NIC": "NIC"
};



export default LogicalInterface;

