/*
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateDetails;
import org.openapitools.client.model.LabeledItem;
import org.openapitools.client.model.LookupDetails;
import org.openapitools.client.model.RelationshipDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details on a column in the table.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:59.633476-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColumnDescription {
  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private String dataType;

  public static final String SERIALIZED_NAME_DATE_DETAILS = "dateDetails";
  @SerializedName(SERIALIZED_NAME_DATE_DETAILS)
  private DateDetails dateDetails;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<LabeledItem> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOOKUP_DETAILS = "lookupDetails";
  @SerializedName(SERIALIZED_NAME_LOOKUP_DETAILS)
  private LookupDetails lookupDetails;

  public static final String SERIALIZED_NAME_MULTIPLE_VALUES_DISALLOWED = "multipleValuesDisallowed";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_VALUES_DISALLOWED)
  private Boolean multipleValuesDisallowed;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_READONLY = "readonly";
  @SerializedName(SERIALIZED_NAME_READONLY)
  private Boolean readonly;

  public static final String SERIALIZED_NAME_RELATIONSHIP_DETAILS = "relationshipDetails";
  @SerializedName(SERIALIZED_NAME_RELATIONSHIP_DETAILS)
  private RelationshipDetails relationshipDetails;

  public ColumnDescription() {
  }

  public ColumnDescription dataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.
   * @return dataType
   */
  @javax.annotation.Nullable
  public String getDataType() {
    return dataType;
  }

  public void setDataType(String dataType) {
    this.dataType = dataType;
  }


  public ColumnDescription dateDetails(DateDetails dateDetails) {
    this.dateDetails = dateDetails;
    return this;
  }

  /**
   * Get dateDetails
   * @return dateDetails
   */
  @javax.annotation.Nullable
  public DateDetails getDateDetails() {
    return dateDetails;
  }

  public void setDateDetails(DateDetails dateDetails) {
    this.dateDetails = dateDetails;
  }


  public ColumnDescription id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Internal id for a column.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ColumnDescription labels(List<LabeledItem> labels) {
    this.labels = labels;
    return this;
  }

  public ColumnDescription addLabelsItem(LabeledItem labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<LabeledItem> getLabels() {
    return labels;
  }

  public void setLabels(List<LabeledItem> labels) {
    this.labels = labels;
  }


  public ColumnDescription lookupDetails(LookupDetails lookupDetails) {
    this.lookupDetails = lookupDetails;
    return this;
  }

  /**
   * Get lookupDetails
   * @return lookupDetails
   */
  @javax.annotation.Nullable
  public LookupDetails getLookupDetails() {
    return lookupDetails;
  }

  public void setLookupDetails(LookupDetails lookupDetails) {
    this.lookupDetails = lookupDetails;
  }


  public ColumnDescription multipleValuesDisallowed(Boolean multipleValuesDisallowed) {
    this.multipleValuesDisallowed = multipleValuesDisallowed;
    return this;
  }

  /**
   * Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.
   * @return multipleValuesDisallowed
   */
  @javax.annotation.Nullable
  public Boolean getMultipleValuesDisallowed() {
    return multipleValuesDisallowed;
  }

  public void setMultipleValuesDisallowed(Boolean multipleValuesDisallowed) {
    this.multipleValuesDisallowed = multipleValuesDisallowed;
  }


  public ColumnDescription name(String name) {
    this.name = name;
    return this;
  }

  /**
   * column name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ColumnDescription readonly(Boolean readonly) {
    this.readonly = readonly;
    return this;
  }

  /**
   * Optional. Indicates that values for the column cannot be set by the user.
   * @return readonly
   */
  @javax.annotation.Nullable
  public Boolean getReadonly() {
    return readonly;
  }

  public void setReadonly(Boolean readonly) {
    this.readonly = readonly;
  }


  public ColumnDescription relationshipDetails(RelationshipDetails relationshipDetails) {
    this.relationshipDetails = relationshipDetails;
    return this;
  }

  /**
   * Get relationshipDetails
   * @return relationshipDetails
   */
  @javax.annotation.Nullable
  public RelationshipDetails getRelationshipDetails() {
    return relationshipDetails;
  }

  public void setRelationshipDetails(RelationshipDetails relationshipDetails) {
    this.relationshipDetails = relationshipDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnDescription columnDescription = (ColumnDescription) o;
    return Objects.equals(this.dataType, columnDescription.dataType) &&
        Objects.equals(this.dateDetails, columnDescription.dateDetails) &&
        Objects.equals(this.id, columnDescription.id) &&
        Objects.equals(this.labels, columnDescription.labels) &&
        Objects.equals(this.lookupDetails, columnDescription.lookupDetails) &&
        Objects.equals(this.multipleValuesDisallowed, columnDescription.multipleValuesDisallowed) &&
        Objects.equals(this.name, columnDescription.name) &&
        Objects.equals(this.readonly, columnDescription.readonly) &&
        Objects.equals(this.relationshipDetails, columnDescription.relationshipDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataType, dateDetails, id, labels, lookupDetails, multipleValuesDisallowed, name, readonly, relationshipDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnDescription {\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    dateDetails: ").append(toIndentedString(dateDetails)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lookupDetails: ").append(toIndentedString(lookupDetails)).append("\n");
    sb.append("    multipleValuesDisallowed: ").append(toIndentedString(multipleValuesDisallowed)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readonly: ").append(toIndentedString(readonly)).append("\n");
    sb.append("    relationshipDetails: ").append(toIndentedString(relationshipDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataType");
    openapiFields.add("dateDetails");
    openapiFields.add("id");
    openapiFields.add("labels");
    openapiFields.add("lookupDetails");
    openapiFields.add("multipleValuesDisallowed");
    openapiFields.add("name");
    openapiFields.add("readonly");
    openapiFields.add("relationshipDetails");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColumnDescription
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnDescription.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnDescription is not found in the empty JSON string", ColumnDescription.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColumnDescription.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnDescription` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) && !jsonObj.get("dataType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataType").toString()));
      }
      // validate the optional field `dateDetails`
      if (jsonObj.get("dateDetails") != null && !jsonObj.get("dateDetails").isJsonNull()) {
        DateDetails.validateJsonElement(jsonObj.get("dateDetails"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull()) {
        JsonArray jsonArraylabels = jsonObj.getAsJsonArray("labels");
        if (jsonArraylabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("labels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
          }

          // validate the optional field `labels` (array)
          for (int i = 0; i < jsonArraylabels.size(); i++) {
            LabeledItem.validateJsonElement(jsonArraylabels.get(i));
          };
        }
      }
      // validate the optional field `lookupDetails`
      if (jsonObj.get("lookupDetails") != null && !jsonObj.get("lookupDetails").isJsonNull()) {
        LookupDetails.validateJsonElement(jsonObj.get("lookupDetails"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `relationshipDetails`
      if (jsonObj.get("relationshipDetails") != null && !jsonObj.get("relationshipDetails").isJsonNull()) {
        RelationshipDetails.validateJsonElement(jsonObj.get("relationshipDetails"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnDescription.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnDescription' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnDescription> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnDescription.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnDescription>() {
           @Override
           public void write(JsonWriter out, ColumnDescription value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnDescription read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColumnDescription given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColumnDescription
   * @throws IOException if the JSON string is invalid with respect to ColumnDescription
   */
  public static ColumnDescription fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnDescription.class);
  }

  /**
   * Convert an instance of ColumnDescription to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

