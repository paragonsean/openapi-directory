/*
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchCreateRowsRequest;
import org.openapitools.client.model.BatchCreateRowsResponse;
import org.openapitools.client.model.BatchDeleteRowsRequest;
import org.openapitools.client.model.BatchUpdateRowsRequest;
import org.openapitools.client.model.BatchUpdateRowsResponse;
import org.openapitools.client.model.ListRowsResponse;
import org.openapitools.client.model.ListTablesResponse;
import org.openapitools.client.model.Row;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TablesApi
 */
@Disabled
public class TablesApiTest {

    private final TablesApi api = new TablesApi();

    /**
     * Lists tables for the user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListTablesResponse response = api.area120tablesTablesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates multiple rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsBatchCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchCreateRowsRequest batchCreateRowsRequest = null;
        BatchCreateRowsResponse response = api.area120tablesTablesRowsBatchCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchCreateRowsRequest);
        // TODO: test validations
    }

    /**
     * Deletes multiple rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsBatchDeleteTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchDeleteRowsRequest batchDeleteRowsRequest = null;
        Object response = api.area120tablesTablesRowsBatchDelete(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchDeleteRowsRequest);
        // TODO: test validations
    }

    /**
     * Updates multiple rows.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsBatchUpdateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateRowsRequest batchUpdateRowsRequest = null;
        BatchUpdateRowsResponse response = api.area120tablesTablesRowsBatchUpdate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateRowsRequest);
        // TODO: test validations
    }

    /**
     * Creates a row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Row row = null;
        Row response = api.area120tablesTablesRowsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view, row);
        // TODO: test validations
    }

    /**
     * Deletes a row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.area120tablesTablesRowsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists rows in a table. Returns NOT_FOUND if the table does not exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListRowsResponse response = api.area120tablesTablesRowsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Updates a row.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void area120tablesTablesRowsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        String view = null;
        Row row = null;
        Row response = api.area120tablesTablesRowsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, view, row);
        // TODO: test validations
    }

}
