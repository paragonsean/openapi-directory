# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_details import DateDetails
from openapi_server.models.labeled_item import LabeledItem
from openapi_server.models.lookup_details import LookupDetails
from openapi_server.models.relationship_details import RelationshipDetails
from openapi_server import util


class ColumnDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_type: str=None, date_details: DateDetails=None, id: str=None, labels: List[LabeledItem]=None, lookup_details: LookupDetails=None, multiple_values_disallowed: bool=None, name: str=None, readonly: bool=None, relationship_details: RelationshipDetails=None):
        """ColumnDescription - a model defined in OpenAPI

        :param data_type: The data_type of this ColumnDescription.
        :param date_details: The date_details of this ColumnDescription.
        :param id: The id of this ColumnDescription.
        :param labels: The labels of this ColumnDescription.
        :param lookup_details: The lookup_details of this ColumnDescription.
        :param multiple_values_disallowed: The multiple_values_disallowed of this ColumnDescription.
        :param name: The name of this ColumnDescription.
        :param readonly: The readonly of this ColumnDescription.
        :param relationship_details: The relationship_details of this ColumnDescription.
        """
        self.openapi_types = {
            'data_type': str,
            'date_details': DateDetails,
            'id': str,
            'labels': List[LabeledItem],
            'lookup_details': LookupDetails,
            'multiple_values_disallowed': bool,
            'name': str,
            'readonly': bool,
            'relationship_details': RelationshipDetails
        }

        self.attribute_map = {
            'data_type': 'dataType',
            'date_details': 'dateDetails',
            'id': 'id',
            'labels': 'labels',
            'lookup_details': 'lookupDetails',
            'multiple_values_disallowed': 'multipleValuesDisallowed',
            'name': 'name',
            'readonly': 'readonly',
            'relationship_details': 'relationshipDetails'
        }

        self._data_type = data_type
        self._date_details = date_details
        self._id = id
        self._labels = labels
        self._lookup_details = lookup_details
        self._multiple_values_disallowed = multiple_values_disallowed
        self._name = name
        self._readonly = readonly
        self._relationship_details = relationship_details

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColumnDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColumnDescription of this ColumnDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_type(self):
        """Gets the data_type of this ColumnDescription.

        Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.

        :return: The data_type of this ColumnDescription.
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ColumnDescription.

        Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.

        :param data_type: The data_type of this ColumnDescription.
        :type data_type: str
        """

        self._data_type = data_type

    @property
    def date_details(self):
        """Gets the date_details of this ColumnDescription.


        :return: The date_details of this ColumnDescription.
        :rtype: DateDetails
        """
        return self._date_details

    @date_details.setter
    def date_details(self, date_details):
        """Sets the date_details of this ColumnDescription.


        :param date_details: The date_details of this ColumnDescription.
        :type date_details: DateDetails
        """

        self._date_details = date_details

    @property
    def id(self):
        """Gets the id of this ColumnDescription.

        Internal id for a column.

        :return: The id of this ColumnDescription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ColumnDescription.

        Internal id for a column.

        :param id: The id of this ColumnDescription.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this ColumnDescription.

        Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.

        :return: The labels of this ColumnDescription.
        :rtype: List[LabeledItem]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ColumnDescription.

        Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.

        :param labels: The labels of this ColumnDescription.
        :type labels: List[LabeledItem]
        """

        self._labels = labels

    @property
    def lookup_details(self):
        """Gets the lookup_details of this ColumnDescription.


        :return: The lookup_details of this ColumnDescription.
        :rtype: LookupDetails
        """
        return self._lookup_details

    @lookup_details.setter
    def lookup_details(self, lookup_details):
        """Sets the lookup_details of this ColumnDescription.


        :param lookup_details: The lookup_details of this ColumnDescription.
        :type lookup_details: LookupDetails
        """

        self._lookup_details = lookup_details

    @property
    def multiple_values_disallowed(self):
        """Gets the multiple_values_disallowed of this ColumnDescription.

        Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.

        :return: The multiple_values_disallowed of this ColumnDescription.
        :rtype: bool
        """
        return self._multiple_values_disallowed

    @multiple_values_disallowed.setter
    def multiple_values_disallowed(self, multiple_values_disallowed):
        """Sets the multiple_values_disallowed of this ColumnDescription.

        Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.

        :param multiple_values_disallowed: The multiple_values_disallowed of this ColumnDescription.
        :type multiple_values_disallowed: bool
        """

        self._multiple_values_disallowed = multiple_values_disallowed

    @property
    def name(self):
        """Gets the name of this ColumnDescription.

        column name

        :return: The name of this ColumnDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnDescription.

        column name

        :param name: The name of this ColumnDescription.
        :type name: str
        """

        self._name = name

    @property
    def readonly(self):
        """Gets the readonly of this ColumnDescription.

        Optional. Indicates that values for the column cannot be set by the user.

        :return: The readonly of this ColumnDescription.
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this ColumnDescription.

        Optional. Indicates that values for the column cannot be set by the user.

        :param readonly: The readonly of this ColumnDescription.
        :type readonly: bool
        """

        self._readonly = readonly

    @property
    def relationship_details(self):
        """Gets the relationship_details of this ColumnDescription.


        :return: The relationship_details of this ColumnDescription.
        :rtype: RelationshipDetails
        """
        return self._relationship_details

    @relationship_details.setter
    def relationship_details(self, relationship_details):
        """Sets the relationship_details of this ColumnDescription.


        :param relationship_details: The relationship_details of this ColumnDescription.
        :type relationship_details: RelationshipDetails
        """

        self._relationship_details = relationship_details
