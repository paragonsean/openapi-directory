# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.row import Row
from openapi_server import util


class CreateRowRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent: str=None, row: Row=None, view: str=None):
        """CreateRowRequest - a model defined in OpenAPI

        :param parent: The parent of this CreateRowRequest.
        :param row: The row of this CreateRowRequest.
        :param view: The view of this CreateRowRequest.
        """
        self.openapi_types = {
            'parent': str,
            'row': Row,
            'view': str
        }

        self.attribute_map = {
            'parent': 'parent',
            'row': 'row',
            'view': 'view'
        }

        self._parent = parent
        self._row = row
        self._view = view

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRowRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateRowRequest of this CreateRowRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent(self):
        """Gets the parent of this CreateRowRequest.

        Required. The parent table where this row will be created. Format: tables/{table}

        :return: The parent of this CreateRowRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this CreateRowRequest.

        Required. The parent table where this row will be created. Format: tables/{table}

        :param parent: The parent of this CreateRowRequest.
        :type parent: str
        """

        self._parent = parent

    @property
    def row(self):
        """Gets the row of this CreateRowRequest.


        :return: The row of this CreateRowRequest.
        :rtype: Row
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this CreateRowRequest.


        :param row: The row of this CreateRowRequest.
        :type row: Row
        """

        self._row = row

    @property
    def view(self):
        """Gets the view of this CreateRowRequest.

        Optional. Column key to use for values in the row. Defaults to user entered name.

        :return: The view of this CreateRowRequest.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this CreateRowRequest.

        Optional. Column key to use for values in the row. Defaults to user entered name.

        :param view: The view of this CreateRowRequest.
        :type view: str
        """
        allowed_values = ["VIEW_UNSPECIFIED", "COLUMN_ID_VIEW"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view
