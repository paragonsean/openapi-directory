/**
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILookupDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILookupDetails::OAILookupDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILookupDetails::OAILookupDetails() {
    this->initializeModel();
}

OAILookupDetails::~OAILookupDetails() {}

void OAILookupDetails::initializeModel() {

    m_relationship_column_isSet = false;
    m_relationship_column_isValid = false;

    m_relationship_column_id_isSet = false;
    m_relationship_column_id_isValid = false;
}

void OAILookupDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILookupDetails::fromJsonObject(QJsonObject json) {

    m_relationship_column_isValid = ::OpenAPI::fromJsonValue(m_relationship_column, json[QString("relationshipColumn")]);
    m_relationship_column_isSet = !json[QString("relationshipColumn")].isNull() && m_relationship_column_isValid;

    m_relationship_column_id_isValid = ::OpenAPI::fromJsonValue(m_relationship_column_id, json[QString("relationshipColumnId")]);
    m_relationship_column_id_isSet = !json[QString("relationshipColumnId")].isNull() && m_relationship_column_id_isValid;
}

QString OAILookupDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILookupDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_relationship_column_isSet) {
        obj.insert(QString("relationshipColumn"), ::OpenAPI::toJsonValue(m_relationship_column));
    }
    if (m_relationship_column_id_isSet) {
        obj.insert(QString("relationshipColumnId"), ::OpenAPI::toJsonValue(m_relationship_column_id));
    }
    return obj;
}

QString OAILookupDetails::getRelationshipColumn() const {
    return m_relationship_column;
}
void OAILookupDetails::setRelationshipColumn(const QString &relationship_column) {
    m_relationship_column = relationship_column;
    m_relationship_column_isSet = true;
}

bool OAILookupDetails::is_relationship_column_Set() const{
    return m_relationship_column_isSet;
}

bool OAILookupDetails::is_relationship_column_Valid() const{
    return m_relationship_column_isValid;
}

QString OAILookupDetails::getRelationshipColumnId() const {
    return m_relationship_column_id;
}
void OAILookupDetails::setRelationshipColumnId(const QString &relationship_column_id) {
    m_relationship_column_id = relationship_column_id;
    m_relationship_column_id_isSet = true;
}

bool OAILookupDetails::is_relationship_column_id_Set() const{
    return m_relationship_column_id_isSet;
}

bool OAILookupDetails::is_relationship_column_id_Valid() const{
    return m_relationship_column_id_isValid;
}

bool OAILookupDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_relationship_column_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_column_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILookupDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
