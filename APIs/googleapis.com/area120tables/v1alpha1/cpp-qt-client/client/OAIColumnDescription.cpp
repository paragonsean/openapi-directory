/**
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnDescription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnDescription::OAIColumnDescription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnDescription::OAIColumnDescription() {
    this->initializeModel();
}

OAIColumnDescription::~OAIColumnDescription() {}

void OAIColumnDescription::initializeModel() {

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_date_details_isSet = false;
    m_date_details_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_lookup_details_isSet = false;
    m_lookup_details_isValid = false;

    m_multiple_values_disallowed_isSet = false;
    m_multiple_values_disallowed_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_readonly_isSet = false;
    m_readonly_isValid = false;

    m_relationship_details_isSet = false;
    m_relationship_details_isValid = false;
}

void OAIColumnDescription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnDescription::fromJsonObject(QJsonObject json) {

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_date_details_isValid = ::OpenAPI::fromJsonValue(m_date_details, json[QString("dateDetails")]);
    m_date_details_isSet = !json[QString("dateDetails")].isNull() && m_date_details_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_lookup_details_isValid = ::OpenAPI::fromJsonValue(m_lookup_details, json[QString("lookupDetails")]);
    m_lookup_details_isSet = !json[QString("lookupDetails")].isNull() && m_lookup_details_isValid;

    m_multiple_values_disallowed_isValid = ::OpenAPI::fromJsonValue(m_multiple_values_disallowed, json[QString("multipleValuesDisallowed")]);
    m_multiple_values_disallowed_isSet = !json[QString("multipleValuesDisallowed")].isNull() && m_multiple_values_disallowed_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_readonly_isValid = ::OpenAPI::fromJsonValue(m_readonly, json[QString("readonly")]);
    m_readonly_isSet = !json[QString("readonly")].isNull() && m_readonly_isValid;

    m_relationship_details_isValid = ::OpenAPI::fromJsonValue(m_relationship_details, json[QString("relationshipDetails")]);
    m_relationship_details_isSet = !json[QString("relationshipDetails")].isNull() && m_relationship_details_isValid;
}

QString OAIColumnDescription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnDescription::asJsonObject() const {
    QJsonObject obj;
    if (m_data_type_isSet) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_date_details.isSet()) {
        obj.insert(QString("dateDetails"), ::OpenAPI::toJsonValue(m_date_details));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_lookup_details.isSet()) {
        obj.insert(QString("lookupDetails"), ::OpenAPI::toJsonValue(m_lookup_details));
    }
    if (m_multiple_values_disallowed_isSet) {
        obj.insert(QString("multipleValuesDisallowed"), ::OpenAPI::toJsonValue(m_multiple_values_disallowed));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_readonly_isSet) {
        obj.insert(QString("readonly"), ::OpenAPI::toJsonValue(m_readonly));
    }
    if (m_relationship_details.isSet()) {
        obj.insert(QString("relationshipDetails"), ::OpenAPI::toJsonValue(m_relationship_details));
    }
    return obj;
}

QString OAIColumnDescription::getDataType() const {
    return m_data_type;
}
void OAIColumnDescription::setDataType(const QString &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIColumnDescription::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIColumnDescription::is_data_type_Valid() const{
    return m_data_type_isValid;
}

OAIDateDetails OAIColumnDescription::getDateDetails() const {
    return m_date_details;
}
void OAIColumnDescription::setDateDetails(const OAIDateDetails &date_details) {
    m_date_details = date_details;
    m_date_details_isSet = true;
}

bool OAIColumnDescription::is_date_details_Set() const{
    return m_date_details_isSet;
}

bool OAIColumnDescription::is_date_details_Valid() const{
    return m_date_details_isValid;
}

QString OAIColumnDescription::getId() const {
    return m_id;
}
void OAIColumnDescription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIColumnDescription::is_id_Set() const{
    return m_id_isSet;
}

bool OAIColumnDescription::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAILabeledItem> OAIColumnDescription::getLabels() const {
    return m_labels;
}
void OAIColumnDescription::setLabels(const QList<OAILabeledItem> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIColumnDescription::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIColumnDescription::is_labels_Valid() const{
    return m_labels_isValid;
}

OAILookupDetails OAIColumnDescription::getLookupDetails() const {
    return m_lookup_details;
}
void OAIColumnDescription::setLookupDetails(const OAILookupDetails &lookup_details) {
    m_lookup_details = lookup_details;
    m_lookup_details_isSet = true;
}

bool OAIColumnDescription::is_lookup_details_Set() const{
    return m_lookup_details_isSet;
}

bool OAIColumnDescription::is_lookup_details_Valid() const{
    return m_lookup_details_isValid;
}

bool OAIColumnDescription::isMultipleValuesDisallowed() const {
    return m_multiple_values_disallowed;
}
void OAIColumnDescription::setMultipleValuesDisallowed(const bool &multiple_values_disallowed) {
    m_multiple_values_disallowed = multiple_values_disallowed;
    m_multiple_values_disallowed_isSet = true;
}

bool OAIColumnDescription::is_multiple_values_disallowed_Set() const{
    return m_multiple_values_disallowed_isSet;
}

bool OAIColumnDescription::is_multiple_values_disallowed_Valid() const{
    return m_multiple_values_disallowed_isValid;
}

QString OAIColumnDescription::getName() const {
    return m_name;
}
void OAIColumnDescription::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIColumnDescription::is_name_Set() const{
    return m_name_isSet;
}

bool OAIColumnDescription::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIColumnDescription::isReadonly() const {
    return m_readonly;
}
void OAIColumnDescription::setReadonly(const bool &readonly) {
    m_readonly = readonly;
    m_readonly_isSet = true;
}

bool OAIColumnDescription::is_readonly_Set() const{
    return m_readonly_isSet;
}

bool OAIColumnDescription::is_readonly_Valid() const{
    return m_readonly_isValid;
}

OAIRelationshipDetails OAIColumnDescription::getRelationshipDetails() const {
    return m_relationship_details;
}
void OAIColumnDescription::setRelationshipDetails(const OAIRelationshipDetails &relationship_details) {
    m_relationship_details = relationship_details;
    m_relationship_details_isSet = true;
}

bool OAIColumnDescription::is_relationship_details_Set() const{
    return m_relationship_details_isSet;
}

bool OAIColumnDescription::is_relationship_details_Valid() const{
    return m_relationship_details_isValid;
}

bool OAIColumnDescription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lookup_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_values_disallowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_readonly_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relationship_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnDescription::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
