/**
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITable.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITable::OAITable(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITable::OAITable() {
    this->initializeModel();
}

OAITable::~OAITable() {}

void OAITable::initializeModel() {

    m_columns_isSet = false;
    m_columns_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_saved_views_isSet = false;
    m_saved_views_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAITable::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITable::fromJsonObject(QJsonObject json) {

    m_columns_isValid = ::OpenAPI::fromJsonValue(m_columns, json[QString("columns")]);
    m_columns_isSet = !json[QString("columns")].isNull() && m_columns_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_saved_views_isValid = ::OpenAPI::fromJsonValue(m_saved_views, json[QString("savedViews")]);
    m_saved_views_isSet = !json[QString("savedViews")].isNull() && m_saved_views_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAITable::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITable::asJsonObject() const {
    QJsonObject obj;
    if (m_columns.size() > 0) {
        obj.insert(QString("columns"), ::OpenAPI::toJsonValue(m_columns));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_saved_views.size() > 0) {
        obj.insert(QString("savedViews"), ::OpenAPI::toJsonValue(m_saved_views));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIColumnDescription> OAITable::getColumns() const {
    return m_columns;
}
void OAITable::setColumns(const QList<OAIColumnDescription> &columns) {
    m_columns = columns;
    m_columns_isSet = true;
}

bool OAITable::is_columns_Set() const{
    return m_columns_isSet;
}

bool OAITable::is_columns_Valid() const{
    return m_columns_isValid;
}

QString OAITable::getCreateTime() const {
    return m_create_time;
}
void OAITable::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAITable::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAITable::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAITable::getDisplayName() const {
    return m_display_name;
}
void OAITable::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITable::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITable::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITable::getName() const {
    return m_name;
}
void OAITable::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITable::is_name_Set() const{
    return m_name_isSet;
}

bool OAITable::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAISavedView> OAITable::getSavedViews() const {
    return m_saved_views;
}
void OAITable::setSavedViews(const QList<OAISavedView> &saved_views) {
    m_saved_views = saved_views;
    m_saved_views_isSet = true;
}

bool OAITable::is_saved_views_Set() const{
    return m_saved_views_isSet;
}

bool OAITable::is_saved_views_Valid() const{
    return m_saved_views_isValid;
}

QString OAITable::getTimeZone() const {
    return m_time_zone;
}
void OAITable::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAITable::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAITable::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAITable::getUpdateTime() const {
    return m_update_time;
}
void OAITable::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAITable::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAITable::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAITable::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_saved_views.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITable::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
