/**
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LookupDetails model module.
 * @module model/LookupDetails
 * @version v1alpha1
 */
class LookupDetails {
    /**
     * Constructs a new <code>LookupDetails</code>.
     * Details about a lookup column whose value comes from the associated relationship.
     * @alias module:model/LookupDetails
     */
    constructor() { 
        
        LookupDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LookupDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LookupDetails} obj Optional instance to populate.
     * @return {module:model/LookupDetails} The populated <code>LookupDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LookupDetails();

            if (data.hasOwnProperty('relationshipColumn')) {
                obj['relationshipColumn'] = ApiClient.convertToType(data['relationshipColumn'], 'String');
            }
            if (data.hasOwnProperty('relationshipColumnId')) {
                obj['relationshipColumnId'] = ApiClient.convertToType(data['relationshipColumnId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LookupDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LookupDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['relationshipColumn'] && !(typeof data['relationshipColumn'] === 'string' || data['relationshipColumn'] instanceof String)) {
            throw new Error("Expected the field `relationshipColumn` to be a primitive type in the JSON string but got " + data['relationshipColumn']);
        }
        // ensure the json data is a string
        if (data['relationshipColumnId'] && !(typeof data['relationshipColumnId'] === 'string' || data['relationshipColumnId'] instanceof String)) {
            throw new Error("Expected the field `relationshipColumnId` to be a primitive type in the JSON string but got " + data['relationshipColumnId']);
        }

        return true;
    }


}



/**
 * The name of the relationship column associated with the lookup.
 * @member {String} relationshipColumn
 */
LookupDetails.prototype['relationshipColumn'] = undefined;

/**
 * The id of the relationship column.
 * @member {String} relationshipColumnId
 */
LookupDetails.prototype['relationshipColumnId'] = undefined;






export default LookupDetails;

