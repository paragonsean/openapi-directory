/**
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnDescription from './ColumnDescription';
import SavedView from './SavedView';

/**
 * The Table model module.
 * @module model/Table
 * @version v1alpha1
 */
class Table {
    /**
     * Constructs a new <code>Table</code>.
     * A single table. NextId: 8
     * @alias module:model/Table
     */
    constructor() { 
        
        Table.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Table</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Table} obj Optional instance to populate.
     * @return {module:model/Table} The populated <code>Table</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Table();

            if (data.hasOwnProperty('columns')) {
                obj['columns'] = ApiClient.convertToType(data['columns'], [ColumnDescription]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('savedViews')) {
                obj['savedViews'] = ApiClient.convertToType(data['savedViews'], [SavedView]);
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Table</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Table</code>.
     */
    static validateJSON(data) {
        if (data['columns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['columns'])) {
                throw new Error("Expected the field `columns` to be an array in the JSON data but got " + data['columns']);
            }
            // validate the optional field `columns` (array)
            for (const item of data['columns']) {
                ColumnDescription.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['savedViews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['savedViews'])) {
                throw new Error("Expected the field `savedViews` to be an array in the JSON data but got " + data['savedViews']);
            }
            // validate the optional field `savedViews` (array)
            for (const item of data['savedViews']) {
                SavedView.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * List of columns in this table. Order of columns matches the display order.
 * @member {Array.<module:model/ColumnDescription>} columns
 */
Table.prototype['columns'] = undefined;

/**
 * Time when the table was created.
 * @member {String} createTime
 */
Table.prototype['createTime'] = undefined;

/**
 * The human readable title of the table.
 * @member {String} displayName
 */
Table.prototype['displayName'] = undefined;

/**
 * The resource name of the table. Table names have the form `tables/{table}`.
 * @member {String} name
 */
Table.prototype['name'] = undefined;

/**
 * Saved views for this table.
 * @member {Array.<module:model/SavedView>} savedViews
 */
Table.prototype['savedViews'] = undefined;

/**
 * The time zone of the table. IANA Time Zone Database time zone, e.g. \"America/New_York\".
 * @member {String} timeZone
 */
Table.prototype['timeZone'] = undefined;

/**
 * Time when the table was last updated excluding updates to individual rows
 * @member {String} updateTime
 */
Table.prototype['updateTime'] = undefined;






export default Table;

