/**
 * Area120 Tables API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DateDetails from './DateDetails';
import LabeledItem from './LabeledItem';
import LookupDetails from './LookupDetails';
import RelationshipDetails from './RelationshipDetails';

/**
 * The ColumnDescription model module.
 * @module model/ColumnDescription
 * @version v1alpha1
 */
class ColumnDescription {
    /**
     * Constructs a new <code>ColumnDescription</code>.
     * Details on a column in the table.
     * @alias module:model/ColumnDescription
     */
    constructor() { 
        
        ColumnDescription.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColumnDescription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColumnDescription} obj Optional instance to populate.
     * @return {module:model/ColumnDescription} The populated <code>ColumnDescription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnDescription();

            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = ApiClient.convertToType(data['dataType'], 'String');
            }
            if (data.hasOwnProperty('dateDetails')) {
                obj['dateDetails'] = DateDetails.constructFromObject(data['dateDetails']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], [LabeledItem]);
            }
            if (data.hasOwnProperty('lookupDetails')) {
                obj['lookupDetails'] = LookupDetails.constructFromObject(data['lookupDetails']);
            }
            if (data.hasOwnProperty('multipleValuesDisallowed')) {
                obj['multipleValuesDisallowed'] = ApiClient.convertToType(data['multipleValuesDisallowed'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('readonly')) {
                obj['readonly'] = ApiClient.convertToType(data['readonly'], 'Boolean');
            }
            if (data.hasOwnProperty('relationshipDetails')) {
                obj['relationshipDetails'] = RelationshipDetails.constructFromObject(data['relationshipDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnDescription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnDescription</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataType'] && !(typeof data['dataType'] === 'string' || data['dataType'] instanceof String)) {
            throw new Error("Expected the field `dataType` to be a primitive type in the JSON string but got " + data['dataType']);
        }
        // validate the optional field `dateDetails`
        if (data['dateDetails']) { // data not null
          DateDetails.validateJSON(data['dateDetails']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['labels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labels'])) {
                throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
            }
            // validate the optional field `labels` (array)
            for (const item of data['labels']) {
                LabeledItem.validateJSON(item);
            };
        }
        // validate the optional field `lookupDetails`
        if (data['lookupDetails']) { // data not null
          LookupDetails.validateJSON(data['lookupDetails']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `relationshipDetails`
        if (data['relationshipDetails']) { // data not null
          RelationshipDetails.validateJSON(data['relationshipDetails']);
        }

        return true;
    }


}



/**
 * Data type of the column Supported types are auto_id, boolean, boolean_list, creator, create_timestamp, date, dropdown, location, integer, integer_list, number, number_list, person, person_list, tags, check_list, text, text_list, update_timestamp, updater, relationship, file_attachment_list. These types directly map to the column types supported on Tables website.
 * @member {String} dataType
 */
ColumnDescription.prototype['dataType'] = undefined;

/**
 * @member {module:model/DateDetails} dateDetails
 */
ColumnDescription.prototype['dateDetails'] = undefined;

/**
 * Internal id for a column.
 * @member {String} id
 */
ColumnDescription.prototype['id'] = undefined;

/**
 * Optional. Range of labeled values for the column. Some columns like tags and drop-downs limit the values to a set of possible values. We return the range of values in such cases to help clients implement better user data validation.
 * @member {Array.<module:model/LabeledItem>} labels
 */
ColumnDescription.prototype['labels'] = undefined;

/**
 * @member {module:model/LookupDetails} lookupDetails
 */
ColumnDescription.prototype['lookupDetails'] = undefined;

/**
 * Optional. Indicates whether or not multiple values are allowed for array types where such a restriction is possible.
 * @member {Boolean} multipleValuesDisallowed
 */
ColumnDescription.prototype['multipleValuesDisallowed'] = undefined;

/**
 * column name
 * @member {String} name
 */
ColumnDescription.prototype['name'] = undefined;

/**
 * Optional. Indicates that values for the column cannot be set by the user.
 * @member {Boolean} readonly
 */
ColumnDescription.prototype['readonly'] = undefined;

/**
 * @member {module:model/RelationshipDetails} relationshipDetails
 */
ColumnDescription.prototype['relationshipDetails'] = undefined;






export default ColumnDescription;

