/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIBatchPredictOutputConfig.h
 *
 * Output configuration for BatchPredict Action. As destination the gcs_destination must be set unless specified otherwise for a domain. If gcs_destination is set then in the given directory a new directory is created. Its name will be \&quot;prediction--\&quot;, where timestamp is in YYYY-MM-DDThh:mm:ss.sssZ ISO-8601 format. The contents of it depends on the ML problem the predictions are made for. * For Image Classification: In the created directory files &#x60;image_classification_1.jsonl&#x60;, &#x60;image_classification_2.jsonl&#x60;,...,&#x60;image_classification_N.jsonl&#x60; will be created, where N may be 1, and depends on the total number of the successfully predicted images and annotations. A single image will be listed only once with all its annotations, and its annotations will never be split across files. Each .JSONL file will contain, per line, a JSON representation of a proto that wraps image&#39;s \&quot;ID\&quot; : \&quot;\&quot; followed by a list of zero or more AnnotationPayload protos (called annotations), which have classification detail populated. If prediction for any image failed (partially or completely), then an additional &#x60;errors_1.jsonl&#x60;, &#x60;errors_2.jsonl&#x60;,..., &#x60;errors_N.jsonl&#x60; files will be created (N depends on total number of failed predictions). These files will have a JSON representation of a proto that wraps the same \&quot;ID\&quot; : \&quot;\&quot; but here followed by exactly one [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) containing only &#x60;code&#x60; and &#x60;message&#x60;fields. * For Image Object Detection: In the created directory files &#x60;image_object_detection_1.jsonl&#x60;, &#x60;image_object_detection_2.jsonl&#x60;,...,&#x60;image_object_detection_N.jsonl&#x60; will be created, where N may be 1, and depends on the total number of the successfully predicted images and annotations. Each .JSONL file will contain, per line, a JSON representation of a proto that wraps image&#39;s \&quot;ID\&quot; : \&quot;\&quot; followed by a list of zero or more AnnotationPayload protos (called annotations), which have image_object_detection detail populated. A single image will be listed only once with all its annotations, and its annotations will never be split across files. If prediction for any image failed (partially or completely), then additional &#x60;errors_1.jsonl&#x60;, &#x60;errors_2.jsonl&#x60;,..., &#x60;errors_N.jsonl&#x60; files will be created (N depends on total number of failed predictions). These files will have a JSON representation of a proto that wraps the same \&quot;ID\&quot; : \&quot;\&quot; but here followed by exactly one [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) containing only &#x60;code&#x60; and &#x60;message&#x60;fields. * For Video Classification: In the created directory a video_classification.csv file, and a .JSON file per each video classification requested in the input (i.e. each line in given CSV(s)), will be created. The format of video_classification.csv is: GCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END,JSON_FILE_NAME,STATUS where: GCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END &#x3D; matches 1 to 1 the prediction input lines (i.e. video_classification.csv has precisely the same number of lines as the prediction input had.) JSON_FILE_NAME &#x3D; Name of .JSON file in the output directory, which contains prediction responses for the video time segment. STATUS &#x3D; \&quot;OK\&quot; if prediction completed successfully, or an error code with message otherwise. If STATUS is not \&quot;OK\&quot; then the .JSON file for that line may not exist or be empty. Each .JSON file, assuming STATUS is \&quot;OK\&quot;, will contain a list of AnnotationPayload protos in JSON format, which are the predictions for the video time segment the file is assigned to in the video_classification.csv. All AnnotationPayload protos will have video_classification field set, and will be sorted by video_classification.type field (note that the returned types are governed by &#x60;classifaction_types&#x60; parameter in PredictService.BatchPredictRequest.params). * For Video Object Tracking: In the created directory a video_object_tracking.csv file will be created, and multiple files video_object_trackinng_1.json, video_object_trackinng_2.json,..., video_object_trackinng_N.json, where N is the number of requests in the input (i.e. the number of lines in given CSV(s)). The format of video_object_tracking.csv is: GCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END,JSON_FILE_NAME,STATUS where: GCS_FILE_PATH,TIME_SEGMENT_START,TIME_SEGMENT_END &#x3D; matches 1 to 1 the prediction input lines (i.e. video_object_tracking.csv has precisely the same number of lines as the prediction input had.) JSON_FILE_NAME &#x3D; Name of .JSON file in the output directory, which contains prediction responses for the video time segment. STATUS &#x3D; \&quot;OK\&quot; if prediction completed successfully, or an error code with message otherwise. If STATUS is not \&quot;OK\&quot; then the .JSON file for that line may not exist or be empty. Each .JSON file, assuming STATUS is \&quot;OK\&quot;, will contain a list of AnnotationPayload protos in JSON format, which are the predictions for each frame of the video time segment the file is assigned to in video_object_tracking.csv. All AnnotationPayload protos will have video_object_tracking field set. * For Text Classification: In the created directory files &#x60;text_classification_1.jsonl&#x60;, &#x60;text_classification_2.jsonl&#x60;,...,&#x60;text_classification_N.jsonl&#x60; will be created, where N may be 1, and depends on the total number of inputs and annotations found. Each .JSONL file will contain, per line, a JSON representation of a proto that wraps input text snippet or input text file and a list of zero or more AnnotationPayload protos (called annotations), which have classification detail populated. A single text snippet or file will be listed only once with all its annotations, and its annotations will never be split across files. If prediction for any text snippet or file failed (partially or completely), then additional &#x60;errors_1.jsonl&#x60;, &#x60;errors_2.jsonl&#x60;,..., &#x60;errors_N.jsonl&#x60; files will be created (N depends on total number of failed predictions). These files will have a JSON representation of a proto that wraps input text snippet or input text file followed by exactly one [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) containing only &#x60;code&#x60; and &#x60;message&#x60;. * For Text Sentiment: In the created directory files &#x60;text_sentiment_1.jsonl&#x60;, &#x60;text_sentiment_2.jsonl&#x60;,...,&#x60;text_sentiment_N.jsonl&#x60; will be created, where N may be 1, and depends on the total number of inputs and annotations found. Each .JSONL file will contain, per line, a JSON representation of a proto that wraps input text snippet or input text file and a list of zero or more AnnotationPayload protos (called annotations), which have text_sentiment detail populated. A single text snippet or file will be listed only once with all its annotations, and its annotations will never be split across files. If prediction for any text snippet or file failed (partially or completely), then additional &#x60;errors_1.jsonl&#x60;, &#x60;errors_2.jsonl&#x60;,..., &#x60;errors_N.jsonl&#x60; files will be created (N depends on total number of failed predictions). These files will have a JSON representation of a proto that wraps input text snippet or input text file followed by exactly one [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) containing only &#x60;code&#x60; and &#x60;message&#x60;. * For Text Extraction: In the created directory files &#x60;text_extraction_1.jsonl&#x60;, &#x60;text_extraction_2.jsonl&#x60;,...,&#x60;text_extraction_N.jsonl&#x60; will be created, where N may be 1, and depends on the total number of inputs and annotations found. The contents of these .JSONL file(s) depend on whether the input used inline text, or documents. If input was inline, then each .JSONL file will contain, per line, a JSON representation of a proto that wraps given in request text snippet&#39;s \&quot;id\&quot; (if specified), followed by input text snippet, and a list of zero or more AnnotationPayload protos (called annotations), which have text_extraction detail populated. A single text snippet will be listed only once with all its annotations, and its annotations will never be split across files. If input used documents, then each .JSONL file will contain, per line, a JSON representation of a proto that wraps given in request document proto, followed by its OCR-ed representation in the form of a text snippet, finally followed by a list of zero or more AnnotationPayload protos (called annotations), which have text_extraction detail populated and refer, via their indices, to the OCR-ed text snippet. A single document (and its text snippet) will be listed only once with all its annotations, and its annotations will never be split across files. If prediction for any text snippet failed (partially or completely), then additional &#x60;errors_1.jsonl&#x60;, &#x60;errors_2.jsonl&#x60;,..., &#x60;errors_N.jsonl&#x60; files will be created (N depends on total number of failed predictions). These files will have a JSON representation of a proto that wraps either the \&quot;id\&quot; : \&quot;\&quot; (in case of inline) or the document proto (in case of document) but here followed by exactly one [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) containing only &#x60;code&#x60; and &#x60;message&#x60;. * For Tables: Output depends on whether gcs_destination or bigquery_destination is set (either is allowed). GCS case: In the created directory files &#x60;tables_1.csv&#x60;, &#x60;tables_2.csv&#x60;,..., &#x60;tables_N.csv&#x60; will be created, where N may be 1, and depends on the total number of the successfully predicted rows. For all CLASSIFICATION prediction_type-s: Each .csv file will contain a header, listing all columns&#39; display_name-s given on input followed by M target column names in the format of \&quot;__score\&quot; where M is the number of distinct target values, i.e. number of distinct values in the target column of the table used to train the model. Subsequent lines will contain the respective values of successfully predicted rows, with the last, i.e. the target, columns having the corresponding prediction scores. For REGRESSION and FORECASTING prediction_type-s: Each .csv file will contain a header, listing all columns&#39; display_name-s given on input followed by the predicted target column with name in the format of \&quot;predicted_\&quot; Subsequent lines will contain the respective values of successfully predicted rows, with the last, i.e. the target, column having the predicted target value. If prediction for any rows failed, then an additional &#x60;errors_1.csv&#x60;, &#x60;errors_2.csv&#x60;,..., &#x60;errors_N.csv&#x60; will be created (N depends on total number of failed rows). These files will have analogous format as &#x60;tables_*.csv&#x60;, but always with a single target column having [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) represented as a JSON string, and containing only &#x60;code&#x60; and &#x60;message&#x60;. BigQuery case: bigquery_destination pointing to a BigQuery project must be set. In the given project a new dataset will be created with name &#x60;prediction__&#x60; where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores), and timestamp will be in YYYY_MM_DDThh_mm_ss_sssZ \&quot;based on ISO-8601\&quot; format. In the dataset two tables will be created, &#x60;predictions&#x60;, and &#x60;errors&#x60;. The &#x60;predictions&#x60; table&#39;s column names will be the input columns&#39; display_name-s followed by the target column with name in the format of \&quot;predicted_\&quot; The input feature columns will contain the respective values of successfully predicted rows, with the target column having an ARRAY of AnnotationPayloads, represented as STRUCT-s, containing TablesAnnotation. The &#x60;errors&#x60; table contains rows for which the prediction has failed, it has analogous input columns while the target column name is in the format of \&quot;errors_\&quot;, and as a value has [&#x60;google.rpc.Status&#x60;](https: //github.com/googleapis/googleapis/blob/master/google/rpc/status.proto) represented as a STRUCT, and containing only &#x60;code&#x60; and &#x60;message&#x60;.
 */

#ifndef OAIBatchPredictOutputConfig_H
#define OAIBatchPredictOutputConfig_H

#include <QJsonObject>

#include "OAIBigQueryDestination.h"
#include "OAIGcsDestination.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigQueryDestination;
class OAIGcsDestination;

class OAIBatchPredictOutputConfig : public OAIObject {
public:
    OAIBatchPredictOutputConfig();
    OAIBatchPredictOutputConfig(QString json);
    ~OAIBatchPredictOutputConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBigQueryDestination getBigqueryDestination() const;
    void setBigqueryDestination(const OAIBigQueryDestination &bigquery_destination);
    bool is_bigquery_destination_Set() const;
    bool is_bigquery_destination_Valid() const;

    OAIGcsDestination getGcsDestination() const;
    void setGcsDestination(const OAIGcsDestination &gcs_destination);
    bool is_gcs_destination_Set() const;
    bool is_gcs_destination_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBigQueryDestination m_bigquery_destination;
    bool m_bigquery_destination_isSet;
    bool m_bigquery_destination_isValid;

    OAIGcsDestination m_gcs_destination;
    bool m_gcs_destination_isSet;
    bool m_gcs_destination_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIBatchPredictOutputConfig)

#endif // OAIBatchPredictOutputConfig_H
