/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocument.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocument::OAIDocument(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocument::OAIDocument() {
    this->initializeModel();
}

OAIDocument::~OAIDocument() {}

void OAIDocument::initializeModel() {

    m_document_dimensions_isSet = false;
    m_document_dimensions_isValid = false;

    m_document_text_isSet = false;
    m_document_text_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_page_count_isSet = false;
    m_page_count_isValid = false;
}

void OAIDocument::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocument::fromJsonObject(QJsonObject json) {

    m_document_dimensions_isValid = ::OpenAPI::fromJsonValue(m_document_dimensions, json[QString("documentDimensions")]);
    m_document_dimensions_isSet = !json[QString("documentDimensions")].isNull() && m_document_dimensions_isValid;

    m_document_text_isValid = ::OpenAPI::fromJsonValue(m_document_text, json[QString("documentText")]);
    m_document_text_isSet = !json[QString("documentText")].isNull() && m_document_text_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_page_count_isValid = ::OpenAPI::fromJsonValue(m_page_count, json[QString("pageCount")]);
    m_page_count_isSet = !json[QString("pageCount")].isNull() && m_page_count_isValid;
}

QString OAIDocument::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocument::asJsonObject() const {
    QJsonObject obj;
    if (m_document_dimensions.isSet()) {
        obj.insert(QString("documentDimensions"), ::OpenAPI::toJsonValue(m_document_dimensions));
    }
    if (m_document_text.isSet()) {
        obj.insert(QString("documentText"), ::OpenAPI::toJsonValue(m_document_text));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_layout.size() > 0) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_page_count_isSet) {
        obj.insert(QString("pageCount"), ::OpenAPI::toJsonValue(m_page_count));
    }
    return obj;
}

OAIDocumentDimensions OAIDocument::getDocumentDimensions() const {
    return m_document_dimensions;
}
void OAIDocument::setDocumentDimensions(const OAIDocumentDimensions &document_dimensions) {
    m_document_dimensions = document_dimensions;
    m_document_dimensions_isSet = true;
}

bool OAIDocument::is_document_dimensions_Set() const{
    return m_document_dimensions_isSet;
}

bool OAIDocument::is_document_dimensions_Valid() const{
    return m_document_dimensions_isValid;
}

OAITextSnippet OAIDocument::getDocumentText() const {
    return m_document_text;
}
void OAIDocument::setDocumentText(const OAITextSnippet &document_text) {
    m_document_text = document_text;
    m_document_text_isSet = true;
}

bool OAIDocument::is_document_text_Set() const{
    return m_document_text_isSet;
}

bool OAIDocument::is_document_text_Valid() const{
    return m_document_text_isValid;
}

OAIDocumentInputConfig OAIDocument::getInputConfig() const {
    return m_input_config;
}
void OAIDocument::setInputConfig(const OAIDocumentInputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIDocument::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIDocument::is_input_config_Valid() const{
    return m_input_config_isValid;
}

QList<OAILayout> OAIDocument::getLayout() const {
    return m_layout;
}
void OAIDocument::setLayout(const QList<OAILayout> &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAIDocument::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAIDocument::is_layout_Valid() const{
    return m_layout_isValid;
}

qint32 OAIDocument::getPageCount() const {
    return m_page_count;
}
void OAIDocument::setPageCount(const qint32 &page_count) {
    m_page_count = page_count;
    m_page_count_isSet = true;
}

bool OAIDocument::is_page_count_Set() const{
    return m_page_count_isSet;
}

bool OAIDocument::is_page_count_Valid() const{
    return m_page_count_isValid;
}

bool OAIDocument::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_document_dimensions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_document_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocument::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
