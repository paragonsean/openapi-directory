/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOutputConfig.h
 *
 * * For Translation: CSV file &#x60;translation.csv&#x60;, with each line in format: ML_USE,GCS_FILE_PATH GCS_FILE_PATH leads to a .TSV file which describes examples that have given ML_USE, using the following row format per line: TEXT_SNIPPET (in source language) \\t TEXT_SNIPPET (in target language) * For Tables: Output depends on whether the dataset was imported from GCS or BigQuery. GCS case: gcs_destination must be set. Exported are CSV file(s) &#x60;tables_1.csv&#x60;, &#x60;tables_2.csv&#x60;,...,&#x60;tables_N.csv&#x60; with each having as header line the table&#39;s column names, and all other lines contain values for the header columns. BigQuery case: bigquery_destination pointing to a BigQuery project must be set. In the given project a new dataset will be created with name &#x60;export_data__&#x60; where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores), and timestamp will be in YYYY_MM_DDThh_mm_ss_sssZ \&quot;based on ISO-8601\&quot; format. In that dataset a new table called &#x60;primary_table&#x60; will be created, and filled with precisely the same data as this obtained on import.
 */

#ifndef OAIOutputConfig_H
#define OAIOutputConfig_H

#include <QJsonObject>

#include "OAIBigQueryDestination.h"
#include "OAIGcsDestination.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigQueryDestination;
class OAIGcsDestination;

class OAIOutputConfig : public OAIObject {
public:
    OAIOutputConfig();
    OAIOutputConfig(QString json);
    ~OAIOutputConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBigQueryDestination getBigqueryDestination() const;
    void setBigqueryDestination(const OAIBigQueryDestination &bigquery_destination);
    bool is_bigquery_destination_Set() const;
    bool is_bigquery_destination_Valid() const;

    OAIGcsDestination getGcsDestination() const;
    void setGcsDestination(const OAIGcsDestination &gcs_destination);
    bool is_gcs_destination_Set() const;
    bool is_gcs_destination_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBigQueryDestination m_bigquery_destination;
    bool m_bigquery_destination_isSet;
    bool m_bigquery_destination_isValid;

    OAIGcsDestination m_gcs_destination;
    bool m_gcs_destination_isSet;
    bool m_gcs_destination_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOutputConfig)

#endif // OAIOutputConfig_H
