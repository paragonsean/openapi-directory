/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPredictResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPredictResponse::OAIPredictResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPredictResponse::OAIPredictResponse() {
    this->initializeModel();
}

OAIPredictResponse::~OAIPredictResponse() {}

void OAIPredictResponse::initializeModel() {

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_preprocessed_input_isSet = false;
    m_preprocessed_input_isValid = false;
}

void OAIPredictResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPredictResponse::fromJsonObject(QJsonObject json) {

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_preprocessed_input_isValid = ::OpenAPI::fromJsonValue(m_preprocessed_input, json[QString("preprocessedInput")]);
    m_preprocessed_input_isSet = !json[QString("preprocessedInput")].isNull() && m_preprocessed_input_isValid;
}

QString OAIPredictResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPredictResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_preprocessed_input.isSet()) {
        obj.insert(QString("preprocessedInput"), ::OpenAPI::toJsonValue(m_preprocessed_input));
    }
    return obj;
}

QMap<QString, QString> OAIPredictResponse::getMetadata() const {
    return m_metadata;
}
void OAIPredictResponse::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIPredictResponse::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIPredictResponse::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<OAIAnnotationPayload> OAIPredictResponse::getPayload() const {
    return m_payload;
}
void OAIPredictResponse::setPayload(const QList<OAIAnnotationPayload> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIPredictResponse::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIPredictResponse::is_payload_Valid() const{
    return m_payload_isValid;
}

OAIExamplePayload OAIPredictResponse::getPreprocessedInput() const {
    return m_preprocessed_input;
}
void OAIPredictResponse::setPreprocessedInput(const OAIExamplePayload &preprocessed_input) {
    m_preprocessed_input = preprocessed_input;
    m_preprocessed_input_isSet = true;
}

bool OAIPredictResponse::is_preprocessed_input_Set() const{
    return m_preprocessed_input_isSet;
}

bool OAIPredictResponse::is_preprocessed_input_Valid() const{
    return m_preprocessed_input_isValid;
}

bool OAIPredictResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_preprocessed_input.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPredictResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
