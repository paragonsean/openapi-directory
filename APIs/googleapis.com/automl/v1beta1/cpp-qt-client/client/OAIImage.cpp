/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImage::OAIImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImage::OAIImage() {
    this->initializeModel();
}

OAIImage::~OAIImage() {}

void OAIImage::initializeModel() {

    m_image_bytes_isSet = false;
    m_image_bytes_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_thumbnail_uri_isSet = false;
    m_thumbnail_uri_isValid = false;
}

void OAIImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImage::fromJsonObject(QJsonObject json) {

    m_image_bytes_isValid = ::OpenAPI::fromJsonValue(m_image_bytes, json[QString("imageBytes")]);
    m_image_bytes_isSet = !json[QString("imageBytes")].isNull() && m_image_bytes_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_thumbnail_uri_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_uri, json[QString("thumbnailUri")]);
    m_thumbnail_uri_isSet = !json[QString("thumbnailUri")].isNull() && m_thumbnail_uri_isValid;
}

QString OAIImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImage::asJsonObject() const {
    QJsonObject obj;
    if (m_image_bytes_isSet) {
        obj.insert(QString("imageBytes"), ::OpenAPI::toJsonValue(m_image_bytes));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_thumbnail_uri_isSet) {
        obj.insert(QString("thumbnailUri"), ::OpenAPI::toJsonValue(m_thumbnail_uri));
    }
    return obj;
}

QByteArray OAIImage::getImageBytes() const {
    return m_image_bytes;
}
void OAIImage::setImageBytes(const QByteArray &image_bytes) {
    m_image_bytes = image_bytes;
    m_image_bytes_isSet = true;
}

bool OAIImage::is_image_bytes_Set() const{
    return m_image_bytes_isSet;
}

bool OAIImage::is_image_bytes_Valid() const{
    return m_image_bytes_isValid;
}

OAIInputConfig OAIImage::getInputConfig() const {
    return m_input_config;
}
void OAIImage::setInputConfig(const OAIInputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIImage::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIImage::is_input_config_Valid() const{
    return m_input_config_isValid;
}

QString OAIImage::getThumbnailUri() const {
    return m_thumbnail_uri;
}
void OAIImage::setThumbnailUri(const QString &thumbnail_uri) {
    m_thumbnail_uri = thumbnail_uri;
    m_thumbnail_uri_isSet = true;
}

bool OAIImage::is_thumbnail_uri_Set() const{
    return m_thumbnail_uri_isSet;
}

bool OAIImage::is_thumbnail_uri_Valid() const{
    return m_thumbnail_uri_isValid;
}

bool OAIImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
