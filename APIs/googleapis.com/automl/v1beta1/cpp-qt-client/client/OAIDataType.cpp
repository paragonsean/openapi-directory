/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataType::OAIDataType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataType::OAIDataType() {
    this->initializeModel();
}

OAIDataType::~OAIDataType() {}

void OAIDataType::initializeModel() {

    m_list_element_type_isSet = false;
    m_list_element_type_isValid = false;

    m_nullable_isSet = false;
    m_nullable_isValid = false;

    m_struct_type_isSet = false;
    m_struct_type_isValid = false;

    m_time_format_isSet = false;
    m_time_format_isValid = false;

    m_type_code_isSet = false;
    m_type_code_isValid = false;
}

void OAIDataType::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataType::fromJsonObject(QJsonObject json) {

    m_list_element_type_isValid = ::OpenAPI::fromJsonValue(m_list_element_type, json[QString("listElementType")]);
    m_list_element_type_isSet = !json[QString("listElementType")].isNull() && m_list_element_type_isValid;

    m_nullable_isValid = ::OpenAPI::fromJsonValue(m_nullable, json[QString("nullable")]);
    m_nullable_isSet = !json[QString("nullable")].isNull() && m_nullable_isValid;

    m_struct_type_isValid = ::OpenAPI::fromJsonValue(m_struct_type, json[QString("structType")]);
    m_struct_type_isSet = !json[QString("structType")].isNull() && m_struct_type_isValid;

    m_time_format_isValid = ::OpenAPI::fromJsonValue(m_time_format, json[QString("timeFormat")]);
    m_time_format_isSet = !json[QString("timeFormat")].isNull() && m_time_format_isValid;

    m_type_code_isValid = ::OpenAPI::fromJsonValue(m_type_code, json[QString("typeCode")]);
    m_type_code_isSet = !json[QString("typeCode")].isNull() && m_type_code_isValid;
}

QString OAIDataType::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataType::asJsonObject() const {
    QJsonObject obj;
    if (m_list_element_type.isSet()) {
        obj.insert(QString("listElementType"), ::OpenAPI::toJsonValue(m_list_element_type));
    }
    if (m_nullable_isSet) {
        obj.insert(QString("nullable"), ::OpenAPI::toJsonValue(m_nullable));
    }
    if (m_struct_type.isSet()) {
        obj.insert(QString("structType"), ::OpenAPI::toJsonValue(m_struct_type));
    }
    if (m_time_format_isSet) {
        obj.insert(QString("timeFormat"), ::OpenAPI::toJsonValue(m_time_format));
    }
    if (m_type_code_isSet) {
        obj.insert(QString("typeCode"), ::OpenAPI::toJsonValue(m_type_code));
    }
    return obj;
}

OAIDataType OAIDataType::getListElementType() const {
    return m_list_element_type;
}
void OAIDataType::setListElementType(const OAIDataType &list_element_type) {
    m_list_element_type = list_element_type;
    m_list_element_type_isSet = true;
}

bool OAIDataType::is_list_element_type_Set() const{
    return m_list_element_type_isSet;
}

bool OAIDataType::is_list_element_type_Valid() const{
    return m_list_element_type_isValid;
}

bool OAIDataType::isNullable() const {
    return m_nullable;
}
void OAIDataType::setNullable(const bool &nullable) {
    m_nullable = nullable;
    m_nullable_isSet = true;
}

bool OAIDataType::is_nullable_Set() const{
    return m_nullable_isSet;
}

bool OAIDataType::is_nullable_Valid() const{
    return m_nullable_isValid;
}

OAIStructType OAIDataType::getStructType() const {
    return m_struct_type;
}
void OAIDataType::setStructType(const OAIStructType &struct_type) {
    m_struct_type = struct_type;
    m_struct_type_isSet = true;
}

bool OAIDataType::is_struct_type_Set() const{
    return m_struct_type_isSet;
}

bool OAIDataType::is_struct_type_Valid() const{
    return m_struct_type_isValid;
}

QString OAIDataType::getTimeFormat() const {
    return m_time_format;
}
void OAIDataType::setTimeFormat(const QString &time_format) {
    m_time_format = time_format;
    m_time_format_isSet = true;
}

bool OAIDataType::is_time_format_Set() const{
    return m_time_format_isSet;
}

bool OAIDataType::is_time_format_Valid() const{
    return m_time_format_isValid;
}

QString OAIDataType::getTypeCode() const {
    return m_type_code;
}
void OAIDataType::setTypeCode(const QString &type_code) {
    m_type_code = type_code;
    m_type_code_isSet = true;
}

bool OAIDataType::is_type_code_Set() const{
    return m_type_code_isSet;
}

bool OAIDataType::is_type_code_Valid() const{
    return m_type_code_isValid;
}

bool OAIDataType::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_list_element_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nullable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataType::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
