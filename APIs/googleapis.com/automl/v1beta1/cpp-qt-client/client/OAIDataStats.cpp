/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataStats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataStats::OAIDataStats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataStats::OAIDataStats() {
    this->initializeModel();
}

OAIDataStats::~OAIDataStats() {}

void OAIDataStats::initializeModel() {

    m_array_stats_isSet = false;
    m_array_stats_isValid = false;

    m_category_stats_isSet = false;
    m_category_stats_isValid = false;

    m_distinct_value_count_isSet = false;
    m_distinct_value_count_isValid = false;

    m_float64_stats_isSet = false;
    m_float64_stats_isValid = false;

    m_null_value_count_isSet = false;
    m_null_value_count_isValid = false;

    m_string_stats_isSet = false;
    m_string_stats_isValid = false;

    m_struct_stats_isSet = false;
    m_struct_stats_isValid = false;

    m_timestamp_stats_isSet = false;
    m_timestamp_stats_isValid = false;

    m_valid_value_count_isSet = false;
    m_valid_value_count_isValid = false;
}

void OAIDataStats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataStats::fromJsonObject(QJsonObject json) {

    m_array_stats_isValid = ::OpenAPI::fromJsonValue(m_array_stats, json[QString("arrayStats")]);
    m_array_stats_isSet = !json[QString("arrayStats")].isNull() && m_array_stats_isValid;

    m_category_stats_isValid = ::OpenAPI::fromJsonValue(m_category_stats, json[QString("categoryStats")]);
    m_category_stats_isSet = !json[QString("categoryStats")].isNull() && m_category_stats_isValid;

    m_distinct_value_count_isValid = ::OpenAPI::fromJsonValue(m_distinct_value_count, json[QString("distinctValueCount")]);
    m_distinct_value_count_isSet = !json[QString("distinctValueCount")].isNull() && m_distinct_value_count_isValid;

    m_float64_stats_isValid = ::OpenAPI::fromJsonValue(m_float64_stats, json[QString("float64Stats")]);
    m_float64_stats_isSet = !json[QString("float64Stats")].isNull() && m_float64_stats_isValid;

    m_null_value_count_isValid = ::OpenAPI::fromJsonValue(m_null_value_count, json[QString("nullValueCount")]);
    m_null_value_count_isSet = !json[QString("nullValueCount")].isNull() && m_null_value_count_isValid;

    m_string_stats_isValid = ::OpenAPI::fromJsonValue(m_string_stats, json[QString("stringStats")]);
    m_string_stats_isSet = !json[QString("stringStats")].isNull() && m_string_stats_isValid;

    m_struct_stats_isValid = ::OpenAPI::fromJsonValue(m_struct_stats, json[QString("structStats")]);
    m_struct_stats_isSet = !json[QString("structStats")].isNull() && m_struct_stats_isValid;

    m_timestamp_stats_isValid = ::OpenAPI::fromJsonValue(m_timestamp_stats, json[QString("timestampStats")]);
    m_timestamp_stats_isSet = !json[QString("timestampStats")].isNull() && m_timestamp_stats_isValid;

    m_valid_value_count_isValid = ::OpenAPI::fromJsonValue(m_valid_value_count, json[QString("validValueCount")]);
    m_valid_value_count_isSet = !json[QString("validValueCount")].isNull() && m_valid_value_count_isValid;
}

QString OAIDataStats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataStats::asJsonObject() const {
    QJsonObject obj;
    if (m_array_stats.isSet()) {
        obj.insert(QString("arrayStats"), ::OpenAPI::toJsonValue(m_array_stats));
    }
    if (m_category_stats.isSet()) {
        obj.insert(QString("categoryStats"), ::OpenAPI::toJsonValue(m_category_stats));
    }
    if (m_distinct_value_count_isSet) {
        obj.insert(QString("distinctValueCount"), ::OpenAPI::toJsonValue(m_distinct_value_count));
    }
    if (m_float64_stats.isSet()) {
        obj.insert(QString("float64Stats"), ::OpenAPI::toJsonValue(m_float64_stats));
    }
    if (m_null_value_count_isSet) {
        obj.insert(QString("nullValueCount"), ::OpenAPI::toJsonValue(m_null_value_count));
    }
    if (m_string_stats.isSet()) {
        obj.insert(QString("stringStats"), ::OpenAPI::toJsonValue(m_string_stats));
    }
    if (m_struct_stats.isSet()) {
        obj.insert(QString("structStats"), ::OpenAPI::toJsonValue(m_struct_stats));
    }
    if (m_timestamp_stats.isSet()) {
        obj.insert(QString("timestampStats"), ::OpenAPI::toJsonValue(m_timestamp_stats));
    }
    if (m_valid_value_count_isSet) {
        obj.insert(QString("validValueCount"), ::OpenAPI::toJsonValue(m_valid_value_count));
    }
    return obj;
}

OAIArrayStats OAIDataStats::getArrayStats() const {
    return m_array_stats;
}
void OAIDataStats::setArrayStats(const OAIArrayStats &array_stats) {
    m_array_stats = array_stats;
    m_array_stats_isSet = true;
}

bool OAIDataStats::is_array_stats_Set() const{
    return m_array_stats_isSet;
}

bool OAIDataStats::is_array_stats_Valid() const{
    return m_array_stats_isValid;
}

OAICategoryStats OAIDataStats::getCategoryStats() const {
    return m_category_stats;
}
void OAIDataStats::setCategoryStats(const OAICategoryStats &category_stats) {
    m_category_stats = category_stats;
    m_category_stats_isSet = true;
}

bool OAIDataStats::is_category_stats_Set() const{
    return m_category_stats_isSet;
}

bool OAIDataStats::is_category_stats_Valid() const{
    return m_category_stats_isValid;
}

QString OAIDataStats::getDistinctValueCount() const {
    return m_distinct_value_count;
}
void OAIDataStats::setDistinctValueCount(const QString &distinct_value_count) {
    m_distinct_value_count = distinct_value_count;
    m_distinct_value_count_isSet = true;
}

bool OAIDataStats::is_distinct_value_count_Set() const{
    return m_distinct_value_count_isSet;
}

bool OAIDataStats::is_distinct_value_count_Valid() const{
    return m_distinct_value_count_isValid;
}

OAIFloat64Stats OAIDataStats::getFloat64Stats() const {
    return m_float64_stats;
}
void OAIDataStats::setFloat64Stats(const OAIFloat64Stats &float64_stats) {
    m_float64_stats = float64_stats;
    m_float64_stats_isSet = true;
}

bool OAIDataStats::is_float64_stats_Set() const{
    return m_float64_stats_isSet;
}

bool OAIDataStats::is_float64_stats_Valid() const{
    return m_float64_stats_isValid;
}

QString OAIDataStats::getNullValueCount() const {
    return m_null_value_count;
}
void OAIDataStats::setNullValueCount(const QString &null_value_count) {
    m_null_value_count = null_value_count;
    m_null_value_count_isSet = true;
}

bool OAIDataStats::is_null_value_count_Set() const{
    return m_null_value_count_isSet;
}

bool OAIDataStats::is_null_value_count_Valid() const{
    return m_null_value_count_isValid;
}

OAIStringStats OAIDataStats::getStringStats() const {
    return m_string_stats;
}
void OAIDataStats::setStringStats(const OAIStringStats &string_stats) {
    m_string_stats = string_stats;
    m_string_stats_isSet = true;
}

bool OAIDataStats::is_string_stats_Set() const{
    return m_string_stats_isSet;
}

bool OAIDataStats::is_string_stats_Valid() const{
    return m_string_stats_isValid;
}

OAIStructStats OAIDataStats::getStructStats() const {
    return m_struct_stats;
}
void OAIDataStats::setStructStats(const OAIStructStats &struct_stats) {
    m_struct_stats = struct_stats;
    m_struct_stats_isSet = true;
}

bool OAIDataStats::is_struct_stats_Set() const{
    return m_struct_stats_isSet;
}

bool OAIDataStats::is_struct_stats_Valid() const{
    return m_struct_stats_isValid;
}

OAITimestampStats OAIDataStats::getTimestampStats() const {
    return m_timestamp_stats;
}
void OAIDataStats::setTimestampStats(const OAITimestampStats &timestamp_stats) {
    m_timestamp_stats = timestamp_stats;
    m_timestamp_stats_isSet = true;
}

bool OAIDataStats::is_timestamp_stats_Set() const{
    return m_timestamp_stats_isSet;
}

bool OAIDataStats::is_timestamp_stats_Valid() const{
    return m_timestamp_stats_isValid;
}

QString OAIDataStats::getValidValueCount() const {
    return m_valid_value_count;
}
void OAIDataStats::setValidValueCount(const QString &valid_value_count) {
    m_valid_value_count = valid_value_count;
    m_valid_value_count_isSet = true;
}

bool OAIDataStats::is_valid_value_count_Set() const{
    return m_valid_value_count_isSet;
}

bool OAIDataStats::is_valid_value_count_Valid() const{
    return m_valid_value_count_isValid;
}

bool OAIDataStats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_array_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_distinct_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_float64_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_null_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_string_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_valid_value_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataStats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
