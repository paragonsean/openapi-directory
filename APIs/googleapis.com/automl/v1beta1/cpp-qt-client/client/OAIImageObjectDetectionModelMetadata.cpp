/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageObjectDetectionModelMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageObjectDetectionModelMetadata::OAIImageObjectDetectionModelMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageObjectDetectionModelMetadata::OAIImageObjectDetectionModelMetadata() {
    this->initializeModel();
}

OAIImageObjectDetectionModelMetadata::~OAIImageObjectDetectionModelMetadata() {}

void OAIImageObjectDetectionModelMetadata::initializeModel() {

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_node_qps_isSet = false;
    m_node_qps_isValid = false;

    m_stop_reason_isSet = false;
    m_stop_reason_isValid = false;

    m_train_budget_milli_node_hours_isSet = false;
    m_train_budget_milli_node_hours_isValid = false;

    m_train_cost_milli_node_hours_isSet = false;
    m_train_cost_milli_node_hours_isValid = false;
}

void OAIImageObjectDetectionModelMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageObjectDetectionModelMetadata::fromJsonObject(QJsonObject json) {

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_node_qps_isValid = ::OpenAPI::fromJsonValue(m_node_qps, json[QString("nodeQps")]);
    m_node_qps_isSet = !json[QString("nodeQps")].isNull() && m_node_qps_isValid;

    m_stop_reason_isValid = ::OpenAPI::fromJsonValue(m_stop_reason, json[QString("stopReason")]);
    m_stop_reason_isSet = !json[QString("stopReason")].isNull() && m_stop_reason_isValid;

    m_train_budget_milli_node_hours_isValid = ::OpenAPI::fromJsonValue(m_train_budget_milli_node_hours, json[QString("trainBudgetMilliNodeHours")]);
    m_train_budget_milli_node_hours_isSet = !json[QString("trainBudgetMilliNodeHours")].isNull() && m_train_budget_milli_node_hours_isValid;

    m_train_cost_milli_node_hours_isValid = ::OpenAPI::fromJsonValue(m_train_cost_milli_node_hours, json[QString("trainCostMilliNodeHours")]);
    m_train_cost_milli_node_hours_isSet = !json[QString("trainCostMilliNodeHours")].isNull() && m_train_cost_milli_node_hours_isValid;
}

QString OAIImageObjectDetectionModelMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageObjectDetectionModelMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_node_qps_isSet) {
        obj.insert(QString("nodeQps"), ::OpenAPI::toJsonValue(m_node_qps));
    }
    if (m_stop_reason_isSet) {
        obj.insert(QString("stopReason"), ::OpenAPI::toJsonValue(m_stop_reason));
    }
    if (m_train_budget_milli_node_hours_isSet) {
        obj.insert(QString("trainBudgetMilliNodeHours"), ::OpenAPI::toJsonValue(m_train_budget_milli_node_hours));
    }
    if (m_train_cost_milli_node_hours_isSet) {
        obj.insert(QString("trainCostMilliNodeHours"), ::OpenAPI::toJsonValue(m_train_cost_milli_node_hours));
    }
    return obj;
}

QString OAIImageObjectDetectionModelMetadata::getModelType() const {
    return m_model_type;
}
void OAIImageObjectDetectionModelMetadata::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIImageObjectDetectionModelMetadata::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIImageObjectDetectionModelMetadata::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAIImageObjectDetectionModelMetadata::getNodeCount() const {
    return m_node_count;
}
void OAIImageObjectDetectionModelMetadata::setNodeCount(const QString &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIImageObjectDetectionModelMetadata::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIImageObjectDetectionModelMetadata::is_node_count_Valid() const{
    return m_node_count_isValid;
}

double OAIImageObjectDetectionModelMetadata::getNodeQps() const {
    return m_node_qps;
}
void OAIImageObjectDetectionModelMetadata::setNodeQps(const double &node_qps) {
    m_node_qps = node_qps;
    m_node_qps_isSet = true;
}

bool OAIImageObjectDetectionModelMetadata::is_node_qps_Set() const{
    return m_node_qps_isSet;
}

bool OAIImageObjectDetectionModelMetadata::is_node_qps_Valid() const{
    return m_node_qps_isValid;
}

QString OAIImageObjectDetectionModelMetadata::getStopReason() const {
    return m_stop_reason;
}
void OAIImageObjectDetectionModelMetadata::setStopReason(const QString &stop_reason) {
    m_stop_reason = stop_reason;
    m_stop_reason_isSet = true;
}

bool OAIImageObjectDetectionModelMetadata::is_stop_reason_Set() const{
    return m_stop_reason_isSet;
}

bool OAIImageObjectDetectionModelMetadata::is_stop_reason_Valid() const{
    return m_stop_reason_isValid;
}

QString OAIImageObjectDetectionModelMetadata::getTrainBudgetMilliNodeHours() const {
    return m_train_budget_milli_node_hours;
}
void OAIImageObjectDetectionModelMetadata::setTrainBudgetMilliNodeHours(const QString &train_budget_milli_node_hours) {
    m_train_budget_milli_node_hours = train_budget_milli_node_hours;
    m_train_budget_milli_node_hours_isSet = true;
}

bool OAIImageObjectDetectionModelMetadata::is_train_budget_milli_node_hours_Set() const{
    return m_train_budget_milli_node_hours_isSet;
}

bool OAIImageObjectDetectionModelMetadata::is_train_budget_milli_node_hours_Valid() const{
    return m_train_budget_milli_node_hours_isValid;
}

QString OAIImageObjectDetectionModelMetadata::getTrainCostMilliNodeHours() const {
    return m_train_cost_milli_node_hours;
}
void OAIImageObjectDetectionModelMetadata::setTrainCostMilliNodeHours(const QString &train_cost_milli_node_hours) {
    m_train_cost_milli_node_hours = train_cost_milli_node_hours;
    m_train_cost_milli_node_hours_isSet = true;
}

bool OAIImageObjectDetectionModelMetadata::is_train_cost_milli_node_hours_Set() const{
    return m_train_cost_milli_node_hours_isSet;
}

bool OAIImageObjectDetectionModelMetadata::is_train_cost_milli_node_hours_Valid() const{
    return m_train_cost_milli_node_hours_isValid;
}

bool OAIImageObjectDetectionModelMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_budget_milli_node_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_cost_milli_node_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageObjectDetectionModelMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
