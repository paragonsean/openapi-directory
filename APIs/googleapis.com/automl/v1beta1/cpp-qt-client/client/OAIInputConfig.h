/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInputConfig.h
 *
 * Input configuration for ImportData Action. The format of input depends on dataset_metadata the Dataset into which the import is happening has. As input source the gcs_source is expected, unless specified otherwise. Additionally any input .CSV file by itself must be 100MB or smaller, unless specified otherwise. If an \&quot;example\&quot; file (that is, image, video etc.) with identical content (even if it had different GCS_FILE_PATH) is mentioned multiple times, then its label, bounding boxes etc. are appended. The same file should be always provided with the same ML_USE and GCS_FILE_PATH, if it is not, then these values are nondeterministically selected from the given ones. The formats are represented in EBNF with commas being literal and with non-terminal symbols defined near the end of this comment. The formats are: * For Image Classification: CSV file(s) with each line in format: ML_USE,GCS_FILE_PATH,LABEL,LABEL,... GCS_FILE_PATH leads to image of up to 30MB in size. Supported extensions: .JPEG, .GIF, .PNG, .WEBP, .BMP, .TIFF, .ICO For MULTICLASS classification type, at most one LABEL is allowed per image. If an image has not yet been labeled, then it should be mentioned just once with no LABEL. Some sample rows: TRAIN,gs://folder/image1.jpg,daisy TEST,gs://folder/image2.jpg,dandelion,tulip,rose UNASSIGNED,gs://folder/image3.jpg,daisy UNASSIGNED,gs://folder/image4.jpg * For Image Object Detection: CSV file(s) with each line in format: ML_USE,GCS_FILE_PATH,(LABEL,BOUNDING_BOX | ,,,,,,,) GCS_FILE_PATH leads to image of up to 30MB in size. Supported extensions: .JPEG, .GIF, .PNG. Each image is assumed to be exhaustively labeled. The minimum allowed BOUNDING_BOX edge length is 0.01, and no more than 500 BOUNDING_BOX-es per image are allowed (one BOUNDING_BOX is defined per line). If an image has not yet been labeled, then it should be mentioned just once with no LABEL and the \&quot;,,,,,,,\&quot; in place of the BOUNDING_BOX. For images which are known to not contain any bounding boxes, they should be labelled explictly as \&quot;NEGATIVE_IMAGE\&quot;, followed by \&quot;,,,,,,,\&quot; in place of the BOUNDING_BOX. Sample rows: TRAIN,gs://folder/image1.png,car,0.1,0.1,,,0.3,0.3,, TRAIN,gs://folder/image1.png,bike,.7,.6,,,.8,.9,, UNASSIGNED,gs://folder/im2.png,car,0.1,0.1,0.2,0.1,0.2,0.3,0.1,0.3 TEST,gs://folder/im3.png,,,,,,,,, TRAIN,gs://folder/im4.png,NEGATIVE_IMAGE,,,,,,,,, * For Video Classification: CSV file(s) with each line in format: ML_USE,GCS_FILE_PATH where ML_USE VALIDATE value should not be used. The GCS_FILE_PATH should lead to another .csv file which describes examples that have given ML_USE, using the following row format: GCS_FILE_PATH,(LABEL,TIME_SEGMENT_START,TIME_SEGMENT_END | ,,) Here GCS_FILE_PATH leads to a video of up to 50GB in size and up to 3h duration. Supported extensions: .MOV, .MPEG4, .MP4, .AVI. TIME_SEGMENT_START and TIME_SEGMENT_END must be within the length of the video, and end has to be after the start. Any segment of a video which has one or more labels on it, is considered a hard negative for all other labels. Any segment with no labels on it is considered to be unknown. If a whole video is unknown, then it shuold be mentioned just once with \&quot;,,\&quot; in place of LABEL, TIME_SEGMENT_START,TIME_SEGMENT_END. Sample top level CSV file: TRAIN,gs://folder/train_videos.csv TEST,gs://folder/test_videos.csv UNASSIGNED,gs://folder/other_videos.csv Sample rows of a CSV file for a particular ML_USE: gs://folder/video1.avi,car,120,180.000021 gs://folder/video1.avi,bike,150,180.000021 gs://folder/vid2.avi,car,0,60.5 gs://folder/vid3.avi,,, * For Video Object Tracking: CSV file(s) with each line in format: ML_USE,GCS_FILE_PATH where ML_USE VALIDATE value should not be used. The GCS_FILE_PATH should lead to another .csv file which describes examples that have given ML_USE, using one of the following row format: GCS_FILE_PATH,LABEL,[INSTANCE_ID],TIMESTAMP,BOUNDING_BOX or GCS_FILE_PATH,,,,,,,,,, Here GCS_FILE_PATH leads to a video of up to 50GB in size and up to 3h duration. Supported extensions: .MOV, .MPEG4, .MP4, .AVI. Providing INSTANCE_IDs can help to obtain a better model. When a specific labeled entity leaves the video frame, and shows up afterwards it is not required, albeit preferable, that the same INSTANCE_ID is given to it. TIMESTAMP must be within the length of the video, the BOUNDING_BOX is assumed to be drawn on the closest video&#39;s frame to the TIMESTAMP. Any mentioned by the TIMESTAMP frame is expected to be exhaustively labeled and no more than 500 BOUNDING_BOX-es per frame are allowed. If a whole video is unknown, then it should be mentioned just once with \&quot;,,,,,,,,,,\&quot; in place of LABEL, [INSTANCE_ID],TIMESTAMP,BOUNDING_BOX. Sample top level CSV file: TRAIN,gs://folder/train_videos.csv TEST,gs://folder/test_videos.csv UNASSIGNED,gs://folder/other_videos.csv Seven sample rows of a CSV file for a particular ML_USE: gs://folder/video1.avi,car,1,12.10,0.8,0.8,0.9,0.8,0.9,0.9,0.8,0.9 gs://folder/video1.avi,car,1,12.90,0.4,0.8,0.5,0.8,0.5,0.9,0.4,0.9 gs://folder/video1.avi,car,2,12.10,.4,.2,.5,.2,.5,.3,.4,.3 gs://folder/video1.avi,car,2,12.90,.8,.2,,,.9,.3,, gs://folder/video1.avi,bike,,12.50,.45,.45,,,.55,.55,, gs://folder/video2.avi,car,1,0,.1,.9,,,.9,.1,, gs://folder/video2.avi,,,,,,,,,,, * For Text Extraction: CSV file(s) with each line in format: ML_USE,GCS_FILE_PATH GCS_FILE_PATH leads to a .JSONL (that is, JSON Lines) file which either imports text in-line or as documents. Any given .JSONL file must be 100MB or smaller. The in-line .JSONL file contains, per line, a proto that wraps a TextSnippet proto (in json representation) followed by one or more AnnotationPayload protos (called annotations), which have display_name and text_extraction detail populated. The given text is expected to be annotated exhaustively, for example, if you look for animals and text contains \&quot;dolphin\&quot; that is not labeled, then \&quot;dolphin\&quot; is assumed to not be an animal. Any given text snippet content must be 10KB or smaller, and also be UTF-8 NFC encoded (ASCII already is). The document .JSONL file contains, per line, a proto that wraps a Document proto. The Document proto must have either document_text or input_config set. In document_text case, the Document proto may also contain the spatial information of the document, including layout, document dimension and page number. In input_config case, only PDF documents are supported now, and each document may be up to 2MB large. Currently, annotations on documents cannot be specified at import. Three sample CSV rows: TRAIN,gs://folder/file1.jsonl VALIDATE,gs://folder/file2.jsonl TEST,gs://folder/file3.jsonl Sample in-line JSON Lines file for entity extraction (presented here with artificial line breaks, but the only actual line break is denoted by \\n).: { \&quot;document\&quot;: { \&quot;document_text\&quot;: {\&quot;content\&quot;: \&quot;dog cat\&quot;} \&quot;layout\&quot;: [ { \&quot;text_segment\&quot;: { \&quot;start_offset\&quot;: 0, \&quot;end_offset\&quot;: 3, }, \&quot;page_number\&quot;: 1, \&quot;bounding_poly\&quot;: { \&quot;normalized_vertices\&quot;: [ {\&quot;x\&quot;: 0.1, \&quot;y\&quot;: 0.1}, {\&quot;x\&quot;: 0.1, \&quot;y\&quot;: 0.3}, {\&quot;x\&quot;: 0.3, \&quot;y\&quot;: 0.3}, {\&quot;x\&quot;: 0.3, \&quot;y\&quot;: 0.1}, ], }, \&quot;text_segment_type\&quot;: TOKEN, }, { \&quot;text_segment\&quot;: { \&quot;start_offset\&quot;: 4, \&quot;end_offset\&quot;: 7, }, \&quot;page_number\&quot;: 1, \&quot;bounding_poly\&quot;: { \&quot;normalized_vertices\&quot;: [ {\&quot;x\&quot;: 0.4, \&quot;y\&quot;: 0.1}, {\&quot;x\&quot;: 0.4, \&quot;y\&quot;: 0.3}, {\&quot;x\&quot;: 0.8, \&quot;y\&quot;: 0.3}, {\&quot;x\&quot;: 0.8, \&quot;y\&quot;: 0.1}, ], }, \&quot;text_segment_type\&quot;: TOKEN, } ], \&quot;document_dimensions\&quot;: { \&quot;width\&quot;: 8.27, \&quot;height\&quot;: 11.69, \&quot;unit\&quot;: INCH, } \&quot;page_count\&quot;: 1, }, \&quot;annotations\&quot;: [ { \&quot;display_name\&quot;: \&quot;animal\&quot;, \&quot;text_extraction\&quot;: {\&quot;text_segment\&quot;: {\&quot;start_offset\&quot;: 0, \&quot;end_offset\&quot;: 3}} }, { \&quot;display_name\&quot;: \&quot;animal\&quot;, \&quot;text_extraction\&quot;: {\&quot;text_segment\&quot;: {\&quot;start_offset\&quot;: 4, \&quot;end_offset\&quot;: 7}} } ], }\\n { \&quot;text_snippet\&quot;: { \&quot;content\&quot;: \&quot;This dog is good.\&quot; }, \&quot;annotations\&quot;: [ { \&quot;display_name\&quot;: \&quot;animal\&quot;, \&quot;text_extraction\&quot;: { \&quot;text_segment\&quot;: {\&quot;start_offset\&quot;: 5, \&quot;end_offset\&quot;: 8} } } ] } Sample document JSON Lines file (presented here with artificial line breaks, but the only actual line break is denoted by \\n).: { \&quot;document\&quot;: { \&quot;input_config\&quot;: { \&quot;gcs_source\&quot;: { \&quot;input_uris\&quot;: [ \&quot;gs://folder/document1.pdf\&quot; ] } } } }\\n { \&quot;document\&quot;: { \&quot;input_config\&quot;: { \&quot;gcs_source\&quot;: { \&quot;input_uris\&quot;: [ \&quot;gs://folder/document2.pdf\&quot; ] } } } } * For Text Classification: CSV file(s) with each line in format: ML_USE,(TEXT_SNIPPET | GCS_FILE_PATH),LABEL,LABEL,... TEXT_SNIPPET and GCS_FILE_PATH are distinguished by a pattern. If the column content is a valid gcs file path, i.e. prefixed by \&quot;gs://\&quot;, it will be treated as a GCS_FILE_PATH, else if the content is enclosed within double quotes (\&quot;\&quot;), it is treated as a TEXT_SNIPPET. In the GCS_FILE_PATH case, the path must lead to a .txt file with UTF-8 encoding, for example, \&quot;gs://folder/content.txt\&quot;, and the content in it is extracted as a text snippet. In TEXT_SNIPPET case, the column content excluding quotes is treated as to be imported text snippet. In both cases, the text snippet/file size must be within 128kB. Maximum 100 unique labels are allowed per CSV row. Sample rows: TRAIN,\&quot;They have bad food and very rude\&quot;,RudeService,BadFood TRAIN,gs://folder/content.txt,SlowService TEST,\&quot;Typically always bad service there.\&quot;,RudeService VALIDATE,\&quot;Stomach ache to go.\&quot;,BadFood * For Text Sentiment: CSV file(s) with each line in format: ML_USE,(TEXT_SNIPPET | GCS_FILE_PATH),SENTIMENT TEXT_SNIPPET and GCS_FILE_PATH are distinguished by a pattern. If the column content is a valid gcs file path, that is, prefixed by \&quot;gs://\&quot;, it is treated as a GCS_FILE_PATH, otherwise it is treated as a TEXT_SNIPPET. In the GCS_FILE_PATH case, the path must lead to a .txt file with UTF-8 encoding, for example, \&quot;gs://folder/content.txt\&quot;, and the content in it is extracted as a text snippet. In TEXT_SNIPPET case, the column content itself is treated as to be imported text snippet. In both cases, the text snippet must be up to 500 characters long. Sample rows: TRAIN,\&quot;@freewrytin this is way too good for your product\&quot;,2 TRAIN,\&quot;I need this product so bad\&quot;,3 TEST,\&quot;Thank you for this product.\&quot;,4 VALIDATE,gs://folder/content.txt,2 * For Tables: Either gcs_source or bigquery_source can be used. All inputs is concatenated into a single primary_table For gcs_source: CSV file(s), where the first row of the first file is the header, containing unique column names. If the first row of a subsequent file is the same as the header, then it is also treated as a header. All other rows contain values for the corresponding columns. Each .CSV file by itself must be 10GB or smaller, and their total size must be 100GB or smaller. First three sample rows of a CSV file: \&quot;Id\&quot;,\&quot;First Name\&quot;,\&quot;Last Name\&quot;,\&quot;Dob\&quot;,\&quot;Addresses\&quot; \&quot;1\&quot;,\&quot;John\&quot;,\&quot;Doe\&quot;,\&quot;1968-01-22\&quot;,\&quot;[{\&quot;status\&quot;:\&quot;current\&quot;,\&quot;address\&quot;:\&quot;123_First_Avenue\&quot;,\&quot;city\&quot;:\&quot;Seattle\&quot;,\&quot;state\&quot;:\&quot;WA\&quot;,\&quot;zip\&quot;:\&quot;11111\&quot;,\&quot;numberOfYears\&quot;:\&quot;1\&quot;},{\&quot;status\&quot;:\&quot;previous\&quot;,\&quot;address\&quot;:\&quot;456_Main_Street\&quot;,\&quot;city\&quot;:\&quot;Portland\&quot;,\&quot;state\&quot;:\&quot;OR\&quot;,\&quot;zip\&quot;:\&quot;22222\&quot;,\&quot;numberOfYears\&quot;:\&quot;5\&quot;}]\&quot; \&quot;2\&quot;,\&quot;Jane\&quot;,\&quot;Doe\&quot;,\&quot;1980-10-16\&quot;,\&quot;[{\&quot;status\&quot;:\&quot;current\&quot;,\&quot;address\&quot;:\&quot;789_Any_Avenue\&quot;,\&quot;city\&quot;:\&quot;Albany\&quot;,\&quot;state\&quot;:\&quot;NY\&quot;,\&quot;zip\&quot;:\&quot;33333\&quot;,\&quot;numberOfYears\&quot;:\&quot;2\&quot;},{\&quot;status\&quot;:\&quot;previous\&quot;,\&quot;address\&quot;:\&quot;321_Main_Street\&quot;,\&quot;city\&quot;:\&quot;Hoboken\&quot;,\&quot;state\&quot;:\&quot;NJ\&quot;,\&quot;zip\&quot;:\&quot;44444\&quot;,\&quot;numberOfYears\&quot;:\&quot;3\&quot;}]} For bigquery_source: An URI of a BigQuery table. The user data size of the BigQuery table must be 100GB or smaller. An imported table must have between 2 and 1,000 columns, inclusive, and between 1000 and 100,000,000 rows, inclusive. There are at most 5 import data running in parallel. Definitions: ML_USE &#x3D; \&quot;TRAIN\&quot; | \&quot;VALIDATE\&quot; | \&quot;TEST\&quot; | \&quot;UNASSIGNED\&quot; Describes how the given example (file) should be used for model training. \&quot;UNASSIGNED\&quot; can be used when user has no preference. GCS_FILE_PATH &#x3D; A path to file on GCS, e.g. \&quot;gs://folder/image1.png\&quot;. LABEL &#x3D; A display name of an object on an image, video etc., e.g. \&quot;dog\&quot;. Must be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores(_), and ASCII digits 0-9. For each label an AnnotationSpec is created which display_name becomes the label; AnnotationSpecs are given back in predictions. INSTANCE_ID &#x3D; A positive integer that identifies a specific instance of a labeled entity on an example. Used e.g. to track two cars on a video while being able to tell apart which one is which. BOUNDING_BOX &#x3D; VERTEX,VERTEX,VERTEX,VERTEX | VERTEX,,,VERTEX,, A rectangle parallel to the frame of the example (image, video). If 4 vertices are given they are connected by edges in the order provided, if 2 are given they are recognized as diagonally opposite vertices of the rectangle. VERTEX &#x3D; COORDINATE,COORDINATE First coordinate is horizontal (x), the second is vertical (y). COORDINATE &#x3D; A float in 0 to 1 range, relative to total length of image or video in given dimension. For fractions the leading non-decimal 0 can be omitted (i.e. 0.3 &#x3D; .3). Point 0,0 is in top left. TIME_SEGMENT_START &#x3D; TIME_OFFSET Expresses a beginning, inclusive, of a time segment within an example that has a time dimension (e.g. video). TIME_SEGMENT_END &#x3D; TIME_OFFSET Expresses an end, exclusive, of a time segment within an example that has a time dimension (e.g. video). TIME_OFFSET &#x3D; A number of seconds as measured from the start of an example (e.g. video). Fractions are allowed, up to a microsecond precision. \&quot;inf\&quot; is allowed, and it means the end of the example. TEXT_SNIPPET &#x3D; A content of a text snippet, UTF-8 encoded, enclosed within double quotes (\&quot;\&quot;). SENTIMENT &#x3D; An integer between 0 and Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive). Describes the ordinal of the sentiment - higher value means a more positive sentiment. All the values are completely relative, i.e. neither 0 needs to mean a negative or neutral sentiment nor sentiment_max needs to mean a positive one - it is just required that 0 is the least positive sentiment in the data, and sentiment_max is the most positive one. The SENTIMENT shouldn&#39;t be confused with \&quot;score\&quot; or \&quot;magnitude\&quot; from the previous Natural Language Sentiment Analysis API. All SENTIMENT values between 0 and sentiment_max must be represented in the imported data. On prediction the same 0 to sentiment_max range will be used. The difference between neighboring sentiment values needs not to be uniform, e.g. 1 and 2 may be similar whereas the difference between 2 and 3 may be huge. Errors: If any of the provided CSV files can&#39;t be parsed or if more than certain percent of CSV rows cannot be processed then the operation fails and nothing is imported. Regardless of overall success or failure the per-row failures, up to a certain count cap, is listed in Operation.metadata.partial_failures. 
 */

#ifndef OAIInputConfig_H
#define OAIInputConfig_H

#include <QJsonObject>

#include "OAIBigQuerySource.h"
#include "OAIGcsSource.h"
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIBigQuerySource;
class OAIGcsSource;

class OAIInputConfig : public OAIObject {
public:
    OAIInputConfig();
    OAIInputConfig(QString json);
    ~OAIInputConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIBigQuerySource getBigquerySource() const;
    void setBigquerySource(const OAIBigQuerySource &bigquery_source);
    bool is_bigquery_source_Set() const;
    bool is_bigquery_source_Valid() const;

    OAIGcsSource getGcsSource() const;
    void setGcsSource(const OAIGcsSource &gcs_source);
    bool is_gcs_source_Set() const;
    bool is_gcs_source_Valid() const;

    QMap<QString, QString> getParams() const;
    void setParams(const QMap<QString, QString> &params);
    bool is_params_Set() const;
    bool is_params_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIBigQuerySource m_bigquery_source;
    bool m_bigquery_source_isSet;
    bool m_bigquery_source_isValid;

    OAIGcsSource m_gcs_source;
    bool m_gcs_source_isSet;
    bool m_gcs_source_isValid;

    QMap<QString, QString> m_params;
    bool m_params_isSet;
    bool m_params_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInputConfig)

#endif // OAIInputConfig_H
