/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITablesDatasetMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITablesDatasetMetadata::OAITablesDatasetMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITablesDatasetMetadata::OAITablesDatasetMetadata() {
    this->initializeModel();
}

OAITablesDatasetMetadata::~OAITablesDatasetMetadata() {}

void OAITablesDatasetMetadata::initializeModel() {

    m_ml_use_column_spec_id_isSet = false;
    m_ml_use_column_spec_id_isValid = false;

    m_primary_table_spec_id_isSet = false;
    m_primary_table_spec_id_isValid = false;

    m_stats_update_time_isSet = false;
    m_stats_update_time_isValid = false;

    m_target_column_correlations_isSet = false;
    m_target_column_correlations_isValid = false;

    m_target_column_spec_id_isSet = false;
    m_target_column_spec_id_isValid = false;

    m_weight_column_spec_id_isSet = false;
    m_weight_column_spec_id_isValid = false;
}

void OAITablesDatasetMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITablesDatasetMetadata::fromJsonObject(QJsonObject json) {

    m_ml_use_column_spec_id_isValid = ::OpenAPI::fromJsonValue(m_ml_use_column_spec_id, json[QString("mlUseColumnSpecId")]);
    m_ml_use_column_spec_id_isSet = !json[QString("mlUseColumnSpecId")].isNull() && m_ml_use_column_spec_id_isValid;

    m_primary_table_spec_id_isValid = ::OpenAPI::fromJsonValue(m_primary_table_spec_id, json[QString("primaryTableSpecId")]);
    m_primary_table_spec_id_isSet = !json[QString("primaryTableSpecId")].isNull() && m_primary_table_spec_id_isValid;

    m_stats_update_time_isValid = ::OpenAPI::fromJsonValue(m_stats_update_time, json[QString("statsUpdateTime")]);
    m_stats_update_time_isSet = !json[QString("statsUpdateTime")].isNull() && m_stats_update_time_isValid;

    m_target_column_correlations_isValid = ::OpenAPI::fromJsonValue(m_target_column_correlations, json[QString("targetColumnCorrelations")]);
    m_target_column_correlations_isSet = !json[QString("targetColumnCorrelations")].isNull() && m_target_column_correlations_isValid;

    m_target_column_spec_id_isValid = ::OpenAPI::fromJsonValue(m_target_column_spec_id, json[QString("targetColumnSpecId")]);
    m_target_column_spec_id_isSet = !json[QString("targetColumnSpecId")].isNull() && m_target_column_spec_id_isValid;

    m_weight_column_spec_id_isValid = ::OpenAPI::fromJsonValue(m_weight_column_spec_id, json[QString("weightColumnSpecId")]);
    m_weight_column_spec_id_isSet = !json[QString("weightColumnSpecId")].isNull() && m_weight_column_spec_id_isValid;
}

QString OAITablesDatasetMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITablesDatasetMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_ml_use_column_spec_id_isSet) {
        obj.insert(QString("mlUseColumnSpecId"), ::OpenAPI::toJsonValue(m_ml_use_column_spec_id));
    }
    if (m_primary_table_spec_id_isSet) {
        obj.insert(QString("primaryTableSpecId"), ::OpenAPI::toJsonValue(m_primary_table_spec_id));
    }
    if (m_stats_update_time_isSet) {
        obj.insert(QString("statsUpdateTime"), ::OpenAPI::toJsonValue(m_stats_update_time));
    }
    if (m_target_column_correlations.size() > 0) {
        obj.insert(QString("targetColumnCorrelations"), ::OpenAPI::toJsonValue(m_target_column_correlations));
    }
    if (m_target_column_spec_id_isSet) {
        obj.insert(QString("targetColumnSpecId"), ::OpenAPI::toJsonValue(m_target_column_spec_id));
    }
    if (m_weight_column_spec_id_isSet) {
        obj.insert(QString("weightColumnSpecId"), ::OpenAPI::toJsonValue(m_weight_column_spec_id));
    }
    return obj;
}

QString OAITablesDatasetMetadata::getMlUseColumnSpecId() const {
    return m_ml_use_column_spec_id;
}
void OAITablesDatasetMetadata::setMlUseColumnSpecId(const QString &ml_use_column_spec_id) {
    m_ml_use_column_spec_id = ml_use_column_spec_id;
    m_ml_use_column_spec_id_isSet = true;
}

bool OAITablesDatasetMetadata::is_ml_use_column_spec_id_Set() const{
    return m_ml_use_column_spec_id_isSet;
}

bool OAITablesDatasetMetadata::is_ml_use_column_spec_id_Valid() const{
    return m_ml_use_column_spec_id_isValid;
}

QString OAITablesDatasetMetadata::getPrimaryTableSpecId() const {
    return m_primary_table_spec_id;
}
void OAITablesDatasetMetadata::setPrimaryTableSpecId(const QString &primary_table_spec_id) {
    m_primary_table_spec_id = primary_table_spec_id;
    m_primary_table_spec_id_isSet = true;
}

bool OAITablesDatasetMetadata::is_primary_table_spec_id_Set() const{
    return m_primary_table_spec_id_isSet;
}

bool OAITablesDatasetMetadata::is_primary_table_spec_id_Valid() const{
    return m_primary_table_spec_id_isValid;
}

QString OAITablesDatasetMetadata::getStatsUpdateTime() const {
    return m_stats_update_time;
}
void OAITablesDatasetMetadata::setStatsUpdateTime(const QString &stats_update_time) {
    m_stats_update_time = stats_update_time;
    m_stats_update_time_isSet = true;
}

bool OAITablesDatasetMetadata::is_stats_update_time_Set() const{
    return m_stats_update_time_isSet;
}

bool OAITablesDatasetMetadata::is_stats_update_time_Valid() const{
    return m_stats_update_time_isValid;
}

QMap<QString, OAICorrelationStats> OAITablesDatasetMetadata::getTargetColumnCorrelations() const {
    return m_target_column_correlations;
}
void OAITablesDatasetMetadata::setTargetColumnCorrelations(const QMap<QString, OAICorrelationStats> &target_column_correlations) {
    m_target_column_correlations = target_column_correlations;
    m_target_column_correlations_isSet = true;
}

bool OAITablesDatasetMetadata::is_target_column_correlations_Set() const{
    return m_target_column_correlations_isSet;
}

bool OAITablesDatasetMetadata::is_target_column_correlations_Valid() const{
    return m_target_column_correlations_isValid;
}

QString OAITablesDatasetMetadata::getTargetColumnSpecId() const {
    return m_target_column_spec_id;
}
void OAITablesDatasetMetadata::setTargetColumnSpecId(const QString &target_column_spec_id) {
    m_target_column_spec_id = target_column_spec_id;
    m_target_column_spec_id_isSet = true;
}

bool OAITablesDatasetMetadata::is_target_column_spec_id_Set() const{
    return m_target_column_spec_id_isSet;
}

bool OAITablesDatasetMetadata::is_target_column_spec_id_Valid() const{
    return m_target_column_spec_id_isValid;
}

QString OAITablesDatasetMetadata::getWeightColumnSpecId() const {
    return m_weight_column_spec_id;
}
void OAITablesDatasetMetadata::setWeightColumnSpecId(const QString &weight_column_spec_id) {
    m_weight_column_spec_id = weight_column_spec_id;
    m_weight_column_spec_id_isSet = true;
}

bool OAITablesDatasetMetadata::is_weight_column_spec_id_Set() const{
    return m_weight_column_spec_id_isSet;
}

bool OAITablesDatasetMetadata::is_weight_column_spec_id_Valid() const{
    return m_weight_column_spec_id_isValid;
}

bool OAITablesDatasetMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ml_use_column_spec_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_table_spec_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_column_correlations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_column_spec_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_column_spec_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITablesDatasetMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
