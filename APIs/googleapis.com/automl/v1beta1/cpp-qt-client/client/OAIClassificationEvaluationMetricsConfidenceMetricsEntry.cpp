/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassificationEvaluationMetricsConfidenceMetricsEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassificationEvaluationMetricsConfidenceMetricsEntry::OAIClassificationEvaluationMetricsConfidenceMetricsEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassificationEvaluationMetricsConfidenceMetricsEntry::OAIClassificationEvaluationMetricsConfidenceMetricsEntry() {
    this->initializeModel();
}

OAIClassificationEvaluationMetricsConfidenceMetricsEntry::~OAIClassificationEvaluationMetricsConfidenceMetricsEntry() {}

void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::initializeModel() {

    m_confidence_threshold_isSet = false;
    m_confidence_threshold_isValid = false;

    m_f1_score_isSet = false;
    m_f1_score_isValid = false;

    m_f1_score_at1_isSet = false;
    m_f1_score_at1_isValid = false;

    m_false_negative_count_isSet = false;
    m_false_negative_count_isValid = false;

    m_false_positive_count_isSet = false;
    m_false_positive_count_isValid = false;

    m_false_positive_rate_isSet = false;
    m_false_positive_rate_isValid = false;

    m_false_positive_rate_at1_isSet = false;
    m_false_positive_rate_at1_isValid = false;

    m_position_threshold_isSet = false;
    m_position_threshold_isValid = false;

    m_precision_isSet = false;
    m_precision_isValid = false;

    m_precision_at1_isSet = false;
    m_precision_at1_isValid = false;

    m_recall_isSet = false;
    m_recall_isValid = false;

    m_recall_at1_isSet = false;
    m_recall_at1_isValid = false;

    m_true_negative_count_isSet = false;
    m_true_negative_count_isValid = false;

    m_true_positive_count_isSet = false;
    m_true_positive_count_isValid = false;
}

void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::fromJsonObject(QJsonObject json) {

    m_confidence_threshold_isValid = ::OpenAPI::fromJsonValue(m_confidence_threshold, json[QString("confidenceThreshold")]);
    m_confidence_threshold_isSet = !json[QString("confidenceThreshold")].isNull() && m_confidence_threshold_isValid;

    m_f1_score_isValid = ::OpenAPI::fromJsonValue(m_f1_score, json[QString("f1Score")]);
    m_f1_score_isSet = !json[QString("f1Score")].isNull() && m_f1_score_isValid;

    m_f1_score_at1_isValid = ::OpenAPI::fromJsonValue(m_f1_score_at1, json[QString("f1ScoreAt1")]);
    m_f1_score_at1_isSet = !json[QString("f1ScoreAt1")].isNull() && m_f1_score_at1_isValid;

    m_false_negative_count_isValid = ::OpenAPI::fromJsonValue(m_false_negative_count, json[QString("falseNegativeCount")]);
    m_false_negative_count_isSet = !json[QString("falseNegativeCount")].isNull() && m_false_negative_count_isValid;

    m_false_positive_count_isValid = ::OpenAPI::fromJsonValue(m_false_positive_count, json[QString("falsePositiveCount")]);
    m_false_positive_count_isSet = !json[QString("falsePositiveCount")].isNull() && m_false_positive_count_isValid;

    m_false_positive_rate_isValid = ::OpenAPI::fromJsonValue(m_false_positive_rate, json[QString("falsePositiveRate")]);
    m_false_positive_rate_isSet = !json[QString("falsePositiveRate")].isNull() && m_false_positive_rate_isValid;

    m_false_positive_rate_at1_isValid = ::OpenAPI::fromJsonValue(m_false_positive_rate_at1, json[QString("falsePositiveRateAt1")]);
    m_false_positive_rate_at1_isSet = !json[QString("falsePositiveRateAt1")].isNull() && m_false_positive_rate_at1_isValid;

    m_position_threshold_isValid = ::OpenAPI::fromJsonValue(m_position_threshold, json[QString("positionThreshold")]);
    m_position_threshold_isSet = !json[QString("positionThreshold")].isNull() && m_position_threshold_isValid;

    m_precision_isValid = ::OpenAPI::fromJsonValue(m_precision, json[QString("precision")]);
    m_precision_isSet = !json[QString("precision")].isNull() && m_precision_isValid;

    m_precision_at1_isValid = ::OpenAPI::fromJsonValue(m_precision_at1, json[QString("precisionAt1")]);
    m_precision_at1_isSet = !json[QString("precisionAt1")].isNull() && m_precision_at1_isValid;

    m_recall_isValid = ::OpenAPI::fromJsonValue(m_recall, json[QString("recall")]);
    m_recall_isSet = !json[QString("recall")].isNull() && m_recall_isValid;

    m_recall_at1_isValid = ::OpenAPI::fromJsonValue(m_recall_at1, json[QString("recallAt1")]);
    m_recall_at1_isSet = !json[QString("recallAt1")].isNull() && m_recall_at1_isValid;

    m_true_negative_count_isValid = ::OpenAPI::fromJsonValue(m_true_negative_count, json[QString("trueNegativeCount")]);
    m_true_negative_count_isSet = !json[QString("trueNegativeCount")].isNull() && m_true_negative_count_isValid;

    m_true_positive_count_isValid = ::OpenAPI::fromJsonValue(m_true_positive_count, json[QString("truePositiveCount")]);
    m_true_positive_count_isSet = !json[QString("truePositiveCount")].isNull() && m_true_positive_count_isValid;
}

QString OAIClassificationEvaluationMetricsConfidenceMetricsEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassificationEvaluationMetricsConfidenceMetricsEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_confidence_threshold_isSet) {
        obj.insert(QString("confidenceThreshold"), ::OpenAPI::toJsonValue(m_confidence_threshold));
    }
    if (m_f1_score_isSet) {
        obj.insert(QString("f1Score"), ::OpenAPI::toJsonValue(m_f1_score));
    }
    if (m_f1_score_at1_isSet) {
        obj.insert(QString("f1ScoreAt1"), ::OpenAPI::toJsonValue(m_f1_score_at1));
    }
    if (m_false_negative_count_isSet) {
        obj.insert(QString("falseNegativeCount"), ::OpenAPI::toJsonValue(m_false_negative_count));
    }
    if (m_false_positive_count_isSet) {
        obj.insert(QString("falsePositiveCount"), ::OpenAPI::toJsonValue(m_false_positive_count));
    }
    if (m_false_positive_rate_isSet) {
        obj.insert(QString("falsePositiveRate"), ::OpenAPI::toJsonValue(m_false_positive_rate));
    }
    if (m_false_positive_rate_at1_isSet) {
        obj.insert(QString("falsePositiveRateAt1"), ::OpenAPI::toJsonValue(m_false_positive_rate_at1));
    }
    if (m_position_threshold_isSet) {
        obj.insert(QString("positionThreshold"), ::OpenAPI::toJsonValue(m_position_threshold));
    }
    if (m_precision_isSet) {
        obj.insert(QString("precision"), ::OpenAPI::toJsonValue(m_precision));
    }
    if (m_precision_at1_isSet) {
        obj.insert(QString("precisionAt1"), ::OpenAPI::toJsonValue(m_precision_at1));
    }
    if (m_recall_isSet) {
        obj.insert(QString("recall"), ::OpenAPI::toJsonValue(m_recall));
    }
    if (m_recall_at1_isSet) {
        obj.insert(QString("recallAt1"), ::OpenAPI::toJsonValue(m_recall_at1));
    }
    if (m_true_negative_count_isSet) {
        obj.insert(QString("trueNegativeCount"), ::OpenAPI::toJsonValue(m_true_negative_count));
    }
    if (m_true_positive_count_isSet) {
        obj.insert(QString("truePositiveCount"), ::OpenAPI::toJsonValue(m_true_positive_count));
    }
    return obj;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getConfidenceThreshold() const {
    return m_confidence_threshold;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setConfidenceThreshold(const float &confidence_threshold) {
    m_confidence_threshold = confidence_threshold;
    m_confidence_threshold_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_confidence_threshold_Set() const{
    return m_confidence_threshold_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_confidence_threshold_Valid() const{
    return m_confidence_threshold_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getF1Score() const {
    return m_f1_score;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setF1Score(const float &f1_score) {
    m_f1_score = f1_score;
    m_f1_score_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_f1_score_Set() const{
    return m_f1_score_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_f1_score_Valid() const{
    return m_f1_score_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getF1ScoreAt1() const {
    return m_f1_score_at1;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setF1ScoreAt1(const float &f1_score_at1) {
    m_f1_score_at1 = f1_score_at1;
    m_f1_score_at1_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_f1_score_at1_Set() const{
    return m_f1_score_at1_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_f1_score_at1_Valid() const{
    return m_f1_score_at1_isValid;
}

QString OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getFalseNegativeCount() const {
    return m_false_negative_count;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setFalseNegativeCount(const QString &false_negative_count) {
    m_false_negative_count = false_negative_count;
    m_false_negative_count_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_negative_count_Set() const{
    return m_false_negative_count_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_negative_count_Valid() const{
    return m_false_negative_count_isValid;
}

QString OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getFalsePositiveCount() const {
    return m_false_positive_count;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setFalsePositiveCount(const QString &false_positive_count) {
    m_false_positive_count = false_positive_count;
    m_false_positive_count_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_positive_count_Set() const{
    return m_false_positive_count_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_positive_count_Valid() const{
    return m_false_positive_count_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getFalsePositiveRate() const {
    return m_false_positive_rate;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setFalsePositiveRate(const float &false_positive_rate) {
    m_false_positive_rate = false_positive_rate;
    m_false_positive_rate_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_positive_rate_Set() const{
    return m_false_positive_rate_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_positive_rate_Valid() const{
    return m_false_positive_rate_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getFalsePositiveRateAt1() const {
    return m_false_positive_rate_at1;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setFalsePositiveRateAt1(const float &false_positive_rate_at1) {
    m_false_positive_rate_at1 = false_positive_rate_at1;
    m_false_positive_rate_at1_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_positive_rate_at1_Set() const{
    return m_false_positive_rate_at1_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_false_positive_rate_at1_Valid() const{
    return m_false_positive_rate_at1_isValid;
}

qint32 OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getPositionThreshold() const {
    return m_position_threshold;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setPositionThreshold(const qint32 &position_threshold) {
    m_position_threshold = position_threshold;
    m_position_threshold_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_position_threshold_Set() const{
    return m_position_threshold_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_position_threshold_Valid() const{
    return m_position_threshold_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getPrecision() const {
    return m_precision;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setPrecision(const float &precision) {
    m_precision = precision;
    m_precision_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_precision_Set() const{
    return m_precision_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_precision_Valid() const{
    return m_precision_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getPrecisionAt1() const {
    return m_precision_at1;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setPrecisionAt1(const float &precision_at1) {
    m_precision_at1 = precision_at1;
    m_precision_at1_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_precision_at1_Set() const{
    return m_precision_at1_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_precision_at1_Valid() const{
    return m_precision_at1_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getRecall() const {
    return m_recall;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setRecall(const float &recall) {
    m_recall = recall;
    m_recall_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_recall_Set() const{
    return m_recall_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_recall_Valid() const{
    return m_recall_isValid;
}

float OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getRecallAt1() const {
    return m_recall_at1;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setRecallAt1(const float &recall_at1) {
    m_recall_at1 = recall_at1;
    m_recall_at1_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_recall_at1_Set() const{
    return m_recall_at1_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_recall_at1_Valid() const{
    return m_recall_at1_isValid;
}

QString OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getTrueNegativeCount() const {
    return m_true_negative_count;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setTrueNegativeCount(const QString &true_negative_count) {
    m_true_negative_count = true_negative_count;
    m_true_negative_count_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_true_negative_count_Set() const{
    return m_true_negative_count_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_true_negative_count_Valid() const{
    return m_true_negative_count_isValid;
}

QString OAIClassificationEvaluationMetricsConfidenceMetricsEntry::getTruePositiveCount() const {
    return m_true_positive_count;
}
void OAIClassificationEvaluationMetricsConfidenceMetricsEntry::setTruePositiveCount(const QString &true_positive_count) {
    m_true_positive_count = true_positive_count;
    m_true_positive_count_isSet = true;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_true_positive_count_Set() const{
    return m_true_positive_count_isSet;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::is_true_positive_count_Valid() const{
    return m_true_positive_count_isValid;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confidence_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f1_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f1_score_at1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_negative_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_positive_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_positive_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_false_positive_rate_at1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_threshold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precision_at1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recall_at1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_negative_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_true_positive_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassificationEvaluationMetricsConfidenceMetricsEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
