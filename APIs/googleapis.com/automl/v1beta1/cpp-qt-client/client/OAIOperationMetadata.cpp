/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationMetadata::OAIOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationMetadata::OAIOperationMetadata() {
    this->initializeModel();
}

OAIOperationMetadata::~OAIOperationMetadata() {}

void OAIOperationMetadata::initializeModel() {

    m_batch_predict_details_isSet = false;
    m_batch_predict_details_isValid = false;

    m_create_model_details_isSet = false;
    m_create_model_details_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_details_isSet = false;
    m_delete_details_isValid = false;

    m_deploy_model_details_isSet = false;
    m_deploy_model_details_isValid = false;

    m_export_data_details_isSet = false;
    m_export_data_details_isValid = false;

    m_export_evaluated_examples_details_isSet = false;
    m_export_evaluated_examples_details_isValid = false;

    m_export_model_details_isSet = false;
    m_export_model_details_isValid = false;

    m_import_data_details_isSet = false;
    m_import_data_details_isValid = false;

    m_partial_failures_isSet = false;
    m_partial_failures_isValid = false;

    m_progress_percent_isSet = false;
    m_progress_percent_isValid = false;

    m_undeploy_model_details_isSet = false;
    m_undeploy_model_details_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationMetadata::fromJsonObject(QJsonObject json) {

    m_batch_predict_details_isValid = ::OpenAPI::fromJsonValue(m_batch_predict_details, json[QString("batchPredictDetails")]);
    m_batch_predict_details_isSet = !json[QString("batchPredictDetails")].isNull() && m_batch_predict_details_isValid;

    m_create_model_details_isValid = ::OpenAPI::fromJsonValue(m_create_model_details, json[QString("createModelDetails")]);
    m_create_model_details_isSet = !json[QString("createModelDetails")].isNull() && m_create_model_details_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_details_isValid = ::OpenAPI::fromJsonValue(m_delete_details, json[QString("deleteDetails")]);
    m_delete_details_isSet = !json[QString("deleteDetails")].isNull() && m_delete_details_isValid;

    m_deploy_model_details_isValid = ::OpenAPI::fromJsonValue(m_deploy_model_details, json[QString("deployModelDetails")]);
    m_deploy_model_details_isSet = !json[QString("deployModelDetails")].isNull() && m_deploy_model_details_isValid;

    m_export_data_details_isValid = ::OpenAPI::fromJsonValue(m_export_data_details, json[QString("exportDataDetails")]);
    m_export_data_details_isSet = !json[QString("exportDataDetails")].isNull() && m_export_data_details_isValid;

    m_export_evaluated_examples_details_isValid = ::OpenAPI::fromJsonValue(m_export_evaluated_examples_details, json[QString("exportEvaluatedExamplesDetails")]);
    m_export_evaluated_examples_details_isSet = !json[QString("exportEvaluatedExamplesDetails")].isNull() && m_export_evaluated_examples_details_isValid;

    m_export_model_details_isValid = ::OpenAPI::fromJsonValue(m_export_model_details, json[QString("exportModelDetails")]);
    m_export_model_details_isSet = !json[QString("exportModelDetails")].isNull() && m_export_model_details_isValid;

    m_import_data_details_isValid = ::OpenAPI::fromJsonValue(m_import_data_details, json[QString("importDataDetails")]);
    m_import_data_details_isSet = !json[QString("importDataDetails")].isNull() && m_import_data_details_isValid;

    m_partial_failures_isValid = ::OpenAPI::fromJsonValue(m_partial_failures, json[QString("partialFailures")]);
    m_partial_failures_isSet = !json[QString("partialFailures")].isNull() && m_partial_failures_isValid;

    m_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_progress_percent, json[QString("progressPercent")]);
    m_progress_percent_isSet = !json[QString("progressPercent")].isNull() && m_progress_percent_isValid;

    m_undeploy_model_details_isValid = ::OpenAPI::fromJsonValue(m_undeploy_model_details, json[QString("undeployModelDetails")]);
    m_undeploy_model_details_isSet = !json[QString("undeployModelDetails")].isNull() && m_undeploy_model_details_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_predict_details.isSet()) {
        obj.insert(QString("batchPredictDetails"), ::OpenAPI::toJsonValue(m_batch_predict_details));
    }
    if (m_create_model_details_isSet) {
        obj.insert(QString("createModelDetails"), ::OpenAPI::toJsonValue(m_create_model_details));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_details_isSet) {
        obj.insert(QString("deleteDetails"), ::OpenAPI::toJsonValue(m_delete_details));
    }
    if (m_deploy_model_details_isSet) {
        obj.insert(QString("deployModelDetails"), ::OpenAPI::toJsonValue(m_deploy_model_details));
    }
    if (m_export_data_details.isSet()) {
        obj.insert(QString("exportDataDetails"), ::OpenAPI::toJsonValue(m_export_data_details));
    }
    if (m_export_evaluated_examples_details.isSet()) {
        obj.insert(QString("exportEvaluatedExamplesDetails"), ::OpenAPI::toJsonValue(m_export_evaluated_examples_details));
    }
    if (m_export_model_details.isSet()) {
        obj.insert(QString("exportModelDetails"), ::OpenAPI::toJsonValue(m_export_model_details));
    }
    if (m_import_data_details_isSet) {
        obj.insert(QString("importDataDetails"), ::OpenAPI::toJsonValue(m_import_data_details));
    }
    if (m_partial_failures.size() > 0) {
        obj.insert(QString("partialFailures"), ::OpenAPI::toJsonValue(m_partial_failures));
    }
    if (m_progress_percent_isSet) {
        obj.insert(QString("progressPercent"), ::OpenAPI::toJsonValue(m_progress_percent));
    }
    if (m_undeploy_model_details_isSet) {
        obj.insert(QString("undeployModelDetails"), ::OpenAPI::toJsonValue(m_undeploy_model_details));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIBatchPredictOperationMetadata OAIOperationMetadata::getBatchPredictDetails() const {
    return m_batch_predict_details;
}
void OAIOperationMetadata::setBatchPredictDetails(const OAIBatchPredictOperationMetadata &batch_predict_details) {
    m_batch_predict_details = batch_predict_details;
    m_batch_predict_details_isSet = true;
}

bool OAIOperationMetadata::is_batch_predict_details_Set() const{
    return m_batch_predict_details_isSet;
}

bool OAIOperationMetadata::is_batch_predict_details_Valid() const{
    return m_batch_predict_details_isValid;
}

OAIObject OAIOperationMetadata::getCreateModelDetails() const {
    return m_create_model_details;
}
void OAIOperationMetadata::setCreateModelDetails(const OAIObject &create_model_details) {
    m_create_model_details = create_model_details;
    m_create_model_details_isSet = true;
}

bool OAIOperationMetadata::is_create_model_details_Set() const{
    return m_create_model_details_isSet;
}

bool OAIOperationMetadata::is_create_model_details_Valid() const{
    return m_create_model_details_isValid;
}

QString OAIOperationMetadata::getCreateTime() const {
    return m_create_time;
}
void OAIOperationMetadata::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIOperationMetadata::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIOperationMetadata::is_create_time_Valid() const{
    return m_create_time_isValid;
}

OAIObject OAIOperationMetadata::getDeleteDetails() const {
    return m_delete_details;
}
void OAIOperationMetadata::setDeleteDetails(const OAIObject &delete_details) {
    m_delete_details = delete_details;
    m_delete_details_isSet = true;
}

bool OAIOperationMetadata::is_delete_details_Set() const{
    return m_delete_details_isSet;
}

bool OAIOperationMetadata::is_delete_details_Valid() const{
    return m_delete_details_isValid;
}

OAIObject OAIOperationMetadata::getDeployModelDetails() const {
    return m_deploy_model_details;
}
void OAIOperationMetadata::setDeployModelDetails(const OAIObject &deploy_model_details) {
    m_deploy_model_details = deploy_model_details;
    m_deploy_model_details_isSet = true;
}

bool OAIOperationMetadata::is_deploy_model_details_Set() const{
    return m_deploy_model_details_isSet;
}

bool OAIOperationMetadata::is_deploy_model_details_Valid() const{
    return m_deploy_model_details_isValid;
}

OAIExportDataOperationMetadata OAIOperationMetadata::getExportDataDetails() const {
    return m_export_data_details;
}
void OAIOperationMetadata::setExportDataDetails(const OAIExportDataOperationMetadata &export_data_details) {
    m_export_data_details = export_data_details;
    m_export_data_details_isSet = true;
}

bool OAIOperationMetadata::is_export_data_details_Set() const{
    return m_export_data_details_isSet;
}

bool OAIOperationMetadata::is_export_data_details_Valid() const{
    return m_export_data_details_isValid;
}

OAIExportEvaluatedExamplesOperationMetadata OAIOperationMetadata::getExportEvaluatedExamplesDetails() const {
    return m_export_evaluated_examples_details;
}
void OAIOperationMetadata::setExportEvaluatedExamplesDetails(const OAIExportEvaluatedExamplesOperationMetadata &export_evaluated_examples_details) {
    m_export_evaluated_examples_details = export_evaluated_examples_details;
    m_export_evaluated_examples_details_isSet = true;
}

bool OAIOperationMetadata::is_export_evaluated_examples_details_Set() const{
    return m_export_evaluated_examples_details_isSet;
}

bool OAIOperationMetadata::is_export_evaluated_examples_details_Valid() const{
    return m_export_evaluated_examples_details_isValid;
}

OAIExportModelOperationMetadata OAIOperationMetadata::getExportModelDetails() const {
    return m_export_model_details;
}
void OAIOperationMetadata::setExportModelDetails(const OAIExportModelOperationMetadata &export_model_details) {
    m_export_model_details = export_model_details;
    m_export_model_details_isSet = true;
}

bool OAIOperationMetadata::is_export_model_details_Set() const{
    return m_export_model_details_isSet;
}

bool OAIOperationMetadata::is_export_model_details_Valid() const{
    return m_export_model_details_isValid;
}

OAIObject OAIOperationMetadata::getImportDataDetails() const {
    return m_import_data_details;
}
void OAIOperationMetadata::setImportDataDetails(const OAIObject &import_data_details) {
    m_import_data_details = import_data_details;
    m_import_data_details_isSet = true;
}

bool OAIOperationMetadata::is_import_data_details_Set() const{
    return m_import_data_details_isSet;
}

bool OAIOperationMetadata::is_import_data_details_Valid() const{
    return m_import_data_details_isValid;
}

QList<OAIStatus> OAIOperationMetadata::getPartialFailures() const {
    return m_partial_failures;
}
void OAIOperationMetadata::setPartialFailures(const QList<OAIStatus> &partial_failures) {
    m_partial_failures = partial_failures;
    m_partial_failures_isSet = true;
}

bool OAIOperationMetadata::is_partial_failures_Set() const{
    return m_partial_failures_isSet;
}

bool OAIOperationMetadata::is_partial_failures_Valid() const{
    return m_partial_failures_isValid;
}

qint32 OAIOperationMetadata::getProgressPercent() const {
    return m_progress_percent;
}
void OAIOperationMetadata::setProgressPercent(const qint32 &progress_percent) {
    m_progress_percent = progress_percent;
    m_progress_percent_isSet = true;
}

bool OAIOperationMetadata::is_progress_percent_Set() const{
    return m_progress_percent_isSet;
}

bool OAIOperationMetadata::is_progress_percent_Valid() const{
    return m_progress_percent_isValid;
}

OAIObject OAIOperationMetadata::getUndeployModelDetails() const {
    return m_undeploy_model_details;
}
void OAIOperationMetadata::setUndeployModelDetails(const OAIObject &undeploy_model_details) {
    m_undeploy_model_details = undeploy_model_details;
    m_undeploy_model_details_isSet = true;
}

bool OAIOperationMetadata::is_undeploy_model_details_Set() const{
    return m_undeploy_model_details_isSet;
}

bool OAIOperationMetadata::is_undeploy_model_details_Valid() const{
    return m_undeploy_model_details_isValid;
}

QString OAIOperationMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIOperationMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIOperationMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIOperationMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_predict_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_model_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_model_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_data_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_evaluated_examples_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_model_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_data_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_failures.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_undeploy_model_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
