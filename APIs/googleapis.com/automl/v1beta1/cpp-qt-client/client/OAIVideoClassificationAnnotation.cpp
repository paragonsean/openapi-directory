/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoClassificationAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoClassificationAnnotation::OAIVideoClassificationAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoClassificationAnnotation::OAIVideoClassificationAnnotation() {
    this->initializeModel();
}

OAIVideoClassificationAnnotation::~OAIVideoClassificationAnnotation() {}

void OAIVideoClassificationAnnotation::initializeModel() {

    m_classification_annotation_isSet = false;
    m_classification_annotation_isValid = false;

    m_time_segment_isSet = false;
    m_time_segment_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIVideoClassificationAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoClassificationAnnotation::fromJsonObject(QJsonObject json) {

    m_classification_annotation_isValid = ::OpenAPI::fromJsonValue(m_classification_annotation, json[QString("classificationAnnotation")]);
    m_classification_annotation_isSet = !json[QString("classificationAnnotation")].isNull() && m_classification_annotation_isValid;

    m_time_segment_isValid = ::OpenAPI::fromJsonValue(m_time_segment, json[QString("timeSegment")]);
    m_time_segment_isSet = !json[QString("timeSegment")].isNull() && m_time_segment_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIVideoClassificationAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoClassificationAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_classification_annotation.isSet()) {
        obj.insert(QString("classificationAnnotation"), ::OpenAPI::toJsonValue(m_classification_annotation));
    }
    if (m_time_segment.isSet()) {
        obj.insert(QString("timeSegment"), ::OpenAPI::toJsonValue(m_time_segment));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIClassificationAnnotation OAIVideoClassificationAnnotation::getClassificationAnnotation() const {
    return m_classification_annotation;
}
void OAIVideoClassificationAnnotation::setClassificationAnnotation(const OAIClassificationAnnotation &classification_annotation) {
    m_classification_annotation = classification_annotation;
    m_classification_annotation_isSet = true;
}

bool OAIVideoClassificationAnnotation::is_classification_annotation_Set() const{
    return m_classification_annotation_isSet;
}

bool OAIVideoClassificationAnnotation::is_classification_annotation_Valid() const{
    return m_classification_annotation_isValid;
}

OAITimeSegment OAIVideoClassificationAnnotation::getTimeSegment() const {
    return m_time_segment;
}
void OAIVideoClassificationAnnotation::setTimeSegment(const OAITimeSegment &time_segment) {
    m_time_segment = time_segment;
    m_time_segment_isSet = true;
}

bool OAIVideoClassificationAnnotation::is_time_segment_Set() const{
    return m_time_segment_isSet;
}

bool OAIVideoClassificationAnnotation::is_time_segment_Valid() const{
    return m_time_segment_isValid;
}

QString OAIVideoClassificationAnnotation::getType() const {
    return m_type;
}
void OAIVideoClassificationAnnotation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIVideoClassificationAnnotation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIVideoClassificationAnnotation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIVideoClassificationAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_classification_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoClassificationAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
