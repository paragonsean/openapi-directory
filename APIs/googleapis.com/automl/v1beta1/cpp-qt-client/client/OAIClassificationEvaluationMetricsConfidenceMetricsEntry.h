/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClassificationEvaluationMetricsConfidenceMetricsEntry.h
 *
 * Metrics for a single confidence threshold.
 */

#ifndef OAIClassificationEvaluationMetricsConfidenceMetricsEntry_H
#define OAIClassificationEvaluationMetricsConfidenceMetricsEntry_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIClassificationEvaluationMetricsConfidenceMetricsEntry : public OAIObject {
public:
    OAIClassificationEvaluationMetricsConfidenceMetricsEntry();
    OAIClassificationEvaluationMetricsConfidenceMetricsEntry(QString json);
    ~OAIClassificationEvaluationMetricsConfidenceMetricsEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getConfidenceThreshold() const;
    void setConfidenceThreshold(const float &confidence_threshold);
    bool is_confidence_threshold_Set() const;
    bool is_confidence_threshold_Valid() const;

    float getF1Score() const;
    void setF1Score(const float &f1_score);
    bool is_f1_score_Set() const;
    bool is_f1_score_Valid() const;

    float getF1ScoreAt1() const;
    void setF1ScoreAt1(const float &f1_score_at1);
    bool is_f1_score_at1_Set() const;
    bool is_f1_score_at1_Valid() const;

    QString getFalseNegativeCount() const;
    void setFalseNegativeCount(const QString &false_negative_count);
    bool is_false_negative_count_Set() const;
    bool is_false_negative_count_Valid() const;

    QString getFalsePositiveCount() const;
    void setFalsePositiveCount(const QString &false_positive_count);
    bool is_false_positive_count_Set() const;
    bool is_false_positive_count_Valid() const;

    float getFalsePositiveRate() const;
    void setFalsePositiveRate(const float &false_positive_rate);
    bool is_false_positive_rate_Set() const;
    bool is_false_positive_rate_Valid() const;

    float getFalsePositiveRateAt1() const;
    void setFalsePositiveRateAt1(const float &false_positive_rate_at1);
    bool is_false_positive_rate_at1_Set() const;
    bool is_false_positive_rate_at1_Valid() const;

    qint32 getPositionThreshold() const;
    void setPositionThreshold(const qint32 &position_threshold);
    bool is_position_threshold_Set() const;
    bool is_position_threshold_Valid() const;

    float getPrecision() const;
    void setPrecision(const float &precision);
    bool is_precision_Set() const;
    bool is_precision_Valid() const;

    float getPrecisionAt1() const;
    void setPrecisionAt1(const float &precision_at1);
    bool is_precision_at1_Set() const;
    bool is_precision_at1_Valid() const;

    float getRecall() const;
    void setRecall(const float &recall);
    bool is_recall_Set() const;
    bool is_recall_Valid() const;

    float getRecallAt1() const;
    void setRecallAt1(const float &recall_at1);
    bool is_recall_at1_Set() const;
    bool is_recall_at1_Valid() const;

    QString getTrueNegativeCount() const;
    void setTrueNegativeCount(const QString &true_negative_count);
    bool is_true_negative_count_Set() const;
    bool is_true_negative_count_Valid() const;

    QString getTruePositiveCount() const;
    void setTruePositiveCount(const QString &true_positive_count);
    bool is_true_positive_count_Set() const;
    bool is_true_positive_count_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_confidence_threshold;
    bool m_confidence_threshold_isSet;
    bool m_confidence_threshold_isValid;

    float m_f1_score;
    bool m_f1_score_isSet;
    bool m_f1_score_isValid;

    float m_f1_score_at1;
    bool m_f1_score_at1_isSet;
    bool m_f1_score_at1_isValid;

    QString m_false_negative_count;
    bool m_false_negative_count_isSet;
    bool m_false_negative_count_isValid;

    QString m_false_positive_count;
    bool m_false_positive_count_isSet;
    bool m_false_positive_count_isValid;

    float m_false_positive_rate;
    bool m_false_positive_rate_isSet;
    bool m_false_positive_rate_isValid;

    float m_false_positive_rate_at1;
    bool m_false_positive_rate_at1_isSet;
    bool m_false_positive_rate_at1_isValid;

    qint32 m_position_threshold;
    bool m_position_threshold_isSet;
    bool m_position_threshold_isValid;

    float m_precision;
    bool m_precision_isSet;
    bool m_precision_isValid;

    float m_precision_at1;
    bool m_precision_at1_isSet;
    bool m_precision_at1_isValid;

    float m_recall;
    bool m_recall_isSet;
    bool m_recall_isValid;

    float m_recall_at1;
    bool m_recall_at1_isSet;
    bool m_recall_at1_isValid;

    QString m_true_negative_count;
    bool m_true_negative_count_isSet;
    bool m_true_negative_count_isValid;

    QString m_true_positive_count;
    bool m_true_positive_count_isSet;
    bool m_true_positive_count_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClassificationEvaluationMetricsConfidenceMetricsEntry)

#endif // OAIClassificationEvaluationMetricsConfidenceMetricsEntry_H
