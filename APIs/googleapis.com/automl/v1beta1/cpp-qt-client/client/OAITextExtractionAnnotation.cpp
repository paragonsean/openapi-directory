/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextExtractionAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextExtractionAnnotation::OAITextExtractionAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextExtractionAnnotation::OAITextExtractionAnnotation() {
    this->initializeModel();
}

OAITextExtractionAnnotation::~OAITextExtractionAnnotation() {}

void OAITextExtractionAnnotation::initializeModel() {

    m_score_isSet = false;
    m_score_isValid = false;

    m_text_segment_isSet = false;
    m_text_segment_isValid = false;
}

void OAITextExtractionAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextExtractionAnnotation::fromJsonObject(QJsonObject json) {

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_text_segment_isValid = ::OpenAPI::fromJsonValue(m_text_segment, json[QString("textSegment")]);
    m_text_segment_isSet = !json[QString("textSegment")].isNull() && m_text_segment_isValid;
}

QString OAITextExtractionAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextExtractionAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_text_segment.isSet()) {
        obj.insert(QString("textSegment"), ::OpenAPI::toJsonValue(m_text_segment));
    }
    return obj;
}

float OAITextExtractionAnnotation::getScore() const {
    return m_score;
}
void OAITextExtractionAnnotation::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITextExtractionAnnotation::is_score_Set() const{
    return m_score_isSet;
}

bool OAITextExtractionAnnotation::is_score_Valid() const{
    return m_score_isValid;
}

OAITextSegment OAITextExtractionAnnotation::getTextSegment() const {
    return m_text_segment;
}
void OAITextExtractionAnnotation::setTextSegment(const OAITextSegment &text_segment) {
    m_text_segment = text_segment;
    m_text_segment_isSet = true;
}

bool OAITextExtractionAnnotation::is_text_segment_Set() const{
    return m_text_segment_isSet;
}

bool OAITextExtractionAnnotation::is_text_segment_Valid() const{
    return m_text_segment_isValid;
}

bool OAITextExtractionAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_segment.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextExtractionAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
