/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFloat64Stats.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFloat64Stats::OAIFloat64Stats(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFloat64Stats::OAIFloat64Stats() {
    this->initializeModel();
}

OAIFloat64Stats::~OAIFloat64Stats() {}

void OAIFloat64Stats::initializeModel() {

    m_histogram_buckets_isSet = false;
    m_histogram_buckets_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_quantiles_isSet = false;
    m_quantiles_isValid = false;

    m_standard_deviation_isSet = false;
    m_standard_deviation_isValid = false;
}

void OAIFloat64Stats::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFloat64Stats::fromJsonObject(QJsonObject json) {

    m_histogram_buckets_isValid = ::OpenAPI::fromJsonValue(m_histogram_buckets, json[QString("histogramBuckets")]);
    m_histogram_buckets_isSet = !json[QString("histogramBuckets")].isNull() && m_histogram_buckets_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_quantiles_isValid = ::OpenAPI::fromJsonValue(m_quantiles, json[QString("quantiles")]);
    m_quantiles_isSet = !json[QString("quantiles")].isNull() && m_quantiles_isValid;

    m_standard_deviation_isValid = ::OpenAPI::fromJsonValue(m_standard_deviation, json[QString("standardDeviation")]);
    m_standard_deviation_isSet = !json[QString("standardDeviation")].isNull() && m_standard_deviation_isValid;
}

QString OAIFloat64Stats::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFloat64Stats::asJsonObject() const {
    QJsonObject obj;
    if (m_histogram_buckets.size() > 0) {
        obj.insert(QString("histogramBuckets"), ::OpenAPI::toJsonValue(m_histogram_buckets));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_quantiles.size() > 0) {
        obj.insert(QString("quantiles"), ::OpenAPI::toJsonValue(m_quantiles));
    }
    if (m_standard_deviation_isSet) {
        obj.insert(QString("standardDeviation"), ::OpenAPI::toJsonValue(m_standard_deviation));
    }
    return obj;
}

QList<OAIHistogramBucket> OAIFloat64Stats::getHistogramBuckets() const {
    return m_histogram_buckets;
}
void OAIFloat64Stats::setHistogramBuckets(const QList<OAIHistogramBucket> &histogram_buckets) {
    m_histogram_buckets = histogram_buckets;
    m_histogram_buckets_isSet = true;
}

bool OAIFloat64Stats::is_histogram_buckets_Set() const{
    return m_histogram_buckets_isSet;
}

bool OAIFloat64Stats::is_histogram_buckets_Valid() const{
    return m_histogram_buckets_isValid;
}

double OAIFloat64Stats::getMean() const {
    return m_mean;
}
void OAIFloat64Stats::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIFloat64Stats::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIFloat64Stats::is_mean_Valid() const{
    return m_mean_isValid;
}

QList<double> OAIFloat64Stats::getQuantiles() const {
    return m_quantiles;
}
void OAIFloat64Stats::setQuantiles(const QList<double> &quantiles) {
    m_quantiles = quantiles;
    m_quantiles_isSet = true;
}

bool OAIFloat64Stats::is_quantiles_Set() const{
    return m_quantiles_isSet;
}

bool OAIFloat64Stats::is_quantiles_Valid() const{
    return m_quantiles_isValid;
}

double OAIFloat64Stats::getStandardDeviation() const {
    return m_standard_deviation;
}
void OAIFloat64Stats::setStandardDeviation(const double &standard_deviation) {
    m_standard_deviation = standard_deviation;
    m_standard_deviation_isSet = true;
}

bool OAIFloat64Stats::is_standard_deviation_Set() const{
    return m_standard_deviation_isSet;
}

bool OAIFloat64Stats::is_standard_deviation_Valid() const{
    return m_standard_deviation_isValid;
}

bool OAIFloat64Stats::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_histogram_buckets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_standard_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFloat64Stats::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
