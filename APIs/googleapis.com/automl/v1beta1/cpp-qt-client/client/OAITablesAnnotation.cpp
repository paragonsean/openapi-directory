/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITablesAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITablesAnnotation::OAITablesAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITablesAnnotation::OAITablesAnnotation() {
    this->initializeModel();
}

OAITablesAnnotation::~OAITablesAnnotation() {}

void OAITablesAnnotation::initializeModel() {

    m_baseline_score_isSet = false;
    m_baseline_score_isValid = false;

    m_prediction_interval_isSet = false;
    m_prediction_interval_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_tables_model_column_info_isSet = false;
    m_tables_model_column_info_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAITablesAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITablesAnnotation::fromJsonObject(QJsonObject json) {

    m_baseline_score_isValid = ::OpenAPI::fromJsonValue(m_baseline_score, json[QString("baselineScore")]);
    m_baseline_score_isSet = !json[QString("baselineScore")].isNull() && m_baseline_score_isValid;

    m_prediction_interval_isValid = ::OpenAPI::fromJsonValue(m_prediction_interval, json[QString("predictionInterval")]);
    m_prediction_interval_isSet = !json[QString("predictionInterval")].isNull() && m_prediction_interval_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_tables_model_column_info_isValid = ::OpenAPI::fromJsonValue(m_tables_model_column_info, json[QString("tablesModelColumnInfo")]);
    m_tables_model_column_info_isSet = !json[QString("tablesModelColumnInfo")].isNull() && m_tables_model_column_info_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAITablesAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITablesAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_baseline_score_isSet) {
        obj.insert(QString("baselineScore"), ::OpenAPI::toJsonValue(m_baseline_score));
    }
    if (m_prediction_interval.isSet()) {
        obj.insert(QString("predictionInterval"), ::OpenAPI::toJsonValue(m_prediction_interval));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_tables_model_column_info.size() > 0) {
        obj.insert(QString("tablesModelColumnInfo"), ::OpenAPI::toJsonValue(m_tables_model_column_info));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

float OAITablesAnnotation::getBaselineScore() const {
    return m_baseline_score;
}
void OAITablesAnnotation::setBaselineScore(const float &baseline_score) {
    m_baseline_score = baseline_score;
    m_baseline_score_isSet = true;
}

bool OAITablesAnnotation::is_baseline_score_Set() const{
    return m_baseline_score_isSet;
}

bool OAITablesAnnotation::is_baseline_score_Valid() const{
    return m_baseline_score_isValid;
}

OAIDoubleRange OAITablesAnnotation::getPredictionInterval() const {
    return m_prediction_interval;
}
void OAITablesAnnotation::setPredictionInterval(const OAIDoubleRange &prediction_interval) {
    m_prediction_interval = prediction_interval;
    m_prediction_interval_isSet = true;
}

bool OAITablesAnnotation::is_prediction_interval_Set() const{
    return m_prediction_interval_isSet;
}

bool OAITablesAnnotation::is_prediction_interval_Valid() const{
    return m_prediction_interval_isValid;
}

float OAITablesAnnotation::getScore() const {
    return m_score;
}
void OAITablesAnnotation::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITablesAnnotation::is_score_Set() const{
    return m_score_isSet;
}

bool OAITablesAnnotation::is_score_Valid() const{
    return m_score_isValid;
}

QList<OAITablesModelColumnInfo> OAITablesAnnotation::getTablesModelColumnInfo() const {
    return m_tables_model_column_info;
}
void OAITablesAnnotation::setTablesModelColumnInfo(const QList<OAITablesModelColumnInfo> &tables_model_column_info) {
    m_tables_model_column_info = tables_model_column_info;
    m_tables_model_column_info_isSet = true;
}

bool OAITablesAnnotation::is_tables_model_column_info_Set() const{
    return m_tables_model_column_info_isSet;
}

bool OAITablesAnnotation::is_tables_model_column_info_Valid() const{
    return m_tables_model_column_info_isValid;
}

QJsonValue OAITablesAnnotation::getValue() const {
    return m_value;
}
void OAITablesAnnotation::setValue(const QJsonValue &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAITablesAnnotation::is_value_Set() const{
    return m_value_isSet;
}

bool OAITablesAnnotation::is_value_Valid() const{
    return m_value_isValid;
}

bool OAITablesAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_baseline_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prediction_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_model_column_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITablesAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
