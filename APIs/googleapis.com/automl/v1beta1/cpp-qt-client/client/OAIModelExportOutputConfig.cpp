/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModelExportOutputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModelExportOutputConfig::OAIModelExportOutputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModelExportOutputConfig::OAIModelExportOutputConfig() {
    this->initializeModel();
}

OAIModelExportOutputConfig::~OAIModelExportOutputConfig() {}

void OAIModelExportOutputConfig::initializeModel() {

    m_gcr_destination_isSet = false;
    m_gcr_destination_isValid = false;

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;

    m_model_format_isSet = false;
    m_model_format_isValid = false;

    m_params_isSet = false;
    m_params_isValid = false;
}

void OAIModelExportOutputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModelExportOutputConfig::fromJsonObject(QJsonObject json) {

    m_gcr_destination_isValid = ::OpenAPI::fromJsonValue(m_gcr_destination, json[QString("gcrDestination")]);
    m_gcr_destination_isSet = !json[QString("gcrDestination")].isNull() && m_gcr_destination_isValid;

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;

    m_model_format_isValid = ::OpenAPI::fromJsonValue(m_model_format, json[QString("modelFormat")]);
    m_model_format_isSet = !json[QString("modelFormat")].isNull() && m_model_format_isValid;

    m_params_isValid = ::OpenAPI::fromJsonValue(m_params, json[QString("params")]);
    m_params_isSet = !json[QString("params")].isNull() && m_params_isValid;
}

QString OAIModelExportOutputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModelExportOutputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gcr_destination.isSet()) {
        obj.insert(QString("gcrDestination"), ::OpenAPI::toJsonValue(m_gcr_destination));
    }
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    if (m_model_format_isSet) {
        obj.insert(QString("modelFormat"), ::OpenAPI::toJsonValue(m_model_format));
    }
    if (m_params.size() > 0) {
        obj.insert(QString("params"), ::OpenAPI::toJsonValue(m_params));
    }
    return obj;
}

OAIGcrDestination OAIModelExportOutputConfig::getGcrDestination() const {
    return m_gcr_destination;
}
void OAIModelExportOutputConfig::setGcrDestination(const OAIGcrDestination &gcr_destination) {
    m_gcr_destination = gcr_destination;
    m_gcr_destination_isSet = true;
}

bool OAIModelExportOutputConfig::is_gcr_destination_Set() const{
    return m_gcr_destination_isSet;
}

bool OAIModelExportOutputConfig::is_gcr_destination_Valid() const{
    return m_gcr_destination_isValid;
}

OAIGcsDestination OAIModelExportOutputConfig::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIModelExportOutputConfig::setGcsDestination(const OAIGcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIModelExportOutputConfig::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIModelExportOutputConfig::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

QString OAIModelExportOutputConfig::getModelFormat() const {
    return m_model_format;
}
void OAIModelExportOutputConfig::setModelFormat(const QString &model_format) {
    m_model_format = model_format;
    m_model_format_isSet = true;
}

bool OAIModelExportOutputConfig::is_model_format_Set() const{
    return m_model_format_isSet;
}

bool OAIModelExportOutputConfig::is_model_format_Valid() const{
    return m_model_format_isValid;
}

QMap<QString, QString> OAIModelExportOutputConfig::getParams() const {
    return m_params;
}
void OAIModelExportOutputConfig::setParams(const QMap<QString, QString> &params) {
    m_params = params;
    m_params_isSet = true;
}

bool OAIModelExportOutputConfig::is_params_Set() const{
    return m_params_isSet;
}

bool OAIModelExportOutputConfig::is_params_Valid() const{
    return m_params_isValid;
}

bool OAIModelExportOutputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcr_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_params.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModelExportOutputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
