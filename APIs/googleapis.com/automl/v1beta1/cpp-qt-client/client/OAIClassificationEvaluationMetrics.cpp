/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassificationEvaluationMetrics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassificationEvaluationMetrics::OAIClassificationEvaluationMetrics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassificationEvaluationMetrics::OAIClassificationEvaluationMetrics() {
    this->initializeModel();
}

OAIClassificationEvaluationMetrics::~OAIClassificationEvaluationMetrics() {}

void OAIClassificationEvaluationMetrics::initializeModel() {

    m_annotation_spec_id_isSet = false;
    m_annotation_spec_id_isValid = false;

    m_au_prc_isSet = false;
    m_au_prc_isValid = false;

    m_au_roc_isSet = false;
    m_au_roc_isValid = false;

    m_base_au_prc_isSet = false;
    m_base_au_prc_isValid = false;

    m_confidence_metrics_entry_isSet = false;
    m_confidence_metrics_entry_isValid = false;

    m_confusion_matrix_isSet = false;
    m_confusion_matrix_isValid = false;

    m_log_loss_isSet = false;
    m_log_loss_isValid = false;
}

void OAIClassificationEvaluationMetrics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassificationEvaluationMetrics::fromJsonObject(QJsonObject json) {

    m_annotation_spec_id_isValid = ::OpenAPI::fromJsonValue(m_annotation_spec_id, json[QString("annotationSpecId")]);
    m_annotation_spec_id_isSet = !json[QString("annotationSpecId")].isNull() && m_annotation_spec_id_isValid;

    m_au_prc_isValid = ::OpenAPI::fromJsonValue(m_au_prc, json[QString("auPrc")]);
    m_au_prc_isSet = !json[QString("auPrc")].isNull() && m_au_prc_isValid;

    m_au_roc_isValid = ::OpenAPI::fromJsonValue(m_au_roc, json[QString("auRoc")]);
    m_au_roc_isSet = !json[QString("auRoc")].isNull() && m_au_roc_isValid;

    m_base_au_prc_isValid = ::OpenAPI::fromJsonValue(m_base_au_prc, json[QString("baseAuPrc")]);
    m_base_au_prc_isSet = !json[QString("baseAuPrc")].isNull() && m_base_au_prc_isValid;

    m_confidence_metrics_entry_isValid = ::OpenAPI::fromJsonValue(m_confidence_metrics_entry, json[QString("confidenceMetricsEntry")]);
    m_confidence_metrics_entry_isSet = !json[QString("confidenceMetricsEntry")].isNull() && m_confidence_metrics_entry_isValid;

    m_confusion_matrix_isValid = ::OpenAPI::fromJsonValue(m_confusion_matrix, json[QString("confusionMatrix")]);
    m_confusion_matrix_isSet = !json[QString("confusionMatrix")].isNull() && m_confusion_matrix_isValid;

    m_log_loss_isValid = ::OpenAPI::fromJsonValue(m_log_loss, json[QString("logLoss")]);
    m_log_loss_isSet = !json[QString("logLoss")].isNull() && m_log_loss_isValid;
}

QString OAIClassificationEvaluationMetrics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassificationEvaluationMetrics::asJsonObject() const {
    QJsonObject obj;
    if (m_annotation_spec_id.size() > 0) {
        obj.insert(QString("annotationSpecId"), ::OpenAPI::toJsonValue(m_annotation_spec_id));
    }
    if (m_au_prc_isSet) {
        obj.insert(QString("auPrc"), ::OpenAPI::toJsonValue(m_au_prc));
    }
    if (m_au_roc_isSet) {
        obj.insert(QString("auRoc"), ::OpenAPI::toJsonValue(m_au_roc));
    }
    if (m_base_au_prc_isSet) {
        obj.insert(QString("baseAuPrc"), ::OpenAPI::toJsonValue(m_base_au_prc));
    }
    if (m_confidence_metrics_entry.size() > 0) {
        obj.insert(QString("confidenceMetricsEntry"), ::OpenAPI::toJsonValue(m_confidence_metrics_entry));
    }
    if (m_confusion_matrix.isSet()) {
        obj.insert(QString("confusionMatrix"), ::OpenAPI::toJsonValue(m_confusion_matrix));
    }
    if (m_log_loss_isSet) {
        obj.insert(QString("logLoss"), ::OpenAPI::toJsonValue(m_log_loss));
    }
    return obj;
}

QList<QString> OAIClassificationEvaluationMetrics::getAnnotationSpecId() const {
    return m_annotation_spec_id;
}
void OAIClassificationEvaluationMetrics::setAnnotationSpecId(const QList<QString> &annotation_spec_id) {
    m_annotation_spec_id = annotation_spec_id;
    m_annotation_spec_id_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_annotation_spec_id_Set() const{
    return m_annotation_spec_id_isSet;
}

bool OAIClassificationEvaluationMetrics::is_annotation_spec_id_Valid() const{
    return m_annotation_spec_id_isValid;
}

float OAIClassificationEvaluationMetrics::getAuPrc() const {
    return m_au_prc;
}
void OAIClassificationEvaluationMetrics::setAuPrc(const float &au_prc) {
    m_au_prc = au_prc;
    m_au_prc_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_au_prc_Set() const{
    return m_au_prc_isSet;
}

bool OAIClassificationEvaluationMetrics::is_au_prc_Valid() const{
    return m_au_prc_isValid;
}

float OAIClassificationEvaluationMetrics::getAuRoc() const {
    return m_au_roc;
}
void OAIClassificationEvaluationMetrics::setAuRoc(const float &au_roc) {
    m_au_roc = au_roc;
    m_au_roc_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_au_roc_Set() const{
    return m_au_roc_isSet;
}

bool OAIClassificationEvaluationMetrics::is_au_roc_Valid() const{
    return m_au_roc_isValid;
}

float OAIClassificationEvaluationMetrics::getBaseAuPrc() const {
    return m_base_au_prc;
}
void OAIClassificationEvaluationMetrics::setBaseAuPrc(const float &base_au_prc) {
    m_base_au_prc = base_au_prc;
    m_base_au_prc_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_base_au_prc_Set() const{
    return m_base_au_prc_isSet;
}

bool OAIClassificationEvaluationMetrics::is_base_au_prc_Valid() const{
    return m_base_au_prc_isValid;
}

QList<OAIClassificationEvaluationMetricsConfidenceMetricsEntry> OAIClassificationEvaluationMetrics::getConfidenceMetricsEntry() const {
    return m_confidence_metrics_entry;
}
void OAIClassificationEvaluationMetrics::setConfidenceMetricsEntry(const QList<OAIClassificationEvaluationMetricsConfidenceMetricsEntry> &confidence_metrics_entry) {
    m_confidence_metrics_entry = confidence_metrics_entry;
    m_confidence_metrics_entry_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_confidence_metrics_entry_Set() const{
    return m_confidence_metrics_entry_isSet;
}

bool OAIClassificationEvaluationMetrics::is_confidence_metrics_entry_Valid() const{
    return m_confidence_metrics_entry_isValid;
}

OAIConfusionMatrix OAIClassificationEvaluationMetrics::getConfusionMatrix() const {
    return m_confusion_matrix;
}
void OAIClassificationEvaluationMetrics::setConfusionMatrix(const OAIConfusionMatrix &confusion_matrix) {
    m_confusion_matrix = confusion_matrix;
    m_confusion_matrix_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_confusion_matrix_Set() const{
    return m_confusion_matrix_isSet;
}

bool OAIClassificationEvaluationMetrics::is_confusion_matrix_Valid() const{
    return m_confusion_matrix_isValid;
}

float OAIClassificationEvaluationMetrics::getLogLoss() const {
    return m_log_loss;
}
void OAIClassificationEvaluationMetrics::setLogLoss(const float &log_loss) {
    m_log_loss = log_loss;
    m_log_loss_isSet = true;
}

bool OAIClassificationEvaluationMetrics::is_log_loss_Set() const{
    return m_log_loss_isSet;
}

bool OAIClassificationEvaluationMetrics::is_log_loss_Valid() const{
    return m_log_loss_isValid;
}

bool OAIClassificationEvaluationMetrics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotation_spec_id.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_au_prc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_au_roc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_base_au_prc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_metrics_entry.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confusion_matrix.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_loss_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassificationEvaluationMetrics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
