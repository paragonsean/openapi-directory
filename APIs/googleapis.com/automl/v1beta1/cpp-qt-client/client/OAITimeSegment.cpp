/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSegment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSegment::OAITimeSegment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSegment::OAITimeSegment() {
    this->initializeModel();
}

OAITimeSegment::~OAITimeSegment() {}

void OAITimeSegment::initializeModel() {

    m_end_time_offset_isSet = false;
    m_end_time_offset_isValid = false;

    m_start_time_offset_isSet = false;
    m_start_time_offset_isValid = false;
}

void OAITimeSegment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSegment::fromJsonObject(QJsonObject json) {

    m_end_time_offset_isValid = ::OpenAPI::fromJsonValue(m_end_time_offset, json[QString("endTimeOffset")]);
    m_end_time_offset_isSet = !json[QString("endTimeOffset")].isNull() && m_end_time_offset_isValid;

    m_start_time_offset_isValid = ::OpenAPI::fromJsonValue(m_start_time_offset, json[QString("startTimeOffset")]);
    m_start_time_offset_isSet = !json[QString("startTimeOffset")].isNull() && m_start_time_offset_isValid;
}

QString OAITimeSegment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSegment::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_offset_isSet) {
        obj.insert(QString("endTimeOffset"), ::OpenAPI::toJsonValue(m_end_time_offset));
    }
    if (m_start_time_offset_isSet) {
        obj.insert(QString("startTimeOffset"), ::OpenAPI::toJsonValue(m_start_time_offset));
    }
    return obj;
}

QString OAITimeSegment::getEndTimeOffset() const {
    return m_end_time_offset;
}
void OAITimeSegment::setEndTimeOffset(const QString &end_time_offset) {
    m_end_time_offset = end_time_offset;
    m_end_time_offset_isSet = true;
}

bool OAITimeSegment::is_end_time_offset_Set() const{
    return m_end_time_offset_isSet;
}

bool OAITimeSegment::is_end_time_offset_Valid() const{
    return m_end_time_offset_isValid;
}

QString OAITimeSegment::getStartTimeOffset() const {
    return m_start_time_offset;
}
void OAITimeSegment::setStartTimeOffset(const QString &start_time_offset) {
    m_start_time_offset = start_time_offset;
    m_start_time_offset_isSet = true;
}

bool OAITimeSegment::is_start_time_offset_Set() const{
    return m_start_time_offset_isSet;
}

bool OAITimeSegment::is_start_time_offset_Valid() const{
    return m_start_time_offset_isValid;
}

bool OAITimeSegment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSegment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
