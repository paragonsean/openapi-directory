/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageObjectDetectionAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageObjectDetectionAnnotation::OAIImageObjectDetectionAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageObjectDetectionAnnotation::OAIImageObjectDetectionAnnotation() {
    this->initializeModel();
}

OAIImageObjectDetectionAnnotation::~OAIImageObjectDetectionAnnotation() {}

void OAIImageObjectDetectionAnnotation::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIImageObjectDetectionAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageObjectDetectionAnnotation::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIImageObjectDetectionAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageObjectDetectionAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box.isSet()) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

OAIBoundingPoly OAIImageObjectDetectionAnnotation::getBoundingBox() const {
    return m_bounding_box;
}
void OAIImageObjectDetectionAnnotation::setBoundingBox(const OAIBoundingPoly &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIImageObjectDetectionAnnotation::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIImageObjectDetectionAnnotation::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

float OAIImageObjectDetectionAnnotation::getScore() const {
    return m_score;
}
void OAIImageObjectDetectionAnnotation::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIImageObjectDetectionAnnotation::is_score_Set() const{
    return m_score_isSet;
}

bool OAIImageObjectDetectionAnnotation::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIImageObjectDetectionAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageObjectDetectionAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
