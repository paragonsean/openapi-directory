/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageClassificationModelMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageClassificationModelMetadata::OAIImageClassificationModelMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageClassificationModelMetadata::OAIImageClassificationModelMetadata() {
    this->initializeModel();
}

OAIImageClassificationModelMetadata::~OAIImageClassificationModelMetadata() {}

void OAIImageClassificationModelMetadata::initializeModel() {

    m_base_model_id_isSet = false;
    m_base_model_id_isValid = false;

    m_model_type_isSet = false;
    m_model_type_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_node_qps_isSet = false;
    m_node_qps_isValid = false;

    m_stop_reason_isSet = false;
    m_stop_reason_isValid = false;

    m_train_budget_isSet = false;
    m_train_budget_isValid = false;

    m_train_cost_isSet = false;
    m_train_cost_isValid = false;
}

void OAIImageClassificationModelMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageClassificationModelMetadata::fromJsonObject(QJsonObject json) {

    m_base_model_id_isValid = ::OpenAPI::fromJsonValue(m_base_model_id, json[QString("baseModelId")]);
    m_base_model_id_isSet = !json[QString("baseModelId")].isNull() && m_base_model_id_isValid;

    m_model_type_isValid = ::OpenAPI::fromJsonValue(m_model_type, json[QString("modelType")]);
    m_model_type_isSet = !json[QString("modelType")].isNull() && m_model_type_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_node_qps_isValid = ::OpenAPI::fromJsonValue(m_node_qps, json[QString("nodeQps")]);
    m_node_qps_isSet = !json[QString("nodeQps")].isNull() && m_node_qps_isValid;

    m_stop_reason_isValid = ::OpenAPI::fromJsonValue(m_stop_reason, json[QString("stopReason")]);
    m_stop_reason_isSet = !json[QString("stopReason")].isNull() && m_stop_reason_isValid;

    m_train_budget_isValid = ::OpenAPI::fromJsonValue(m_train_budget, json[QString("trainBudget")]);
    m_train_budget_isSet = !json[QString("trainBudget")].isNull() && m_train_budget_isValid;

    m_train_cost_isValid = ::OpenAPI::fromJsonValue(m_train_cost, json[QString("trainCost")]);
    m_train_cost_isSet = !json[QString("trainCost")].isNull() && m_train_cost_isValid;
}

QString OAIImageClassificationModelMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageClassificationModelMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_base_model_id_isSet) {
        obj.insert(QString("baseModelId"), ::OpenAPI::toJsonValue(m_base_model_id));
    }
    if (m_model_type_isSet) {
        obj.insert(QString("modelType"), ::OpenAPI::toJsonValue(m_model_type));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_node_qps_isSet) {
        obj.insert(QString("nodeQps"), ::OpenAPI::toJsonValue(m_node_qps));
    }
    if (m_stop_reason_isSet) {
        obj.insert(QString("stopReason"), ::OpenAPI::toJsonValue(m_stop_reason));
    }
    if (m_train_budget_isSet) {
        obj.insert(QString("trainBudget"), ::OpenAPI::toJsonValue(m_train_budget));
    }
    if (m_train_cost_isSet) {
        obj.insert(QString("trainCost"), ::OpenAPI::toJsonValue(m_train_cost));
    }
    return obj;
}

QString OAIImageClassificationModelMetadata::getBaseModelId() const {
    return m_base_model_id;
}
void OAIImageClassificationModelMetadata::setBaseModelId(const QString &base_model_id) {
    m_base_model_id = base_model_id;
    m_base_model_id_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_base_model_id_Set() const{
    return m_base_model_id_isSet;
}

bool OAIImageClassificationModelMetadata::is_base_model_id_Valid() const{
    return m_base_model_id_isValid;
}

QString OAIImageClassificationModelMetadata::getModelType() const {
    return m_model_type;
}
void OAIImageClassificationModelMetadata::setModelType(const QString &model_type) {
    m_model_type = model_type;
    m_model_type_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_model_type_Set() const{
    return m_model_type_isSet;
}

bool OAIImageClassificationModelMetadata::is_model_type_Valid() const{
    return m_model_type_isValid;
}

QString OAIImageClassificationModelMetadata::getNodeCount() const {
    return m_node_count;
}
void OAIImageClassificationModelMetadata::setNodeCount(const QString &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIImageClassificationModelMetadata::is_node_count_Valid() const{
    return m_node_count_isValid;
}

double OAIImageClassificationModelMetadata::getNodeQps() const {
    return m_node_qps;
}
void OAIImageClassificationModelMetadata::setNodeQps(const double &node_qps) {
    m_node_qps = node_qps;
    m_node_qps_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_node_qps_Set() const{
    return m_node_qps_isSet;
}

bool OAIImageClassificationModelMetadata::is_node_qps_Valid() const{
    return m_node_qps_isValid;
}

QString OAIImageClassificationModelMetadata::getStopReason() const {
    return m_stop_reason;
}
void OAIImageClassificationModelMetadata::setStopReason(const QString &stop_reason) {
    m_stop_reason = stop_reason;
    m_stop_reason_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_stop_reason_Set() const{
    return m_stop_reason_isSet;
}

bool OAIImageClassificationModelMetadata::is_stop_reason_Valid() const{
    return m_stop_reason_isValid;
}

QString OAIImageClassificationModelMetadata::getTrainBudget() const {
    return m_train_budget;
}
void OAIImageClassificationModelMetadata::setTrainBudget(const QString &train_budget) {
    m_train_budget = train_budget;
    m_train_budget_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_train_budget_Set() const{
    return m_train_budget_isSet;
}

bool OAIImageClassificationModelMetadata::is_train_budget_Valid() const{
    return m_train_budget_isValid;
}

QString OAIImageClassificationModelMetadata::getTrainCost() const {
    return m_train_cost;
}
void OAIImageClassificationModelMetadata::setTrainCost(const QString &train_cost) {
    m_train_cost = train_cost;
    m_train_cost_isSet = true;
}

bool OAIImageClassificationModelMetadata::is_train_cost_Set() const{
    return m_train_cost_isSet;
}

bool OAIImageClassificationModelMetadata::is_train_cost_Valid() const{
    return m_train_cost_isValid;
}

bool OAIImageClassificationModelMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_model_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stop_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_budget_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_cost_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageClassificationModelMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
