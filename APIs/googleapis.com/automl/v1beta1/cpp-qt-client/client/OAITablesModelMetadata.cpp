/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITablesModelMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITablesModelMetadata::OAITablesModelMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITablesModelMetadata::OAITablesModelMetadata() {
    this->initializeModel();
}

OAITablesModelMetadata::~OAITablesModelMetadata() {}

void OAITablesModelMetadata::initializeModel() {

    m_disable_early_stopping_isSet = false;
    m_disable_early_stopping_isValid = false;

    m_input_feature_column_specs_isSet = false;
    m_input_feature_column_specs_isValid = false;

    m_optimization_objective_isSet = false;
    m_optimization_objective_isValid = false;

    m_optimization_objective_precision_value_isSet = false;
    m_optimization_objective_precision_value_isValid = false;

    m_optimization_objective_recall_value_isSet = false;
    m_optimization_objective_recall_value_isValid = false;

    m_tables_model_column_info_isSet = false;
    m_tables_model_column_info_isValid = false;

    m_target_column_spec_isSet = false;
    m_target_column_spec_isValid = false;

    m_train_budget_milli_node_hours_isSet = false;
    m_train_budget_milli_node_hours_isValid = false;

    m_train_cost_milli_node_hours_isSet = false;
    m_train_cost_milli_node_hours_isValid = false;
}

void OAITablesModelMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITablesModelMetadata::fromJsonObject(QJsonObject json) {

    m_disable_early_stopping_isValid = ::OpenAPI::fromJsonValue(m_disable_early_stopping, json[QString("disableEarlyStopping")]);
    m_disable_early_stopping_isSet = !json[QString("disableEarlyStopping")].isNull() && m_disable_early_stopping_isValid;

    m_input_feature_column_specs_isValid = ::OpenAPI::fromJsonValue(m_input_feature_column_specs, json[QString("inputFeatureColumnSpecs")]);
    m_input_feature_column_specs_isSet = !json[QString("inputFeatureColumnSpecs")].isNull() && m_input_feature_column_specs_isValid;

    m_optimization_objective_isValid = ::OpenAPI::fromJsonValue(m_optimization_objective, json[QString("optimizationObjective")]);
    m_optimization_objective_isSet = !json[QString("optimizationObjective")].isNull() && m_optimization_objective_isValid;

    m_optimization_objective_precision_value_isValid = ::OpenAPI::fromJsonValue(m_optimization_objective_precision_value, json[QString("optimizationObjectivePrecisionValue")]);
    m_optimization_objective_precision_value_isSet = !json[QString("optimizationObjectivePrecisionValue")].isNull() && m_optimization_objective_precision_value_isValid;

    m_optimization_objective_recall_value_isValid = ::OpenAPI::fromJsonValue(m_optimization_objective_recall_value, json[QString("optimizationObjectiveRecallValue")]);
    m_optimization_objective_recall_value_isSet = !json[QString("optimizationObjectiveRecallValue")].isNull() && m_optimization_objective_recall_value_isValid;

    m_tables_model_column_info_isValid = ::OpenAPI::fromJsonValue(m_tables_model_column_info, json[QString("tablesModelColumnInfo")]);
    m_tables_model_column_info_isSet = !json[QString("tablesModelColumnInfo")].isNull() && m_tables_model_column_info_isValid;

    m_target_column_spec_isValid = ::OpenAPI::fromJsonValue(m_target_column_spec, json[QString("targetColumnSpec")]);
    m_target_column_spec_isSet = !json[QString("targetColumnSpec")].isNull() && m_target_column_spec_isValid;

    m_train_budget_milli_node_hours_isValid = ::OpenAPI::fromJsonValue(m_train_budget_milli_node_hours, json[QString("trainBudgetMilliNodeHours")]);
    m_train_budget_milli_node_hours_isSet = !json[QString("trainBudgetMilliNodeHours")].isNull() && m_train_budget_milli_node_hours_isValid;

    m_train_cost_milli_node_hours_isValid = ::OpenAPI::fromJsonValue(m_train_cost_milli_node_hours, json[QString("trainCostMilliNodeHours")]);
    m_train_cost_milli_node_hours_isSet = !json[QString("trainCostMilliNodeHours")].isNull() && m_train_cost_milli_node_hours_isValid;
}

QString OAITablesModelMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITablesModelMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_early_stopping_isSet) {
        obj.insert(QString("disableEarlyStopping"), ::OpenAPI::toJsonValue(m_disable_early_stopping));
    }
    if (m_input_feature_column_specs.size() > 0) {
        obj.insert(QString("inputFeatureColumnSpecs"), ::OpenAPI::toJsonValue(m_input_feature_column_specs));
    }
    if (m_optimization_objective_isSet) {
        obj.insert(QString("optimizationObjective"), ::OpenAPI::toJsonValue(m_optimization_objective));
    }
    if (m_optimization_objective_precision_value_isSet) {
        obj.insert(QString("optimizationObjectivePrecisionValue"), ::OpenAPI::toJsonValue(m_optimization_objective_precision_value));
    }
    if (m_optimization_objective_recall_value_isSet) {
        obj.insert(QString("optimizationObjectiveRecallValue"), ::OpenAPI::toJsonValue(m_optimization_objective_recall_value));
    }
    if (m_tables_model_column_info.size() > 0) {
        obj.insert(QString("tablesModelColumnInfo"), ::OpenAPI::toJsonValue(m_tables_model_column_info));
    }
    if (m_target_column_spec.isSet()) {
        obj.insert(QString("targetColumnSpec"), ::OpenAPI::toJsonValue(m_target_column_spec));
    }
    if (m_train_budget_milli_node_hours_isSet) {
        obj.insert(QString("trainBudgetMilliNodeHours"), ::OpenAPI::toJsonValue(m_train_budget_milli_node_hours));
    }
    if (m_train_cost_milli_node_hours_isSet) {
        obj.insert(QString("trainCostMilliNodeHours"), ::OpenAPI::toJsonValue(m_train_cost_milli_node_hours));
    }
    return obj;
}

bool OAITablesModelMetadata::isDisableEarlyStopping() const {
    return m_disable_early_stopping;
}
void OAITablesModelMetadata::setDisableEarlyStopping(const bool &disable_early_stopping) {
    m_disable_early_stopping = disable_early_stopping;
    m_disable_early_stopping_isSet = true;
}

bool OAITablesModelMetadata::is_disable_early_stopping_Set() const{
    return m_disable_early_stopping_isSet;
}

bool OAITablesModelMetadata::is_disable_early_stopping_Valid() const{
    return m_disable_early_stopping_isValid;
}

QList<OAIColumnSpec> OAITablesModelMetadata::getInputFeatureColumnSpecs() const {
    return m_input_feature_column_specs;
}
void OAITablesModelMetadata::setInputFeatureColumnSpecs(const QList<OAIColumnSpec> &input_feature_column_specs) {
    m_input_feature_column_specs = input_feature_column_specs;
    m_input_feature_column_specs_isSet = true;
}

bool OAITablesModelMetadata::is_input_feature_column_specs_Set() const{
    return m_input_feature_column_specs_isSet;
}

bool OAITablesModelMetadata::is_input_feature_column_specs_Valid() const{
    return m_input_feature_column_specs_isValid;
}

QString OAITablesModelMetadata::getOptimizationObjective() const {
    return m_optimization_objective;
}
void OAITablesModelMetadata::setOptimizationObjective(const QString &optimization_objective) {
    m_optimization_objective = optimization_objective;
    m_optimization_objective_isSet = true;
}

bool OAITablesModelMetadata::is_optimization_objective_Set() const{
    return m_optimization_objective_isSet;
}

bool OAITablesModelMetadata::is_optimization_objective_Valid() const{
    return m_optimization_objective_isValid;
}

float OAITablesModelMetadata::getOptimizationObjectivePrecisionValue() const {
    return m_optimization_objective_precision_value;
}
void OAITablesModelMetadata::setOptimizationObjectivePrecisionValue(const float &optimization_objective_precision_value) {
    m_optimization_objective_precision_value = optimization_objective_precision_value;
    m_optimization_objective_precision_value_isSet = true;
}

bool OAITablesModelMetadata::is_optimization_objective_precision_value_Set() const{
    return m_optimization_objective_precision_value_isSet;
}

bool OAITablesModelMetadata::is_optimization_objective_precision_value_Valid() const{
    return m_optimization_objective_precision_value_isValid;
}

float OAITablesModelMetadata::getOptimizationObjectiveRecallValue() const {
    return m_optimization_objective_recall_value;
}
void OAITablesModelMetadata::setOptimizationObjectiveRecallValue(const float &optimization_objective_recall_value) {
    m_optimization_objective_recall_value = optimization_objective_recall_value;
    m_optimization_objective_recall_value_isSet = true;
}

bool OAITablesModelMetadata::is_optimization_objective_recall_value_Set() const{
    return m_optimization_objective_recall_value_isSet;
}

bool OAITablesModelMetadata::is_optimization_objective_recall_value_Valid() const{
    return m_optimization_objective_recall_value_isValid;
}

QList<OAITablesModelColumnInfo> OAITablesModelMetadata::getTablesModelColumnInfo() const {
    return m_tables_model_column_info;
}
void OAITablesModelMetadata::setTablesModelColumnInfo(const QList<OAITablesModelColumnInfo> &tables_model_column_info) {
    m_tables_model_column_info = tables_model_column_info;
    m_tables_model_column_info_isSet = true;
}

bool OAITablesModelMetadata::is_tables_model_column_info_Set() const{
    return m_tables_model_column_info_isSet;
}

bool OAITablesModelMetadata::is_tables_model_column_info_Valid() const{
    return m_tables_model_column_info_isValid;
}

OAIColumnSpec OAITablesModelMetadata::getTargetColumnSpec() const {
    return m_target_column_spec;
}
void OAITablesModelMetadata::setTargetColumnSpec(const OAIColumnSpec &target_column_spec) {
    m_target_column_spec = target_column_spec;
    m_target_column_spec_isSet = true;
}

bool OAITablesModelMetadata::is_target_column_spec_Set() const{
    return m_target_column_spec_isSet;
}

bool OAITablesModelMetadata::is_target_column_spec_Valid() const{
    return m_target_column_spec_isValid;
}

QString OAITablesModelMetadata::getTrainBudgetMilliNodeHours() const {
    return m_train_budget_milli_node_hours;
}
void OAITablesModelMetadata::setTrainBudgetMilliNodeHours(const QString &train_budget_milli_node_hours) {
    m_train_budget_milli_node_hours = train_budget_milli_node_hours;
    m_train_budget_milli_node_hours_isSet = true;
}

bool OAITablesModelMetadata::is_train_budget_milli_node_hours_Set() const{
    return m_train_budget_milli_node_hours_isSet;
}

bool OAITablesModelMetadata::is_train_budget_milli_node_hours_Valid() const{
    return m_train_budget_milli_node_hours_isValid;
}

QString OAITablesModelMetadata::getTrainCostMilliNodeHours() const {
    return m_train_cost_milli_node_hours;
}
void OAITablesModelMetadata::setTrainCostMilliNodeHours(const QString &train_cost_milli_node_hours) {
    m_train_cost_milli_node_hours = train_cost_milli_node_hours;
    m_train_cost_milli_node_hours_isSet = true;
}

bool OAITablesModelMetadata::is_train_cost_milli_node_hours_Set() const{
    return m_train_cost_milli_node_hours_isSet;
}

bool OAITablesModelMetadata::is_train_cost_milli_node_hours_Valid() const{
    return m_train_cost_milli_node_hours_isValid;
}

bool OAITablesModelMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_early_stopping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_feature_column_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_objective_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_objective_precision_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_optimization_objective_recall_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_model_column_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_column_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_budget_milli_node_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_cost_milli_node_hours_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITablesModelMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
