/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIColumnSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIColumnSpec::OAIColumnSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIColumnSpec::OAIColumnSpec() {
    this->initializeModel();
}

OAIColumnSpec::~OAIColumnSpec() {}

void OAIColumnSpec::initializeModel() {

    m_data_stats_isSet = false;
    m_data_stats_isValid = false;

    m_data_type_isSet = false;
    m_data_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_top_correlated_columns_isSet = false;
    m_top_correlated_columns_isValid = false;
}

void OAIColumnSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIColumnSpec::fromJsonObject(QJsonObject json) {

    m_data_stats_isValid = ::OpenAPI::fromJsonValue(m_data_stats, json[QString("dataStats")]);
    m_data_stats_isSet = !json[QString("dataStats")].isNull() && m_data_stats_isValid;

    m_data_type_isValid = ::OpenAPI::fromJsonValue(m_data_type, json[QString("dataType")]);
    m_data_type_isSet = !json[QString("dataType")].isNull() && m_data_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_top_correlated_columns_isValid = ::OpenAPI::fromJsonValue(m_top_correlated_columns, json[QString("topCorrelatedColumns")]);
    m_top_correlated_columns_isSet = !json[QString("topCorrelatedColumns")].isNull() && m_top_correlated_columns_isValid;
}

QString OAIColumnSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIColumnSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_data_stats.isSet()) {
        obj.insert(QString("dataStats"), ::OpenAPI::toJsonValue(m_data_stats));
    }
    if (m_data_type.isSet()) {
        obj.insert(QString("dataType"), ::OpenAPI::toJsonValue(m_data_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_top_correlated_columns.size() > 0) {
        obj.insert(QString("topCorrelatedColumns"), ::OpenAPI::toJsonValue(m_top_correlated_columns));
    }
    return obj;
}

OAIDataStats OAIColumnSpec::getDataStats() const {
    return m_data_stats;
}
void OAIColumnSpec::setDataStats(const OAIDataStats &data_stats) {
    m_data_stats = data_stats;
    m_data_stats_isSet = true;
}

bool OAIColumnSpec::is_data_stats_Set() const{
    return m_data_stats_isSet;
}

bool OAIColumnSpec::is_data_stats_Valid() const{
    return m_data_stats_isValid;
}

OAIDataType OAIColumnSpec::getDataType() const {
    return m_data_type;
}
void OAIColumnSpec::setDataType(const OAIDataType &data_type) {
    m_data_type = data_type;
    m_data_type_isSet = true;
}

bool OAIColumnSpec::is_data_type_Set() const{
    return m_data_type_isSet;
}

bool OAIColumnSpec::is_data_type_Valid() const{
    return m_data_type_isValid;
}

QString OAIColumnSpec::getDisplayName() const {
    return m_display_name;
}
void OAIColumnSpec::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIColumnSpec::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIColumnSpec::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIColumnSpec::getEtag() const {
    return m_etag;
}
void OAIColumnSpec::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIColumnSpec::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIColumnSpec::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIColumnSpec::getName() const {
    return m_name;
}
void OAIColumnSpec::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIColumnSpec::is_name_Set() const{
    return m_name_isSet;
}

bool OAIColumnSpec::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAICorrelatedColumn> OAIColumnSpec::getTopCorrelatedColumns() const {
    return m_top_correlated_columns;
}
void OAIColumnSpec::setTopCorrelatedColumns(const QList<OAICorrelatedColumn> &top_correlated_columns) {
    m_top_correlated_columns = top_correlated_columns;
    m_top_correlated_columns_isSet = true;
}

bool OAIColumnSpec::is_top_correlated_columns_Set() const{
    return m_top_correlated_columns_isSet;
}

bool OAIColumnSpec::is_top_correlated_columns_Valid() const{
    return m_top_correlated_columns_isValid;
}

bool OAIColumnSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_stats.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_correlated_columns.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIColumnSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
