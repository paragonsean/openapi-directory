/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataset.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataset::OAIDataset(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataset::OAIDataset() {
    this->initializeModel();
}

OAIDataset::~OAIDataset() {}

void OAIDataset::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_example_count_isSet = false;
    m_example_count_isValid = false;

    m_image_classification_dataset_metadata_isSet = false;
    m_image_classification_dataset_metadata_isValid = false;

    m_image_object_detection_dataset_metadata_isSet = false;
    m_image_object_detection_dataset_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tables_dataset_metadata_isSet = false;
    m_tables_dataset_metadata_isValid = false;

    m_text_classification_dataset_metadata_isSet = false;
    m_text_classification_dataset_metadata_isValid = false;

    m_text_extraction_dataset_metadata_isSet = false;
    m_text_extraction_dataset_metadata_isValid = false;

    m_text_sentiment_dataset_metadata_isSet = false;
    m_text_sentiment_dataset_metadata_isValid = false;

    m_translation_dataset_metadata_isSet = false;
    m_translation_dataset_metadata_isValid = false;

    m_video_classification_dataset_metadata_isSet = false;
    m_video_classification_dataset_metadata_isValid = false;

    m_video_object_tracking_dataset_metadata_isSet = false;
    m_video_object_tracking_dataset_metadata_isValid = false;
}

void OAIDataset::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataset::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_example_count_isValid = ::OpenAPI::fromJsonValue(m_example_count, json[QString("exampleCount")]);
    m_example_count_isSet = !json[QString("exampleCount")].isNull() && m_example_count_isValid;

    m_image_classification_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_image_classification_dataset_metadata, json[QString("imageClassificationDatasetMetadata")]);
    m_image_classification_dataset_metadata_isSet = !json[QString("imageClassificationDatasetMetadata")].isNull() && m_image_classification_dataset_metadata_isValid;

    m_image_object_detection_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_image_object_detection_dataset_metadata, json[QString("imageObjectDetectionDatasetMetadata")]);
    m_image_object_detection_dataset_metadata_isSet = !json[QString("imageObjectDetectionDatasetMetadata")].isNull() && m_image_object_detection_dataset_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tables_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_tables_dataset_metadata, json[QString("tablesDatasetMetadata")]);
    m_tables_dataset_metadata_isSet = !json[QString("tablesDatasetMetadata")].isNull() && m_tables_dataset_metadata_isValid;

    m_text_classification_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_classification_dataset_metadata, json[QString("textClassificationDatasetMetadata")]);
    m_text_classification_dataset_metadata_isSet = !json[QString("textClassificationDatasetMetadata")].isNull() && m_text_classification_dataset_metadata_isValid;

    m_text_extraction_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_extraction_dataset_metadata, json[QString("textExtractionDatasetMetadata")]);
    m_text_extraction_dataset_metadata_isSet = !json[QString("textExtractionDatasetMetadata")].isNull() && m_text_extraction_dataset_metadata_isValid;

    m_text_sentiment_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_sentiment_dataset_metadata, json[QString("textSentimentDatasetMetadata")]);
    m_text_sentiment_dataset_metadata_isSet = !json[QString("textSentimentDatasetMetadata")].isNull() && m_text_sentiment_dataset_metadata_isValid;

    m_translation_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_translation_dataset_metadata, json[QString("translationDatasetMetadata")]);
    m_translation_dataset_metadata_isSet = !json[QString("translationDatasetMetadata")].isNull() && m_translation_dataset_metadata_isValid;

    m_video_classification_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_classification_dataset_metadata, json[QString("videoClassificationDatasetMetadata")]);
    m_video_classification_dataset_metadata_isSet = !json[QString("videoClassificationDatasetMetadata")].isNull() && m_video_classification_dataset_metadata_isValid;

    m_video_object_tracking_dataset_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_object_tracking_dataset_metadata, json[QString("videoObjectTrackingDatasetMetadata")]);
    m_video_object_tracking_dataset_metadata_isSet = !json[QString("videoObjectTrackingDatasetMetadata")].isNull() && m_video_object_tracking_dataset_metadata_isValid;
}

QString OAIDataset::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataset::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_example_count_isSet) {
        obj.insert(QString("exampleCount"), ::OpenAPI::toJsonValue(m_example_count));
    }
    if (m_image_classification_dataset_metadata.isSet()) {
        obj.insert(QString("imageClassificationDatasetMetadata"), ::OpenAPI::toJsonValue(m_image_classification_dataset_metadata));
    }
    if (m_image_object_detection_dataset_metadata_isSet) {
        obj.insert(QString("imageObjectDetectionDatasetMetadata"), ::OpenAPI::toJsonValue(m_image_object_detection_dataset_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tables_dataset_metadata.isSet()) {
        obj.insert(QString("tablesDatasetMetadata"), ::OpenAPI::toJsonValue(m_tables_dataset_metadata));
    }
    if (m_text_classification_dataset_metadata.isSet()) {
        obj.insert(QString("textClassificationDatasetMetadata"), ::OpenAPI::toJsonValue(m_text_classification_dataset_metadata));
    }
    if (m_text_extraction_dataset_metadata_isSet) {
        obj.insert(QString("textExtractionDatasetMetadata"), ::OpenAPI::toJsonValue(m_text_extraction_dataset_metadata));
    }
    if (m_text_sentiment_dataset_metadata.isSet()) {
        obj.insert(QString("textSentimentDatasetMetadata"), ::OpenAPI::toJsonValue(m_text_sentiment_dataset_metadata));
    }
    if (m_translation_dataset_metadata.isSet()) {
        obj.insert(QString("translationDatasetMetadata"), ::OpenAPI::toJsonValue(m_translation_dataset_metadata));
    }
    if (m_video_classification_dataset_metadata_isSet) {
        obj.insert(QString("videoClassificationDatasetMetadata"), ::OpenAPI::toJsonValue(m_video_classification_dataset_metadata));
    }
    if (m_video_object_tracking_dataset_metadata_isSet) {
        obj.insert(QString("videoObjectTrackingDatasetMetadata"), ::OpenAPI::toJsonValue(m_video_object_tracking_dataset_metadata));
    }
    return obj;
}

QString OAIDataset::getCreateTime() const {
    return m_create_time;
}
void OAIDataset::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDataset::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDataset::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDataset::getDescription() const {
    return m_description;
}
void OAIDataset::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIDataset::is_description_Set() const{
    return m_description_isSet;
}

bool OAIDataset::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIDataset::getDisplayName() const {
    return m_display_name;
}
void OAIDataset::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIDataset::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIDataset::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIDataset::getEtag() const {
    return m_etag;
}
void OAIDataset::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDataset::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDataset::is_etag_Valid() const{
    return m_etag_isValid;
}

qint32 OAIDataset::getExampleCount() const {
    return m_example_count;
}
void OAIDataset::setExampleCount(const qint32 &example_count) {
    m_example_count = example_count;
    m_example_count_isSet = true;
}

bool OAIDataset::is_example_count_Set() const{
    return m_example_count_isSet;
}

bool OAIDataset::is_example_count_Valid() const{
    return m_example_count_isValid;
}

OAIImageClassificationDatasetMetadata OAIDataset::getImageClassificationDatasetMetadata() const {
    return m_image_classification_dataset_metadata;
}
void OAIDataset::setImageClassificationDatasetMetadata(const OAIImageClassificationDatasetMetadata &image_classification_dataset_metadata) {
    m_image_classification_dataset_metadata = image_classification_dataset_metadata;
    m_image_classification_dataset_metadata_isSet = true;
}

bool OAIDataset::is_image_classification_dataset_metadata_Set() const{
    return m_image_classification_dataset_metadata_isSet;
}

bool OAIDataset::is_image_classification_dataset_metadata_Valid() const{
    return m_image_classification_dataset_metadata_isValid;
}

OAIObject OAIDataset::getImageObjectDetectionDatasetMetadata() const {
    return m_image_object_detection_dataset_metadata;
}
void OAIDataset::setImageObjectDetectionDatasetMetadata(const OAIObject &image_object_detection_dataset_metadata) {
    m_image_object_detection_dataset_metadata = image_object_detection_dataset_metadata;
    m_image_object_detection_dataset_metadata_isSet = true;
}

bool OAIDataset::is_image_object_detection_dataset_metadata_Set() const{
    return m_image_object_detection_dataset_metadata_isSet;
}

bool OAIDataset::is_image_object_detection_dataset_metadata_Valid() const{
    return m_image_object_detection_dataset_metadata_isValid;
}

QString OAIDataset::getName() const {
    return m_name;
}
void OAIDataset::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDataset::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDataset::is_name_Valid() const{
    return m_name_isValid;
}

OAITablesDatasetMetadata OAIDataset::getTablesDatasetMetadata() const {
    return m_tables_dataset_metadata;
}
void OAIDataset::setTablesDatasetMetadata(const OAITablesDatasetMetadata &tables_dataset_metadata) {
    m_tables_dataset_metadata = tables_dataset_metadata;
    m_tables_dataset_metadata_isSet = true;
}

bool OAIDataset::is_tables_dataset_metadata_Set() const{
    return m_tables_dataset_metadata_isSet;
}

bool OAIDataset::is_tables_dataset_metadata_Valid() const{
    return m_tables_dataset_metadata_isValid;
}

OAITextClassificationDatasetMetadata OAIDataset::getTextClassificationDatasetMetadata() const {
    return m_text_classification_dataset_metadata;
}
void OAIDataset::setTextClassificationDatasetMetadata(const OAITextClassificationDatasetMetadata &text_classification_dataset_metadata) {
    m_text_classification_dataset_metadata = text_classification_dataset_metadata;
    m_text_classification_dataset_metadata_isSet = true;
}

bool OAIDataset::is_text_classification_dataset_metadata_Set() const{
    return m_text_classification_dataset_metadata_isSet;
}

bool OAIDataset::is_text_classification_dataset_metadata_Valid() const{
    return m_text_classification_dataset_metadata_isValid;
}

OAIObject OAIDataset::getTextExtractionDatasetMetadata() const {
    return m_text_extraction_dataset_metadata;
}
void OAIDataset::setTextExtractionDatasetMetadata(const OAIObject &text_extraction_dataset_metadata) {
    m_text_extraction_dataset_metadata = text_extraction_dataset_metadata;
    m_text_extraction_dataset_metadata_isSet = true;
}

bool OAIDataset::is_text_extraction_dataset_metadata_Set() const{
    return m_text_extraction_dataset_metadata_isSet;
}

bool OAIDataset::is_text_extraction_dataset_metadata_Valid() const{
    return m_text_extraction_dataset_metadata_isValid;
}

OAITextSentimentDatasetMetadata OAIDataset::getTextSentimentDatasetMetadata() const {
    return m_text_sentiment_dataset_metadata;
}
void OAIDataset::setTextSentimentDatasetMetadata(const OAITextSentimentDatasetMetadata &text_sentiment_dataset_metadata) {
    m_text_sentiment_dataset_metadata = text_sentiment_dataset_metadata;
    m_text_sentiment_dataset_metadata_isSet = true;
}

bool OAIDataset::is_text_sentiment_dataset_metadata_Set() const{
    return m_text_sentiment_dataset_metadata_isSet;
}

bool OAIDataset::is_text_sentiment_dataset_metadata_Valid() const{
    return m_text_sentiment_dataset_metadata_isValid;
}

OAITranslationDatasetMetadata OAIDataset::getTranslationDatasetMetadata() const {
    return m_translation_dataset_metadata;
}
void OAIDataset::setTranslationDatasetMetadata(const OAITranslationDatasetMetadata &translation_dataset_metadata) {
    m_translation_dataset_metadata = translation_dataset_metadata;
    m_translation_dataset_metadata_isSet = true;
}

bool OAIDataset::is_translation_dataset_metadata_Set() const{
    return m_translation_dataset_metadata_isSet;
}

bool OAIDataset::is_translation_dataset_metadata_Valid() const{
    return m_translation_dataset_metadata_isValid;
}

OAIObject OAIDataset::getVideoClassificationDatasetMetadata() const {
    return m_video_classification_dataset_metadata;
}
void OAIDataset::setVideoClassificationDatasetMetadata(const OAIObject &video_classification_dataset_metadata) {
    m_video_classification_dataset_metadata = video_classification_dataset_metadata;
    m_video_classification_dataset_metadata_isSet = true;
}

bool OAIDataset::is_video_classification_dataset_metadata_Set() const{
    return m_video_classification_dataset_metadata_isSet;
}

bool OAIDataset::is_video_classification_dataset_metadata_Valid() const{
    return m_video_classification_dataset_metadata_isValid;
}

OAIObject OAIDataset::getVideoObjectTrackingDatasetMetadata() const {
    return m_video_object_tracking_dataset_metadata;
}
void OAIDataset::setVideoObjectTrackingDatasetMetadata(const OAIObject &video_object_tracking_dataset_metadata) {
    m_video_object_tracking_dataset_metadata = video_object_tracking_dataset_metadata;
    m_video_object_tracking_dataset_metadata_isSet = true;
}

bool OAIDataset::is_video_object_tracking_dataset_metadata_Set() const{
    return m_video_object_tracking_dataset_metadata_isSet;
}

bool OAIDataset::is_video_object_tracking_dataset_metadata_Valid() const{
    return m_video_object_tracking_dataset_metadata_isValid;
}

bool OAIDataset::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_classification_dataset_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_object_detection_dataset_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_dataset_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_classification_dataset_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_extraction_dataset_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_sentiment_dataset_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_dataset_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_classification_dataset_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_object_tracking_dataset_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataset::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
