/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportDataOutputInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportDataOutputInfo::OAIExportDataOutputInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportDataOutputInfo::OAIExportDataOutputInfo() {
    this->initializeModel();
}

OAIExportDataOutputInfo::~OAIExportDataOutputInfo() {}

void OAIExportDataOutputInfo::initializeModel() {

    m_bigquery_output_dataset_isSet = false;
    m_bigquery_output_dataset_isValid = false;

    m_gcs_output_directory_isSet = false;
    m_gcs_output_directory_isValid = false;
}

void OAIExportDataOutputInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportDataOutputInfo::fromJsonObject(QJsonObject json) {

    m_bigquery_output_dataset_isValid = ::OpenAPI::fromJsonValue(m_bigquery_output_dataset, json[QString("bigqueryOutputDataset")]);
    m_bigquery_output_dataset_isSet = !json[QString("bigqueryOutputDataset")].isNull() && m_bigquery_output_dataset_isValid;

    m_gcs_output_directory_isValid = ::OpenAPI::fromJsonValue(m_gcs_output_directory, json[QString("gcsOutputDirectory")]);
    m_gcs_output_directory_isSet = !json[QString("gcsOutputDirectory")].isNull() && m_gcs_output_directory_isValid;
}

QString OAIExportDataOutputInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportDataOutputInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_bigquery_output_dataset_isSet) {
        obj.insert(QString("bigqueryOutputDataset"), ::OpenAPI::toJsonValue(m_bigquery_output_dataset));
    }
    if (m_gcs_output_directory_isSet) {
        obj.insert(QString("gcsOutputDirectory"), ::OpenAPI::toJsonValue(m_gcs_output_directory));
    }
    return obj;
}

QString OAIExportDataOutputInfo::getBigqueryOutputDataset() const {
    return m_bigquery_output_dataset;
}
void OAIExportDataOutputInfo::setBigqueryOutputDataset(const QString &bigquery_output_dataset) {
    m_bigquery_output_dataset = bigquery_output_dataset;
    m_bigquery_output_dataset_isSet = true;
}

bool OAIExportDataOutputInfo::is_bigquery_output_dataset_Set() const{
    return m_bigquery_output_dataset_isSet;
}

bool OAIExportDataOutputInfo::is_bigquery_output_dataset_Valid() const{
    return m_bigquery_output_dataset_isValid;
}

QString OAIExportDataOutputInfo::getGcsOutputDirectory() const {
    return m_gcs_output_directory;
}
void OAIExportDataOutputInfo::setGcsOutputDirectory(const QString &gcs_output_directory) {
    m_gcs_output_directory = gcs_output_directory;
    m_gcs_output_directory_isSet = true;
}

bool OAIExportDataOutputInfo::is_gcs_output_directory_Set() const{
    return m_gcs_output_directory_isSet;
}

bool OAIExportDataOutputInfo::is_gcs_output_directory_Valid() const{
    return m_gcs_output_directory_isValid;
}

bool OAIExportDataOutputInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bigquery_output_dataset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_output_directory_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportDataOutputInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
