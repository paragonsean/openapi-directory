/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModel::OAIModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModel::OAIModel() {
    this->initializeModel();
}

OAIModel::~OAIModel() {}

void OAIModel::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_dataset_id_isSet = false;
    m_dataset_id_isValid = false;

    m_deployment_state_isSet = false;
    m_deployment_state_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_image_classification_model_metadata_isSet = false;
    m_image_classification_model_metadata_isValid = false;

    m_image_object_detection_model_metadata_isSet = false;
    m_image_object_detection_model_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tables_model_metadata_isSet = false;
    m_tables_model_metadata_isValid = false;

    m_text_classification_model_metadata_isSet = false;
    m_text_classification_model_metadata_isValid = false;

    m_text_extraction_model_metadata_isSet = false;
    m_text_extraction_model_metadata_isValid = false;

    m_text_sentiment_model_metadata_isSet = false;
    m_text_sentiment_model_metadata_isValid = false;

    m_train_example_count_isSet = false;
    m_train_example_count_isValid = false;

    m_translation_model_metadata_isSet = false;
    m_translation_model_metadata_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_validate_example_count_isSet = false;
    m_validate_example_count_isValid = false;

    m_video_classification_model_metadata_isSet = false;
    m_video_classification_model_metadata_isValid = false;

    m_video_object_tracking_model_metadata_isSet = false;
    m_video_object_tracking_model_metadata_isValid = false;
}

void OAIModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModel::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_dataset_id_isValid = ::OpenAPI::fromJsonValue(m_dataset_id, json[QString("datasetId")]);
    m_dataset_id_isSet = !json[QString("datasetId")].isNull() && m_dataset_id_isValid;

    m_deployment_state_isValid = ::OpenAPI::fromJsonValue(m_deployment_state, json[QString("deploymentState")]);
    m_deployment_state_isSet = !json[QString("deploymentState")].isNull() && m_deployment_state_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_image_classification_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_image_classification_model_metadata, json[QString("imageClassificationModelMetadata")]);
    m_image_classification_model_metadata_isSet = !json[QString("imageClassificationModelMetadata")].isNull() && m_image_classification_model_metadata_isValid;

    m_image_object_detection_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_image_object_detection_model_metadata, json[QString("imageObjectDetectionModelMetadata")]);
    m_image_object_detection_model_metadata_isSet = !json[QString("imageObjectDetectionModelMetadata")].isNull() && m_image_object_detection_model_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tables_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_tables_model_metadata, json[QString("tablesModelMetadata")]);
    m_tables_model_metadata_isSet = !json[QString("tablesModelMetadata")].isNull() && m_tables_model_metadata_isValid;

    m_text_classification_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_classification_model_metadata, json[QString("textClassificationModelMetadata")]);
    m_text_classification_model_metadata_isSet = !json[QString("textClassificationModelMetadata")].isNull() && m_text_classification_model_metadata_isValid;

    m_text_extraction_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_extraction_model_metadata, json[QString("textExtractionModelMetadata")]);
    m_text_extraction_model_metadata_isSet = !json[QString("textExtractionModelMetadata")].isNull() && m_text_extraction_model_metadata_isValid;

    m_text_sentiment_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_text_sentiment_model_metadata, json[QString("textSentimentModelMetadata")]);
    m_text_sentiment_model_metadata_isSet = !json[QString("textSentimentModelMetadata")].isNull() && m_text_sentiment_model_metadata_isValid;

    m_train_example_count_isValid = ::OpenAPI::fromJsonValue(m_train_example_count, json[QString("trainExampleCount")]);
    m_train_example_count_isSet = !json[QString("trainExampleCount")].isNull() && m_train_example_count_isValid;

    m_translation_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_translation_model_metadata, json[QString("translationModelMetadata")]);
    m_translation_model_metadata_isSet = !json[QString("translationModelMetadata")].isNull() && m_translation_model_metadata_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_validate_example_count_isValid = ::OpenAPI::fromJsonValue(m_validate_example_count, json[QString("validateExampleCount")]);
    m_validate_example_count_isSet = !json[QString("validateExampleCount")].isNull() && m_validate_example_count_isValid;

    m_video_classification_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_classification_model_metadata, json[QString("videoClassificationModelMetadata")]);
    m_video_classification_model_metadata_isSet = !json[QString("videoClassificationModelMetadata")].isNull() && m_video_classification_model_metadata_isValid;

    m_video_object_tracking_model_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_object_tracking_model_metadata, json[QString("videoObjectTrackingModelMetadata")]);
    m_video_object_tracking_model_metadata_isSet = !json[QString("videoObjectTrackingModelMetadata")].isNull() && m_video_object_tracking_model_metadata_isValid;
}

QString OAIModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModel::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_dataset_id_isSet) {
        obj.insert(QString("datasetId"), ::OpenAPI::toJsonValue(m_dataset_id));
    }
    if (m_deployment_state_isSet) {
        obj.insert(QString("deploymentState"), ::OpenAPI::toJsonValue(m_deployment_state));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_image_classification_model_metadata.isSet()) {
        obj.insert(QString("imageClassificationModelMetadata"), ::OpenAPI::toJsonValue(m_image_classification_model_metadata));
    }
    if (m_image_object_detection_model_metadata.isSet()) {
        obj.insert(QString("imageObjectDetectionModelMetadata"), ::OpenAPI::toJsonValue(m_image_object_detection_model_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tables_model_metadata.isSet()) {
        obj.insert(QString("tablesModelMetadata"), ::OpenAPI::toJsonValue(m_tables_model_metadata));
    }
    if (m_text_classification_model_metadata.isSet()) {
        obj.insert(QString("textClassificationModelMetadata"), ::OpenAPI::toJsonValue(m_text_classification_model_metadata));
    }
    if (m_text_extraction_model_metadata.isSet()) {
        obj.insert(QString("textExtractionModelMetadata"), ::OpenAPI::toJsonValue(m_text_extraction_model_metadata));
    }
    if (m_text_sentiment_model_metadata_isSet) {
        obj.insert(QString("textSentimentModelMetadata"), ::OpenAPI::toJsonValue(m_text_sentiment_model_metadata));
    }
    if (m_train_example_count_isSet) {
        obj.insert(QString("trainExampleCount"), ::OpenAPI::toJsonValue(m_train_example_count));
    }
    if (m_translation_model_metadata.isSet()) {
        obj.insert(QString("translationModelMetadata"), ::OpenAPI::toJsonValue(m_translation_model_metadata));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_validate_example_count_isSet) {
        obj.insert(QString("validateExampleCount"), ::OpenAPI::toJsonValue(m_validate_example_count));
    }
    if (m_video_classification_model_metadata_isSet) {
        obj.insert(QString("videoClassificationModelMetadata"), ::OpenAPI::toJsonValue(m_video_classification_model_metadata));
    }
    if (m_video_object_tracking_model_metadata_isSet) {
        obj.insert(QString("videoObjectTrackingModelMetadata"), ::OpenAPI::toJsonValue(m_video_object_tracking_model_metadata));
    }
    return obj;
}

QString OAIModel::getCreateTime() const {
    return m_create_time;
}
void OAIModel::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIModel::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIModel::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIModel::getDatasetId() const {
    return m_dataset_id;
}
void OAIModel::setDatasetId(const QString &dataset_id) {
    m_dataset_id = dataset_id;
    m_dataset_id_isSet = true;
}

bool OAIModel::is_dataset_id_Set() const{
    return m_dataset_id_isSet;
}

bool OAIModel::is_dataset_id_Valid() const{
    return m_dataset_id_isValid;
}

QString OAIModel::getDeploymentState() const {
    return m_deployment_state;
}
void OAIModel::setDeploymentState(const QString &deployment_state) {
    m_deployment_state = deployment_state;
    m_deployment_state_isSet = true;
}

bool OAIModel::is_deployment_state_Set() const{
    return m_deployment_state_isSet;
}

bool OAIModel::is_deployment_state_Valid() const{
    return m_deployment_state_isValid;
}

QString OAIModel::getDisplayName() const {
    return m_display_name;
}
void OAIModel::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIModel::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIModel::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIImageClassificationModelMetadata OAIModel::getImageClassificationModelMetadata() const {
    return m_image_classification_model_metadata;
}
void OAIModel::setImageClassificationModelMetadata(const OAIImageClassificationModelMetadata &image_classification_model_metadata) {
    m_image_classification_model_metadata = image_classification_model_metadata;
    m_image_classification_model_metadata_isSet = true;
}

bool OAIModel::is_image_classification_model_metadata_Set() const{
    return m_image_classification_model_metadata_isSet;
}

bool OAIModel::is_image_classification_model_metadata_Valid() const{
    return m_image_classification_model_metadata_isValid;
}

OAIImageObjectDetectionModelMetadata OAIModel::getImageObjectDetectionModelMetadata() const {
    return m_image_object_detection_model_metadata;
}
void OAIModel::setImageObjectDetectionModelMetadata(const OAIImageObjectDetectionModelMetadata &image_object_detection_model_metadata) {
    m_image_object_detection_model_metadata = image_object_detection_model_metadata;
    m_image_object_detection_model_metadata_isSet = true;
}

bool OAIModel::is_image_object_detection_model_metadata_Set() const{
    return m_image_object_detection_model_metadata_isSet;
}

bool OAIModel::is_image_object_detection_model_metadata_Valid() const{
    return m_image_object_detection_model_metadata_isValid;
}

QString OAIModel::getName() const {
    return m_name;
}
void OAIModel::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIModel::is_name_Set() const{
    return m_name_isSet;
}

bool OAIModel::is_name_Valid() const{
    return m_name_isValid;
}

OAITablesModelMetadata OAIModel::getTablesModelMetadata() const {
    return m_tables_model_metadata;
}
void OAIModel::setTablesModelMetadata(const OAITablesModelMetadata &tables_model_metadata) {
    m_tables_model_metadata = tables_model_metadata;
    m_tables_model_metadata_isSet = true;
}

bool OAIModel::is_tables_model_metadata_Set() const{
    return m_tables_model_metadata_isSet;
}

bool OAIModel::is_tables_model_metadata_Valid() const{
    return m_tables_model_metadata_isValid;
}

OAITextClassificationModelMetadata OAIModel::getTextClassificationModelMetadata() const {
    return m_text_classification_model_metadata;
}
void OAIModel::setTextClassificationModelMetadata(const OAITextClassificationModelMetadata &text_classification_model_metadata) {
    m_text_classification_model_metadata = text_classification_model_metadata;
    m_text_classification_model_metadata_isSet = true;
}

bool OAIModel::is_text_classification_model_metadata_Set() const{
    return m_text_classification_model_metadata_isSet;
}

bool OAIModel::is_text_classification_model_metadata_Valid() const{
    return m_text_classification_model_metadata_isValid;
}

OAITextExtractionModelMetadata OAIModel::getTextExtractionModelMetadata() const {
    return m_text_extraction_model_metadata;
}
void OAIModel::setTextExtractionModelMetadata(const OAITextExtractionModelMetadata &text_extraction_model_metadata) {
    m_text_extraction_model_metadata = text_extraction_model_metadata;
    m_text_extraction_model_metadata_isSet = true;
}

bool OAIModel::is_text_extraction_model_metadata_Set() const{
    return m_text_extraction_model_metadata_isSet;
}

bool OAIModel::is_text_extraction_model_metadata_Valid() const{
    return m_text_extraction_model_metadata_isValid;
}

OAIObject OAIModel::getTextSentimentModelMetadata() const {
    return m_text_sentiment_model_metadata;
}
void OAIModel::setTextSentimentModelMetadata(const OAIObject &text_sentiment_model_metadata) {
    m_text_sentiment_model_metadata = text_sentiment_model_metadata;
    m_text_sentiment_model_metadata_isSet = true;
}

bool OAIModel::is_text_sentiment_model_metadata_Set() const{
    return m_text_sentiment_model_metadata_isSet;
}

bool OAIModel::is_text_sentiment_model_metadata_Valid() const{
    return m_text_sentiment_model_metadata_isValid;
}

qint32 OAIModel::getTrainExampleCount() const {
    return m_train_example_count;
}
void OAIModel::setTrainExampleCount(const qint32 &train_example_count) {
    m_train_example_count = train_example_count;
    m_train_example_count_isSet = true;
}

bool OAIModel::is_train_example_count_Set() const{
    return m_train_example_count_isSet;
}

bool OAIModel::is_train_example_count_Valid() const{
    return m_train_example_count_isValid;
}

OAITranslationModelMetadata OAIModel::getTranslationModelMetadata() const {
    return m_translation_model_metadata;
}
void OAIModel::setTranslationModelMetadata(const OAITranslationModelMetadata &translation_model_metadata) {
    m_translation_model_metadata = translation_model_metadata;
    m_translation_model_metadata_isSet = true;
}

bool OAIModel::is_translation_model_metadata_Set() const{
    return m_translation_model_metadata_isSet;
}

bool OAIModel::is_translation_model_metadata_Valid() const{
    return m_translation_model_metadata_isValid;
}

QString OAIModel::getUpdateTime() const {
    return m_update_time;
}
void OAIModel::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIModel::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIModel::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIModel::getValidateExampleCount() const {
    return m_validate_example_count;
}
void OAIModel::setValidateExampleCount(const qint32 &validate_example_count) {
    m_validate_example_count = validate_example_count;
    m_validate_example_count_isSet = true;
}

bool OAIModel::is_validate_example_count_Set() const{
    return m_validate_example_count_isSet;
}

bool OAIModel::is_validate_example_count_Valid() const{
    return m_validate_example_count_isValid;
}

OAIObject OAIModel::getVideoClassificationModelMetadata() const {
    return m_video_classification_model_metadata;
}
void OAIModel::setVideoClassificationModelMetadata(const OAIObject &video_classification_model_metadata) {
    m_video_classification_model_metadata = video_classification_model_metadata;
    m_video_classification_model_metadata_isSet = true;
}

bool OAIModel::is_video_classification_model_metadata_Set() const{
    return m_video_classification_model_metadata_isSet;
}

bool OAIModel::is_video_classification_model_metadata_Valid() const{
    return m_video_classification_model_metadata_isValid;
}

OAIObject OAIModel::getVideoObjectTrackingModelMetadata() const {
    return m_video_object_tracking_model_metadata;
}
void OAIModel::setVideoObjectTrackingModelMetadata(const OAIObject &video_object_tracking_model_metadata) {
    m_video_object_tracking_model_metadata = video_object_tracking_model_metadata;
    m_video_object_tracking_model_metadata_isSet = true;
}

bool OAIModel::is_video_object_tracking_model_metadata_Set() const{
    return m_video_object_tracking_model_metadata_isSet;
}

bool OAIModel::is_video_object_tracking_model_metadata_Valid() const{
    return m_video_object_tracking_model_metadata_isValid;
}

bool OAIModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataset_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_classification_model_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_object_detection_model_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables_model_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_classification_model_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_extraction_model_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_sentiment_model_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_train_example_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_translation_model_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_example_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_classification_model_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_object_tracking_model_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
