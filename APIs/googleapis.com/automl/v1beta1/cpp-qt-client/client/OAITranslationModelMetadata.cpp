/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITranslationModelMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITranslationModelMetadata::OAITranslationModelMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITranslationModelMetadata::OAITranslationModelMetadata() {
    this->initializeModel();
}

OAITranslationModelMetadata::~OAITranslationModelMetadata() {}

void OAITranslationModelMetadata::initializeModel() {

    m_base_model_isSet = false;
    m_base_model_isValid = false;

    m_source_language_code_isSet = false;
    m_source_language_code_isValid = false;

    m_target_language_code_isSet = false;
    m_target_language_code_isValid = false;
}

void OAITranslationModelMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITranslationModelMetadata::fromJsonObject(QJsonObject json) {

    m_base_model_isValid = ::OpenAPI::fromJsonValue(m_base_model, json[QString("baseModel")]);
    m_base_model_isSet = !json[QString("baseModel")].isNull() && m_base_model_isValid;

    m_source_language_code_isValid = ::OpenAPI::fromJsonValue(m_source_language_code, json[QString("sourceLanguageCode")]);
    m_source_language_code_isSet = !json[QString("sourceLanguageCode")].isNull() && m_source_language_code_isValid;

    m_target_language_code_isValid = ::OpenAPI::fromJsonValue(m_target_language_code, json[QString("targetLanguageCode")]);
    m_target_language_code_isSet = !json[QString("targetLanguageCode")].isNull() && m_target_language_code_isValid;
}

QString OAITranslationModelMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITranslationModelMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_base_model_isSet) {
        obj.insert(QString("baseModel"), ::OpenAPI::toJsonValue(m_base_model));
    }
    if (m_source_language_code_isSet) {
        obj.insert(QString("sourceLanguageCode"), ::OpenAPI::toJsonValue(m_source_language_code));
    }
    if (m_target_language_code_isSet) {
        obj.insert(QString("targetLanguageCode"), ::OpenAPI::toJsonValue(m_target_language_code));
    }
    return obj;
}

QString OAITranslationModelMetadata::getBaseModel() const {
    return m_base_model;
}
void OAITranslationModelMetadata::setBaseModel(const QString &base_model) {
    m_base_model = base_model;
    m_base_model_isSet = true;
}

bool OAITranslationModelMetadata::is_base_model_Set() const{
    return m_base_model_isSet;
}

bool OAITranslationModelMetadata::is_base_model_Valid() const{
    return m_base_model_isValid;
}

QString OAITranslationModelMetadata::getSourceLanguageCode() const {
    return m_source_language_code;
}
void OAITranslationModelMetadata::setSourceLanguageCode(const QString &source_language_code) {
    m_source_language_code = source_language_code;
    m_source_language_code_isSet = true;
}

bool OAITranslationModelMetadata::is_source_language_code_Set() const{
    return m_source_language_code_isSet;
}

bool OAITranslationModelMetadata::is_source_language_code_Valid() const{
    return m_source_language_code_isValid;
}

QString OAITranslationModelMetadata::getTargetLanguageCode() const {
    return m_target_language_code;
}
void OAITranslationModelMetadata::setTargetLanguageCode(const QString &target_language_code) {
    m_target_language_code = target_language_code;
    m_target_language_code_isSet = true;
}

bool OAITranslationModelMetadata::is_target_language_code_Set() const{
    return m_target_language_code_isSet;
}

bool OAITranslationModelMetadata::is_target_language_code_Valid() const{
    return m_target_language_code_isValid;
}

bool OAITranslationModelMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_language_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITranslationModelMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
