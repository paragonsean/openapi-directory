# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.correlated_column import CorrelatedColumn
from openapi_server.models.data_stats import DataStats
from openapi_server.models.data_type import DataType
from openapi_server import util


class ColumnSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_stats: DataStats=None, data_type: DataType=None, display_name: str=None, etag: str=None, name: str=None, top_correlated_columns: List[CorrelatedColumn]=None):
        """ColumnSpec - a model defined in OpenAPI

        :param data_stats: The data_stats of this ColumnSpec.
        :param data_type: The data_type of this ColumnSpec.
        :param display_name: The display_name of this ColumnSpec.
        :param etag: The etag of this ColumnSpec.
        :param name: The name of this ColumnSpec.
        :param top_correlated_columns: The top_correlated_columns of this ColumnSpec.
        """
        self.openapi_types = {
            'data_stats': DataStats,
            'data_type': DataType,
            'display_name': str,
            'etag': str,
            'name': str,
            'top_correlated_columns': List[CorrelatedColumn]
        }

        self.attribute_map = {
            'data_stats': 'dataStats',
            'data_type': 'dataType',
            'display_name': 'displayName',
            'etag': 'etag',
            'name': 'name',
            'top_correlated_columns': 'topCorrelatedColumns'
        }

        self._data_stats = data_stats
        self._data_type = data_type
        self._display_name = display_name
        self._etag = etag
        self._name = name
        self._top_correlated_columns = top_correlated_columns

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColumnSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColumnSpec of this ColumnSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_stats(self):
        """Gets the data_stats of this ColumnSpec.


        :return: The data_stats of this ColumnSpec.
        :rtype: DataStats
        """
        return self._data_stats

    @data_stats.setter
    def data_stats(self, data_stats):
        """Sets the data_stats of this ColumnSpec.


        :param data_stats: The data_stats of this ColumnSpec.
        :type data_stats: DataStats
        """

        self._data_stats = data_stats

    @property
    def data_type(self):
        """Gets the data_type of this ColumnSpec.


        :return: The data_type of this ColumnSpec.
        :rtype: DataType
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ColumnSpec.


        :param data_type: The data_type of this ColumnSpec.
        :type data_type: DataType
        """

        self._data_type = data_type

    @property
    def display_name(self):
        """Gets the display_name of this ColumnSpec.

        Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.

        :return: The display_name of this ColumnSpec.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ColumnSpec.

        Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.

        :param display_name: The display_name of this ColumnSpec.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this ColumnSpec.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this ColumnSpec.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ColumnSpec.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this ColumnSpec.
        :type etag: str
        """

        self._etag = etag

    @property
    def name(self):
        """Gets the name of this ColumnSpec.

        Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`

        :return: The name of this ColumnSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ColumnSpec.

        Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`

        :param name: The name of this ColumnSpec.
        :type name: str
        """

        self._name = name

    @property
    def top_correlated_columns(self):
        """Gets the top_correlated_columns of this ColumnSpec.

        Deprecated.

        :return: The top_correlated_columns of this ColumnSpec.
        :rtype: List[CorrelatedColumn]
        """
        return self._top_correlated_columns

    @top_correlated_columns.setter
    def top_correlated_columns(self, top_correlated_columns):
        """Sets the top_correlated_columns of this ColumnSpec.

        Deprecated.

        :param top_correlated_columns: The top_correlated_columns of this ColumnSpec.
        :type top_correlated_columns: List[CorrelatedColumn]
        """

        self._top_correlated_columns = top_correlated_columns
