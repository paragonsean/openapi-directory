# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.struct_type import StructType
from openapi_server import util


class DataType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, list_element_type: DataType=None, nullable: bool=None, struct_type: StructType=None, time_format: str=None, type_code: str=None):
        """DataType - a model defined in OpenAPI

        :param list_element_type: The list_element_type of this DataType.
        :param nullable: The nullable of this DataType.
        :param struct_type: The struct_type of this DataType.
        :param time_format: The time_format of this DataType.
        :param type_code: The type_code of this DataType.
        """
        self.openapi_types = {
            'list_element_type': DataType,
            'nullable': bool,
            'struct_type': StructType,
            'time_format': str,
            'type_code': str
        }

        self.attribute_map = {
            'list_element_type': 'listElementType',
            'nullable': 'nullable',
            'struct_type': 'structType',
            'time_format': 'timeFormat',
            'type_code': 'typeCode'
        }

        self._list_element_type = list_element_type
        self._nullable = nullable
        self._struct_type = struct_type
        self._time_format = time_format
        self._type_code = type_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataType of this DataType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def list_element_type(self):
        """Gets the list_element_type of this DataType.


        :return: The list_element_type of this DataType.
        :rtype: DataType
        """
        return self._list_element_type

    @list_element_type.setter
    def list_element_type(self, list_element_type):
        """Sets the list_element_type of this DataType.


        :param list_element_type: The list_element_type of this DataType.
        :type list_element_type: DataType
        """

        self._list_element_type = list_element_type

    @property
    def nullable(self):
        """Gets the nullable of this DataType.

        If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string.

        :return: The nullable of this DataType.
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this DataType.

        If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string.

        :param nullable: The nullable of this DataType.
        :type nullable: bool
        """

        self._nullable = nullable

    @property
    def struct_type(self):
        """Gets the struct_type of this DataType.


        :return: The struct_type of this DataType.
        :rtype: StructType
        """
        return self._struct_type

    @struct_type.setter
    def struct_type(self, struct_type):
        """Sets the struct_type of this DataType.


        :param struct_type: The struct_type of this DataType.
        :type struct_type: StructType
        """

        self._struct_type = struct_type

    @property
    def time_format(self):
        """Gets the time_format of this DataType.

        If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used.

        :return: The time_format of this DataType.
        :rtype: str
        """
        return self._time_format

    @time_format.setter
    def time_format(self, time_format):
        """Sets the time_format of this DataType.

        If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used.

        :param time_format: The time_format of this DataType.
        :type time_format: str
        """

        self._time_format = time_format

    @property
    def type_code(self):
        """Gets the type_code of this DataType.

        Required. The TypeCode for this type.

        :return: The type_code of this DataType.
        :rtype: str
        """
        return self._type_code

    @type_code.setter
    def type_code(self, type_code):
        """Sets the type_code of this DataType.

        Required. The TypeCode for this type.

        :param type_code: The type_code of this DataType.
        :type type_code: str
        """
        allowed_values = ["TYPE_CODE_UNSPECIFIED", "FLOAT64", "TIMESTAMP", "STRING", "ARRAY", "STRUCT", "CATEGORY"]  # noqa: E501
        if type_code not in allowed_values:
            raise ValueError(
                "Invalid value for `type_code` ({0}), must be one of {1}"
                .format(type_code, allowed_values)
            )

        self._type_code = type_code
