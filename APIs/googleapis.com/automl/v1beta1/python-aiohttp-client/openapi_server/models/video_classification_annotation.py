# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_annotation import ClassificationAnnotation
from openapi_server.models.time_segment import TimeSegment
from openapi_server import util


class VideoClassificationAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, classification_annotation: ClassificationAnnotation=None, time_segment: TimeSegment=None, type: str=None):
        """VideoClassificationAnnotation - a model defined in OpenAPI

        :param classification_annotation: The classification_annotation of this VideoClassificationAnnotation.
        :param time_segment: The time_segment of this VideoClassificationAnnotation.
        :param type: The type of this VideoClassificationAnnotation.
        """
        self.openapi_types = {
            'classification_annotation': ClassificationAnnotation,
            'time_segment': TimeSegment,
            'type': str
        }

        self.attribute_map = {
            'classification_annotation': 'classificationAnnotation',
            'time_segment': 'timeSegment',
            'type': 'type'
        }

        self._classification_annotation = classification_annotation
        self._time_segment = time_segment
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoClassificationAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoClassificationAnnotation of this VideoClassificationAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def classification_annotation(self):
        """Gets the classification_annotation of this VideoClassificationAnnotation.


        :return: The classification_annotation of this VideoClassificationAnnotation.
        :rtype: ClassificationAnnotation
        """
        return self._classification_annotation

    @classification_annotation.setter
    def classification_annotation(self, classification_annotation):
        """Sets the classification_annotation of this VideoClassificationAnnotation.


        :param classification_annotation: The classification_annotation of this VideoClassificationAnnotation.
        :type classification_annotation: ClassificationAnnotation
        """

        self._classification_annotation = classification_annotation

    @property
    def time_segment(self):
        """Gets the time_segment of this VideoClassificationAnnotation.


        :return: The time_segment of this VideoClassificationAnnotation.
        :rtype: TimeSegment
        """
        return self._time_segment

    @time_segment.setter
    def time_segment(self, time_segment):
        """Sets the time_segment of this VideoClassificationAnnotation.


        :param time_segment: The time_segment of this VideoClassificationAnnotation.
        :type time_segment: TimeSegment
        """

        self._time_segment = time_segment

    @property
    def type(self):
        """Gets the type of this VideoClassificationAnnotation.

        Output only. Expresses the type of video classification. Possible values: * `segment` - Classification done on a specified by user time segment of a video. AnnotationSpec is answered to be present in that time segment, if it is present in any part of it. The video ML model evaluations are done only for this type of classification. * `shot`- Shot-level classification. AutoML Video Intelligence determines the boundaries for each camera shot in the entire segment of the video that user specified in the request configuration. AutoML Video Intelligence then returns labels and their confidence scores for each detected shot, along with the start and end time of the shot. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. * `1s_interval` - AutoML Video Intelligence returns labels and their confidence scores for each second of the entire segment of the video that user specified in the request configuration. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality.

        :return: The type of this VideoClassificationAnnotation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VideoClassificationAnnotation.

        Output only. Expresses the type of video classification. Possible values: * `segment` - Classification done on a specified by user time segment of a video. AnnotationSpec is answered to be present in that time segment, if it is present in any part of it. The video ML model evaluations are done only for this type of classification. * `shot`- Shot-level classification. AutoML Video Intelligence determines the boundaries for each camera shot in the entire segment of the video that user specified in the request configuration. AutoML Video Intelligence then returns labels and their confidence scores for each detected shot, along with the start and end time of the shot. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. * `1s_interval` - AutoML Video Intelligence returns labels and their confidence scores for each second of the entire segment of the video that user specified in the request configuration. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality.

        :param type: The type of this VideoClassificationAnnotation.
        :type type: str
        """

        self._type = type
