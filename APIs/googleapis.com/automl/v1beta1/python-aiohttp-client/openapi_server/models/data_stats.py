# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.array_stats import ArrayStats
from openapi_server.models.category_stats import CategoryStats
from openapi_server.models.float64_stats import Float64Stats
from openapi_server.models.string_stats import StringStats
from openapi_server.models.struct_stats import StructStats
from openapi_server.models.timestamp_stats import TimestampStats
from openapi_server import util


class DataStats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, array_stats: ArrayStats=None, category_stats: CategoryStats=None, distinct_value_count: str=None, float64_stats: Float64Stats=None, null_value_count: str=None, string_stats: StringStats=None, struct_stats: StructStats=None, timestamp_stats: TimestampStats=None, valid_value_count: str=None):
        """DataStats - a model defined in OpenAPI

        :param array_stats: The array_stats of this DataStats.
        :param category_stats: The category_stats of this DataStats.
        :param distinct_value_count: The distinct_value_count of this DataStats.
        :param float64_stats: The float64_stats of this DataStats.
        :param null_value_count: The null_value_count of this DataStats.
        :param string_stats: The string_stats of this DataStats.
        :param struct_stats: The struct_stats of this DataStats.
        :param timestamp_stats: The timestamp_stats of this DataStats.
        :param valid_value_count: The valid_value_count of this DataStats.
        """
        self.openapi_types = {
            'array_stats': ArrayStats,
            'category_stats': CategoryStats,
            'distinct_value_count': str,
            'float64_stats': Float64Stats,
            'null_value_count': str,
            'string_stats': StringStats,
            'struct_stats': StructStats,
            'timestamp_stats': TimestampStats,
            'valid_value_count': str
        }

        self.attribute_map = {
            'array_stats': 'arrayStats',
            'category_stats': 'categoryStats',
            'distinct_value_count': 'distinctValueCount',
            'float64_stats': 'float64Stats',
            'null_value_count': 'nullValueCount',
            'string_stats': 'stringStats',
            'struct_stats': 'structStats',
            'timestamp_stats': 'timestampStats',
            'valid_value_count': 'validValueCount'
        }

        self._array_stats = array_stats
        self._category_stats = category_stats
        self._distinct_value_count = distinct_value_count
        self._float64_stats = float64_stats
        self._null_value_count = null_value_count
        self._string_stats = string_stats
        self._struct_stats = struct_stats
        self._timestamp_stats = timestamp_stats
        self._valid_value_count = valid_value_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataStats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataStats of this DataStats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def array_stats(self):
        """Gets the array_stats of this DataStats.


        :return: The array_stats of this DataStats.
        :rtype: ArrayStats
        """
        return self._array_stats

    @array_stats.setter
    def array_stats(self, array_stats):
        """Sets the array_stats of this DataStats.


        :param array_stats: The array_stats of this DataStats.
        :type array_stats: ArrayStats
        """

        self._array_stats = array_stats

    @property
    def category_stats(self):
        """Gets the category_stats of this DataStats.


        :return: The category_stats of this DataStats.
        :rtype: CategoryStats
        """
        return self._category_stats

    @category_stats.setter
    def category_stats(self, category_stats):
        """Sets the category_stats of this DataStats.


        :param category_stats: The category_stats of this DataStats.
        :type category_stats: CategoryStats
        """

        self._category_stats = category_stats

    @property
    def distinct_value_count(self):
        """Gets the distinct_value_count of this DataStats.

        The number of distinct values.

        :return: The distinct_value_count of this DataStats.
        :rtype: str
        """
        return self._distinct_value_count

    @distinct_value_count.setter
    def distinct_value_count(self, distinct_value_count):
        """Sets the distinct_value_count of this DataStats.

        The number of distinct values.

        :param distinct_value_count: The distinct_value_count of this DataStats.
        :type distinct_value_count: str
        """

        self._distinct_value_count = distinct_value_count

    @property
    def float64_stats(self):
        """Gets the float64_stats of this DataStats.


        :return: The float64_stats of this DataStats.
        :rtype: Float64Stats
        """
        return self._float64_stats

    @float64_stats.setter
    def float64_stats(self, float64_stats):
        """Sets the float64_stats of this DataStats.


        :param float64_stats: The float64_stats of this DataStats.
        :type float64_stats: Float64Stats
        """

        self._float64_stats = float64_stats

    @property
    def null_value_count(self):
        """Gets the null_value_count of this DataStats.

        The number of values that are null.

        :return: The null_value_count of this DataStats.
        :rtype: str
        """
        return self._null_value_count

    @null_value_count.setter
    def null_value_count(self, null_value_count):
        """Sets the null_value_count of this DataStats.

        The number of values that are null.

        :param null_value_count: The null_value_count of this DataStats.
        :type null_value_count: str
        """

        self._null_value_count = null_value_count

    @property
    def string_stats(self):
        """Gets the string_stats of this DataStats.


        :return: The string_stats of this DataStats.
        :rtype: StringStats
        """
        return self._string_stats

    @string_stats.setter
    def string_stats(self, string_stats):
        """Sets the string_stats of this DataStats.


        :param string_stats: The string_stats of this DataStats.
        :type string_stats: StringStats
        """

        self._string_stats = string_stats

    @property
    def struct_stats(self):
        """Gets the struct_stats of this DataStats.


        :return: The struct_stats of this DataStats.
        :rtype: StructStats
        """
        return self._struct_stats

    @struct_stats.setter
    def struct_stats(self, struct_stats):
        """Sets the struct_stats of this DataStats.


        :param struct_stats: The struct_stats of this DataStats.
        :type struct_stats: StructStats
        """

        self._struct_stats = struct_stats

    @property
    def timestamp_stats(self):
        """Gets the timestamp_stats of this DataStats.


        :return: The timestamp_stats of this DataStats.
        :rtype: TimestampStats
        """
        return self._timestamp_stats

    @timestamp_stats.setter
    def timestamp_stats(self, timestamp_stats):
        """Sets the timestamp_stats of this DataStats.


        :param timestamp_stats: The timestamp_stats of this DataStats.
        :type timestamp_stats: TimestampStats
        """

        self._timestamp_stats = timestamp_stats

    @property
    def valid_value_count(self):
        """Gets the valid_value_count of this DataStats.

        The number of values that are valid.

        :return: The valid_value_count of this DataStats.
        :rtype: str
        """
        return self._valid_value_count

    @valid_value_count.setter
    def valid_value_count(self, valid_value_count):
        """Sets the valid_value_count of this DataStats.

        The number of values that are valid.

        :param valid_value_count: The valid_value_count of this DataStats.
        :type valid_value_count: str
        """

        self._valid_value_count = valid_value_count
