# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HistogramBucket(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, max: float=None, min: float=None):
        """HistogramBucket - a model defined in OpenAPI

        :param count: The count of this HistogramBucket.
        :param max: The max of this HistogramBucket.
        :param min: The min of this HistogramBucket.
        """
        self.openapi_types = {
            'count': str,
            'max': float,
            'min': float
        }

        self.attribute_map = {
            'count': 'count',
            'max': 'max',
            'min': 'min'
        }

        self._count = count
        self._max = max
        self._min = min

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HistogramBucket':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HistogramBucket of this HistogramBucket.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this HistogramBucket.

        The number of data values that are in the bucket, i.e. are between min and max values.

        :return: The count of this HistogramBucket.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this HistogramBucket.

        The number of data values that are in the bucket, i.e. are between min and max values.

        :param count: The count of this HistogramBucket.
        :type count: str
        """

        self._count = count

    @property
    def max(self):
        """Gets the max of this HistogramBucket.

        The maximum value of the bucket, exclusive unless max = `\"Infinity\"`, in which case it's inclusive.

        :return: The max of this HistogramBucket.
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this HistogramBucket.

        The maximum value of the bucket, exclusive unless max = `\"Infinity\"`, in which case it's inclusive.

        :param max: The max of this HistogramBucket.
        :type max: float
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this HistogramBucket.

        The minimum value of the bucket, inclusive.

        :return: The min of this HistogramBucket.
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this HistogramBucket.

        The minimum value of the bucket, inclusive.

        :param min: The min of this HistogramBucket.
        :type min: float
        """

        self._min = min
