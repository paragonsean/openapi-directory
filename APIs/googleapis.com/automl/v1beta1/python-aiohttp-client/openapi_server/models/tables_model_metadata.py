# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.column_spec import ColumnSpec
from openapi_server.models.tables_model_column_info import TablesModelColumnInfo
from openapi_server import util


class TablesModelMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_early_stopping: bool=None, input_feature_column_specs: List[ColumnSpec]=None, optimization_objective: str=None, optimization_objective_precision_value: float=None, optimization_objective_recall_value: float=None, tables_model_column_info: List[TablesModelColumnInfo]=None, target_column_spec: ColumnSpec=None, train_budget_milli_node_hours: str=None, train_cost_milli_node_hours: str=None):
        """TablesModelMetadata - a model defined in OpenAPI

        :param disable_early_stopping: The disable_early_stopping of this TablesModelMetadata.
        :param input_feature_column_specs: The input_feature_column_specs of this TablesModelMetadata.
        :param optimization_objective: The optimization_objective of this TablesModelMetadata.
        :param optimization_objective_precision_value: The optimization_objective_precision_value of this TablesModelMetadata.
        :param optimization_objective_recall_value: The optimization_objective_recall_value of this TablesModelMetadata.
        :param tables_model_column_info: The tables_model_column_info of this TablesModelMetadata.
        :param target_column_spec: The target_column_spec of this TablesModelMetadata.
        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this TablesModelMetadata.
        :param train_cost_milli_node_hours: The train_cost_milli_node_hours of this TablesModelMetadata.
        """
        self.openapi_types = {
            'disable_early_stopping': bool,
            'input_feature_column_specs': List[ColumnSpec],
            'optimization_objective': str,
            'optimization_objective_precision_value': float,
            'optimization_objective_recall_value': float,
            'tables_model_column_info': List[TablesModelColumnInfo],
            'target_column_spec': ColumnSpec,
            'train_budget_milli_node_hours': str,
            'train_cost_milli_node_hours': str
        }

        self.attribute_map = {
            'disable_early_stopping': 'disableEarlyStopping',
            'input_feature_column_specs': 'inputFeatureColumnSpecs',
            'optimization_objective': 'optimizationObjective',
            'optimization_objective_precision_value': 'optimizationObjectivePrecisionValue',
            'optimization_objective_recall_value': 'optimizationObjectiveRecallValue',
            'tables_model_column_info': 'tablesModelColumnInfo',
            'target_column_spec': 'targetColumnSpec',
            'train_budget_milli_node_hours': 'trainBudgetMilliNodeHours',
            'train_cost_milli_node_hours': 'trainCostMilliNodeHours'
        }

        self._disable_early_stopping = disable_early_stopping
        self._input_feature_column_specs = input_feature_column_specs
        self._optimization_objective = optimization_objective
        self._optimization_objective_precision_value = optimization_objective_precision_value
        self._optimization_objective_recall_value = optimization_objective_recall_value
        self._tables_model_column_info = tables_model_column_info
        self._target_column_spec = target_column_spec
        self._train_budget_milli_node_hours = train_budget_milli_node_hours
        self._train_cost_milli_node_hours = train_cost_milli_node_hours

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TablesModelMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TablesModelMetadata of this TablesModelMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_early_stopping(self):
        """Gets the disable_early_stopping of this TablesModelMetadata.

        Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.

        :return: The disable_early_stopping of this TablesModelMetadata.
        :rtype: bool
        """
        return self._disable_early_stopping

    @disable_early_stopping.setter
    def disable_early_stopping(self, disable_early_stopping):
        """Sets the disable_early_stopping of this TablesModelMetadata.

        Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.

        :param disable_early_stopping: The disable_early_stopping of this TablesModelMetadata.
        :type disable_early_stopping: bool
        """

        self._disable_early_stopping = disable_early_stopping

    @property
    def input_feature_column_specs(self):
        """Gets the input_feature_column_specs of this TablesModelMetadata.

        Column specs of the dataset's primary table's columns, on which the model is trained and which are used as the input for predictions. The target_column as well as, according to dataset's state upon model creation, weight_column, and ml_use_column must never be included here. Only 3 fields are used: * name - May be set on CreateModel, if set only the columns specified are used, otherwise all primary table's columns (except the ones listed above) are used for the training and prediction input. * display_name - Output only. * data_type - Output only.

        :return: The input_feature_column_specs of this TablesModelMetadata.
        :rtype: List[ColumnSpec]
        """
        return self._input_feature_column_specs

    @input_feature_column_specs.setter
    def input_feature_column_specs(self, input_feature_column_specs):
        """Sets the input_feature_column_specs of this TablesModelMetadata.

        Column specs of the dataset's primary table's columns, on which the model is trained and which are used as the input for predictions. The target_column as well as, according to dataset's state upon model creation, weight_column, and ml_use_column must never be included here. Only 3 fields are used: * name - May be set on CreateModel, if set only the columns specified are used, otherwise all primary table's columns (except the ones listed above) are used for the training and prediction input. * display_name - Output only. * data_type - Output only.

        :param input_feature_column_specs: The input_feature_column_specs of this TablesModelMetadata.
        :type input_feature_column_specs: List[ColumnSpec]
        """

        self._input_feature_column_specs = input_feature_column_specs

    @property
    def optimization_objective(self):
        """Gets the optimization_objective of this TablesModelMetadata.

        Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. CLASSIFICATION_BINARY: \"MAXIMIZE_AU_ROC\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"MINIMIZE_LOG_LOSS\" - Minimize log loss. \"MAXIMIZE_AU_PRC\" - Maximize the area under the precision-recall curve. \"MAXIMIZE_PRECISION_AT_RECALL\" - Maximize precision for a specified recall value. \"MAXIMIZE_RECALL_AT_PRECISION\" - Maximize recall for a specified precision value. CLASSIFICATION_MULTI_CLASS : \"MINIMIZE_LOG_LOSS\" (default) - Minimize log loss. REGRESSION: \"MINIMIZE_RMSE\" (default) - Minimize root-mean-squared error (RMSE). \"MINIMIZE_MAE\" - Minimize mean-absolute error (MAE). \"MINIMIZE_RMSLE\" - Minimize root-mean-squared log error (RMSLE).

        :return: The optimization_objective of this TablesModelMetadata.
        :rtype: str
        """
        return self._optimization_objective

    @optimization_objective.setter
    def optimization_objective(self, optimization_objective):
        """Sets the optimization_objective of this TablesModelMetadata.

        Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. CLASSIFICATION_BINARY: \"MAXIMIZE_AU_ROC\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"MINIMIZE_LOG_LOSS\" - Minimize log loss. \"MAXIMIZE_AU_PRC\" - Maximize the area under the precision-recall curve. \"MAXIMIZE_PRECISION_AT_RECALL\" - Maximize precision for a specified recall value. \"MAXIMIZE_RECALL_AT_PRECISION\" - Maximize recall for a specified precision value. CLASSIFICATION_MULTI_CLASS : \"MINIMIZE_LOG_LOSS\" (default) - Minimize log loss. REGRESSION: \"MINIMIZE_RMSE\" (default) - Minimize root-mean-squared error (RMSE). \"MINIMIZE_MAE\" - Minimize mean-absolute error (MAE). \"MINIMIZE_RMSLE\" - Minimize root-mean-squared log error (RMSLE).

        :param optimization_objective: The optimization_objective of this TablesModelMetadata.
        :type optimization_objective: str
        """

        self._optimization_objective = optimization_objective

    @property
    def optimization_objective_precision_value(self):
        """Gets the optimization_objective_precision_value of this TablesModelMetadata.

        Required when optimization_objective is \"MAXIMIZE_RECALL_AT_PRECISION\". Must be between 0 and 1, inclusive.

        :return: The optimization_objective_precision_value of this TablesModelMetadata.
        :rtype: float
        """
        return self._optimization_objective_precision_value

    @optimization_objective_precision_value.setter
    def optimization_objective_precision_value(self, optimization_objective_precision_value):
        """Sets the optimization_objective_precision_value of this TablesModelMetadata.

        Required when optimization_objective is \"MAXIMIZE_RECALL_AT_PRECISION\". Must be between 0 and 1, inclusive.

        :param optimization_objective_precision_value: The optimization_objective_precision_value of this TablesModelMetadata.
        :type optimization_objective_precision_value: float
        """

        self._optimization_objective_precision_value = optimization_objective_precision_value

    @property
    def optimization_objective_recall_value(self):
        """Gets the optimization_objective_recall_value of this TablesModelMetadata.

        Required when optimization_objective is \"MAXIMIZE_PRECISION_AT_RECALL\". Must be between 0 and 1, inclusive.

        :return: The optimization_objective_recall_value of this TablesModelMetadata.
        :rtype: float
        """
        return self._optimization_objective_recall_value

    @optimization_objective_recall_value.setter
    def optimization_objective_recall_value(self, optimization_objective_recall_value):
        """Sets the optimization_objective_recall_value of this TablesModelMetadata.

        Required when optimization_objective is \"MAXIMIZE_PRECISION_AT_RECALL\". Must be between 0 and 1, inclusive.

        :param optimization_objective_recall_value: The optimization_objective_recall_value of this TablesModelMetadata.
        :type optimization_objective_recall_value: float
        """

        self._optimization_objective_recall_value = optimization_objective_recall_value

    @property
    def tables_model_column_info(self):
        """Gets the tables_model_column_info of this TablesModelMetadata.

        Output only. Auxiliary information for each of the input_feature_column_specs with respect to this particular model.

        :return: The tables_model_column_info of this TablesModelMetadata.
        :rtype: List[TablesModelColumnInfo]
        """
        return self._tables_model_column_info

    @tables_model_column_info.setter
    def tables_model_column_info(self, tables_model_column_info):
        """Sets the tables_model_column_info of this TablesModelMetadata.

        Output only. Auxiliary information for each of the input_feature_column_specs with respect to this particular model.

        :param tables_model_column_info: The tables_model_column_info of this TablesModelMetadata.
        :type tables_model_column_info: List[TablesModelColumnInfo]
        """

        self._tables_model_column_info = tables_model_column_info

    @property
    def target_column_spec(self):
        """Gets the target_column_spec of this TablesModelMetadata.


        :return: The target_column_spec of this TablesModelMetadata.
        :rtype: ColumnSpec
        """
        return self._target_column_spec

    @target_column_spec.setter
    def target_column_spec(self, target_column_spec):
        """Sets the target_column_spec of this TablesModelMetadata.


        :param target_column_spec: The target_column_spec of this TablesModelMetadata.
        :type target_column_spec: ColumnSpec
        """

        self._target_column_spec = target_column_spec

    @property
    def train_budget_milli_node_hours(self):
        """Gets the train_budget_milli_node_hours of this TablesModelMetadata.

        Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.

        :return: The train_budget_milli_node_hours of this TablesModelMetadata.
        :rtype: str
        """
        return self._train_budget_milli_node_hours

    @train_budget_milli_node_hours.setter
    def train_budget_milli_node_hours(self, train_budget_milli_node_hours):
        """Sets the train_budget_milli_node_hours of this TablesModelMetadata.

        Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.

        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this TablesModelMetadata.
        :type train_budget_milli_node_hours: str
        """

        self._train_budget_milli_node_hours = train_budget_milli_node_hours

    @property
    def train_cost_milli_node_hours(self):
        """Gets the train_cost_milli_node_hours of this TablesModelMetadata.

        Output only. The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.

        :return: The train_cost_milli_node_hours of this TablesModelMetadata.
        :rtype: str
        """
        return self._train_cost_milli_node_hours

    @train_cost_milli_node_hours.setter
    def train_cost_milli_node_hours(self, train_cost_milli_node_hours):
        """Sets the train_cost_milli_node_hours of this TablesModelMetadata.

        Output only. The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.

        :param train_cost_milli_node_hours: The train_cost_milli_node_hours of this TablesModelMetadata.
        :type train_cost_milli_node_hours: str
        """

        self._train_cost_milli_node_hours = train_cost_milli_node_hours
