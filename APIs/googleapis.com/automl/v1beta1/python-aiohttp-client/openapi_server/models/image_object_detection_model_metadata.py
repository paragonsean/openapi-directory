# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageObjectDetectionModelMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_type: str=None, node_count: str=None, node_qps: float=None, stop_reason: str=None, train_budget_milli_node_hours: str=None, train_cost_milli_node_hours: str=None):
        """ImageObjectDetectionModelMetadata - a model defined in OpenAPI

        :param model_type: The model_type of this ImageObjectDetectionModelMetadata.
        :param node_count: The node_count of this ImageObjectDetectionModelMetadata.
        :param node_qps: The node_qps of this ImageObjectDetectionModelMetadata.
        :param stop_reason: The stop_reason of this ImageObjectDetectionModelMetadata.
        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this ImageObjectDetectionModelMetadata.
        :param train_cost_milli_node_hours: The train_cost_milli_node_hours of this ImageObjectDetectionModelMetadata.
        """
        self.openapi_types = {
            'model_type': str,
            'node_count': str,
            'node_qps': float,
            'stop_reason': str,
            'train_budget_milli_node_hours': str,
            'train_cost_milli_node_hours': str
        }

        self.attribute_map = {
            'model_type': 'modelType',
            'node_count': 'nodeCount',
            'node_qps': 'nodeQps',
            'stop_reason': 'stopReason',
            'train_budget_milli_node_hours': 'trainBudgetMilliNodeHours',
            'train_cost_milli_node_hours': 'trainCostMilliNodeHours'
        }

        self._model_type = model_type
        self._node_count = node_count
        self._node_qps = node_qps
        self._stop_reason = stop_reason
        self._train_budget_milli_node_hours = train_budget_milli_node_hours
        self._train_cost_milli_node_hours = train_cost_milli_node_hours

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageObjectDetectionModelMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageObjectDetectionModelMetadata of this ImageObjectDetectionModelMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_type(self):
        """Gets the model_type of this ImageObjectDetectionModelMetadata.

        Optional. Type of the model. The available values are: * `cloud-high-accuracy-1` - (default) A model to be used via prediction calls to AutoML API. Expected to have a higher latency, but should also have a higher prediction quality than other models. * `cloud-low-latency-1` - A model to be used via prediction calls to AutoML API. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * `mobile-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.

        :return: The model_type of this ImageObjectDetectionModelMetadata.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ImageObjectDetectionModelMetadata.

        Optional. Type of the model. The available values are: * `cloud-high-accuracy-1` - (default) A model to be used via prediction calls to AutoML API. Expected to have a higher latency, but should also have a higher prediction quality than other models. * `cloud-low-latency-1` - A model to be used via prediction calls to AutoML API. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * `mobile-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.

        :param model_type: The model_type of this ImageObjectDetectionModelMetadata.
        :type model_type: str
        """

        self._model_type = model_type

    @property
    def node_count(self):
        """Gets the node_count of this ImageObjectDetectionModelMetadata.

        Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the qps_per_node field.

        :return: The node_count of this ImageObjectDetectionModelMetadata.
        :rtype: str
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this ImageObjectDetectionModelMetadata.

        Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the qps_per_node field.

        :param node_count: The node_count of this ImageObjectDetectionModelMetadata.
        :type node_count: str
        """

        self._node_count = node_count

    @property
    def node_qps(self):
        """Gets the node_qps of this ImageObjectDetectionModelMetadata.

        Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.

        :return: The node_qps of this ImageObjectDetectionModelMetadata.
        :rtype: float
        """
        return self._node_qps

    @node_qps.setter
    def node_qps(self, node_qps):
        """Sets the node_qps of this ImageObjectDetectionModelMetadata.

        Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.

        :param node_qps: The node_qps of this ImageObjectDetectionModelMetadata.
        :type node_qps: float
        """

        self._node_qps = node_qps

    @property
    def stop_reason(self):
        """Gets the stop_reason of this ImageObjectDetectionModelMetadata.

        Output only. The reason that this create model operation stopped, e.g. `BUDGET_REACHED`, `MODEL_CONVERGED`.

        :return: The stop_reason of this ImageObjectDetectionModelMetadata.
        :rtype: str
        """
        return self._stop_reason

    @stop_reason.setter
    def stop_reason(self, stop_reason):
        """Sets the stop_reason of this ImageObjectDetectionModelMetadata.

        Output only. The reason that this create model operation stopped, e.g. `BUDGET_REACHED`, `MODEL_CONVERGED`.

        :param stop_reason: The stop_reason of this ImageObjectDetectionModelMetadata.
        :type stop_reason: str
        """

        self._stop_reason = stop_reason

    @property
    def train_budget_milli_node_hours(self):
        """Gets the train_budget_milli_node_hours of this ImageObjectDetectionModelMetadata.

        The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual `train_cost` will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using full budget and the stop_reason will be `MODEL_CONVERGED`. Note, node_hour = actual_hour * number_of_nodes_invovled. For model type `cloud-high-accuracy-1`(default) and `cloud-low-latency-1`, the train budget must be between 20,000 and 900,000 milli node hours, inclusive. The default value is 216, 000 which represents one day in wall time. For model type `mobile-low-latency-1`, `mobile-versatile-1`, `mobile-high-accuracy-1`, `mobile-core-ml-low-latency-1`, `mobile-core-ml-versatile-1`, `mobile-core-ml-high-accuracy-1`, the train budget must be between 1,000 and 100,000 milli node hours, inclusive. The default value is 24, 000 which represents one day in wall time.

        :return: The train_budget_milli_node_hours of this ImageObjectDetectionModelMetadata.
        :rtype: str
        """
        return self._train_budget_milli_node_hours

    @train_budget_milli_node_hours.setter
    def train_budget_milli_node_hours(self, train_budget_milli_node_hours):
        """Sets the train_budget_milli_node_hours of this ImageObjectDetectionModelMetadata.

        The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual `train_cost` will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using full budget and the stop_reason will be `MODEL_CONVERGED`. Note, node_hour = actual_hour * number_of_nodes_invovled. For model type `cloud-high-accuracy-1`(default) and `cloud-low-latency-1`, the train budget must be between 20,000 and 900,000 milli node hours, inclusive. The default value is 216, 000 which represents one day in wall time. For model type `mobile-low-latency-1`, `mobile-versatile-1`, `mobile-high-accuracy-1`, `mobile-core-ml-low-latency-1`, `mobile-core-ml-versatile-1`, `mobile-core-ml-high-accuracy-1`, the train budget must be between 1,000 and 100,000 milli node hours, inclusive. The default value is 24, 000 which represents one day in wall time.

        :param train_budget_milli_node_hours: The train_budget_milli_node_hours of this ImageObjectDetectionModelMetadata.
        :type train_budget_milli_node_hours: str
        """

        self._train_budget_milli_node_hours = train_budget_milli_node_hours

    @property
    def train_cost_milli_node_hours(self):
        """Gets the train_cost_milli_node_hours of this ImageObjectDetectionModelMetadata.

        Output only. The actual train cost of creating this model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.

        :return: The train_cost_milli_node_hours of this ImageObjectDetectionModelMetadata.
        :rtype: str
        """
        return self._train_cost_milli_node_hours

    @train_cost_milli_node_hours.setter
    def train_cost_milli_node_hours(self, train_cost_milli_node_hours):
        """Sets the train_cost_milli_node_hours of this ImageObjectDetectionModelMetadata.

        Output only. The actual train cost of creating this model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.

        :param train_cost_milli_node_hours: The train_cost_milli_node_hours of this ImageObjectDetectionModelMetadata.
        :type train_cost_milli_node_hours: str
        """

        self._train_cost_milli_node_hours = train_cost_milli_node_hours
