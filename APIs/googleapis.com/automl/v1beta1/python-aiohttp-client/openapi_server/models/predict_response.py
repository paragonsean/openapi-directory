# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.annotation_payload import AnnotationPayload
from openapi_server.models.example_payload import ExamplePayload
from openapi_server import util


class PredictResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata: Dict[str, str]=None, payload: List[AnnotationPayload]=None, preprocessed_input: ExamplePayload=None):
        """PredictResponse - a model defined in OpenAPI

        :param metadata: The metadata of this PredictResponse.
        :param payload: The payload of this PredictResponse.
        :param preprocessed_input: The preprocessed_input of this PredictResponse.
        """
        self.openapi_types = {
            'metadata': Dict[str, str],
            'payload': List[AnnotationPayload],
            'preprocessed_input': ExamplePayload
        }

        self.attribute_map = {
            'metadata': 'metadata',
            'payload': 'payload',
            'preprocessed_input': 'preprocessedInput'
        }

        self._metadata = metadata
        self._payload = payload
        self._preprocessed_input = preprocessed_input

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PredictResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PredictResponse of this PredictResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata(self):
        """Gets the metadata of this PredictResponse.

        Additional domain-specific prediction response metadata. * For Image Object Detection: `max_bounding_box_count` - (int64) At most that many bounding boxes per image could have been returned. * For Text Sentiment: `sentiment_score` - (float, deprecated) A value between -1 and 1, -1 maps to least positive sentiment, while 1 maps to the most positive one and the higher the score, the more positive the sentiment in the document is. Yet these values are relative to the training data, so e.g. if all data was positive then -1 will be also positive (though the least). The sentiment_score shouldn't be confused with \"score\" or \"magnitude\" from the previous Natural Language Sentiment Analysis API.

        :return: The metadata of this PredictResponse.
        :rtype: Dict[str, str]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this PredictResponse.

        Additional domain-specific prediction response metadata. * For Image Object Detection: `max_bounding_box_count` - (int64) At most that many bounding boxes per image could have been returned. * For Text Sentiment: `sentiment_score` - (float, deprecated) A value between -1 and 1, -1 maps to least positive sentiment, while 1 maps to the most positive one and the higher the score, the more positive the sentiment in the document is. Yet these values are relative to the training data, so e.g. if all data was positive then -1 will be also positive (though the least). The sentiment_score shouldn't be confused with \"score\" or \"magnitude\" from the previous Natural Language Sentiment Analysis API.

        :param metadata: The metadata of this PredictResponse.
        :type metadata: Dict[str, str]
        """

        self._metadata = metadata

    @property
    def payload(self):
        """Gets the payload of this PredictResponse.

        Prediction result. Translation and Text Sentiment will return precisely one payload.

        :return: The payload of this PredictResponse.
        :rtype: List[AnnotationPayload]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this PredictResponse.

        Prediction result. Translation and Text Sentiment will return precisely one payload.

        :param payload: The payload of this PredictResponse.
        :type payload: List[AnnotationPayload]
        """

        self._payload = payload

    @property
    def preprocessed_input(self):
        """Gets the preprocessed_input of this PredictResponse.


        :return: The preprocessed_input of this PredictResponse.
        :rtype: ExamplePayload
        """
        return self._preprocessed_input

    @preprocessed_input.setter
    def preprocessed_input(self, preprocessed_input):
        """Sets the preprocessed_input of this PredictResponse.


        :param preprocessed_input: The preprocessed_input of this PredictResponse.
        :type preprocessed_input: ExamplePayload
        """

        self._preprocessed_input = preprocessed_input
