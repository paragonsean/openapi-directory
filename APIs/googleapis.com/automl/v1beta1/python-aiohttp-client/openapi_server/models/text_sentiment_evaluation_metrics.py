# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.confusion_matrix import ConfusionMatrix
from openapi_server import util


class TextSentimentEvaluationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_spec_id: List[str]=None, confusion_matrix: ConfusionMatrix=None, f1_score: float=None, linear_kappa: float=None, mean_absolute_error: float=None, mean_squared_error: float=None, precision: float=None, quadratic_kappa: float=None, recall: float=None):
        """TextSentimentEvaluationMetrics - a model defined in OpenAPI

        :param annotation_spec_id: The annotation_spec_id of this TextSentimentEvaluationMetrics.
        :param confusion_matrix: The confusion_matrix of this TextSentimentEvaluationMetrics.
        :param f1_score: The f1_score of this TextSentimentEvaluationMetrics.
        :param linear_kappa: The linear_kappa of this TextSentimentEvaluationMetrics.
        :param mean_absolute_error: The mean_absolute_error of this TextSentimentEvaluationMetrics.
        :param mean_squared_error: The mean_squared_error of this TextSentimentEvaluationMetrics.
        :param precision: The precision of this TextSentimentEvaluationMetrics.
        :param quadratic_kappa: The quadratic_kappa of this TextSentimentEvaluationMetrics.
        :param recall: The recall of this TextSentimentEvaluationMetrics.
        """
        self.openapi_types = {
            'annotation_spec_id': List[str],
            'confusion_matrix': ConfusionMatrix,
            'f1_score': float,
            'linear_kappa': float,
            'mean_absolute_error': float,
            'mean_squared_error': float,
            'precision': float,
            'quadratic_kappa': float,
            'recall': float
        }

        self.attribute_map = {
            'annotation_spec_id': 'annotationSpecId',
            'confusion_matrix': 'confusionMatrix',
            'f1_score': 'f1Score',
            'linear_kappa': 'linearKappa',
            'mean_absolute_error': 'meanAbsoluteError',
            'mean_squared_error': 'meanSquaredError',
            'precision': 'precision',
            'quadratic_kappa': 'quadraticKappa',
            'recall': 'recall'
        }

        self._annotation_spec_id = annotation_spec_id
        self._confusion_matrix = confusion_matrix
        self._f1_score = f1_score
        self._linear_kappa = linear_kappa
        self._mean_absolute_error = mean_absolute_error
        self._mean_squared_error = mean_squared_error
        self._precision = precision
        self._quadratic_kappa = quadratic_kappa
        self._recall = recall

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextSentimentEvaluationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextSentimentEvaluationMetrics of this TextSentimentEvaluationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_spec_id(self):
        """Gets the annotation_spec_id of this TextSentimentEvaluationMetrics.

        Output only. The annotation spec ids used for this evaluation. Deprecated .

        :return: The annotation_spec_id of this TextSentimentEvaluationMetrics.
        :rtype: List[str]
        """
        return self._annotation_spec_id

    @annotation_spec_id.setter
    def annotation_spec_id(self, annotation_spec_id):
        """Sets the annotation_spec_id of this TextSentimentEvaluationMetrics.

        Output only. The annotation spec ids used for this evaluation. Deprecated .

        :param annotation_spec_id: The annotation_spec_id of this TextSentimentEvaluationMetrics.
        :type annotation_spec_id: List[str]
        """

        self._annotation_spec_id = annotation_spec_id

    @property
    def confusion_matrix(self):
        """Gets the confusion_matrix of this TextSentimentEvaluationMetrics.


        :return: The confusion_matrix of this TextSentimentEvaluationMetrics.
        :rtype: ConfusionMatrix
        """
        return self._confusion_matrix

    @confusion_matrix.setter
    def confusion_matrix(self, confusion_matrix):
        """Sets the confusion_matrix of this TextSentimentEvaluationMetrics.


        :param confusion_matrix: The confusion_matrix of this TextSentimentEvaluationMetrics.
        :type confusion_matrix: ConfusionMatrix
        """

        self._confusion_matrix = confusion_matrix

    @property
    def f1_score(self):
        """Gets the f1_score of this TextSentimentEvaluationMetrics.

        Output only. The harmonic mean of recall and precision.

        :return: The f1_score of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._f1_score

    @f1_score.setter
    def f1_score(self, f1_score):
        """Sets the f1_score of this TextSentimentEvaluationMetrics.

        Output only. The harmonic mean of recall and precision.

        :param f1_score: The f1_score of this TextSentimentEvaluationMetrics.
        :type f1_score: float
        """

        self._f1_score = f1_score

    @property
    def linear_kappa(self):
        """Gets the linear_kappa of this TextSentimentEvaluationMetrics.

        Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :return: The linear_kappa of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._linear_kappa

    @linear_kappa.setter
    def linear_kappa(self, linear_kappa):
        """Sets the linear_kappa of this TextSentimentEvaluationMetrics.

        Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :param linear_kappa: The linear_kappa of this TextSentimentEvaluationMetrics.
        :type linear_kappa: float
        """

        self._linear_kappa = linear_kappa

    @property
    def mean_absolute_error(self):
        """Gets the mean_absolute_error of this TextSentimentEvaluationMetrics.

        Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :return: The mean_absolute_error of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._mean_absolute_error

    @mean_absolute_error.setter
    def mean_absolute_error(self, mean_absolute_error):
        """Sets the mean_absolute_error of this TextSentimentEvaluationMetrics.

        Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :param mean_absolute_error: The mean_absolute_error of this TextSentimentEvaluationMetrics.
        :type mean_absolute_error: float
        """

        self._mean_absolute_error = mean_absolute_error

    @property
    def mean_squared_error(self):
        """Gets the mean_squared_error of this TextSentimentEvaluationMetrics.

        Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :return: The mean_squared_error of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._mean_squared_error

    @mean_squared_error.setter
    def mean_squared_error(self, mean_squared_error):
        """Sets the mean_squared_error of this TextSentimentEvaluationMetrics.

        Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :param mean_squared_error: The mean_squared_error of this TextSentimentEvaluationMetrics.
        :type mean_squared_error: float
        """

        self._mean_squared_error = mean_squared_error

    @property
    def precision(self):
        """Gets the precision of this TextSentimentEvaluationMetrics.

        Output only. Precision.

        :return: The precision of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this TextSentimentEvaluationMetrics.

        Output only. Precision.

        :param precision: The precision of this TextSentimentEvaluationMetrics.
        :type precision: float
        """

        self._precision = precision

    @property
    def quadratic_kappa(self):
        """Gets the quadratic_kappa of this TextSentimentEvaluationMetrics.

        Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :return: The quadratic_kappa of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._quadratic_kappa

    @quadratic_kappa.setter
    def quadratic_kappa(self, quadratic_kappa):
        """Sets the quadratic_kappa of this TextSentimentEvaluationMetrics.

        Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.

        :param quadratic_kappa: The quadratic_kappa of this TextSentimentEvaluationMetrics.
        :type quadratic_kappa: float
        """

        self._quadratic_kappa = quadratic_kappa

    @property
    def recall(self):
        """Gets the recall of this TextSentimentEvaluationMetrics.

        Output only. Recall.

        :return: The recall of this TextSentimentEvaluationMetrics.
        :rtype: float
        """
        return self._recall

    @recall.setter
    def recall(self, recall):
        """Sets the recall of this TextSentimentEvaluationMetrics.

        Output only. Recall.

        :param recall: The recall of this TextSentimentEvaluationMetrics.
        :type recall: float
        """

        self._recall = recall
