# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.big_query_source import BigQuerySource
from openapi_server.models.gcs_source import GcsSource
from openapi_server import util


class InputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bigquery_source: BigQuerySource=None, gcs_source: GcsSource=None, params: Dict[str, str]=None):
        """InputConfig - a model defined in OpenAPI

        :param bigquery_source: The bigquery_source of this InputConfig.
        :param gcs_source: The gcs_source of this InputConfig.
        :param params: The params of this InputConfig.
        """
        self.openapi_types = {
            'bigquery_source': BigQuerySource,
            'gcs_source': GcsSource,
            'params': Dict[str, str]
        }

        self.attribute_map = {
            'bigquery_source': 'bigquerySource',
            'gcs_source': 'gcsSource',
            'params': 'params'
        }

        self._bigquery_source = bigquery_source
        self._gcs_source = gcs_source
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputConfig of this InputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bigquery_source(self):
        """Gets the bigquery_source of this InputConfig.


        :return: The bigquery_source of this InputConfig.
        :rtype: BigQuerySource
        """
        return self._bigquery_source

    @bigquery_source.setter
    def bigquery_source(self, bigquery_source):
        """Sets the bigquery_source of this InputConfig.


        :param bigquery_source: The bigquery_source of this InputConfig.
        :type bigquery_source: BigQuerySource
        """

        self._bigquery_source = bigquery_source

    @property
    def gcs_source(self):
        """Gets the gcs_source of this InputConfig.


        :return: The gcs_source of this InputConfig.
        :rtype: GcsSource
        """
        return self._gcs_source

    @gcs_source.setter
    def gcs_source(self, gcs_source):
        """Sets the gcs_source of this InputConfig.


        :param gcs_source: The gcs_source of this InputConfig.
        :type gcs_source: GcsSource
        """

        self._gcs_source = gcs_source

    @property
    def params(self):
        """Gets the params of this InputConfig.

        Additional domain-specific parameters describing the semantic of the imported data, any string must be up to 25000 characters long. * For Tables: `schema_inference_version` - (integer) Required. The version of the algorithm that should be used for the initial inference of the schema (columns' DataTypes) of the table the data is being imported into. Allowed values: \"1\".

        :return: The params of this InputConfig.
        :rtype: Dict[str, str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this InputConfig.

        Additional domain-specific parameters describing the semantic of the imported data, any string must be up to 25000 characters long. * For Tables: `schema_inference_version` - (integer) Required. The version of the algorithm that should be used for the initial inference of the schema (columns' DataTypes) of the table the data is being imported into. Allowed values: \"1\".

        :param params: The params of this InputConfig.
        :type params: Dict[str, str]
        """

        self._params = params
