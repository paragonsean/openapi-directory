# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.double_range import DoubleRange
from openapi_server.models.tables_model_column_info import TablesModelColumnInfo
from openapi_server import util


class TablesAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baseline_score: float=None, prediction_interval: DoubleRange=None, score: float=None, tables_model_column_info: List[TablesModelColumnInfo]=None, value: object=None):
        """TablesAnnotation - a model defined in OpenAPI

        :param baseline_score: The baseline_score of this TablesAnnotation.
        :param prediction_interval: The prediction_interval of this TablesAnnotation.
        :param score: The score of this TablesAnnotation.
        :param tables_model_column_info: The tables_model_column_info of this TablesAnnotation.
        :param value: The value of this TablesAnnotation.
        """
        self.openapi_types = {
            'baseline_score': float,
            'prediction_interval': DoubleRange,
            'score': float,
            'tables_model_column_info': List[TablesModelColumnInfo],
            'value': object
        }

        self.attribute_map = {
            'baseline_score': 'baselineScore',
            'prediction_interval': 'predictionInterval',
            'score': 'score',
            'tables_model_column_info': 'tablesModelColumnInfo',
            'value': 'value'
        }

        self._baseline_score = baseline_score
        self._prediction_interval = prediction_interval
        self._score = score
        self._tables_model_column_info = tables_model_column_info
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TablesAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TablesAnnotation of this TablesAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baseline_score(self):
        """Gets the baseline_score of this TablesAnnotation.

        Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.

        :return: The baseline_score of this TablesAnnotation.
        :rtype: float
        """
        return self._baseline_score

    @baseline_score.setter
    def baseline_score(self, baseline_score):
        """Sets the baseline_score of this TablesAnnotation.

        Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.

        :param baseline_score: The baseline_score of this TablesAnnotation.
        :type baseline_score: float
        """

        self._baseline_score = baseline_score

    @property
    def prediction_interval(self):
        """Gets the prediction_interval of this TablesAnnotation.


        :return: The prediction_interval of this TablesAnnotation.
        :rtype: DoubleRange
        """
        return self._prediction_interval

    @prediction_interval.setter
    def prediction_interval(self, prediction_interval):
        """Sets the prediction_interval of this TablesAnnotation.


        :param prediction_interval: The prediction_interval of this TablesAnnotation.
        :type prediction_interval: DoubleRange
        """

        self._prediction_interval = prediction_interval

    @property
    def score(self):
        """Gets the score of this TablesAnnotation.

        Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.

        :return: The score of this TablesAnnotation.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TablesAnnotation.

        Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.

        :param score: The score of this TablesAnnotation.
        :type score: float
        """

        self._score = score

    @property
    def tables_model_column_info(self):
        """Gets the tables_model_column_info of this TablesAnnotation.

        Output only. Auxiliary information for each of the model's input_feature_column_specs with respect to this particular prediction. If no other fields than column_spec_name and column_display_name would be populated, then this whole field is not.

        :return: The tables_model_column_info of this TablesAnnotation.
        :rtype: List[TablesModelColumnInfo]
        """
        return self._tables_model_column_info

    @tables_model_column_info.setter
    def tables_model_column_info(self, tables_model_column_info):
        """Sets the tables_model_column_info of this TablesAnnotation.

        Output only. Auxiliary information for each of the model's input_feature_column_specs with respect to this particular prediction. If no other fields than column_spec_name and column_display_name would be populated, then this whole field is not.

        :param tables_model_column_info: The tables_model_column_info of this TablesAnnotation.
        :type tables_model_column_info: List[TablesModelColumnInfo]
        """

        self._tables_model_column_info = tables_model_column_info

    @property
    def value(self):
        """Gets the value of this TablesAnnotation.

        The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.

        :return: The value of this TablesAnnotation.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this TablesAnnotation.

        The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.

        :param value: The value of this TablesAnnotation.
        :type value: object
        """

        self._value = value
