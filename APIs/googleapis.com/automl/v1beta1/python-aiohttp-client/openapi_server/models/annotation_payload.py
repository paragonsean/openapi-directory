# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_annotation import ClassificationAnnotation
from openapi_server.models.image_object_detection_annotation import ImageObjectDetectionAnnotation
from openapi_server.models.tables_annotation import TablesAnnotation
from openapi_server.models.text_extraction_annotation import TextExtractionAnnotation
from openapi_server.models.text_sentiment_annotation import TextSentimentAnnotation
from openapi_server.models.translation_annotation import TranslationAnnotation
from openapi_server.models.video_classification_annotation import VideoClassificationAnnotation
from openapi_server.models.video_object_tracking_annotation import VideoObjectTrackingAnnotation
from openapi_server import util


class AnnotationPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_spec_id: str=None, classification: ClassificationAnnotation=None, display_name: str=None, image_object_detection: ImageObjectDetectionAnnotation=None, tables: TablesAnnotation=None, text_extraction: TextExtractionAnnotation=None, text_sentiment: TextSentimentAnnotation=None, translation: TranslationAnnotation=None, video_classification: VideoClassificationAnnotation=None, video_object_tracking: VideoObjectTrackingAnnotation=None):
        """AnnotationPayload - a model defined in OpenAPI

        :param annotation_spec_id: The annotation_spec_id of this AnnotationPayload.
        :param classification: The classification of this AnnotationPayload.
        :param display_name: The display_name of this AnnotationPayload.
        :param image_object_detection: The image_object_detection of this AnnotationPayload.
        :param tables: The tables of this AnnotationPayload.
        :param text_extraction: The text_extraction of this AnnotationPayload.
        :param text_sentiment: The text_sentiment of this AnnotationPayload.
        :param translation: The translation of this AnnotationPayload.
        :param video_classification: The video_classification of this AnnotationPayload.
        :param video_object_tracking: The video_object_tracking of this AnnotationPayload.
        """
        self.openapi_types = {
            'annotation_spec_id': str,
            'classification': ClassificationAnnotation,
            'display_name': str,
            'image_object_detection': ImageObjectDetectionAnnotation,
            'tables': TablesAnnotation,
            'text_extraction': TextExtractionAnnotation,
            'text_sentiment': TextSentimentAnnotation,
            'translation': TranslationAnnotation,
            'video_classification': VideoClassificationAnnotation,
            'video_object_tracking': VideoObjectTrackingAnnotation
        }

        self.attribute_map = {
            'annotation_spec_id': 'annotationSpecId',
            'classification': 'classification',
            'display_name': 'displayName',
            'image_object_detection': 'imageObjectDetection',
            'tables': 'tables',
            'text_extraction': 'textExtraction',
            'text_sentiment': 'textSentiment',
            'translation': 'translation',
            'video_classification': 'videoClassification',
            'video_object_tracking': 'videoObjectTracking'
        }

        self._annotation_spec_id = annotation_spec_id
        self._classification = classification
        self._display_name = display_name
        self._image_object_detection = image_object_detection
        self._tables = tables
        self._text_extraction = text_extraction
        self._text_sentiment = text_sentiment
        self._translation = translation
        self._video_classification = video_classification
        self._video_object_tracking = video_object_tracking

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotationPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotationPayload of this AnnotationPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_spec_id(self):
        """Gets the annotation_spec_id of this AnnotationPayload.

        Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use.

        :return: The annotation_spec_id of this AnnotationPayload.
        :rtype: str
        """
        return self._annotation_spec_id

    @annotation_spec_id.setter
    def annotation_spec_id(self, annotation_spec_id):
        """Sets the annotation_spec_id of this AnnotationPayload.

        Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use.

        :param annotation_spec_id: The annotation_spec_id of this AnnotationPayload.
        :type annotation_spec_id: str
        """

        self._annotation_spec_id = annotation_spec_id

    @property
    def classification(self):
        """Gets the classification of this AnnotationPayload.


        :return: The classification of this AnnotationPayload.
        :rtype: ClassificationAnnotation
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this AnnotationPayload.


        :param classification: The classification of this AnnotationPayload.
        :type classification: ClassificationAnnotation
        """

        self._classification = classification

    @property
    def display_name(self):
        """Gets the display_name of this AnnotationPayload.

        Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training.

        :return: The display_name of this AnnotationPayload.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AnnotationPayload.

        Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training.

        :param display_name: The display_name of this AnnotationPayload.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def image_object_detection(self):
        """Gets the image_object_detection of this AnnotationPayload.


        :return: The image_object_detection of this AnnotationPayload.
        :rtype: ImageObjectDetectionAnnotation
        """
        return self._image_object_detection

    @image_object_detection.setter
    def image_object_detection(self, image_object_detection):
        """Sets the image_object_detection of this AnnotationPayload.


        :param image_object_detection: The image_object_detection of this AnnotationPayload.
        :type image_object_detection: ImageObjectDetectionAnnotation
        """

        self._image_object_detection = image_object_detection

    @property
    def tables(self):
        """Gets the tables of this AnnotationPayload.


        :return: The tables of this AnnotationPayload.
        :rtype: TablesAnnotation
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this AnnotationPayload.


        :param tables: The tables of this AnnotationPayload.
        :type tables: TablesAnnotation
        """

        self._tables = tables

    @property
    def text_extraction(self):
        """Gets the text_extraction of this AnnotationPayload.


        :return: The text_extraction of this AnnotationPayload.
        :rtype: TextExtractionAnnotation
        """
        return self._text_extraction

    @text_extraction.setter
    def text_extraction(self, text_extraction):
        """Sets the text_extraction of this AnnotationPayload.


        :param text_extraction: The text_extraction of this AnnotationPayload.
        :type text_extraction: TextExtractionAnnotation
        """

        self._text_extraction = text_extraction

    @property
    def text_sentiment(self):
        """Gets the text_sentiment of this AnnotationPayload.


        :return: The text_sentiment of this AnnotationPayload.
        :rtype: TextSentimentAnnotation
        """
        return self._text_sentiment

    @text_sentiment.setter
    def text_sentiment(self, text_sentiment):
        """Sets the text_sentiment of this AnnotationPayload.


        :param text_sentiment: The text_sentiment of this AnnotationPayload.
        :type text_sentiment: TextSentimentAnnotation
        """

        self._text_sentiment = text_sentiment

    @property
    def translation(self):
        """Gets the translation of this AnnotationPayload.


        :return: The translation of this AnnotationPayload.
        :rtype: TranslationAnnotation
        """
        return self._translation

    @translation.setter
    def translation(self, translation):
        """Sets the translation of this AnnotationPayload.


        :param translation: The translation of this AnnotationPayload.
        :type translation: TranslationAnnotation
        """

        self._translation = translation

    @property
    def video_classification(self):
        """Gets the video_classification of this AnnotationPayload.


        :return: The video_classification of this AnnotationPayload.
        :rtype: VideoClassificationAnnotation
        """
        return self._video_classification

    @video_classification.setter
    def video_classification(self, video_classification):
        """Sets the video_classification of this AnnotationPayload.


        :param video_classification: The video_classification of this AnnotationPayload.
        :type video_classification: VideoClassificationAnnotation
        """

        self._video_classification = video_classification

    @property
    def video_object_tracking(self):
        """Gets the video_object_tracking of this AnnotationPayload.


        :return: The video_object_tracking of this AnnotationPayload.
        :rtype: VideoObjectTrackingAnnotation
        """
        return self._video_object_tracking

    @video_object_tracking.setter
    def video_object_tracking(self, video_object_tracking):
        """Sets the video_object_tracking of this AnnotationPayload.


        :param video_object_tracking: The video_object_tracking of this AnnotationPayload.
        :type video_object_tracking: VideoObjectTrackingAnnotation
        """

        self._video_object_tracking = video_object_tracking
