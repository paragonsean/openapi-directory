# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server import util


class VideoObjectTrackingAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_box: BoundingPoly=None, instance_id: str=None, score: float=None, time_offset: str=None):
        """VideoObjectTrackingAnnotation - a model defined in OpenAPI

        :param bounding_box: The bounding_box of this VideoObjectTrackingAnnotation.
        :param instance_id: The instance_id of this VideoObjectTrackingAnnotation.
        :param score: The score of this VideoObjectTrackingAnnotation.
        :param time_offset: The time_offset of this VideoObjectTrackingAnnotation.
        """
        self.openapi_types = {
            'bounding_box': BoundingPoly,
            'instance_id': str,
            'score': float,
            'time_offset': str
        }

        self.attribute_map = {
            'bounding_box': 'boundingBox',
            'instance_id': 'instanceId',
            'score': 'score',
            'time_offset': 'timeOffset'
        }

        self._bounding_box = bounding_box
        self._instance_id = instance_id
        self._score = score
        self._time_offset = time_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoObjectTrackingAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoObjectTrackingAnnotation of this VideoObjectTrackingAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_box(self):
        """Gets the bounding_box of this VideoObjectTrackingAnnotation.


        :return: The bounding_box of this VideoObjectTrackingAnnotation.
        :rtype: BoundingPoly
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this VideoObjectTrackingAnnotation.


        :param bounding_box: The bounding_box of this VideoObjectTrackingAnnotation.
        :type bounding_box: BoundingPoly
        """

        self._bounding_box = bounding_box

    @property
    def instance_id(self):
        """Gets the instance_id of this VideoObjectTrackingAnnotation.

        Optional. The instance of the object, expressed as a positive integer. Used to tell apart objects of the same type (i.e. AnnotationSpec) when multiple are present on a single example. NOTE: Instance ID prediction quality is not a part of model evaluation and is done as best effort. Especially in cases when an entity goes off-screen for a longer time (minutes), when it comes back it may be given a new instance ID.

        :return: The instance_id of this VideoObjectTrackingAnnotation.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this VideoObjectTrackingAnnotation.

        Optional. The instance of the object, expressed as a positive integer. Used to tell apart objects of the same type (i.e. AnnotationSpec) when multiple are present on a single example. NOTE: Instance ID prediction quality is not a part of model evaluation and is done as best effort. Especially in cases when an entity goes off-screen for a longer time (minutes), when it comes back it may be given a new instance ID.

        :param instance_id: The instance_id of this VideoObjectTrackingAnnotation.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def score(self):
        """Gets the score of this VideoObjectTrackingAnnotation.

        Output only. The confidence that this annotation is positive for the video at the time_offset, value in [0, 1], higher means higher positivity confidence. For annotations created by the user the score is 1. When user approves an annotation, the original float score is kept (and not changed to 1).

        :return: The score of this VideoObjectTrackingAnnotation.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this VideoObjectTrackingAnnotation.

        Output only. The confidence that this annotation is positive for the video at the time_offset, value in [0, 1], higher means higher positivity confidence. For annotations created by the user the score is 1. When user approves an annotation, the original float score is kept (and not changed to 1).

        :param score: The score of this VideoObjectTrackingAnnotation.
        :type score: float
        """

        self._score = score

    @property
    def time_offset(self):
        """Gets the time_offset of this VideoObjectTrackingAnnotation.

        Required. A time (frame) of a video to which this annotation pertains. Represented as the duration since the video's start.

        :return: The time_offset of this VideoObjectTrackingAnnotation.
        :rtype: str
        """
        return self._time_offset

    @time_offset.setter
    def time_offset(self, time_offset):
        """Sets the time_offset of this VideoObjectTrackingAnnotation.

        Required. A time (frame) of a video to which this annotation pertains. Represented as the duration since the video's start.

        :param time_offset: The time_offset of this VideoObjectTrackingAnnotation.
        :type time_offset: str
        """

        self._time_offset = time_offset
