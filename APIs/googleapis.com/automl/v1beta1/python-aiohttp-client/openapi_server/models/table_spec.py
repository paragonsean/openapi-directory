# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_config import InputConfig
from openapi_server import util


class TableSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column_count: str=None, etag: str=None, input_configs: List[InputConfig]=None, name: str=None, row_count: str=None, time_column_spec_id: str=None, valid_row_count: str=None):
        """TableSpec - a model defined in OpenAPI

        :param column_count: The column_count of this TableSpec.
        :param etag: The etag of this TableSpec.
        :param input_configs: The input_configs of this TableSpec.
        :param name: The name of this TableSpec.
        :param row_count: The row_count of this TableSpec.
        :param time_column_spec_id: The time_column_spec_id of this TableSpec.
        :param valid_row_count: The valid_row_count of this TableSpec.
        """
        self.openapi_types = {
            'column_count': str,
            'etag': str,
            'input_configs': List[InputConfig],
            'name': str,
            'row_count': str,
            'time_column_spec_id': str,
            'valid_row_count': str
        }

        self.attribute_map = {
            'column_count': 'columnCount',
            'etag': 'etag',
            'input_configs': 'inputConfigs',
            'name': 'name',
            'row_count': 'rowCount',
            'time_column_spec_id': 'timeColumnSpecId',
            'valid_row_count': 'validRowCount'
        }

        self._column_count = column_count
        self._etag = etag
        self._input_configs = input_configs
        self._name = name
        self._row_count = row_count
        self._time_column_spec_id = time_column_spec_id
        self._valid_row_count = valid_row_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TableSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TableSpec of this TableSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column_count(self):
        """Gets the column_count of this TableSpec.

        Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.

        :return: The column_count of this TableSpec.
        :rtype: str
        """
        return self._column_count

    @column_count.setter
    def column_count(self, column_count):
        """Sets the column_count of this TableSpec.

        Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.

        :param column_count: The column_count of this TableSpec.
        :type column_count: str
        """

        self._column_count = column_count

    @property
    def etag(self):
        """Gets the etag of this TableSpec.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this TableSpec.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this TableSpec.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this TableSpec.
        :type etag: str
        """

        self._etag = etag

    @property
    def input_configs(self):
        """Gets the input_configs of this TableSpec.

        Output only. Input configs via which data currently residing in the table had been imported.

        :return: The input_configs of this TableSpec.
        :rtype: List[InputConfig]
        """
        return self._input_configs

    @input_configs.setter
    def input_configs(self, input_configs):
        """Sets the input_configs of this TableSpec.

        Output only. Input configs via which data currently residing in the table had been imported.

        :param input_configs: The input_configs of this TableSpec.
        :type input_configs: List[InputConfig]
        """

        self._input_configs = input_configs

    @property
    def name(self):
        """Gets the name of this TableSpec.

        Output only. The resource name of the table spec. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`

        :return: The name of this TableSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TableSpec.

        Output only. The resource name of the table spec. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`

        :param name: The name of this TableSpec.
        :type name: str
        """

        self._name = name

    @property
    def row_count(self):
        """Gets the row_count of this TableSpec.

        Output only. The number of rows (i.e. examples) in the table.

        :return: The row_count of this TableSpec.
        :rtype: str
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this TableSpec.

        Output only. The number of rows (i.e. examples) in the table.

        :param row_count: The row_count of this TableSpec.
        :type row_count: str
        """

        self._row_count = row_count

    @property
    def time_column_spec_id(self):
        """Gets the time_column_spec_id of this TableSpec.

        column_spec_id of the time column. Only used if the parent dataset's ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and those in between to VALIDATE. Required type: TIMESTAMP. If both this column and ml_use_column are not set, then ML use of all rows will be assigned by AutoML. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :return: The time_column_spec_id of this TableSpec.
        :rtype: str
        """
        return self._time_column_spec_id

    @time_column_spec_id.setter
    def time_column_spec_id(self, time_column_spec_id):
        """Sets the time_column_spec_id of this TableSpec.

        column_spec_id of the time column. Only used if the parent dataset's ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and those in between to VALIDATE. Required type: TIMESTAMP. If both this column and ml_use_column are not set, then ML use of all rows will be assigned by AutoML. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :param time_column_spec_id: The time_column_spec_id of this TableSpec.
        :type time_column_spec_id: str
        """

        self._time_column_spec_id = time_column_spec_id

    @property
    def valid_row_count(self):
        """Gets the valid_row_count of this TableSpec.

        Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).

        :return: The valid_row_count of this TableSpec.
        :rtype: str
        """
        return self._valid_row_count

    @valid_row_count.setter
    def valid_row_count(self, valid_row_count):
        """Sets the valid_row_count of this TableSpec.

        Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).

        :param valid_row_count: The valid_row_count of this TableSpec.
        :type valid_row_count: str
        """

        self._valid_row_count = valid_row_count
