# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.correlation_stats import CorrelationStats
from openapi_server import util


class TablesDatasetMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ml_use_column_spec_id: str=None, primary_table_spec_id: str=None, stats_update_time: str=None, target_column_correlations: Dict[str, CorrelationStats]=None, target_column_spec_id: str=None, weight_column_spec_id: str=None):
        """TablesDatasetMetadata - a model defined in OpenAPI

        :param ml_use_column_spec_id: The ml_use_column_spec_id of this TablesDatasetMetadata.
        :param primary_table_spec_id: The primary_table_spec_id of this TablesDatasetMetadata.
        :param stats_update_time: The stats_update_time of this TablesDatasetMetadata.
        :param target_column_correlations: The target_column_correlations of this TablesDatasetMetadata.
        :param target_column_spec_id: The target_column_spec_id of this TablesDatasetMetadata.
        :param weight_column_spec_id: The weight_column_spec_id of this TablesDatasetMetadata.
        """
        self.openapi_types = {
            'ml_use_column_spec_id': str,
            'primary_table_spec_id': str,
            'stats_update_time': str,
            'target_column_correlations': Dict[str, CorrelationStats],
            'target_column_spec_id': str,
            'weight_column_spec_id': str
        }

        self.attribute_map = {
            'ml_use_column_spec_id': 'mlUseColumnSpecId',
            'primary_table_spec_id': 'primaryTableSpecId',
            'stats_update_time': 'statsUpdateTime',
            'target_column_correlations': 'targetColumnCorrelations',
            'target_column_spec_id': 'targetColumnSpecId',
            'weight_column_spec_id': 'weightColumnSpecId'
        }

        self._ml_use_column_spec_id = ml_use_column_spec_id
        self._primary_table_spec_id = primary_table_spec_id
        self._stats_update_time = stats_update_time
        self._target_column_correlations = target_column_correlations
        self._target_column_spec_id = target_column_spec_id
        self._weight_column_spec_id = weight_column_spec_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TablesDatasetMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TablesDatasetMetadata of this TablesDatasetMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ml_use_column_spec_id(self):
        """Gets the ml_use_column_spec_id of this TablesDatasetMetadata.

        column_spec_id of the primary table column which specifies a possible ML use of the row, i.e. the column will be used to split the rows into TRAIN, VALIDATE and TEST sets. Required type: STRING. This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST` among its values, or only have `TEST`, `UNASSIGNED` values. In the latter case the rows with `UNASSIGNED` value will be assigned by AutoML. Note that if a given ml use distribution makes it impossible to create a \"good\" model, that call will error describing the issue. If both this column_spec_id and primary table's time_column_spec_id are not set, then all rows are treated as `UNASSIGNED`. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :return: The ml_use_column_spec_id of this TablesDatasetMetadata.
        :rtype: str
        """
        return self._ml_use_column_spec_id

    @ml_use_column_spec_id.setter
    def ml_use_column_spec_id(self, ml_use_column_spec_id):
        """Sets the ml_use_column_spec_id of this TablesDatasetMetadata.

        column_spec_id of the primary table column which specifies a possible ML use of the row, i.e. the column will be used to split the rows into TRAIN, VALIDATE and TEST sets. Required type: STRING. This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST` among its values, or only have `TEST`, `UNASSIGNED` values. In the latter case the rows with `UNASSIGNED` value will be assigned by AutoML. Note that if a given ml use distribution makes it impossible to create a \"good\" model, that call will error describing the issue. If both this column_spec_id and primary table's time_column_spec_id are not set, then all rows are treated as `UNASSIGNED`. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :param ml_use_column_spec_id: The ml_use_column_spec_id of this TablesDatasetMetadata.
        :type ml_use_column_spec_id: str
        """

        self._ml_use_column_spec_id = ml_use_column_spec_id

    @property
    def primary_table_spec_id(self):
        """Gets the primary_table_spec_id of this TablesDatasetMetadata.

        Output only. The table_spec_id of the primary table of this dataset.

        :return: The primary_table_spec_id of this TablesDatasetMetadata.
        :rtype: str
        """
        return self._primary_table_spec_id

    @primary_table_spec_id.setter
    def primary_table_spec_id(self, primary_table_spec_id):
        """Sets the primary_table_spec_id of this TablesDatasetMetadata.

        Output only. The table_spec_id of the primary table of this dataset.

        :param primary_table_spec_id: The primary_table_spec_id of this TablesDatasetMetadata.
        :type primary_table_spec_id: str
        """

        self._primary_table_spec_id = primary_table_spec_id

    @property
    def stats_update_time(self):
        """Gets the stats_update_time of this TablesDatasetMetadata.

        Output only. The most recent timestamp when target_column_correlations field and all descendant ColumnSpec.data_stats and ColumnSpec.top_correlated_columns fields were last (re-)generated. Any changes that happened to the dataset afterwards are not reflected in these fields values. The regeneration happens in the background on a best effort basis.

        :return: The stats_update_time of this TablesDatasetMetadata.
        :rtype: str
        """
        return self._stats_update_time

    @stats_update_time.setter
    def stats_update_time(self, stats_update_time):
        """Sets the stats_update_time of this TablesDatasetMetadata.

        Output only. The most recent timestamp when target_column_correlations field and all descendant ColumnSpec.data_stats and ColumnSpec.top_correlated_columns fields were last (re-)generated. Any changes that happened to the dataset afterwards are not reflected in these fields values. The regeneration happens in the background on a best effort basis.

        :param stats_update_time: The stats_update_time of this TablesDatasetMetadata.
        :type stats_update_time: str
        """

        self._stats_update_time = stats_update_time

    @property
    def target_column_correlations(self):
        """Gets the target_column_correlations of this TablesDatasetMetadata.

        Output only. Correlations between TablesDatasetMetadata.target_column_spec_id, and other columns of the TablesDatasetMetadataprimary_table. Only set if the target column is set. Mapping from other column spec id to its CorrelationStats with the target column. This field may be stale, see the stats_update_time field for for the timestamp at which these stats were last updated.

        :return: The target_column_correlations of this TablesDatasetMetadata.
        :rtype: Dict[str, CorrelationStats]
        """
        return self._target_column_correlations

    @target_column_correlations.setter
    def target_column_correlations(self, target_column_correlations):
        """Sets the target_column_correlations of this TablesDatasetMetadata.

        Output only. Correlations between TablesDatasetMetadata.target_column_spec_id, and other columns of the TablesDatasetMetadataprimary_table. Only set if the target column is set. Mapping from other column spec id to its CorrelationStats with the target column. This field may be stale, see the stats_update_time field for for the timestamp at which these stats were last updated.

        :param target_column_correlations: The target_column_correlations of this TablesDatasetMetadata.
        :type target_column_correlations: Dict[str, CorrelationStats]
        """

        self._target_column_correlations = target_column_correlations

    @property
    def target_column_spec_id(self):
        """Gets the target_column_spec_id of this TablesDatasetMetadata.

        column_spec_id of the primary table's column that should be used as the training & prediction target. This column must be non-nullable and have one of following data types (otherwise model creation will error): * CATEGORY * FLOAT64 If the type is CATEGORY , only up to 100 unique values may exist in that column across all rows. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :return: The target_column_spec_id of this TablesDatasetMetadata.
        :rtype: str
        """
        return self._target_column_spec_id

    @target_column_spec_id.setter
    def target_column_spec_id(self, target_column_spec_id):
        """Sets the target_column_spec_id of this TablesDatasetMetadata.

        column_spec_id of the primary table's column that should be used as the training & prediction target. This column must be non-nullable and have one of following data types (otherwise model creation will error): * CATEGORY * FLOAT64 If the type is CATEGORY , only up to 100 unique values may exist in that column across all rows. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :param target_column_spec_id: The target_column_spec_id of this TablesDatasetMetadata.
        :type target_column_spec_id: str
        """

        self._target_column_spec_id = target_column_spec_id

    @property
    def weight_column_spec_id(self):
        """Gets the weight_column_spec_id of this TablesDatasetMetadata.

        column_spec_id of the primary table's column that should be used as the weight column, i.e. the higher the value the more important the row will be during model training. Required type: FLOAT64. Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is ignored for training. If not set all rows are assumed to have equal weight of 1. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :return: The weight_column_spec_id of this TablesDatasetMetadata.
        :rtype: str
        """
        return self._weight_column_spec_id

    @weight_column_spec_id.setter
    def weight_column_spec_id(self, weight_column_spec_id):
        """Sets the weight_column_spec_id of this TablesDatasetMetadata.

        column_spec_id of the primary table's column that should be used as the weight column, i.e. the higher the value the more important the row will be during model training. Required type: FLOAT64. Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is ignored for training. If not set all rows are assumed to have equal weight of 1. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.

        :param weight_column_spec_id: The weight_column_spec_id of this TablesDatasetMetadata.
        :type weight_column_spec_id: str
        """

        self._weight_column_spec_id = weight_column_spec_id
