# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.text_segment import TextSegment
from openapi_server import util


class TextExtractionAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, score: float=None, text_segment: TextSegment=None):
        """TextExtractionAnnotation - a model defined in OpenAPI

        :param score: The score of this TextExtractionAnnotation.
        :param text_segment: The text_segment of this TextExtractionAnnotation.
        """
        self.openapi_types = {
            'score': float,
            'text_segment': TextSegment
        }

        self.attribute_map = {
            'score': 'score',
            'text_segment': 'textSegment'
        }

        self._score = score
        self._text_segment = text_segment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextExtractionAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextExtractionAnnotation of this TextExtractionAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def score(self):
        """Gets the score of this TextExtractionAnnotation.

        Output only. A confidence estimate between 0.0 and 1.0. A higher value means greater confidence in correctness of the annotation.

        :return: The score of this TextExtractionAnnotation.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TextExtractionAnnotation.

        Output only. A confidence estimate between 0.0 and 1.0. A higher value means greater confidence in correctness of the annotation.

        :param score: The score of this TextExtractionAnnotation.
        :type score: float
        """

        self._score = score

    @property
    def text_segment(self):
        """Gets the text_segment of this TextExtractionAnnotation.


        :return: The text_segment of this TextExtractionAnnotation.
        :rtype: TextSegment
        """
        return self._text_segment

    @text_segment.setter
    def text_segment(self, text_segment):
        """Sets the text_segment of this TextExtractionAnnotation.


        :param text_segment: The text_segment of this TextExtractionAnnotation.
        :type text_segment: TextSegment
        """

        self._text_segment = text_segment
