# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_classification_model_metadata import ImageClassificationModelMetadata
from openapi_server.models.image_object_detection_model_metadata import ImageObjectDetectionModelMetadata
from openapi_server.models.tables_model_metadata import TablesModelMetadata
from openapi_server.models.text_classification_model_metadata import TextClassificationModelMetadata
from openapi_server.models.text_extraction_model_metadata import TextExtractionModelMetadata
from openapi_server.models.translation_model_metadata import TranslationModelMetadata
from openapi_server import util


class Model(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, dataset_id: str=None, deployment_state: str=None, display_name: str=None, image_classification_model_metadata: ImageClassificationModelMetadata=None, image_object_detection_model_metadata: ImageObjectDetectionModelMetadata=None, name: str=None, tables_model_metadata: TablesModelMetadata=None, text_classification_model_metadata: TextClassificationModelMetadata=None, text_extraction_model_metadata: TextExtractionModelMetadata=None, text_sentiment_model_metadata: object=None, train_example_count: int=None, translation_model_metadata: TranslationModelMetadata=None, update_time: str=None, validate_example_count: int=None, video_classification_model_metadata: object=None, video_object_tracking_model_metadata: object=None):
        """Model - a model defined in OpenAPI

        :param create_time: The create_time of this Model.
        :param dataset_id: The dataset_id of this Model.
        :param deployment_state: The deployment_state of this Model.
        :param display_name: The display_name of this Model.
        :param image_classification_model_metadata: The image_classification_model_metadata of this Model.
        :param image_object_detection_model_metadata: The image_object_detection_model_metadata of this Model.
        :param name: The name of this Model.
        :param tables_model_metadata: The tables_model_metadata of this Model.
        :param text_classification_model_metadata: The text_classification_model_metadata of this Model.
        :param text_extraction_model_metadata: The text_extraction_model_metadata of this Model.
        :param text_sentiment_model_metadata: The text_sentiment_model_metadata of this Model.
        :param train_example_count: The train_example_count of this Model.
        :param translation_model_metadata: The translation_model_metadata of this Model.
        :param update_time: The update_time of this Model.
        :param validate_example_count: The validate_example_count of this Model.
        :param video_classification_model_metadata: The video_classification_model_metadata of this Model.
        :param video_object_tracking_model_metadata: The video_object_tracking_model_metadata of this Model.
        """
        self.openapi_types = {
            'create_time': str,
            'dataset_id': str,
            'deployment_state': str,
            'display_name': str,
            'image_classification_model_metadata': ImageClassificationModelMetadata,
            'image_object_detection_model_metadata': ImageObjectDetectionModelMetadata,
            'name': str,
            'tables_model_metadata': TablesModelMetadata,
            'text_classification_model_metadata': TextClassificationModelMetadata,
            'text_extraction_model_metadata': TextExtractionModelMetadata,
            'text_sentiment_model_metadata': object,
            'train_example_count': int,
            'translation_model_metadata': TranslationModelMetadata,
            'update_time': str,
            'validate_example_count': int,
            'video_classification_model_metadata': object,
            'video_object_tracking_model_metadata': object
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'dataset_id': 'datasetId',
            'deployment_state': 'deploymentState',
            'display_name': 'displayName',
            'image_classification_model_metadata': 'imageClassificationModelMetadata',
            'image_object_detection_model_metadata': 'imageObjectDetectionModelMetadata',
            'name': 'name',
            'tables_model_metadata': 'tablesModelMetadata',
            'text_classification_model_metadata': 'textClassificationModelMetadata',
            'text_extraction_model_metadata': 'textExtractionModelMetadata',
            'text_sentiment_model_metadata': 'textSentimentModelMetadata',
            'train_example_count': 'trainExampleCount',
            'translation_model_metadata': 'translationModelMetadata',
            'update_time': 'updateTime',
            'validate_example_count': 'validateExampleCount',
            'video_classification_model_metadata': 'videoClassificationModelMetadata',
            'video_object_tracking_model_metadata': 'videoObjectTrackingModelMetadata'
        }

        self._create_time = create_time
        self._dataset_id = dataset_id
        self._deployment_state = deployment_state
        self._display_name = display_name
        self._image_classification_model_metadata = image_classification_model_metadata
        self._image_object_detection_model_metadata = image_object_detection_model_metadata
        self._name = name
        self._tables_model_metadata = tables_model_metadata
        self._text_classification_model_metadata = text_classification_model_metadata
        self._text_extraction_model_metadata = text_extraction_model_metadata
        self._text_sentiment_model_metadata = text_sentiment_model_metadata
        self._train_example_count = train_example_count
        self._translation_model_metadata = translation_model_metadata
        self._update_time = update_time
        self._validate_example_count = validate_example_count
        self._video_classification_model_metadata = video_classification_model_metadata
        self._video_object_tracking_model_metadata = video_object_tracking_model_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Model of this Model.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Model.

        Output only. Timestamp when the model training finished and can be used for prediction.

        :return: The create_time of this Model.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Model.

        Output only. Timestamp when the model training finished and can be used for prediction.

        :param create_time: The create_time of this Model.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def dataset_id(self):
        """Gets the dataset_id of this Model.

        Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.

        :return: The dataset_id of this Model.
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this Model.

        Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.

        :param dataset_id: The dataset_id of this Model.
        :type dataset_id: str
        """

        self._dataset_id = dataset_id

    @property
    def deployment_state(self):
        """Gets the deployment_state of this Model.

        Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.

        :return: The deployment_state of this Model.
        :rtype: str
        """
        return self._deployment_state

    @deployment_state.setter
    def deployment_state(self, deployment_state):
        """Sets the deployment_state of this Model.

        Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.

        :param deployment_state: The deployment_state of this Model.
        :type deployment_state: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "DEPLOYED", "UNDEPLOYED"]  # noqa: E501
        if deployment_state not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_state` ({0}), must be one of {1}"
                .format(deployment_state, allowed_values)
            )

        self._deployment_state = deployment_state

    @property
    def display_name(self):
        """Gets the display_name of this Model.

        Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.

        :return: The display_name of this Model.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Model.

        Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.

        :param display_name: The display_name of this Model.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def image_classification_model_metadata(self):
        """Gets the image_classification_model_metadata of this Model.


        :return: The image_classification_model_metadata of this Model.
        :rtype: ImageClassificationModelMetadata
        """
        return self._image_classification_model_metadata

    @image_classification_model_metadata.setter
    def image_classification_model_metadata(self, image_classification_model_metadata):
        """Sets the image_classification_model_metadata of this Model.


        :param image_classification_model_metadata: The image_classification_model_metadata of this Model.
        :type image_classification_model_metadata: ImageClassificationModelMetadata
        """

        self._image_classification_model_metadata = image_classification_model_metadata

    @property
    def image_object_detection_model_metadata(self):
        """Gets the image_object_detection_model_metadata of this Model.


        :return: The image_object_detection_model_metadata of this Model.
        :rtype: ImageObjectDetectionModelMetadata
        """
        return self._image_object_detection_model_metadata

    @image_object_detection_model_metadata.setter
    def image_object_detection_model_metadata(self, image_object_detection_model_metadata):
        """Sets the image_object_detection_model_metadata of this Model.


        :param image_object_detection_model_metadata: The image_object_detection_model_metadata of this Model.
        :type image_object_detection_model_metadata: ImageObjectDetectionModelMetadata
        """

        self._image_object_detection_model_metadata = image_object_detection_model_metadata

    @property
    def name(self):
        """Gets the name of this Model.

        Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`

        :return: The name of this Model.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Model.

        Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`

        :param name: The name of this Model.
        :type name: str
        """

        self._name = name

    @property
    def tables_model_metadata(self):
        """Gets the tables_model_metadata of this Model.


        :return: The tables_model_metadata of this Model.
        :rtype: TablesModelMetadata
        """
        return self._tables_model_metadata

    @tables_model_metadata.setter
    def tables_model_metadata(self, tables_model_metadata):
        """Sets the tables_model_metadata of this Model.


        :param tables_model_metadata: The tables_model_metadata of this Model.
        :type tables_model_metadata: TablesModelMetadata
        """

        self._tables_model_metadata = tables_model_metadata

    @property
    def text_classification_model_metadata(self):
        """Gets the text_classification_model_metadata of this Model.


        :return: The text_classification_model_metadata of this Model.
        :rtype: TextClassificationModelMetadata
        """
        return self._text_classification_model_metadata

    @text_classification_model_metadata.setter
    def text_classification_model_metadata(self, text_classification_model_metadata):
        """Sets the text_classification_model_metadata of this Model.


        :param text_classification_model_metadata: The text_classification_model_metadata of this Model.
        :type text_classification_model_metadata: TextClassificationModelMetadata
        """

        self._text_classification_model_metadata = text_classification_model_metadata

    @property
    def text_extraction_model_metadata(self):
        """Gets the text_extraction_model_metadata of this Model.


        :return: The text_extraction_model_metadata of this Model.
        :rtype: TextExtractionModelMetadata
        """
        return self._text_extraction_model_metadata

    @text_extraction_model_metadata.setter
    def text_extraction_model_metadata(self, text_extraction_model_metadata):
        """Sets the text_extraction_model_metadata of this Model.


        :param text_extraction_model_metadata: The text_extraction_model_metadata of this Model.
        :type text_extraction_model_metadata: TextExtractionModelMetadata
        """

        self._text_extraction_model_metadata = text_extraction_model_metadata

    @property
    def text_sentiment_model_metadata(self):
        """Gets the text_sentiment_model_metadata of this Model.

        Model metadata that is specific to text sentiment.

        :return: The text_sentiment_model_metadata of this Model.
        :rtype: object
        """
        return self._text_sentiment_model_metadata

    @text_sentiment_model_metadata.setter
    def text_sentiment_model_metadata(self, text_sentiment_model_metadata):
        """Sets the text_sentiment_model_metadata of this Model.

        Model metadata that is specific to text sentiment.

        :param text_sentiment_model_metadata: The text_sentiment_model_metadata of this Model.
        :type text_sentiment_model_metadata: object
        """

        self._text_sentiment_model_metadata = text_sentiment_model_metadata

    @property
    def train_example_count(self):
        """Gets the train_example_count of this Model.

        Output only. The number of examples in the training set used for the model creation.

        :return: The train_example_count of this Model.
        :rtype: int
        """
        return self._train_example_count

    @train_example_count.setter
    def train_example_count(self, train_example_count):
        """Sets the train_example_count of this Model.

        Output only. The number of examples in the training set used for the model creation.

        :param train_example_count: The train_example_count of this Model.
        :type train_example_count: int
        """

        self._train_example_count = train_example_count

    @property
    def translation_model_metadata(self):
        """Gets the translation_model_metadata of this Model.


        :return: The translation_model_metadata of this Model.
        :rtype: TranslationModelMetadata
        """
        return self._translation_model_metadata

    @translation_model_metadata.setter
    def translation_model_metadata(self, translation_model_metadata):
        """Sets the translation_model_metadata of this Model.


        :param translation_model_metadata: The translation_model_metadata of this Model.
        :type translation_model_metadata: TranslationModelMetadata
        """

        self._translation_model_metadata = translation_model_metadata

    @property
    def update_time(self):
        """Gets the update_time of this Model.

        Output only. Timestamp when this model was last updated.

        :return: The update_time of this Model.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Model.

        Output only. Timestamp when this model was last updated.

        :param update_time: The update_time of this Model.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def validate_example_count(self):
        """Gets the validate_example_count of this Model.

        Output only. The number of examples in the validation set used for the model creation.

        :return: The validate_example_count of this Model.
        :rtype: int
        """
        return self._validate_example_count

    @validate_example_count.setter
    def validate_example_count(self, validate_example_count):
        """Sets the validate_example_count of this Model.

        Output only. The number of examples in the validation set used for the model creation.

        :param validate_example_count: The validate_example_count of this Model.
        :type validate_example_count: int
        """

        self._validate_example_count = validate_example_count

    @property
    def video_classification_model_metadata(self):
        """Gets the video_classification_model_metadata of this Model.

        Model metadata specific to video classification.

        :return: The video_classification_model_metadata of this Model.
        :rtype: object
        """
        return self._video_classification_model_metadata

    @video_classification_model_metadata.setter
    def video_classification_model_metadata(self, video_classification_model_metadata):
        """Sets the video_classification_model_metadata of this Model.

        Model metadata specific to video classification.

        :param video_classification_model_metadata: The video_classification_model_metadata of this Model.
        :type video_classification_model_metadata: object
        """

        self._video_classification_model_metadata = video_classification_model_metadata

    @property
    def video_object_tracking_model_metadata(self):
        """Gets the video_object_tracking_model_metadata of this Model.

        Model metadata specific to video object tracking.

        :return: The video_object_tracking_model_metadata of this Model.
        :rtype: object
        """
        return self._video_object_tracking_model_metadata

    @video_object_tracking_model_metadata.setter
    def video_object_tracking_model_metadata(self, video_object_tracking_model_metadata):
        """Sets the video_object_tracking_model_metadata of this Model.

        Model metadata specific to video object tracking.

        :param video_object_tracking_model_metadata: The video_object_tracking_model_metadata of this Model.
        :type video_object_tracking_model_metadata: object
        """

        self._video_object_tracking_model_metadata = video_object_tracking_model_metadata
