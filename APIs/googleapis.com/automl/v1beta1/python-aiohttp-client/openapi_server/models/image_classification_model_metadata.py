# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageClassificationModelMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base_model_id: str=None, model_type: str=None, node_count: str=None, node_qps: float=None, stop_reason: str=None, train_budget: str=None, train_cost: str=None):
        """ImageClassificationModelMetadata - a model defined in OpenAPI

        :param base_model_id: The base_model_id of this ImageClassificationModelMetadata.
        :param model_type: The model_type of this ImageClassificationModelMetadata.
        :param node_count: The node_count of this ImageClassificationModelMetadata.
        :param node_qps: The node_qps of this ImageClassificationModelMetadata.
        :param stop_reason: The stop_reason of this ImageClassificationModelMetadata.
        :param train_budget: The train_budget of this ImageClassificationModelMetadata.
        :param train_cost: The train_cost of this ImageClassificationModelMetadata.
        """
        self.openapi_types = {
            'base_model_id': str,
            'model_type': str,
            'node_count': str,
            'node_qps': float,
            'stop_reason': str,
            'train_budget': str,
            'train_cost': str
        }

        self.attribute_map = {
            'base_model_id': 'baseModelId',
            'model_type': 'modelType',
            'node_count': 'nodeCount',
            'node_qps': 'nodeQps',
            'stop_reason': 'stopReason',
            'train_budget': 'trainBudget',
            'train_cost': 'trainCost'
        }

        self._base_model_id = base_model_id
        self._model_type = model_type
        self._node_count = node_count
        self._node_qps = node_qps
        self._stop_reason = stop_reason
        self._train_budget = train_budget
        self._train_cost = train_cost

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageClassificationModelMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageClassificationModelMetadata of this ImageClassificationModelMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base_model_id(self):
        """Gets the base_model_id of this ImageClassificationModelMetadata.

        Optional. The ID of the `base` model. If it is specified, the new model will be created based on the `base` model. Otherwise, the new model will be created from scratch. The `base` model must be in the same `project` and `location` as the new model to create, and have the same `model_type`.

        :return: The base_model_id of this ImageClassificationModelMetadata.
        :rtype: str
        """
        return self._base_model_id

    @base_model_id.setter
    def base_model_id(self, base_model_id):
        """Sets the base_model_id of this ImageClassificationModelMetadata.

        Optional. The ID of the `base` model. If it is specified, the new model will be created based on the `base` model. Otherwise, the new model will be created from scratch. The `base` model must be in the same `project` and `location` as the new model to create, and have the same `model_type`.

        :param base_model_id: The base_model_id of this ImageClassificationModelMetadata.
        :type base_model_id: str
        """

        self._base_model_id = base_model_id

    @property
    def model_type(self):
        """Gets the model_type of this ImageClassificationModelMetadata.

        Optional. Type of the model. The available values are: * `cloud` - Model to be used via prediction calls to AutoML API. This is the default value. * `mobile-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * `mobile-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models. * `mobile-core-ml-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-core-ml-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. * `mobile-core-ml-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.

        :return: The model_type of this ImageClassificationModelMetadata.
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this ImageClassificationModelMetadata.

        Optional. Type of the model. The available values are: * `cloud` - Model to be used via prediction calls to AutoML API. This is the default value. * `mobile-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * `mobile-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models. * `mobile-core-ml-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-core-ml-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. * `mobile-core-ml-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.

        :param model_type: The model_type of this ImageClassificationModelMetadata.
        :type model_type: str
        """

        self._model_type = model_type

    @property
    def node_count(self):
        """Gets the node_count of this ImageClassificationModelMetadata.

        Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the node_qps field.

        :return: The node_count of this ImageClassificationModelMetadata.
        :rtype: str
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this ImageClassificationModelMetadata.

        Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the node_qps field.

        :param node_count: The node_count of this ImageClassificationModelMetadata.
        :type node_count: str
        """

        self._node_count = node_count

    @property
    def node_qps(self):
        """Gets the node_qps of this ImageClassificationModelMetadata.

        Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.

        :return: The node_qps of this ImageClassificationModelMetadata.
        :rtype: float
        """
        return self._node_qps

    @node_qps.setter
    def node_qps(self, node_qps):
        """Sets the node_qps of this ImageClassificationModelMetadata.

        Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.

        :param node_qps: The node_qps of this ImageClassificationModelMetadata.
        :type node_qps: float
        """

        self._node_qps = node_qps

    @property
    def stop_reason(self):
        """Gets the stop_reason of this ImageClassificationModelMetadata.

        Output only. The reason that this create model operation stopped, e.g. `BUDGET_REACHED`, `MODEL_CONVERGED`.

        :return: The stop_reason of this ImageClassificationModelMetadata.
        :rtype: str
        """
        return self._stop_reason

    @stop_reason.setter
    def stop_reason(self, stop_reason):
        """Sets the stop_reason of this ImageClassificationModelMetadata.

        Output only. The reason that this create model operation stopped, e.g. `BUDGET_REACHED`, `MODEL_CONVERGED`.

        :param stop_reason: The stop_reason of this ImageClassificationModelMetadata.
        :type stop_reason: str
        """

        self._stop_reason = stop_reason

    @property
    def train_budget(self):
        """Gets the train_budget of this ImageClassificationModelMetadata.

        Required. The train budget of creating this model, expressed in hours. The actual `train_cost` will be equal or less than this value.

        :return: The train_budget of this ImageClassificationModelMetadata.
        :rtype: str
        """
        return self._train_budget

    @train_budget.setter
    def train_budget(self, train_budget):
        """Sets the train_budget of this ImageClassificationModelMetadata.

        Required. The train budget of creating this model, expressed in hours. The actual `train_cost` will be equal or less than this value.

        :param train_budget: The train_budget of this ImageClassificationModelMetadata.
        :type train_budget: str
        """

        self._train_budget = train_budget

    @property
    def train_cost(self):
        """Gets the train_cost of this ImageClassificationModelMetadata.

        Output only. The actual train cost of creating this model, expressed in hours. If this model is created from a `base` model, the train cost used to create the `base` model are not included.

        :return: The train_cost of this ImageClassificationModelMetadata.
        :rtype: str
        """
        return self._train_cost

    @train_cost.setter
    def train_cost(self, train_cost):
        """Sets the train_cost of this ImageClassificationModelMetadata.

        Output only. The actual train cost of creating this model, expressed in hours. If this model is created from a `base` model, the train cost used to create the `base` model are not included.

        :param train_cost: The train_cost of this ImageClassificationModelMetadata.
        :type train_cost: str
        """

        self._train_cost = train_cost
