# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_evaluation_metrics_confusion_matrix_row import ClassificationEvaluationMetricsConfusionMatrixRow
from openapi_server import util


class ConfusionMatrix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_spec_id: List[str]=None, display_name: List[str]=None, row: List[ClassificationEvaluationMetricsConfusionMatrixRow]=None):
        """ConfusionMatrix - a model defined in OpenAPI

        :param annotation_spec_id: The annotation_spec_id of this ConfusionMatrix.
        :param display_name: The display_name of this ConfusionMatrix.
        :param row: The row of this ConfusionMatrix.
        """
        self.openapi_types = {
            'annotation_spec_id': List[str],
            'display_name': List[str],
            'row': List[ClassificationEvaluationMetricsConfusionMatrixRow]
        }

        self.attribute_map = {
            'annotation_spec_id': 'annotationSpecId',
            'display_name': 'displayName',
            'row': 'row'
        }

        self._annotation_spec_id = annotation_spec_id
        self._display_name = display_name
        self._row = row

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfusionMatrix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfusionMatrix of this ConfusionMatrix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_spec_id(self):
        """Gets the annotation_spec_id of this ConfusionMatrix.

        Output only. IDs of the annotation specs used in the confusion matrix. For Tables CLASSIFICATION prediction_type only list of annotation_spec_display_name-s is populated.

        :return: The annotation_spec_id of this ConfusionMatrix.
        :rtype: List[str]
        """
        return self._annotation_spec_id

    @annotation_spec_id.setter
    def annotation_spec_id(self, annotation_spec_id):
        """Sets the annotation_spec_id of this ConfusionMatrix.

        Output only. IDs of the annotation specs used in the confusion matrix. For Tables CLASSIFICATION prediction_type only list of annotation_spec_display_name-s is populated.

        :param annotation_spec_id: The annotation_spec_id of this ConfusionMatrix.
        :type annotation_spec_id: List[str]
        """

        self._annotation_spec_id = annotation_spec_id

    @property
    def display_name(self):
        """Gets the display_name of this ConfusionMatrix.

        Output only. Display name of the annotation specs used in the confusion matrix, as they were at the moment of the evaluation. For Tables CLASSIFICATION prediction_type-s, distinct values of the target column at the moment of the model evaluation are populated here.

        :return: The display_name of this ConfusionMatrix.
        :rtype: List[str]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ConfusionMatrix.

        Output only. Display name of the annotation specs used in the confusion matrix, as they were at the moment of the evaluation. For Tables CLASSIFICATION prediction_type-s, distinct values of the target column at the moment of the model evaluation are populated here.

        :param display_name: The display_name of this ConfusionMatrix.
        :type display_name: List[str]
        """

        self._display_name = display_name

    @property
    def row(self):
        """Gets the row of this ConfusionMatrix.

        Output only. Rows in the confusion matrix. The number of rows is equal to the size of `annotation_spec_id`. `row[i].example_count[j]` is the number of examples that have ground truth of the `annotation_spec_id[i]` and are predicted as `annotation_spec_id[j]` by the model being evaluated.

        :return: The row of this ConfusionMatrix.
        :rtype: List[ClassificationEvaluationMetricsConfusionMatrixRow]
        """
        return self._row

    @row.setter
    def row(self, row):
        """Sets the row of this ConfusionMatrix.

        Output only. Rows in the confusion matrix. The number of rows is equal to the size of `annotation_spec_id`. `row[i].example_count[j]` is the number of examples that have ground truth of the `annotation_spec_id[i]` and are predicted as `annotation_spec_id[j]` by the model being evaluated.

        :param row: The row of this ConfusionMatrix.
        :type row: List[ClassificationEvaluationMetricsConfusionMatrixRow]
        """

        self._row = row
