# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.batch_predict_input_config import BatchPredictInputConfig
from openapi_server.models.batch_predict_output_config import BatchPredictOutputConfig
from openapi_server import util


class BatchPredictRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, input_config: BatchPredictInputConfig=None, output_config: BatchPredictOutputConfig=None, params: Dict[str, str]=None):
        """BatchPredictRequest - a model defined in OpenAPI

        :param input_config: The input_config of this BatchPredictRequest.
        :param output_config: The output_config of this BatchPredictRequest.
        :param params: The params of this BatchPredictRequest.
        """
        self.openapi_types = {
            'input_config': BatchPredictInputConfig,
            'output_config': BatchPredictOutputConfig,
            'params': Dict[str, str]
        }

        self.attribute_map = {
            'input_config': 'inputConfig',
            'output_config': 'outputConfig',
            'params': 'params'
        }

        self._input_config = input_config
        self._output_config = output_config
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchPredictRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchPredictRequest of this BatchPredictRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def input_config(self):
        """Gets the input_config of this BatchPredictRequest.


        :return: The input_config of this BatchPredictRequest.
        :rtype: BatchPredictInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this BatchPredictRequest.


        :param input_config: The input_config of this BatchPredictRequest.
        :type input_config: BatchPredictInputConfig
        """

        self._input_config = input_config

    @property
    def output_config(self):
        """Gets the output_config of this BatchPredictRequest.


        :return: The output_config of this BatchPredictRequest.
        :rtype: BatchPredictOutputConfig
        """
        return self._output_config

    @output_config.setter
    def output_config(self, output_config):
        """Sets the output_config of this BatchPredictRequest.


        :param output_config: The output_config of this BatchPredictRequest.
        :type output_config: BatchPredictOutputConfig
        """

        self._output_config = output_config

    @property
    def params(self):
        """Gets the params of this BatchPredictRequest.

        Required. Additional domain-specific parameters for the predictions, any string must be up to 25000 characters long. * For Text Classification: `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for a text snippet, it will only produce results that have at least this confidence score. The default is 0.5. * For Image Classification: `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for an image, it will only produce results that have at least this confidence score. The default is 0.5. * For Image Object Detection: `score_threshold` - (float) When Model detects objects on the image, it will only produce bounding boxes which have at least this confidence score. Value in 0 to 1 range, default is 0.5. `max_bounding_box_count` - (int64) No more than this number of bounding boxes will be produced per image. Default is 100, the requested value may be limited by server. * For Video Classification : `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for a video, it will only produce results that have at least this confidence score. The default is 0.5. `segment_classification` - (boolean) Set to true to request segment-level classification. AutoML Video Intelligence returns labels and their confidence scores for the entire segment of the video that user specified in the request configuration. The default is \"true\". `shot_classification` - (boolean) Set to true to request shot-level classification. AutoML Video Intelligence determines the boundaries for each camera shot in the entire segment of the video that user specified in the request configuration. AutoML Video Intelligence then returns labels and their confidence scores for each detected shot, along with the start and end time of the shot. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. The default is \"false\". `1s_interval_classification` - (boolean) Set to true to request classification for a video at one-second intervals. AutoML Video Intelligence returns labels and their confidence scores for each second of the entire segment of the video that user specified in the request configuration. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. The default is \"false\". * For Tables: feature_importance - (boolean) Whether feature importance should be populated in the returned TablesAnnotations. The default is false. * For Video Object Tracking: `score_threshold` - (float) When Model detects objects on video frames, it will only produce bounding boxes which have at least this confidence score. Value in 0 to 1 range, default is 0.5. `max_bounding_box_count` - (int64) No more than this number of bounding boxes will be returned per frame. Default is 100, the requested value may be limited by server. `min_bounding_box_size` - (float) Only bounding boxes with shortest edge at least that long as a relative value of video frame size will be returned. Value in 0 to 1 range. Default is 0.

        :return: The params of this BatchPredictRequest.
        :rtype: Dict[str, str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this BatchPredictRequest.

        Required. Additional domain-specific parameters for the predictions, any string must be up to 25000 characters long. * For Text Classification: `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for a text snippet, it will only produce results that have at least this confidence score. The default is 0.5. * For Image Classification: `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for an image, it will only produce results that have at least this confidence score. The default is 0.5. * For Image Object Detection: `score_threshold` - (float) When Model detects objects on the image, it will only produce bounding boxes which have at least this confidence score. Value in 0 to 1 range, default is 0.5. `max_bounding_box_count` - (int64) No more than this number of bounding boxes will be produced per image. Default is 100, the requested value may be limited by server. * For Video Classification : `score_threshold` - (float) A value from 0.0 to 1.0. When the model makes predictions for a video, it will only produce results that have at least this confidence score. The default is 0.5. `segment_classification` - (boolean) Set to true to request segment-level classification. AutoML Video Intelligence returns labels and their confidence scores for the entire segment of the video that user specified in the request configuration. The default is \"true\". `shot_classification` - (boolean) Set to true to request shot-level classification. AutoML Video Intelligence determines the boundaries for each camera shot in the entire segment of the video that user specified in the request configuration. AutoML Video Intelligence then returns labels and their confidence scores for each detected shot, along with the start and end time of the shot. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. The default is \"false\". `1s_interval_classification` - (boolean) Set to true to request classification for a video at one-second intervals. AutoML Video Intelligence returns labels and their confidence scores for each second of the entire segment of the video that user specified in the request configuration. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. The default is \"false\". * For Tables: feature_importance - (boolean) Whether feature importance should be populated in the returned TablesAnnotations. The default is false. * For Video Object Tracking: `score_threshold` - (float) When Model detects objects on video frames, it will only produce bounding boxes which have at least this confidence score. Value in 0 to 1 range, default is 0.5. `max_bounding_box_count` - (int64) No more than this number of bounding boxes will be returned per frame. Default is 100, the requested value may be limited by server. `min_bounding_box_size` - (float) Only bounding boxes with shortest edge at least that long as a relative value of video frame size will be returned. Value in 0 to 1 range. Default is 0.

        :param params: The params of this BatchPredictRequest.
        :type params: Dict[str, str]
        """

        self._params = params
