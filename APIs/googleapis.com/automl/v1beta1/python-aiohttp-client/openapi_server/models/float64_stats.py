# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.histogram_bucket import HistogramBucket
from openapi_server import util


class Float64Stats(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, histogram_buckets: List[HistogramBucket]=None, mean: float=None, quantiles: List[float]=None, standard_deviation: float=None):
        """Float64Stats - a model defined in OpenAPI

        :param histogram_buckets: The histogram_buckets of this Float64Stats.
        :param mean: The mean of this Float64Stats.
        :param quantiles: The quantiles of this Float64Stats.
        :param standard_deviation: The standard_deviation of this Float64Stats.
        """
        self.openapi_types = {
            'histogram_buckets': List[HistogramBucket],
            'mean': float,
            'quantiles': List[float],
            'standard_deviation': float
        }

        self.attribute_map = {
            'histogram_buckets': 'histogramBuckets',
            'mean': 'mean',
            'quantiles': 'quantiles',
            'standard_deviation': 'standardDeviation'
        }

        self._histogram_buckets = histogram_buckets
        self._mean = mean
        self._quantiles = quantiles
        self._standard_deviation = standard_deviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Float64Stats':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Float64Stats of this Float64Stats.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def histogram_buckets(self):
        """Gets the histogram_buckets of this Float64Stats.

        Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `\"-Infinity\"`, and max of the last one being `\"Infinity\"`.

        :return: The histogram_buckets of this Float64Stats.
        :rtype: List[HistogramBucket]
        """
        return self._histogram_buckets

    @histogram_buckets.setter
    def histogram_buckets(self, histogram_buckets):
        """Sets the histogram_buckets of this Float64Stats.

        Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being `\"-Infinity\"`, and max of the last one being `\"Infinity\"`.

        :param histogram_buckets: The histogram_buckets of this Float64Stats.
        :type histogram_buckets: List[HistogramBucket]
        """

        self._histogram_buckets = histogram_buckets

    @property
    def mean(self):
        """Gets the mean of this Float64Stats.

        The mean of the series.

        :return: The mean of this Float64Stats.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this Float64Stats.

        The mean of the series.

        :param mean: The mean of this Float64Stats.
        :type mean: float
        """

        self._mean = mean

    @property
    def quantiles(self):
        """Gets the quantiles of this Float64Stats.

        Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values.

        :return: The quantiles of this Float64Stats.
        :rtype: List[float]
        """
        return self._quantiles

    @quantiles.setter
    def quantiles(self, quantiles):
        """Sets the quantiles of this Float64Stats.

        Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i = 0 and i = k these are, respectively, the min and max values.

        :param quantiles: The quantiles of this Float64Stats.
        :type quantiles: List[float]
        """

        self._quantiles = quantiles

    @property
    def standard_deviation(self):
        """Gets the standard_deviation of this Float64Stats.

        The standard deviation of the series.

        :return: The standard_deviation of this Float64Stats.
        :rtype: float
        """
        return self._standard_deviation

    @standard_deviation.setter
    def standard_deviation(self, standard_deviation):
        """Sets the standard_deviation of this Float64Stats.

        The standard deviation of the series.

        :param standard_deviation: The standard_deviation of this Float64Stats.
        :type standard_deviation: float
        """

        self._standard_deviation = standard_deviation
