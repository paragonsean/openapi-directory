# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentDimensions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, height: float=None, unit: str=None, width: float=None):
        """DocumentDimensions - a model defined in OpenAPI

        :param height: The height of this DocumentDimensions.
        :param unit: The unit of this DocumentDimensions.
        :param width: The width of this DocumentDimensions.
        """
        self.openapi_types = {
            'height': float,
            'unit': str,
            'width': float
        }

        self.attribute_map = {
            'height': 'height',
            'unit': 'unit',
            'width': 'width'
        }

        self._height = height
        self._unit = unit
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentDimensions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentDimensions of this DocumentDimensions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def height(self):
        """Gets the height of this DocumentDimensions.

        Height value of the document, works together with the unit.

        :return: The height of this DocumentDimensions.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DocumentDimensions.

        Height value of the document, works together with the unit.

        :param height: The height of this DocumentDimensions.
        :type height: float
        """

        self._height = height

    @property
    def unit(self):
        """Gets the unit of this DocumentDimensions.

        Unit of the dimension.

        :return: The unit of this DocumentDimensions.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this DocumentDimensions.

        Unit of the dimension.

        :param unit: The unit of this DocumentDimensions.
        :type unit: str
        """
        allowed_values = ["DOCUMENT_DIMENSION_UNIT_UNSPECIFIED", "INCH", "CENTIMETER", "POINT"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def width(self):
        """Gets the width of this DocumentDimensions.

        Width value of the document, works together with the unit.

        :return: The width of this DocumentDimensions.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DocumentDimensions.

        Width value of the document, works together with the unit.

        :param width: The width of this DocumentDimensions.
        :type width: float
        """

        self._width = width
