# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_evaluation_metrics_confidence_metrics_entry import ClassificationEvaluationMetricsConfidenceMetricsEntry
from openapi_server.models.confusion_matrix import ConfusionMatrix
from openapi_server import util


class ClassificationEvaluationMetrics(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotation_spec_id: List[str]=None, au_prc: float=None, au_roc: float=None, base_au_prc: float=None, confidence_metrics_entry: List[ClassificationEvaluationMetricsConfidenceMetricsEntry]=None, confusion_matrix: ConfusionMatrix=None, log_loss: float=None):
        """ClassificationEvaluationMetrics - a model defined in OpenAPI

        :param annotation_spec_id: The annotation_spec_id of this ClassificationEvaluationMetrics.
        :param au_prc: The au_prc of this ClassificationEvaluationMetrics.
        :param au_roc: The au_roc of this ClassificationEvaluationMetrics.
        :param base_au_prc: The base_au_prc of this ClassificationEvaluationMetrics.
        :param confidence_metrics_entry: The confidence_metrics_entry of this ClassificationEvaluationMetrics.
        :param confusion_matrix: The confusion_matrix of this ClassificationEvaluationMetrics.
        :param log_loss: The log_loss of this ClassificationEvaluationMetrics.
        """
        self.openapi_types = {
            'annotation_spec_id': List[str],
            'au_prc': float,
            'au_roc': float,
            'base_au_prc': float,
            'confidence_metrics_entry': List[ClassificationEvaluationMetricsConfidenceMetricsEntry],
            'confusion_matrix': ConfusionMatrix,
            'log_loss': float
        }

        self.attribute_map = {
            'annotation_spec_id': 'annotationSpecId',
            'au_prc': 'auPrc',
            'au_roc': 'auRoc',
            'base_au_prc': 'baseAuPrc',
            'confidence_metrics_entry': 'confidenceMetricsEntry',
            'confusion_matrix': 'confusionMatrix',
            'log_loss': 'logLoss'
        }

        self._annotation_spec_id = annotation_spec_id
        self._au_prc = au_prc
        self._au_roc = au_roc
        self._base_au_prc = base_au_prc
        self._confidence_metrics_entry = confidence_metrics_entry
        self._confusion_matrix = confusion_matrix
        self._log_loss = log_loss

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClassificationEvaluationMetrics':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClassificationEvaluationMetrics of this ClassificationEvaluationMetrics.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotation_spec_id(self):
        """Gets the annotation_spec_id of this ClassificationEvaluationMetrics.

        Output only. The annotation spec ids used for this evaluation.

        :return: The annotation_spec_id of this ClassificationEvaluationMetrics.
        :rtype: List[str]
        """
        return self._annotation_spec_id

    @annotation_spec_id.setter
    def annotation_spec_id(self, annotation_spec_id):
        """Sets the annotation_spec_id of this ClassificationEvaluationMetrics.

        Output only. The annotation spec ids used for this evaluation.

        :param annotation_spec_id: The annotation_spec_id of this ClassificationEvaluationMetrics.
        :type annotation_spec_id: List[str]
        """

        self._annotation_spec_id = annotation_spec_id

    @property
    def au_prc(self):
        """Gets the au_prc of this ClassificationEvaluationMetrics.

        Output only. The Area Under Precision-Recall Curve metric. Micro-averaged for the overall evaluation.

        :return: The au_prc of this ClassificationEvaluationMetrics.
        :rtype: float
        """
        return self._au_prc

    @au_prc.setter
    def au_prc(self, au_prc):
        """Sets the au_prc of this ClassificationEvaluationMetrics.

        Output only. The Area Under Precision-Recall Curve metric. Micro-averaged for the overall evaluation.

        :param au_prc: The au_prc of this ClassificationEvaluationMetrics.
        :type au_prc: float
        """

        self._au_prc = au_prc

    @property
    def au_roc(self):
        """Gets the au_roc of this ClassificationEvaluationMetrics.

        Output only. The Area Under Receiver Operating Characteristic curve metric. Micro-averaged for the overall evaluation.

        :return: The au_roc of this ClassificationEvaluationMetrics.
        :rtype: float
        """
        return self._au_roc

    @au_roc.setter
    def au_roc(self, au_roc):
        """Sets the au_roc of this ClassificationEvaluationMetrics.

        Output only. The Area Under Receiver Operating Characteristic curve metric. Micro-averaged for the overall evaluation.

        :param au_roc: The au_roc of this ClassificationEvaluationMetrics.
        :type au_roc: float
        """

        self._au_roc = au_roc

    @property
    def base_au_prc(self):
        """Gets the base_au_prc of this ClassificationEvaluationMetrics.

        Output only. The Area Under Precision-Recall Curve metric based on priors. Micro-averaged for the overall evaluation. Deprecated.

        :return: The base_au_prc of this ClassificationEvaluationMetrics.
        :rtype: float
        """
        return self._base_au_prc

    @base_au_prc.setter
    def base_au_prc(self, base_au_prc):
        """Sets the base_au_prc of this ClassificationEvaluationMetrics.

        Output only. The Area Under Precision-Recall Curve metric based on priors. Micro-averaged for the overall evaluation. Deprecated.

        :param base_au_prc: The base_au_prc of this ClassificationEvaluationMetrics.
        :type base_au_prc: float
        """

        self._base_au_prc = base_au_prc

    @property
    def confidence_metrics_entry(self):
        """Gets the confidence_metrics_entry of this ClassificationEvaluationMetrics.

        Output only. Metrics for each confidence_threshold in 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and position_threshold = INT32_MAX_VALUE. ROC and precision-recall curves, and other aggregated metrics are derived from them. The confidence metrics entries may also be supplied for additional values of position_threshold, but from these no aggregated metrics are computed.

        :return: The confidence_metrics_entry of this ClassificationEvaluationMetrics.
        :rtype: List[ClassificationEvaluationMetricsConfidenceMetricsEntry]
        """
        return self._confidence_metrics_entry

    @confidence_metrics_entry.setter
    def confidence_metrics_entry(self, confidence_metrics_entry):
        """Sets the confidence_metrics_entry of this ClassificationEvaluationMetrics.

        Output only. Metrics for each confidence_threshold in 0.00,0.05,0.10,...,0.95,0.96,0.97,0.98,0.99 and position_threshold = INT32_MAX_VALUE. ROC and precision-recall curves, and other aggregated metrics are derived from them. The confidence metrics entries may also be supplied for additional values of position_threshold, but from these no aggregated metrics are computed.

        :param confidence_metrics_entry: The confidence_metrics_entry of this ClassificationEvaluationMetrics.
        :type confidence_metrics_entry: List[ClassificationEvaluationMetricsConfidenceMetricsEntry]
        """

        self._confidence_metrics_entry = confidence_metrics_entry

    @property
    def confusion_matrix(self):
        """Gets the confusion_matrix of this ClassificationEvaluationMetrics.


        :return: The confusion_matrix of this ClassificationEvaluationMetrics.
        :rtype: ConfusionMatrix
        """
        return self._confusion_matrix

    @confusion_matrix.setter
    def confusion_matrix(self, confusion_matrix):
        """Sets the confusion_matrix of this ClassificationEvaluationMetrics.


        :param confusion_matrix: The confusion_matrix of this ClassificationEvaluationMetrics.
        :type confusion_matrix: ConfusionMatrix
        """

        self._confusion_matrix = confusion_matrix

    @property
    def log_loss(self):
        """Gets the log_loss of this ClassificationEvaluationMetrics.

        Output only. The Log Loss metric.

        :return: The log_loss of this ClassificationEvaluationMetrics.
        :rtype: float
        """
        return self._log_loss

    @log_loss.setter
    def log_loss(self, log_loss):
        """Sets the log_loss of this ClassificationEvaluationMetrics.

        Output only. The Log Loss metric.

        :param log_loss: The log_loss of this ClassificationEvaluationMetrics.
        :type log_loss: float
        """

        self._log_loss = log_loss
