# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.document_dimensions import DocumentDimensions
from openapi_server.models.document_input_config import DocumentInputConfig
from openapi_server.models.layout import Layout
from openapi_server.models.text_snippet import TextSnippet
from openapi_server import util


class Document(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, document_dimensions: DocumentDimensions=None, document_text: TextSnippet=None, input_config: DocumentInputConfig=None, layout: List[Layout]=None, page_count: int=None):
        """Document - a model defined in OpenAPI

        :param document_dimensions: The document_dimensions of this Document.
        :param document_text: The document_text of this Document.
        :param input_config: The input_config of this Document.
        :param layout: The layout of this Document.
        :param page_count: The page_count of this Document.
        """
        self.openapi_types = {
            'document_dimensions': DocumentDimensions,
            'document_text': TextSnippet,
            'input_config': DocumentInputConfig,
            'layout': List[Layout],
            'page_count': int
        }

        self.attribute_map = {
            'document_dimensions': 'documentDimensions',
            'document_text': 'documentText',
            'input_config': 'inputConfig',
            'layout': 'layout',
            'page_count': 'pageCount'
        }

        self._document_dimensions = document_dimensions
        self._document_text = document_text
        self._input_config = input_config
        self._layout = layout
        self._page_count = page_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Document':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Document of this Document.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def document_dimensions(self):
        """Gets the document_dimensions of this Document.


        :return: The document_dimensions of this Document.
        :rtype: DocumentDimensions
        """
        return self._document_dimensions

    @document_dimensions.setter
    def document_dimensions(self, document_dimensions):
        """Sets the document_dimensions of this Document.


        :param document_dimensions: The document_dimensions of this Document.
        :type document_dimensions: DocumentDimensions
        """

        self._document_dimensions = document_dimensions

    @property
    def document_text(self):
        """Gets the document_text of this Document.


        :return: The document_text of this Document.
        :rtype: TextSnippet
        """
        return self._document_text

    @document_text.setter
    def document_text(self, document_text):
        """Sets the document_text of this Document.


        :param document_text: The document_text of this Document.
        :type document_text: TextSnippet
        """

        self._document_text = document_text

    @property
    def input_config(self):
        """Gets the input_config of this Document.


        :return: The input_config of this Document.
        :rtype: DocumentInputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this Document.


        :param input_config: The input_config of this Document.
        :type input_config: DocumentInputConfig
        """

        self._input_config = input_config

    @property
    def layout(self):
        """Gets the layout of this Document.

        Describes the layout of the document. Sorted by page_number.

        :return: The layout of this Document.
        :rtype: List[Layout]
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this Document.

        Describes the layout of the document. Sorted by page_number.

        :param layout: The layout of this Document.
        :type layout: List[Layout]
        """

        self._layout = layout

    @property
    def page_count(self):
        """Gets the page_count of this Document.

        Number of pages in the document.

        :return: The page_count of this Document.
        :rtype: int
        """
        return self._page_count

    @page_count.setter
    def page_count(self, page_count):
        """Sets the page_count of this Document.

        Number of pages in the document.

        :param page_count: The page_count of this Document.
        :type page_count: int
        """

        self._page_count = page_count
