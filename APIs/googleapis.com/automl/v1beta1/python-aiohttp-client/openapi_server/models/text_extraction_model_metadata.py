# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextExtractionModelMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, model_hint: str=None):
        """TextExtractionModelMetadata - a model defined in OpenAPI

        :param model_hint: The model_hint of this TextExtractionModelMetadata.
        """
        self.openapi_types = {
            'model_hint': str
        }

        self.attribute_map = {
            'model_hint': 'modelHint'
        }

        self._model_hint = model_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextExtractionModelMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextExtractionModelMetadata of this TextExtractionModelMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_hint(self):
        """Gets the model_hint of this TextExtractionModelMetadata.

        Indicates the scope of model use case. * `default`: Use to train a general text extraction model. Default value. * `health_care`: Use to train a text extraction model that is tuned for healthcare applications.

        :return: The model_hint of this TextExtractionModelMetadata.
        :rtype: str
        """
        return self._model_hint

    @model_hint.setter
    def model_hint(self, model_hint):
        """Sets the model_hint of this TextExtractionModelMetadata.

        Indicates the scope of model use case. * `default`: Use to train a general text extraction model. Default value. * `health_care`: Use to train a text extraction model that is tuned for healthcare applications.

        :param model_hint: The model_hint of this TextExtractionModelMetadata.
        :type model_hint: str
        """

        self._model_hint = model_hint
