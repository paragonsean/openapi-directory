# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextSnippet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_uri: str=None, mime_type: str=None):
        """TextSnippet - a model defined in OpenAPI

        :param content: The content of this TextSnippet.
        :param content_uri: The content_uri of this TextSnippet.
        :param mime_type: The mime_type of this TextSnippet.
        """
        self.openapi_types = {
            'content': str,
            'content_uri': str,
            'mime_type': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_uri': 'contentUri',
            'mime_type': 'mimeType'
        }

        self._content = content
        self._content_uri = content_uri
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextSnippet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextSnippet of this TextSnippet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this TextSnippet.

        Required. The content of the text snippet as a string. Up to 250000 characters long.

        :return: The content of this TextSnippet.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this TextSnippet.

        Required. The content of the text snippet as a string. Up to 250000 characters long.

        :param content: The content of this TextSnippet.
        :type content: str
        """

        self._content = content

    @property
    def content_uri(self):
        """Gets the content_uri of this TextSnippet.

        Output only. HTTP URI where you can download the content.

        :return: The content_uri of this TextSnippet.
        :rtype: str
        """
        return self._content_uri

    @content_uri.setter
    def content_uri(self, content_uri):
        """Sets the content_uri of this TextSnippet.

        Output only. HTTP URI where you can download the content.

        :param content_uri: The content_uri of this TextSnippet.
        :type content_uri: str
        """

        self._content_uri = content_uri

    @property
    def mime_type(self):
        """Gets the mime_type of this TextSnippet.

        Optional. The format of content. Currently the only two allowed values are \"text/html\" and \"text/plain\". If left blank, the format is automatically determined from the type of the uploaded content.

        :return: The mime_type of this TextSnippet.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this TextSnippet.

        Optional. The format of content. Currently the only two allowed values are \"text/html\" and \"text/plain\". If left blank, the format is automatically determined from the type of the uploaded content.

        :param mime_type: The mime_type of this TextSnippet.
        :type mime_type: str
        """

        self._mime_type = mime_type
