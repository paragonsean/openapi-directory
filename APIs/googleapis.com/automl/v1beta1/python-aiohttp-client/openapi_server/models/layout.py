# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server.models.text_segment import TextSegment
from openapi_server import util


class Layout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_poly: BoundingPoly=None, page_number: int=None, text_segment: TextSegment=None, text_segment_type: str=None):
        """Layout - a model defined in OpenAPI

        :param bounding_poly: The bounding_poly of this Layout.
        :param page_number: The page_number of this Layout.
        :param text_segment: The text_segment of this Layout.
        :param text_segment_type: The text_segment_type of this Layout.
        """
        self.openapi_types = {
            'bounding_poly': BoundingPoly,
            'page_number': int,
            'text_segment': TextSegment,
            'text_segment_type': str
        }

        self.attribute_map = {
            'bounding_poly': 'boundingPoly',
            'page_number': 'pageNumber',
            'text_segment': 'textSegment',
            'text_segment_type': 'textSegmentType'
        }

        self._bounding_poly = bounding_poly
        self._page_number = page_number
        self._text_segment = text_segment
        self._text_segment_type = text_segment_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Layout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Layout of this Layout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_poly(self):
        """Gets the bounding_poly of this Layout.


        :return: The bounding_poly of this Layout.
        :rtype: BoundingPoly
        """
        return self._bounding_poly

    @bounding_poly.setter
    def bounding_poly(self, bounding_poly):
        """Sets the bounding_poly of this Layout.


        :param bounding_poly: The bounding_poly of this Layout.
        :type bounding_poly: BoundingPoly
        """

        self._bounding_poly = bounding_poly

    @property
    def page_number(self):
        """Gets the page_number of this Layout.

        Page number of the text_segment in the original document, starts from 1.

        :return: The page_number of this Layout.
        :rtype: int
        """
        return self._page_number

    @page_number.setter
    def page_number(self, page_number):
        """Sets the page_number of this Layout.

        Page number of the text_segment in the original document, starts from 1.

        :param page_number: The page_number of this Layout.
        :type page_number: int
        """

        self._page_number = page_number

    @property
    def text_segment(self):
        """Gets the text_segment of this Layout.


        :return: The text_segment of this Layout.
        :rtype: TextSegment
        """
        return self._text_segment

    @text_segment.setter
    def text_segment(self, text_segment):
        """Sets the text_segment of this Layout.


        :param text_segment: The text_segment of this Layout.
        :type text_segment: TextSegment
        """

        self._text_segment = text_segment

    @property
    def text_segment_type(self):
        """Gets the text_segment_type of this Layout.

        The type of the text_segment in document.

        :return: The text_segment_type of this Layout.
        :rtype: str
        """
        return self._text_segment_type

    @text_segment_type.setter
    def text_segment_type(self, text_segment_type):
        """Sets the text_segment_type of this Layout.

        The type of the text_segment in document.

        :param text_segment_type: The text_segment_type of this Layout.
        :type text_segment_type: str
        """
        allowed_values = ["TEXT_SEGMENT_TYPE_UNSPECIFIED", "TOKEN", "PARAGRAPH", "FORM_FIELD", "FORM_FIELD_NAME", "FORM_FIELD_CONTENTS", "TABLE", "TABLE_HEADER", "TABLE_ROW", "TABLE_CELL"]  # noqa: E501
        if text_segment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `text_segment_type` ({0}), must be one of {1}"
                .format(text_segment_type, allowed_values)
            )

        self._text_segment_type = text_segment_type
