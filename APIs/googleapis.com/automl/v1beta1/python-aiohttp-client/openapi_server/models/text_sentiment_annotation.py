# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TextSentimentAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sentiment: int=None):
        """TextSentimentAnnotation - a model defined in OpenAPI

        :param sentiment: The sentiment of this TextSentimentAnnotation.
        """
        self.openapi_types = {
            'sentiment': int
        }

        self.attribute_map = {
            'sentiment': 'sentiment'
        }

        self._sentiment = sentiment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TextSentimentAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TextSentimentAnnotation of this TextSentimentAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sentiment(self):
        """Gets the sentiment of this TextSentimentAnnotation.

        Output only. The sentiment with the semantic, as given to the AutoMl.ImportData when populating the dataset from which the model used for the prediction had been trained. The sentiment values are between 0 and Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive), with higher value meaning more positive sentiment. They are completely relative, i.e. 0 means least positive sentiment and sentiment_max means the most positive from the sentiments present in the train data. Therefore e.g. if train data had only negative sentiment, then sentiment_max, would be still negative (although least negative). The sentiment shouldn't be confused with \"score\" or \"magnitude\" from the previous Natural Language Sentiment Analysis API.

        :return: The sentiment of this TextSentimentAnnotation.
        :rtype: int
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this TextSentimentAnnotation.

        Output only. The sentiment with the semantic, as given to the AutoMl.ImportData when populating the dataset from which the model used for the prediction had been trained. The sentiment values are between 0 and Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive), with higher value meaning more positive sentiment. They are completely relative, i.e. 0 means least positive sentiment and sentiment_max means the most positive from the sentiments present in the train data. Therefore e.g. if train data had only negative sentiment, then sentiment_max, would be still negative (although least negative). The sentiment shouldn't be confused with \"score\" or \"magnitude\" from the previous Natural Language Sentiment Analysis API.

        :param sentiment: The sentiment of this TextSentimentAnnotation.
        :type sentiment: int
        """

        self._sentiment = sentiment
