# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnotationSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, example_count: int=None, name: str=None):
        """AnnotationSpec - a model defined in OpenAPI

        :param display_name: The display_name of this AnnotationSpec.
        :param example_count: The example_count of this AnnotationSpec.
        :param name: The name of this AnnotationSpec.
        """
        self.openapi_types = {
            'display_name': str,
            'example_count': int,
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'example_count': 'exampleCount',
            'name': 'name'
        }

        self._display_name = display_name
        self._example_count = example_count
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnnotationSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AnnotationSpec of this AnnotationSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this AnnotationSpec.

        Required. The name of the annotation spec to show in the interface. The name can be up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.

        :return: The display_name of this AnnotationSpec.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AnnotationSpec.

        Required. The name of the annotation spec to show in the interface. The name can be up to 32 characters long and must match the regexp `[a-zA-Z0-9_]+`.

        :param display_name: The display_name of this AnnotationSpec.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def example_count(self):
        """Gets the example_count of this AnnotationSpec.

        Output only. The number of examples in the parent dataset labeled by the annotation spec.

        :return: The example_count of this AnnotationSpec.
        :rtype: int
        """
        return self._example_count

    @example_count.setter
    def example_count(self, example_count):
        """Sets the example_count of this AnnotationSpec.

        Output only. The number of examples in the parent dataset labeled by the annotation spec.

        :param example_count: The example_count of this AnnotationSpec.
        :type example_count: int
        """

        self._example_count = example_count

    @property
    def name(self):
        """Gets the name of this AnnotationSpec.

        Output only. Resource name of the annotation spec. Form: 'projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationSpecs/{annotation_spec_id}'

        :return: The name of this AnnotationSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnnotationSpec.

        Output only. Resource name of the annotation spec. Form: 'projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationSpecs/{annotation_spec_id}'

        :param name: The name of this AnnotationSpec.
        :type name: str
        """

        self._name = name
