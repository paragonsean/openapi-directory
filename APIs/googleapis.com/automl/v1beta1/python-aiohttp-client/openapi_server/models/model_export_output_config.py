# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gcr_destination import GcrDestination
from openapi_server.models.gcs_destination import GcsDestination
from openapi_server import util


class ModelExportOutputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcr_destination: GcrDestination=None, gcs_destination: GcsDestination=None, model_format: str=None, params: Dict[str, str]=None):
        """ModelExportOutputConfig - a model defined in OpenAPI

        :param gcr_destination: The gcr_destination of this ModelExportOutputConfig.
        :param gcs_destination: The gcs_destination of this ModelExportOutputConfig.
        :param model_format: The model_format of this ModelExportOutputConfig.
        :param params: The params of this ModelExportOutputConfig.
        """
        self.openapi_types = {
            'gcr_destination': GcrDestination,
            'gcs_destination': GcsDestination,
            'model_format': str,
            'params': Dict[str, str]
        }

        self.attribute_map = {
            'gcr_destination': 'gcrDestination',
            'gcs_destination': 'gcsDestination',
            'model_format': 'modelFormat',
            'params': 'params'
        }

        self._gcr_destination = gcr_destination
        self._gcs_destination = gcs_destination
        self._model_format = model_format
        self._params = params

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ModelExportOutputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ModelExportOutputConfig of this ModelExportOutputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcr_destination(self):
        """Gets the gcr_destination of this ModelExportOutputConfig.


        :return: The gcr_destination of this ModelExportOutputConfig.
        :rtype: GcrDestination
        """
        return self._gcr_destination

    @gcr_destination.setter
    def gcr_destination(self, gcr_destination):
        """Sets the gcr_destination of this ModelExportOutputConfig.


        :param gcr_destination: The gcr_destination of this ModelExportOutputConfig.
        :type gcr_destination: GcrDestination
        """

        self._gcr_destination = gcr_destination

    @property
    def gcs_destination(self):
        """Gets the gcs_destination of this ModelExportOutputConfig.


        :return: The gcs_destination of this ModelExportOutputConfig.
        :rtype: GcsDestination
        """
        return self._gcs_destination

    @gcs_destination.setter
    def gcs_destination(self, gcs_destination):
        """Sets the gcs_destination of this ModelExportOutputConfig.


        :param gcs_destination: The gcs_destination of this ModelExportOutputConfig.
        :type gcs_destination: GcsDestination
        """

        self._gcs_destination = gcs_destination

    @property
    def model_format(self):
        """Gets the model_format of this ModelExportOutputConfig.

        The format in which the model must be exported. The available, and default, formats depend on the problem and model type (if given problem and type combination doesn't have a format listed, it means its models are not exportable): * For Image Classification mobile-low-latency-1, mobile-versatile-1, mobile-high-accuracy-1: \"tflite\" (default), \"edgetpu_tflite\", \"tf_saved_model\", \"tf_js\", \"docker\". * For Image Classification mobile-core-ml-low-latency-1, mobile-core-ml-versatile-1, mobile-core-ml-high-accuracy-1: \"core_ml\" (default). * For Image Object Detection mobile-low-latency-1, mobile-versatile-1, mobile-high-accuracy-1: \"tflite\", \"tf_saved_model\", \"tf_js\". * For Video Classification cloud, \"tf_saved_model\". * For Video Object Tracking cloud, \"tf_saved_model\". * For Video Object Tracking mobile-versatile-1: \"tflite\", \"edgetpu_tflite\", \"tf_saved_model\", \"docker\". * For Video Object Tracking mobile-coral-versatile-1: \"tflite\", \"edgetpu_tflite\", \"docker\". * For Video Object Tracking mobile-coral-low-latency-1: \"tflite\", \"edgetpu_tflite\", \"docker\". * For Video Object Tracking mobile-jetson-versatile-1: \"tf_saved_model\", \"docker\". * For Tables: \"docker\". Formats description: * tflite - Used for Android mobile devices. * edgetpu_tflite - Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices. * tf_saved_model - A tensorflow model in SavedModel format. * tf_js - A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript. * docker - Used for Docker containers. Use the params field to customize the container. The container is verified to work correctly on ubuntu 16.04 operating system. See more at [containers quickstart](https: //cloud.google.com/vision/automl/docs/containers-gcs-quickstart) * core_ml - Used for iOS mobile devices.

        :return: The model_format of this ModelExportOutputConfig.
        :rtype: str
        """
        return self._model_format

    @model_format.setter
    def model_format(self, model_format):
        """Sets the model_format of this ModelExportOutputConfig.

        The format in which the model must be exported. The available, and default, formats depend on the problem and model type (if given problem and type combination doesn't have a format listed, it means its models are not exportable): * For Image Classification mobile-low-latency-1, mobile-versatile-1, mobile-high-accuracy-1: \"tflite\" (default), \"edgetpu_tflite\", \"tf_saved_model\", \"tf_js\", \"docker\". * For Image Classification mobile-core-ml-low-latency-1, mobile-core-ml-versatile-1, mobile-core-ml-high-accuracy-1: \"core_ml\" (default). * For Image Object Detection mobile-low-latency-1, mobile-versatile-1, mobile-high-accuracy-1: \"tflite\", \"tf_saved_model\", \"tf_js\". * For Video Classification cloud, \"tf_saved_model\". * For Video Object Tracking cloud, \"tf_saved_model\". * For Video Object Tracking mobile-versatile-1: \"tflite\", \"edgetpu_tflite\", \"tf_saved_model\", \"docker\". * For Video Object Tracking mobile-coral-versatile-1: \"tflite\", \"edgetpu_tflite\", \"docker\". * For Video Object Tracking mobile-coral-low-latency-1: \"tflite\", \"edgetpu_tflite\", \"docker\". * For Video Object Tracking mobile-jetson-versatile-1: \"tf_saved_model\", \"docker\". * For Tables: \"docker\". Formats description: * tflite - Used for Android mobile devices. * edgetpu_tflite - Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices. * tf_saved_model - A tensorflow model in SavedModel format. * tf_js - A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript. * docker - Used for Docker containers. Use the params field to customize the container. The container is verified to work correctly on ubuntu 16.04 operating system. See more at [containers quickstart](https: //cloud.google.com/vision/automl/docs/containers-gcs-quickstart) * core_ml - Used for iOS mobile devices.

        :param model_format: The model_format of this ModelExportOutputConfig.
        :type model_format: str
        """

        self._model_format = model_format

    @property
    def params(self):
        """Gets the params of this ModelExportOutputConfig.

        Additional model-type and format specific parameters describing the requirements for the to be exported model files, any string must be up to 25000 characters long. * For `docker` format: `cpu_architecture` - (string) \"x86_64\" (default). `gpu_architecture` - (string) \"none\" (default), \"nvidia\".

        :return: The params of this ModelExportOutputConfig.
        :rtype: Dict[str, str]
        """
        return self._params

    @params.setter
    def params(self, params):
        """Sets the params of this ModelExportOutputConfig.

        Additional model-type and format specific parameters describing the requirements for the to be exported model files, any string must be up to 25000 characters long. * For `docker` format: `cpu_architecture` - (string) \"x86_64\" (default). `gpu_architecture` - (string) \"none\" (default), \"nvidia\".

        :param params: The params of this ModelExportOutputConfig.
        :type params: Dict[str, str]
        """

        self._params = params
