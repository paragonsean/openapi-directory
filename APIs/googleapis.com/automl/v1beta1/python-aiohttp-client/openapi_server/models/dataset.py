# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_classification_dataset_metadata import ImageClassificationDatasetMetadata
from openapi_server.models.tables_dataset_metadata import TablesDatasetMetadata
from openapi_server.models.text_classification_dataset_metadata import TextClassificationDatasetMetadata
from openapi_server.models.text_sentiment_dataset_metadata import TextSentimentDatasetMetadata
from openapi_server.models.translation_dataset_metadata import TranslationDatasetMetadata
from openapi_server import util


class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, display_name: str=None, etag: str=None, example_count: int=None, image_classification_dataset_metadata: ImageClassificationDatasetMetadata=None, image_object_detection_dataset_metadata: object=None, name: str=None, tables_dataset_metadata: TablesDatasetMetadata=None, text_classification_dataset_metadata: TextClassificationDatasetMetadata=None, text_extraction_dataset_metadata: object=None, text_sentiment_dataset_metadata: TextSentimentDatasetMetadata=None, translation_dataset_metadata: TranslationDatasetMetadata=None, video_classification_dataset_metadata: object=None, video_object_tracking_dataset_metadata: object=None):
        """Dataset - a model defined in OpenAPI

        :param create_time: The create_time of this Dataset.
        :param description: The description of this Dataset.
        :param display_name: The display_name of this Dataset.
        :param etag: The etag of this Dataset.
        :param example_count: The example_count of this Dataset.
        :param image_classification_dataset_metadata: The image_classification_dataset_metadata of this Dataset.
        :param image_object_detection_dataset_metadata: The image_object_detection_dataset_metadata of this Dataset.
        :param name: The name of this Dataset.
        :param tables_dataset_metadata: The tables_dataset_metadata of this Dataset.
        :param text_classification_dataset_metadata: The text_classification_dataset_metadata of this Dataset.
        :param text_extraction_dataset_metadata: The text_extraction_dataset_metadata of this Dataset.
        :param text_sentiment_dataset_metadata: The text_sentiment_dataset_metadata of this Dataset.
        :param translation_dataset_metadata: The translation_dataset_metadata of this Dataset.
        :param video_classification_dataset_metadata: The video_classification_dataset_metadata of this Dataset.
        :param video_object_tracking_dataset_metadata: The video_object_tracking_dataset_metadata of this Dataset.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'display_name': str,
            'etag': str,
            'example_count': int,
            'image_classification_dataset_metadata': ImageClassificationDatasetMetadata,
            'image_object_detection_dataset_metadata': object,
            'name': str,
            'tables_dataset_metadata': TablesDatasetMetadata,
            'text_classification_dataset_metadata': TextClassificationDatasetMetadata,
            'text_extraction_dataset_metadata': object,
            'text_sentiment_dataset_metadata': TextSentimentDatasetMetadata,
            'translation_dataset_metadata': TranslationDatasetMetadata,
            'video_classification_dataset_metadata': object,
            'video_object_tracking_dataset_metadata': object
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'display_name': 'displayName',
            'etag': 'etag',
            'example_count': 'exampleCount',
            'image_classification_dataset_metadata': 'imageClassificationDatasetMetadata',
            'image_object_detection_dataset_metadata': 'imageObjectDetectionDatasetMetadata',
            'name': 'name',
            'tables_dataset_metadata': 'tablesDatasetMetadata',
            'text_classification_dataset_metadata': 'textClassificationDatasetMetadata',
            'text_extraction_dataset_metadata': 'textExtractionDatasetMetadata',
            'text_sentiment_dataset_metadata': 'textSentimentDatasetMetadata',
            'translation_dataset_metadata': 'translationDatasetMetadata',
            'video_classification_dataset_metadata': 'videoClassificationDatasetMetadata',
            'video_object_tracking_dataset_metadata': 'videoObjectTrackingDatasetMetadata'
        }

        self._create_time = create_time
        self._description = description
        self._display_name = display_name
        self._etag = etag
        self._example_count = example_count
        self._image_classification_dataset_metadata = image_classification_dataset_metadata
        self._image_object_detection_dataset_metadata = image_object_detection_dataset_metadata
        self._name = name
        self._tables_dataset_metadata = tables_dataset_metadata
        self._text_classification_dataset_metadata = text_classification_dataset_metadata
        self._text_extraction_dataset_metadata = text_extraction_dataset_metadata
        self._text_sentiment_dataset_metadata = text_sentiment_dataset_metadata
        self._translation_dataset_metadata = translation_dataset_metadata
        self._video_classification_dataset_metadata = video_classification_dataset_metadata
        self._video_object_tracking_dataset_metadata = video_object_tracking_dataset_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dataset of this Dataset.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Dataset.

        Output only. Timestamp when this dataset was created.

        :return: The create_time of this Dataset.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Dataset.

        Output only. Timestamp when this dataset was created.

        :param create_time: The create_time of this Dataset.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Dataset.

        User-provided description of the dataset. The description can be up to 25000 characters long.

        :return: The description of this Dataset.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Dataset.

        User-provided description of the dataset. The description can be up to 25000 characters long.

        :param description: The description of this Dataset.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Dataset.

        Required. The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.

        :return: The display_name of this Dataset.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Dataset.

        Required. The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.

        :param display_name: The display_name of this Dataset.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Dataset.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :return: The etag of this Dataset.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Dataset.

        Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.

        :param etag: The etag of this Dataset.
        :type etag: str
        """

        self._etag = etag

    @property
    def example_count(self):
        """Gets the example_count of this Dataset.

        Output only. The number of examples in the dataset.

        :return: The example_count of this Dataset.
        :rtype: int
        """
        return self._example_count

    @example_count.setter
    def example_count(self, example_count):
        """Sets the example_count of this Dataset.

        Output only. The number of examples in the dataset.

        :param example_count: The example_count of this Dataset.
        :type example_count: int
        """

        self._example_count = example_count

    @property
    def image_classification_dataset_metadata(self):
        """Gets the image_classification_dataset_metadata of this Dataset.


        :return: The image_classification_dataset_metadata of this Dataset.
        :rtype: ImageClassificationDatasetMetadata
        """
        return self._image_classification_dataset_metadata

    @image_classification_dataset_metadata.setter
    def image_classification_dataset_metadata(self, image_classification_dataset_metadata):
        """Sets the image_classification_dataset_metadata of this Dataset.


        :param image_classification_dataset_metadata: The image_classification_dataset_metadata of this Dataset.
        :type image_classification_dataset_metadata: ImageClassificationDatasetMetadata
        """

        self._image_classification_dataset_metadata = image_classification_dataset_metadata

    @property
    def image_object_detection_dataset_metadata(self):
        """Gets the image_object_detection_dataset_metadata of this Dataset.

        Dataset metadata specific to image object detection.

        :return: The image_object_detection_dataset_metadata of this Dataset.
        :rtype: object
        """
        return self._image_object_detection_dataset_metadata

    @image_object_detection_dataset_metadata.setter
    def image_object_detection_dataset_metadata(self, image_object_detection_dataset_metadata):
        """Sets the image_object_detection_dataset_metadata of this Dataset.

        Dataset metadata specific to image object detection.

        :param image_object_detection_dataset_metadata: The image_object_detection_dataset_metadata of this Dataset.
        :type image_object_detection_dataset_metadata: object
        """

        self._image_object_detection_dataset_metadata = image_object_detection_dataset_metadata

    @property
    def name(self):
        """Gets the name of this Dataset.

        Output only. The resource name of the dataset. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`

        :return: The name of this Dataset.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Dataset.

        Output only. The resource name of the dataset. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`

        :param name: The name of this Dataset.
        :type name: str
        """

        self._name = name

    @property
    def tables_dataset_metadata(self):
        """Gets the tables_dataset_metadata of this Dataset.


        :return: The tables_dataset_metadata of this Dataset.
        :rtype: TablesDatasetMetadata
        """
        return self._tables_dataset_metadata

    @tables_dataset_metadata.setter
    def tables_dataset_metadata(self, tables_dataset_metadata):
        """Sets the tables_dataset_metadata of this Dataset.


        :param tables_dataset_metadata: The tables_dataset_metadata of this Dataset.
        :type tables_dataset_metadata: TablesDatasetMetadata
        """

        self._tables_dataset_metadata = tables_dataset_metadata

    @property
    def text_classification_dataset_metadata(self):
        """Gets the text_classification_dataset_metadata of this Dataset.


        :return: The text_classification_dataset_metadata of this Dataset.
        :rtype: TextClassificationDatasetMetadata
        """
        return self._text_classification_dataset_metadata

    @text_classification_dataset_metadata.setter
    def text_classification_dataset_metadata(self, text_classification_dataset_metadata):
        """Sets the text_classification_dataset_metadata of this Dataset.


        :param text_classification_dataset_metadata: The text_classification_dataset_metadata of this Dataset.
        :type text_classification_dataset_metadata: TextClassificationDatasetMetadata
        """

        self._text_classification_dataset_metadata = text_classification_dataset_metadata

    @property
    def text_extraction_dataset_metadata(self):
        """Gets the text_extraction_dataset_metadata of this Dataset.

        Dataset metadata that is specific to text extraction

        :return: The text_extraction_dataset_metadata of this Dataset.
        :rtype: object
        """
        return self._text_extraction_dataset_metadata

    @text_extraction_dataset_metadata.setter
    def text_extraction_dataset_metadata(self, text_extraction_dataset_metadata):
        """Sets the text_extraction_dataset_metadata of this Dataset.

        Dataset metadata that is specific to text extraction

        :param text_extraction_dataset_metadata: The text_extraction_dataset_metadata of this Dataset.
        :type text_extraction_dataset_metadata: object
        """

        self._text_extraction_dataset_metadata = text_extraction_dataset_metadata

    @property
    def text_sentiment_dataset_metadata(self):
        """Gets the text_sentiment_dataset_metadata of this Dataset.


        :return: The text_sentiment_dataset_metadata of this Dataset.
        :rtype: TextSentimentDatasetMetadata
        """
        return self._text_sentiment_dataset_metadata

    @text_sentiment_dataset_metadata.setter
    def text_sentiment_dataset_metadata(self, text_sentiment_dataset_metadata):
        """Sets the text_sentiment_dataset_metadata of this Dataset.


        :param text_sentiment_dataset_metadata: The text_sentiment_dataset_metadata of this Dataset.
        :type text_sentiment_dataset_metadata: TextSentimentDatasetMetadata
        """

        self._text_sentiment_dataset_metadata = text_sentiment_dataset_metadata

    @property
    def translation_dataset_metadata(self):
        """Gets the translation_dataset_metadata of this Dataset.


        :return: The translation_dataset_metadata of this Dataset.
        :rtype: TranslationDatasetMetadata
        """
        return self._translation_dataset_metadata

    @translation_dataset_metadata.setter
    def translation_dataset_metadata(self, translation_dataset_metadata):
        """Sets the translation_dataset_metadata of this Dataset.


        :param translation_dataset_metadata: The translation_dataset_metadata of this Dataset.
        :type translation_dataset_metadata: TranslationDatasetMetadata
        """

        self._translation_dataset_metadata = translation_dataset_metadata

    @property
    def video_classification_dataset_metadata(self):
        """Gets the video_classification_dataset_metadata of this Dataset.

        Dataset metadata specific to video classification. All Video Classification datasets are treated as multi label.

        :return: The video_classification_dataset_metadata of this Dataset.
        :rtype: object
        """
        return self._video_classification_dataset_metadata

    @video_classification_dataset_metadata.setter
    def video_classification_dataset_metadata(self, video_classification_dataset_metadata):
        """Sets the video_classification_dataset_metadata of this Dataset.

        Dataset metadata specific to video classification. All Video Classification datasets are treated as multi label.

        :param video_classification_dataset_metadata: The video_classification_dataset_metadata of this Dataset.
        :type video_classification_dataset_metadata: object
        """

        self._video_classification_dataset_metadata = video_classification_dataset_metadata

    @property
    def video_object_tracking_dataset_metadata(self):
        """Gets the video_object_tracking_dataset_metadata of this Dataset.

        Dataset metadata specific to video object tracking.

        :return: The video_object_tracking_dataset_metadata of this Dataset.
        :rtype: object
        """
        return self._video_object_tracking_dataset_metadata

    @video_object_tracking_dataset_metadata.setter
    def video_object_tracking_dataset_metadata(self, video_object_tracking_dataset_metadata):
        """Sets the video_object_tracking_dataset_metadata of this Dataset.

        Dataset metadata specific to video object tracking.

        :param video_object_tracking_dataset_metadata: The video_object_tracking_dataset_metadata of this Dataset.
        :type video_object_tracking_dataset_metadata: object
        """

        self._video_object_tracking_dataset_metadata = video_object_tracking_dataset_metadata
