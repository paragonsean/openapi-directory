/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for ClassificationEvaluationMetricsConfidenceMetricsEntry
 */
public class ClassificationEvaluationMetricsConfidenceMetricsEntryTest {
    private final ClassificationEvaluationMetricsConfidenceMetricsEntry model = new ClassificationEvaluationMetricsConfidenceMetricsEntry();

    /**
     * Model tests for ClassificationEvaluationMetricsConfidenceMetricsEntry
     */
    @Test
    public void testClassificationEvaluationMetricsConfidenceMetricsEntry() {
        // TODO: test ClassificationEvaluationMetricsConfidenceMetricsEntry
    }

    /**
     * Test the property 'confidenceThreshold'
     */
    @Test
    public void confidenceThresholdTest() {
        // TODO: test confidenceThreshold
    }

    /**
     * Test the property 'f1Score'
     */
    @Test
    public void f1ScoreTest() {
        // TODO: test f1Score
    }

    /**
     * Test the property 'f1ScoreAt1'
     */
    @Test
    public void f1ScoreAt1Test() {
        // TODO: test f1ScoreAt1
    }

    /**
     * Test the property 'falseNegativeCount'
     */
    @Test
    public void falseNegativeCountTest() {
        // TODO: test falseNegativeCount
    }

    /**
     * Test the property 'falsePositiveCount'
     */
    @Test
    public void falsePositiveCountTest() {
        // TODO: test falsePositiveCount
    }

    /**
     * Test the property 'falsePositiveRate'
     */
    @Test
    public void falsePositiveRateTest() {
        // TODO: test falsePositiveRate
    }

    /**
     * Test the property 'falsePositiveRateAt1'
     */
    @Test
    public void falsePositiveRateAt1Test() {
        // TODO: test falsePositiveRateAt1
    }

    /**
     * Test the property 'positionThreshold'
     */
    @Test
    public void positionThresholdTest() {
        // TODO: test positionThreshold
    }

    /**
     * Test the property 'precision'
     */
    @Test
    public void precisionTest() {
        // TODO: test precision
    }

    /**
     * Test the property 'precisionAt1'
     */
    @Test
    public void precisionAt1Test() {
        // TODO: test precisionAt1
    }

    /**
     * Test the property 'recall'
     */
    @Test
    public void recallTest() {
        // TODO: test recall
    }

    /**
     * Test the property 'recallAt1'
     */
    @Test
    public void recallAt1Test() {
        // TODO: test recallAt1
    }

    /**
     * Test the property 'trueNegativeCount'
     */
    @Test
    public void trueNegativeCountTest() {
        // TODO: test trueNegativeCount
    }

    /**
     * Test the property 'truePositiveCount'
     */
    @Test
    public void truePositiveCountTest() {
        // TODO: test truePositiveCount
    }

}
