/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model metadata for image classification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageClassificationModelMetadata {
  public static final String SERIALIZED_NAME_BASE_MODEL_ID = "baseModelId";
  @SerializedName(SERIALIZED_NAME_BASE_MODEL_ID)
  private String baseModelId;

  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private String modelType;

  public static final String SERIALIZED_NAME_NODE_COUNT = "nodeCount";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private String nodeCount;

  public static final String SERIALIZED_NAME_NODE_QPS = "nodeQps";
  @SerializedName(SERIALIZED_NAME_NODE_QPS)
  private Double nodeQps;

  public static final String SERIALIZED_NAME_STOP_REASON = "stopReason";
  @SerializedName(SERIALIZED_NAME_STOP_REASON)
  private String stopReason;

  public static final String SERIALIZED_NAME_TRAIN_BUDGET = "trainBudget";
  @SerializedName(SERIALIZED_NAME_TRAIN_BUDGET)
  private String trainBudget;

  public static final String SERIALIZED_NAME_TRAIN_COST = "trainCost";
  @SerializedName(SERIALIZED_NAME_TRAIN_COST)
  private String trainCost;

  public ImageClassificationModelMetadata() {
  }

  public ImageClassificationModelMetadata baseModelId(String baseModelId) {
    this.baseModelId = baseModelId;
    return this;
  }

  /**
   * Optional. The ID of the &#x60;base&#x60; model. If it is specified, the new model will be created based on the &#x60;base&#x60; model. Otherwise, the new model will be created from scratch. The &#x60;base&#x60; model must be in the same &#x60;project&#x60; and &#x60;location&#x60; as the new model to create, and have the same &#x60;model_type&#x60;.
   * @return baseModelId
   */
  @javax.annotation.Nullable
  public String getBaseModelId() {
    return baseModelId;
  }

  public void setBaseModelId(String baseModelId) {
    this.baseModelId = baseModelId;
  }


  public ImageClassificationModelMetadata modelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  /**
   * Optional. Type of the model. The available values are: * &#x60;cloud&#x60; - Model to be used via prediction calls to AutoML API. This is the default value. * &#x60;mobile-low-latency-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * &#x60;mobile-versatile-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * &#x60;mobile-high-accuracy-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models. * &#x60;mobile-core-ml-low-latency-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have low latency, but may have lower prediction quality than other models. * &#x60;mobile-core-ml-versatile-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. * &#x60;mobile-core-ml-high-accuracy-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.
   * @return modelType
   */
  @javax.annotation.Nullable
  public String getModelType() {
    return modelType;
  }

  public void setModelType(String modelType) {
    this.modelType = modelType;
  }


  public ImageClassificationModelMetadata nodeCount(String nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

  /**
   * Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the node_qps field.
   * @return nodeCount
   */
  @javax.annotation.Nullable
  public String getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(String nodeCount) {
    this.nodeCount = nodeCount;
  }


  public ImageClassificationModelMetadata nodeQps(Double nodeQps) {
    this.nodeQps = nodeQps;
    return this;
  }

  /**
   * Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.
   * @return nodeQps
   */
  @javax.annotation.Nullable
  public Double getNodeQps() {
    return nodeQps;
  }

  public void setNodeQps(Double nodeQps) {
    this.nodeQps = nodeQps;
  }


  public ImageClassificationModelMetadata stopReason(String stopReason) {
    this.stopReason = stopReason;
    return this;
  }

  /**
   * Output only. The reason that this create model operation stopped, e.g. &#x60;BUDGET_REACHED&#x60;, &#x60;MODEL_CONVERGED&#x60;.
   * @return stopReason
   */
  @javax.annotation.Nullable
  public String getStopReason() {
    return stopReason;
  }

  public void setStopReason(String stopReason) {
    this.stopReason = stopReason;
  }


  public ImageClassificationModelMetadata trainBudget(String trainBudget) {
    this.trainBudget = trainBudget;
    return this;
  }

  /**
   * Required. The train budget of creating this model, expressed in hours. The actual &#x60;train_cost&#x60; will be equal or less than this value.
   * @return trainBudget
   */
  @javax.annotation.Nullable
  public String getTrainBudget() {
    return trainBudget;
  }

  public void setTrainBudget(String trainBudget) {
    this.trainBudget = trainBudget;
  }


  public ImageClassificationModelMetadata trainCost(String trainCost) {
    this.trainCost = trainCost;
    return this;
  }

  /**
   * Output only. The actual train cost of creating this model, expressed in hours. If this model is created from a &#x60;base&#x60; model, the train cost used to create the &#x60;base&#x60; model are not included.
   * @return trainCost
   */
  @javax.annotation.Nullable
  public String getTrainCost() {
    return trainCost;
  }

  public void setTrainCost(String trainCost) {
    this.trainCost = trainCost;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageClassificationModelMetadata imageClassificationModelMetadata = (ImageClassificationModelMetadata) o;
    return Objects.equals(this.baseModelId, imageClassificationModelMetadata.baseModelId) &&
        Objects.equals(this.modelType, imageClassificationModelMetadata.modelType) &&
        Objects.equals(this.nodeCount, imageClassificationModelMetadata.nodeCount) &&
        Objects.equals(this.nodeQps, imageClassificationModelMetadata.nodeQps) &&
        Objects.equals(this.stopReason, imageClassificationModelMetadata.stopReason) &&
        Objects.equals(this.trainBudget, imageClassificationModelMetadata.trainBudget) &&
        Objects.equals(this.trainCost, imageClassificationModelMetadata.trainCost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baseModelId, modelType, nodeCount, nodeQps, stopReason, trainBudget, trainCost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageClassificationModelMetadata {\n");
    sb.append("    baseModelId: ").append(toIndentedString(baseModelId)).append("\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    nodeQps: ").append(toIndentedString(nodeQps)).append("\n");
    sb.append("    stopReason: ").append(toIndentedString(stopReason)).append("\n");
    sb.append("    trainBudget: ").append(toIndentedString(trainBudget)).append("\n");
    sb.append("    trainCost: ").append(toIndentedString(trainCost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baseModelId");
    openapiFields.add("modelType");
    openapiFields.add("nodeCount");
    openapiFields.add("nodeQps");
    openapiFields.add("stopReason");
    openapiFields.add("trainBudget");
    openapiFields.add("trainCost");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageClassificationModelMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageClassificationModelMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageClassificationModelMetadata is not found in the empty JSON string", ImageClassificationModelMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageClassificationModelMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageClassificationModelMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("baseModelId") != null && !jsonObj.get("baseModelId").isJsonNull()) && !jsonObj.get("baseModelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `baseModelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("baseModelId").toString()));
      }
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      if ((jsonObj.get("nodeCount") != null && !jsonObj.get("nodeCount").isJsonNull()) && !jsonObj.get("nodeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeCount").toString()));
      }
      if ((jsonObj.get("stopReason") != null && !jsonObj.get("stopReason").isJsonNull()) && !jsonObj.get("stopReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopReason").toString()));
      }
      if ((jsonObj.get("trainBudget") != null && !jsonObj.get("trainBudget").isJsonNull()) && !jsonObj.get("trainBudget").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainBudget` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainBudget").toString()));
      }
      if ((jsonObj.get("trainCost") != null && !jsonObj.get("trainCost").isJsonNull()) && !jsonObj.get("trainCost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainCost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainCost").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageClassificationModelMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageClassificationModelMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageClassificationModelMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageClassificationModelMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageClassificationModelMetadata>() {
           @Override
           public void write(JsonWriter out, ImageClassificationModelMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageClassificationModelMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageClassificationModelMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageClassificationModelMetadata
   * @throws IOException if the JSON string is invalid with respect to ImageClassificationModelMetadata
   */
  public static ImageClassificationModelMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageClassificationModelMetadata.class);
  }

  /**
   * Convert an instance of ImageClassificationModelMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

