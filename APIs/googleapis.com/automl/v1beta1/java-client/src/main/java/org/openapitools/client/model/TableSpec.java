/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InputConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A specification of a relational table. The table&#39;s schema is represented via its child column specs. It is pre-populated as part of ImportData by schema inference algorithm, the version of which is a required parameter of ImportData InputConfig. Note: While working with a table, at times the schema may be inconsistent with the data in the table (e.g. string in a FLOAT64 column). The consistency validation is done upon creation of a model. Used by: * Tables
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TableSpec {
  public static final String SERIALIZED_NAME_COLUMN_COUNT = "columnCount";
  @SerializedName(SERIALIZED_NAME_COLUMN_COUNT)
  private String columnCount;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_INPUT_CONFIGS = "inputConfigs";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIGS)
  private List<InputConfig> inputConfigs = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROW_COUNT = "rowCount";
  @SerializedName(SERIALIZED_NAME_ROW_COUNT)
  private String rowCount;

  public static final String SERIALIZED_NAME_TIME_COLUMN_SPEC_ID = "timeColumnSpecId";
  @SerializedName(SERIALIZED_NAME_TIME_COLUMN_SPEC_ID)
  private String timeColumnSpecId;

  public static final String SERIALIZED_NAME_VALID_ROW_COUNT = "validRowCount";
  @SerializedName(SERIALIZED_NAME_VALID_ROW_COUNT)
  private String validRowCount;

  public TableSpec() {
  }

  public TableSpec columnCount(String columnCount) {
    this.columnCount = columnCount;
    return this;
  }

  /**
   * Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.
   * @return columnCount
   */
  @javax.annotation.Nullable
  public String getColumnCount() {
    return columnCount;
  }

  public void setColumnCount(String columnCount) {
    this.columnCount = columnCount;
  }


  public TableSpec etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Used to perform consistent read-modify-write updates. If not set, a blind \&quot;overwrite\&quot; update happens.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public TableSpec inputConfigs(List<InputConfig> inputConfigs) {
    this.inputConfigs = inputConfigs;
    return this;
  }

  public TableSpec addInputConfigsItem(InputConfig inputConfigsItem) {
    if (this.inputConfigs == null) {
      this.inputConfigs = new ArrayList<>();
    }
    this.inputConfigs.add(inputConfigsItem);
    return this;
  }

  /**
   * Output only. Input configs via which data currently residing in the table had been imported.
   * @return inputConfigs
   */
  @javax.annotation.Nullable
  public List<InputConfig> getInputConfigs() {
    return inputConfigs;
  }

  public void setInputConfigs(List<InputConfig> inputConfigs) {
    this.inputConfigs = inputConfigs;
  }


  public TableSpec name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The resource name of the table spec. Form: &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TableSpec rowCount(String rowCount) {
    this.rowCount = rowCount;
    return this;
  }

  /**
   * Output only. The number of rows (i.e. examples) in the table.
   * @return rowCount
   */
  @javax.annotation.Nullable
  public String getRowCount() {
    return rowCount;
  }

  public void setRowCount(String rowCount) {
    this.rowCount = rowCount;
  }


  public TableSpec timeColumnSpecId(String timeColumnSpecId) {
    this.timeColumnSpecId = timeColumnSpecId;
    return this;
  }

  /**
   * column_spec_id of the time column. Only used if the parent dataset&#39;s ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and those in between to VALIDATE. Required type: TIMESTAMP. If both this column and ml_use_column are not set, then ML use of all rows will be assigned by AutoML. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
   * @return timeColumnSpecId
   */
  @javax.annotation.Nullable
  public String getTimeColumnSpecId() {
    return timeColumnSpecId;
  }

  public void setTimeColumnSpecId(String timeColumnSpecId) {
    this.timeColumnSpecId = timeColumnSpecId;
  }


  public TableSpec validRowCount(String validRowCount) {
    this.validRowCount = validRowCount;
    return this;
  }

  /**
   * Output only. The number of valid rows (i.e. without values that don&#39;t match DataType-s of their columns).
   * @return validRowCount
   */
  @javax.annotation.Nullable
  public String getValidRowCount() {
    return validRowCount;
  }

  public void setValidRowCount(String validRowCount) {
    this.validRowCount = validRowCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableSpec tableSpec = (TableSpec) o;
    return Objects.equals(this.columnCount, tableSpec.columnCount) &&
        Objects.equals(this.etag, tableSpec.etag) &&
        Objects.equals(this.inputConfigs, tableSpec.inputConfigs) &&
        Objects.equals(this.name, tableSpec.name) &&
        Objects.equals(this.rowCount, tableSpec.rowCount) &&
        Objects.equals(this.timeColumnSpecId, tableSpec.timeColumnSpecId) &&
        Objects.equals(this.validRowCount, tableSpec.validRowCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnCount, etag, inputConfigs, name, rowCount, timeColumnSpecId, validRowCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableSpec {\n");
    sb.append("    columnCount: ").append(toIndentedString(columnCount)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    inputConfigs: ").append(toIndentedString(inputConfigs)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rowCount: ").append(toIndentedString(rowCount)).append("\n");
    sb.append("    timeColumnSpecId: ").append(toIndentedString(timeColumnSpecId)).append("\n");
    sb.append("    validRowCount: ").append(toIndentedString(validRowCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnCount");
    openapiFields.add("etag");
    openapiFields.add("inputConfigs");
    openapiFields.add("name");
    openapiFields.add("rowCount");
    openapiFields.add("timeColumnSpecId");
    openapiFields.add("validRowCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TableSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableSpec is not found in the empty JSON string", TableSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("columnCount") != null && !jsonObj.get("columnCount").isJsonNull()) && !jsonObj.get("columnCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnCount").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if (jsonObj.get("inputConfigs") != null && !jsonObj.get("inputConfigs").isJsonNull()) {
        JsonArray jsonArrayinputConfigs = jsonObj.getAsJsonArray("inputConfigs");
        if (jsonArrayinputConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("inputConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `inputConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("inputConfigs").toString()));
          }

          // validate the optional field `inputConfigs` (array)
          for (int i = 0; i < jsonArrayinputConfigs.size(); i++) {
            InputConfig.validateJsonElement(jsonArrayinputConfigs.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rowCount") != null && !jsonObj.get("rowCount").isJsonNull()) && !jsonObj.get("rowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowCount").toString()));
      }
      if ((jsonObj.get("timeColumnSpecId") != null && !jsonObj.get("timeColumnSpecId").isJsonNull()) && !jsonObj.get("timeColumnSpecId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeColumnSpecId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeColumnSpecId").toString()));
      }
      if ((jsonObj.get("validRowCount") != null && !jsonObj.get("validRowCount").isJsonNull()) && !jsonObj.get("validRowCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validRowCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validRowCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<TableSpec>() {
           @Override
           public void write(JsonWriter out, TableSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TableSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TableSpec
   * @throws IOException if the JSON string is invalid with respect to TableSpec
   */
  public static TableSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableSpec.class);
  }

  /**
   * Convert an instance of TableSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

