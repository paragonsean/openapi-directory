/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.HistogramBucket;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data statistics of a series of FLOAT64 values.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Float64Stats {
  public static final String SERIALIZED_NAME_HISTOGRAM_BUCKETS = "histogramBuckets";
  @SerializedName(SERIALIZED_NAME_HISTOGRAM_BUCKETS)
  private List<HistogramBucket> histogramBuckets = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private Double mean;

  public static final String SERIALIZED_NAME_QUANTILES = "quantiles";
  @SerializedName(SERIALIZED_NAME_QUANTILES)
  private List<Double> quantiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_STANDARD_DEVIATION = "standardDeviation";
  @SerializedName(SERIALIZED_NAME_STANDARD_DEVIATION)
  private Double standardDeviation;

  public Float64Stats() {
  }

  public Float64Stats histogramBuckets(List<HistogramBucket> histogramBuckets) {
    this.histogramBuckets = histogramBuckets;
    return this;
  }

  public Float64Stats addHistogramBucketsItem(HistogramBucket histogramBucketsItem) {
    if (this.histogramBuckets == null) {
      this.histogramBuckets = new ArrayList<>();
    }
    this.histogramBuckets.add(histogramBucketsItem);
    return this;
  }

  /**
   * Histogram buckets of the data series. Sorted by the min value of the bucket, ascendingly, and the number of the buckets is dynamically generated. The buckets are non-overlapping and completely cover whole FLOAT64 range with min of first bucket being &#x60;\&quot;-Infinity\&quot;&#x60;, and max of the last one being &#x60;\&quot;Infinity\&quot;&#x60;.
   * @return histogramBuckets
   */
  @javax.annotation.Nullable
  public List<HistogramBucket> getHistogramBuckets() {
    return histogramBuckets;
  }

  public void setHistogramBuckets(List<HistogramBucket> histogramBuckets) {
    this.histogramBuckets = histogramBuckets;
  }


  public Float64Stats mean(Double mean) {
    this.mean = mean;
    return this;
  }

  /**
   * The mean of the series.
   * @return mean
   */
  @javax.annotation.Nullable
  public Double getMean() {
    return mean;
  }

  public void setMean(Double mean) {
    this.mean = mean;
  }


  public Float64Stats quantiles(List<Double> quantiles) {
    this.quantiles = quantiles;
    return this;
  }

  public Float64Stats addQuantilesItem(Double quantilesItem) {
    if (this.quantiles == null) {
      this.quantiles = new ArrayList<>();
    }
    this.quantiles.add(quantilesItem);
    return this;
  }

  /**
   * Ordered from 0 to k k-quantile values of the data series of n values. The value at index i is, approximately, the i*n/k-th smallest value in the series; for i &#x3D; 0 and i &#x3D; k these are, respectively, the min and max values.
   * @return quantiles
   */
  @javax.annotation.Nullable
  public List<Double> getQuantiles() {
    return quantiles;
  }

  public void setQuantiles(List<Double> quantiles) {
    this.quantiles = quantiles;
  }


  public Float64Stats standardDeviation(Double standardDeviation) {
    this.standardDeviation = standardDeviation;
    return this;
  }

  /**
   * The standard deviation of the series.
   * @return standardDeviation
   */
  @javax.annotation.Nullable
  public Double getStandardDeviation() {
    return standardDeviation;
  }

  public void setStandardDeviation(Double standardDeviation) {
    this.standardDeviation = standardDeviation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Float64Stats float64Stats = (Float64Stats) o;
    return Objects.equals(this.histogramBuckets, float64Stats.histogramBuckets) &&
        Objects.equals(this.mean, float64Stats.mean) &&
        Objects.equals(this.quantiles, float64Stats.quantiles) &&
        Objects.equals(this.standardDeviation, float64Stats.standardDeviation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(histogramBuckets, mean, quantiles, standardDeviation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Float64Stats {\n");
    sb.append("    histogramBuckets: ").append(toIndentedString(histogramBuckets)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    quantiles: ").append(toIndentedString(quantiles)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("histogramBuckets");
    openapiFields.add("mean");
    openapiFields.add("quantiles");
    openapiFields.add("standardDeviation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Float64Stats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Float64Stats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Float64Stats is not found in the empty JSON string", Float64Stats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Float64Stats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Float64Stats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("histogramBuckets") != null && !jsonObj.get("histogramBuckets").isJsonNull()) {
        JsonArray jsonArrayhistogramBuckets = jsonObj.getAsJsonArray("histogramBuckets");
        if (jsonArrayhistogramBuckets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("histogramBuckets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `histogramBuckets` to be an array in the JSON string but got `%s`", jsonObj.get("histogramBuckets").toString()));
          }

          // validate the optional field `histogramBuckets` (array)
          for (int i = 0; i < jsonArrayhistogramBuckets.size(); i++) {
            HistogramBucket.validateJsonElement(jsonArrayhistogramBuckets.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("quantiles") != null && !jsonObj.get("quantiles").isJsonNull() && !jsonObj.get("quantiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `quantiles` to be an array in the JSON string but got `%s`", jsonObj.get("quantiles").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Float64Stats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Float64Stats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Float64Stats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Float64Stats.class));

       return (TypeAdapter<T>) new TypeAdapter<Float64Stats>() {
           @Override
           public void write(JsonWriter out, Float64Stats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Float64Stats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Float64Stats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Float64Stats
   * @throws IOException if the JSON string is invalid with respect to Float64Stats
   */
  public static Float64Stats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Float64Stats.class);
  }

  /**
   * Convert an instance of Float64Stats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

