/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model metadata specific to image object detection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageObjectDetectionModelMetadata {
  public static final String SERIALIZED_NAME_MODEL_TYPE = "modelType";
  @SerializedName(SERIALIZED_NAME_MODEL_TYPE)
  private String modelType;

  public static final String SERIALIZED_NAME_NODE_COUNT = "nodeCount";
  @SerializedName(SERIALIZED_NAME_NODE_COUNT)
  private String nodeCount;

  public static final String SERIALIZED_NAME_NODE_QPS = "nodeQps";
  @SerializedName(SERIALIZED_NAME_NODE_QPS)
  private Double nodeQps;

  public static final String SERIALIZED_NAME_STOP_REASON = "stopReason";
  @SerializedName(SERIALIZED_NAME_STOP_REASON)
  private String stopReason;

  public static final String SERIALIZED_NAME_TRAIN_BUDGET_MILLI_NODE_HOURS = "trainBudgetMilliNodeHours";
  @SerializedName(SERIALIZED_NAME_TRAIN_BUDGET_MILLI_NODE_HOURS)
  private String trainBudgetMilliNodeHours;

  public static final String SERIALIZED_NAME_TRAIN_COST_MILLI_NODE_HOURS = "trainCostMilliNodeHours";
  @SerializedName(SERIALIZED_NAME_TRAIN_COST_MILLI_NODE_HOURS)
  private String trainCostMilliNodeHours;

  public ImageObjectDetectionModelMetadata() {
  }

  public ImageObjectDetectionModelMetadata modelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  /**
   * Optional. Type of the model. The available values are: * &#x60;cloud-high-accuracy-1&#x60; - (default) A model to be used via prediction calls to AutoML API. Expected to have a higher latency, but should also have a higher prediction quality than other models. * &#x60;cloud-low-latency-1&#x60; - A model to be used via prediction calls to AutoML API. Expected to have low latency, but may have lower prediction quality than other models. * &#x60;mobile-low-latency-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * &#x60;mobile-versatile-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * &#x60;mobile-high-accuracy-1&#x60; - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.
   * @return modelType
   */
  @javax.annotation.Nullable
  public String getModelType() {
    return modelType;
  }

  public void setModelType(String modelType) {
    this.modelType = modelType;
  }


  public ImageObjectDetectionModelMetadata nodeCount(String nodeCount) {
    this.nodeCount = nodeCount;
    return this;
  }

  /**
   * Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the qps_per_node field.
   * @return nodeCount
   */
  @javax.annotation.Nullable
  public String getNodeCount() {
    return nodeCount;
  }

  public void setNodeCount(String nodeCount) {
    this.nodeCount = nodeCount;
  }


  public ImageObjectDetectionModelMetadata nodeQps(Double nodeQps) {
    this.nodeQps = nodeQps;
    return this;
  }

  /**
   * Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.
   * @return nodeQps
   */
  @javax.annotation.Nullable
  public Double getNodeQps() {
    return nodeQps;
  }

  public void setNodeQps(Double nodeQps) {
    this.nodeQps = nodeQps;
  }


  public ImageObjectDetectionModelMetadata stopReason(String stopReason) {
    this.stopReason = stopReason;
    return this;
  }

  /**
   * Output only. The reason that this create model operation stopped, e.g. &#x60;BUDGET_REACHED&#x60;, &#x60;MODEL_CONVERGED&#x60;.
   * @return stopReason
   */
  @javax.annotation.Nullable
  public String getStopReason() {
    return stopReason;
  }

  public void setStopReason(String stopReason) {
    this.stopReason = stopReason;
  }


  public ImageObjectDetectionModelMetadata trainBudgetMilliNodeHours(String trainBudgetMilliNodeHours) {
    this.trainBudgetMilliNodeHours = trainBudgetMilliNodeHours;
    return this;
  }

  /**
   * The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The actual &#x60;train_cost&#x60; will be equal or less than this value. If further model training ceases to provide any improvements, it will stop without using full budget and the stop_reason will be &#x60;MODEL_CONVERGED&#x60;. Note, node_hour &#x3D; actual_hour * number_of_nodes_invovled. For model type &#x60;cloud-high-accuracy-1&#x60;(default) and &#x60;cloud-low-latency-1&#x60;, the train budget must be between 20,000 and 900,000 milli node hours, inclusive. The default value is 216, 000 which represents one day in wall time. For model type &#x60;mobile-low-latency-1&#x60;, &#x60;mobile-versatile-1&#x60;, &#x60;mobile-high-accuracy-1&#x60;, &#x60;mobile-core-ml-low-latency-1&#x60;, &#x60;mobile-core-ml-versatile-1&#x60;, &#x60;mobile-core-ml-high-accuracy-1&#x60;, the train budget must be between 1,000 and 100,000 milli node hours, inclusive. The default value is 24, 000 which represents one day in wall time.
   * @return trainBudgetMilliNodeHours
   */
  @javax.annotation.Nullable
  public String getTrainBudgetMilliNodeHours() {
    return trainBudgetMilliNodeHours;
  }

  public void setTrainBudgetMilliNodeHours(String trainBudgetMilliNodeHours) {
    this.trainBudgetMilliNodeHours = trainBudgetMilliNodeHours;
  }


  public ImageObjectDetectionModelMetadata trainCostMilliNodeHours(String trainCostMilliNodeHours) {
    this.trainCostMilliNodeHours = trainCostMilliNodeHours;
    return this;
  }

  /**
   * Output only. The actual train cost of creating this model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.
   * @return trainCostMilliNodeHours
   */
  @javax.annotation.Nullable
  public String getTrainCostMilliNodeHours() {
    return trainCostMilliNodeHours;
  }

  public void setTrainCostMilliNodeHours(String trainCostMilliNodeHours) {
    this.trainCostMilliNodeHours = trainCostMilliNodeHours;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageObjectDetectionModelMetadata imageObjectDetectionModelMetadata = (ImageObjectDetectionModelMetadata) o;
    return Objects.equals(this.modelType, imageObjectDetectionModelMetadata.modelType) &&
        Objects.equals(this.nodeCount, imageObjectDetectionModelMetadata.nodeCount) &&
        Objects.equals(this.nodeQps, imageObjectDetectionModelMetadata.nodeQps) &&
        Objects.equals(this.stopReason, imageObjectDetectionModelMetadata.stopReason) &&
        Objects.equals(this.trainBudgetMilliNodeHours, imageObjectDetectionModelMetadata.trainBudgetMilliNodeHours) &&
        Objects.equals(this.trainCostMilliNodeHours, imageObjectDetectionModelMetadata.trainCostMilliNodeHours);
  }

  @Override
  public int hashCode() {
    return Objects.hash(modelType, nodeCount, nodeQps, stopReason, trainBudgetMilliNodeHours, trainCostMilliNodeHours);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageObjectDetectionModelMetadata {\n");
    sb.append("    modelType: ").append(toIndentedString(modelType)).append("\n");
    sb.append("    nodeCount: ").append(toIndentedString(nodeCount)).append("\n");
    sb.append("    nodeQps: ").append(toIndentedString(nodeQps)).append("\n");
    sb.append("    stopReason: ").append(toIndentedString(stopReason)).append("\n");
    sb.append("    trainBudgetMilliNodeHours: ").append(toIndentedString(trainBudgetMilliNodeHours)).append("\n");
    sb.append("    trainCostMilliNodeHours: ").append(toIndentedString(trainCostMilliNodeHours)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("modelType");
    openapiFields.add("nodeCount");
    openapiFields.add("nodeQps");
    openapiFields.add("stopReason");
    openapiFields.add("trainBudgetMilliNodeHours");
    openapiFields.add("trainCostMilliNodeHours");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageObjectDetectionModelMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageObjectDetectionModelMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageObjectDetectionModelMetadata is not found in the empty JSON string", ImageObjectDetectionModelMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageObjectDetectionModelMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageObjectDetectionModelMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("modelType") != null && !jsonObj.get("modelType").isJsonNull()) && !jsonObj.get("modelType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelType").toString()));
      }
      if ((jsonObj.get("nodeCount") != null && !jsonObj.get("nodeCount").isJsonNull()) && !jsonObj.get("nodeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nodeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nodeCount").toString()));
      }
      if ((jsonObj.get("stopReason") != null && !jsonObj.get("stopReason").isJsonNull()) && !jsonObj.get("stopReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopReason").toString()));
      }
      if ((jsonObj.get("trainBudgetMilliNodeHours") != null && !jsonObj.get("trainBudgetMilliNodeHours").isJsonNull()) && !jsonObj.get("trainBudgetMilliNodeHours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainBudgetMilliNodeHours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainBudgetMilliNodeHours").toString()));
      }
      if ((jsonObj.get("trainCostMilliNodeHours") != null && !jsonObj.get("trainCostMilliNodeHours").isJsonNull()) && !jsonObj.get("trainCostMilliNodeHours").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trainCostMilliNodeHours` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trainCostMilliNodeHours").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageObjectDetectionModelMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageObjectDetectionModelMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageObjectDetectionModelMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageObjectDetectionModelMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageObjectDetectionModelMetadata>() {
           @Override
           public void write(JsonWriter out, ImageObjectDetectionModelMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageObjectDetectionModelMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageObjectDetectionModelMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageObjectDetectionModelMetadata
   * @throws IOException if the JSON string is invalid with respect to ImageObjectDetectionModelMetadata
   */
  public static ImageObjectDetectionModelMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageObjectDetectionModelMetadata.class);
  }

  /**
   * Convert an instance of ImageObjectDetectionModelMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

