/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DocumentDimensions;
import org.openapitools.client.model.DocumentInputConfig;
import org.openapitools.client.model.Layout;
import org.openapitools.client.model.TextSnippet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A structured text document e.g. a PDF.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Document {
  public static final String SERIALIZED_NAME_DOCUMENT_DIMENSIONS = "documentDimensions";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_DIMENSIONS)
  private DocumentDimensions documentDimensions;

  public static final String SERIALIZED_NAME_DOCUMENT_TEXT = "documentText";
  @SerializedName(SERIALIZED_NAME_DOCUMENT_TEXT)
  private TextSnippet documentText;

  public static final String SERIALIZED_NAME_INPUT_CONFIG = "inputConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIG)
  private DocumentInputConfig inputConfig;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private List<Layout> layout = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_COUNT = "pageCount";
  @SerializedName(SERIALIZED_NAME_PAGE_COUNT)
  private Integer pageCount;

  public Document() {
  }

  public Document documentDimensions(DocumentDimensions documentDimensions) {
    this.documentDimensions = documentDimensions;
    return this;
  }

  /**
   * Get documentDimensions
   * @return documentDimensions
   */
  @javax.annotation.Nullable
  public DocumentDimensions getDocumentDimensions() {
    return documentDimensions;
  }

  public void setDocumentDimensions(DocumentDimensions documentDimensions) {
    this.documentDimensions = documentDimensions;
  }


  public Document documentText(TextSnippet documentText) {
    this.documentText = documentText;
    return this;
  }

  /**
   * Get documentText
   * @return documentText
   */
  @javax.annotation.Nullable
  public TextSnippet getDocumentText() {
    return documentText;
  }

  public void setDocumentText(TextSnippet documentText) {
    this.documentText = documentText;
  }


  public Document inputConfig(DocumentInputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Get inputConfig
   * @return inputConfig
   */
  @javax.annotation.Nullable
  public DocumentInputConfig getInputConfig() {
    return inputConfig;
  }

  public void setInputConfig(DocumentInputConfig inputConfig) {
    this.inputConfig = inputConfig;
  }


  public Document layout(List<Layout> layout) {
    this.layout = layout;
    return this;
  }

  public Document addLayoutItem(Layout layoutItem) {
    if (this.layout == null) {
      this.layout = new ArrayList<>();
    }
    this.layout.add(layoutItem);
    return this;
  }

  /**
   * Describes the layout of the document. Sorted by page_number.
   * @return layout
   */
  @javax.annotation.Nullable
  public List<Layout> getLayout() {
    return layout;
  }

  public void setLayout(List<Layout> layout) {
    this.layout = layout;
  }


  public Document pageCount(Integer pageCount) {
    this.pageCount = pageCount;
    return this;
  }

  /**
   * Number of pages in the document.
   * @return pageCount
   */
  @javax.annotation.Nullable
  public Integer getPageCount() {
    return pageCount;
  }

  public void setPageCount(Integer pageCount) {
    this.pageCount = pageCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Document document = (Document) o;
    return Objects.equals(this.documentDimensions, document.documentDimensions) &&
        Objects.equals(this.documentText, document.documentText) &&
        Objects.equals(this.inputConfig, document.inputConfig) &&
        Objects.equals(this.layout, document.layout) &&
        Objects.equals(this.pageCount, document.pageCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentDimensions, documentText, inputConfig, layout, pageCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Document {\n");
    sb.append("    documentDimensions: ").append(toIndentedString(documentDimensions)).append("\n");
    sb.append("    documentText: ").append(toIndentedString(documentText)).append("\n");
    sb.append("    inputConfig: ").append(toIndentedString(inputConfig)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    pageCount: ").append(toIndentedString(pageCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("documentDimensions");
    openapiFields.add("documentText");
    openapiFields.add("inputConfig");
    openapiFields.add("layout");
    openapiFields.add("pageCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Document
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Document.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Document is not found in the empty JSON string", Document.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Document.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Document` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `documentDimensions`
      if (jsonObj.get("documentDimensions") != null && !jsonObj.get("documentDimensions").isJsonNull()) {
        DocumentDimensions.validateJsonElement(jsonObj.get("documentDimensions"));
      }
      // validate the optional field `documentText`
      if (jsonObj.get("documentText") != null && !jsonObj.get("documentText").isJsonNull()) {
        TextSnippet.validateJsonElement(jsonObj.get("documentText"));
      }
      // validate the optional field `inputConfig`
      if (jsonObj.get("inputConfig") != null && !jsonObj.get("inputConfig").isJsonNull()) {
        DocumentInputConfig.validateJsonElement(jsonObj.get("inputConfig"));
      }
      if (jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) {
        JsonArray jsonArraylayout = jsonObj.getAsJsonArray("layout");
        if (jsonArraylayout != null) {
          // ensure the json data is an array
          if (!jsonObj.get("layout").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `layout` to be an array in the JSON string but got `%s`", jsonObj.get("layout").toString()));
          }

          // validate the optional field `layout` (array)
          for (int i = 0; i < jsonArraylayout.size(); i++) {
            Layout.validateJsonElement(jsonArraylayout.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Document.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Document' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Document> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Document.class));

       return (TypeAdapter<T>) new TypeAdapter<Document>() {
           @Override
           public void write(JsonWriter out, Document value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Document read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Document given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Document
   * @throws IOException if the JSON string is invalid with respect to Document
   */
  public static Document fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Document.class);
  }

  /**
   * Convert an instance of Document to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

