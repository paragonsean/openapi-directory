/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AnnotationPayload;
import org.openapitools.client.model.ExamplePayload;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for PredictionService.Predict.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PredictResponse {
  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private List<AnnotationPayload> payload = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREPROCESSED_INPUT = "preprocessedInput";
  @SerializedName(SERIALIZED_NAME_PREPROCESSED_INPUT)
  private ExamplePayload preprocessedInput;

  public PredictResponse() {
  }

  public PredictResponse metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public PredictResponse putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Additional domain-specific prediction response metadata. * For Image Object Detection: &#x60;max_bounding_box_count&#x60; - (int64) At most that many bounding boxes per image could have been returned. * For Text Sentiment: &#x60;sentiment_score&#x60; - (float, deprecated) A value between -1 and 1, -1 maps to least positive sentiment, while 1 maps to the most positive one and the higher the score, the more positive the sentiment in the document is. Yet these values are relative to the training data, so e.g. if all data was positive then -1 will be also positive (though the least). The sentiment_score shouldn&#39;t be confused with \&quot;score\&quot; or \&quot;magnitude\&quot; from the previous Natural Language Sentiment Analysis API.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public PredictResponse payload(List<AnnotationPayload> payload) {
    this.payload = payload;
    return this;
  }

  public PredictResponse addPayloadItem(AnnotationPayload payloadItem) {
    if (this.payload == null) {
      this.payload = new ArrayList<>();
    }
    this.payload.add(payloadItem);
    return this;
  }

  /**
   * Prediction result. Translation and Text Sentiment will return precisely one payload.
   * @return payload
   */
  @javax.annotation.Nullable
  public List<AnnotationPayload> getPayload() {
    return payload;
  }

  public void setPayload(List<AnnotationPayload> payload) {
    this.payload = payload;
  }


  public PredictResponse preprocessedInput(ExamplePayload preprocessedInput) {
    this.preprocessedInput = preprocessedInput;
    return this;
  }

  /**
   * Get preprocessedInput
   * @return preprocessedInput
   */
  @javax.annotation.Nullable
  public ExamplePayload getPreprocessedInput() {
    return preprocessedInput;
  }

  public void setPreprocessedInput(ExamplePayload preprocessedInput) {
    this.preprocessedInput = preprocessedInput;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PredictResponse predictResponse = (PredictResponse) o;
    return Objects.equals(this.metadata, predictResponse.metadata) &&
        Objects.equals(this.payload, predictResponse.payload) &&
        Objects.equals(this.preprocessedInput, predictResponse.preprocessedInput);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadata, payload, preprocessedInput);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PredictResponse {\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    preprocessedInput: ").append(toIndentedString(preprocessedInput)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadata");
    openapiFields.add("payload");
    openapiFields.add("preprocessedInput");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PredictResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PredictResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PredictResponse is not found in the empty JSON string", PredictResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PredictResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PredictResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("payload") != null && !jsonObj.get("payload").isJsonNull()) {
        JsonArray jsonArraypayload = jsonObj.getAsJsonArray("payload");
        if (jsonArraypayload != null) {
          // ensure the json data is an array
          if (!jsonObj.get("payload").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `payload` to be an array in the JSON string but got `%s`", jsonObj.get("payload").toString()));
          }

          // validate the optional field `payload` (array)
          for (int i = 0; i < jsonArraypayload.size(); i++) {
            AnnotationPayload.validateJsonElement(jsonArraypayload.get(i));
          };
        }
      }
      // validate the optional field `preprocessedInput`
      if (jsonObj.get("preprocessedInput") != null && !jsonObj.get("preprocessedInput").isJsonNull()) {
        ExamplePayload.validateJsonElement(jsonObj.get("preprocessedInput"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PredictResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PredictResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PredictResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PredictResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<PredictResponse>() {
           @Override
           public void write(JsonWriter out, PredictResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PredictResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PredictResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PredictResponse
   * @throws IOException if the JSON string is invalid with respect to PredictResponse
   */
  public static PredictResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PredictResponse.class);
  }

  /**
   * Convert an instance of PredictResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

