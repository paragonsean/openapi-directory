/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageClassificationDatasetMetadata;
import org.openapitools.client.model.TablesDatasetMetadata;
import org.openapitools.client.model.TextClassificationDatasetMetadata;
import org.openapitools.client.model.TextSentimentDatasetMetadata;
import org.openapitools.client.model.TranslationDatasetMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Dataset {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_EXAMPLE_COUNT = "exampleCount";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_COUNT)
  private Integer exampleCount;

  public static final String SERIALIZED_NAME_IMAGE_CLASSIFICATION_DATASET_METADATA = "imageClassificationDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_IMAGE_CLASSIFICATION_DATASET_METADATA)
  private ImageClassificationDatasetMetadata imageClassificationDatasetMetadata;

  public static final String SERIALIZED_NAME_IMAGE_OBJECT_DETECTION_DATASET_METADATA = "imageObjectDetectionDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_IMAGE_OBJECT_DETECTION_DATASET_METADATA)
  private Object imageObjectDetectionDatasetMetadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TABLES_DATASET_METADATA = "tablesDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_TABLES_DATASET_METADATA)
  private TablesDatasetMetadata tablesDatasetMetadata;

  public static final String SERIALIZED_NAME_TEXT_CLASSIFICATION_DATASET_METADATA = "textClassificationDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_CLASSIFICATION_DATASET_METADATA)
  private TextClassificationDatasetMetadata textClassificationDatasetMetadata;

  public static final String SERIALIZED_NAME_TEXT_EXTRACTION_DATASET_METADATA = "textExtractionDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_EXTRACTION_DATASET_METADATA)
  private Object textExtractionDatasetMetadata;

  public static final String SERIALIZED_NAME_TEXT_SENTIMENT_DATASET_METADATA = "textSentimentDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_SENTIMENT_DATASET_METADATA)
  private TextSentimentDatasetMetadata textSentimentDatasetMetadata;

  public static final String SERIALIZED_NAME_TRANSLATION_DATASET_METADATA = "translationDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_DATASET_METADATA)
  private TranslationDatasetMetadata translationDatasetMetadata;

  public static final String SERIALIZED_NAME_VIDEO_CLASSIFICATION_DATASET_METADATA = "videoClassificationDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_VIDEO_CLASSIFICATION_DATASET_METADATA)
  private Object videoClassificationDatasetMetadata;

  public static final String SERIALIZED_NAME_VIDEO_OBJECT_TRACKING_DATASET_METADATA = "videoObjectTrackingDatasetMetadata";
  @SerializedName(SERIALIZED_NAME_VIDEO_OBJECT_TRACKING_DATASET_METADATA)
  private Object videoObjectTrackingDatasetMetadata;

  public Dataset() {
  }

  public Dataset createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Timestamp when this dataset was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Dataset description(String description) {
    this.description = description;
    return this;
  }

  /**
   * User-provided description of the dataset. The description can be up to 25000 characters long.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Dataset displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Dataset etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Used to perform consistent read-modify-write updates. If not set, a blind \&quot;overwrite\&quot; update happens.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Dataset exampleCount(Integer exampleCount) {
    this.exampleCount = exampleCount;
    return this;
  }

  /**
   * Output only. The number of examples in the dataset.
   * @return exampleCount
   */
  @javax.annotation.Nullable
  public Integer getExampleCount() {
    return exampleCount;
  }

  public void setExampleCount(Integer exampleCount) {
    this.exampleCount = exampleCount;
  }


  public Dataset imageClassificationDatasetMetadata(ImageClassificationDatasetMetadata imageClassificationDatasetMetadata) {
    this.imageClassificationDatasetMetadata = imageClassificationDatasetMetadata;
    return this;
  }

  /**
   * Get imageClassificationDatasetMetadata
   * @return imageClassificationDatasetMetadata
   */
  @javax.annotation.Nullable
  public ImageClassificationDatasetMetadata getImageClassificationDatasetMetadata() {
    return imageClassificationDatasetMetadata;
  }

  public void setImageClassificationDatasetMetadata(ImageClassificationDatasetMetadata imageClassificationDatasetMetadata) {
    this.imageClassificationDatasetMetadata = imageClassificationDatasetMetadata;
  }


  public Dataset imageObjectDetectionDatasetMetadata(Object imageObjectDetectionDatasetMetadata) {
    this.imageObjectDetectionDatasetMetadata = imageObjectDetectionDatasetMetadata;
    return this;
  }

  /**
   * Dataset metadata specific to image object detection.
   * @return imageObjectDetectionDatasetMetadata
   */
  @javax.annotation.Nullable
  public Object getImageObjectDetectionDatasetMetadata() {
    return imageObjectDetectionDatasetMetadata;
  }

  public void setImageObjectDetectionDatasetMetadata(Object imageObjectDetectionDatasetMetadata) {
    this.imageObjectDetectionDatasetMetadata = imageObjectDetectionDatasetMetadata;
  }


  public Dataset name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The resource name of the dataset. Form: &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Dataset tablesDatasetMetadata(TablesDatasetMetadata tablesDatasetMetadata) {
    this.tablesDatasetMetadata = tablesDatasetMetadata;
    return this;
  }

  /**
   * Get tablesDatasetMetadata
   * @return tablesDatasetMetadata
   */
  @javax.annotation.Nullable
  public TablesDatasetMetadata getTablesDatasetMetadata() {
    return tablesDatasetMetadata;
  }

  public void setTablesDatasetMetadata(TablesDatasetMetadata tablesDatasetMetadata) {
    this.tablesDatasetMetadata = tablesDatasetMetadata;
  }


  public Dataset textClassificationDatasetMetadata(TextClassificationDatasetMetadata textClassificationDatasetMetadata) {
    this.textClassificationDatasetMetadata = textClassificationDatasetMetadata;
    return this;
  }

  /**
   * Get textClassificationDatasetMetadata
   * @return textClassificationDatasetMetadata
   */
  @javax.annotation.Nullable
  public TextClassificationDatasetMetadata getTextClassificationDatasetMetadata() {
    return textClassificationDatasetMetadata;
  }

  public void setTextClassificationDatasetMetadata(TextClassificationDatasetMetadata textClassificationDatasetMetadata) {
    this.textClassificationDatasetMetadata = textClassificationDatasetMetadata;
  }


  public Dataset textExtractionDatasetMetadata(Object textExtractionDatasetMetadata) {
    this.textExtractionDatasetMetadata = textExtractionDatasetMetadata;
    return this;
  }

  /**
   * Dataset metadata that is specific to text extraction
   * @return textExtractionDatasetMetadata
   */
  @javax.annotation.Nullable
  public Object getTextExtractionDatasetMetadata() {
    return textExtractionDatasetMetadata;
  }

  public void setTextExtractionDatasetMetadata(Object textExtractionDatasetMetadata) {
    this.textExtractionDatasetMetadata = textExtractionDatasetMetadata;
  }


  public Dataset textSentimentDatasetMetadata(TextSentimentDatasetMetadata textSentimentDatasetMetadata) {
    this.textSentimentDatasetMetadata = textSentimentDatasetMetadata;
    return this;
  }

  /**
   * Get textSentimentDatasetMetadata
   * @return textSentimentDatasetMetadata
   */
  @javax.annotation.Nullable
  public TextSentimentDatasetMetadata getTextSentimentDatasetMetadata() {
    return textSentimentDatasetMetadata;
  }

  public void setTextSentimentDatasetMetadata(TextSentimentDatasetMetadata textSentimentDatasetMetadata) {
    this.textSentimentDatasetMetadata = textSentimentDatasetMetadata;
  }


  public Dataset translationDatasetMetadata(TranslationDatasetMetadata translationDatasetMetadata) {
    this.translationDatasetMetadata = translationDatasetMetadata;
    return this;
  }

  /**
   * Get translationDatasetMetadata
   * @return translationDatasetMetadata
   */
  @javax.annotation.Nullable
  public TranslationDatasetMetadata getTranslationDatasetMetadata() {
    return translationDatasetMetadata;
  }

  public void setTranslationDatasetMetadata(TranslationDatasetMetadata translationDatasetMetadata) {
    this.translationDatasetMetadata = translationDatasetMetadata;
  }


  public Dataset videoClassificationDatasetMetadata(Object videoClassificationDatasetMetadata) {
    this.videoClassificationDatasetMetadata = videoClassificationDatasetMetadata;
    return this;
  }

  /**
   * Dataset metadata specific to video classification. All Video Classification datasets are treated as multi label.
   * @return videoClassificationDatasetMetadata
   */
  @javax.annotation.Nullable
  public Object getVideoClassificationDatasetMetadata() {
    return videoClassificationDatasetMetadata;
  }

  public void setVideoClassificationDatasetMetadata(Object videoClassificationDatasetMetadata) {
    this.videoClassificationDatasetMetadata = videoClassificationDatasetMetadata;
  }


  public Dataset videoObjectTrackingDatasetMetadata(Object videoObjectTrackingDatasetMetadata) {
    this.videoObjectTrackingDatasetMetadata = videoObjectTrackingDatasetMetadata;
    return this;
  }

  /**
   * Dataset metadata specific to video object tracking.
   * @return videoObjectTrackingDatasetMetadata
   */
  @javax.annotation.Nullable
  public Object getVideoObjectTrackingDatasetMetadata() {
    return videoObjectTrackingDatasetMetadata;
  }

  public void setVideoObjectTrackingDatasetMetadata(Object videoObjectTrackingDatasetMetadata) {
    this.videoObjectTrackingDatasetMetadata = videoObjectTrackingDatasetMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Dataset dataset = (Dataset) o;
    return Objects.equals(this.createTime, dataset.createTime) &&
        Objects.equals(this.description, dataset.description) &&
        Objects.equals(this.displayName, dataset.displayName) &&
        Objects.equals(this.etag, dataset.etag) &&
        Objects.equals(this.exampleCount, dataset.exampleCount) &&
        Objects.equals(this.imageClassificationDatasetMetadata, dataset.imageClassificationDatasetMetadata) &&
        Objects.equals(this.imageObjectDetectionDatasetMetadata, dataset.imageObjectDetectionDatasetMetadata) &&
        Objects.equals(this.name, dataset.name) &&
        Objects.equals(this.tablesDatasetMetadata, dataset.tablesDatasetMetadata) &&
        Objects.equals(this.textClassificationDatasetMetadata, dataset.textClassificationDatasetMetadata) &&
        Objects.equals(this.textExtractionDatasetMetadata, dataset.textExtractionDatasetMetadata) &&
        Objects.equals(this.textSentimentDatasetMetadata, dataset.textSentimentDatasetMetadata) &&
        Objects.equals(this.translationDatasetMetadata, dataset.translationDatasetMetadata) &&
        Objects.equals(this.videoClassificationDatasetMetadata, dataset.videoClassificationDatasetMetadata) &&
        Objects.equals(this.videoObjectTrackingDatasetMetadata, dataset.videoObjectTrackingDatasetMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, displayName, etag, exampleCount, imageClassificationDatasetMetadata, imageObjectDetectionDatasetMetadata, name, tablesDatasetMetadata, textClassificationDatasetMetadata, textExtractionDatasetMetadata, textSentimentDatasetMetadata, translationDatasetMetadata, videoClassificationDatasetMetadata, videoObjectTrackingDatasetMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Dataset {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    exampleCount: ").append(toIndentedString(exampleCount)).append("\n");
    sb.append("    imageClassificationDatasetMetadata: ").append(toIndentedString(imageClassificationDatasetMetadata)).append("\n");
    sb.append("    imageObjectDetectionDatasetMetadata: ").append(toIndentedString(imageObjectDetectionDatasetMetadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tablesDatasetMetadata: ").append(toIndentedString(tablesDatasetMetadata)).append("\n");
    sb.append("    textClassificationDatasetMetadata: ").append(toIndentedString(textClassificationDatasetMetadata)).append("\n");
    sb.append("    textExtractionDatasetMetadata: ").append(toIndentedString(textExtractionDatasetMetadata)).append("\n");
    sb.append("    textSentimentDatasetMetadata: ").append(toIndentedString(textSentimentDatasetMetadata)).append("\n");
    sb.append("    translationDatasetMetadata: ").append(toIndentedString(translationDatasetMetadata)).append("\n");
    sb.append("    videoClassificationDatasetMetadata: ").append(toIndentedString(videoClassificationDatasetMetadata)).append("\n");
    sb.append("    videoObjectTrackingDatasetMetadata: ").append(toIndentedString(videoObjectTrackingDatasetMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("exampleCount");
    openapiFields.add("imageClassificationDatasetMetadata");
    openapiFields.add("imageObjectDetectionDatasetMetadata");
    openapiFields.add("name");
    openapiFields.add("tablesDatasetMetadata");
    openapiFields.add("textClassificationDatasetMetadata");
    openapiFields.add("textExtractionDatasetMetadata");
    openapiFields.add("textSentimentDatasetMetadata");
    openapiFields.add("translationDatasetMetadata");
    openapiFields.add("videoClassificationDatasetMetadata");
    openapiFields.add("videoObjectTrackingDatasetMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Dataset
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Dataset.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Dataset is not found in the empty JSON string", Dataset.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Dataset.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Dataset` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      // validate the optional field `imageClassificationDatasetMetadata`
      if (jsonObj.get("imageClassificationDatasetMetadata") != null && !jsonObj.get("imageClassificationDatasetMetadata").isJsonNull()) {
        ImageClassificationDatasetMetadata.validateJsonElement(jsonObj.get("imageClassificationDatasetMetadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `tablesDatasetMetadata`
      if (jsonObj.get("tablesDatasetMetadata") != null && !jsonObj.get("tablesDatasetMetadata").isJsonNull()) {
        TablesDatasetMetadata.validateJsonElement(jsonObj.get("tablesDatasetMetadata"));
      }
      // validate the optional field `textClassificationDatasetMetadata`
      if (jsonObj.get("textClassificationDatasetMetadata") != null && !jsonObj.get("textClassificationDatasetMetadata").isJsonNull()) {
        TextClassificationDatasetMetadata.validateJsonElement(jsonObj.get("textClassificationDatasetMetadata"));
      }
      // validate the optional field `textSentimentDatasetMetadata`
      if (jsonObj.get("textSentimentDatasetMetadata") != null && !jsonObj.get("textSentimentDatasetMetadata").isJsonNull()) {
        TextSentimentDatasetMetadata.validateJsonElement(jsonObj.get("textSentimentDatasetMetadata"));
      }
      // validate the optional field `translationDatasetMetadata`
      if (jsonObj.get("translationDatasetMetadata") != null && !jsonObj.get("translationDatasetMetadata").isJsonNull()) {
        TranslationDatasetMetadata.validateJsonElement(jsonObj.get("translationDatasetMetadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Dataset.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Dataset' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Dataset> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Dataset.class));

       return (TypeAdapter<T>) new TypeAdapter<Dataset>() {
           @Override
           public void write(JsonWriter out, Dataset value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Dataset read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Dataset given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Dataset
   * @throws IOException if the JSON string is invalid with respect to Dataset
   */
  public static Dataset fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Dataset.class);
  }

  /**
   * Convert an instance of Dataset to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

