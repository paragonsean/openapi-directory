/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ArrayStats;
import org.openapitools.client.model.CategoryStats;
import org.openapitools.client.model.Float64Stats;
import org.openapitools.client.model.StringStats;
import org.openapitools.client.model.StructStats;
import org.openapitools.client.model.TimestampStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The data statistics of a series of values that share the same DataType.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataStats {
  public static final String SERIALIZED_NAME_ARRAY_STATS = "arrayStats";
  @SerializedName(SERIALIZED_NAME_ARRAY_STATS)
  private ArrayStats arrayStats;

  public static final String SERIALIZED_NAME_CATEGORY_STATS = "categoryStats";
  @SerializedName(SERIALIZED_NAME_CATEGORY_STATS)
  private CategoryStats categoryStats;

  public static final String SERIALIZED_NAME_DISTINCT_VALUE_COUNT = "distinctValueCount";
  @SerializedName(SERIALIZED_NAME_DISTINCT_VALUE_COUNT)
  private String distinctValueCount;

  public static final String SERIALIZED_NAME_FLOAT64_STATS = "float64Stats";
  @SerializedName(SERIALIZED_NAME_FLOAT64_STATS)
  private Float64Stats float64Stats;

  public static final String SERIALIZED_NAME_NULL_VALUE_COUNT = "nullValueCount";
  @SerializedName(SERIALIZED_NAME_NULL_VALUE_COUNT)
  private String nullValueCount;

  public static final String SERIALIZED_NAME_STRING_STATS = "stringStats";
  @SerializedName(SERIALIZED_NAME_STRING_STATS)
  private StringStats stringStats;

  public static final String SERIALIZED_NAME_STRUCT_STATS = "structStats";
  @SerializedName(SERIALIZED_NAME_STRUCT_STATS)
  private StructStats structStats;

  public static final String SERIALIZED_NAME_TIMESTAMP_STATS = "timestampStats";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_STATS)
  private TimestampStats timestampStats;

  public static final String SERIALIZED_NAME_VALID_VALUE_COUNT = "validValueCount";
  @SerializedName(SERIALIZED_NAME_VALID_VALUE_COUNT)
  private String validValueCount;

  public DataStats() {
  }

  public DataStats arrayStats(ArrayStats arrayStats) {
    this.arrayStats = arrayStats;
    return this;
  }

  /**
   * Get arrayStats
   * @return arrayStats
   */
  @javax.annotation.Nullable
  public ArrayStats getArrayStats() {
    return arrayStats;
  }

  public void setArrayStats(ArrayStats arrayStats) {
    this.arrayStats = arrayStats;
  }


  public DataStats categoryStats(CategoryStats categoryStats) {
    this.categoryStats = categoryStats;
    return this;
  }

  /**
   * Get categoryStats
   * @return categoryStats
   */
  @javax.annotation.Nullable
  public CategoryStats getCategoryStats() {
    return categoryStats;
  }

  public void setCategoryStats(CategoryStats categoryStats) {
    this.categoryStats = categoryStats;
  }


  public DataStats distinctValueCount(String distinctValueCount) {
    this.distinctValueCount = distinctValueCount;
    return this;
  }

  /**
   * The number of distinct values.
   * @return distinctValueCount
   */
  @javax.annotation.Nullable
  public String getDistinctValueCount() {
    return distinctValueCount;
  }

  public void setDistinctValueCount(String distinctValueCount) {
    this.distinctValueCount = distinctValueCount;
  }


  public DataStats float64Stats(Float64Stats float64Stats) {
    this.float64Stats = float64Stats;
    return this;
  }

  /**
   * Get float64Stats
   * @return float64Stats
   */
  @javax.annotation.Nullable
  public Float64Stats getFloat64Stats() {
    return float64Stats;
  }

  public void setFloat64Stats(Float64Stats float64Stats) {
    this.float64Stats = float64Stats;
  }


  public DataStats nullValueCount(String nullValueCount) {
    this.nullValueCount = nullValueCount;
    return this;
  }

  /**
   * The number of values that are null.
   * @return nullValueCount
   */
  @javax.annotation.Nullable
  public String getNullValueCount() {
    return nullValueCount;
  }

  public void setNullValueCount(String nullValueCount) {
    this.nullValueCount = nullValueCount;
  }


  public DataStats stringStats(StringStats stringStats) {
    this.stringStats = stringStats;
    return this;
  }

  /**
   * Get stringStats
   * @return stringStats
   */
  @javax.annotation.Nullable
  public StringStats getStringStats() {
    return stringStats;
  }

  public void setStringStats(StringStats stringStats) {
    this.stringStats = stringStats;
  }


  public DataStats structStats(StructStats structStats) {
    this.structStats = structStats;
    return this;
  }

  /**
   * Get structStats
   * @return structStats
   */
  @javax.annotation.Nullable
  public StructStats getStructStats() {
    return structStats;
  }

  public void setStructStats(StructStats structStats) {
    this.structStats = structStats;
  }


  public DataStats timestampStats(TimestampStats timestampStats) {
    this.timestampStats = timestampStats;
    return this;
  }

  /**
   * Get timestampStats
   * @return timestampStats
   */
  @javax.annotation.Nullable
  public TimestampStats getTimestampStats() {
    return timestampStats;
  }

  public void setTimestampStats(TimestampStats timestampStats) {
    this.timestampStats = timestampStats;
  }


  public DataStats validValueCount(String validValueCount) {
    this.validValueCount = validValueCount;
    return this;
  }

  /**
   * The number of values that are valid.
   * @return validValueCount
   */
  @javax.annotation.Nullable
  public String getValidValueCount() {
    return validValueCount;
  }

  public void setValidValueCount(String validValueCount) {
    this.validValueCount = validValueCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataStats dataStats = (DataStats) o;
    return Objects.equals(this.arrayStats, dataStats.arrayStats) &&
        Objects.equals(this.categoryStats, dataStats.categoryStats) &&
        Objects.equals(this.distinctValueCount, dataStats.distinctValueCount) &&
        Objects.equals(this.float64Stats, dataStats.float64Stats) &&
        Objects.equals(this.nullValueCount, dataStats.nullValueCount) &&
        Objects.equals(this.stringStats, dataStats.stringStats) &&
        Objects.equals(this.structStats, dataStats.structStats) &&
        Objects.equals(this.timestampStats, dataStats.timestampStats) &&
        Objects.equals(this.validValueCount, dataStats.validValueCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(arrayStats, categoryStats, distinctValueCount, float64Stats, nullValueCount, stringStats, structStats, timestampStats, validValueCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataStats {\n");
    sb.append("    arrayStats: ").append(toIndentedString(arrayStats)).append("\n");
    sb.append("    categoryStats: ").append(toIndentedString(categoryStats)).append("\n");
    sb.append("    distinctValueCount: ").append(toIndentedString(distinctValueCount)).append("\n");
    sb.append("    float64Stats: ").append(toIndentedString(float64Stats)).append("\n");
    sb.append("    nullValueCount: ").append(toIndentedString(nullValueCount)).append("\n");
    sb.append("    stringStats: ").append(toIndentedString(stringStats)).append("\n");
    sb.append("    structStats: ").append(toIndentedString(structStats)).append("\n");
    sb.append("    timestampStats: ").append(toIndentedString(timestampStats)).append("\n");
    sb.append("    validValueCount: ").append(toIndentedString(validValueCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("arrayStats");
    openapiFields.add("categoryStats");
    openapiFields.add("distinctValueCount");
    openapiFields.add("float64Stats");
    openapiFields.add("nullValueCount");
    openapiFields.add("stringStats");
    openapiFields.add("structStats");
    openapiFields.add("timestampStats");
    openapiFields.add("validValueCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataStats
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataStats.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataStats is not found in the empty JSON string", DataStats.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataStats.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataStats` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `arrayStats`
      if (jsonObj.get("arrayStats") != null && !jsonObj.get("arrayStats").isJsonNull()) {
        ArrayStats.validateJsonElement(jsonObj.get("arrayStats"));
      }
      // validate the optional field `categoryStats`
      if (jsonObj.get("categoryStats") != null && !jsonObj.get("categoryStats").isJsonNull()) {
        CategoryStats.validateJsonElement(jsonObj.get("categoryStats"));
      }
      if ((jsonObj.get("distinctValueCount") != null && !jsonObj.get("distinctValueCount").isJsonNull()) && !jsonObj.get("distinctValueCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `distinctValueCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("distinctValueCount").toString()));
      }
      // validate the optional field `float64Stats`
      if (jsonObj.get("float64Stats") != null && !jsonObj.get("float64Stats").isJsonNull()) {
        Float64Stats.validateJsonElement(jsonObj.get("float64Stats"));
      }
      if ((jsonObj.get("nullValueCount") != null && !jsonObj.get("nullValueCount").isJsonNull()) && !jsonObj.get("nullValueCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nullValueCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nullValueCount").toString()));
      }
      // validate the optional field `stringStats`
      if (jsonObj.get("stringStats") != null && !jsonObj.get("stringStats").isJsonNull()) {
        StringStats.validateJsonElement(jsonObj.get("stringStats"));
      }
      // validate the optional field `structStats`
      if (jsonObj.get("structStats") != null && !jsonObj.get("structStats").isJsonNull()) {
        StructStats.validateJsonElement(jsonObj.get("structStats"));
      }
      // validate the optional field `timestampStats`
      if (jsonObj.get("timestampStats") != null && !jsonObj.get("timestampStats").isJsonNull()) {
        TimestampStats.validateJsonElement(jsonObj.get("timestampStats"));
      }
      if ((jsonObj.get("validValueCount") != null && !jsonObj.get("validValueCount").isJsonNull()) && !jsonObj.get("validValueCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `validValueCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("validValueCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataStats.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataStats' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataStats> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataStats.class));

       return (TypeAdapter<T>) new TypeAdapter<DataStats>() {
           @Override
           public void write(JsonWriter out, DataStats value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataStats read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataStats given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataStats
   * @throws IOException if the JSON string is invalid with respect to DataStats
   */
  public static DataStats fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataStats.class);
  }

  /**
   * Convert an instance of DataStats to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

