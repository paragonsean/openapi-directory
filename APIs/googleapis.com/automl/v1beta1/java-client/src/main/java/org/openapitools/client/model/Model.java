/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageClassificationModelMetadata;
import org.openapitools.client.model.ImageObjectDetectionModelMetadata;
import org.openapitools.client.model.TablesModelMetadata;
import org.openapitools.client.model.TextClassificationModelMetadata;
import org.openapitools.client.model.TextExtractionModelMetadata;
import org.openapitools.client.model.TranslationModelMetadata;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * API proto representing a trained machine learning model.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Model {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DATASET_ID = "datasetId";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  /**
   * Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
   */
  @JsonAdapter(DeploymentStateEnum.Adapter.class)
  public enum DeploymentStateEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    DEPLOYED("DEPLOYED"),
    
    UNDEPLOYED("UNDEPLOYED");

    private String value;

    DeploymentStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeploymentStateEnum fromValue(String value) {
      for (DeploymentStateEnum b : DeploymentStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeploymentStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeploymentStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeploymentStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeploymentStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeploymentStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DEPLOYMENT_STATE = "deploymentState";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STATE)
  private DeploymentStateEnum deploymentState;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_IMAGE_CLASSIFICATION_MODEL_METADATA = "imageClassificationModelMetadata";
  @SerializedName(SERIALIZED_NAME_IMAGE_CLASSIFICATION_MODEL_METADATA)
  private ImageClassificationModelMetadata imageClassificationModelMetadata;

  public static final String SERIALIZED_NAME_IMAGE_OBJECT_DETECTION_MODEL_METADATA = "imageObjectDetectionModelMetadata";
  @SerializedName(SERIALIZED_NAME_IMAGE_OBJECT_DETECTION_MODEL_METADATA)
  private ImageObjectDetectionModelMetadata imageObjectDetectionModelMetadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TABLES_MODEL_METADATA = "tablesModelMetadata";
  @SerializedName(SERIALIZED_NAME_TABLES_MODEL_METADATA)
  private TablesModelMetadata tablesModelMetadata;

  public static final String SERIALIZED_NAME_TEXT_CLASSIFICATION_MODEL_METADATA = "textClassificationModelMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_CLASSIFICATION_MODEL_METADATA)
  private TextClassificationModelMetadata textClassificationModelMetadata;

  public static final String SERIALIZED_NAME_TEXT_EXTRACTION_MODEL_METADATA = "textExtractionModelMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_EXTRACTION_MODEL_METADATA)
  private TextExtractionModelMetadata textExtractionModelMetadata;

  public static final String SERIALIZED_NAME_TEXT_SENTIMENT_MODEL_METADATA = "textSentimentModelMetadata";
  @SerializedName(SERIALIZED_NAME_TEXT_SENTIMENT_MODEL_METADATA)
  private Object textSentimentModelMetadata;

  public static final String SERIALIZED_NAME_TRAIN_EXAMPLE_COUNT = "trainExampleCount";
  @SerializedName(SERIALIZED_NAME_TRAIN_EXAMPLE_COUNT)
  private Integer trainExampleCount;

  public static final String SERIALIZED_NAME_TRANSLATION_MODEL_METADATA = "translationModelMetadata";
  @SerializedName(SERIALIZED_NAME_TRANSLATION_MODEL_METADATA)
  private TranslationModelMetadata translationModelMetadata;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VALIDATE_EXAMPLE_COUNT = "validateExampleCount";
  @SerializedName(SERIALIZED_NAME_VALIDATE_EXAMPLE_COUNT)
  private Integer validateExampleCount;

  public static final String SERIALIZED_NAME_VIDEO_CLASSIFICATION_MODEL_METADATA = "videoClassificationModelMetadata";
  @SerializedName(SERIALIZED_NAME_VIDEO_CLASSIFICATION_MODEL_METADATA)
  private Object videoClassificationModelMetadata;

  public static final String SERIALIZED_NAME_VIDEO_OBJECT_TRACKING_MODEL_METADATA = "videoObjectTrackingModelMetadata";
  @SerializedName(SERIALIZED_NAME_VIDEO_OBJECT_TRACKING_MODEL_METADATA)
  private Object videoObjectTrackingModelMetadata;

  public Model() {
  }

  public Model(
     Integer trainExampleCount, 
     Integer validateExampleCount
  ) {
    this();
    this.trainExampleCount = trainExampleCount;
    this.validateExampleCount = validateExampleCount;
  }

  public Model createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Output only. Timestamp when the model training finished and can be used for prediction.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Model datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

  /**
   * Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.
   * @return datasetId
   */
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public Model deploymentState(DeploymentStateEnum deploymentState) {
    this.deploymentState = deploymentState;
    return this;
  }

  /**
   * Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
   * @return deploymentState
   */
  @javax.annotation.Nullable
  public DeploymentStateEnum getDeploymentState() {
    return deploymentState;
  }

  public void setDeploymentState(DeploymentStateEnum deploymentState) {
    this.deploymentState = deploymentState;
  }


  public Model displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public Model imageClassificationModelMetadata(ImageClassificationModelMetadata imageClassificationModelMetadata) {
    this.imageClassificationModelMetadata = imageClassificationModelMetadata;
    return this;
  }

  /**
   * Get imageClassificationModelMetadata
   * @return imageClassificationModelMetadata
   */
  @javax.annotation.Nullable
  public ImageClassificationModelMetadata getImageClassificationModelMetadata() {
    return imageClassificationModelMetadata;
  }

  public void setImageClassificationModelMetadata(ImageClassificationModelMetadata imageClassificationModelMetadata) {
    this.imageClassificationModelMetadata = imageClassificationModelMetadata;
  }


  public Model imageObjectDetectionModelMetadata(ImageObjectDetectionModelMetadata imageObjectDetectionModelMetadata) {
    this.imageObjectDetectionModelMetadata = imageObjectDetectionModelMetadata;
    return this;
  }

  /**
   * Get imageObjectDetectionModelMetadata
   * @return imageObjectDetectionModelMetadata
   */
  @javax.annotation.Nullable
  public ImageObjectDetectionModelMetadata getImageObjectDetectionModelMetadata() {
    return imageObjectDetectionModelMetadata;
  }

  public void setImageObjectDetectionModelMetadata(ImageObjectDetectionModelMetadata imageObjectDetectionModelMetadata) {
    this.imageObjectDetectionModelMetadata = imageObjectDetectionModelMetadata;
  }


  public Model name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. Resource name of the model. Format: &#x60;projects/{project_id}/locations/{location_id}/models/{model_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Model tablesModelMetadata(TablesModelMetadata tablesModelMetadata) {
    this.tablesModelMetadata = tablesModelMetadata;
    return this;
  }

  /**
   * Get tablesModelMetadata
   * @return tablesModelMetadata
   */
  @javax.annotation.Nullable
  public TablesModelMetadata getTablesModelMetadata() {
    return tablesModelMetadata;
  }

  public void setTablesModelMetadata(TablesModelMetadata tablesModelMetadata) {
    this.tablesModelMetadata = tablesModelMetadata;
  }


  public Model textClassificationModelMetadata(TextClassificationModelMetadata textClassificationModelMetadata) {
    this.textClassificationModelMetadata = textClassificationModelMetadata;
    return this;
  }

  /**
   * Get textClassificationModelMetadata
   * @return textClassificationModelMetadata
   */
  @javax.annotation.Nullable
  public TextClassificationModelMetadata getTextClassificationModelMetadata() {
    return textClassificationModelMetadata;
  }

  public void setTextClassificationModelMetadata(TextClassificationModelMetadata textClassificationModelMetadata) {
    this.textClassificationModelMetadata = textClassificationModelMetadata;
  }


  public Model textExtractionModelMetadata(TextExtractionModelMetadata textExtractionModelMetadata) {
    this.textExtractionModelMetadata = textExtractionModelMetadata;
    return this;
  }

  /**
   * Get textExtractionModelMetadata
   * @return textExtractionModelMetadata
   */
  @javax.annotation.Nullable
  public TextExtractionModelMetadata getTextExtractionModelMetadata() {
    return textExtractionModelMetadata;
  }

  public void setTextExtractionModelMetadata(TextExtractionModelMetadata textExtractionModelMetadata) {
    this.textExtractionModelMetadata = textExtractionModelMetadata;
  }


  public Model textSentimentModelMetadata(Object textSentimentModelMetadata) {
    this.textSentimentModelMetadata = textSentimentModelMetadata;
    return this;
  }

  /**
   * Model metadata that is specific to text sentiment.
   * @return textSentimentModelMetadata
   */
  @javax.annotation.Nullable
  public Object getTextSentimentModelMetadata() {
    return textSentimentModelMetadata;
  }

  public void setTextSentimentModelMetadata(Object textSentimentModelMetadata) {
    this.textSentimentModelMetadata = textSentimentModelMetadata;
  }


  /**
   * Output only. The number of examples in the training set used for the model creation.
   * @return trainExampleCount
   */
  @javax.annotation.Nullable
  public Integer getTrainExampleCount() {
    return trainExampleCount;
  }



  public Model translationModelMetadata(TranslationModelMetadata translationModelMetadata) {
    this.translationModelMetadata = translationModelMetadata;
    return this;
  }

  /**
   * Get translationModelMetadata
   * @return translationModelMetadata
   */
  @javax.annotation.Nullable
  public TranslationModelMetadata getTranslationModelMetadata() {
    return translationModelMetadata;
  }

  public void setTranslationModelMetadata(TranslationModelMetadata translationModelMetadata) {
    this.translationModelMetadata = translationModelMetadata;
  }


  public Model updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Output only. Timestamp when this model was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  /**
   * Output only. The number of examples in the validation set used for the model creation.
   * @return validateExampleCount
   */
  @javax.annotation.Nullable
  public Integer getValidateExampleCount() {
    return validateExampleCount;
  }



  public Model videoClassificationModelMetadata(Object videoClassificationModelMetadata) {
    this.videoClassificationModelMetadata = videoClassificationModelMetadata;
    return this;
  }

  /**
   * Model metadata specific to video classification.
   * @return videoClassificationModelMetadata
   */
  @javax.annotation.Nullable
  public Object getVideoClassificationModelMetadata() {
    return videoClassificationModelMetadata;
  }

  public void setVideoClassificationModelMetadata(Object videoClassificationModelMetadata) {
    this.videoClassificationModelMetadata = videoClassificationModelMetadata;
  }


  public Model videoObjectTrackingModelMetadata(Object videoObjectTrackingModelMetadata) {
    this.videoObjectTrackingModelMetadata = videoObjectTrackingModelMetadata;
    return this;
  }

  /**
   * Model metadata specific to video object tracking.
   * @return videoObjectTrackingModelMetadata
   */
  @javax.annotation.Nullable
  public Object getVideoObjectTrackingModelMetadata() {
    return videoObjectTrackingModelMetadata;
  }

  public void setVideoObjectTrackingModelMetadata(Object videoObjectTrackingModelMetadata) {
    this.videoObjectTrackingModelMetadata = videoObjectTrackingModelMetadata;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Model model = (Model) o;
    return Objects.equals(this.createTime, model.createTime) &&
        Objects.equals(this.datasetId, model.datasetId) &&
        Objects.equals(this.deploymentState, model.deploymentState) &&
        Objects.equals(this.displayName, model.displayName) &&
        Objects.equals(this.imageClassificationModelMetadata, model.imageClassificationModelMetadata) &&
        Objects.equals(this.imageObjectDetectionModelMetadata, model.imageObjectDetectionModelMetadata) &&
        Objects.equals(this.name, model.name) &&
        Objects.equals(this.tablesModelMetadata, model.tablesModelMetadata) &&
        Objects.equals(this.textClassificationModelMetadata, model.textClassificationModelMetadata) &&
        Objects.equals(this.textExtractionModelMetadata, model.textExtractionModelMetadata) &&
        Objects.equals(this.textSentimentModelMetadata, model.textSentimentModelMetadata) &&
        Objects.equals(this.trainExampleCount, model.trainExampleCount) &&
        Objects.equals(this.translationModelMetadata, model.translationModelMetadata) &&
        Objects.equals(this.updateTime, model.updateTime) &&
        Objects.equals(this.validateExampleCount, model.validateExampleCount) &&
        Objects.equals(this.videoClassificationModelMetadata, model.videoClassificationModelMetadata) &&
        Objects.equals(this.videoObjectTrackingModelMetadata, model.videoObjectTrackingModelMetadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, datasetId, deploymentState, displayName, imageClassificationModelMetadata, imageObjectDetectionModelMetadata, name, tablesModelMetadata, textClassificationModelMetadata, textExtractionModelMetadata, textSentimentModelMetadata, trainExampleCount, translationModelMetadata, updateTime, validateExampleCount, videoClassificationModelMetadata, videoObjectTrackingModelMetadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Model {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    deploymentState: ").append(toIndentedString(deploymentState)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    imageClassificationModelMetadata: ").append(toIndentedString(imageClassificationModelMetadata)).append("\n");
    sb.append("    imageObjectDetectionModelMetadata: ").append(toIndentedString(imageObjectDetectionModelMetadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tablesModelMetadata: ").append(toIndentedString(tablesModelMetadata)).append("\n");
    sb.append("    textClassificationModelMetadata: ").append(toIndentedString(textClassificationModelMetadata)).append("\n");
    sb.append("    textExtractionModelMetadata: ").append(toIndentedString(textExtractionModelMetadata)).append("\n");
    sb.append("    textSentimentModelMetadata: ").append(toIndentedString(textSentimentModelMetadata)).append("\n");
    sb.append("    trainExampleCount: ").append(toIndentedString(trainExampleCount)).append("\n");
    sb.append("    translationModelMetadata: ").append(toIndentedString(translationModelMetadata)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    validateExampleCount: ").append(toIndentedString(validateExampleCount)).append("\n");
    sb.append("    videoClassificationModelMetadata: ").append(toIndentedString(videoClassificationModelMetadata)).append("\n");
    sb.append("    videoObjectTrackingModelMetadata: ").append(toIndentedString(videoObjectTrackingModelMetadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("datasetId");
    openapiFields.add("deploymentState");
    openapiFields.add("displayName");
    openapiFields.add("imageClassificationModelMetadata");
    openapiFields.add("imageObjectDetectionModelMetadata");
    openapiFields.add("name");
    openapiFields.add("tablesModelMetadata");
    openapiFields.add("textClassificationModelMetadata");
    openapiFields.add("textExtractionModelMetadata");
    openapiFields.add("textSentimentModelMetadata");
    openapiFields.add("trainExampleCount");
    openapiFields.add("translationModelMetadata");
    openapiFields.add("updateTime");
    openapiFields.add("validateExampleCount");
    openapiFields.add("videoClassificationModelMetadata");
    openapiFields.add("videoObjectTrackingModelMetadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Model
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Model.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Model is not found in the empty JSON string", Model.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Model.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Model` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("datasetId") != null && !jsonObj.get("datasetId").isJsonNull()) && !jsonObj.get("datasetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datasetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datasetId").toString()));
      }
      if ((jsonObj.get("deploymentState") != null && !jsonObj.get("deploymentState").isJsonNull()) && !jsonObj.get("deploymentState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deploymentState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deploymentState").toString()));
      }
      // validate the optional field `deploymentState`
      if (jsonObj.get("deploymentState") != null && !jsonObj.get("deploymentState").isJsonNull()) {
        DeploymentStateEnum.validateJsonElement(jsonObj.get("deploymentState"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `imageClassificationModelMetadata`
      if (jsonObj.get("imageClassificationModelMetadata") != null && !jsonObj.get("imageClassificationModelMetadata").isJsonNull()) {
        ImageClassificationModelMetadata.validateJsonElement(jsonObj.get("imageClassificationModelMetadata"));
      }
      // validate the optional field `imageObjectDetectionModelMetadata`
      if (jsonObj.get("imageObjectDetectionModelMetadata") != null && !jsonObj.get("imageObjectDetectionModelMetadata").isJsonNull()) {
        ImageObjectDetectionModelMetadata.validateJsonElement(jsonObj.get("imageObjectDetectionModelMetadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `tablesModelMetadata`
      if (jsonObj.get("tablesModelMetadata") != null && !jsonObj.get("tablesModelMetadata").isJsonNull()) {
        TablesModelMetadata.validateJsonElement(jsonObj.get("tablesModelMetadata"));
      }
      // validate the optional field `textClassificationModelMetadata`
      if (jsonObj.get("textClassificationModelMetadata") != null && !jsonObj.get("textClassificationModelMetadata").isJsonNull()) {
        TextClassificationModelMetadata.validateJsonElement(jsonObj.get("textClassificationModelMetadata"));
      }
      // validate the optional field `textExtractionModelMetadata`
      if (jsonObj.get("textExtractionModelMetadata") != null && !jsonObj.get("textExtractionModelMetadata").isJsonNull()) {
        TextExtractionModelMetadata.validateJsonElement(jsonObj.get("textExtractionModelMetadata"));
      }
      // validate the optional field `translationModelMetadata`
      if (jsonObj.get("translationModelMetadata") != null && !jsonObj.get("translationModelMetadata").isJsonNull()) {
        TranslationModelMetadata.validateJsonElement(jsonObj.get("translationModelMetadata"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Model.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Model' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Model> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Model.class));

       return (TypeAdapter<T>) new TypeAdapter<Model>() {
           @Override
           public void write(JsonWriter out, Model value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Model read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Model given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Model
   * @throws IOException if the JSON string is invalid with respect to Model
   */
  public static Model fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Model.class);
  }

  /**
   * Convert an instance of Model to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

