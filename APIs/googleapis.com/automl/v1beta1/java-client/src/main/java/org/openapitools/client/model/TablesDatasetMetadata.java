/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CorrelationStats;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for a dataset used for AutoML Tables.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TablesDatasetMetadata {
  public static final String SERIALIZED_NAME_ML_USE_COLUMN_SPEC_ID = "mlUseColumnSpecId";
  @SerializedName(SERIALIZED_NAME_ML_USE_COLUMN_SPEC_ID)
  private String mlUseColumnSpecId;

  public static final String SERIALIZED_NAME_PRIMARY_TABLE_SPEC_ID = "primaryTableSpecId";
  @SerializedName(SERIALIZED_NAME_PRIMARY_TABLE_SPEC_ID)
  private String primaryTableSpecId;

  public static final String SERIALIZED_NAME_STATS_UPDATE_TIME = "statsUpdateTime";
  @SerializedName(SERIALIZED_NAME_STATS_UPDATE_TIME)
  private String statsUpdateTime;

  public static final String SERIALIZED_NAME_TARGET_COLUMN_CORRELATIONS = "targetColumnCorrelations";
  @SerializedName(SERIALIZED_NAME_TARGET_COLUMN_CORRELATIONS)
  private Map<String, CorrelationStats> targetColumnCorrelations = new HashMap<>();

  public static final String SERIALIZED_NAME_TARGET_COLUMN_SPEC_ID = "targetColumnSpecId";
  @SerializedName(SERIALIZED_NAME_TARGET_COLUMN_SPEC_ID)
  private String targetColumnSpecId;

  public static final String SERIALIZED_NAME_WEIGHT_COLUMN_SPEC_ID = "weightColumnSpecId";
  @SerializedName(SERIALIZED_NAME_WEIGHT_COLUMN_SPEC_ID)
  private String weightColumnSpecId;

  public TablesDatasetMetadata() {
  }

  public TablesDatasetMetadata mlUseColumnSpecId(String mlUseColumnSpecId) {
    this.mlUseColumnSpecId = mlUseColumnSpecId;
    return this;
  }

  /**
   * column_spec_id of the primary table column which specifies a possible ML use of the row, i.e. the column will be used to split the rows into TRAIN, VALIDATE and TEST sets. Required type: STRING. This column, if set, must either have all of &#x60;TRAIN&#x60;, &#x60;VALIDATE&#x60;, &#x60;TEST&#x60; among its values, or only have &#x60;TEST&#x60;, &#x60;UNASSIGNED&#x60; values. In the latter case the rows with &#x60;UNASSIGNED&#x60; value will be assigned by AutoML. Note that if a given ml use distribution makes it impossible to create a \&quot;good\&quot; model, that call will error describing the issue. If both this column_spec_id and primary table&#39;s time_column_spec_id are not set, then all rows are treated as &#x60;UNASSIGNED&#x60;. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
   * @return mlUseColumnSpecId
   */
  @javax.annotation.Nullable
  public String getMlUseColumnSpecId() {
    return mlUseColumnSpecId;
  }

  public void setMlUseColumnSpecId(String mlUseColumnSpecId) {
    this.mlUseColumnSpecId = mlUseColumnSpecId;
  }


  public TablesDatasetMetadata primaryTableSpecId(String primaryTableSpecId) {
    this.primaryTableSpecId = primaryTableSpecId;
    return this;
  }

  /**
   * Output only. The table_spec_id of the primary table of this dataset.
   * @return primaryTableSpecId
   */
  @javax.annotation.Nullable
  public String getPrimaryTableSpecId() {
    return primaryTableSpecId;
  }

  public void setPrimaryTableSpecId(String primaryTableSpecId) {
    this.primaryTableSpecId = primaryTableSpecId;
  }


  public TablesDatasetMetadata statsUpdateTime(String statsUpdateTime) {
    this.statsUpdateTime = statsUpdateTime;
    return this;
  }

  /**
   * Output only. The most recent timestamp when target_column_correlations field and all descendant ColumnSpec.data_stats and ColumnSpec.top_correlated_columns fields were last (re-)generated. Any changes that happened to the dataset afterwards are not reflected in these fields values. The regeneration happens in the background on a best effort basis.
   * @return statsUpdateTime
   */
  @javax.annotation.Nullable
  public String getStatsUpdateTime() {
    return statsUpdateTime;
  }

  public void setStatsUpdateTime(String statsUpdateTime) {
    this.statsUpdateTime = statsUpdateTime;
  }


  public TablesDatasetMetadata targetColumnCorrelations(Map<String, CorrelationStats> targetColumnCorrelations) {
    this.targetColumnCorrelations = targetColumnCorrelations;
    return this;
  }

  public TablesDatasetMetadata putTargetColumnCorrelationsItem(String key, CorrelationStats targetColumnCorrelationsItem) {
    if (this.targetColumnCorrelations == null) {
      this.targetColumnCorrelations = new HashMap<>();
    }
    this.targetColumnCorrelations.put(key, targetColumnCorrelationsItem);
    return this;
  }

  /**
   * Output only. Correlations between TablesDatasetMetadata.target_column_spec_id, and other columns of the TablesDatasetMetadataprimary_table. Only set if the target column is set. Mapping from other column spec id to its CorrelationStats with the target column. This field may be stale, see the stats_update_time field for for the timestamp at which these stats were last updated.
   * @return targetColumnCorrelations
   */
  @javax.annotation.Nullable
  public Map<String, CorrelationStats> getTargetColumnCorrelations() {
    return targetColumnCorrelations;
  }

  public void setTargetColumnCorrelations(Map<String, CorrelationStats> targetColumnCorrelations) {
    this.targetColumnCorrelations = targetColumnCorrelations;
  }


  public TablesDatasetMetadata targetColumnSpecId(String targetColumnSpecId) {
    this.targetColumnSpecId = targetColumnSpecId;
    return this;
  }

  /**
   * column_spec_id of the primary table&#39;s column that should be used as the training &amp; prediction target. This column must be non-nullable and have one of following data types (otherwise model creation will error): * CATEGORY * FLOAT64 If the type is CATEGORY , only up to 100 unique values may exist in that column across all rows. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
   * @return targetColumnSpecId
   */
  @javax.annotation.Nullable
  public String getTargetColumnSpecId() {
    return targetColumnSpecId;
  }

  public void setTargetColumnSpecId(String targetColumnSpecId) {
    this.targetColumnSpecId = targetColumnSpecId;
  }


  public TablesDatasetMetadata weightColumnSpecId(String weightColumnSpecId) {
    this.weightColumnSpecId = weightColumnSpecId;
    return this;
  }

  /**
   * column_spec_id of the primary table&#39;s column that should be used as the weight column, i.e. the higher the value the more important the row will be during model training. Required type: FLOAT64. Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is ignored for training. If not set all rows are assumed to have equal weight of 1. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
   * @return weightColumnSpecId
   */
  @javax.annotation.Nullable
  public String getWeightColumnSpecId() {
    return weightColumnSpecId;
  }

  public void setWeightColumnSpecId(String weightColumnSpecId) {
    this.weightColumnSpecId = weightColumnSpecId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TablesDatasetMetadata tablesDatasetMetadata = (TablesDatasetMetadata) o;
    return Objects.equals(this.mlUseColumnSpecId, tablesDatasetMetadata.mlUseColumnSpecId) &&
        Objects.equals(this.primaryTableSpecId, tablesDatasetMetadata.primaryTableSpecId) &&
        Objects.equals(this.statsUpdateTime, tablesDatasetMetadata.statsUpdateTime) &&
        Objects.equals(this.targetColumnCorrelations, tablesDatasetMetadata.targetColumnCorrelations) &&
        Objects.equals(this.targetColumnSpecId, tablesDatasetMetadata.targetColumnSpecId) &&
        Objects.equals(this.weightColumnSpecId, tablesDatasetMetadata.weightColumnSpecId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mlUseColumnSpecId, primaryTableSpecId, statsUpdateTime, targetColumnCorrelations, targetColumnSpecId, weightColumnSpecId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TablesDatasetMetadata {\n");
    sb.append("    mlUseColumnSpecId: ").append(toIndentedString(mlUseColumnSpecId)).append("\n");
    sb.append("    primaryTableSpecId: ").append(toIndentedString(primaryTableSpecId)).append("\n");
    sb.append("    statsUpdateTime: ").append(toIndentedString(statsUpdateTime)).append("\n");
    sb.append("    targetColumnCorrelations: ").append(toIndentedString(targetColumnCorrelations)).append("\n");
    sb.append("    targetColumnSpecId: ").append(toIndentedString(targetColumnSpecId)).append("\n");
    sb.append("    weightColumnSpecId: ").append(toIndentedString(weightColumnSpecId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mlUseColumnSpecId");
    openapiFields.add("primaryTableSpecId");
    openapiFields.add("statsUpdateTime");
    openapiFields.add("targetColumnCorrelations");
    openapiFields.add("targetColumnSpecId");
    openapiFields.add("weightColumnSpecId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TablesDatasetMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TablesDatasetMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TablesDatasetMetadata is not found in the empty JSON string", TablesDatasetMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TablesDatasetMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TablesDatasetMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("mlUseColumnSpecId") != null && !jsonObj.get("mlUseColumnSpecId").isJsonNull()) && !jsonObj.get("mlUseColumnSpecId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mlUseColumnSpecId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mlUseColumnSpecId").toString()));
      }
      if ((jsonObj.get("primaryTableSpecId") != null && !jsonObj.get("primaryTableSpecId").isJsonNull()) && !jsonObj.get("primaryTableSpecId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryTableSpecId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryTableSpecId").toString()));
      }
      if ((jsonObj.get("statsUpdateTime") != null && !jsonObj.get("statsUpdateTime").isJsonNull()) && !jsonObj.get("statsUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statsUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statsUpdateTime").toString()));
      }
      if ((jsonObj.get("targetColumnSpecId") != null && !jsonObj.get("targetColumnSpecId").isJsonNull()) && !jsonObj.get("targetColumnSpecId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetColumnSpecId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetColumnSpecId").toString()));
      }
      if ((jsonObj.get("weightColumnSpecId") != null && !jsonObj.get("weightColumnSpecId").isJsonNull()) && !jsonObj.get("weightColumnSpecId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `weightColumnSpecId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("weightColumnSpecId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TablesDatasetMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TablesDatasetMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TablesDatasetMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TablesDatasetMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<TablesDatasetMetadata>() {
           @Override
           public void write(JsonWriter out, TablesDatasetMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TablesDatasetMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TablesDatasetMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TablesDatasetMetadata
   * @throws IOException if the JSON string is invalid with respect to TablesDatasetMetadata
   */
  public static TablesDatasetMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TablesDatasetMetadata.class);
  }

  /**
   * Convert an instance of TablesDatasetMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

