/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CorrelatedColumn;
import org.openapitools.client.model.DataStats;
import org.openapitools.client.model.DataType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were given on import . Used by: * Tables
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ColumnSpec {
  public static final String SERIALIZED_NAME_DATA_STATS = "dataStats";
  @SerializedName(SERIALIZED_NAME_DATA_STATS)
  private DataStats dataStats;

  public static final String SERIALIZED_NAME_DATA_TYPE = "dataType";
  @SerializedName(SERIALIZED_NAME_DATA_TYPE)
  private DataType dataType;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TOP_CORRELATED_COLUMNS = "topCorrelatedColumns";
  @SerializedName(SERIALIZED_NAME_TOP_CORRELATED_COLUMNS)
  private List<CorrelatedColumn> topCorrelatedColumns = new ArrayList<>();

  public ColumnSpec() {
  }

  public ColumnSpec dataStats(DataStats dataStats) {
    this.dataStats = dataStats;
    return this;
  }

  /**
   * Get dataStats
   * @return dataStats
   */
  @javax.annotation.Nullable
  public DataStats getDataStats() {
    return dataStats;
  }

  public void setDataStats(DataStats dataStats) {
    this.dataStats = dataStats;
  }


  public ColumnSpec dataType(DataType dataType) {
    this.dataType = dataType;
    return this;
  }

  /**
   * Get dataType
   * @return dataType
   */
  @javax.annotation.Nullable
  public DataType getDataType() {
    return dataType;
  }

  public void setDataType(DataType dataType) {
    this.dataType = dataType;
  }


  public ColumnSpec displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ColumnSpec etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Used to perform consistent read-modify-write updates. If not set, a blind \&quot;overwrite\&quot; update happens.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public ColumnSpec name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The resource name of the column specs. Form: &#x60;projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ColumnSpec topCorrelatedColumns(List<CorrelatedColumn> topCorrelatedColumns) {
    this.topCorrelatedColumns = topCorrelatedColumns;
    return this;
  }

  public ColumnSpec addTopCorrelatedColumnsItem(CorrelatedColumn topCorrelatedColumnsItem) {
    if (this.topCorrelatedColumns == null) {
      this.topCorrelatedColumns = new ArrayList<>();
    }
    this.topCorrelatedColumns.add(topCorrelatedColumnsItem);
    return this;
  }

  /**
   * Deprecated.
   * @return topCorrelatedColumns
   */
  @javax.annotation.Nullable
  public List<CorrelatedColumn> getTopCorrelatedColumns() {
    return topCorrelatedColumns;
  }

  public void setTopCorrelatedColumns(List<CorrelatedColumn> topCorrelatedColumns) {
    this.topCorrelatedColumns = topCorrelatedColumns;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ColumnSpec columnSpec = (ColumnSpec) o;
    return Objects.equals(this.dataStats, columnSpec.dataStats) &&
        Objects.equals(this.dataType, columnSpec.dataType) &&
        Objects.equals(this.displayName, columnSpec.displayName) &&
        Objects.equals(this.etag, columnSpec.etag) &&
        Objects.equals(this.name, columnSpec.name) &&
        Objects.equals(this.topCorrelatedColumns, columnSpec.topCorrelatedColumns);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataStats, dataType, displayName, etag, name, topCorrelatedColumns);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ColumnSpec {\n");
    sb.append("    dataStats: ").append(toIndentedString(dataStats)).append("\n");
    sb.append("    dataType: ").append(toIndentedString(dataType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    topCorrelatedColumns: ").append(toIndentedString(topCorrelatedColumns)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataStats");
    openapiFields.add("dataType");
    openapiFields.add("displayName");
    openapiFields.add("etag");
    openapiFields.add("name");
    openapiFields.add("topCorrelatedColumns");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ColumnSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ColumnSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ColumnSpec is not found in the empty JSON string", ColumnSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ColumnSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ColumnSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dataStats`
      if (jsonObj.get("dataStats") != null && !jsonObj.get("dataStats").isJsonNull()) {
        DataStats.validateJsonElement(jsonObj.get("dataStats"));
      }
      // validate the optional field `dataType`
      if (jsonObj.get("dataType") != null && !jsonObj.get("dataType").isJsonNull()) {
        DataType.validateJsonElement(jsonObj.get("dataType"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("topCorrelatedColumns") != null && !jsonObj.get("topCorrelatedColumns").isJsonNull()) {
        JsonArray jsonArraytopCorrelatedColumns = jsonObj.getAsJsonArray("topCorrelatedColumns");
        if (jsonArraytopCorrelatedColumns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topCorrelatedColumns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topCorrelatedColumns` to be an array in the JSON string but got `%s`", jsonObj.get("topCorrelatedColumns").toString()));
          }

          // validate the optional field `topCorrelatedColumns` (array)
          for (int i = 0; i < jsonArraytopCorrelatedColumns.size(); i++) {
            CorrelatedColumn.validateJsonElement(jsonArraytopCorrelatedColumns.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ColumnSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ColumnSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ColumnSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ColumnSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ColumnSpec>() {
           @Override
           public void write(JsonWriter out, ColumnSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ColumnSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ColumnSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ColumnSpec
   * @throws IOException if the JSON string is invalid with respect to ColumnSpec
   */
  public static ColumnSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ColumnSpec.class);
  }

  /**
   * Convert an instance of ColumnSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

