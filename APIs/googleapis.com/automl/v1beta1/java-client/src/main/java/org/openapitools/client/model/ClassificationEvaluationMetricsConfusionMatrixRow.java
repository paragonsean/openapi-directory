/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output only. A row in the confusion matrix.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClassificationEvaluationMetricsConfusionMatrixRow {
  public static final String SERIALIZED_NAME_EXAMPLE_COUNT = "exampleCount";
  @SerializedName(SERIALIZED_NAME_EXAMPLE_COUNT)
  private List<Integer> exampleCount = new ArrayList<>();

  public ClassificationEvaluationMetricsConfusionMatrixRow() {
  }

  public ClassificationEvaluationMetricsConfusionMatrixRow exampleCount(List<Integer> exampleCount) {
    this.exampleCount = exampleCount;
    return this;
  }

  public ClassificationEvaluationMetricsConfusionMatrixRow addExampleCountItem(Integer exampleCountItem) {
    if (this.exampleCount == null) {
      this.exampleCount = new ArrayList<>();
    }
    this.exampleCount.add(exampleCountItem);
    return this;
  }

  /**
   * Output only. Value of the specific cell in the confusion matrix. The number of values each row has (i.e. the length of the row) is equal to the length of the &#x60;annotation_spec_id&#x60; field or, if that one is not populated, length of the display_name field.
   * @return exampleCount
   */
  @javax.annotation.Nullable
  public List<Integer> getExampleCount() {
    return exampleCount;
  }

  public void setExampleCount(List<Integer> exampleCount) {
    this.exampleCount = exampleCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClassificationEvaluationMetricsConfusionMatrixRow classificationEvaluationMetricsConfusionMatrixRow = (ClassificationEvaluationMetricsConfusionMatrixRow) o;
    return Objects.equals(this.exampleCount, classificationEvaluationMetricsConfusionMatrixRow.exampleCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exampleCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClassificationEvaluationMetricsConfusionMatrixRow {\n");
    sb.append("    exampleCount: ").append(toIndentedString(exampleCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exampleCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClassificationEvaluationMetricsConfusionMatrixRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClassificationEvaluationMetricsConfusionMatrixRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClassificationEvaluationMetricsConfusionMatrixRow is not found in the empty JSON string", ClassificationEvaluationMetricsConfusionMatrixRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClassificationEvaluationMetricsConfusionMatrixRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClassificationEvaluationMetricsConfusionMatrixRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("exampleCount") != null && !jsonObj.get("exampleCount").isJsonNull() && !jsonObj.get("exampleCount").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exampleCount` to be an array in the JSON string but got `%s`", jsonObj.get("exampleCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClassificationEvaluationMetricsConfusionMatrixRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClassificationEvaluationMetricsConfusionMatrixRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClassificationEvaluationMetricsConfusionMatrixRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClassificationEvaluationMetricsConfusionMatrixRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ClassificationEvaluationMetricsConfusionMatrixRow>() {
           @Override
           public void write(JsonWriter out, ClassificationEvaluationMetricsConfusionMatrixRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClassificationEvaluationMetricsConfusionMatrixRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClassificationEvaluationMetricsConfusionMatrixRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClassificationEvaluationMetricsConfusionMatrixRow
   * @throws IOException if the JSON string is invalid with respect to ClassificationEvaluationMetricsConfusionMatrixRow
   */
  public static ClassificationEvaluationMetricsConfusionMatrixRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClassificationEvaluationMetricsConfusionMatrixRow.class);
  }

  /**
   * Convert an instance of ClassificationEvaluationMetricsConfusionMatrixRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

