/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.GcrDestination;
import org.openapitools.client.model.GcsDestination;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output configuration for ModelExport Action.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ModelExportOutputConfig {
  public static final String SERIALIZED_NAME_GCR_DESTINATION = "gcrDestination";
  @SerializedName(SERIALIZED_NAME_GCR_DESTINATION)
  private GcrDestination gcrDestination;

  public static final String SERIALIZED_NAME_GCS_DESTINATION = "gcsDestination";
  @SerializedName(SERIALIZED_NAME_GCS_DESTINATION)
  private GcsDestination gcsDestination;

  public static final String SERIALIZED_NAME_MODEL_FORMAT = "modelFormat";
  @SerializedName(SERIALIZED_NAME_MODEL_FORMAT)
  private String modelFormat;

  public static final String SERIALIZED_NAME_PARAMS = "params";
  @SerializedName(SERIALIZED_NAME_PARAMS)
  private Map<String, String> params = new HashMap<>();

  public ModelExportOutputConfig() {
  }

  public ModelExportOutputConfig gcrDestination(GcrDestination gcrDestination) {
    this.gcrDestination = gcrDestination;
    return this;
  }

  /**
   * Get gcrDestination
   * @return gcrDestination
   */
  @javax.annotation.Nullable
  public GcrDestination getGcrDestination() {
    return gcrDestination;
  }

  public void setGcrDestination(GcrDestination gcrDestination) {
    this.gcrDestination = gcrDestination;
  }


  public ModelExportOutputConfig gcsDestination(GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
    return this;
  }

  /**
   * Get gcsDestination
   * @return gcsDestination
   */
  @javax.annotation.Nullable
  public GcsDestination getGcsDestination() {
    return gcsDestination;
  }

  public void setGcsDestination(GcsDestination gcsDestination) {
    this.gcsDestination = gcsDestination;
  }


  public ModelExportOutputConfig modelFormat(String modelFormat) {
    this.modelFormat = modelFormat;
    return this;
  }

  /**
   * The format in which the model must be exported. The available, and default, formats depend on the problem and model type (if given problem and type combination doesn&#39;t have a format listed, it means its models are not exportable): * For Image Classification mobile-low-latency-1, mobile-versatile-1, mobile-high-accuracy-1: \&quot;tflite\&quot; (default), \&quot;edgetpu_tflite\&quot;, \&quot;tf_saved_model\&quot;, \&quot;tf_js\&quot;, \&quot;docker\&quot;. * For Image Classification mobile-core-ml-low-latency-1, mobile-core-ml-versatile-1, mobile-core-ml-high-accuracy-1: \&quot;core_ml\&quot; (default). * For Image Object Detection mobile-low-latency-1, mobile-versatile-1, mobile-high-accuracy-1: \&quot;tflite\&quot;, \&quot;tf_saved_model\&quot;, \&quot;tf_js\&quot;. * For Video Classification cloud, \&quot;tf_saved_model\&quot;. * For Video Object Tracking cloud, \&quot;tf_saved_model\&quot;. * For Video Object Tracking mobile-versatile-1: \&quot;tflite\&quot;, \&quot;edgetpu_tflite\&quot;, \&quot;tf_saved_model\&quot;, \&quot;docker\&quot;. * For Video Object Tracking mobile-coral-versatile-1: \&quot;tflite\&quot;, \&quot;edgetpu_tflite\&quot;, \&quot;docker\&quot;. * For Video Object Tracking mobile-coral-low-latency-1: \&quot;tflite\&quot;, \&quot;edgetpu_tflite\&quot;, \&quot;docker\&quot;. * For Video Object Tracking mobile-jetson-versatile-1: \&quot;tf_saved_model\&quot;, \&quot;docker\&quot;. * For Tables: \&quot;docker\&quot;. Formats description: * tflite - Used for Android mobile devices. * edgetpu_tflite - Used for [Edge TPU](https://cloud.google.com/edge-tpu/) devices. * tf_saved_model - A tensorflow model in SavedModel format. * tf_js - A [TensorFlow.js](https://www.tensorflow.org/js) model that can be used in the browser and in Node.js using JavaScript. * docker - Used for Docker containers. Use the params field to customize the container. The container is verified to work correctly on ubuntu 16.04 operating system. See more at [containers quickstart](https: //cloud.google.com/vision/automl/docs/containers-gcs-quickstart) * core_ml - Used for iOS mobile devices.
   * @return modelFormat
   */
  @javax.annotation.Nullable
  public String getModelFormat() {
    return modelFormat;
  }

  public void setModelFormat(String modelFormat) {
    this.modelFormat = modelFormat;
  }


  public ModelExportOutputConfig params(Map<String, String> params) {
    this.params = params;
    return this;
  }

  public ModelExportOutputConfig putParamsItem(String key, String paramsItem) {
    if (this.params == null) {
      this.params = new HashMap<>();
    }
    this.params.put(key, paramsItem);
    return this;
  }

  /**
   * Additional model-type and format specific parameters describing the requirements for the to be exported model files, any string must be up to 25000 characters long. * For &#x60;docker&#x60; format: &#x60;cpu_architecture&#x60; - (string) \&quot;x86_64\&quot; (default). &#x60;gpu_architecture&#x60; - (string) \&quot;none\&quot; (default), \&quot;nvidia\&quot;.
   * @return params
   */
  @javax.annotation.Nullable
  public Map<String, String> getParams() {
    return params;
  }

  public void setParams(Map<String, String> params) {
    this.params = params;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelExportOutputConfig modelExportOutputConfig = (ModelExportOutputConfig) o;
    return Objects.equals(this.gcrDestination, modelExportOutputConfig.gcrDestination) &&
        Objects.equals(this.gcsDestination, modelExportOutputConfig.gcsDestination) &&
        Objects.equals(this.modelFormat, modelExportOutputConfig.modelFormat) &&
        Objects.equals(this.params, modelExportOutputConfig.params);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gcrDestination, gcsDestination, modelFormat, params);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelExportOutputConfig {\n");
    sb.append("    gcrDestination: ").append(toIndentedString(gcrDestination)).append("\n");
    sb.append("    gcsDestination: ").append(toIndentedString(gcsDestination)).append("\n");
    sb.append("    modelFormat: ").append(toIndentedString(modelFormat)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gcrDestination");
    openapiFields.add("gcsDestination");
    openapiFields.add("modelFormat");
    openapiFields.add("params");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelExportOutputConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelExportOutputConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelExportOutputConfig is not found in the empty JSON string", ModelExportOutputConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelExportOutputConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelExportOutputConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `gcrDestination`
      if (jsonObj.get("gcrDestination") != null && !jsonObj.get("gcrDestination").isJsonNull()) {
        GcrDestination.validateJsonElement(jsonObj.get("gcrDestination"));
      }
      // validate the optional field `gcsDestination`
      if (jsonObj.get("gcsDestination") != null && !jsonObj.get("gcsDestination").isJsonNull()) {
        GcsDestination.validateJsonElement(jsonObj.get("gcsDestination"));
      }
      if ((jsonObj.get("modelFormat") != null && !jsonObj.get("modelFormat").isJsonNull()) && !jsonObj.get("modelFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modelFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modelFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelExportOutputConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelExportOutputConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelExportOutputConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelExportOutputConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelExportOutputConfig>() {
           @Override
           public void write(JsonWriter out, ModelExportOutputConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelExportOutputConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelExportOutputConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelExportOutputConfig
   * @throws IOException if the JSON string is invalid with respect to ModelExportOutputConfig
   */
  public static ModelExportOutputConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelExportOutputConfig.class);
  }

  /**
   * Convert an instance of ModelExportOutputConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

