/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfusionMatrix;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Model evaluation metrics for text sentiment problems.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TextSentimentEvaluationMetrics {
  public static final String SERIALIZED_NAME_ANNOTATION_SPEC_ID = "annotationSpecId";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SPEC_ID)
  private List<String> annotationSpecId = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONFUSION_MATRIX = "confusionMatrix";
  @SerializedName(SERIALIZED_NAME_CONFUSION_MATRIX)
  private ConfusionMatrix confusionMatrix;

  public static final String SERIALIZED_NAME_F1_SCORE = "f1Score";
  @SerializedName(SERIALIZED_NAME_F1_SCORE)
  private Float f1Score;

  public static final String SERIALIZED_NAME_LINEAR_KAPPA = "linearKappa";
  @SerializedName(SERIALIZED_NAME_LINEAR_KAPPA)
  private Float linearKappa;

  public static final String SERIALIZED_NAME_MEAN_ABSOLUTE_ERROR = "meanAbsoluteError";
  @SerializedName(SERIALIZED_NAME_MEAN_ABSOLUTE_ERROR)
  private Float meanAbsoluteError;

  public static final String SERIALIZED_NAME_MEAN_SQUARED_ERROR = "meanSquaredError";
  @SerializedName(SERIALIZED_NAME_MEAN_SQUARED_ERROR)
  private Float meanSquaredError;

  public static final String SERIALIZED_NAME_PRECISION = "precision";
  @SerializedName(SERIALIZED_NAME_PRECISION)
  private Float precision;

  public static final String SERIALIZED_NAME_QUADRATIC_KAPPA = "quadraticKappa";
  @SerializedName(SERIALIZED_NAME_QUADRATIC_KAPPA)
  private Float quadraticKappa;

  public static final String SERIALIZED_NAME_RECALL = "recall";
  @SerializedName(SERIALIZED_NAME_RECALL)
  private Float recall;

  public TextSentimentEvaluationMetrics() {
  }

  @Deprecated
  public TextSentimentEvaluationMetrics annotationSpecId(List<String> annotationSpecId) {
    this.annotationSpecId = annotationSpecId;
    return this;
  }

  public TextSentimentEvaluationMetrics addAnnotationSpecIdItem(String annotationSpecIdItem) {
    if (this.annotationSpecId == null) {
      this.annotationSpecId = new ArrayList<>();
    }
    this.annotationSpecId.add(annotationSpecIdItem);
    return this;
  }

  /**
   * Output only. The annotation spec ids used for this evaluation. Deprecated .
   * @return annotationSpecId
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<String> getAnnotationSpecId() {
    return annotationSpecId;
  }

  @Deprecated
  public void setAnnotationSpecId(List<String> annotationSpecId) {
    this.annotationSpecId = annotationSpecId;
  }


  public TextSentimentEvaluationMetrics confusionMatrix(ConfusionMatrix confusionMatrix) {
    this.confusionMatrix = confusionMatrix;
    return this;
  }

  /**
   * Get confusionMatrix
   * @return confusionMatrix
   */
  @javax.annotation.Nullable
  public ConfusionMatrix getConfusionMatrix() {
    return confusionMatrix;
  }

  public void setConfusionMatrix(ConfusionMatrix confusionMatrix) {
    this.confusionMatrix = confusionMatrix;
  }


  public TextSentimentEvaluationMetrics f1Score(Float f1Score) {
    this.f1Score = f1Score;
    return this;
  }

  /**
   * Output only. The harmonic mean of recall and precision.
   * @return f1Score
   */
  @javax.annotation.Nullable
  public Float getF1Score() {
    return f1Score;
  }

  public void setF1Score(Float f1Score) {
    this.f1Score = f1Score;
  }


  public TextSentimentEvaluationMetrics linearKappa(Float linearKappa) {
    this.linearKappa = linearKappa;
    return this;
  }

  /**
   * Output only. Linear weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
   * @return linearKappa
   */
  @javax.annotation.Nullable
  public Float getLinearKappa() {
    return linearKappa;
  }

  public void setLinearKappa(Float linearKappa) {
    this.linearKappa = linearKappa;
  }


  public TextSentimentEvaluationMetrics meanAbsoluteError(Float meanAbsoluteError) {
    this.meanAbsoluteError = meanAbsoluteError;
    return this;
  }

  /**
   * Output only. Mean absolute error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
   * @return meanAbsoluteError
   */
  @javax.annotation.Nullable
  public Float getMeanAbsoluteError() {
    return meanAbsoluteError;
  }

  public void setMeanAbsoluteError(Float meanAbsoluteError) {
    this.meanAbsoluteError = meanAbsoluteError;
  }


  public TextSentimentEvaluationMetrics meanSquaredError(Float meanSquaredError) {
    this.meanSquaredError = meanSquaredError;
    return this;
  }

  /**
   * Output only. Mean squared error. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
   * @return meanSquaredError
   */
  @javax.annotation.Nullable
  public Float getMeanSquaredError() {
    return meanSquaredError;
  }

  public void setMeanSquaredError(Float meanSquaredError) {
    this.meanSquaredError = meanSquaredError;
  }


  public TextSentimentEvaluationMetrics precision(Float precision) {
    this.precision = precision;
    return this;
  }

  /**
   * Output only. Precision.
   * @return precision
   */
  @javax.annotation.Nullable
  public Float getPrecision() {
    return precision;
  }

  public void setPrecision(Float precision) {
    this.precision = precision;
  }


  public TextSentimentEvaluationMetrics quadraticKappa(Float quadraticKappa) {
    this.quadraticKappa = quadraticKappa;
    return this;
  }

  /**
   * Output only. Quadratic weighted kappa. Only set for the overall model evaluation, not for evaluation of a single annotation spec.
   * @return quadraticKappa
   */
  @javax.annotation.Nullable
  public Float getQuadraticKappa() {
    return quadraticKappa;
  }

  public void setQuadraticKappa(Float quadraticKappa) {
    this.quadraticKappa = quadraticKappa;
  }


  public TextSentimentEvaluationMetrics recall(Float recall) {
    this.recall = recall;
    return this;
  }

  /**
   * Output only. Recall.
   * @return recall
   */
  @javax.annotation.Nullable
  public Float getRecall() {
    return recall;
  }

  public void setRecall(Float recall) {
    this.recall = recall;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TextSentimentEvaluationMetrics textSentimentEvaluationMetrics = (TextSentimentEvaluationMetrics) o;
    return Objects.equals(this.annotationSpecId, textSentimentEvaluationMetrics.annotationSpecId) &&
        Objects.equals(this.confusionMatrix, textSentimentEvaluationMetrics.confusionMatrix) &&
        Objects.equals(this.f1Score, textSentimentEvaluationMetrics.f1Score) &&
        Objects.equals(this.linearKappa, textSentimentEvaluationMetrics.linearKappa) &&
        Objects.equals(this.meanAbsoluteError, textSentimentEvaluationMetrics.meanAbsoluteError) &&
        Objects.equals(this.meanSquaredError, textSentimentEvaluationMetrics.meanSquaredError) &&
        Objects.equals(this.precision, textSentimentEvaluationMetrics.precision) &&
        Objects.equals(this.quadraticKappa, textSentimentEvaluationMetrics.quadraticKappa) &&
        Objects.equals(this.recall, textSentimentEvaluationMetrics.recall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSpecId, confusionMatrix, f1Score, linearKappa, meanAbsoluteError, meanSquaredError, precision, quadraticKappa, recall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TextSentimentEvaluationMetrics {\n");
    sb.append("    annotationSpecId: ").append(toIndentedString(annotationSpecId)).append("\n");
    sb.append("    confusionMatrix: ").append(toIndentedString(confusionMatrix)).append("\n");
    sb.append("    f1Score: ").append(toIndentedString(f1Score)).append("\n");
    sb.append("    linearKappa: ").append(toIndentedString(linearKappa)).append("\n");
    sb.append("    meanAbsoluteError: ").append(toIndentedString(meanAbsoluteError)).append("\n");
    sb.append("    meanSquaredError: ").append(toIndentedString(meanSquaredError)).append("\n");
    sb.append("    precision: ").append(toIndentedString(precision)).append("\n");
    sb.append("    quadraticKappa: ").append(toIndentedString(quadraticKappa)).append("\n");
    sb.append("    recall: ").append(toIndentedString(recall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSpecId");
    openapiFields.add("confusionMatrix");
    openapiFields.add("f1Score");
    openapiFields.add("linearKappa");
    openapiFields.add("meanAbsoluteError");
    openapiFields.add("meanSquaredError");
    openapiFields.add("precision");
    openapiFields.add("quadraticKappa");
    openapiFields.add("recall");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TextSentimentEvaluationMetrics
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TextSentimentEvaluationMetrics.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TextSentimentEvaluationMetrics is not found in the empty JSON string", TextSentimentEvaluationMetrics.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TextSentimentEvaluationMetrics.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TextSentimentEvaluationMetrics` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("annotationSpecId") != null && !jsonObj.get("annotationSpecId").isJsonNull() && !jsonObj.get("annotationSpecId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationSpecId` to be an array in the JSON string but got `%s`", jsonObj.get("annotationSpecId").toString()));
      }
      // validate the optional field `confusionMatrix`
      if (jsonObj.get("confusionMatrix") != null && !jsonObj.get("confusionMatrix").isJsonNull()) {
        ConfusionMatrix.validateJsonElement(jsonObj.get("confusionMatrix"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TextSentimentEvaluationMetrics.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TextSentimentEvaluationMetrics' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TextSentimentEvaluationMetrics> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TextSentimentEvaluationMetrics.class));

       return (TypeAdapter<T>) new TypeAdapter<TextSentimentEvaluationMetrics>() {
           @Override
           public void write(JsonWriter out, TextSentimentEvaluationMetrics value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TextSentimentEvaluationMetrics read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TextSentimentEvaluationMetrics given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TextSentimentEvaluationMetrics
   * @throws IOException if the JSON string is invalid with respect to TextSentimentEvaluationMetrics
   */
  public static TextSentimentEvaluationMetrics fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TextSentimentEvaluationMetrics.class);
  }

  /**
   * Convert an instance of TextSentimentEvaluationMetrics to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

