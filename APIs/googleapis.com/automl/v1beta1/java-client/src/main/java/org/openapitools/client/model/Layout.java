/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BoundingPoly;
import org.openapitools.client.model.TextSegment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the layout information of a text_segment in the document.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Layout {
  public static final String SERIALIZED_NAME_BOUNDING_POLY = "boundingPoly";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLY)
  private BoundingPoly boundingPoly;

  public static final String SERIALIZED_NAME_PAGE_NUMBER = "pageNumber";
  @SerializedName(SERIALIZED_NAME_PAGE_NUMBER)
  private Integer pageNumber;

  public static final String SERIALIZED_NAME_TEXT_SEGMENT = "textSegment";
  @SerializedName(SERIALIZED_NAME_TEXT_SEGMENT)
  private TextSegment textSegment;

  /**
   * The type of the text_segment in document.
   */
  @JsonAdapter(TextSegmentTypeEnum.Adapter.class)
  public enum TextSegmentTypeEnum {
    TEXT_SEGMENT_TYPE_UNSPECIFIED("TEXT_SEGMENT_TYPE_UNSPECIFIED"),
    
    TOKEN("TOKEN"),
    
    PARAGRAPH("PARAGRAPH"),
    
    FORM_FIELD("FORM_FIELD"),
    
    FORM_FIELD_NAME("FORM_FIELD_NAME"),
    
    FORM_FIELD_CONTENTS("FORM_FIELD_CONTENTS"),
    
    TABLE("TABLE"),
    
    TABLE_HEADER("TABLE_HEADER"),
    
    TABLE_ROW("TABLE_ROW"),
    
    TABLE_CELL("TABLE_CELL");

    private String value;

    TextSegmentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TextSegmentTypeEnum fromValue(String value) {
      for (TextSegmentTypeEnum b : TextSegmentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TextSegmentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TextSegmentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TextSegmentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TextSegmentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TextSegmentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TEXT_SEGMENT_TYPE = "textSegmentType";
  @SerializedName(SERIALIZED_NAME_TEXT_SEGMENT_TYPE)
  private TextSegmentTypeEnum textSegmentType;

  public Layout() {
  }

  public Layout boundingPoly(BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * Get boundingPoly
   * @return boundingPoly
   */
  @javax.annotation.Nullable
  public BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  public void setBoundingPoly(BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
  }


  public Layout pageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
    return this;
  }

  /**
   * Page number of the text_segment in the original document, starts from 1.
   * @return pageNumber
   */
  @javax.annotation.Nullable
  public Integer getPageNumber() {
    return pageNumber;
  }

  public void setPageNumber(Integer pageNumber) {
    this.pageNumber = pageNumber;
  }


  public Layout textSegment(TextSegment textSegment) {
    this.textSegment = textSegment;
    return this;
  }

  /**
   * Get textSegment
   * @return textSegment
   */
  @javax.annotation.Nullable
  public TextSegment getTextSegment() {
    return textSegment;
  }

  public void setTextSegment(TextSegment textSegment) {
    this.textSegment = textSegment;
  }


  public Layout textSegmentType(TextSegmentTypeEnum textSegmentType) {
    this.textSegmentType = textSegmentType;
    return this;
  }

  /**
   * The type of the text_segment in document.
   * @return textSegmentType
   */
  @javax.annotation.Nullable
  public TextSegmentTypeEnum getTextSegmentType() {
    return textSegmentType;
  }

  public void setTextSegmentType(TextSegmentTypeEnum textSegmentType) {
    this.textSegmentType = textSegmentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Layout layout = (Layout) o;
    return Objects.equals(this.boundingPoly, layout.boundingPoly) &&
        Objects.equals(this.pageNumber, layout.pageNumber) &&
        Objects.equals(this.textSegment, layout.textSegment) &&
        Objects.equals(this.textSegmentType, layout.textSegmentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingPoly, pageNumber, textSegment, textSegmentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Layout {\n");
    sb.append("    boundingPoly: ").append(toIndentedString(boundingPoly)).append("\n");
    sb.append("    pageNumber: ").append(toIndentedString(pageNumber)).append("\n");
    sb.append("    textSegment: ").append(toIndentedString(textSegment)).append("\n");
    sb.append("    textSegmentType: ").append(toIndentedString(textSegmentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingPoly");
    openapiFields.add("pageNumber");
    openapiFields.add("textSegment");
    openapiFields.add("textSegmentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Layout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Layout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Layout is not found in the empty JSON string", Layout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Layout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Layout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boundingPoly`
      if (jsonObj.get("boundingPoly") != null && !jsonObj.get("boundingPoly").isJsonNull()) {
        BoundingPoly.validateJsonElement(jsonObj.get("boundingPoly"));
      }
      // validate the optional field `textSegment`
      if (jsonObj.get("textSegment") != null && !jsonObj.get("textSegment").isJsonNull()) {
        TextSegment.validateJsonElement(jsonObj.get("textSegment"));
      }
      if ((jsonObj.get("textSegmentType") != null && !jsonObj.get("textSegmentType").isJsonNull()) && !jsonObj.get("textSegmentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textSegmentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textSegmentType").toString()));
      }
      // validate the optional field `textSegmentType`
      if (jsonObj.get("textSegmentType") != null && !jsonObj.get("textSegmentType").isJsonNull()) {
        TextSegmentTypeEnum.validateJsonElement(jsonObj.get("textSegmentType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Layout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Layout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Layout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Layout.class));

       return (TypeAdapter<T>) new TypeAdapter<Layout>() {
           @Override
           public void write(JsonWriter out, Layout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Layout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Layout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Layout
   * @throws IOException if the JSON string is invalid with respect to Layout
   */
  public static Layout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Layout.class);
  }

  /**
   * Convert an instance of Layout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

