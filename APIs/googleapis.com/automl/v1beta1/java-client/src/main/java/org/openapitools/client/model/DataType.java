/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.StructType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicated the type of data that can be stored in a structured data entity (e.g. a table).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataType {
  public static final String SERIALIZED_NAME_LIST_ELEMENT_TYPE = "listElementType";
  @SerializedName(SERIALIZED_NAME_LIST_ELEMENT_TYPE)
  private DataType listElementType;

  public static final String SERIALIZED_NAME_NULLABLE = "nullable";
  @SerializedName(SERIALIZED_NAME_NULLABLE)
  private Boolean nullable;

  public static final String SERIALIZED_NAME_STRUCT_TYPE = "structType";
  @SerializedName(SERIALIZED_NAME_STRUCT_TYPE)
  private StructType structType;

  public static final String SERIALIZED_NAME_TIME_FORMAT = "timeFormat";
  @SerializedName(SERIALIZED_NAME_TIME_FORMAT)
  private String timeFormat;

  /**
   * Required. The TypeCode for this type.
   */
  @JsonAdapter(TypeCodeEnum.Adapter.class)
  public enum TypeCodeEnum {
    TYPE_CODE_UNSPECIFIED("TYPE_CODE_UNSPECIFIED"),
    
    FLOAT64("FLOAT64"),
    
    TIMESTAMP("TIMESTAMP"),
    
    STRING("STRING"),
    
    ARRAY("ARRAY"),
    
    STRUCT("STRUCT"),
    
    CATEGORY("CATEGORY");

    private String value;

    TypeCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeCodeEnum fromValue(String value) {
      for (TypeCodeEnum b : TypeCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE_CODE = "typeCode";
  @SerializedName(SERIALIZED_NAME_TYPE_CODE)
  private TypeCodeEnum typeCode;

  public DataType() {
  }

  public DataType listElementType(DataType listElementType) {
    this.listElementType = listElementType;
    return this;
  }

  /**
   * Get listElementType
   * @return listElementType
   */
  @javax.annotation.Nullable
  public DataType getListElementType() {
    return listElementType;
  }

  public void setListElementType(DataType listElementType) {
    this.listElementType = listElementType;
  }


  public DataType nullable(Boolean nullable) {
    this.nullable = nullable;
    return this;
  }

  /**
   * If true, this DataType can also be &#x60;NULL&#x60;. In .CSV files &#x60;NULL&#x60; value is expressed as an empty string.
   * @return nullable
   */
  @javax.annotation.Nullable
  public Boolean getNullable() {
    return nullable;
  }

  public void setNullable(Boolean nullable) {
    this.nullable = nullable;
  }


  public DataType structType(StructType structType) {
    this.structType = structType;
    return this;
  }

  /**
   * Get structType
   * @return structType
   */
  @javax.annotation.Nullable
  public StructType getStructType() {
    return structType;
  }

  public void setStructType(StructType structType) {
    this.structType = structType;
  }


  public DataType timeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
    return this;
  }

  /**
   * If type_code &#x3D;&#x3D; TIMESTAMP then &#x60;time_format&#x60; provides the format in which that time field is expressed. The time_format must either be one of: * &#x60;UNIX_SECONDS&#x60; * &#x60;UNIX_MILLISECONDS&#x60; * &#x60;UNIX_MICROSECONDS&#x60; * &#x60;UNIX_NANOSECONDS&#x60; (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in &#x60;strftime&#x60; syntax. If time_format is not set, then the default format as described on the type_code is used.
   * @return timeFormat
   */
  @javax.annotation.Nullable
  public String getTimeFormat() {
    return timeFormat;
  }

  public void setTimeFormat(String timeFormat) {
    this.timeFormat = timeFormat;
  }


  public DataType typeCode(TypeCodeEnum typeCode) {
    this.typeCode = typeCode;
    return this;
  }

  /**
   * Required. The TypeCode for this type.
   * @return typeCode
   */
  @javax.annotation.Nullable
  public TypeCodeEnum getTypeCode() {
    return typeCode;
  }

  public void setTypeCode(TypeCodeEnum typeCode) {
    this.typeCode = typeCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataType dataType = (DataType) o;
    return Objects.equals(this.listElementType, dataType.listElementType) &&
        Objects.equals(this.nullable, dataType.nullable) &&
        Objects.equals(this.structType, dataType.structType) &&
        Objects.equals(this.timeFormat, dataType.timeFormat) &&
        Objects.equals(this.typeCode, dataType.typeCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(listElementType, nullable, structType, timeFormat, typeCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataType {\n");
    sb.append("    listElementType: ").append(toIndentedString(listElementType)).append("\n");
    sb.append("    nullable: ").append(toIndentedString(nullable)).append("\n");
    sb.append("    structType: ").append(toIndentedString(structType)).append("\n");
    sb.append("    timeFormat: ").append(toIndentedString(timeFormat)).append("\n");
    sb.append("    typeCode: ").append(toIndentedString(typeCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("listElementType");
    openapiFields.add("nullable");
    openapiFields.add("structType");
    openapiFields.add("timeFormat");
    openapiFields.add("typeCode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataType
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataType.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataType is not found in the empty JSON string", DataType.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataType.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataType` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `listElementType`
      if (jsonObj.get("listElementType") != null && !jsonObj.get("listElementType").isJsonNull()) {
        DataType.validateJsonElement(jsonObj.get("listElementType"));
      }
      // validate the optional field `structType`
      if (jsonObj.get("structType") != null && !jsonObj.get("structType").isJsonNull()) {
        StructType.validateJsonElement(jsonObj.get("structType"));
      }
      if ((jsonObj.get("timeFormat") != null && !jsonObj.get("timeFormat").isJsonNull()) && !jsonObj.get("timeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeFormat").toString()));
      }
      if ((jsonObj.get("typeCode") != null && !jsonObj.get("typeCode").isJsonNull()) && !jsonObj.get("typeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `typeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("typeCode").toString()));
      }
      // validate the optional field `typeCode`
      if (jsonObj.get("typeCode") != null && !jsonObj.get("typeCode").isJsonNull()) {
        TypeCodeEnum.validateJsonElement(jsonObj.get("typeCode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataType.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataType' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataType> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataType.class));

       return (TypeAdapter<T>) new TypeAdapter<DataType>() {
           @Override
           public void write(JsonWriter out, DataType value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataType read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataType given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataType
   * @throws IOException if the JSON string is invalid with respect to DataType
   */
  public static DataType fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataType.class);
  }

  /**
   * Convert an instance of DataType to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

