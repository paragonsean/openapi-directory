/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClassificationEvaluationMetricsConfusionMatrixRow;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Confusion matrix of the model running the classification.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfusionMatrix {
  public static final String SERIALIZED_NAME_ANNOTATION_SPEC_ID = "annotationSpecId";
  @SerializedName(SERIALIZED_NAME_ANNOTATION_SPEC_ID)
  private List<String> annotationSpecId = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private List<String> displayName = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROW = "row";
  @SerializedName(SERIALIZED_NAME_ROW)
  private List<ClassificationEvaluationMetricsConfusionMatrixRow> row = new ArrayList<>();

  public ConfusionMatrix() {
  }

  public ConfusionMatrix annotationSpecId(List<String> annotationSpecId) {
    this.annotationSpecId = annotationSpecId;
    return this;
  }

  public ConfusionMatrix addAnnotationSpecIdItem(String annotationSpecIdItem) {
    if (this.annotationSpecId == null) {
      this.annotationSpecId = new ArrayList<>();
    }
    this.annotationSpecId.add(annotationSpecIdItem);
    return this;
  }

  /**
   * Output only. IDs of the annotation specs used in the confusion matrix. For Tables CLASSIFICATION prediction_type only list of annotation_spec_display_name-s is populated.
   * @return annotationSpecId
   */
  @javax.annotation.Nullable
  public List<String> getAnnotationSpecId() {
    return annotationSpecId;
  }

  public void setAnnotationSpecId(List<String> annotationSpecId) {
    this.annotationSpecId = annotationSpecId;
  }


  public ConfusionMatrix displayName(List<String> displayName) {
    this.displayName = displayName;
    return this;
  }

  public ConfusionMatrix addDisplayNameItem(String displayNameItem) {
    if (this.displayName == null) {
      this.displayName = new ArrayList<>();
    }
    this.displayName.add(displayNameItem);
    return this;
  }

  /**
   * Output only. Display name of the annotation specs used in the confusion matrix, as they were at the moment of the evaluation. For Tables CLASSIFICATION prediction_type-s, distinct values of the target column at the moment of the model evaluation are populated here.
   * @return displayName
   */
  @javax.annotation.Nullable
  public List<String> getDisplayName() {
    return displayName;
  }

  public void setDisplayName(List<String> displayName) {
    this.displayName = displayName;
  }


  public ConfusionMatrix row(List<ClassificationEvaluationMetricsConfusionMatrixRow> row) {
    this.row = row;
    return this;
  }

  public ConfusionMatrix addRowItem(ClassificationEvaluationMetricsConfusionMatrixRow rowItem) {
    if (this.row == null) {
      this.row = new ArrayList<>();
    }
    this.row.add(rowItem);
    return this;
  }

  /**
   * Output only. Rows in the confusion matrix. The number of rows is equal to the size of &#x60;annotation_spec_id&#x60;. &#x60;row[i].example_count[j]&#x60; is the number of examples that have ground truth of the &#x60;annotation_spec_id[i]&#x60; and are predicted as &#x60;annotation_spec_id[j]&#x60; by the model being evaluated.
   * @return row
   */
  @javax.annotation.Nullable
  public List<ClassificationEvaluationMetricsConfusionMatrixRow> getRow() {
    return row;
  }

  public void setRow(List<ClassificationEvaluationMetricsConfusionMatrixRow> row) {
    this.row = row;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfusionMatrix confusionMatrix = (ConfusionMatrix) o;
    return Objects.equals(this.annotationSpecId, confusionMatrix.annotationSpecId) &&
        Objects.equals(this.displayName, confusionMatrix.displayName) &&
        Objects.equals(this.row, confusionMatrix.row);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotationSpecId, displayName, row);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfusionMatrix {\n");
    sb.append("    annotationSpecId: ").append(toIndentedString(annotationSpecId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    row: ").append(toIndentedString(row)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotationSpecId");
    openapiFields.add("displayName");
    openapiFields.add("row");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfusionMatrix
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfusionMatrix.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfusionMatrix is not found in the empty JSON string", ConfusionMatrix.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfusionMatrix.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfusionMatrix` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("annotationSpecId") != null && !jsonObj.get("annotationSpecId").isJsonNull() && !jsonObj.get("annotationSpecId").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `annotationSpecId` to be an array in the JSON string but got `%s`", jsonObj.get("annotationSpecId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull() && !jsonObj.get("displayName").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be an array in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (jsonObj.get("row") != null && !jsonObj.get("row").isJsonNull()) {
        JsonArray jsonArrayrow = jsonObj.getAsJsonArray("row");
        if (jsonArrayrow != null) {
          // ensure the json data is an array
          if (!jsonObj.get("row").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `row` to be an array in the JSON string but got `%s`", jsonObj.get("row").toString()));
          }

          // validate the optional field `row` (array)
          for (int i = 0; i < jsonArrayrow.size(); i++) {
            ClassificationEvaluationMetricsConfusionMatrixRow.validateJsonElement(jsonArrayrow.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfusionMatrix.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfusionMatrix' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfusionMatrix> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfusionMatrix.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfusionMatrix>() {
           @Override
           public void write(JsonWriter out, ConfusionMatrix value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfusionMatrix read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfusionMatrix given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfusionMatrix
   * @throws IOException if the JSON string is invalid with respect to ConfusionMatrix
   */
  public static ConfusionMatrix fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfusionMatrix.class);
  }

  /**
   * Convert an instance of ConfusionMatrix to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

