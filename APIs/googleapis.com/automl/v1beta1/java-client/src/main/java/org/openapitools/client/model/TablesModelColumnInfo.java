/*
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An information specific to given column and Tables Model, in context of the Model and the predictions created by it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:48:50.092187-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TablesModelColumnInfo {
  public static final String SERIALIZED_NAME_COLUMN_DISPLAY_NAME = "columnDisplayName";
  @SerializedName(SERIALIZED_NAME_COLUMN_DISPLAY_NAME)
  private String columnDisplayName;

  public static final String SERIALIZED_NAME_COLUMN_SPEC_NAME = "columnSpecName";
  @SerializedName(SERIALIZED_NAME_COLUMN_SPEC_NAME)
  private String columnSpecName;

  public static final String SERIALIZED_NAME_FEATURE_IMPORTANCE = "featureImportance";
  @SerializedName(SERIALIZED_NAME_FEATURE_IMPORTANCE)
  private Float featureImportance;

  public TablesModelColumnInfo() {
  }

  public TablesModelColumnInfo columnDisplayName(String columnDisplayName) {
    this.columnDisplayName = columnDisplayName;
    return this;
  }

  /**
   * Output only. The display name of the column (same as the display_name of its ColumnSpec).
   * @return columnDisplayName
   */
  @javax.annotation.Nullable
  public String getColumnDisplayName() {
    return columnDisplayName;
  }

  public void setColumnDisplayName(String columnDisplayName) {
    this.columnDisplayName = columnDisplayName;
  }


  public TablesModelColumnInfo columnSpecName(String columnSpecName) {
    this.columnSpecName = columnSpecName;
    return this;
  }

  /**
   * Output only. The name of the ColumnSpec describing the column. Not populated when this proto is outputted to BigQuery.
   * @return columnSpecName
   */
  @javax.annotation.Nullable
  public String getColumnSpecName() {
    return columnSpecName;
  }

  public void setColumnSpecName(String columnSpecName) {
    this.columnSpecName = columnSpecName;
  }


  public TablesModelColumnInfo featureImportance(Float featureImportance) {
    this.featureImportance = featureImportance;
    return this;
  }

  /**
   * Output only. When given as part of a Model (always populated): Measurement of how much model predictions correctness on the TEST data depend on values in this column. A value between 0 and 1, higher means higher influence. These values are normalized - for all input feature columns of a given model they add to 1. When given back by Predict (populated iff feature_importance param is set) or Batch Predict (populated iff feature_importance param is set): Measurement of how impactful for the prediction returned for the given row the value in this column was. Specifically, the feature importance specifies the marginal contribution that the feature made to the prediction score compared to the baseline score. These values are computed using the Sampled Shapley method.
   * @return featureImportance
   */
  @javax.annotation.Nullable
  public Float getFeatureImportance() {
    return featureImportance;
  }

  public void setFeatureImportance(Float featureImportance) {
    this.featureImportance = featureImportance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TablesModelColumnInfo tablesModelColumnInfo = (TablesModelColumnInfo) o;
    return Objects.equals(this.columnDisplayName, tablesModelColumnInfo.columnDisplayName) &&
        Objects.equals(this.columnSpecName, tablesModelColumnInfo.columnSpecName) &&
        Objects.equals(this.featureImportance, tablesModelColumnInfo.featureImportance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(columnDisplayName, columnSpecName, featureImportance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TablesModelColumnInfo {\n");
    sb.append("    columnDisplayName: ").append(toIndentedString(columnDisplayName)).append("\n");
    sb.append("    columnSpecName: ").append(toIndentedString(columnSpecName)).append("\n");
    sb.append("    featureImportance: ").append(toIndentedString(featureImportance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("columnDisplayName");
    openapiFields.add("columnSpecName");
    openapiFields.add("featureImportance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TablesModelColumnInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TablesModelColumnInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TablesModelColumnInfo is not found in the empty JSON string", TablesModelColumnInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TablesModelColumnInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TablesModelColumnInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("columnDisplayName") != null && !jsonObj.get("columnDisplayName").isJsonNull()) && !jsonObj.get("columnDisplayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnDisplayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnDisplayName").toString()));
      }
      if ((jsonObj.get("columnSpecName") != null && !jsonObj.get("columnSpecName").isJsonNull()) && !jsonObj.get("columnSpecName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `columnSpecName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("columnSpecName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TablesModelColumnInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TablesModelColumnInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TablesModelColumnInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TablesModelColumnInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TablesModelColumnInfo>() {
           @Override
           public void write(JsonWriter out, TablesModelColumnInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TablesModelColumnInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TablesModelColumnInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TablesModelColumnInfo
   * @throws IOException if the JSON string is invalid with respect to TablesModelColumnInfo
   */
  public static TablesModelColumnInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TablesModelColumnInfo.class);
  }

  /**
   * Convert an instance of TablesModelColumnInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

