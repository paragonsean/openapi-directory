/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TablesModelColumnInfo model module.
 * @module model/TablesModelColumnInfo
 * @version v1beta1
 */
class TablesModelColumnInfo {
    /**
     * Constructs a new <code>TablesModelColumnInfo</code>.
     * An information specific to given column and Tables Model, in context of the Model and the predictions created by it.
     * @alias module:model/TablesModelColumnInfo
     */
    constructor() { 
        
        TablesModelColumnInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TablesModelColumnInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TablesModelColumnInfo} obj Optional instance to populate.
     * @return {module:model/TablesModelColumnInfo} The populated <code>TablesModelColumnInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TablesModelColumnInfo();

            if (data.hasOwnProperty('columnDisplayName')) {
                obj['columnDisplayName'] = ApiClient.convertToType(data['columnDisplayName'], 'String');
            }
            if (data.hasOwnProperty('columnSpecName')) {
                obj['columnSpecName'] = ApiClient.convertToType(data['columnSpecName'], 'String');
            }
            if (data.hasOwnProperty('featureImportance')) {
                obj['featureImportance'] = ApiClient.convertToType(data['featureImportance'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TablesModelColumnInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TablesModelColumnInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['columnDisplayName'] && !(typeof data['columnDisplayName'] === 'string' || data['columnDisplayName'] instanceof String)) {
            throw new Error("Expected the field `columnDisplayName` to be a primitive type in the JSON string but got " + data['columnDisplayName']);
        }
        // ensure the json data is a string
        if (data['columnSpecName'] && !(typeof data['columnSpecName'] === 'string' || data['columnSpecName'] instanceof String)) {
            throw new Error("Expected the field `columnSpecName` to be a primitive type in the JSON string but got " + data['columnSpecName']);
        }

        return true;
    }


}



/**
 * Output only. The display name of the column (same as the display_name of its ColumnSpec).
 * @member {String} columnDisplayName
 */
TablesModelColumnInfo.prototype['columnDisplayName'] = undefined;

/**
 * Output only. The name of the ColumnSpec describing the column. Not populated when this proto is outputted to BigQuery.
 * @member {String} columnSpecName
 */
TablesModelColumnInfo.prototype['columnSpecName'] = undefined;

/**
 * Output only. When given as part of a Model (always populated): Measurement of how much model predictions correctness on the TEST data depend on values in this column. A value between 0 and 1, higher means higher influence. These values are normalized - for all input feature columns of a given model they add to 1. When given back by Predict (populated iff feature_importance param is set) or Batch Predict (populated iff feature_importance param is set): Measurement of how impactful for the prediction returned for the given row the value in this column was. Specifically, the feature importance specifies the marginal contribution that the feature made to the prediction score compared to the baseline score. These values are computed using the Sampled Shapley method.
 * @member {Number} featureImportance
 */
TablesModelColumnInfo.prototype['featureImportance'] = undefined;






export default TablesModelColumnInfo;

