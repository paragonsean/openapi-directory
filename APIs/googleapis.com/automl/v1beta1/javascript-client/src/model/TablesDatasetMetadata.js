/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CorrelationStats from './CorrelationStats';

/**
 * The TablesDatasetMetadata model module.
 * @module model/TablesDatasetMetadata
 * @version v1beta1
 */
class TablesDatasetMetadata {
    /**
     * Constructs a new <code>TablesDatasetMetadata</code>.
     * Metadata for a dataset used for AutoML Tables.
     * @alias module:model/TablesDatasetMetadata
     */
    constructor() { 
        
        TablesDatasetMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TablesDatasetMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TablesDatasetMetadata} obj Optional instance to populate.
     * @return {module:model/TablesDatasetMetadata} The populated <code>TablesDatasetMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TablesDatasetMetadata();

            if (data.hasOwnProperty('mlUseColumnSpecId')) {
                obj['mlUseColumnSpecId'] = ApiClient.convertToType(data['mlUseColumnSpecId'], 'String');
            }
            if (data.hasOwnProperty('primaryTableSpecId')) {
                obj['primaryTableSpecId'] = ApiClient.convertToType(data['primaryTableSpecId'], 'String');
            }
            if (data.hasOwnProperty('statsUpdateTime')) {
                obj['statsUpdateTime'] = ApiClient.convertToType(data['statsUpdateTime'], 'String');
            }
            if (data.hasOwnProperty('targetColumnCorrelations')) {
                obj['targetColumnCorrelations'] = ApiClient.convertToType(data['targetColumnCorrelations'], {'String': CorrelationStats});
            }
            if (data.hasOwnProperty('targetColumnSpecId')) {
                obj['targetColumnSpecId'] = ApiClient.convertToType(data['targetColumnSpecId'], 'String');
            }
            if (data.hasOwnProperty('weightColumnSpecId')) {
                obj['weightColumnSpecId'] = ApiClient.convertToType(data['weightColumnSpecId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TablesDatasetMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TablesDatasetMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['mlUseColumnSpecId'] && !(typeof data['mlUseColumnSpecId'] === 'string' || data['mlUseColumnSpecId'] instanceof String)) {
            throw new Error("Expected the field `mlUseColumnSpecId` to be a primitive type in the JSON string but got " + data['mlUseColumnSpecId']);
        }
        // ensure the json data is a string
        if (data['primaryTableSpecId'] && !(typeof data['primaryTableSpecId'] === 'string' || data['primaryTableSpecId'] instanceof String)) {
            throw new Error("Expected the field `primaryTableSpecId` to be a primitive type in the JSON string but got " + data['primaryTableSpecId']);
        }
        // ensure the json data is a string
        if (data['statsUpdateTime'] && !(typeof data['statsUpdateTime'] === 'string' || data['statsUpdateTime'] instanceof String)) {
            throw new Error("Expected the field `statsUpdateTime` to be a primitive type in the JSON string but got " + data['statsUpdateTime']);
        }
        // ensure the json data is a string
        if (data['targetColumnSpecId'] && !(typeof data['targetColumnSpecId'] === 'string' || data['targetColumnSpecId'] instanceof String)) {
            throw new Error("Expected the field `targetColumnSpecId` to be a primitive type in the JSON string but got " + data['targetColumnSpecId']);
        }
        // ensure the json data is a string
        if (data['weightColumnSpecId'] && !(typeof data['weightColumnSpecId'] === 'string' || data['weightColumnSpecId'] instanceof String)) {
            throw new Error("Expected the field `weightColumnSpecId` to be a primitive type in the JSON string but got " + data['weightColumnSpecId']);
        }

        return true;
    }


}



/**
 * column_spec_id of the primary table column which specifies a possible ML use of the row, i.e. the column will be used to split the rows into TRAIN, VALIDATE and TEST sets. Required type: STRING. This column, if set, must either have all of `TRAIN`, `VALIDATE`, `TEST` among its values, or only have `TEST`, `UNASSIGNED` values. In the latter case the rows with `UNASSIGNED` value will be assigned by AutoML. Note that if a given ml use distribution makes it impossible to create a \"good\" model, that call will error describing the issue. If both this column_spec_id and primary table's time_column_spec_id are not set, then all rows are treated as `UNASSIGNED`. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
 * @member {String} mlUseColumnSpecId
 */
TablesDatasetMetadata.prototype['mlUseColumnSpecId'] = undefined;

/**
 * Output only. The table_spec_id of the primary table of this dataset.
 * @member {String} primaryTableSpecId
 */
TablesDatasetMetadata.prototype['primaryTableSpecId'] = undefined;

/**
 * Output only. The most recent timestamp when target_column_correlations field and all descendant ColumnSpec.data_stats and ColumnSpec.top_correlated_columns fields were last (re-)generated. Any changes that happened to the dataset afterwards are not reflected in these fields values. The regeneration happens in the background on a best effort basis.
 * @member {String} statsUpdateTime
 */
TablesDatasetMetadata.prototype['statsUpdateTime'] = undefined;

/**
 * Output only. Correlations between TablesDatasetMetadata.target_column_spec_id, and other columns of the TablesDatasetMetadataprimary_table. Only set if the target column is set. Mapping from other column spec id to its CorrelationStats with the target column. This field may be stale, see the stats_update_time field for for the timestamp at which these stats were last updated.
 * @member {Object.<String, module:model/CorrelationStats>} targetColumnCorrelations
 */
TablesDatasetMetadata.prototype['targetColumnCorrelations'] = undefined;

/**
 * column_spec_id of the primary table's column that should be used as the training & prediction target. This column must be non-nullable and have one of following data types (otherwise model creation will error): * CATEGORY * FLOAT64 If the type is CATEGORY , only up to 100 unique values may exist in that column across all rows. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
 * @member {String} targetColumnSpecId
 */
TablesDatasetMetadata.prototype['targetColumnSpecId'] = undefined;

/**
 * column_spec_id of the primary table's column that should be used as the weight column, i.e. the higher the value the more important the row will be during model training. Required type: FLOAT64. Allowed values: 0 to 10000, inclusive on both ends; 0 means the row is ignored for training. If not set all rows are assumed to have equal weight of 1. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
 * @member {String} weightColumnSpecId
 */
TablesDatasetMetadata.prototype['weightColumnSpecId'] = undefined;






export default TablesDatasetMetadata;

