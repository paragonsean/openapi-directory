/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationEvaluationMetricsConfusionMatrixRow from './ClassificationEvaluationMetricsConfusionMatrixRow';

/**
 * The ConfusionMatrix model module.
 * @module model/ConfusionMatrix
 * @version v1beta1
 */
class ConfusionMatrix {
    /**
     * Constructs a new <code>ConfusionMatrix</code>.
     * Confusion matrix of the model running the classification.
     * @alias module:model/ConfusionMatrix
     */
    constructor() { 
        
        ConfusionMatrix.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfusionMatrix</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfusionMatrix} obj Optional instance to populate.
     * @return {module:model/ConfusionMatrix} The populated <code>ConfusionMatrix</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfusionMatrix();

            if (data.hasOwnProperty('annotationSpecId')) {
                obj['annotationSpecId'] = ApiClient.convertToType(data['annotationSpecId'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], ['String']);
            }
            if (data.hasOwnProperty('row')) {
                obj['row'] = ApiClient.convertToType(data['row'], [ClassificationEvaluationMetricsConfusionMatrixRow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfusionMatrix</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfusionMatrix</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['annotationSpecId'])) {
            throw new Error("Expected the field `annotationSpecId` to be an array in the JSON data but got " + data['annotationSpecId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['displayName'])) {
            throw new Error("Expected the field `displayName` to be an array in the JSON data but got " + data['displayName']);
        }
        if (data['row']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['row'])) {
                throw new Error("Expected the field `row` to be an array in the JSON data but got " + data['row']);
            }
            // validate the optional field `row` (array)
            for (const item of data['row']) {
                ClassificationEvaluationMetricsConfusionMatrixRow.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. IDs of the annotation specs used in the confusion matrix. For Tables CLASSIFICATION prediction_type only list of annotation_spec_display_name-s is populated.
 * @member {Array.<String>} annotationSpecId
 */
ConfusionMatrix.prototype['annotationSpecId'] = undefined;

/**
 * Output only. Display name of the annotation specs used in the confusion matrix, as they were at the moment of the evaluation. For Tables CLASSIFICATION prediction_type-s, distinct values of the target column at the moment of the model evaluation are populated here.
 * @member {Array.<String>} displayName
 */
ConfusionMatrix.prototype['displayName'] = undefined;

/**
 * Output only. Rows in the confusion matrix. The number of rows is equal to the size of `annotation_spec_id`. `row[i].example_count[j]` is the number of examples that have ground truth of the `annotation_spec_id[i]` and are predicted as `annotation_spec_id[j]` by the model being evaluated.
 * @member {Array.<module:model/ClassificationEvaluationMetricsConfusionMatrixRow>} row
 */
ConfusionMatrix.prototype['row'] = undefined;






export default ConfusionMatrix;

