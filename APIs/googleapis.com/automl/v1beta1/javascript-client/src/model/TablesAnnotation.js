/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DoubleRange from './DoubleRange';
import TablesModelColumnInfo from './TablesModelColumnInfo';

/**
 * The TablesAnnotation model module.
 * @module model/TablesAnnotation
 * @version v1beta1
 */
class TablesAnnotation {
    /**
     * Constructs a new <code>TablesAnnotation</code>.
     * Contains annotation details specific to Tables.
     * @alias module:model/TablesAnnotation
     */
    constructor() { 
        
        TablesAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TablesAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TablesAnnotation} obj Optional instance to populate.
     * @return {module:model/TablesAnnotation} The populated <code>TablesAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TablesAnnotation();

            if (data.hasOwnProperty('baselineScore')) {
                obj['baselineScore'] = ApiClient.convertToType(data['baselineScore'], 'Number');
            }
            if (data.hasOwnProperty('predictionInterval')) {
                obj['predictionInterval'] = DoubleRange.constructFromObject(data['predictionInterval']);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('tablesModelColumnInfo')) {
                obj['tablesModelColumnInfo'] = ApiClient.convertToType(data['tablesModelColumnInfo'], [TablesModelColumnInfo]);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TablesAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TablesAnnotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `predictionInterval`
        if (data['predictionInterval']) { // data not null
          DoubleRange.validateJSON(data['predictionInterval']);
        }
        if (data['tablesModelColumnInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tablesModelColumnInfo'])) {
                throw new Error("Expected the field `tablesModelColumnInfo` to be an array in the JSON data but got " + data['tablesModelColumnInfo']);
            }
            // validate the optional field `tablesModelColumnInfo` (array)
            for (const item of data['tablesModelColumnInfo']) {
                TablesModelColumnInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Stores the prediction score for the baseline example, which is defined as the example with all values set to their baseline values. This is used as part of the Sampled Shapley explanation of the model's prediction. This field is populated only when feature importance is requested. For regression models, this holds the baseline prediction for the baseline example. For classification models, this holds the baseline prediction for the baseline example for the argmax class.
 * @member {Number} baselineScore
 */
TablesAnnotation.prototype['baselineScore'] = undefined;

/**
 * @member {module:model/DoubleRange} predictionInterval
 */
TablesAnnotation.prototype['predictionInterval'] = undefined;

/**
 * Output only. A confidence estimate between 0.0 and 1.0, inclusive. A higher value means greater confidence in the returned value. For target_column_spec of FLOAT64 data type the score is not populated.
 * @member {Number} score
 */
TablesAnnotation.prototype['score'] = undefined;

/**
 * Output only. Auxiliary information for each of the model's input_feature_column_specs with respect to this particular prediction. If no other fields than column_spec_name and column_display_name would be populated, then this whole field is not.
 * @member {Array.<module:model/TablesModelColumnInfo>} tablesModelColumnInfo
 */
TablesAnnotation.prototype['tablesModelColumnInfo'] = undefined;

/**
 * The predicted value of the row's target_column. The value depends on the column's DataType: * CATEGORY - the predicted (with the above confidence `score`) CATEGORY value. * FLOAT64 - the predicted (with above `prediction_interval`) FLOAT64 value.
 * @member {Object} value
 */
TablesAnnotation.prototype['value'] = undefined;






export default TablesAnnotation;

