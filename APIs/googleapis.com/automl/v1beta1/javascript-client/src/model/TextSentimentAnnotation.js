/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextSentimentAnnotation model module.
 * @module model/TextSentimentAnnotation
 * @version v1beta1
 */
class TextSentimentAnnotation {
    /**
     * Constructs a new <code>TextSentimentAnnotation</code>.
     * Contains annotation details specific to text sentiment.
     * @alias module:model/TextSentimentAnnotation
     */
    constructor() { 
        
        TextSentimentAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextSentimentAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextSentimentAnnotation} obj Optional instance to populate.
     * @return {module:model/TextSentimentAnnotation} The populated <code>TextSentimentAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextSentimentAnnotation();

            if (data.hasOwnProperty('sentiment')) {
                obj['sentiment'] = ApiClient.convertToType(data['sentiment'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextSentimentAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextSentimentAnnotation</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Output only. The sentiment with the semantic, as given to the AutoMl.ImportData when populating the dataset from which the model used for the prediction had been trained. The sentiment values are between 0 and Dataset.text_sentiment_dataset_metadata.sentiment_max (inclusive), with higher value meaning more positive sentiment. They are completely relative, i.e. 0 means least positive sentiment and sentiment_max means the most positive from the sentiments present in the train data. Therefore e.g. if train data had only negative sentiment, then sentiment_max, would be still negative (although least negative). The sentiment shouldn't be confused with \"score\" or \"magnitude\" from the previous Natural Language Sentiment Analysis API.
 * @member {Number} sentiment
 */
TextSentimentAnnotation.prototype['sentiment'] = undefined;






export default TextSentimentAnnotation;

