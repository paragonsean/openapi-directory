/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageClassificationModelMetadata model module.
 * @module model/ImageClassificationModelMetadata
 * @version v1beta1
 */
class ImageClassificationModelMetadata {
    /**
     * Constructs a new <code>ImageClassificationModelMetadata</code>.
     * Model metadata for image classification.
     * @alias module:model/ImageClassificationModelMetadata
     */
    constructor() { 
        
        ImageClassificationModelMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageClassificationModelMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageClassificationModelMetadata} obj Optional instance to populate.
     * @return {module:model/ImageClassificationModelMetadata} The populated <code>ImageClassificationModelMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageClassificationModelMetadata();

            if (data.hasOwnProperty('baseModelId')) {
                obj['baseModelId'] = ApiClient.convertToType(data['baseModelId'], 'String');
            }
            if (data.hasOwnProperty('modelType')) {
                obj['modelType'] = ApiClient.convertToType(data['modelType'], 'String');
            }
            if (data.hasOwnProperty('nodeCount')) {
                obj['nodeCount'] = ApiClient.convertToType(data['nodeCount'], 'String');
            }
            if (data.hasOwnProperty('nodeQps')) {
                obj['nodeQps'] = ApiClient.convertToType(data['nodeQps'], 'Number');
            }
            if (data.hasOwnProperty('stopReason')) {
                obj['stopReason'] = ApiClient.convertToType(data['stopReason'], 'String');
            }
            if (data.hasOwnProperty('trainBudget')) {
                obj['trainBudget'] = ApiClient.convertToType(data['trainBudget'], 'String');
            }
            if (data.hasOwnProperty('trainCost')) {
                obj['trainCost'] = ApiClient.convertToType(data['trainCost'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageClassificationModelMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageClassificationModelMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['baseModelId'] && !(typeof data['baseModelId'] === 'string' || data['baseModelId'] instanceof String)) {
            throw new Error("Expected the field `baseModelId` to be a primitive type in the JSON string but got " + data['baseModelId']);
        }
        // ensure the json data is a string
        if (data['modelType'] && !(typeof data['modelType'] === 'string' || data['modelType'] instanceof String)) {
            throw new Error("Expected the field `modelType` to be a primitive type in the JSON string but got " + data['modelType']);
        }
        // ensure the json data is a string
        if (data['nodeCount'] && !(typeof data['nodeCount'] === 'string' || data['nodeCount'] instanceof String)) {
            throw new Error("Expected the field `nodeCount` to be a primitive type in the JSON string but got " + data['nodeCount']);
        }
        // ensure the json data is a string
        if (data['stopReason'] && !(typeof data['stopReason'] === 'string' || data['stopReason'] instanceof String)) {
            throw new Error("Expected the field `stopReason` to be a primitive type in the JSON string but got " + data['stopReason']);
        }
        // ensure the json data is a string
        if (data['trainBudget'] && !(typeof data['trainBudget'] === 'string' || data['trainBudget'] instanceof String)) {
            throw new Error("Expected the field `trainBudget` to be a primitive type in the JSON string but got " + data['trainBudget']);
        }
        // ensure the json data is a string
        if (data['trainCost'] && !(typeof data['trainCost'] === 'string' || data['trainCost'] instanceof String)) {
            throw new Error("Expected the field `trainCost` to be a primitive type in the JSON string but got " + data['trainCost']);
        }

        return true;
    }


}



/**
 * Optional. The ID of the `base` model. If it is specified, the new model will be created based on the `base` model. Otherwise, the new model will be created from scratch. The `base` model must be in the same `project` and `location` as the new model to create, and have the same `model_type`.
 * @member {String} baseModelId
 */
ImageClassificationModelMetadata.prototype['baseModelId'] = undefined;

/**
 * Optional. Type of the model. The available values are: * `cloud` - Model to be used via prediction calls to AutoML API. This is the default value. * `mobile-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. * `mobile-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile or edge device with TensorFlow afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models. * `mobile-core-ml-low-latency-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have low latency, but may have lower prediction quality than other models. * `mobile-core-ml-versatile-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. * `mobile-core-ml-high-accuracy-1` - A model that, in addition to providing prediction via AutoML API, can also be exported (see AutoMl.ExportModel) and used on a mobile device with Core ML afterwards. Expected to have a higher latency, but should also have a higher prediction quality than other models.
 * @member {String} modelType
 */
ImageClassificationModelMetadata.prototype['modelType'] = undefined;

/**
 * Output only. The number of nodes this model is deployed on. A node is an abstraction of a machine resource, which can handle online prediction QPS as given in the node_qps field.
 * @member {String} nodeCount
 */
ImageClassificationModelMetadata.prototype['nodeCount'] = undefined;

/**
 * Output only. An approximate number of online prediction QPS that can be supported by this model per each node on which it is deployed.
 * @member {Number} nodeQps
 */
ImageClassificationModelMetadata.prototype['nodeQps'] = undefined;

/**
 * Output only. The reason that this create model operation stopped, e.g. `BUDGET_REACHED`, `MODEL_CONVERGED`.
 * @member {String} stopReason
 */
ImageClassificationModelMetadata.prototype['stopReason'] = undefined;

/**
 * Required. The train budget of creating this model, expressed in hours. The actual `train_cost` will be equal or less than this value.
 * @member {String} trainBudget
 */
ImageClassificationModelMetadata.prototype['trainBudget'] = undefined;

/**
 * Output only. The actual train cost of creating this model, expressed in hours. If this model is created from a `base` model, the train cost used to create the `base` model are not included.
 * @member {String} trainCost
 */
ImageClassificationModelMetadata.prototype['trainCost'] = undefined;






export default ImageClassificationModelMetadata;

