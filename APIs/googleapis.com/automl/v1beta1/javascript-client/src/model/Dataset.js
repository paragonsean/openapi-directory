/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageClassificationDatasetMetadata from './ImageClassificationDatasetMetadata';
import TablesDatasetMetadata from './TablesDatasetMetadata';
import TextClassificationDatasetMetadata from './TextClassificationDatasetMetadata';
import TextSentimentDatasetMetadata from './TextSentimentDatasetMetadata';
import TranslationDatasetMetadata from './TranslationDatasetMetadata';

/**
 * The Dataset model module.
 * @module model/Dataset
 * @version v1beta1
 */
class Dataset {
    /**
     * Constructs a new <code>Dataset</code>.
     * A workspace for solving a single, particular machine learning (ML) problem. A workspace contains examples that may be annotated.
     * @alias module:model/Dataset
     */
    constructor() { 
        
        Dataset.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Dataset</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dataset} obj Optional instance to populate.
     * @return {module:model/Dataset} The populated <code>Dataset</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dataset();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('exampleCount')) {
                obj['exampleCount'] = ApiClient.convertToType(data['exampleCount'], 'Number');
            }
            if (data.hasOwnProperty('imageClassificationDatasetMetadata')) {
                obj['imageClassificationDatasetMetadata'] = ImageClassificationDatasetMetadata.constructFromObject(data['imageClassificationDatasetMetadata']);
            }
            if (data.hasOwnProperty('imageObjectDetectionDatasetMetadata')) {
                obj['imageObjectDetectionDatasetMetadata'] = ApiClient.convertToType(data['imageObjectDetectionDatasetMetadata'], Object);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tablesDatasetMetadata')) {
                obj['tablesDatasetMetadata'] = TablesDatasetMetadata.constructFromObject(data['tablesDatasetMetadata']);
            }
            if (data.hasOwnProperty('textClassificationDatasetMetadata')) {
                obj['textClassificationDatasetMetadata'] = TextClassificationDatasetMetadata.constructFromObject(data['textClassificationDatasetMetadata']);
            }
            if (data.hasOwnProperty('textExtractionDatasetMetadata')) {
                obj['textExtractionDatasetMetadata'] = ApiClient.convertToType(data['textExtractionDatasetMetadata'], Object);
            }
            if (data.hasOwnProperty('textSentimentDatasetMetadata')) {
                obj['textSentimentDatasetMetadata'] = TextSentimentDatasetMetadata.constructFromObject(data['textSentimentDatasetMetadata']);
            }
            if (data.hasOwnProperty('translationDatasetMetadata')) {
                obj['translationDatasetMetadata'] = TranslationDatasetMetadata.constructFromObject(data['translationDatasetMetadata']);
            }
            if (data.hasOwnProperty('videoClassificationDatasetMetadata')) {
                obj['videoClassificationDatasetMetadata'] = ApiClient.convertToType(data['videoClassificationDatasetMetadata'], Object);
            }
            if (data.hasOwnProperty('videoObjectTrackingDatasetMetadata')) {
                obj['videoObjectTrackingDatasetMetadata'] = ApiClient.convertToType(data['videoObjectTrackingDatasetMetadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dataset</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dataset</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // validate the optional field `imageClassificationDatasetMetadata`
        if (data['imageClassificationDatasetMetadata']) { // data not null
          ImageClassificationDatasetMetadata.validateJSON(data['imageClassificationDatasetMetadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `tablesDatasetMetadata`
        if (data['tablesDatasetMetadata']) { // data not null
          TablesDatasetMetadata.validateJSON(data['tablesDatasetMetadata']);
        }
        // validate the optional field `textClassificationDatasetMetadata`
        if (data['textClassificationDatasetMetadata']) { // data not null
          TextClassificationDatasetMetadata.validateJSON(data['textClassificationDatasetMetadata']);
        }
        // validate the optional field `textSentimentDatasetMetadata`
        if (data['textSentimentDatasetMetadata']) { // data not null
          TextSentimentDatasetMetadata.validateJSON(data['textSentimentDatasetMetadata']);
        }
        // validate the optional field `translationDatasetMetadata`
        if (data['translationDatasetMetadata']) { // data not null
          TranslationDatasetMetadata.validateJSON(data['translationDatasetMetadata']);
        }

        return true;
    }


}



/**
 * Output only. Timestamp when this dataset was created.
 * @member {String} createTime
 */
Dataset.prototype['createTime'] = undefined;

/**
 * User-provided description of the dataset. The description can be up to 25000 characters long.
 * @member {String} description
 */
Dataset.prototype['description'] = undefined;

/**
 * Required. The name of the dataset to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9.
 * @member {String} displayName
 */
Dataset.prototype['displayName'] = undefined;

/**
 * Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.
 * @member {String} etag
 */
Dataset.prototype['etag'] = undefined;

/**
 * Output only. The number of examples in the dataset.
 * @member {Number} exampleCount
 */
Dataset.prototype['exampleCount'] = undefined;

/**
 * @member {module:model/ImageClassificationDatasetMetadata} imageClassificationDatasetMetadata
 */
Dataset.prototype['imageClassificationDatasetMetadata'] = undefined;

/**
 * Dataset metadata specific to image object detection.
 * @member {Object} imageObjectDetectionDatasetMetadata
 */
Dataset.prototype['imageObjectDetectionDatasetMetadata'] = undefined;

/**
 * Output only. The resource name of the dataset. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`
 * @member {String} name
 */
Dataset.prototype['name'] = undefined;

/**
 * @member {module:model/TablesDatasetMetadata} tablesDatasetMetadata
 */
Dataset.prototype['tablesDatasetMetadata'] = undefined;

/**
 * @member {module:model/TextClassificationDatasetMetadata} textClassificationDatasetMetadata
 */
Dataset.prototype['textClassificationDatasetMetadata'] = undefined;

/**
 * Dataset metadata that is specific to text extraction
 * @member {Object} textExtractionDatasetMetadata
 */
Dataset.prototype['textExtractionDatasetMetadata'] = undefined;

/**
 * @member {module:model/TextSentimentDatasetMetadata} textSentimentDatasetMetadata
 */
Dataset.prototype['textSentimentDatasetMetadata'] = undefined;

/**
 * @member {module:model/TranslationDatasetMetadata} translationDatasetMetadata
 */
Dataset.prototype['translationDatasetMetadata'] = undefined;

/**
 * Dataset metadata specific to video classification. All Video Classification datasets are treated as multi label.
 * @member {Object} videoClassificationDatasetMetadata
 */
Dataset.prototype['videoClassificationDatasetMetadata'] = undefined;

/**
 * Dataset metadata specific to video object tracking.
 * @member {Object} videoObjectTrackingDatasetMetadata
 */
Dataset.prototype['videoObjectTrackingDatasetMetadata'] = undefined;






export default Dataset;

