/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextSnippet model module.
 * @module model/TextSnippet
 * @version v1beta1
 */
class TextSnippet {
    /**
     * Constructs a new <code>TextSnippet</code>.
     * A representation of a text snippet.
     * @alias module:model/TextSnippet
     */
    constructor() { 
        
        TextSnippet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextSnippet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextSnippet} obj Optional instance to populate.
     * @return {module:model/TextSnippet} The populated <code>TextSnippet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextSnippet();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('contentUri')) {
                obj['contentUri'] = ApiClient.convertToType(data['contentUri'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextSnippet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextSnippet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['contentUri'] && !(typeof data['contentUri'] === 'string' || data['contentUri'] instanceof String)) {
            throw new Error("Expected the field `contentUri` to be a primitive type in the JSON string but got " + data['contentUri']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }

        return true;
    }


}



/**
 * Required. The content of the text snippet as a string. Up to 250000 characters long.
 * @member {String} content
 */
TextSnippet.prototype['content'] = undefined;

/**
 * Output only. HTTP URI where you can download the content.
 * @member {String} contentUri
 */
TextSnippet.prototype['contentUri'] = undefined;

/**
 * Optional. The format of content. Currently the only two allowed values are \"text/html\" and \"text/plain\". If left blank, the format is automatically determined from the type of the uploaded content.
 * @member {String} mimeType
 */
TextSnippet.prototype['mimeType'] = undefined;






export default TextSnippet;

