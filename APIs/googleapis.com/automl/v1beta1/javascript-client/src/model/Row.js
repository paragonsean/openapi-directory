/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Row model module.
 * @module model/Row
 * @version v1beta1
 */
class Row {
    /**
     * Constructs a new <code>Row</code>.
     * A representation of a row in a relational table.
     * @alias module:model/Row
     */
    constructor() { 
        
        Row.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Row</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Row} obj Optional instance to populate.
     * @return {module:model/Row} The populated <code>Row</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Row();

            if (data.hasOwnProperty('columnSpecIds')) {
                obj['columnSpecIds'] = ApiClient.convertToType(data['columnSpecIds'], ['String']);
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Row</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Row</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['columnSpecIds'])) {
            throw new Error("Expected the field `columnSpecIds` to be an array in the JSON data but got " + data['columnSpecIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * The resource IDs of the column specs describing the columns of the row. If set must contain, but possibly in a different order, all input feature column_spec_ids of the Model this row is being passed to. Note: The below `values` field must match order of this field, if this field is set.
 * @member {Array.<String>} columnSpecIds
 */
Row.prototype['columnSpecIds'] = undefined;

/**
 * Required. The values of the row cells, given in the same order as the column_spec_ids, or, if not set, then in the same order as input feature column_specs of the Model this row is being passed to.
 * @member {Array.<Object>} values
 */
Row.prototype['values'] = undefined;






export default Row;

