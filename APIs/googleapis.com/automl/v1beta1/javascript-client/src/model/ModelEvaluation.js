/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationEvaluationMetrics from './ClassificationEvaluationMetrics';
import ImageObjectDetectionEvaluationMetrics from './ImageObjectDetectionEvaluationMetrics';
import RegressionEvaluationMetrics from './RegressionEvaluationMetrics';
import TextExtractionEvaluationMetrics from './TextExtractionEvaluationMetrics';
import TextSentimentEvaluationMetrics from './TextSentimentEvaluationMetrics';
import TranslationEvaluationMetrics from './TranslationEvaluationMetrics';
import VideoObjectTrackingEvaluationMetrics from './VideoObjectTrackingEvaluationMetrics';

/**
 * The ModelEvaluation model module.
 * @module model/ModelEvaluation
 * @version v1beta1
 */
class ModelEvaluation {
    /**
     * Constructs a new <code>ModelEvaluation</code>.
     * Evaluation results of a model.
     * @alias module:model/ModelEvaluation
     */
    constructor() { 
        
        ModelEvaluation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ModelEvaluation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ModelEvaluation} obj Optional instance to populate.
     * @return {module:model/ModelEvaluation} The populated <code>ModelEvaluation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ModelEvaluation();

            if (data.hasOwnProperty('annotationSpecId')) {
                obj['annotationSpecId'] = ApiClient.convertToType(data['annotationSpecId'], 'String');
            }
            if (data.hasOwnProperty('classificationEvaluationMetrics')) {
                obj['classificationEvaluationMetrics'] = ClassificationEvaluationMetrics.constructFromObject(data['classificationEvaluationMetrics']);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('evaluatedExampleCount')) {
                obj['evaluatedExampleCount'] = ApiClient.convertToType(data['evaluatedExampleCount'], 'Number');
            }
            if (data.hasOwnProperty('imageObjectDetectionEvaluationMetrics')) {
                obj['imageObjectDetectionEvaluationMetrics'] = ImageObjectDetectionEvaluationMetrics.constructFromObject(data['imageObjectDetectionEvaluationMetrics']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('regressionEvaluationMetrics')) {
                obj['regressionEvaluationMetrics'] = RegressionEvaluationMetrics.constructFromObject(data['regressionEvaluationMetrics']);
            }
            if (data.hasOwnProperty('textExtractionEvaluationMetrics')) {
                obj['textExtractionEvaluationMetrics'] = TextExtractionEvaluationMetrics.constructFromObject(data['textExtractionEvaluationMetrics']);
            }
            if (data.hasOwnProperty('textSentimentEvaluationMetrics')) {
                obj['textSentimentEvaluationMetrics'] = TextSentimentEvaluationMetrics.constructFromObject(data['textSentimentEvaluationMetrics']);
            }
            if (data.hasOwnProperty('translationEvaluationMetrics')) {
                obj['translationEvaluationMetrics'] = TranslationEvaluationMetrics.constructFromObject(data['translationEvaluationMetrics']);
            }
            if (data.hasOwnProperty('videoObjectTrackingEvaluationMetrics')) {
                obj['videoObjectTrackingEvaluationMetrics'] = VideoObjectTrackingEvaluationMetrics.constructFromObject(data['videoObjectTrackingEvaluationMetrics']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ModelEvaluation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ModelEvaluation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationSpecId'] && !(typeof data['annotationSpecId'] === 'string' || data['annotationSpecId'] instanceof String)) {
            throw new Error("Expected the field `annotationSpecId` to be a primitive type in the JSON string but got " + data['annotationSpecId']);
        }
        // validate the optional field `classificationEvaluationMetrics`
        if (data['classificationEvaluationMetrics']) { // data not null
          ClassificationEvaluationMetrics.validateJSON(data['classificationEvaluationMetrics']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `imageObjectDetectionEvaluationMetrics`
        if (data['imageObjectDetectionEvaluationMetrics']) { // data not null
          ImageObjectDetectionEvaluationMetrics.validateJSON(data['imageObjectDetectionEvaluationMetrics']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `regressionEvaluationMetrics`
        if (data['regressionEvaluationMetrics']) { // data not null
          RegressionEvaluationMetrics.validateJSON(data['regressionEvaluationMetrics']);
        }
        // validate the optional field `textExtractionEvaluationMetrics`
        if (data['textExtractionEvaluationMetrics']) { // data not null
          TextExtractionEvaluationMetrics.validateJSON(data['textExtractionEvaluationMetrics']);
        }
        // validate the optional field `textSentimentEvaluationMetrics`
        if (data['textSentimentEvaluationMetrics']) { // data not null
          TextSentimentEvaluationMetrics.validateJSON(data['textSentimentEvaluationMetrics']);
        }
        // validate the optional field `translationEvaluationMetrics`
        if (data['translationEvaluationMetrics']) { // data not null
          TranslationEvaluationMetrics.validateJSON(data['translationEvaluationMetrics']);
        }
        // validate the optional field `videoObjectTrackingEvaluationMetrics`
        if (data['videoObjectTrackingEvaluationMetrics']) { // data not null
          VideoObjectTrackingEvaluationMetrics.validateJSON(data['videoObjectTrackingEvaluationMetrics']);
        }

        return true;
    }


}



/**
 * Output only. The ID of the annotation spec that the model evaluation applies to. The The ID is empty for the overall model evaluation. For Tables annotation specs in the dataset do not exist and this ID is always not set, but for CLASSIFICATION prediction_type-s the display_name field is used.
 * @member {String} annotationSpecId
 */
ModelEvaluation.prototype['annotationSpecId'] = undefined;

/**
 * @member {module:model/ClassificationEvaluationMetrics} classificationEvaluationMetrics
 */
ModelEvaluation.prototype['classificationEvaluationMetrics'] = undefined;

/**
 * Output only. Timestamp when this model evaluation was created.
 * @member {String} createTime
 */
ModelEvaluation.prototype['createTime'] = undefined;

/**
 * Output only. The value of display_name at the moment when the model was trained. Because this field returns a value at model training time, for different models trained from the same dataset, the values may differ, since display names could had been changed between the two model's trainings. For Tables CLASSIFICATION prediction_type-s distinct values of the target column at the moment of the model evaluation are populated here. The display_name is empty for the overall model evaluation.
 * @member {String} displayName
 */
ModelEvaluation.prototype['displayName'] = undefined;

/**
 * Output only. The number of examples used for model evaluation, i.e. for which ground truth from time of model creation is compared against the predicted annotations created by the model. For overall ModelEvaluation (i.e. with annotation_spec_id not set) this is the total number of all examples used for evaluation. Otherwise, this is the count of examples that according to the ground truth were annotated by the annotation_spec_id.
 * @member {Number} evaluatedExampleCount
 */
ModelEvaluation.prototype['evaluatedExampleCount'] = undefined;

/**
 * @member {module:model/ImageObjectDetectionEvaluationMetrics} imageObjectDetectionEvaluationMetrics
 */
ModelEvaluation.prototype['imageObjectDetectionEvaluationMetrics'] = undefined;

/**
 * Output only. Resource name of the model evaluation. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}/modelEvaluations/{model_evaluation_id}`
 * @member {String} name
 */
ModelEvaluation.prototype['name'] = undefined;

/**
 * @member {module:model/RegressionEvaluationMetrics} regressionEvaluationMetrics
 */
ModelEvaluation.prototype['regressionEvaluationMetrics'] = undefined;

/**
 * @member {module:model/TextExtractionEvaluationMetrics} textExtractionEvaluationMetrics
 */
ModelEvaluation.prototype['textExtractionEvaluationMetrics'] = undefined;

/**
 * @member {module:model/TextSentimentEvaluationMetrics} textSentimentEvaluationMetrics
 */
ModelEvaluation.prototype['textSentimentEvaluationMetrics'] = undefined;

/**
 * @member {module:model/TranslationEvaluationMetrics} translationEvaluationMetrics
 */
ModelEvaluation.prototype['translationEvaluationMetrics'] = undefined;

/**
 * @member {module:model/VideoObjectTrackingEvaluationMetrics} videoObjectTrackingEvaluationMetrics
 */
ModelEvaluation.prototype['videoObjectTrackingEvaluationMetrics'] = undefined;






export default ModelEvaluation;

