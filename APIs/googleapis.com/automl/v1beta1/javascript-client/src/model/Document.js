/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DocumentDimensions from './DocumentDimensions';
import DocumentInputConfig from './DocumentInputConfig';
import Layout from './Layout';
import TextSnippet from './TextSnippet';

/**
 * The Document model module.
 * @module model/Document
 * @version v1beta1
 */
class Document {
    /**
     * Constructs a new <code>Document</code>.
     * A structured text document e.g. a PDF.
     * @alias module:model/Document
     */
    constructor() { 
        
        Document.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Document</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Document} obj Optional instance to populate.
     * @return {module:model/Document} The populated <code>Document</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Document();

            if (data.hasOwnProperty('documentDimensions')) {
                obj['documentDimensions'] = DocumentDimensions.constructFromObject(data['documentDimensions']);
            }
            if (data.hasOwnProperty('documentText')) {
                obj['documentText'] = TextSnippet.constructFromObject(data['documentText']);
            }
            if (data.hasOwnProperty('inputConfig')) {
                obj['inputConfig'] = DocumentInputConfig.constructFromObject(data['inputConfig']);
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], [Layout]);
            }
            if (data.hasOwnProperty('pageCount')) {
                obj['pageCount'] = ApiClient.convertToType(data['pageCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Document</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Document</code>.
     */
    static validateJSON(data) {
        // validate the optional field `documentDimensions`
        if (data['documentDimensions']) { // data not null
          DocumentDimensions.validateJSON(data['documentDimensions']);
        }
        // validate the optional field `documentText`
        if (data['documentText']) { // data not null
          TextSnippet.validateJSON(data['documentText']);
        }
        // validate the optional field `inputConfig`
        if (data['inputConfig']) { // data not null
          DocumentInputConfig.validateJSON(data['inputConfig']);
        }
        if (data['layout']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['layout'])) {
                throw new Error("Expected the field `layout` to be an array in the JSON data but got " + data['layout']);
            }
            // validate the optional field `layout` (array)
            for (const item of data['layout']) {
                Layout.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/DocumentDimensions} documentDimensions
 */
Document.prototype['documentDimensions'] = undefined;

/**
 * @member {module:model/TextSnippet} documentText
 */
Document.prototype['documentText'] = undefined;

/**
 * @member {module:model/DocumentInputConfig} inputConfig
 */
Document.prototype['inputConfig'] = undefined;

/**
 * Describes the layout of the document. Sorted by page_number.
 * @member {Array.<module:model/Layout>} layout
 */
Document.prototype['layout'] = undefined;

/**
 * Number of pages in the document.
 * @member {Number} pageCount
 */
Document.prototype['pageCount'] = undefined;






export default Document;

