/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationAnnotation from './ClassificationAnnotation';
import TimeSegment from './TimeSegment';

/**
 * The VideoClassificationAnnotation model module.
 * @module model/VideoClassificationAnnotation
 * @version v1beta1
 */
class VideoClassificationAnnotation {
    /**
     * Constructs a new <code>VideoClassificationAnnotation</code>.
     * Contains annotation details specific to video classification.
     * @alias module:model/VideoClassificationAnnotation
     */
    constructor() { 
        
        VideoClassificationAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VideoClassificationAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoClassificationAnnotation} obj Optional instance to populate.
     * @return {module:model/VideoClassificationAnnotation} The populated <code>VideoClassificationAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoClassificationAnnotation();

            if (data.hasOwnProperty('classificationAnnotation')) {
                obj['classificationAnnotation'] = ClassificationAnnotation.constructFromObject(data['classificationAnnotation']);
            }
            if (data.hasOwnProperty('timeSegment')) {
                obj['timeSegment'] = TimeSegment.constructFromObject(data['timeSegment']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoClassificationAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoClassificationAnnotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `classificationAnnotation`
        if (data['classificationAnnotation']) { // data not null
          ClassificationAnnotation.validateJSON(data['classificationAnnotation']);
        }
        // validate the optional field `timeSegment`
        if (data['timeSegment']) { // data not null
          TimeSegment.validateJSON(data['timeSegment']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/ClassificationAnnotation} classificationAnnotation
 */
VideoClassificationAnnotation.prototype['classificationAnnotation'] = undefined;

/**
 * @member {module:model/TimeSegment} timeSegment
 */
VideoClassificationAnnotation.prototype['timeSegment'] = undefined;

/**
 * Output only. Expresses the type of video classification. Possible values: * `segment` - Classification done on a specified by user time segment of a video. AnnotationSpec is answered to be present in that time segment, if it is present in any part of it. The video ML model evaluations are done only for this type of classification. * `shot`- Shot-level classification. AutoML Video Intelligence determines the boundaries for each camera shot in the entire segment of the video that user specified in the request configuration. AutoML Video Intelligence then returns labels and their confidence scores for each detected shot, along with the start and end time of the shot. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality. * `1s_interval` - AutoML Video Intelligence returns labels and their confidence scores for each second of the entire segment of the video that user specified in the request configuration. WARNING: Model evaluation is not done for this classification type, the quality of it depends on training data, but there are no metrics provided to describe that quality.
 * @member {String} type
 */
VideoClassificationAnnotation.prototype['type'] = undefined;






export default VideoClassificationAnnotation;

