/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ClassificationEvaluationMetricsConfidenceMetricsEntry model module.
 * @module model/ClassificationEvaluationMetricsConfidenceMetricsEntry
 * @version v1beta1
 */
class ClassificationEvaluationMetricsConfidenceMetricsEntry {
    /**
     * Constructs a new <code>ClassificationEvaluationMetricsConfidenceMetricsEntry</code>.
     * Metrics for a single confidence threshold.
     * @alias module:model/ClassificationEvaluationMetricsConfidenceMetricsEntry
     */
    constructor() { 
        
        ClassificationEvaluationMetricsConfidenceMetricsEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClassificationEvaluationMetricsConfidenceMetricsEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClassificationEvaluationMetricsConfidenceMetricsEntry} obj Optional instance to populate.
     * @return {module:model/ClassificationEvaluationMetricsConfidenceMetricsEntry} The populated <code>ClassificationEvaluationMetricsConfidenceMetricsEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClassificationEvaluationMetricsConfidenceMetricsEntry();

            if (data.hasOwnProperty('confidenceThreshold')) {
                obj['confidenceThreshold'] = ApiClient.convertToType(data['confidenceThreshold'], 'Number');
            }
            if (data.hasOwnProperty('f1Score')) {
                obj['f1Score'] = ApiClient.convertToType(data['f1Score'], 'Number');
            }
            if (data.hasOwnProperty('f1ScoreAt1')) {
                obj['f1ScoreAt1'] = ApiClient.convertToType(data['f1ScoreAt1'], 'Number');
            }
            if (data.hasOwnProperty('falseNegativeCount')) {
                obj['falseNegativeCount'] = ApiClient.convertToType(data['falseNegativeCount'], 'String');
            }
            if (data.hasOwnProperty('falsePositiveCount')) {
                obj['falsePositiveCount'] = ApiClient.convertToType(data['falsePositiveCount'], 'String');
            }
            if (data.hasOwnProperty('falsePositiveRate')) {
                obj['falsePositiveRate'] = ApiClient.convertToType(data['falsePositiveRate'], 'Number');
            }
            if (data.hasOwnProperty('falsePositiveRateAt1')) {
                obj['falsePositiveRateAt1'] = ApiClient.convertToType(data['falsePositiveRateAt1'], 'Number');
            }
            if (data.hasOwnProperty('positionThreshold')) {
                obj['positionThreshold'] = ApiClient.convertToType(data['positionThreshold'], 'Number');
            }
            if (data.hasOwnProperty('precision')) {
                obj['precision'] = ApiClient.convertToType(data['precision'], 'Number');
            }
            if (data.hasOwnProperty('precisionAt1')) {
                obj['precisionAt1'] = ApiClient.convertToType(data['precisionAt1'], 'Number');
            }
            if (data.hasOwnProperty('recall')) {
                obj['recall'] = ApiClient.convertToType(data['recall'], 'Number');
            }
            if (data.hasOwnProperty('recallAt1')) {
                obj['recallAt1'] = ApiClient.convertToType(data['recallAt1'], 'Number');
            }
            if (data.hasOwnProperty('trueNegativeCount')) {
                obj['trueNegativeCount'] = ApiClient.convertToType(data['trueNegativeCount'], 'String');
            }
            if (data.hasOwnProperty('truePositiveCount')) {
                obj['truePositiveCount'] = ApiClient.convertToType(data['truePositiveCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClassificationEvaluationMetricsConfidenceMetricsEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClassificationEvaluationMetricsConfidenceMetricsEntry</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['falseNegativeCount'] && !(typeof data['falseNegativeCount'] === 'string' || data['falseNegativeCount'] instanceof String)) {
            throw new Error("Expected the field `falseNegativeCount` to be a primitive type in the JSON string but got " + data['falseNegativeCount']);
        }
        // ensure the json data is a string
        if (data['falsePositiveCount'] && !(typeof data['falsePositiveCount'] === 'string' || data['falsePositiveCount'] instanceof String)) {
            throw new Error("Expected the field `falsePositiveCount` to be a primitive type in the JSON string but got " + data['falsePositiveCount']);
        }
        // ensure the json data is a string
        if (data['trueNegativeCount'] && !(typeof data['trueNegativeCount'] === 'string' || data['trueNegativeCount'] instanceof String)) {
            throw new Error("Expected the field `trueNegativeCount` to be a primitive type in the JSON string but got " + data['trueNegativeCount']);
        }
        // ensure the json data is a string
        if (data['truePositiveCount'] && !(typeof data['truePositiveCount'] === 'string' || data['truePositiveCount'] instanceof String)) {
            throw new Error("Expected the field `truePositiveCount` to be a primitive type in the JSON string but got " + data['truePositiveCount']);
        }

        return true;
    }


}



/**
 * Output only. Metrics are computed with an assumption that the model never returns predictions with score lower than this value.
 * @member {Number} confidenceThreshold
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['confidenceThreshold'] = undefined;

/**
 * Output only. The harmonic mean of recall and precision.
 * @member {Number} f1Score
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['f1Score'] = undefined;

/**
 * Output only. The harmonic mean of recall_at1 and precision_at1.
 * @member {Number} f1ScoreAt1
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['f1ScoreAt1'] = undefined;

/**
 * Output only. The number of ground truth labels that are not matched by a model created label.
 * @member {String} falseNegativeCount
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['falseNegativeCount'] = undefined;

/**
 * Output only. The number of model created labels that do not match a ground truth label.
 * @member {String} falsePositiveCount
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['falsePositiveCount'] = undefined;

/**
 * Output only. False Positive Rate for the given confidence threshold.
 * @member {Number} falsePositiveRate
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['falsePositiveRate'] = undefined;

/**
 * Output only. The False Positive Rate when only considering the label that has the highest prediction score and not below the confidence threshold for each example.
 * @member {Number} falsePositiveRateAt1
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['falsePositiveRateAt1'] = undefined;

/**
 * Output only. Metrics are computed with an assumption that the model always returns at most this many predictions (ordered by their score, descendingly), but they all still need to meet the confidence_threshold.
 * @member {Number} positionThreshold
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['positionThreshold'] = undefined;

/**
 * Output only. Precision for the given confidence threshold.
 * @member {Number} precision
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['precision'] = undefined;

/**
 * Output only. The precision when only considering the label that has the highest prediction score and not below the confidence threshold for each example.
 * @member {Number} precisionAt1
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['precisionAt1'] = undefined;

/**
 * Output only. Recall (True Positive Rate) for the given confidence threshold.
 * @member {Number} recall
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['recall'] = undefined;

/**
 * Output only. The Recall (True Positive Rate) when only considering the label that has the highest prediction score and not below the confidence threshold for each example.
 * @member {Number} recallAt1
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['recallAt1'] = undefined;

/**
 * Output only. The number of labels that were not created by the model, but if they would, they would not match a ground truth label.
 * @member {String} trueNegativeCount
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['trueNegativeCount'] = undefined;

/**
 * Output only. The number of model created labels that match a ground truth label.
 * @member {String} truePositiveCount
 */
ClassificationEvaluationMetricsConfidenceMetricsEntry.prototype['truePositiveCount'] = undefined;






export default ClassificationEvaluationMetricsConfidenceMetricsEntry;

