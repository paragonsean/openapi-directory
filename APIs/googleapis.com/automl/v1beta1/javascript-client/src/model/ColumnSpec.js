/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CorrelatedColumn from './CorrelatedColumn';
import DataStats from './DataStats';
import DataType from './DataType';

/**
 * The ColumnSpec model module.
 * @module model/ColumnSpec
 * @version v1beta1
 */
class ColumnSpec {
    /**
     * Constructs a new <code>ColumnSpec</code>.
     * A representation of a column in a relational table. When listing them, column specs are returned in the same order in which they were given on import . Used by: * Tables
     * @alias module:model/ColumnSpec
     */
    constructor() { 
        
        ColumnSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ColumnSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ColumnSpec} obj Optional instance to populate.
     * @return {module:model/ColumnSpec} The populated <code>ColumnSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ColumnSpec();

            if (data.hasOwnProperty('dataStats')) {
                obj['dataStats'] = DataStats.constructFromObject(data['dataStats']);
            }
            if (data.hasOwnProperty('dataType')) {
                obj['dataType'] = DataType.constructFromObject(data['dataType']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('topCorrelatedColumns')) {
                obj['topCorrelatedColumns'] = ApiClient.convertToType(data['topCorrelatedColumns'], [CorrelatedColumn]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ColumnSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ColumnSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dataStats`
        if (data['dataStats']) { // data not null
          DataStats.validateJSON(data['dataStats']);
        }
        // validate the optional field `dataType`
        if (data['dataType']) { // data not null
          DataType.validateJSON(data['dataType']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['topCorrelatedColumns']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['topCorrelatedColumns'])) {
                throw new Error("Expected the field `topCorrelatedColumns` to be an array in the JSON data but got " + data['topCorrelatedColumns']);
            }
            // validate the optional field `topCorrelatedColumns` (array)
            for (const item of data['topCorrelatedColumns']) {
                CorrelatedColumn.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/DataStats} dataStats
 */
ColumnSpec.prototype['dataStats'] = undefined;

/**
 * @member {module:model/DataType} dataType
 */
ColumnSpec.prototype['dataType'] = undefined;

/**
 * Output only. The name of the column to show in the interface. The name can be up to 100 characters long and can consist only of ASCII Latin letters A-Z and a-z, ASCII digits 0-9, underscores(_), and forward slashes(/), and must start with a letter or a digit.
 * @member {String} displayName
 */
ColumnSpec.prototype['displayName'] = undefined;

/**
 * Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.
 * @member {String} etag
 */
ColumnSpec.prototype['etag'] = undefined;

/**
 * Output only. The resource name of the column specs. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}/columnSpecs/{column_spec_id}`
 * @member {String} name
 */
ColumnSpec.prototype['name'] = undefined;

/**
 * Deprecated.
 * @member {Array.<module:model/CorrelatedColumn>} topCorrelatedColumns
 */
ColumnSpec.prototype['topCorrelatedColumns'] = undefined;






export default ColumnSpec;

