/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ColumnSpec from './ColumnSpec';
import TablesModelColumnInfo from './TablesModelColumnInfo';

/**
 * The TablesModelMetadata model module.
 * @module model/TablesModelMetadata
 * @version v1beta1
 */
class TablesModelMetadata {
    /**
     * Constructs a new <code>TablesModelMetadata</code>.
     * Model metadata specific to AutoML Tables.
     * @alias module:model/TablesModelMetadata
     */
    constructor() { 
        
        TablesModelMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TablesModelMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TablesModelMetadata} obj Optional instance to populate.
     * @return {module:model/TablesModelMetadata} The populated <code>TablesModelMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TablesModelMetadata();

            if (data.hasOwnProperty('disableEarlyStopping')) {
                obj['disableEarlyStopping'] = ApiClient.convertToType(data['disableEarlyStopping'], 'Boolean');
            }
            if (data.hasOwnProperty('inputFeatureColumnSpecs')) {
                obj['inputFeatureColumnSpecs'] = ApiClient.convertToType(data['inputFeatureColumnSpecs'], [ColumnSpec]);
            }
            if (data.hasOwnProperty('optimizationObjective')) {
                obj['optimizationObjective'] = ApiClient.convertToType(data['optimizationObjective'], 'String');
            }
            if (data.hasOwnProperty('optimizationObjectivePrecisionValue')) {
                obj['optimizationObjectivePrecisionValue'] = ApiClient.convertToType(data['optimizationObjectivePrecisionValue'], 'Number');
            }
            if (data.hasOwnProperty('optimizationObjectiveRecallValue')) {
                obj['optimizationObjectiveRecallValue'] = ApiClient.convertToType(data['optimizationObjectiveRecallValue'], 'Number');
            }
            if (data.hasOwnProperty('tablesModelColumnInfo')) {
                obj['tablesModelColumnInfo'] = ApiClient.convertToType(data['tablesModelColumnInfo'], [TablesModelColumnInfo]);
            }
            if (data.hasOwnProperty('targetColumnSpec')) {
                obj['targetColumnSpec'] = ColumnSpec.constructFromObject(data['targetColumnSpec']);
            }
            if (data.hasOwnProperty('trainBudgetMilliNodeHours')) {
                obj['trainBudgetMilliNodeHours'] = ApiClient.convertToType(data['trainBudgetMilliNodeHours'], 'String');
            }
            if (data.hasOwnProperty('trainCostMilliNodeHours')) {
                obj['trainCostMilliNodeHours'] = ApiClient.convertToType(data['trainCostMilliNodeHours'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TablesModelMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TablesModelMetadata</code>.
     */
    static validateJSON(data) {
        if (data['inputFeatureColumnSpecs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputFeatureColumnSpecs'])) {
                throw new Error("Expected the field `inputFeatureColumnSpecs` to be an array in the JSON data but got " + data['inputFeatureColumnSpecs']);
            }
            // validate the optional field `inputFeatureColumnSpecs` (array)
            for (const item of data['inputFeatureColumnSpecs']) {
                ColumnSpec.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['optimizationObjective'] && !(typeof data['optimizationObjective'] === 'string' || data['optimizationObjective'] instanceof String)) {
            throw new Error("Expected the field `optimizationObjective` to be a primitive type in the JSON string but got " + data['optimizationObjective']);
        }
        if (data['tablesModelColumnInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tablesModelColumnInfo'])) {
                throw new Error("Expected the field `tablesModelColumnInfo` to be an array in the JSON data but got " + data['tablesModelColumnInfo']);
            }
            // validate the optional field `tablesModelColumnInfo` (array)
            for (const item of data['tablesModelColumnInfo']) {
                TablesModelColumnInfo.validateJSON(item);
            };
        }
        // validate the optional field `targetColumnSpec`
        if (data['targetColumnSpec']) { // data not null
          ColumnSpec.validateJSON(data['targetColumnSpec']);
        }
        // ensure the json data is a string
        if (data['trainBudgetMilliNodeHours'] && !(typeof data['trainBudgetMilliNodeHours'] === 'string' || data['trainBudgetMilliNodeHours'] instanceof String)) {
            throw new Error("Expected the field `trainBudgetMilliNodeHours` to be a primitive type in the JSON string but got " + data['trainBudgetMilliNodeHours']);
        }
        // ensure the json data is a string
        if (data['trainCostMilliNodeHours'] && !(typeof data['trainCostMilliNodeHours'] === 'string' || data['trainCostMilliNodeHours'] instanceof String)) {
            throw new Error("Expected the field `trainCostMilliNodeHours` to be a primitive type in the JSON string but got " + data['trainCostMilliNodeHours']);
        }

        return true;
    }


}



/**
 * Use the entire training budget. This disables the early stopping feature. By default, the early stopping feature is enabled, which means that AutoML Tables might stop training before the entire training budget has been used.
 * @member {Boolean} disableEarlyStopping
 */
TablesModelMetadata.prototype['disableEarlyStopping'] = undefined;

/**
 * Column specs of the dataset's primary table's columns, on which the model is trained and which are used as the input for predictions. The target_column as well as, according to dataset's state upon model creation, weight_column, and ml_use_column must never be included here. Only 3 fields are used: * name - May be set on CreateModel, if set only the columns specified are used, otherwise all primary table's columns (except the ones listed above) are used for the training and prediction input. * display_name - Output only. * data_type - Output only.
 * @member {Array.<module:model/ColumnSpec>} inputFeatureColumnSpecs
 */
TablesModelMetadata.prototype['inputFeatureColumnSpecs'] = undefined;

/**
 * Objective function the model is optimizing towards. The training process creates a model that maximizes/minimizes the value of the objective function over the validation set. The supported optimization objectives depend on the prediction type. If the field is not set, a default objective function is used. CLASSIFICATION_BINARY: \"MAXIMIZE_AU_ROC\" (default) - Maximize the area under the receiver operating characteristic (ROC) curve. \"MINIMIZE_LOG_LOSS\" - Minimize log loss. \"MAXIMIZE_AU_PRC\" - Maximize the area under the precision-recall curve. \"MAXIMIZE_PRECISION_AT_RECALL\" - Maximize precision for a specified recall value. \"MAXIMIZE_RECALL_AT_PRECISION\" - Maximize recall for a specified precision value. CLASSIFICATION_MULTI_CLASS : \"MINIMIZE_LOG_LOSS\" (default) - Minimize log loss. REGRESSION: \"MINIMIZE_RMSE\" (default) - Minimize root-mean-squared error (RMSE). \"MINIMIZE_MAE\" - Minimize mean-absolute error (MAE). \"MINIMIZE_RMSLE\" - Minimize root-mean-squared log error (RMSLE).
 * @member {String} optimizationObjective
 */
TablesModelMetadata.prototype['optimizationObjective'] = undefined;

/**
 * Required when optimization_objective is \"MAXIMIZE_RECALL_AT_PRECISION\". Must be between 0 and 1, inclusive.
 * @member {Number} optimizationObjectivePrecisionValue
 */
TablesModelMetadata.prototype['optimizationObjectivePrecisionValue'] = undefined;

/**
 * Required when optimization_objective is \"MAXIMIZE_PRECISION_AT_RECALL\". Must be between 0 and 1, inclusive.
 * @member {Number} optimizationObjectiveRecallValue
 */
TablesModelMetadata.prototype['optimizationObjectiveRecallValue'] = undefined;

/**
 * Output only. Auxiliary information for each of the input_feature_column_specs with respect to this particular model.
 * @member {Array.<module:model/TablesModelColumnInfo>} tablesModelColumnInfo
 */
TablesModelMetadata.prototype['tablesModelColumnInfo'] = undefined;

/**
 * @member {module:model/ColumnSpec} targetColumnSpec
 */
TablesModelMetadata.prototype['targetColumnSpec'] = undefined;

/**
 * Required. The train budget of creating this model, expressed in milli node hours i.e. 1,000 value in this field means 1 node hour. The training cost of the model will not exceed this budget. The final cost will be attempted to be close to the budget, though may end up being (even) noticeably smaller - at the backend's discretion. This especially may happen when further model training ceases to provide any improvements. If the budget is set to a value known to be insufficient to train a model for the given dataset, the training won't be attempted and will error. The train budget must be between 1,000 and 72,000 milli node hours, inclusive.
 * @member {String} trainBudgetMilliNodeHours
 */
TablesModelMetadata.prototype['trainBudgetMilliNodeHours'] = undefined;

/**
 * Output only. The actual training cost of the model, expressed in milli node hours, i.e. 1,000 value in this field means 1 node hour. Guaranteed to not exceed the train budget.
 * @member {String} trainCostMilliNodeHours
 */
TablesModelMetadata.prototype['trainCostMilliNodeHours'] = undefined;






export default TablesModelMetadata;

