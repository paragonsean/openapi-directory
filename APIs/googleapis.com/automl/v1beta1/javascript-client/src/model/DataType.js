/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import StructType from './StructType';

/**
 * The DataType model module.
 * @module model/DataType
 * @version v1beta1
 */
class DataType {
    /**
     * Constructs a new <code>DataType</code>.
     * Indicated the type of data that can be stored in a structured data entity (e.g. a table).
     * @alias module:model/DataType
     */
    constructor() { 
        
        DataType.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DataType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataType} obj Optional instance to populate.
     * @return {module:model/DataType} The populated <code>DataType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataType();

            if (data.hasOwnProperty('listElementType')) {
                obj['listElementType'] = DataType.constructFromObject(data['listElementType']);
            }
            if (data.hasOwnProperty('nullable')) {
                obj['nullable'] = ApiClient.convertToType(data['nullable'], 'Boolean');
            }
            if (data.hasOwnProperty('structType')) {
                obj['structType'] = StructType.constructFromObject(data['structType']);
            }
            if (data.hasOwnProperty('timeFormat')) {
                obj['timeFormat'] = ApiClient.convertToType(data['timeFormat'], 'String');
            }
            if (data.hasOwnProperty('typeCode')) {
                obj['typeCode'] = ApiClient.convertToType(data['typeCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataType</code>.
     */
    static validateJSON(data) {
        // validate the optional field `listElementType`
        if (data['listElementType']) { // data not null
          DataType.validateJSON(data['listElementType']);
        }
        // validate the optional field `structType`
        if (data['structType']) { // data not null
          StructType.validateJSON(data['structType']);
        }
        // ensure the json data is a string
        if (data['timeFormat'] && !(typeof data['timeFormat'] === 'string' || data['timeFormat'] instanceof String)) {
            throw new Error("Expected the field `timeFormat` to be a primitive type in the JSON string but got " + data['timeFormat']);
        }
        // ensure the json data is a string
        if (data['typeCode'] && !(typeof data['typeCode'] === 'string' || data['typeCode'] instanceof String)) {
            throw new Error("Expected the field `typeCode` to be a primitive type in the JSON string but got " + data['typeCode']);
        }

        return true;
    }


}



/**
 * @member {module:model/DataType} listElementType
 */
DataType.prototype['listElementType'] = undefined;

/**
 * If true, this DataType can also be `NULL`. In .CSV files `NULL` value is expressed as an empty string.
 * @member {Boolean} nullable
 */
DataType.prototype['nullable'] = undefined;

/**
 * @member {module:model/StructType} structType
 */
DataType.prototype['structType'] = undefined;

/**
 * If type_code == TIMESTAMP then `time_format` provides the format in which that time field is expressed. The time_format must either be one of: * `UNIX_SECONDS` * `UNIX_MILLISECONDS` * `UNIX_MICROSECONDS` * `UNIX_NANOSECONDS` (for respectively number of seconds, milliseconds, microseconds and nanoseconds since start of the Unix epoch); or be written in `strftime` syntax. If time_format is not set, then the default format as described on the type_code is used.
 * @member {String} timeFormat
 */
DataType.prototype['timeFormat'] = undefined;

/**
 * Required. The TypeCode for this type.
 * @member {module:model/DataType.TypeCodeEnum} typeCode
 */
DataType.prototype['typeCode'] = undefined;





/**
 * Allowed values for the <code>typeCode</code> property.
 * @enum {String}
 * @readonly
 */
DataType['TypeCodeEnum'] = {

    /**
     * value: "TYPE_CODE_UNSPECIFIED"
     * @const
     */
    "TYPE_CODE_UNSPECIFIED": "TYPE_CODE_UNSPECIFIED",

    /**
     * value: "FLOAT64"
     * @const
     */
    "FLOAT64": "FLOAT64",

    /**
     * value: "TIMESTAMP"
     * @const
     */
    "TIMESTAMP": "TIMESTAMP",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "ARRAY"
     * @const
     */
    "ARRAY": "ARRAY",

    /**
     * value: "STRUCT"
     * @const
     */
    "STRUCT": "STRUCT",

    /**
     * value: "CATEGORY"
     * @const
     */
    "CATEGORY": "CATEGORY"
};



export default DataType;

