/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BigQueryDestination from './BigQueryDestination';
import GcsDestination from './GcsDestination';

/**
 * The OutputConfig model module.
 * @module model/OutputConfig
 * @version v1beta1
 */
class OutputConfig {
    /**
     * Constructs a new <code>OutputConfig</code>.
     * * For Translation: CSV file &#x60;translation.csv&#x60;, with each line in format: ML_USE,GCS_FILE_PATH GCS_FILE_PATH leads to a .TSV file which describes examples that have given ML_USE, using the following row format per line: TEXT_SNIPPET (in source language) \\t TEXT_SNIPPET (in target language) * For Tables: Output depends on whether the dataset was imported from GCS or BigQuery. GCS case: gcs_destination must be set. Exported are CSV file(s) &#x60;tables_1.csv&#x60;, &#x60;tables_2.csv&#x60;,...,&#x60;tables_N.csv&#x60; with each having as header line the table&#39;s column names, and all other lines contain values for the header columns. BigQuery case: bigquery_destination pointing to a BigQuery project must be set. In the given project a new dataset will be created with name &#x60;export_data__&#x60; where will be made BigQuery-dataset-name compatible (e.g. most special characters will become underscores), and timestamp will be in YYYY_MM_DDThh_mm_ss_sssZ \&quot;based on ISO-8601\&quot; format. In that dataset a new table called &#x60;primary_table&#x60; will be created, and filled with precisely the same data as this obtained on import.
     * @alias module:model/OutputConfig
     */
    constructor() { 
        
        OutputConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OutputConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OutputConfig} obj Optional instance to populate.
     * @return {module:model/OutputConfig} The populated <code>OutputConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OutputConfig();

            if (data.hasOwnProperty('bigqueryDestination')) {
                obj['bigqueryDestination'] = BigQueryDestination.constructFromObject(data['bigqueryDestination']);
            }
            if (data.hasOwnProperty('gcsDestination')) {
                obj['gcsDestination'] = GcsDestination.constructFromObject(data['gcsDestination']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OutputConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OutputConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bigqueryDestination`
        if (data['bigqueryDestination']) { // data not null
          BigQueryDestination.validateJSON(data['bigqueryDestination']);
        }
        // validate the optional field `gcsDestination`
        if (data['gcsDestination']) { // data not null
          GcsDestination.validateJSON(data['gcsDestination']);
        }

        return true;
    }


}



/**
 * @member {module:model/BigQueryDestination} bigqueryDestination
 */
OutputConfig.prototype['bigqueryDestination'] = undefined;

/**
 * @member {module:model/GcsDestination} gcsDestination
 */
OutputConfig.prototype['gcsDestination'] = undefined;






export default OutputConfig;

