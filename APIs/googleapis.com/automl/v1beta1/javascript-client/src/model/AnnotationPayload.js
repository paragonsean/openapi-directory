/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClassificationAnnotation from './ClassificationAnnotation';
import ImageObjectDetectionAnnotation from './ImageObjectDetectionAnnotation';
import TablesAnnotation from './TablesAnnotation';
import TextExtractionAnnotation from './TextExtractionAnnotation';
import TextSentimentAnnotation from './TextSentimentAnnotation';
import TranslationAnnotation from './TranslationAnnotation';
import VideoClassificationAnnotation from './VideoClassificationAnnotation';
import VideoObjectTrackingAnnotation from './VideoObjectTrackingAnnotation';

/**
 * The AnnotationPayload model module.
 * @module model/AnnotationPayload
 * @version v1beta1
 */
class AnnotationPayload {
    /**
     * Constructs a new <code>AnnotationPayload</code>.
     * Contains annotation information that is relevant to AutoML.
     * @alias module:model/AnnotationPayload
     */
    constructor() { 
        
        AnnotationPayload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnotationPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotationPayload} obj Optional instance to populate.
     * @return {module:model/AnnotationPayload} The populated <code>AnnotationPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotationPayload();

            if (data.hasOwnProperty('annotationSpecId')) {
                obj['annotationSpecId'] = ApiClient.convertToType(data['annotationSpecId'], 'String');
            }
            if (data.hasOwnProperty('classification')) {
                obj['classification'] = ClassificationAnnotation.constructFromObject(data['classification']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('imageObjectDetection')) {
                obj['imageObjectDetection'] = ImageObjectDetectionAnnotation.constructFromObject(data['imageObjectDetection']);
            }
            if (data.hasOwnProperty('tables')) {
                obj['tables'] = TablesAnnotation.constructFromObject(data['tables']);
            }
            if (data.hasOwnProperty('textExtraction')) {
                obj['textExtraction'] = TextExtractionAnnotation.constructFromObject(data['textExtraction']);
            }
            if (data.hasOwnProperty('textSentiment')) {
                obj['textSentiment'] = TextSentimentAnnotation.constructFromObject(data['textSentiment']);
            }
            if (data.hasOwnProperty('translation')) {
                obj['translation'] = TranslationAnnotation.constructFromObject(data['translation']);
            }
            if (data.hasOwnProperty('videoClassification')) {
                obj['videoClassification'] = VideoClassificationAnnotation.constructFromObject(data['videoClassification']);
            }
            if (data.hasOwnProperty('videoObjectTracking')) {
                obj['videoObjectTracking'] = VideoObjectTrackingAnnotation.constructFromObject(data['videoObjectTracking']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnotationPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnotationPayload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['annotationSpecId'] && !(typeof data['annotationSpecId'] === 'string' || data['annotationSpecId'] instanceof String)) {
            throw new Error("Expected the field `annotationSpecId` to be a primitive type in the JSON string but got " + data['annotationSpecId']);
        }
        // validate the optional field `classification`
        if (data['classification']) { // data not null
          ClassificationAnnotation.validateJSON(data['classification']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `imageObjectDetection`
        if (data['imageObjectDetection']) { // data not null
          ImageObjectDetectionAnnotation.validateJSON(data['imageObjectDetection']);
        }
        // validate the optional field `tables`
        if (data['tables']) { // data not null
          TablesAnnotation.validateJSON(data['tables']);
        }
        // validate the optional field `textExtraction`
        if (data['textExtraction']) { // data not null
          TextExtractionAnnotation.validateJSON(data['textExtraction']);
        }
        // validate the optional field `textSentiment`
        if (data['textSentiment']) { // data not null
          TextSentimentAnnotation.validateJSON(data['textSentiment']);
        }
        // validate the optional field `translation`
        if (data['translation']) { // data not null
          TranslationAnnotation.validateJSON(data['translation']);
        }
        // validate the optional field `videoClassification`
        if (data['videoClassification']) { // data not null
          VideoClassificationAnnotation.validateJSON(data['videoClassification']);
        }
        // validate the optional field `videoObjectTracking`
        if (data['videoObjectTracking']) { // data not null
          VideoObjectTrackingAnnotation.validateJSON(data['videoObjectTracking']);
        }

        return true;
    }


}



/**
 * Output only . The resource ID of the annotation spec that this annotation pertains to. The annotation spec comes from either an ancestor dataset, or the dataset that was used to train the model in use.
 * @member {String} annotationSpecId
 */
AnnotationPayload.prototype['annotationSpecId'] = undefined;

/**
 * @member {module:model/ClassificationAnnotation} classification
 */
AnnotationPayload.prototype['classification'] = undefined;

/**
 * Output only. The value of display_name when the model was trained. Because this field returns a value at model training time, for different models trained using the same dataset, the returned value could be different as model owner could update the `display_name` between any two model training.
 * @member {String} displayName
 */
AnnotationPayload.prototype['displayName'] = undefined;

/**
 * @member {module:model/ImageObjectDetectionAnnotation} imageObjectDetection
 */
AnnotationPayload.prototype['imageObjectDetection'] = undefined;

/**
 * @member {module:model/TablesAnnotation} tables
 */
AnnotationPayload.prototype['tables'] = undefined;

/**
 * @member {module:model/TextExtractionAnnotation} textExtraction
 */
AnnotationPayload.prototype['textExtraction'] = undefined;

/**
 * @member {module:model/TextSentimentAnnotation} textSentiment
 */
AnnotationPayload.prototype['textSentiment'] = undefined;

/**
 * @member {module:model/TranslationAnnotation} translation
 */
AnnotationPayload.prototype['translation'] = undefined;

/**
 * @member {module:model/VideoClassificationAnnotation} videoClassification
 */
AnnotationPayload.prototype['videoClassification'] = undefined;

/**
 * @member {module:model/VideoObjectTrackingAnnotation} videoObjectTracking
 */
AnnotationPayload.prototype['videoObjectTracking'] = undefined;






export default AnnotationPayload;

