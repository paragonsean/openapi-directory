/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageClassificationModelMetadata from './ImageClassificationModelMetadata';
import ImageObjectDetectionModelMetadata from './ImageObjectDetectionModelMetadata';
import TablesModelMetadata from './TablesModelMetadata';
import TextClassificationModelMetadata from './TextClassificationModelMetadata';
import TextExtractionModelMetadata from './TextExtractionModelMetadata';
import TranslationModelMetadata from './TranslationModelMetadata';

/**
 * The Model model module.
 * @module model/Model
 * @version v1beta1
 */
class Model {
    /**
     * Constructs a new <code>Model</code>.
     * API proto representing a trained machine learning model.
     * @alias module:model/Model
     */
    constructor() { 
        
        Model.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Model</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Model} obj Optional instance to populate.
     * @return {module:model/Model} The populated <code>Model</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Model();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('datasetId')) {
                obj['datasetId'] = ApiClient.convertToType(data['datasetId'], 'String');
            }
            if (data.hasOwnProperty('deploymentState')) {
                obj['deploymentState'] = ApiClient.convertToType(data['deploymentState'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('imageClassificationModelMetadata')) {
                obj['imageClassificationModelMetadata'] = ImageClassificationModelMetadata.constructFromObject(data['imageClassificationModelMetadata']);
            }
            if (data.hasOwnProperty('imageObjectDetectionModelMetadata')) {
                obj['imageObjectDetectionModelMetadata'] = ImageObjectDetectionModelMetadata.constructFromObject(data['imageObjectDetectionModelMetadata']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tablesModelMetadata')) {
                obj['tablesModelMetadata'] = TablesModelMetadata.constructFromObject(data['tablesModelMetadata']);
            }
            if (data.hasOwnProperty('textClassificationModelMetadata')) {
                obj['textClassificationModelMetadata'] = TextClassificationModelMetadata.constructFromObject(data['textClassificationModelMetadata']);
            }
            if (data.hasOwnProperty('textExtractionModelMetadata')) {
                obj['textExtractionModelMetadata'] = TextExtractionModelMetadata.constructFromObject(data['textExtractionModelMetadata']);
            }
            if (data.hasOwnProperty('textSentimentModelMetadata')) {
                obj['textSentimentModelMetadata'] = ApiClient.convertToType(data['textSentimentModelMetadata'], Object);
            }
            if (data.hasOwnProperty('trainExampleCount')) {
                obj['trainExampleCount'] = ApiClient.convertToType(data['trainExampleCount'], 'Number');
            }
            if (data.hasOwnProperty('translationModelMetadata')) {
                obj['translationModelMetadata'] = TranslationModelMetadata.constructFromObject(data['translationModelMetadata']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('validateExampleCount')) {
                obj['validateExampleCount'] = ApiClient.convertToType(data['validateExampleCount'], 'Number');
            }
            if (data.hasOwnProperty('videoClassificationModelMetadata')) {
                obj['videoClassificationModelMetadata'] = ApiClient.convertToType(data['videoClassificationModelMetadata'], Object);
            }
            if (data.hasOwnProperty('videoObjectTrackingModelMetadata')) {
                obj['videoObjectTrackingModelMetadata'] = ApiClient.convertToType(data['videoObjectTrackingModelMetadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Model</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Model</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['datasetId'] && !(typeof data['datasetId'] === 'string' || data['datasetId'] instanceof String)) {
            throw new Error("Expected the field `datasetId` to be a primitive type in the JSON string but got " + data['datasetId']);
        }
        // ensure the json data is a string
        if (data['deploymentState'] && !(typeof data['deploymentState'] === 'string' || data['deploymentState'] instanceof String)) {
            throw new Error("Expected the field `deploymentState` to be a primitive type in the JSON string but got " + data['deploymentState']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `imageClassificationModelMetadata`
        if (data['imageClassificationModelMetadata']) { // data not null
          ImageClassificationModelMetadata.validateJSON(data['imageClassificationModelMetadata']);
        }
        // validate the optional field `imageObjectDetectionModelMetadata`
        if (data['imageObjectDetectionModelMetadata']) { // data not null
          ImageObjectDetectionModelMetadata.validateJSON(data['imageObjectDetectionModelMetadata']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `tablesModelMetadata`
        if (data['tablesModelMetadata']) { // data not null
          TablesModelMetadata.validateJSON(data['tablesModelMetadata']);
        }
        // validate the optional field `textClassificationModelMetadata`
        if (data['textClassificationModelMetadata']) { // data not null
          TextClassificationModelMetadata.validateJSON(data['textClassificationModelMetadata']);
        }
        // validate the optional field `textExtractionModelMetadata`
        if (data['textExtractionModelMetadata']) { // data not null
          TextExtractionModelMetadata.validateJSON(data['textExtractionModelMetadata']);
        }
        // validate the optional field `translationModelMetadata`
        if (data['translationModelMetadata']) { // data not null
          TranslationModelMetadata.validateJSON(data['translationModelMetadata']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Timestamp when the model training finished and can be used for prediction.
 * @member {String} createTime
 */
Model.prototype['createTime'] = undefined;

/**
 * Required. The resource ID of the dataset used to create the model. The dataset must come from the same ancestor project and location.
 * @member {String} datasetId
 */
Model.prototype['datasetId'] = undefined;

/**
 * Output only. Deployment state of the model. A model can only serve prediction requests after it gets deployed.
 * @member {module:model/Model.DeploymentStateEnum} deploymentState
 */
Model.prototype['deploymentState'] = undefined;

/**
 * Required. The name of the model to show in the interface. The name can be up to 32 characters long and can consist only of ASCII Latin letters A-Z and a-z, underscores (_), and ASCII digits 0-9. It must start with a letter.
 * @member {String} displayName
 */
Model.prototype['displayName'] = undefined;

/**
 * @member {module:model/ImageClassificationModelMetadata} imageClassificationModelMetadata
 */
Model.prototype['imageClassificationModelMetadata'] = undefined;

/**
 * @member {module:model/ImageObjectDetectionModelMetadata} imageObjectDetectionModelMetadata
 */
Model.prototype['imageObjectDetectionModelMetadata'] = undefined;

/**
 * Output only. Resource name of the model. Format: `projects/{project_id}/locations/{location_id}/models/{model_id}`
 * @member {String} name
 */
Model.prototype['name'] = undefined;

/**
 * @member {module:model/TablesModelMetadata} tablesModelMetadata
 */
Model.prototype['tablesModelMetadata'] = undefined;

/**
 * @member {module:model/TextClassificationModelMetadata} textClassificationModelMetadata
 */
Model.prototype['textClassificationModelMetadata'] = undefined;

/**
 * @member {module:model/TextExtractionModelMetadata} textExtractionModelMetadata
 */
Model.prototype['textExtractionModelMetadata'] = undefined;

/**
 * Model metadata that is specific to text sentiment.
 * @member {Object} textSentimentModelMetadata
 */
Model.prototype['textSentimentModelMetadata'] = undefined;

/**
 * Output only. The number of examples in the training set used for the model creation.
 * @member {Number} trainExampleCount
 */
Model.prototype['trainExampleCount'] = undefined;

/**
 * @member {module:model/TranslationModelMetadata} translationModelMetadata
 */
Model.prototype['translationModelMetadata'] = undefined;

/**
 * Output only. Timestamp when this model was last updated.
 * @member {String} updateTime
 */
Model.prototype['updateTime'] = undefined;

/**
 * Output only. The number of examples in the validation set used for the model creation.
 * @member {Number} validateExampleCount
 */
Model.prototype['validateExampleCount'] = undefined;

/**
 * Model metadata specific to video classification.
 * @member {Object} videoClassificationModelMetadata
 */
Model.prototype['videoClassificationModelMetadata'] = undefined;

/**
 * Model metadata specific to video object tracking.
 * @member {Object} videoObjectTrackingModelMetadata
 */
Model.prototype['videoObjectTrackingModelMetadata'] = undefined;





/**
 * Allowed values for the <code>deploymentState</code> property.
 * @enum {String}
 * @readonly
 */
Model['DeploymentStateEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "DEPLOYED"
     * @const
     */
    "DEPLOYED": "DEPLOYED",

    /**
     * value: "UNDEPLOYED"
     * @const
     */
    "UNDEPLOYED": "UNDEPLOYED"
};



export default Model;

