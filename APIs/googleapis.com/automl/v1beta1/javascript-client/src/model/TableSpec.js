/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InputConfig from './InputConfig';

/**
 * The TableSpec model module.
 * @module model/TableSpec
 * @version v1beta1
 */
class TableSpec {
    /**
     * Constructs a new <code>TableSpec</code>.
     * A specification of a relational table. The table&#39;s schema is represented via its child column specs. It is pre-populated as part of ImportData by schema inference algorithm, the version of which is a required parameter of ImportData InputConfig. Note: While working with a table, at times the schema may be inconsistent with the data in the table (e.g. string in a FLOAT64 column). The consistency validation is done upon creation of a model. Used by: * Tables
     * @alias module:model/TableSpec
     */
    constructor() { 
        
        TableSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TableSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TableSpec} obj Optional instance to populate.
     * @return {module:model/TableSpec} The populated <code>TableSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TableSpec();

            if (data.hasOwnProperty('columnCount')) {
                obj['columnCount'] = ApiClient.convertToType(data['columnCount'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('inputConfigs')) {
                obj['inputConfigs'] = ApiClient.convertToType(data['inputConfigs'], [InputConfig]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rowCount')) {
                obj['rowCount'] = ApiClient.convertToType(data['rowCount'], 'String');
            }
            if (data.hasOwnProperty('timeColumnSpecId')) {
                obj['timeColumnSpecId'] = ApiClient.convertToType(data['timeColumnSpecId'], 'String');
            }
            if (data.hasOwnProperty('validRowCount')) {
                obj['validRowCount'] = ApiClient.convertToType(data['validRowCount'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TableSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TableSpec</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['columnCount'] && !(typeof data['columnCount'] === 'string' || data['columnCount'] instanceof String)) {
            throw new Error("Expected the field `columnCount` to be a primitive type in the JSON string but got " + data['columnCount']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        if (data['inputConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['inputConfigs'])) {
                throw new Error("Expected the field `inputConfigs` to be an array in the JSON data but got " + data['inputConfigs']);
            }
            // validate the optional field `inputConfigs` (array)
            for (const item of data['inputConfigs']) {
                InputConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rowCount'] && !(typeof data['rowCount'] === 'string' || data['rowCount'] instanceof String)) {
            throw new Error("Expected the field `rowCount` to be a primitive type in the JSON string but got " + data['rowCount']);
        }
        // ensure the json data is a string
        if (data['timeColumnSpecId'] && !(typeof data['timeColumnSpecId'] === 'string' || data['timeColumnSpecId'] instanceof String)) {
            throw new Error("Expected the field `timeColumnSpecId` to be a primitive type in the JSON string but got " + data['timeColumnSpecId']);
        }
        // ensure the json data is a string
        if (data['validRowCount'] && !(typeof data['validRowCount'] === 'string' || data['validRowCount'] instanceof String)) {
            throw new Error("Expected the field `validRowCount` to be a primitive type in the JSON string but got " + data['validRowCount']);
        }

        return true;
    }


}



/**
 * Output only. The number of columns of the table. That is, the number of child ColumnSpec-s.
 * @member {String} columnCount
 */
TableSpec.prototype['columnCount'] = undefined;

/**
 * Used to perform consistent read-modify-write updates. If not set, a blind \"overwrite\" update happens.
 * @member {String} etag
 */
TableSpec.prototype['etag'] = undefined;

/**
 * Output only. Input configs via which data currently residing in the table had been imported.
 * @member {Array.<module:model/InputConfig>} inputConfigs
 */
TableSpec.prototype['inputConfigs'] = undefined;

/**
 * Output only. The resource name of the table spec. Form: `projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/tableSpecs/{table_spec_id}`
 * @member {String} name
 */
TableSpec.prototype['name'] = undefined;

/**
 * Output only. The number of rows (i.e. examples) in the table.
 * @member {String} rowCount
 */
TableSpec.prototype['rowCount'] = undefined;

/**
 * column_spec_id of the time column. Only used if the parent dataset's ml_use_column_spec_id is not set. Used to split rows into TRAIN, VALIDATE and TEST sets such that oldest rows go to TRAIN set, newest to TEST, and those in between to VALIDATE. Required type: TIMESTAMP. If both this column and ml_use_column are not set, then ML use of all rows will be assigned by AutoML. NOTE: Updates of this field will instantly affect any other users concurrently working with the dataset.
 * @member {String} timeColumnSpecId
 */
TableSpec.prototype['timeColumnSpecId'] = undefined;

/**
 * Output only. The number of valid rows (i.e. without values that don't match DataType-s of their columns).
 * @member {String} validRowCount
 */
TableSpec.prototype['validRowCount'] = undefined;






export default TableSpec;

