/**
 * Cloud AutoML API
 * Train high-quality custom machine learning models with minimum effort and machine learning expertise.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageClassificationDatasetMetadata model module.
 * @module model/ImageClassificationDatasetMetadata
 * @version v1beta1
 */
class ImageClassificationDatasetMetadata {
    /**
     * Constructs a new <code>ImageClassificationDatasetMetadata</code>.
     * Dataset metadata that is specific to image classification.
     * @alias module:model/ImageClassificationDatasetMetadata
     */
    constructor() { 
        
        ImageClassificationDatasetMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageClassificationDatasetMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageClassificationDatasetMetadata} obj Optional instance to populate.
     * @return {module:model/ImageClassificationDatasetMetadata} The populated <code>ImageClassificationDatasetMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageClassificationDatasetMetadata();

            if (data.hasOwnProperty('classificationType')) {
                obj['classificationType'] = ApiClient.convertToType(data['classificationType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageClassificationDatasetMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageClassificationDatasetMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['classificationType'] && !(typeof data['classificationType'] === 'string' || data['classificationType'] instanceof String)) {
            throw new Error("Expected the field `classificationType` to be a primitive type in the JSON string but got " + data['classificationType']);
        }

        return true;
    }


}



/**
 * Required. Type of the classification problem.
 * @member {module:model/ImageClassificationDatasetMetadata.ClassificationTypeEnum} classificationType
 */
ImageClassificationDatasetMetadata.prototype['classificationType'] = undefined;





/**
 * Allowed values for the <code>classificationType</code> property.
 * @enum {String}
 * @readonly
 */
ImageClassificationDatasetMetadata['ClassificationTypeEnum'] = {

    /**
     * value: "CLASSIFICATION_TYPE_UNSPECIFIED"
     * @const
     */
    "CLASSIFICATION_TYPE_UNSPECIFIED": "CLASSIFICATION_TYPE_UNSPECIFIED",

    /**
     * value: "MULTICLASS"
     * @const
     */
    "MULTICLASS": "MULTICLASS",

    /**
     * value: "MULTILABEL"
     * @const
     */
    "MULTILABEL": "MULTILABEL"
};



export default ImageClassificationDatasetMetadata;

