/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExplicitBuckets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExplicitBuckets::OAIExplicitBuckets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExplicitBuckets::OAIExplicitBuckets() {
    this->initializeModel();
}

OAIExplicitBuckets::~OAIExplicitBuckets() {}

void OAIExplicitBuckets::initializeModel() {

    m_bounds_isSet = false;
    m_bounds_isValid = false;
}

void OAIExplicitBuckets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExplicitBuckets::fromJsonObject(QJsonObject json) {

    m_bounds_isValid = ::OpenAPI::fromJsonValue(m_bounds, json[QString("bounds")]);
    m_bounds_isSet = !json[QString("bounds")].isNull() && m_bounds_isValid;
}

QString OAIExplicitBuckets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExplicitBuckets::asJsonObject() const {
    QJsonObject obj;
    if (m_bounds.size() > 0) {
        obj.insert(QString("bounds"), ::OpenAPI::toJsonValue(m_bounds));
    }
    return obj;
}

QList<double> OAIExplicitBuckets::getBounds() const {
    return m_bounds;
}
void OAIExplicitBuckets::setBounds(const QList<double> &bounds) {
    m_bounds = bounds;
    m_bounds_isSet = true;
}

bool OAIExplicitBuckets::is_bounds_Set() const{
    return m_bounds_isSet;
}

bool OAIExplicitBuckets::is_bounds_Valid() const{
    return m_bounds_isValid;
}

bool OAIExplicitBuckets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounds.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExplicitBuckets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
