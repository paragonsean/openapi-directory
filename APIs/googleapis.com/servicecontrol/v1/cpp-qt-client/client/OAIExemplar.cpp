/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExemplar.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExemplar::OAIExemplar(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExemplar::OAIExemplar() {
    this->initializeModel();
}

OAIExemplar::~OAIExemplar() {}

void OAIExemplar::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIExemplar::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExemplar::fromJsonObject(QJsonObject json) {

    if(json["attachments"].isArray()){
        auto arr = json["attachments"].toArray();
        m_attachments_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_attachments_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_attachments_isSet = !jval.isNull() && m_attachments_isValid;
                m_attachments.push_back(item);
            }
        }
    }

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIExemplar::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExemplar::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        
        obj.insert(QString("attachments"), toJsonValue(m_attachments));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QList<QMap<QString, QJsonValue>> OAIExemplar::getAttachments() const {
    return m_attachments;
}
void OAIExemplar::setAttachments(const QList<QMap<QString, QJsonValue>> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIExemplar::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIExemplar::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIExemplar::getTimestamp() const {
    return m_timestamp;
}
void OAIExemplar::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIExemplar::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIExemplar::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

double OAIExemplar::getValue() const {
    return m_value;
}
void OAIExemplar::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIExemplar::is_value_Set() const{
    return m_value_isSet;
}

bool OAIExemplar::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIExemplar::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExemplar::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
