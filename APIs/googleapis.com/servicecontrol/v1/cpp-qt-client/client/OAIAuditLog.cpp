/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuditLog.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuditLog::OAIAuditLog(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuditLog::OAIAuditLog() {
    this->initializeModel();
}

OAIAuditLog::~OAIAuditLog() {}

void OAIAuditLog::initializeModel() {

    m_authentication_info_isSet = false;
    m_authentication_info_isValid = false;

    m_authorization_info_isSet = false;
    m_authorization_info_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_method_name_isSet = false;
    m_method_name_isValid = false;

    m_num_response_items_isSet = false;
    m_num_response_items_isValid = false;

    m_policy_violation_info_isSet = false;
    m_policy_violation_info_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_request_metadata_isSet = false;
    m_request_metadata_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_resource_original_state_isSet = false;
    m_resource_original_state_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_service_data_isSet = false;
    m_service_data_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIAuditLog::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuditLog::fromJsonObject(QJsonObject json) {

    m_authentication_info_isValid = ::OpenAPI::fromJsonValue(m_authentication_info, json[QString("authenticationInfo")]);
    m_authentication_info_isSet = !json[QString("authenticationInfo")].isNull() && m_authentication_info_isValid;

    m_authorization_info_isValid = ::OpenAPI::fromJsonValue(m_authorization_info, json[QString("authorizationInfo")]);
    m_authorization_info_isSet = !json[QString("authorizationInfo")].isNull() && m_authorization_info_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_method_name_isValid = ::OpenAPI::fromJsonValue(m_method_name, json[QString("methodName")]);
    m_method_name_isSet = !json[QString("methodName")].isNull() && m_method_name_isValid;

    m_num_response_items_isValid = ::OpenAPI::fromJsonValue(m_num_response_items, json[QString("numResponseItems")]);
    m_num_response_items_isSet = !json[QString("numResponseItems")].isNull() && m_num_response_items_isValid;

    m_policy_violation_info_isValid = ::OpenAPI::fromJsonValue(m_policy_violation_info, json[QString("policyViolationInfo")]);
    m_policy_violation_info_isSet = !json[QString("policyViolationInfo")].isNull() && m_policy_violation_info_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_request_metadata_isValid = ::OpenAPI::fromJsonValue(m_request_metadata, json[QString("requestMetadata")]);
    m_request_metadata_isSet = !json[QString("requestMetadata")].isNull() && m_request_metadata_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_resource_original_state_isValid = ::OpenAPI::fromJsonValue(m_resource_original_state, json[QString("resourceOriginalState")]);
    m_resource_original_state_isSet = !json[QString("resourceOriginalState")].isNull() && m_resource_original_state_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_service_data_isValid = ::OpenAPI::fromJsonValue(m_service_data, json[QString("serviceData")]);
    m_service_data_isSet = !json[QString("serviceData")].isNull() && m_service_data_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIAuditLog::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuditLog::asJsonObject() const {
    QJsonObject obj;
    if (m_authentication_info.isSet()) {
        obj.insert(QString("authenticationInfo"), ::OpenAPI::toJsonValue(m_authentication_info));
    }
    if (m_authorization_info.size() > 0) {
        obj.insert(QString("authorizationInfo"), ::OpenAPI::toJsonValue(m_authorization_info));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_method_name_isSet) {
        obj.insert(QString("methodName"), ::OpenAPI::toJsonValue(m_method_name));
    }
    if (m_num_response_items_isSet) {
        obj.insert(QString("numResponseItems"), ::OpenAPI::toJsonValue(m_num_response_items));
    }
    if (m_policy_violation_info.isSet()) {
        obj.insert(QString("policyViolationInfo"), ::OpenAPI::toJsonValue(m_policy_violation_info));
    }
    if (m_request.size() > 0) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_request_metadata.isSet()) {
        obj.insert(QString("requestMetadata"), ::OpenAPI::toJsonValue(m_request_metadata));
    }
    if (m_resource_location.isSet()) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_resource_original_state.size() > 0) {
        obj.insert(QString("resourceOriginalState"), ::OpenAPI::toJsonValue(m_resource_original_state));
    }
    if (m_response.size() > 0) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_service_data.size() > 0) {
        obj.insert(QString("serviceData"), ::OpenAPI::toJsonValue(m_service_data));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAuthenticationInfo OAIAuditLog::getAuthenticationInfo() const {
    return m_authentication_info;
}
void OAIAuditLog::setAuthenticationInfo(const OAIAuthenticationInfo &authentication_info) {
    m_authentication_info = authentication_info;
    m_authentication_info_isSet = true;
}

bool OAIAuditLog::is_authentication_info_Set() const{
    return m_authentication_info_isSet;
}

bool OAIAuditLog::is_authentication_info_Valid() const{
    return m_authentication_info_isValid;
}

QList<OAIAuthorizationInfo> OAIAuditLog::getAuthorizationInfo() const {
    return m_authorization_info;
}
void OAIAuditLog::setAuthorizationInfo(const QList<OAIAuthorizationInfo> &authorization_info) {
    m_authorization_info = authorization_info;
    m_authorization_info_isSet = true;
}

bool OAIAuditLog::is_authorization_info_Set() const{
    return m_authorization_info_isSet;
}

bool OAIAuditLog::is_authorization_info_Valid() const{
    return m_authorization_info_isValid;
}

QMap<QString, QJsonValue> OAIAuditLog::getMetadata() const {
    return m_metadata;
}
void OAIAuditLog::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIAuditLog::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIAuditLog::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIAuditLog::getMethodName() const {
    return m_method_name;
}
void OAIAuditLog::setMethodName(const QString &method_name) {
    m_method_name = method_name;
    m_method_name_isSet = true;
}

bool OAIAuditLog::is_method_name_Set() const{
    return m_method_name_isSet;
}

bool OAIAuditLog::is_method_name_Valid() const{
    return m_method_name_isValid;
}

QString OAIAuditLog::getNumResponseItems() const {
    return m_num_response_items;
}
void OAIAuditLog::setNumResponseItems(const QString &num_response_items) {
    m_num_response_items = num_response_items;
    m_num_response_items_isSet = true;
}

bool OAIAuditLog::is_num_response_items_Set() const{
    return m_num_response_items_isSet;
}

bool OAIAuditLog::is_num_response_items_Valid() const{
    return m_num_response_items_isValid;
}

OAIPolicyViolationInfo OAIAuditLog::getPolicyViolationInfo() const {
    return m_policy_violation_info;
}
void OAIAuditLog::setPolicyViolationInfo(const OAIPolicyViolationInfo &policy_violation_info) {
    m_policy_violation_info = policy_violation_info;
    m_policy_violation_info_isSet = true;
}

bool OAIAuditLog::is_policy_violation_info_Set() const{
    return m_policy_violation_info_isSet;
}

bool OAIAuditLog::is_policy_violation_info_Valid() const{
    return m_policy_violation_info_isValid;
}

QMap<QString, QJsonValue> OAIAuditLog::getRequest() const {
    return m_request;
}
void OAIAuditLog::setRequest(const QMap<QString, QJsonValue> &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIAuditLog::is_request_Set() const{
    return m_request_isSet;
}

bool OAIAuditLog::is_request_Valid() const{
    return m_request_isValid;
}

OAIRequestMetadata OAIAuditLog::getRequestMetadata() const {
    return m_request_metadata;
}
void OAIAuditLog::setRequestMetadata(const OAIRequestMetadata &request_metadata) {
    m_request_metadata = request_metadata;
    m_request_metadata_isSet = true;
}

bool OAIAuditLog::is_request_metadata_Set() const{
    return m_request_metadata_isSet;
}

bool OAIAuditLog::is_request_metadata_Valid() const{
    return m_request_metadata_isValid;
}

OAIResourceLocation OAIAuditLog::getResourceLocation() const {
    return m_resource_location;
}
void OAIAuditLog::setResourceLocation(const OAIResourceLocation &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIAuditLog::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIAuditLog::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIAuditLog::getResourceName() const {
    return m_resource_name;
}
void OAIAuditLog::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIAuditLog::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIAuditLog::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QMap<QString, QJsonValue> OAIAuditLog::getResourceOriginalState() const {
    return m_resource_original_state;
}
void OAIAuditLog::setResourceOriginalState(const QMap<QString, QJsonValue> &resource_original_state) {
    m_resource_original_state = resource_original_state;
    m_resource_original_state_isSet = true;
}

bool OAIAuditLog::is_resource_original_state_Set() const{
    return m_resource_original_state_isSet;
}

bool OAIAuditLog::is_resource_original_state_Valid() const{
    return m_resource_original_state_isValid;
}

QMap<QString, QJsonValue> OAIAuditLog::getResponse() const {
    return m_response;
}
void OAIAuditLog::setResponse(const QMap<QString, QJsonValue> &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIAuditLog::is_response_Set() const{
    return m_response_isSet;
}

bool OAIAuditLog::is_response_Valid() const{
    return m_response_isValid;
}

QMap<QString, QJsonValue> OAIAuditLog::getServiceData() const {
    return m_service_data;
}
void OAIAuditLog::setServiceData(const QMap<QString, QJsonValue> &service_data) {
    m_service_data = service_data;
    m_service_data_isSet = true;
}

bool OAIAuditLog::is_service_data_Set() const{
    return m_service_data_isSet;
}

bool OAIAuditLog::is_service_data_Valid() const{
    return m_service_data_isValid;
}

QString OAIAuditLog::getServiceName() const {
    return m_service_name;
}
void OAIAuditLog::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIAuditLog::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIAuditLog::is_service_name_Valid() const{
    return m_service_name_isValid;
}

OAIStatus OAIAuditLog::getStatus() const {
    return m_status;
}
void OAIAuditLog::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAuditLog::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAuditLog::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIAuditLog::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authentication_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_response_items_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_violation_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_original_state.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuditLog::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
