/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDistribution.h
 *
 * Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points
 */

#ifndef OAIDistribution_H
#define OAIDistribution_H

#include <QJsonObject>

#include "OAIExemplar.h"
#include "OAIExplicitBuckets.h"
#include "OAIExponentialBuckets.h"
#include "OAILinearBuckets.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExemplar;
class OAIExplicitBuckets;
class OAIExponentialBuckets;
class OAILinearBuckets;

class OAIDistribution : public OAIObject {
public:
    OAIDistribution();
    OAIDistribution(QString json);
    ~OAIDistribution() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getBucketCounts() const;
    void setBucketCounts(const QList<QString> &bucket_counts);
    bool is_bucket_counts_Set() const;
    bool is_bucket_counts_Valid() const;

    QString getCount() const;
    void setCount(const QString &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QList<OAIExemplar> getExemplars() const;
    void setExemplars(const QList<OAIExemplar> &exemplars);
    bool is_exemplars_Set() const;
    bool is_exemplars_Valid() const;

    OAIExplicitBuckets getExplicitBuckets() const;
    void setExplicitBuckets(const OAIExplicitBuckets &explicit_buckets);
    bool is_explicit_buckets_Set() const;
    bool is_explicit_buckets_Valid() const;

    OAIExponentialBuckets getExponentialBuckets() const;
    void setExponentialBuckets(const OAIExponentialBuckets &exponential_buckets);
    bool is_exponential_buckets_Set() const;
    bool is_exponential_buckets_Valid() const;

    OAILinearBuckets getLinearBuckets() const;
    void setLinearBuckets(const OAILinearBuckets &linear_buckets);
    bool is_linear_buckets_Set() const;
    bool is_linear_buckets_Valid() const;

    double getMaximum() const;
    void setMaximum(const double &maximum);
    bool is_maximum_Set() const;
    bool is_maximum_Valid() const;

    double getMean() const;
    void setMean(const double &mean);
    bool is_mean_Set() const;
    bool is_mean_Valid() const;

    double getMinimum() const;
    void setMinimum(const double &minimum);
    bool is_minimum_Set() const;
    bool is_minimum_Valid() const;

    double getSumOfSquaredDeviation() const;
    void setSumOfSquaredDeviation(const double &sum_of_squared_deviation);
    bool is_sum_of_squared_deviation_Set() const;
    bool is_sum_of_squared_deviation_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_bucket_counts;
    bool m_bucket_counts_isSet;
    bool m_bucket_counts_isValid;

    QString m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QList<OAIExemplar> m_exemplars;
    bool m_exemplars_isSet;
    bool m_exemplars_isValid;

    OAIExplicitBuckets m_explicit_buckets;
    bool m_explicit_buckets_isSet;
    bool m_explicit_buckets_isValid;

    OAIExponentialBuckets m_exponential_buckets;
    bool m_exponential_buckets_isSet;
    bool m_exponential_buckets_isValid;

    OAILinearBuckets m_linear_buckets;
    bool m_linear_buckets_isSet;
    bool m_linear_buckets_isValid;

    double m_maximum;
    bool m_maximum_isSet;
    bool m_maximum_isValid;

    double m_mean;
    bool m_mean_isSet;
    bool m_mean_isValid;

    double m_minimum;
    bool m_minimum_isSet;
    bool m_minimum_isValid;

    double m_sum_of_squared_deviation;
    bool m_sum_of_squared_deviation_isSet;
    bool m_sum_of_squared_deviation_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDistribution)

#endif // OAIDistribution_H
