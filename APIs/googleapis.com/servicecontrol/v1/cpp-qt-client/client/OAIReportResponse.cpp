/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportResponse::OAIReportResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportResponse::OAIReportResponse() {
    this->initializeModel();
}

OAIReportResponse::~OAIReportResponse() {}

void OAIReportResponse::initializeModel() {

    m_report_errors_isSet = false;
    m_report_errors_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;

    m_service_rollout_id_isSet = false;
    m_service_rollout_id_isValid = false;
}

void OAIReportResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportResponse::fromJsonObject(QJsonObject json) {

    m_report_errors_isValid = ::OpenAPI::fromJsonValue(m_report_errors, json[QString("reportErrors")]);
    m_report_errors_isSet = !json[QString("reportErrors")].isNull() && m_report_errors_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;

    m_service_rollout_id_isValid = ::OpenAPI::fromJsonValue(m_service_rollout_id, json[QString("serviceRolloutId")]);
    m_service_rollout_id_isSet = !json[QString("serviceRolloutId")].isNull() && m_service_rollout_id_isValid;
}

QString OAIReportResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_report_errors.size() > 0) {
        obj.insert(QString("reportErrors"), ::OpenAPI::toJsonValue(m_report_errors));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    if (m_service_rollout_id_isSet) {
        obj.insert(QString("serviceRolloutId"), ::OpenAPI::toJsonValue(m_service_rollout_id));
    }
    return obj;
}

QList<OAIReportError> OAIReportResponse::getReportErrors() const {
    return m_report_errors;
}
void OAIReportResponse::setReportErrors(const QList<OAIReportError> &report_errors) {
    m_report_errors = report_errors;
    m_report_errors_isSet = true;
}

bool OAIReportResponse::is_report_errors_Set() const{
    return m_report_errors_isSet;
}

bool OAIReportResponse::is_report_errors_Valid() const{
    return m_report_errors_isValid;
}

QString OAIReportResponse::getServiceConfigId() const {
    return m_service_config_id;
}
void OAIReportResponse::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAIReportResponse::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAIReportResponse::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

QString OAIReportResponse::getServiceRolloutId() const {
    return m_service_rollout_id;
}
void OAIReportResponse::setServiceRolloutId(const QString &service_rollout_id) {
    m_service_rollout_id = service_rollout_id;
    m_service_rollout_id_isSet = true;
}

bool OAIReportResponse::is_service_rollout_id_Set() const{
    return m_service_rollout_id_isSet;
}

bool OAIReportResponse::is_service_rollout_id_Valid() const{
    return m_service_rollout_id_isValid;
}

bool OAIReportResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_report_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_rollout_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
