/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocateQuotaResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocateQuotaResponse::OAIAllocateQuotaResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocateQuotaResponse::OAIAllocateQuotaResponse() {
    this->initializeModel();
}

OAIAllocateQuotaResponse::~OAIAllocateQuotaResponse() {}

void OAIAllocateQuotaResponse::initializeModel() {

    m_allocate_errors_isSet = false;
    m_allocate_errors_isValid = false;

    m_allocate_info_isSet = false;
    m_allocate_info_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_quota_metrics_isSet = false;
    m_quota_metrics_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;
}

void OAIAllocateQuotaResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocateQuotaResponse::fromJsonObject(QJsonObject json) {

    m_allocate_errors_isValid = ::OpenAPI::fromJsonValue(m_allocate_errors, json[QString("allocateErrors")]);
    m_allocate_errors_isSet = !json[QString("allocateErrors")].isNull() && m_allocate_errors_isValid;

    m_allocate_info_isValid = ::OpenAPI::fromJsonValue(m_allocate_info, json[QString("allocateInfo")]);
    m_allocate_info_isSet = !json[QString("allocateInfo")].isNull() && m_allocate_info_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_quota_metrics_isValid = ::OpenAPI::fromJsonValue(m_quota_metrics, json[QString("quotaMetrics")]);
    m_quota_metrics_isSet = !json[QString("quotaMetrics")].isNull() && m_quota_metrics_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;
}

QString OAIAllocateQuotaResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocateQuotaResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_allocate_errors.size() > 0) {
        obj.insert(QString("allocateErrors"), ::OpenAPI::toJsonValue(m_allocate_errors));
    }
    if (m_allocate_info.isSet()) {
        obj.insert(QString("allocateInfo"), ::OpenAPI::toJsonValue(m_allocate_info));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_quota_metrics.size() > 0) {
        obj.insert(QString("quotaMetrics"), ::OpenAPI::toJsonValue(m_quota_metrics));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    return obj;
}

QList<OAIQuotaError> OAIAllocateQuotaResponse::getAllocateErrors() const {
    return m_allocate_errors;
}
void OAIAllocateQuotaResponse::setAllocateErrors(const QList<OAIQuotaError> &allocate_errors) {
    m_allocate_errors = allocate_errors;
    m_allocate_errors_isSet = true;
}

bool OAIAllocateQuotaResponse::is_allocate_errors_Set() const{
    return m_allocate_errors_isSet;
}

bool OAIAllocateQuotaResponse::is_allocate_errors_Valid() const{
    return m_allocate_errors_isValid;
}

OAIAllocateInfo OAIAllocateQuotaResponse::getAllocateInfo() const {
    return m_allocate_info;
}
void OAIAllocateQuotaResponse::setAllocateInfo(const OAIAllocateInfo &allocate_info) {
    m_allocate_info = allocate_info;
    m_allocate_info_isSet = true;
}

bool OAIAllocateQuotaResponse::is_allocate_info_Set() const{
    return m_allocate_info_isSet;
}

bool OAIAllocateQuotaResponse::is_allocate_info_Valid() const{
    return m_allocate_info_isValid;
}

QString OAIAllocateQuotaResponse::getOperationId() const {
    return m_operation_id;
}
void OAIAllocateQuotaResponse::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIAllocateQuotaResponse::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIAllocateQuotaResponse::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QList<OAIMetricValueSet> OAIAllocateQuotaResponse::getQuotaMetrics() const {
    return m_quota_metrics;
}
void OAIAllocateQuotaResponse::setQuotaMetrics(const QList<OAIMetricValueSet> &quota_metrics) {
    m_quota_metrics = quota_metrics;
    m_quota_metrics_isSet = true;
}

bool OAIAllocateQuotaResponse::is_quota_metrics_Set() const{
    return m_quota_metrics_isSet;
}

bool OAIAllocateQuotaResponse::is_quota_metrics_Valid() const{
    return m_quota_metrics_isValid;
}

QString OAIAllocateQuotaResponse::getServiceConfigId() const {
    return m_service_config_id;
}
void OAIAllocateQuotaResponse::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAIAllocateQuotaResponse::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAIAllocateQuotaResponse::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

bool OAIAllocateQuotaResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocate_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allocate_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocateQuotaResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
