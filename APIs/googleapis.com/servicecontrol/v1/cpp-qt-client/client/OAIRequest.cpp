/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_auth_isSet = false;
    m_auth_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_auth_isValid = ::OpenAPI::fromJsonValue(m_auth, json[QString("auth")]);
    m_auth_isSet = !json[QString("auth")].isNull() && m_auth_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auth.isSet()) {
        obj.insert(QString("auth"), ::OpenAPI::toJsonValue(m_auth));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

OAIAuth OAIRequest::getAuth() const {
    return m_auth;
}
void OAIRequest::setAuth(const OAIAuth &auth) {
    m_auth = auth;
    m_auth_isSet = true;
}

bool OAIRequest::is_auth_Set() const{
    return m_auth_isSet;
}

bool OAIRequest::is_auth_Valid() const{
    return m_auth_isValid;
}

QMap<QString, QString> OAIRequest::getHeaders() const {
    return m_headers;
}
void OAIRequest::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIRequest::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIRequest::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIRequest::getHost() const {
    return m_host;
}
void OAIRequest::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIRequest::is_host_Set() const{
    return m_host_isSet;
}

bool OAIRequest::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIRequest::getId() const {
    return m_id;
}
void OAIRequest::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRequest::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRequest::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIRequest::getMethod() const {
    return m_method;
}
void OAIRequest::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIRequest::is_method_Set() const{
    return m_method_isSet;
}

bool OAIRequest::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIRequest::getPath() const {
    return m_path;
}
void OAIRequest::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIRequest::is_path_Set() const{
    return m_path_isSet;
}

bool OAIRequest::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIRequest::getProtocol() const {
    return m_protocol;
}
void OAIRequest::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIRequest::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIRequest::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIRequest::getQuery() const {
    return m_query;
}
void OAIRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIRequest::is_query_Valid() const{
    return m_query_isValid;
}

QString OAIRequest::getReason() const {
    return m_reason;
}
void OAIRequest::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIRequest::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIRequest::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIRequest::getScheme() const {
    return m_scheme;
}
void OAIRequest::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAIRequest::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAIRequest::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAIRequest::getSize() const {
    return m_size;
}
void OAIRequest::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRequest::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRequest::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRequest::getTime() const {
    return m_time;
}
void OAIRequest::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIRequest::is_time_Set() const{
    return m_time_isSet;
}

bool OAIRequest::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
