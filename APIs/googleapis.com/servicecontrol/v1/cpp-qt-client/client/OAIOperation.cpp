/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_consumer_id_isSet = false;
    m_consumer_id_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_importance_isSet = false;
    m_importance_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_log_entries_isSet = false;
    m_log_entries_isValid = false;

    m_metric_value_sets_isSet = false;
    m_metric_value_sets_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_quota_properties_isSet = false;
    m_quota_properties_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_trace_spans_isSet = false;
    m_trace_spans_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_consumer_id_isValid = ::OpenAPI::fromJsonValue(m_consumer_id, json[QString("consumerId")]);
    m_consumer_id_isSet = !json[QString("consumerId")].isNull() && m_consumer_id_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_importance_isValid = ::OpenAPI::fromJsonValue(m_importance, json[QString("importance")]);
    m_importance_isSet = !json[QString("importance")].isNull() && m_importance_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_log_entries_isValid = ::OpenAPI::fromJsonValue(m_log_entries, json[QString("logEntries")]);
    m_log_entries_isSet = !json[QString("logEntries")].isNull() && m_log_entries_isValid;

    m_metric_value_sets_isValid = ::OpenAPI::fromJsonValue(m_metric_value_sets, json[QString("metricValueSets")]);
    m_metric_value_sets_isSet = !json[QString("metricValueSets")].isNull() && m_metric_value_sets_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_quota_properties_isValid = ::OpenAPI::fromJsonValue(m_quota_properties, json[QString("quotaProperties")]);
    m_quota_properties_isSet = !json[QString("quotaProperties")].isNull() && m_quota_properties_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_trace_spans_isValid = ::OpenAPI::fromJsonValue(m_trace_spans, json[QString("traceSpans")]);
    m_trace_spans_isSet = !json[QString("traceSpans")].isNull() && m_trace_spans_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_id_isSet) {
        obj.insert(QString("consumerId"), ::OpenAPI::toJsonValue(m_consumer_id));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_importance_isSet) {
        obj.insert(QString("importance"), ::OpenAPI::toJsonValue(m_importance));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_log_entries.size() > 0) {
        obj.insert(QString("logEntries"), ::OpenAPI::toJsonValue(m_log_entries));
    }
    if (m_metric_value_sets.size() > 0) {
        obj.insert(QString("metricValueSets"), ::OpenAPI::toJsonValue(m_metric_value_sets));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_operation_name_isSet) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_quota_properties.isSet()) {
        obj.insert(QString("quotaProperties"), ::OpenAPI::toJsonValue(m_quota_properties));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_trace_spans.size() > 0) {
        obj.insert(QString("traceSpans"), ::OpenAPI::toJsonValue(m_trace_spans));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

QString OAIOperation::getConsumerId() const {
    return m_consumer_id;
}
void OAIOperation::setConsumerId(const QString &consumer_id) {
    m_consumer_id = consumer_id;
    m_consumer_id_isSet = true;
}

bool OAIOperation::is_consumer_id_Set() const{
    return m_consumer_id_isSet;
}

bool OAIOperation::is_consumer_id_Valid() const{
    return m_consumer_id_isValid;
}

QString OAIOperation::getEndTime() const {
    return m_end_time;
}
void OAIOperation::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIOperation::getImportance() const {
    return m_importance;
}
void OAIOperation::setImportance(const QString &importance) {
    m_importance = importance;
    m_importance_isSet = true;
}

bool OAIOperation::is_importance_Set() const{
    return m_importance_isSet;
}

bool OAIOperation::is_importance_Valid() const{
    return m_importance_isValid;
}

QMap<QString, QString> OAIOperation::getLabels() const {
    return m_labels;
}
void OAIOperation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIOperation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIOperation::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<OAILogEntry> OAIOperation::getLogEntries() const {
    return m_log_entries;
}
void OAIOperation::setLogEntries(const QList<OAILogEntry> &log_entries) {
    m_log_entries = log_entries;
    m_log_entries_isSet = true;
}

bool OAIOperation::is_log_entries_Set() const{
    return m_log_entries_isSet;
}

bool OAIOperation::is_log_entries_Valid() const{
    return m_log_entries_isValid;
}

QList<OAIMetricValueSet> OAIOperation::getMetricValueSets() const {
    return m_metric_value_sets;
}
void OAIOperation::setMetricValueSets(const QList<OAIMetricValueSet> &metric_value_sets) {
    m_metric_value_sets = metric_value_sets;
    m_metric_value_sets_isSet = true;
}

bool OAIOperation::is_metric_value_sets_Set() const{
    return m_metric_value_sets_isSet;
}

bool OAIOperation::is_metric_value_sets_Valid() const{
    return m_metric_value_sets_isValid;
}

QString OAIOperation::getOperationId() const {
    return m_operation_id;
}
void OAIOperation::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIOperation::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIOperation::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QString OAIOperation::getOperationName() const {
    return m_operation_name;
}
void OAIOperation::setOperationName(const QString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIOperation::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIOperation::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

OAIQuotaProperties OAIOperation::getQuotaProperties() const {
    return m_quota_properties;
}
void OAIOperation::setQuotaProperties(const OAIQuotaProperties &quota_properties) {
    m_quota_properties = quota_properties;
    m_quota_properties_isSet = true;
}

bool OAIOperation::is_quota_properties_Set() const{
    return m_quota_properties_isSet;
}

bool OAIOperation::is_quota_properties_Valid() const{
    return m_quota_properties_isValid;
}

QList<OAIResourceInfo> OAIOperation::getResources() const {
    return m_resources;
}
void OAIOperation::setResources(const QList<OAIResourceInfo> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAIOperation::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAIOperation::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAIOperation::getStartTime() const {
    return m_start_time;
}
void OAIOperation::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIOperation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOperation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QList<OAITraceSpan> OAIOperation::getTraceSpans() const {
    return m_trace_spans;
}
void OAIOperation::setTraceSpans(const QList<OAITraceSpan> &trace_spans) {
    m_trace_spans = trace_spans;
    m_trace_spans_isSet = true;
}

bool OAIOperation::is_trace_spans_Set() const{
    return m_trace_spans_isSet;
}

bool OAIOperation::is_trace_spans_Valid() const{
    return m_trace_spans_isValid;
}

QMap<QString, QString> OAIOperation::getUserLabels() const {
    return m_user_labels;
}
void OAIOperation::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAIOperation::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAIOperation::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_entries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_value_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_spans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
