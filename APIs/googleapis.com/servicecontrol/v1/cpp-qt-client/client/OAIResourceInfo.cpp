/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceInfo::OAIResourceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceInfo::OAIResourceInfo() {
    this->initializeModel();
}

OAIResourceInfo::~OAIResourceInfo() {}

void OAIResourceInfo::initializeModel() {

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_resource_container_isSet = false;
    m_resource_container_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;
}

void OAIResourceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceInfo::fromJsonObject(QJsonObject json) {

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_resource_container_isValid = ::OpenAPI::fromJsonValue(m_resource_container, json[QString("resourceContainer")]);
    m_resource_container_isSet = !json[QString("resourceContainer")].isNull() && m_resource_container_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;
}

QString OAIResourceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_resource_container_isSet) {
        obj.insert(QString("resourceContainer"), ::OpenAPI::toJsonValue(m_resource_container));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    return obj;
}

QString OAIResourceInfo::getPermission() const {
    return m_permission;
}
void OAIResourceInfo::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIResourceInfo::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIResourceInfo::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIResourceInfo::getResourceContainer() const {
    return m_resource_container;
}
void OAIResourceInfo::setResourceContainer(const QString &resource_container) {
    m_resource_container = resource_container;
    m_resource_container_isSet = true;
}

bool OAIResourceInfo::is_resource_container_Set() const{
    return m_resource_container_isSet;
}

bool OAIResourceInfo::is_resource_container_Valid() const{
    return m_resource_container_isValid;
}

QString OAIResourceInfo::getResourceLocation() const {
    return m_resource_location;
}
void OAIResourceInfo::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIResourceInfo::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIResourceInfo::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIResourceInfo::getResourceName() const {
    return m_resource_name;
}
void OAIResourceInfo::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIResourceInfo::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIResourceInfo::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

bool OAIResourceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
