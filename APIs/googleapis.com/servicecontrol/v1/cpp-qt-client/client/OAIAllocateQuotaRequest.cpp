/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocateQuotaRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocateQuotaRequest::OAIAllocateQuotaRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocateQuotaRequest::OAIAllocateQuotaRequest() {
    this->initializeModel();
}

OAIAllocateQuotaRequest::~OAIAllocateQuotaRequest() {}

void OAIAllocateQuotaRequest::initializeModel() {

    m_allocate_operation_isSet = false;
    m_allocate_operation_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;
}

void OAIAllocateQuotaRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocateQuotaRequest::fromJsonObject(QJsonObject json) {

    m_allocate_operation_isValid = ::OpenAPI::fromJsonValue(m_allocate_operation, json[QString("allocateOperation")]);
    m_allocate_operation_isSet = !json[QString("allocateOperation")].isNull() && m_allocate_operation_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;
}

QString OAIAllocateQuotaRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocateQuotaRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_allocate_operation.isSet()) {
        obj.insert(QString("allocateOperation"), ::OpenAPI::toJsonValue(m_allocate_operation));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    return obj;
}

OAIQuotaOperation OAIAllocateQuotaRequest::getAllocateOperation() const {
    return m_allocate_operation;
}
void OAIAllocateQuotaRequest::setAllocateOperation(const OAIQuotaOperation &allocate_operation) {
    m_allocate_operation = allocate_operation;
    m_allocate_operation_isSet = true;
}

bool OAIAllocateQuotaRequest::is_allocate_operation_Set() const{
    return m_allocate_operation_isSet;
}

bool OAIAllocateQuotaRequest::is_allocate_operation_Valid() const{
    return m_allocate_operation_isValid;
}

QString OAIAllocateQuotaRequest::getServiceConfigId() const {
    return m_service_config_id;
}
void OAIAllocateQuotaRequest::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAIAllocateQuotaRequest::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAIAllocateQuotaRequest::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

bool OAIAllocateQuotaRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocate_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocateQuotaRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
