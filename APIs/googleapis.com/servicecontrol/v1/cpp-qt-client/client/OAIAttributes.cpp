/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributes::OAIAttributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributes::OAIAttributes() {
    this->initializeModel();
}

OAIAttributes::~OAIAttributes() {}

void OAIAttributes::initializeModel() {

    m_attribute_map_isSet = false;
    m_attribute_map_isValid = false;

    m_dropped_attributes_count_isSet = false;
    m_dropped_attributes_count_isValid = false;
}

void OAIAttributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributes::fromJsonObject(QJsonObject json) {

    m_attribute_map_isValid = ::OpenAPI::fromJsonValue(m_attribute_map, json[QString("attributeMap")]);
    m_attribute_map_isSet = !json[QString("attributeMap")].isNull() && m_attribute_map_isValid;

    m_dropped_attributes_count_isValid = ::OpenAPI::fromJsonValue(m_dropped_attributes_count, json[QString("droppedAttributesCount")]);
    m_dropped_attributes_count_isSet = !json[QString("droppedAttributesCount")].isNull() && m_dropped_attributes_count_isValid;
}

QString OAIAttributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributes::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_map.size() > 0) {
        obj.insert(QString("attributeMap"), ::OpenAPI::toJsonValue(m_attribute_map));
    }
    if (m_dropped_attributes_count_isSet) {
        obj.insert(QString("droppedAttributesCount"), ::OpenAPI::toJsonValue(m_dropped_attributes_count));
    }
    return obj;
}

QMap<QString, OAIAttributeValue> OAIAttributes::getAttributeMap() const {
    return m_attribute_map;
}
void OAIAttributes::setAttributeMap(const QMap<QString, OAIAttributeValue> &attribute_map) {
    m_attribute_map = attribute_map;
    m_attribute_map_isSet = true;
}

bool OAIAttributes::is_attribute_map_Set() const{
    return m_attribute_map_isSet;
}

bool OAIAttributes::is_attribute_map_Valid() const{
    return m_attribute_map_isValid;
}

qint32 OAIAttributes::getDroppedAttributesCount() const {
    return m_dropped_attributes_count;
}
void OAIAttributes::setDroppedAttributesCount(const qint32 &dropped_attributes_count) {
    m_dropped_attributes_count = dropped_attributes_count;
    m_dropped_attributes_count_isSet = true;
}

bool OAIAttributes::is_dropped_attributes_count_Set() const{
    return m_dropped_attributes_count_isSet;
}

bool OAIAttributes::is_dropped_attributes_count_Valid() const{
    return m_dropped_attributes_count_isValid;
}

bool OAIAttributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_map.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dropped_attributes_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
