/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraceSpan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraceSpan::OAITraceSpan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraceSpan::OAITraceSpan() {
    this->initializeModel();
}

OAITraceSpan::~OAITraceSpan() {}

void OAITraceSpan::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_child_span_count_isSet = false;
    m_child_span_count_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parent_span_id_isSet = false;
    m_parent_span_id_isValid = false;

    m_same_process_as_parent_span_isSet = false;
    m_same_process_as_parent_span_isValid = false;

    m_span_id_isSet = false;
    m_span_id_isValid = false;

    m_span_kind_isSet = false;
    m_span_kind_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAITraceSpan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraceSpan::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_child_span_count_isValid = ::OpenAPI::fromJsonValue(m_child_span_count, json[QString("childSpanCount")]);
    m_child_span_count_isSet = !json[QString("childSpanCount")].isNull() && m_child_span_count_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parent_span_id_isValid = ::OpenAPI::fromJsonValue(m_parent_span_id, json[QString("parentSpanId")]);
    m_parent_span_id_isSet = !json[QString("parentSpanId")].isNull() && m_parent_span_id_isValid;

    m_same_process_as_parent_span_isValid = ::OpenAPI::fromJsonValue(m_same_process_as_parent_span, json[QString("sameProcessAsParentSpan")]);
    m_same_process_as_parent_span_isSet = !json[QString("sameProcessAsParentSpan")].isNull() && m_same_process_as_parent_span_isValid;

    m_span_id_isValid = ::OpenAPI::fromJsonValue(m_span_id, json[QString("spanId")]);
    m_span_id_isSet = !json[QString("spanId")].isNull() && m_span_id_isValid;

    m_span_kind_isValid = ::OpenAPI::fromJsonValue(m_span_kind, json[QString("spanKind")]);
    m_span_kind_isSet = !json[QString("spanKind")].isNull() && m_span_kind_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAITraceSpan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraceSpan::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_child_span_count_isSet) {
        obj.insert(QString("childSpanCount"), ::OpenAPI::toJsonValue(m_child_span_count));
    }
    if (m_display_name.isSet()) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parent_span_id_isSet) {
        obj.insert(QString("parentSpanId"), ::OpenAPI::toJsonValue(m_parent_span_id));
    }
    if (m_same_process_as_parent_span_isSet) {
        obj.insert(QString("sameProcessAsParentSpan"), ::OpenAPI::toJsonValue(m_same_process_as_parent_span));
    }
    if (m_span_id_isSet) {
        obj.insert(QString("spanId"), ::OpenAPI::toJsonValue(m_span_id));
    }
    if (m_span_kind_isSet) {
        obj.insert(QString("spanKind"), ::OpenAPI::toJsonValue(m_span_kind));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

OAIAttributes OAITraceSpan::getAttributes() const {
    return m_attributes;
}
void OAITraceSpan::setAttributes(const OAIAttributes &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAITraceSpan::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAITraceSpan::is_attributes_Valid() const{
    return m_attributes_isValid;
}

qint32 OAITraceSpan::getChildSpanCount() const {
    return m_child_span_count;
}
void OAITraceSpan::setChildSpanCount(const qint32 &child_span_count) {
    m_child_span_count = child_span_count;
    m_child_span_count_isSet = true;
}

bool OAITraceSpan::is_child_span_count_Set() const{
    return m_child_span_count_isSet;
}

bool OAITraceSpan::is_child_span_count_Valid() const{
    return m_child_span_count_isValid;
}

OAITruncatableString OAITraceSpan::getDisplayName() const {
    return m_display_name;
}
void OAITraceSpan::setDisplayName(const OAITruncatableString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAITraceSpan::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAITraceSpan::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAITraceSpan::getEndTime() const {
    return m_end_time;
}
void OAITraceSpan::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAITraceSpan::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAITraceSpan::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAITraceSpan::getName() const {
    return m_name;
}
void OAITraceSpan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITraceSpan::is_name_Set() const{
    return m_name_isSet;
}

bool OAITraceSpan::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITraceSpan::getParentSpanId() const {
    return m_parent_span_id;
}
void OAITraceSpan::setParentSpanId(const QString &parent_span_id) {
    m_parent_span_id = parent_span_id;
    m_parent_span_id_isSet = true;
}

bool OAITraceSpan::is_parent_span_id_Set() const{
    return m_parent_span_id_isSet;
}

bool OAITraceSpan::is_parent_span_id_Valid() const{
    return m_parent_span_id_isValid;
}

bool OAITraceSpan::isSameProcessAsParentSpan() const {
    return m_same_process_as_parent_span;
}
void OAITraceSpan::setSameProcessAsParentSpan(const bool &same_process_as_parent_span) {
    m_same_process_as_parent_span = same_process_as_parent_span;
    m_same_process_as_parent_span_isSet = true;
}

bool OAITraceSpan::is_same_process_as_parent_span_Set() const{
    return m_same_process_as_parent_span_isSet;
}

bool OAITraceSpan::is_same_process_as_parent_span_Valid() const{
    return m_same_process_as_parent_span_isValid;
}

QString OAITraceSpan::getSpanId() const {
    return m_span_id;
}
void OAITraceSpan::setSpanId(const QString &span_id) {
    m_span_id = span_id;
    m_span_id_isSet = true;
}

bool OAITraceSpan::is_span_id_Set() const{
    return m_span_id_isSet;
}

bool OAITraceSpan::is_span_id_Valid() const{
    return m_span_id_isValid;
}

QString OAITraceSpan::getSpanKind() const {
    return m_span_kind;
}
void OAITraceSpan::setSpanKind(const QString &span_kind) {
    m_span_kind = span_kind;
    m_span_kind_isSet = true;
}

bool OAITraceSpan::is_span_kind_Set() const{
    return m_span_kind_isSet;
}

bool OAITraceSpan::is_span_kind_Valid() const{
    return m_span_kind_isValid;
}

QString OAITraceSpan::getStartTime() const {
    return m_start_time;
}
void OAITraceSpan::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAITraceSpan::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAITraceSpan::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIStatus OAITraceSpan::getStatus() const {
    return m_status;
}
void OAITraceSpan::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITraceSpan::is_status_Set() const{
    return m_status_isSet;
}

bool OAITraceSpan::is_status_Valid() const{
    return m_status_isValid;
}

bool OAITraceSpan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_span_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_same_process_as_parent_span_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraceSpan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
