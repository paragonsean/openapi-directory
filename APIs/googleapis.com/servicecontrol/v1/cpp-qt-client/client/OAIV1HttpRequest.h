/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIV1HttpRequest.h
 *
 * A common proto for logging HTTP requests. Only contains semantics defined by the HTTP specification. Product-specific logging information MUST be defined in a separate message.
 */

#ifndef OAIV1HttpRequest_H
#define OAIV1HttpRequest_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIV1HttpRequest : public OAIObject {
public:
    OAIV1HttpRequest();
    OAIV1HttpRequest(QString json);
    ~OAIV1HttpRequest() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCacheFillBytes() const;
    void setCacheFillBytes(const QString &cache_fill_bytes);
    bool is_cache_fill_bytes_Set() const;
    bool is_cache_fill_bytes_Valid() const;

    bool isCacheHit() const;
    void setCacheHit(const bool &cache_hit);
    bool is_cache_hit_Set() const;
    bool is_cache_hit_Valid() const;

    bool isCacheLookup() const;
    void setCacheLookup(const bool &cache_lookup);
    bool is_cache_lookup_Set() const;
    bool is_cache_lookup_Valid() const;

    bool isCacheValidatedWithOriginServer() const;
    void setCacheValidatedWithOriginServer(const bool &cache_validated_with_origin_server);
    bool is_cache_validated_with_origin_server_Set() const;
    bool is_cache_validated_with_origin_server_Valid() const;

    QString getLatency() const;
    void setLatency(const QString &latency);
    bool is_latency_Set() const;
    bool is_latency_Valid() const;

    QString getProtocol() const;
    void setProtocol(const QString &protocol);
    bool is_protocol_Set() const;
    bool is_protocol_Valid() const;

    QString getReferer() const;
    void setReferer(const QString &referer);
    bool is_referer_Set() const;
    bool is_referer_Valid() const;

    QString getRemoteIp() const;
    void setRemoteIp(const QString &remote_ip);
    bool is_remote_ip_Set() const;
    bool is_remote_ip_Valid() const;

    QString getRequestMethod() const;
    void setRequestMethod(const QString &request_method);
    bool is_request_method_Set() const;
    bool is_request_method_Valid() const;

    QString getRequestSize() const;
    void setRequestSize(const QString &request_size);
    bool is_request_size_Set() const;
    bool is_request_size_Valid() const;

    QString getRequestUrl() const;
    void setRequestUrl(const QString &request_url);
    bool is_request_url_Set() const;
    bool is_request_url_Valid() const;

    QString getResponseSize() const;
    void setResponseSize(const QString &response_size);
    bool is_response_size_Set() const;
    bool is_response_size_Valid() const;

    QString getServerIp() const;
    void setServerIp(const QString &server_ip);
    bool is_server_ip_Set() const;
    bool is_server_ip_Valid() const;

    qint32 getStatus() const;
    void setStatus(const qint32 &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getUserAgent() const;
    void setUserAgent(const QString &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cache_fill_bytes;
    bool m_cache_fill_bytes_isSet;
    bool m_cache_fill_bytes_isValid;

    bool m_cache_hit;
    bool m_cache_hit_isSet;
    bool m_cache_hit_isValid;

    bool m_cache_lookup;
    bool m_cache_lookup_isSet;
    bool m_cache_lookup_isValid;

    bool m_cache_validated_with_origin_server;
    bool m_cache_validated_with_origin_server_isSet;
    bool m_cache_validated_with_origin_server_isValid;

    QString m_latency;
    bool m_latency_isSet;
    bool m_latency_isValid;

    QString m_protocol;
    bool m_protocol_isSet;
    bool m_protocol_isValid;

    QString m_referer;
    bool m_referer_isSet;
    bool m_referer_isValid;

    QString m_remote_ip;
    bool m_remote_ip_isSet;
    bool m_remote_ip_isValid;

    QString m_request_method;
    bool m_request_method_isSet;
    bool m_request_method_isValid;

    QString m_request_size;
    bool m_request_size_isSet;
    bool m_request_size_isValid;

    QString m_request_url;
    bool m_request_url_isSet;
    bool m_request_url_isValid;

    QString m_response_size;
    bool m_response_size_isSet;
    bool m_response_size_isValid;

    QString m_server_ip;
    bool m_server_ip_isSet;
    bool m_server_ip_isValid;

    qint32 m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIV1HttpRequest)

#endif // OAIV1HttpRequest_H
