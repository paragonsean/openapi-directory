/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAccountDelegationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceAccountDelegationInfo::OAIServiceAccountDelegationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceAccountDelegationInfo::OAIServiceAccountDelegationInfo() {
    this->initializeModel();
}

OAIServiceAccountDelegationInfo::~OAIServiceAccountDelegationInfo() {}

void OAIServiceAccountDelegationInfo::initializeModel() {

    m_first_party_principal_isSet = false;
    m_first_party_principal_isValid = false;

    m_principal_subject_isSet = false;
    m_principal_subject_isValid = false;

    m_third_party_principal_isSet = false;
    m_third_party_principal_isValid = false;
}

void OAIServiceAccountDelegationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceAccountDelegationInfo::fromJsonObject(QJsonObject json) {

    m_first_party_principal_isValid = ::OpenAPI::fromJsonValue(m_first_party_principal, json[QString("firstPartyPrincipal")]);
    m_first_party_principal_isSet = !json[QString("firstPartyPrincipal")].isNull() && m_first_party_principal_isValid;

    m_principal_subject_isValid = ::OpenAPI::fromJsonValue(m_principal_subject, json[QString("principalSubject")]);
    m_principal_subject_isSet = !json[QString("principalSubject")].isNull() && m_principal_subject_isValid;

    m_third_party_principal_isValid = ::OpenAPI::fromJsonValue(m_third_party_principal, json[QString("thirdPartyPrincipal")]);
    m_third_party_principal_isSet = !json[QString("thirdPartyPrincipal")].isNull() && m_third_party_principal_isValid;
}

QString OAIServiceAccountDelegationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceAccountDelegationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_first_party_principal.isSet()) {
        obj.insert(QString("firstPartyPrincipal"), ::OpenAPI::toJsonValue(m_first_party_principal));
    }
    if (m_principal_subject_isSet) {
        obj.insert(QString("principalSubject"), ::OpenAPI::toJsonValue(m_principal_subject));
    }
    if (m_third_party_principal.isSet()) {
        obj.insert(QString("thirdPartyPrincipal"), ::OpenAPI::toJsonValue(m_third_party_principal));
    }
    return obj;
}

OAIFirstPartyPrincipal OAIServiceAccountDelegationInfo::getFirstPartyPrincipal() const {
    return m_first_party_principal;
}
void OAIServiceAccountDelegationInfo::setFirstPartyPrincipal(const OAIFirstPartyPrincipal &first_party_principal) {
    m_first_party_principal = first_party_principal;
    m_first_party_principal_isSet = true;
}

bool OAIServiceAccountDelegationInfo::is_first_party_principal_Set() const{
    return m_first_party_principal_isSet;
}

bool OAIServiceAccountDelegationInfo::is_first_party_principal_Valid() const{
    return m_first_party_principal_isValid;
}

QString OAIServiceAccountDelegationInfo::getPrincipalSubject() const {
    return m_principal_subject;
}
void OAIServiceAccountDelegationInfo::setPrincipalSubject(const QString &principal_subject) {
    m_principal_subject = principal_subject;
    m_principal_subject_isSet = true;
}

bool OAIServiceAccountDelegationInfo::is_principal_subject_Set() const{
    return m_principal_subject_isSet;
}

bool OAIServiceAccountDelegationInfo::is_principal_subject_Valid() const{
    return m_principal_subject_isValid;
}

OAIThirdPartyPrincipal OAIServiceAccountDelegationInfo::getThirdPartyPrincipal() const {
    return m_third_party_principal;
}
void OAIServiceAccountDelegationInfo::setThirdPartyPrincipal(const OAIThirdPartyPrincipal &third_party_principal) {
    m_third_party_principal = third_party_principal;
    m_third_party_principal_isSet = true;
}

bool OAIServiceAccountDelegationInfo::is_third_party_principal_Set() const{
    return m_third_party_principal_isSet;
}

bool OAIServiceAccountDelegationInfo::is_third_party_principal_Valid() const{
    return m_third_party_principal_isValid;
}

bool OAIServiceAccountDelegationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_party_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_principal.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceAccountDelegationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
