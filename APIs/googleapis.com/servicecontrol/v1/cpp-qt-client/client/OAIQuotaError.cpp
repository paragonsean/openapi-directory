/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaError::OAIQuotaError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaError::OAIQuotaError() {
    this->initializeModel();
}

OAIQuotaError::~OAIQuotaError() {}

void OAIQuotaError::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIQuotaError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaError::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIQuotaError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaError::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIQuotaError::getCode() const {
    return m_code;
}
void OAIQuotaError::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIQuotaError::is_code_Set() const{
    return m_code_isSet;
}

bool OAIQuotaError::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIQuotaError::getDescription() const {
    return m_description;
}
void OAIQuotaError::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIQuotaError::is_description_Set() const{
    return m_description_isSet;
}

bool OAIQuotaError::is_description_Valid() const{
    return m_description_isValid;
}

OAIStatus OAIQuotaError::getStatus() const {
    return m_status;
}
void OAIQuotaError::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIQuotaError::is_status_Set() const{
    return m_status_isSet;
}

bool OAIQuotaError::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIQuotaError::getSubject() const {
    return m_subject;
}
void OAIQuotaError::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIQuotaError::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIQuotaError::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIQuotaError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
