/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAllocateInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAllocateInfo::OAIAllocateInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAllocateInfo::OAIAllocateInfo() {
    this->initializeModel();
}

OAIAllocateInfo::~OAIAllocateInfo() {}

void OAIAllocateInfo::initializeModel() {

    m_unused_arguments_isSet = false;
    m_unused_arguments_isValid = false;
}

void OAIAllocateInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAllocateInfo::fromJsonObject(QJsonObject json) {

    m_unused_arguments_isValid = ::OpenAPI::fromJsonValue(m_unused_arguments, json[QString("unusedArguments")]);
    m_unused_arguments_isSet = !json[QString("unusedArguments")].isNull() && m_unused_arguments_isValid;
}

QString OAIAllocateInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAllocateInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_unused_arguments.size() > 0) {
        obj.insert(QString("unusedArguments"), ::OpenAPI::toJsonValue(m_unused_arguments));
    }
    return obj;
}

QList<QString> OAIAllocateInfo::getUnusedArguments() const {
    return m_unused_arguments;
}
void OAIAllocateInfo::setUnusedArguments(const QList<QString> &unused_arguments) {
    m_unused_arguments = unused_arguments;
    m_unused_arguments_isSet = true;
}

bool OAIAllocateInfo::is_unused_arguments_Set() const{
    return m_unused_arguments_isSet;
}

bool OAIAllocateInfo::is_unused_arguments_Valid() const{
    return m_unused_arguments_isValid;
}

bool OAIAllocateInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_unused_arguments.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAllocateInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
