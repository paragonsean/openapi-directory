/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDistribution.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDistribution::OAIDistribution(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDistribution::OAIDistribution() {
    this->initializeModel();
}

OAIDistribution::~OAIDistribution() {}

void OAIDistribution::initializeModel() {

    m_bucket_counts_isSet = false;
    m_bucket_counts_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_exemplars_isSet = false;
    m_exemplars_isValid = false;

    m_explicit_buckets_isSet = false;
    m_explicit_buckets_isValid = false;

    m_exponential_buckets_isSet = false;
    m_exponential_buckets_isValid = false;

    m_linear_buckets_isSet = false;
    m_linear_buckets_isValid = false;

    m_maximum_isSet = false;
    m_maximum_isValid = false;

    m_mean_isSet = false;
    m_mean_isValid = false;

    m_minimum_isSet = false;
    m_minimum_isValid = false;

    m_sum_of_squared_deviation_isSet = false;
    m_sum_of_squared_deviation_isValid = false;
}

void OAIDistribution::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDistribution::fromJsonObject(QJsonObject json) {

    m_bucket_counts_isValid = ::OpenAPI::fromJsonValue(m_bucket_counts, json[QString("bucketCounts")]);
    m_bucket_counts_isSet = !json[QString("bucketCounts")].isNull() && m_bucket_counts_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_exemplars_isValid = ::OpenAPI::fromJsonValue(m_exemplars, json[QString("exemplars")]);
    m_exemplars_isSet = !json[QString("exemplars")].isNull() && m_exemplars_isValid;

    m_explicit_buckets_isValid = ::OpenAPI::fromJsonValue(m_explicit_buckets, json[QString("explicitBuckets")]);
    m_explicit_buckets_isSet = !json[QString("explicitBuckets")].isNull() && m_explicit_buckets_isValid;

    m_exponential_buckets_isValid = ::OpenAPI::fromJsonValue(m_exponential_buckets, json[QString("exponentialBuckets")]);
    m_exponential_buckets_isSet = !json[QString("exponentialBuckets")].isNull() && m_exponential_buckets_isValid;

    m_linear_buckets_isValid = ::OpenAPI::fromJsonValue(m_linear_buckets, json[QString("linearBuckets")]);
    m_linear_buckets_isSet = !json[QString("linearBuckets")].isNull() && m_linear_buckets_isValid;

    m_maximum_isValid = ::OpenAPI::fromJsonValue(m_maximum, json[QString("maximum")]);
    m_maximum_isSet = !json[QString("maximum")].isNull() && m_maximum_isValid;

    m_mean_isValid = ::OpenAPI::fromJsonValue(m_mean, json[QString("mean")]);
    m_mean_isSet = !json[QString("mean")].isNull() && m_mean_isValid;

    m_minimum_isValid = ::OpenAPI::fromJsonValue(m_minimum, json[QString("minimum")]);
    m_minimum_isSet = !json[QString("minimum")].isNull() && m_minimum_isValid;

    m_sum_of_squared_deviation_isValid = ::OpenAPI::fromJsonValue(m_sum_of_squared_deviation, json[QString("sumOfSquaredDeviation")]);
    m_sum_of_squared_deviation_isSet = !json[QString("sumOfSquaredDeviation")].isNull() && m_sum_of_squared_deviation_isValid;
}

QString OAIDistribution::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDistribution::asJsonObject() const {
    QJsonObject obj;
    if (m_bucket_counts.size() > 0) {
        obj.insert(QString("bucketCounts"), ::OpenAPI::toJsonValue(m_bucket_counts));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_exemplars.size() > 0) {
        obj.insert(QString("exemplars"), ::OpenAPI::toJsonValue(m_exemplars));
    }
    if (m_explicit_buckets.isSet()) {
        obj.insert(QString("explicitBuckets"), ::OpenAPI::toJsonValue(m_explicit_buckets));
    }
    if (m_exponential_buckets.isSet()) {
        obj.insert(QString("exponentialBuckets"), ::OpenAPI::toJsonValue(m_exponential_buckets));
    }
    if (m_linear_buckets.isSet()) {
        obj.insert(QString("linearBuckets"), ::OpenAPI::toJsonValue(m_linear_buckets));
    }
    if (m_maximum_isSet) {
        obj.insert(QString("maximum"), ::OpenAPI::toJsonValue(m_maximum));
    }
    if (m_mean_isSet) {
        obj.insert(QString("mean"), ::OpenAPI::toJsonValue(m_mean));
    }
    if (m_minimum_isSet) {
        obj.insert(QString("minimum"), ::OpenAPI::toJsonValue(m_minimum));
    }
    if (m_sum_of_squared_deviation_isSet) {
        obj.insert(QString("sumOfSquaredDeviation"), ::OpenAPI::toJsonValue(m_sum_of_squared_deviation));
    }
    return obj;
}

QList<QString> OAIDistribution::getBucketCounts() const {
    return m_bucket_counts;
}
void OAIDistribution::setBucketCounts(const QList<QString> &bucket_counts) {
    m_bucket_counts = bucket_counts;
    m_bucket_counts_isSet = true;
}

bool OAIDistribution::is_bucket_counts_Set() const{
    return m_bucket_counts_isSet;
}

bool OAIDistribution::is_bucket_counts_Valid() const{
    return m_bucket_counts_isValid;
}

QString OAIDistribution::getCount() const {
    return m_count;
}
void OAIDistribution::setCount(const QString &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIDistribution::is_count_Set() const{
    return m_count_isSet;
}

bool OAIDistribution::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIExemplar> OAIDistribution::getExemplars() const {
    return m_exemplars;
}
void OAIDistribution::setExemplars(const QList<OAIExemplar> &exemplars) {
    m_exemplars = exemplars;
    m_exemplars_isSet = true;
}

bool OAIDistribution::is_exemplars_Set() const{
    return m_exemplars_isSet;
}

bool OAIDistribution::is_exemplars_Valid() const{
    return m_exemplars_isValid;
}

OAIExplicitBuckets OAIDistribution::getExplicitBuckets() const {
    return m_explicit_buckets;
}
void OAIDistribution::setExplicitBuckets(const OAIExplicitBuckets &explicit_buckets) {
    m_explicit_buckets = explicit_buckets;
    m_explicit_buckets_isSet = true;
}

bool OAIDistribution::is_explicit_buckets_Set() const{
    return m_explicit_buckets_isSet;
}

bool OAIDistribution::is_explicit_buckets_Valid() const{
    return m_explicit_buckets_isValid;
}

OAIExponentialBuckets OAIDistribution::getExponentialBuckets() const {
    return m_exponential_buckets;
}
void OAIDistribution::setExponentialBuckets(const OAIExponentialBuckets &exponential_buckets) {
    m_exponential_buckets = exponential_buckets;
    m_exponential_buckets_isSet = true;
}

bool OAIDistribution::is_exponential_buckets_Set() const{
    return m_exponential_buckets_isSet;
}

bool OAIDistribution::is_exponential_buckets_Valid() const{
    return m_exponential_buckets_isValid;
}

OAILinearBuckets OAIDistribution::getLinearBuckets() const {
    return m_linear_buckets;
}
void OAIDistribution::setLinearBuckets(const OAILinearBuckets &linear_buckets) {
    m_linear_buckets = linear_buckets;
    m_linear_buckets_isSet = true;
}

bool OAIDistribution::is_linear_buckets_Set() const{
    return m_linear_buckets_isSet;
}

bool OAIDistribution::is_linear_buckets_Valid() const{
    return m_linear_buckets_isValid;
}

double OAIDistribution::getMaximum() const {
    return m_maximum;
}
void OAIDistribution::setMaximum(const double &maximum) {
    m_maximum = maximum;
    m_maximum_isSet = true;
}

bool OAIDistribution::is_maximum_Set() const{
    return m_maximum_isSet;
}

bool OAIDistribution::is_maximum_Valid() const{
    return m_maximum_isValid;
}

double OAIDistribution::getMean() const {
    return m_mean;
}
void OAIDistribution::setMean(const double &mean) {
    m_mean = mean;
    m_mean_isSet = true;
}

bool OAIDistribution::is_mean_Set() const{
    return m_mean_isSet;
}

bool OAIDistribution::is_mean_Valid() const{
    return m_mean_isValid;
}

double OAIDistribution::getMinimum() const {
    return m_minimum;
}
void OAIDistribution::setMinimum(const double &minimum) {
    m_minimum = minimum;
    m_minimum_isSet = true;
}

bool OAIDistribution::is_minimum_Set() const{
    return m_minimum_isSet;
}

bool OAIDistribution::is_minimum_Valid() const{
    return m_minimum_isValid;
}

double OAIDistribution::getSumOfSquaredDeviation() const {
    return m_sum_of_squared_deviation;
}
void OAIDistribution::setSumOfSquaredDeviation(const double &sum_of_squared_deviation) {
    m_sum_of_squared_deviation = sum_of_squared_deviation;
    m_sum_of_squared_deviation_isSet = true;
}

bool OAIDistribution::is_sum_of_squared_deviation_Set() const{
    return m_sum_of_squared_deviation_isSet;
}

bool OAIDistribution::is_sum_of_squared_deviation_Valid() const{
    return m_sum_of_squared_deviation_isValid;
}

bool OAIDistribution::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bucket_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exemplars.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_explicit_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_exponential_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linear_buckets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sum_of_squared_deviation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDistribution::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
