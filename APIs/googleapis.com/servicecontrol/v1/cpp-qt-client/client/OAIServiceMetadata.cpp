/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceMetadata::OAIServiceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceMetadata::OAIServiceMetadata() {
    this->initializeModel();
}

OAIServiceMetadata::~OAIServiceMetadata() {}

void OAIServiceMetadata::initializeModel() {

    m_job_metadata_isSet = false;
    m_job_metadata_isValid = false;

    m_principal_subject_isSet = false;
    m_principal_subject_isValid = false;

    m_service_domain_isSet = false;
    m_service_domain_isValid = false;
}

void OAIServiceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceMetadata::fromJsonObject(QJsonObject json) {

    m_job_metadata_isValid = ::OpenAPI::fromJsonValue(m_job_metadata, json[QString("jobMetadata")]);
    m_job_metadata_isSet = !json[QString("jobMetadata")].isNull() && m_job_metadata_isValid;

    m_principal_subject_isValid = ::OpenAPI::fromJsonValue(m_principal_subject, json[QString("principalSubject")]);
    m_principal_subject_isSet = !json[QString("principalSubject")].isNull() && m_principal_subject_isValid;

    m_service_domain_isValid = ::OpenAPI::fromJsonValue(m_service_domain, json[QString("serviceDomain")]);
    m_service_domain_isSet = !json[QString("serviceDomain")].isNull() && m_service_domain_isValid;
}

QString OAIServiceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_job_metadata.size() > 0) {
        obj.insert(QString("jobMetadata"), ::OpenAPI::toJsonValue(m_job_metadata));
    }
    if (m_principal_subject_isSet) {
        obj.insert(QString("principalSubject"), ::OpenAPI::toJsonValue(m_principal_subject));
    }
    if (m_service_domain_isSet) {
        obj.insert(QString("serviceDomain"), ::OpenAPI::toJsonValue(m_service_domain));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIServiceMetadata::getJobMetadata() const {
    return m_job_metadata;
}
void OAIServiceMetadata::setJobMetadata(const QMap<QString, QJsonValue> &job_metadata) {
    m_job_metadata = job_metadata;
    m_job_metadata_isSet = true;
}

bool OAIServiceMetadata::is_job_metadata_Set() const{
    return m_job_metadata_isSet;
}

bool OAIServiceMetadata::is_job_metadata_Valid() const{
    return m_job_metadata_isValid;
}

QString OAIServiceMetadata::getPrincipalSubject() const {
    return m_principal_subject;
}
void OAIServiceMetadata::setPrincipalSubject(const QString &principal_subject) {
    m_principal_subject = principal_subject;
    m_principal_subject_isSet = true;
}

bool OAIServiceMetadata::is_principal_subject_Set() const{
    return m_principal_subject_isSet;
}

bool OAIServiceMetadata::is_principal_subject_Valid() const{
    return m_principal_subject_isValid;
}

QString OAIServiceMetadata::getServiceDomain() const {
    return m_service_domain;
}
void OAIServiceMetadata::setServiceDomain(const QString &service_domain) {
    m_service_domain = service_domain;
    m_service_domain_isSet = true;
}

bool OAIServiceMetadata::is_service_domain_Set() const{
    return m_service_domain_isSet;
}

bool OAIServiceMetadata::is_service_domain_Valid() const{
    return m_service_domain_isValid;
}

bool OAIServiceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_job_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_domain_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
