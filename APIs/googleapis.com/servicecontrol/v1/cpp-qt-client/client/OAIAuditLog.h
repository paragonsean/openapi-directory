/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuditLog.h
 *
 * Common audit log format for Google Cloud Platform API operations. 
 */

#ifndef OAIAuditLog_H
#define OAIAuditLog_H

#include <QJsonObject>

#include "OAIAuthenticationInfo.h"
#include "OAIAuthorizationInfo.h"
#include "OAIPolicyViolationInfo.h"
#include "OAIRequestMetadata.h"
#include "OAIResourceLocation.h"
#include "OAIStatus.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAuthenticationInfo;
class OAIAuthorizationInfo;
class OAIPolicyViolationInfo;
class OAIRequestMetadata;
class OAIResourceLocation;
class OAIStatus;

class OAIAuditLog : public OAIObject {
public:
    OAIAuditLog();
    OAIAuditLog(QString json);
    ~OAIAuditLog() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAuthenticationInfo getAuthenticationInfo() const;
    void setAuthenticationInfo(const OAIAuthenticationInfo &authentication_info);
    bool is_authentication_info_Set() const;
    bool is_authentication_info_Valid() const;

    QList<OAIAuthorizationInfo> getAuthorizationInfo() const;
    void setAuthorizationInfo(const QList<OAIAuthorizationInfo> &authorization_info);
    bool is_authorization_info_Set() const;
    bool is_authorization_info_Valid() const;

    QMap<QString, QJsonValue> getMetadata() const;
    void setMetadata(const QMap<QString, QJsonValue> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getMethodName() const;
    void setMethodName(const QString &method_name);
    bool is_method_name_Set() const;
    bool is_method_name_Valid() const;

    QString getNumResponseItems() const;
    void setNumResponseItems(const QString &num_response_items);
    bool is_num_response_items_Set() const;
    bool is_num_response_items_Valid() const;

    OAIPolicyViolationInfo getPolicyViolationInfo() const;
    void setPolicyViolationInfo(const OAIPolicyViolationInfo &policy_violation_info);
    bool is_policy_violation_info_Set() const;
    bool is_policy_violation_info_Valid() const;

    QMap<QString, QJsonValue> getRequest() const;
    void setRequest(const QMap<QString, QJsonValue> &request);
    bool is_request_Set() const;
    bool is_request_Valid() const;

    OAIRequestMetadata getRequestMetadata() const;
    void setRequestMetadata(const OAIRequestMetadata &request_metadata);
    bool is_request_metadata_Set() const;
    bool is_request_metadata_Valid() const;

    OAIResourceLocation getResourceLocation() const;
    void setResourceLocation(const OAIResourceLocation &resource_location);
    bool is_resource_location_Set() const;
    bool is_resource_location_Valid() const;

    QString getResourceName() const;
    void setResourceName(const QString &resource_name);
    bool is_resource_name_Set() const;
    bool is_resource_name_Valid() const;

    QMap<QString, QJsonValue> getResourceOriginalState() const;
    void setResourceOriginalState(const QMap<QString, QJsonValue> &resource_original_state);
    bool is_resource_original_state_Set() const;
    bool is_resource_original_state_Valid() const;

    QMap<QString, QJsonValue> getResponse() const;
    void setResponse(const QMap<QString, QJsonValue> &response);
    bool is_response_Set() const;
    bool is_response_Valid() const;

    Q_DECL_DEPRECATED QMap<QString, QJsonValue> getServiceData() const;
    Q_DECL_DEPRECATED void setServiceData(const QMap<QString, QJsonValue> &service_data);
    Q_DECL_DEPRECATED bool is_service_data_Set() const;
    Q_DECL_DEPRECATED bool is_service_data_Valid() const;

    QString getServiceName() const;
    void setServiceName(const QString &service_name);
    bool is_service_name_Set() const;
    bool is_service_name_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAuthenticationInfo m_authentication_info;
    bool m_authentication_info_isSet;
    bool m_authentication_info_isValid;

    QList<OAIAuthorizationInfo> m_authorization_info;
    bool m_authorization_info_isSet;
    bool m_authorization_info_isValid;

    QMap<QString, QJsonValue> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_method_name;
    bool m_method_name_isSet;
    bool m_method_name_isValid;

    QString m_num_response_items;
    bool m_num_response_items_isSet;
    bool m_num_response_items_isValid;

    OAIPolicyViolationInfo m_policy_violation_info;
    bool m_policy_violation_info_isSet;
    bool m_policy_violation_info_isValid;

    QMap<QString, QJsonValue> m_request;
    bool m_request_isSet;
    bool m_request_isValid;

    OAIRequestMetadata m_request_metadata;
    bool m_request_metadata_isSet;
    bool m_request_metadata_isValid;

    OAIResourceLocation m_resource_location;
    bool m_resource_location_isSet;
    bool m_resource_location_isValid;

    QString m_resource_name;
    bool m_resource_name_isSet;
    bool m_resource_name_isValid;

    QMap<QString, QJsonValue> m_resource_original_state;
    bool m_resource_original_state_isSet;
    bool m_resource_original_state_isValid;

    QMap<QString, QJsonValue> m_response;
    bool m_response_isSet;
    bool m_response_isValid;

    QMap<QString, QJsonValue> m_service_data;
    bool m_service_data_isSet;
    bool m_service_data_isValid;

    QString m_service_name;
    bool m_service_name_isSet;
    bool m_service_name_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuditLog)

#endif // OAIAuditLog_H
