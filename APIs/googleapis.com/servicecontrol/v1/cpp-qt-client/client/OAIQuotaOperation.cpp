/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaOperation::OAIQuotaOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaOperation::OAIQuotaOperation() {
    this->initializeModel();
}

OAIQuotaOperation::~OAIQuotaOperation() {}

void OAIQuotaOperation::initializeModel() {

    m_consumer_id_isSet = false;
    m_consumer_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_method_name_isSet = false;
    m_method_name_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_quota_metrics_isSet = false;
    m_quota_metrics_isValid = false;

    m_quota_mode_isSet = false;
    m_quota_mode_isValid = false;
}

void OAIQuotaOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaOperation::fromJsonObject(QJsonObject json) {

    m_consumer_id_isValid = ::OpenAPI::fromJsonValue(m_consumer_id, json[QString("consumerId")]);
    m_consumer_id_isSet = !json[QString("consumerId")].isNull() && m_consumer_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_method_name_isValid = ::OpenAPI::fromJsonValue(m_method_name, json[QString("methodName")]);
    m_method_name_isSet = !json[QString("methodName")].isNull() && m_method_name_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_quota_metrics_isValid = ::OpenAPI::fromJsonValue(m_quota_metrics, json[QString("quotaMetrics")]);
    m_quota_metrics_isSet = !json[QString("quotaMetrics")].isNull() && m_quota_metrics_isValid;

    m_quota_mode_isValid = ::OpenAPI::fromJsonValue(m_quota_mode, json[QString("quotaMode")]);
    m_quota_mode_isSet = !json[QString("quotaMode")].isNull() && m_quota_mode_isValid;
}

QString OAIQuotaOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_id_isSet) {
        obj.insert(QString("consumerId"), ::OpenAPI::toJsonValue(m_consumer_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_method_name_isSet) {
        obj.insert(QString("methodName"), ::OpenAPI::toJsonValue(m_method_name));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_quota_metrics.size() > 0) {
        obj.insert(QString("quotaMetrics"), ::OpenAPI::toJsonValue(m_quota_metrics));
    }
    if (m_quota_mode_isSet) {
        obj.insert(QString("quotaMode"), ::OpenAPI::toJsonValue(m_quota_mode));
    }
    return obj;
}

QString OAIQuotaOperation::getConsumerId() const {
    return m_consumer_id;
}
void OAIQuotaOperation::setConsumerId(const QString &consumer_id) {
    m_consumer_id = consumer_id;
    m_consumer_id_isSet = true;
}

bool OAIQuotaOperation::is_consumer_id_Set() const{
    return m_consumer_id_isSet;
}

bool OAIQuotaOperation::is_consumer_id_Valid() const{
    return m_consumer_id_isValid;
}

QMap<QString, QString> OAIQuotaOperation::getLabels() const {
    return m_labels;
}
void OAIQuotaOperation::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIQuotaOperation::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIQuotaOperation::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIQuotaOperation::getMethodName() const {
    return m_method_name;
}
void OAIQuotaOperation::setMethodName(const QString &method_name) {
    m_method_name = method_name;
    m_method_name_isSet = true;
}

bool OAIQuotaOperation::is_method_name_Set() const{
    return m_method_name_isSet;
}

bool OAIQuotaOperation::is_method_name_Valid() const{
    return m_method_name_isValid;
}

QString OAIQuotaOperation::getOperationId() const {
    return m_operation_id;
}
void OAIQuotaOperation::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIQuotaOperation::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIQuotaOperation::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QList<OAIMetricValueSet> OAIQuotaOperation::getQuotaMetrics() const {
    return m_quota_metrics;
}
void OAIQuotaOperation::setQuotaMetrics(const QList<OAIMetricValueSet> &quota_metrics) {
    m_quota_metrics = quota_metrics;
    m_quota_metrics_isSet = true;
}

bool OAIQuotaOperation::is_quota_metrics_Set() const{
    return m_quota_metrics_isSet;
}

bool OAIQuotaOperation::is_quota_metrics_Valid() const{
    return m_quota_metrics_isValid;
}

QString OAIQuotaOperation::getQuotaMode() const {
    return m_quota_mode;
}
void OAIQuotaOperation::setQuotaMode(const QString &quota_mode) {
    m_quota_mode = quota_mode;
    m_quota_mode_isSet = true;
}

bool OAIQuotaOperation::is_quota_mode_Set() const{
    return m_quota_mode_isSet;
}

bool OAIQuotaOperation::is_quota_mode_Valid() const{
    return m_quota_mode_isValid;
}

bool OAIQuotaOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
