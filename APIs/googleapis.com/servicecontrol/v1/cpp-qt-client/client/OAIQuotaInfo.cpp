/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotaInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotaInfo::OAIQuotaInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotaInfo::OAIQuotaInfo() {
    this->initializeModel();
}

OAIQuotaInfo::~OAIQuotaInfo() {}

void OAIQuotaInfo::initializeModel() {

    m_limit_exceeded_isSet = false;
    m_limit_exceeded_isValid = false;

    m_quota_consumed_isSet = false;
    m_quota_consumed_isValid = false;

    m_quota_metrics_isSet = false;
    m_quota_metrics_isValid = false;
}

void OAIQuotaInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotaInfo::fromJsonObject(QJsonObject json) {

    m_limit_exceeded_isValid = ::OpenAPI::fromJsonValue(m_limit_exceeded, json[QString("limitExceeded")]);
    m_limit_exceeded_isSet = !json[QString("limitExceeded")].isNull() && m_limit_exceeded_isValid;

    m_quota_consumed_isValid = ::OpenAPI::fromJsonValue(m_quota_consumed, json[QString("quotaConsumed")]);
    m_quota_consumed_isSet = !json[QString("quotaConsumed")].isNull() && m_quota_consumed_isValid;

    m_quota_metrics_isValid = ::OpenAPI::fromJsonValue(m_quota_metrics, json[QString("quotaMetrics")]);
    m_quota_metrics_isSet = !json[QString("quotaMetrics")].isNull() && m_quota_metrics_isValid;
}

QString OAIQuotaInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotaInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_exceeded.size() > 0) {
        obj.insert(QString("limitExceeded"), ::OpenAPI::toJsonValue(m_limit_exceeded));
    }
    if (m_quota_consumed.size() > 0) {
        obj.insert(QString("quotaConsumed"), ::OpenAPI::toJsonValue(m_quota_consumed));
    }
    if (m_quota_metrics.size() > 0) {
        obj.insert(QString("quotaMetrics"), ::OpenAPI::toJsonValue(m_quota_metrics));
    }
    return obj;
}

QList<QString> OAIQuotaInfo::getLimitExceeded() const {
    return m_limit_exceeded;
}
void OAIQuotaInfo::setLimitExceeded(const QList<QString> &limit_exceeded) {
    m_limit_exceeded = limit_exceeded;
    m_limit_exceeded_isSet = true;
}

bool OAIQuotaInfo::is_limit_exceeded_Set() const{
    return m_limit_exceeded_isSet;
}

bool OAIQuotaInfo::is_limit_exceeded_Valid() const{
    return m_limit_exceeded_isValid;
}

QMap<QString, qint32> OAIQuotaInfo::getQuotaConsumed() const {
    return m_quota_consumed;
}
void OAIQuotaInfo::setQuotaConsumed(const QMap<QString, qint32> &quota_consumed) {
    m_quota_consumed = quota_consumed;
    m_quota_consumed_isSet = true;
}

bool OAIQuotaInfo::is_quota_consumed_Set() const{
    return m_quota_consumed_isSet;
}

bool OAIQuotaInfo::is_quota_consumed_Valid() const{
    return m_quota_consumed_isValid;
}

QList<OAIMetricValueSet> OAIQuotaInfo::getQuotaMetrics() const {
    return m_quota_metrics;
}
void OAIQuotaInfo::setQuotaMetrics(const QList<OAIMetricValueSet> &quota_metrics) {
    m_quota_metrics = quota_metrics;
    m_quota_metrics_isSet = true;
}

bool OAIQuotaInfo::is_quota_metrics_Set() const{
    return m_quota_metrics_isSet;
}

bool OAIQuotaInfo::is_quota_metrics_Valid() const{
    return m_quota_metrics_isValid;
}

bool OAIQuotaInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_exceeded.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_consumed.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotaInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
