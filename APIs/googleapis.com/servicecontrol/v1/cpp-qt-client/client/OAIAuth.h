/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAuth.h
 *
 * This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
 */

#ifndef OAIAuth_H
#define OAIAuth_H

#include <QJsonObject>

#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAuth : public OAIObject {
public:
    OAIAuth();
    OAIAuth(QString json);
    ~OAIAuth() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAccessLevels() const;
    void setAccessLevels(const QList<QString> &access_levels);
    bool is_access_levels_Set() const;
    bool is_access_levels_Valid() const;

    QList<QString> getAudiences() const;
    void setAudiences(const QList<QString> &audiences);
    bool is_audiences_Set() const;
    bool is_audiences_Valid() const;

    QMap<QString, QJsonValue> getClaims() const;
    void setClaims(const QMap<QString, QJsonValue> &claims);
    bool is_claims_Set() const;
    bool is_claims_Valid() const;

    QString getPresenter() const;
    void setPresenter(const QString &presenter);
    bool is_presenter_Set() const;
    bool is_presenter_Valid() const;

    QString getPrincipal() const;
    void setPrincipal(const QString &principal);
    bool is_principal_Set() const;
    bool is_principal_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_access_levels;
    bool m_access_levels_isSet;
    bool m_access_levels_isValid;

    QList<QString> m_audiences;
    bool m_audiences_isSet;
    bool m_audiences_isValid;

    QMap<QString, QJsonValue> m_claims;
    bool m_claims_isSet;
    bool m_claims_isValid;

    QString m_presenter;
    bool m_presenter_isSet;
    bool m_presenter_isValid;

    QString m_principal;
    bool m_principal_isSet;
    bool m_principal_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAuth)

#endif // OAIAuth_H
