/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequestMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequestMetadata::OAIRequestMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequestMetadata::OAIRequestMetadata() {
    this->initializeModel();
}

OAIRequestMetadata::~OAIRequestMetadata() {}

void OAIRequestMetadata::initializeModel() {

    m_caller_ip_isSet = false;
    m_caller_ip_isValid = false;

    m_caller_network_isSet = false;
    m_caller_network_isValid = false;

    m_caller_supplied_user_agent_isSet = false;
    m_caller_supplied_user_agent_isValid = false;

    m_destination_attributes_isSet = false;
    m_destination_attributes_isValid = false;

    m_request_attributes_isSet = false;
    m_request_attributes_isValid = false;
}

void OAIRequestMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequestMetadata::fromJsonObject(QJsonObject json) {

    m_caller_ip_isValid = ::OpenAPI::fromJsonValue(m_caller_ip, json[QString("callerIp")]);
    m_caller_ip_isSet = !json[QString("callerIp")].isNull() && m_caller_ip_isValid;

    m_caller_network_isValid = ::OpenAPI::fromJsonValue(m_caller_network, json[QString("callerNetwork")]);
    m_caller_network_isSet = !json[QString("callerNetwork")].isNull() && m_caller_network_isValid;

    m_caller_supplied_user_agent_isValid = ::OpenAPI::fromJsonValue(m_caller_supplied_user_agent, json[QString("callerSuppliedUserAgent")]);
    m_caller_supplied_user_agent_isSet = !json[QString("callerSuppliedUserAgent")].isNull() && m_caller_supplied_user_agent_isValid;

    m_destination_attributes_isValid = ::OpenAPI::fromJsonValue(m_destination_attributes, json[QString("destinationAttributes")]);
    m_destination_attributes_isSet = !json[QString("destinationAttributes")].isNull() && m_destination_attributes_isValid;

    m_request_attributes_isValid = ::OpenAPI::fromJsonValue(m_request_attributes, json[QString("requestAttributes")]);
    m_request_attributes_isSet = !json[QString("requestAttributes")].isNull() && m_request_attributes_isValid;
}

QString OAIRequestMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequestMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_caller_ip_isSet) {
        obj.insert(QString("callerIp"), ::OpenAPI::toJsonValue(m_caller_ip));
    }
    if (m_caller_network_isSet) {
        obj.insert(QString("callerNetwork"), ::OpenAPI::toJsonValue(m_caller_network));
    }
    if (m_caller_supplied_user_agent_isSet) {
        obj.insert(QString("callerSuppliedUserAgent"), ::OpenAPI::toJsonValue(m_caller_supplied_user_agent));
    }
    if (m_destination_attributes.isSet()) {
        obj.insert(QString("destinationAttributes"), ::OpenAPI::toJsonValue(m_destination_attributes));
    }
    if (m_request_attributes.isSet()) {
        obj.insert(QString("requestAttributes"), ::OpenAPI::toJsonValue(m_request_attributes));
    }
    return obj;
}

QString OAIRequestMetadata::getCallerIp() const {
    return m_caller_ip;
}
void OAIRequestMetadata::setCallerIp(const QString &caller_ip) {
    m_caller_ip = caller_ip;
    m_caller_ip_isSet = true;
}

bool OAIRequestMetadata::is_caller_ip_Set() const{
    return m_caller_ip_isSet;
}

bool OAIRequestMetadata::is_caller_ip_Valid() const{
    return m_caller_ip_isValid;
}

QString OAIRequestMetadata::getCallerNetwork() const {
    return m_caller_network;
}
void OAIRequestMetadata::setCallerNetwork(const QString &caller_network) {
    m_caller_network = caller_network;
    m_caller_network_isSet = true;
}

bool OAIRequestMetadata::is_caller_network_Set() const{
    return m_caller_network_isSet;
}

bool OAIRequestMetadata::is_caller_network_Valid() const{
    return m_caller_network_isValid;
}

QString OAIRequestMetadata::getCallerSuppliedUserAgent() const {
    return m_caller_supplied_user_agent;
}
void OAIRequestMetadata::setCallerSuppliedUserAgent(const QString &caller_supplied_user_agent) {
    m_caller_supplied_user_agent = caller_supplied_user_agent;
    m_caller_supplied_user_agent_isSet = true;
}

bool OAIRequestMetadata::is_caller_supplied_user_agent_Set() const{
    return m_caller_supplied_user_agent_isSet;
}

bool OAIRequestMetadata::is_caller_supplied_user_agent_Valid() const{
    return m_caller_supplied_user_agent_isValid;
}

OAIPeer OAIRequestMetadata::getDestinationAttributes() const {
    return m_destination_attributes;
}
void OAIRequestMetadata::setDestinationAttributes(const OAIPeer &destination_attributes) {
    m_destination_attributes = destination_attributes;
    m_destination_attributes_isSet = true;
}

bool OAIRequestMetadata::is_destination_attributes_Set() const{
    return m_destination_attributes_isSet;
}

bool OAIRequestMetadata::is_destination_attributes_Valid() const{
    return m_destination_attributes_isValid;
}

OAIRequest OAIRequestMetadata::getRequestAttributes() const {
    return m_request_attributes;
}
void OAIRequestMetadata::setRequestAttributes(const OAIRequest &request_attributes) {
    m_request_attributes = request_attributes;
    m_request_attributes_isSet = true;
}

bool OAIRequestMetadata::is_request_attributes_Set() const{
    return m_request_attributes_isSet;
}

bool OAIRequestMetadata::is_request_attributes_Valid() const{
    return m_request_attributes_isValid;
}

bool OAIRequestMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_caller_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_supplied_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequestMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
