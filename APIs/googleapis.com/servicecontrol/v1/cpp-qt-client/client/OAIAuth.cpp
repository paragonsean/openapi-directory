/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuth.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuth::OAIAuth(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuth::OAIAuth() {
    this->initializeModel();
}

OAIAuth::~OAIAuth() {}

void OAIAuth::initializeModel() {

    m_access_levels_isSet = false;
    m_access_levels_isValid = false;

    m_audiences_isSet = false;
    m_audiences_isValid = false;

    m_claims_isSet = false;
    m_claims_isValid = false;

    m_presenter_isSet = false;
    m_presenter_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;
}

void OAIAuth::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuth::fromJsonObject(QJsonObject json) {

    m_access_levels_isValid = ::OpenAPI::fromJsonValue(m_access_levels, json[QString("accessLevels")]);
    m_access_levels_isSet = !json[QString("accessLevels")].isNull() && m_access_levels_isValid;

    m_audiences_isValid = ::OpenAPI::fromJsonValue(m_audiences, json[QString("audiences")]);
    m_audiences_isSet = !json[QString("audiences")].isNull() && m_audiences_isValid;

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;

    m_presenter_isValid = ::OpenAPI::fromJsonValue(m_presenter, json[QString("presenter")]);
    m_presenter_isSet = !json[QString("presenter")].isNull() && m_presenter_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;
}

QString OAIAuth::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuth::asJsonObject() const {
    QJsonObject obj;
    if (m_access_levels.size() > 0) {
        obj.insert(QString("accessLevels"), ::OpenAPI::toJsonValue(m_access_levels));
    }
    if (m_audiences.size() > 0) {
        obj.insert(QString("audiences"), ::OpenAPI::toJsonValue(m_audiences));
    }
    if (m_claims.size() > 0) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    if (m_presenter_isSet) {
        obj.insert(QString("presenter"), ::OpenAPI::toJsonValue(m_presenter));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    return obj;
}

QList<QString> OAIAuth::getAccessLevels() const {
    return m_access_levels;
}
void OAIAuth::setAccessLevels(const QList<QString> &access_levels) {
    m_access_levels = access_levels;
    m_access_levels_isSet = true;
}

bool OAIAuth::is_access_levels_Set() const{
    return m_access_levels_isSet;
}

bool OAIAuth::is_access_levels_Valid() const{
    return m_access_levels_isValid;
}

QList<QString> OAIAuth::getAudiences() const {
    return m_audiences;
}
void OAIAuth::setAudiences(const QList<QString> &audiences) {
    m_audiences = audiences;
    m_audiences_isSet = true;
}

bool OAIAuth::is_audiences_Set() const{
    return m_audiences_isSet;
}

bool OAIAuth::is_audiences_Valid() const{
    return m_audiences_isValid;
}

QMap<QString, QJsonValue> OAIAuth::getClaims() const {
    return m_claims;
}
void OAIAuth::setClaims(const QMap<QString, QJsonValue> &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIAuth::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIAuth::is_claims_Valid() const{
    return m_claims_isValid;
}

QString OAIAuth::getPresenter() const {
    return m_presenter;
}
void OAIAuth::setPresenter(const QString &presenter) {
    m_presenter = presenter;
    m_presenter_isSet = true;
}

bool OAIAuth::is_presenter_Set() const{
    return m_presenter_isSet;
}

bool OAIAuth::is_presenter_Valid() const{
    return m_presenter_isValid;
}

QString OAIAuth::getPrincipal() const {
    return m_principal;
}
void OAIAuth::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIAuth::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIAuth::is_principal_Valid() const{
    return m_principal_isValid;
}

bool OAIAuth::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_levels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_audiences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_presenter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuth::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
