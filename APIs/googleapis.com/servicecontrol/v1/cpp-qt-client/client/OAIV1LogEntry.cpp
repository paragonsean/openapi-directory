/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1LogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1LogEntry::OAIV1LogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1LogEntry::OAIV1LogEntry() {
    this->initializeModel();
}

OAIV1LogEntry::~OAIV1LogEntry() {}

void OAIV1LogEntry::initializeModel() {

    m_http_request_isSet = false;
    m_http_request_isValid = false;

    m_insert_id_isSet = false;
    m_insert_id_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_monitored_resource_labels_isSet = false;
    m_monitored_resource_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_proto_payload_isSet = false;
    m_proto_payload_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_source_location_isSet = false;
    m_source_location_isValid = false;

    m_struct_payload_isSet = false;
    m_struct_payload_isValid = false;

    m_text_payload_isSet = false;
    m_text_payload_isValid = false;

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_trace_isSet = false;
    m_trace_isValid = false;
}

void OAIV1LogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1LogEntry::fromJsonObject(QJsonObject json) {

    m_http_request_isValid = ::OpenAPI::fromJsonValue(m_http_request, json[QString("httpRequest")]);
    m_http_request_isSet = !json[QString("httpRequest")].isNull() && m_http_request_isValid;

    m_insert_id_isValid = ::OpenAPI::fromJsonValue(m_insert_id, json[QString("insertId")]);
    m_insert_id_isSet = !json[QString("insertId")].isNull() && m_insert_id_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_monitored_resource_labels_isValid = ::OpenAPI::fromJsonValue(m_monitored_resource_labels, json[QString("monitoredResourceLabels")]);
    m_monitored_resource_labels_isSet = !json[QString("monitoredResourceLabels")].isNull() && m_monitored_resource_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_proto_payload_isValid = ::OpenAPI::fromJsonValue(m_proto_payload, json[QString("protoPayload")]);
    m_proto_payload_isSet = !json[QString("protoPayload")].isNull() && m_proto_payload_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_source_location_isValid = ::OpenAPI::fromJsonValue(m_source_location, json[QString("sourceLocation")]);
    m_source_location_isSet = !json[QString("sourceLocation")].isNull() && m_source_location_isValid;

    m_struct_payload_isValid = ::OpenAPI::fromJsonValue(m_struct_payload, json[QString("structPayload")]);
    m_struct_payload_isSet = !json[QString("structPayload")].isNull() && m_struct_payload_isValid;

    m_text_payload_isValid = ::OpenAPI::fromJsonValue(m_text_payload, json[QString("textPayload")]);
    m_text_payload_isSet = !json[QString("textPayload")].isNull() && m_text_payload_isValid;

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_trace_isValid = ::OpenAPI::fromJsonValue(m_trace, json[QString("trace")]);
    m_trace_isSet = !json[QString("trace")].isNull() && m_trace_isValid;
}

QString OAIV1LogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1LogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_http_request.isSet()) {
        obj.insert(QString("httpRequest"), ::OpenAPI::toJsonValue(m_http_request));
    }
    if (m_insert_id_isSet) {
        obj.insert(QString("insertId"), ::OpenAPI::toJsonValue(m_insert_id));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_monitored_resource_labels.size() > 0) {
        obj.insert(QString("monitoredResourceLabels"), ::OpenAPI::toJsonValue(m_monitored_resource_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_proto_payload.size() > 0) {
        obj.insert(QString("protoPayload"), ::OpenAPI::toJsonValue(m_proto_payload));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_source_location.isSet()) {
        obj.insert(QString("sourceLocation"), ::OpenAPI::toJsonValue(m_source_location));
    }
    if (m_struct_payload.size() > 0) {
        obj.insert(QString("structPayload"), ::OpenAPI::toJsonValue(m_struct_payload));
    }
    if (m_text_payload_isSet) {
        obj.insert(QString("textPayload"), ::OpenAPI::toJsonValue(m_text_payload));
    }
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_trace_isSet) {
        obj.insert(QString("trace"), ::OpenAPI::toJsonValue(m_trace));
    }
    return obj;
}

OAIV1HttpRequest OAIV1LogEntry::getHttpRequest() const {
    return m_http_request;
}
void OAIV1LogEntry::setHttpRequest(const OAIV1HttpRequest &http_request) {
    m_http_request = http_request;
    m_http_request_isSet = true;
}

bool OAIV1LogEntry::is_http_request_Set() const{
    return m_http_request_isSet;
}

bool OAIV1LogEntry::is_http_request_Valid() const{
    return m_http_request_isValid;
}

QString OAIV1LogEntry::getInsertId() const {
    return m_insert_id;
}
void OAIV1LogEntry::setInsertId(const QString &insert_id) {
    m_insert_id = insert_id;
    m_insert_id_isSet = true;
}

bool OAIV1LogEntry::is_insert_id_Set() const{
    return m_insert_id_isSet;
}

bool OAIV1LogEntry::is_insert_id_Valid() const{
    return m_insert_id_isValid;
}

QMap<QString, QString> OAIV1LogEntry::getLabels() const {
    return m_labels;
}
void OAIV1LogEntry::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIV1LogEntry::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIV1LogEntry::is_labels_Valid() const{
    return m_labels_isValid;
}

QMap<QString, QString> OAIV1LogEntry::getMonitoredResourceLabels() const {
    return m_monitored_resource_labels;
}
void OAIV1LogEntry::setMonitoredResourceLabels(const QMap<QString, QString> &monitored_resource_labels) {
    m_monitored_resource_labels = monitored_resource_labels;
    m_monitored_resource_labels_isSet = true;
}

bool OAIV1LogEntry::is_monitored_resource_labels_Set() const{
    return m_monitored_resource_labels_isSet;
}

bool OAIV1LogEntry::is_monitored_resource_labels_Valid() const{
    return m_monitored_resource_labels_isValid;
}

QString OAIV1LogEntry::getName() const {
    return m_name;
}
void OAIV1LogEntry::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIV1LogEntry::is_name_Set() const{
    return m_name_isSet;
}

bool OAIV1LogEntry::is_name_Valid() const{
    return m_name_isValid;
}

OAIV1LogEntryOperation OAIV1LogEntry::getOperation() const {
    return m_operation;
}
void OAIV1LogEntry::setOperation(const OAIV1LogEntryOperation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIV1LogEntry::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIV1LogEntry::is_operation_Valid() const{
    return m_operation_isValid;
}

QMap<QString, QJsonValue> OAIV1LogEntry::getProtoPayload() const {
    return m_proto_payload;
}
void OAIV1LogEntry::setProtoPayload(const QMap<QString, QJsonValue> &proto_payload) {
    m_proto_payload = proto_payload;
    m_proto_payload_isSet = true;
}

bool OAIV1LogEntry::is_proto_payload_Set() const{
    return m_proto_payload_isSet;
}

bool OAIV1LogEntry::is_proto_payload_Valid() const{
    return m_proto_payload_isValid;
}

QString OAIV1LogEntry::getSeverity() const {
    return m_severity;
}
void OAIV1LogEntry::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIV1LogEntry::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIV1LogEntry::is_severity_Valid() const{
    return m_severity_isValid;
}

OAIV1LogEntrySourceLocation OAIV1LogEntry::getSourceLocation() const {
    return m_source_location;
}
void OAIV1LogEntry::setSourceLocation(const OAIV1LogEntrySourceLocation &source_location) {
    m_source_location = source_location;
    m_source_location_isSet = true;
}

bool OAIV1LogEntry::is_source_location_Set() const{
    return m_source_location_isSet;
}

bool OAIV1LogEntry::is_source_location_Valid() const{
    return m_source_location_isValid;
}

QMap<QString, QJsonValue> OAIV1LogEntry::getStructPayload() const {
    return m_struct_payload;
}
void OAIV1LogEntry::setStructPayload(const QMap<QString, QJsonValue> &struct_payload) {
    m_struct_payload = struct_payload;
    m_struct_payload_isSet = true;
}

bool OAIV1LogEntry::is_struct_payload_Set() const{
    return m_struct_payload_isSet;
}

bool OAIV1LogEntry::is_struct_payload_Valid() const{
    return m_struct_payload_isValid;
}

QString OAIV1LogEntry::getTextPayload() const {
    return m_text_payload;
}
void OAIV1LogEntry::setTextPayload(const QString &text_payload) {
    m_text_payload = text_payload;
    m_text_payload_isSet = true;
}

bool OAIV1LogEntry::is_text_payload_Set() const{
    return m_text_payload_isSet;
}

bool OAIV1LogEntry::is_text_payload_Valid() const{
    return m_text_payload_isValid;
}

QString OAIV1LogEntry::getTimestamp() const {
    return m_timestamp;
}
void OAIV1LogEntry::setTimestamp(const QString &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIV1LogEntry::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIV1LogEntry::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

QString OAIV1LogEntry::getTrace() const {
    return m_trace;
}
void OAIV1LogEntry::setTrace(const QString &trace) {
    m_trace = trace;
    m_trace_isSet = true;
}

bool OAIV1LogEntry::is_trace_Set() const{
    return m_trace_isSet;
}

bool OAIV1LogEntry::is_trace_Valid() const{
    return m_trace_isValid;
}

bool OAIV1LogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitored_resource_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proto_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_struct_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_payload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1LogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
