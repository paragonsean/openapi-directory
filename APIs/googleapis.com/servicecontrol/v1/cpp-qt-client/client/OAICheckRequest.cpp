/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckRequest::OAICheckRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckRequest::OAICheckRequest() {
    this->initializeModel();
}

OAICheckRequest::~OAICheckRequest() {}

void OAICheckRequest::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_request_project_settings_isSet = false;
    m_request_project_settings_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;

    m_skip_activation_check_isSet = false;
    m_skip_activation_check_isValid = false;
}

void OAICheckRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckRequest::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_request_project_settings_isValid = ::OpenAPI::fromJsonValue(m_request_project_settings, json[QString("requestProjectSettings")]);
    m_request_project_settings_isSet = !json[QString("requestProjectSettings")].isNull() && m_request_project_settings_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;

    m_skip_activation_check_isValid = ::OpenAPI::fromJsonValue(m_skip_activation_check, json[QString("skipActivationCheck")]);
    m_skip_activation_check_isSet = !json[QString("skipActivationCheck")].isNull() && m_skip_activation_check_isValid;
}

QString OAICheckRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_request_project_settings_isSet) {
        obj.insert(QString("requestProjectSettings"), ::OpenAPI::toJsonValue(m_request_project_settings));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    if (m_skip_activation_check_isSet) {
        obj.insert(QString("skipActivationCheck"), ::OpenAPI::toJsonValue(m_skip_activation_check));
    }
    return obj;
}

OAIOperation OAICheckRequest::getOperation() const {
    return m_operation;
}
void OAICheckRequest::setOperation(const OAIOperation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAICheckRequest::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAICheckRequest::is_operation_Valid() const{
    return m_operation_isValid;
}

bool OAICheckRequest::isRequestProjectSettings() const {
    return m_request_project_settings;
}
void OAICheckRequest::setRequestProjectSettings(const bool &request_project_settings) {
    m_request_project_settings = request_project_settings;
    m_request_project_settings_isSet = true;
}

bool OAICheckRequest::is_request_project_settings_Set() const{
    return m_request_project_settings_isSet;
}

bool OAICheckRequest::is_request_project_settings_Valid() const{
    return m_request_project_settings_isValid;
}

QString OAICheckRequest::getServiceConfigId() const {
    return m_service_config_id;
}
void OAICheckRequest::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAICheckRequest::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAICheckRequest::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

bool OAICheckRequest::isSkipActivationCheck() const {
    return m_skip_activation_check;
}
void OAICheckRequest::setSkipActivationCheck(const bool &skip_activation_check) {
    m_skip_activation_check = skip_activation_check;
    m_skip_activation_check_isSet = true;
}

bool OAICheckRequest::is_skip_activation_check_Set() const{
    return m_skip_activation_check_isSet;
}

bool OAICheckRequest::is_skip_activation_check_Valid() const{
    return m_skip_activation_check_isValid;
}

bool OAICheckRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_project_settings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_activation_check_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
