/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckResponse::OAICheckResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckResponse::OAICheckResponse() {
    this->initializeModel();
}

OAICheckResponse::~OAICheckResponse() {}

void OAICheckResponse::initializeModel() {

    m_check_errors_isSet = false;
    m_check_errors_isValid = false;

    m_check_info_isSet = false;
    m_check_info_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_quota_info_isSet = false;
    m_quota_info_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;

    m_service_rollout_id_isSet = false;
    m_service_rollout_id_isValid = false;
}

void OAICheckResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckResponse::fromJsonObject(QJsonObject json) {

    m_check_errors_isValid = ::OpenAPI::fromJsonValue(m_check_errors, json[QString("checkErrors")]);
    m_check_errors_isSet = !json[QString("checkErrors")].isNull() && m_check_errors_isValid;

    m_check_info_isValid = ::OpenAPI::fromJsonValue(m_check_info, json[QString("checkInfo")]);
    m_check_info_isSet = !json[QString("checkInfo")].isNull() && m_check_info_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_quota_info_isValid = ::OpenAPI::fromJsonValue(m_quota_info, json[QString("quotaInfo")]);
    m_quota_info_isSet = !json[QString("quotaInfo")].isNull() && m_quota_info_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;

    m_service_rollout_id_isValid = ::OpenAPI::fromJsonValue(m_service_rollout_id, json[QString("serviceRolloutId")]);
    m_service_rollout_id_isSet = !json[QString("serviceRolloutId")].isNull() && m_service_rollout_id_isValid;
}

QString OAICheckResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_check_errors.size() > 0) {
        obj.insert(QString("checkErrors"), ::OpenAPI::toJsonValue(m_check_errors));
    }
    if (m_check_info.isSet()) {
        obj.insert(QString("checkInfo"), ::OpenAPI::toJsonValue(m_check_info));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_quota_info.isSet()) {
        obj.insert(QString("quotaInfo"), ::OpenAPI::toJsonValue(m_quota_info));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    if (m_service_rollout_id_isSet) {
        obj.insert(QString("serviceRolloutId"), ::OpenAPI::toJsonValue(m_service_rollout_id));
    }
    return obj;
}

QList<OAICheckError> OAICheckResponse::getCheckErrors() const {
    return m_check_errors;
}
void OAICheckResponse::setCheckErrors(const QList<OAICheckError> &check_errors) {
    m_check_errors = check_errors;
    m_check_errors_isSet = true;
}

bool OAICheckResponse::is_check_errors_Set() const{
    return m_check_errors_isSet;
}

bool OAICheckResponse::is_check_errors_Valid() const{
    return m_check_errors_isValid;
}

OAICheckInfo OAICheckResponse::getCheckInfo() const {
    return m_check_info;
}
void OAICheckResponse::setCheckInfo(const OAICheckInfo &check_info) {
    m_check_info = check_info;
    m_check_info_isSet = true;
}

bool OAICheckResponse::is_check_info_Set() const{
    return m_check_info_isSet;
}

bool OAICheckResponse::is_check_info_Valid() const{
    return m_check_info_isValid;
}

QString OAICheckResponse::getOperationId() const {
    return m_operation_id;
}
void OAICheckResponse::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAICheckResponse::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAICheckResponse::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAIQuotaInfo OAICheckResponse::getQuotaInfo() const {
    return m_quota_info;
}
void OAICheckResponse::setQuotaInfo(const OAIQuotaInfo &quota_info) {
    m_quota_info = quota_info;
    m_quota_info_isSet = true;
}

bool OAICheckResponse::is_quota_info_Set() const{
    return m_quota_info_isSet;
}

bool OAICheckResponse::is_quota_info_Valid() const{
    return m_quota_info_isValid;
}

QString OAICheckResponse::getServiceConfigId() const {
    return m_service_config_id;
}
void OAICheckResponse::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAICheckResponse::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAICheckResponse::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

QString OAICheckResponse::getServiceRolloutId() const {
    return m_service_rollout_id;
}
void OAICheckResponse::setServiceRolloutId(const QString &service_rollout_id) {
    m_service_rollout_id = service_rollout_id;
    m_service_rollout_id_isSet = true;
}

bool OAICheckResponse::is_service_rollout_id_Set() const{
    return m_service_rollout_id_isSet;
}

bool OAICheckResponse::is_service_rollout_id_Valid() const{
    return m_service_rollout_id_isValid;
}

bool OAICheckResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quota_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_rollout_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
