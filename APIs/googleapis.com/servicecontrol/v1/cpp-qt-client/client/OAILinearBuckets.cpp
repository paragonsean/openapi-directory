/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinearBuckets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinearBuckets::OAILinearBuckets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinearBuckets::OAILinearBuckets() {
    this->initializeModel();
}

OAILinearBuckets::~OAILinearBuckets() {}

void OAILinearBuckets::initializeModel() {

    m_num_finite_buckets_isSet = false;
    m_num_finite_buckets_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAILinearBuckets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinearBuckets::fromJsonObject(QJsonObject json) {

    m_num_finite_buckets_isValid = ::OpenAPI::fromJsonValue(m_num_finite_buckets, json[QString("numFiniteBuckets")]);
    m_num_finite_buckets_isSet = !json[QString("numFiniteBuckets")].isNull() && m_num_finite_buckets_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAILinearBuckets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinearBuckets::asJsonObject() const {
    QJsonObject obj;
    if (m_num_finite_buckets_isSet) {
        obj.insert(QString("numFiniteBuckets"), ::OpenAPI::toJsonValue(m_num_finite_buckets));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

qint32 OAILinearBuckets::getNumFiniteBuckets() const {
    return m_num_finite_buckets;
}
void OAILinearBuckets::setNumFiniteBuckets(const qint32 &num_finite_buckets) {
    m_num_finite_buckets = num_finite_buckets;
    m_num_finite_buckets_isSet = true;
}

bool OAILinearBuckets::is_num_finite_buckets_Set() const{
    return m_num_finite_buckets_isSet;
}

bool OAILinearBuckets::is_num_finite_buckets_Valid() const{
    return m_num_finite_buckets_isValid;
}

double OAILinearBuckets::getOffset() const {
    return m_offset;
}
void OAILinearBuckets::setOffset(const double &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAILinearBuckets::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAILinearBuckets::is_offset_Valid() const{
    return m_offset_isValid;
}

double OAILinearBuckets::getWidth() const {
    return m_width;
}
void OAILinearBuckets::setWidth(const double &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAILinearBuckets::is_width_Set() const{
    return m_width_isSet;
}

bool OAILinearBuckets::is_width_Valid() const{
    return m_width_isValid;
}

bool OAILinearBuckets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_num_finite_buckets_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinearBuckets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
