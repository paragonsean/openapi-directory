/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPeer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPeer::OAIPeer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPeer::OAIPeer() {
    this->initializeModel();
}

OAIPeer::~OAIPeer() {}

void OAIPeer::initializeModel() {

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_port_isSet = false;
    m_port_isValid = false;

    m_principal_isSet = false;
    m_principal_isValid = false;

    m_region_code_isSet = false;
    m_region_code_isValid = false;
}

void OAIPeer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPeer::fromJsonObject(QJsonObject json) {

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_port_isValid = ::OpenAPI::fromJsonValue(m_port, json[QString("port")]);
    m_port_isSet = !json[QString("port")].isNull() && m_port_isValid;

    m_principal_isValid = ::OpenAPI::fromJsonValue(m_principal, json[QString("principal")]);
    m_principal_isSet = !json[QString("principal")].isNull() && m_principal_isValid;

    m_region_code_isValid = ::OpenAPI::fromJsonValue(m_region_code, json[QString("regionCode")]);
    m_region_code_isSet = !json[QString("regionCode")].isNull() && m_region_code_isValid;
}

QString OAIPeer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPeer::asJsonObject() const {
    QJsonObject obj;
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_port_isSet) {
        obj.insert(QString("port"), ::OpenAPI::toJsonValue(m_port));
    }
    if (m_principal_isSet) {
        obj.insert(QString("principal"), ::OpenAPI::toJsonValue(m_principal));
    }
    if (m_region_code_isSet) {
        obj.insert(QString("regionCode"), ::OpenAPI::toJsonValue(m_region_code));
    }
    return obj;
}

QString OAIPeer::getIp() const {
    return m_ip;
}
void OAIPeer::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAIPeer::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAIPeer::is_ip_Valid() const{
    return m_ip_isValid;
}

QMap<QString, QString> OAIPeer::getLabels() const {
    return m_labels;
}
void OAIPeer::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPeer::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPeer::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPeer::getPort() const {
    return m_port;
}
void OAIPeer::setPort(const QString &port) {
    m_port = port;
    m_port_isSet = true;
}

bool OAIPeer::is_port_Set() const{
    return m_port_isSet;
}

bool OAIPeer::is_port_Valid() const{
    return m_port_isValid;
}

QString OAIPeer::getPrincipal() const {
    return m_principal;
}
void OAIPeer::setPrincipal(const QString &principal) {
    m_principal = principal;
    m_principal_isSet = true;
}

bool OAIPeer::is_principal_Set() const{
    return m_principal_isSet;
}

bool OAIPeer::is_principal_Valid() const{
    return m_principal_isValid;
}

QString OAIPeer::getRegionCode() const {
    return m_region_code;
}
void OAIPeer::setRegionCode(const QString &region_code) {
    m_region_code = region_code;
    m_region_code_isSet = true;
}

bool OAIPeer::is_region_code_Set() const{
    return m_region_code_isSet;
}

bool OAIPeer::is_region_code_Valid() const{
    return m_region_code_isValid;
}

bool OAIPeer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPeer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
