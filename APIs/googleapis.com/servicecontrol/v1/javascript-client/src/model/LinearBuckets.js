/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinearBuckets model module.
 * @module model/LinearBuckets
 * @version v1
 */
class LinearBuckets {
    /**
     * Constructs a new <code>LinearBuckets</code>.
     * Describing buckets with constant width.
     * @alias module:model/LinearBuckets
     */
    constructor() { 
        
        LinearBuckets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinearBuckets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinearBuckets} obj Optional instance to populate.
     * @return {module:model/LinearBuckets} The populated <code>LinearBuckets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinearBuckets();

            if (data.hasOwnProperty('numFiniteBuckets')) {
                obj['numFiniteBuckets'] = ApiClient.convertToType(data['numFiniteBuckets'], 'Number');
            }
            if (data.hasOwnProperty('offset')) {
                obj['offset'] = ApiClient.convertToType(data['offset'], 'Number');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinearBuckets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinearBuckets</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.
 * @member {Number} numFiniteBuckets
 */
LinearBuckets.prototype['numFiniteBuckets'] = undefined;

/**
 * The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive.
 * @member {Number} offset
 */
LinearBuckets.prototype['offset'] = undefined;

/**
 * The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive. Must be strictly positive.
 * @member {Number} width
 */
LinearBuckets.prototype['width'] = undefined;






export default LinearBuckets;

