/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Auth model module.
 * @module model/Auth
 * @version v1
 */
class Auth {
    /**
     * Constructs a new <code>Auth</code>.
     * This message defines request authentication attributes. Terminology is based on the JSON Web Token (JWT) standard, but the terms also correlate to concepts in other standards.
     * @alias module:model/Auth
     */
    constructor() { 
        
        Auth.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Auth</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Auth} obj Optional instance to populate.
     * @return {module:model/Auth} The populated <code>Auth</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Auth();

            if (data.hasOwnProperty('accessLevels')) {
                obj['accessLevels'] = ApiClient.convertToType(data['accessLevels'], ['String']);
            }
            if (data.hasOwnProperty('audiences')) {
                obj['audiences'] = ApiClient.convertToType(data['audiences'], ['String']);
            }
            if (data.hasOwnProperty('claims')) {
                obj['claims'] = ApiClient.convertToType(data['claims'], {'String': Object});
            }
            if (data.hasOwnProperty('presenter')) {
                obj['presenter'] = ApiClient.convertToType(data['presenter'], 'String');
            }
            if (data.hasOwnProperty('principal')) {
                obj['principal'] = ApiClient.convertToType(data['principal'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Auth</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Auth</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['accessLevels'])) {
            throw new Error("Expected the field `accessLevels` to be an array in the JSON data but got " + data['accessLevels']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['audiences'])) {
            throw new Error("Expected the field `audiences` to be an array in the JSON data but got " + data['audiences']);
        }
        // ensure the json data is a string
        if (data['presenter'] && !(typeof data['presenter'] === 'string' || data['presenter'] instanceof String)) {
            throw new Error("Expected the field `presenter` to be a primitive type in the JSON string but got " + data['presenter']);
        }
        // ensure the json data is a string
        if (data['principal'] && !(typeof data['principal'] === 'string' || data['principal'] instanceof String)) {
            throw new Error("Expected the field `principal` to be a primitive type in the JSON string but got " + data['principal']);
        }

        return true;
    }


}



/**
 * A list of access level resource names that allow resources to be accessed by authenticated requester. It is part of Secure GCP processing for the incoming request. An access level string has the format: \"//{api_service_name}/accessPolicies/{policy_id}/accessLevels/{short_name}\" Example: \"//accesscontextmanager.googleapis.com/accessPolicies/MY_POLICY_ID/accessLevels/MY_LEVEL\"
 * @member {Array.<String>} accessLevels
 */
Auth.prototype['accessLevels'] = undefined;

/**
 * The intended audience(s) for this authentication information. Reflects the audience (`aud`) claim within a JWT. The audience value(s) depends on the `issuer`, but typically include one or more of the following pieces of information: * The services intended to receive the credential. For example, [\"https://pubsub.googleapis.com/\", \"https://storage.googleapis.com/\"]. * A set of service-based scopes. For example, [\"https://www.googleapis.com/auth/cloud-platform\"]. * The client id of an app, such as the Firebase project id for JWTs from Firebase Auth. Consult the documentation for the credential issuer to determine the information provided.
 * @member {Array.<String>} audiences
 */
Auth.prototype['audiences'] = undefined;

/**
 * Structured claims presented with the credential. JWTs include `{key: value}` pairs for standard and private claims. The following is a subset of the standard required and optional claims that would typically be presented for a Google-based JWT: {'iss': 'accounts.google.com', 'sub': '113289723416554971153', 'aud': ['123456789012', 'pubsub.googleapis.com'], 'azp': '123456789012.apps.googleusercontent.com', 'email': 'jsmith@example.com', 'iat': 1353601026, 'exp': 1353604926} SAML assertions are similarly specified, but with an identity provider dependent structure.
 * @member {Object.<String, Object>} claims
 */
Auth.prototype['claims'] = undefined;

/**
 * The authorized presenter of the credential. Reflects the optional Authorized Presenter (`azp`) claim within a JWT or the OAuth client id. For example, a Google Cloud Platform client id looks as follows: \"123456789012.apps.googleusercontent.com\".
 * @member {String} presenter
 */
Auth.prototype['presenter'] = undefined;

/**
 * The authenticated principal. Reflects the issuer (`iss`) and subject (`sub`) claims within a JWT. The issuer and subject should be `/` delimited, with `/` percent-encoded within the subject fragment. For Google accounts, the principal format is: \"https://accounts.google.com/{id}\"
 * @member {String} principal
 */
Auth.prototype['principal'] = undefined;






export default Auth;

