/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attributes from './Attributes';
import Status from './Status';
import TruncatableString from './TruncatableString';

/**
 * The TraceSpan model module.
 * @module model/TraceSpan
 * @version v1
 */
class TraceSpan {
    /**
     * Constructs a new <code>TraceSpan</code>.
     * A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguousâ€”there may be gaps or overlaps between spans in a trace.
     * @alias module:model/TraceSpan
     */
    constructor() { 
        
        TraceSpan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TraceSpan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TraceSpan} obj Optional instance to populate.
     * @return {module:model/TraceSpan} The populated <code>TraceSpan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TraceSpan();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = Attributes.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('childSpanCount')) {
                obj['childSpanCount'] = ApiClient.convertToType(data['childSpanCount'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = TruncatableString.constructFromObject(data['displayName']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentSpanId')) {
                obj['parentSpanId'] = ApiClient.convertToType(data['parentSpanId'], 'String');
            }
            if (data.hasOwnProperty('sameProcessAsParentSpan')) {
                obj['sameProcessAsParentSpan'] = ApiClient.convertToType(data['sameProcessAsParentSpan'], 'Boolean');
            }
            if (data.hasOwnProperty('spanId')) {
                obj['spanId'] = ApiClient.convertToType(data['spanId'], 'String');
            }
            if (data.hasOwnProperty('spanKind')) {
                obj['spanKind'] = ApiClient.convertToType(data['spanKind'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = Status.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TraceSpan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TraceSpan</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          Attributes.validateJSON(data['attributes']);
        }
        // validate the optional field `displayName`
        if (data['displayName']) { // data not null
          TruncatableString.validateJSON(data['displayName']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['parentSpanId'] && !(typeof data['parentSpanId'] === 'string' || data['parentSpanId'] instanceof String)) {
            throw new Error("Expected the field `parentSpanId` to be a primitive type in the JSON string but got " + data['parentSpanId']);
        }
        // ensure the json data is a string
        if (data['spanId'] && !(typeof data['spanId'] === 'string' || data['spanId'] instanceof String)) {
            throw new Error("Expected the field `spanId` to be a primitive type in the JSON string but got " + data['spanId']);
        }
        // ensure the json data is a string
        if (data['spanKind'] && !(typeof data['spanKind'] === 'string' || data['spanKind'] instanceof String)) {
            throw new Error("Expected the field `spanKind` to be a primitive type in the JSON string but got " + data['spanKind']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          Status.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * @member {module:model/Attributes} attributes
 */
TraceSpan.prototype['attributes'] = undefined;

/**
 * An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.
 * @member {Number} childSpanCount
 */
TraceSpan.prototype['childSpanCount'] = undefined;

/**
 * @member {module:model/TruncatableString} displayName
 */
TraceSpan.prototype['displayName'] = undefined;

/**
 * The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.
 * @member {String} endTime
 */
TraceSpan.prototype['endTime'] = undefined;

/**
 * The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
 * @member {String} name
 */
TraceSpan.prototype['name'] = undefined;

/**
 * The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be empty.
 * @member {String} parentSpanId
 */
TraceSpan.prototype['parentSpanId'] = undefined;

/**
 * (Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.
 * @member {Boolean} sameProcessAsParentSpan
 */
TraceSpan.prototype['sameProcessAsParentSpan'] = undefined;

/**
 * The [SPAN_ID] portion of the span's resource name.
 * @member {String} spanId
 */
TraceSpan.prototype['spanId'] = undefined;

/**
 * Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.
 * @member {module:model/TraceSpan.SpanKindEnum} spanKind
 */
TraceSpan.prototype['spanKind'] = undefined;

/**
 * The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.
 * @member {String} startTime
 */
TraceSpan.prototype['startTime'] = undefined;

/**
 * @member {module:model/Status} status
 */
TraceSpan.prototype['status'] = undefined;





/**
 * Allowed values for the <code>spanKind</code> property.
 * @enum {String}
 * @readonly
 */
TraceSpan['SpanKindEnum'] = {

    /**
     * value: "SPAN_KIND_UNSPECIFIED"
     * @const
     */
    "SPAN_KIND_UNSPECIFIED": "SPAN_KIND_UNSPECIFIED",

    /**
     * value: "INTERNAL"
     * @const
     */
    "INTERNAL": "INTERNAL",

    /**
     * value: "SERVER"
     * @const
     */
    "SERVER": "SERVER",

    /**
     * value: "CLIENT"
     * @const
     */
    "CLIENT": "CLIENT",

    /**
     * value: "PRODUCER"
     * @const
     */
    "PRODUCER": "PRODUCER",

    /**
     * value: "CONSUMER"
     * @const
     */
    "CONSUMER": "CONSUMER"
};



export default TraceSpan;

