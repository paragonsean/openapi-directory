/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CheckError from './CheckError';
import CheckInfo from './CheckInfo';
import QuotaInfo from './QuotaInfo';

/**
 * The CheckResponse model module.
 * @module model/CheckResponse
 * @version v1
 */
class CheckResponse {
    /**
     * Constructs a new <code>CheckResponse</code>.
     * Response message for the Check method.
     * @alias module:model/CheckResponse
     */
    constructor() { 
        
        CheckResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckResponse} obj Optional instance to populate.
     * @return {module:model/CheckResponse} The populated <code>CheckResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckResponse();

            if (data.hasOwnProperty('checkErrors')) {
                obj['checkErrors'] = ApiClient.convertToType(data['checkErrors'], [CheckError]);
            }
            if (data.hasOwnProperty('checkInfo')) {
                obj['checkInfo'] = CheckInfo.constructFromObject(data['checkInfo']);
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('quotaInfo')) {
                obj['quotaInfo'] = QuotaInfo.constructFromObject(data['quotaInfo']);
            }
            if (data.hasOwnProperty('serviceConfigId')) {
                obj['serviceConfigId'] = ApiClient.convertToType(data['serviceConfigId'], 'String');
            }
            if (data.hasOwnProperty('serviceRolloutId')) {
                obj['serviceRolloutId'] = ApiClient.convertToType(data['serviceRolloutId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckResponse</code>.
     */
    static validateJSON(data) {
        if (data['checkErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['checkErrors'])) {
                throw new Error("Expected the field `checkErrors` to be an array in the JSON data but got " + data['checkErrors']);
            }
            // validate the optional field `checkErrors` (array)
            for (const item of data['checkErrors']) {
                CheckError.validateJSON(item);
            };
        }
        // validate the optional field `checkInfo`
        if (data['checkInfo']) { // data not null
          CheckInfo.validateJSON(data['checkInfo']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        // validate the optional field `quotaInfo`
        if (data['quotaInfo']) { // data not null
          QuotaInfo.validateJSON(data['quotaInfo']);
        }
        // ensure the json data is a string
        if (data['serviceConfigId'] && !(typeof data['serviceConfigId'] === 'string' || data['serviceConfigId'] instanceof String)) {
            throw new Error("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got " + data['serviceConfigId']);
        }
        // ensure the json data is a string
        if (data['serviceRolloutId'] && !(typeof data['serviceRolloutId'] === 'string' || data['serviceRolloutId'] instanceof String)) {
            throw new Error("Expected the field `serviceRolloutId` to be a primitive type in the JSON string but got " + data['serviceRolloutId']);
        }

        return true;
    }


}



/**
 * Indicate the decision of the check. If no check errors are present, the service should process the operation. Otherwise the service should use the list of errors to determine the appropriate action.
 * @member {Array.<module:model/CheckError>} checkErrors
 */
CheckResponse.prototype['checkErrors'] = undefined;

/**
 * @member {module:model/CheckInfo} checkInfo
 */
CheckResponse.prototype['checkInfo'] = undefined;

/**
 * The same operation_id value used in the CheckRequest. Used for logging and diagnostics purposes.
 * @member {String} operationId
 */
CheckResponse.prototype['operationId'] = undefined;

/**
 * @member {module:model/QuotaInfo} quotaInfo
 */
CheckResponse.prototype['quotaInfo'] = undefined;

/**
 * The actual config id used to process the request.
 * @member {String} serviceConfigId
 */
CheckResponse.prototype['serviceConfigId'] = undefined;

/**
 * The current service rollout id used to process the request.
 * @member {String} serviceRolloutId
 */
CheckResponse.prototype['serviceRolloutId'] = undefined;






export default CheckResponse;

