/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricValueSet from './MetricValueSet';

/**
 * The QuotaOperation model module.
 * @module model/QuotaOperation
 * @version v1
 */
class QuotaOperation {
    /**
     * Constructs a new <code>QuotaOperation</code>.
     * Represents information regarding a quota operation.
     * @alias module:model/QuotaOperation
     */
    constructor() { 
        
        QuotaOperation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuotaOperation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuotaOperation} obj Optional instance to populate.
     * @return {module:model/QuotaOperation} The populated <code>QuotaOperation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuotaOperation();

            if (data.hasOwnProperty('consumerId')) {
                obj['consumerId'] = ApiClient.convertToType(data['consumerId'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('methodName')) {
                obj['methodName'] = ApiClient.convertToType(data['methodName'], 'String');
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('quotaMetrics')) {
                obj['quotaMetrics'] = ApiClient.convertToType(data['quotaMetrics'], [MetricValueSet]);
            }
            if (data.hasOwnProperty('quotaMode')) {
                obj['quotaMode'] = ApiClient.convertToType(data['quotaMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuotaOperation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuotaOperation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consumerId'] && !(typeof data['consumerId'] === 'string' || data['consumerId'] instanceof String)) {
            throw new Error("Expected the field `consumerId` to be a primitive type in the JSON string but got " + data['consumerId']);
        }
        // ensure the json data is a string
        if (data['methodName'] && !(typeof data['methodName'] === 'string' || data['methodName'] instanceof String)) {
            throw new Error("Expected the field `methodName` to be a primitive type in the JSON string but got " + data['methodName']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        if (data['quotaMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quotaMetrics'])) {
                throw new Error("Expected the field `quotaMetrics` to be an array in the JSON data but got " + data['quotaMetrics']);
            }
            // validate the optional field `quotaMetrics` (array)
            for (const item of data['quotaMetrics']) {
                MetricValueSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['quotaMode'] && !(typeof data['quotaMode'] === 'string' || data['quotaMode'] instanceof String)) {
            throw new Error("Expected the field `quotaMode` to be a primitive type in the JSON string but got " + data['quotaMode']);
        }

        return true;
    }


}



/**
 * Identity of the consumer for whom this quota operation is being performed. This can be in one of the following formats: project:, project_number:, api_key:.
 * @member {String} consumerId
 */
QuotaOperation.prototype['consumerId'] = undefined;

/**
 * Labels describing the operation.
 * @member {Object.<String, String>} labels
 */
QuotaOperation.prototype['labels'] = undefined;

/**
 * Fully qualified name of the API method for which this quota operation is requested. This name is used for matching quota rules or metric rules and billing status rules defined in service configuration. This field should not be set if any of the following is true: (1) the quota operation is performed on non-API resources. (2) quota_metrics is set because the caller is doing quota override. Example of an RPC method name: google.example.library.v1.LibraryService.CreateShelf
 * @member {String} methodName
 */
QuotaOperation.prototype['methodName'] = undefined;

/**
 * Identity of the operation. For Allocation Quota, this is expected to be unique within the scope of the service that generated the operation, and guarantees idempotency in case of retries. In order to ensure best performance and latency in the Quota backends, operation_ids are optimally associated with time, so that related operations can be accessed fast in storage. For this reason, the recommended token for services that intend to operate at a high QPS is Unix time in nanos + UUID
 * @member {String} operationId
 */
QuotaOperation.prototype['operationId'] = undefined;

/**
 * Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error. This field is mutually exclusive with method_name.
 * @member {Array.<module:model/MetricValueSet>} quotaMetrics
 */
QuotaOperation.prototype['quotaMetrics'] = undefined;

/**
 * Quota mode for this operation.
 * @member {module:model/QuotaOperation.QuotaModeEnum} quotaMode
 */
QuotaOperation.prototype['quotaMode'] = undefined;





/**
 * Allowed values for the <code>quotaMode</code> property.
 * @enum {String}
 * @readonly
 */
QuotaOperation['QuotaModeEnum'] = {

    /**
     * value: "UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "UNSPECIFIED",

    /**
     * value: "NORMAL"
     * @const
     */
    "NORMAL": "NORMAL",

    /**
     * value: "BEST_EFFORT"
     * @const
     */
    "BEST_EFFORT": "BEST_EFFORT",

    /**
     * value: "CHECK_ONLY"
     * @const
     */
    "CHECK_ONLY": "CHECK_ONLY",

    /**
     * value: "ADJUST_ONLY"
     * @const
     */
    "ADJUST_ONLY": "ADJUST_ONLY"
};



export default QuotaOperation;

