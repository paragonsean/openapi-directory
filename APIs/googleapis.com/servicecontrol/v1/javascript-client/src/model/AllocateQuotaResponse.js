/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AllocateInfo from './AllocateInfo';
import MetricValueSet from './MetricValueSet';
import QuotaError from './QuotaError';

/**
 * The AllocateQuotaResponse model module.
 * @module model/AllocateQuotaResponse
 * @version v1
 */
class AllocateQuotaResponse {
    /**
     * Constructs a new <code>AllocateQuotaResponse</code>.
     * Response message for the AllocateQuota method.
     * @alias module:model/AllocateQuotaResponse
     */
    constructor() { 
        
        AllocateQuotaResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AllocateQuotaResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllocateQuotaResponse} obj Optional instance to populate.
     * @return {module:model/AllocateQuotaResponse} The populated <code>AllocateQuotaResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllocateQuotaResponse();

            if (data.hasOwnProperty('allocateErrors')) {
                obj['allocateErrors'] = ApiClient.convertToType(data['allocateErrors'], [QuotaError]);
            }
            if (data.hasOwnProperty('allocateInfo')) {
                obj['allocateInfo'] = AllocateInfo.constructFromObject(data['allocateInfo']);
            }
            if (data.hasOwnProperty('operationId')) {
                obj['operationId'] = ApiClient.convertToType(data['operationId'], 'String');
            }
            if (data.hasOwnProperty('quotaMetrics')) {
                obj['quotaMetrics'] = ApiClient.convertToType(data['quotaMetrics'], [MetricValueSet]);
            }
            if (data.hasOwnProperty('serviceConfigId')) {
                obj['serviceConfigId'] = ApiClient.convertToType(data['serviceConfigId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllocateQuotaResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllocateQuotaResponse</code>.
     */
    static validateJSON(data) {
        if (data['allocateErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['allocateErrors'])) {
                throw new Error("Expected the field `allocateErrors` to be an array in the JSON data but got " + data['allocateErrors']);
            }
            // validate the optional field `allocateErrors` (array)
            for (const item of data['allocateErrors']) {
                QuotaError.validateJSON(item);
            };
        }
        // validate the optional field `allocateInfo`
        if (data['allocateInfo']) { // data not null
          AllocateInfo.validateJSON(data['allocateInfo']);
        }
        // ensure the json data is a string
        if (data['operationId'] && !(typeof data['operationId'] === 'string' || data['operationId'] instanceof String)) {
            throw new Error("Expected the field `operationId` to be a primitive type in the JSON string but got " + data['operationId']);
        }
        if (data['quotaMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quotaMetrics'])) {
                throw new Error("Expected the field `quotaMetrics` to be an array in the JSON data but got " + data['quotaMetrics']);
            }
            // validate the optional field `quotaMetrics` (array)
            for (const item of data['quotaMetrics']) {
                MetricValueSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceConfigId'] && !(typeof data['serviceConfigId'] === 'string' || data['serviceConfigId'] instanceof String)) {
            throw new Error("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got " + data['serviceConfigId']);
        }

        return true;
    }


}



/**
 * Indicates the decision of the allocate.
 * @member {Array.<module:model/QuotaError>} allocateErrors
 */
AllocateQuotaResponse.prototype['allocateErrors'] = undefined;

/**
 * @member {module:model/AllocateInfo} allocateInfo
 */
AllocateQuotaResponse.prototype['allocateInfo'] = undefined;

/**
 * The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.
 * @member {String} operationId
 */
AllocateQuotaResponse.prototype['operationId'] = undefined;

/**
 * Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. The quota limit reached condition will be specified using the following boolean metric : \"serviceruntime.googleapis.com/quota/exceeded\"
 * @member {Array.<module:model/MetricValueSet>} quotaMetrics
 */
AllocateQuotaResponse.prototype['quotaMetrics'] = undefined;

/**
 * ID of the actual config used to process the request.
 * @member {String} serviceConfigId
 */
AllocateQuotaResponse.prototype['serviceConfigId'] = undefined;






export default AllocateQuotaResponse;

