/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeValue from './AttributeValue';

/**
 * The Attributes model module.
 * @module model/Attributes
 * @version v1
 */
class Attributes {
    /**
     * Constructs a new <code>Attributes</code>.
     * A set of attributes, each in the format &#x60;[KEY]:[VALUE]&#x60;.
     * @alias module:model/Attributes
     */
    constructor() { 
        
        Attributes.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attributes</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attributes} obj Optional instance to populate.
     * @return {module:model/Attributes} The populated <code>Attributes</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attributes();

            if (data.hasOwnProperty('attributeMap')) {
                obj['attributeMap'] = ApiClient.convertToType(data['attributeMap'], {'String': AttributeValue});
            }
            if (data.hasOwnProperty('droppedAttributesCount')) {
                obj['droppedAttributesCount'] = ApiClient.convertToType(data['droppedAttributesCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attributes</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attributes</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * The set of attributes. Each attribute's key can be up to 128 bytes long. The value can be a string up to 256 bytes, a signed 64-bit integer, or the Boolean values `true` and `false`. For example: \"/instance_id\": \"my-instance\" \"/http/user_agent\": \"\" \"/http/request_bytes\": 300 \"abc.com/myattribute\": true
 * @member {Object.<String, module:model/AttributeValue>} attributeMap
 */
Attributes.prototype['attributeMap'] = undefined;

/**
 * The number of attributes that were discarded. Attributes can be discarded because their keys are too long or because there are too many attributes. If this value is 0 then all attributes are valid.
 * @member {Number} droppedAttributesCount
 */
Attributes.prototype['droppedAttributesCount'] = undefined;






export default Attributes;

