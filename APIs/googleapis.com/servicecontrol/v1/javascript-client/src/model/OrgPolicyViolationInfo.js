/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ViolationInfo from './ViolationInfo';

/**
 * The OrgPolicyViolationInfo model module.
 * @module model/OrgPolicyViolationInfo
 * @version v1
 */
class OrgPolicyViolationInfo {
    /**
     * Constructs a new <code>OrgPolicyViolationInfo</code>.
     * Represents OrgPolicy Violation information.
     * @alias module:model/OrgPolicyViolationInfo
     */
    constructor() { 
        
        OrgPolicyViolationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OrgPolicyViolationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OrgPolicyViolationInfo} obj Optional instance to populate.
     * @return {module:model/OrgPolicyViolationInfo} The populated <code>OrgPolicyViolationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OrgPolicyViolationInfo();

            if (data.hasOwnProperty('payload')) {
                obj['payload'] = ApiClient.convertToType(data['payload'], {'String': Object});
            }
            if (data.hasOwnProperty('resourceTags')) {
                obj['resourceTags'] = ApiClient.convertToType(data['resourceTags'], {'String': 'String'});
            }
            if (data.hasOwnProperty('resourceType')) {
                obj['resourceType'] = ApiClient.convertToType(data['resourceType'], 'String');
            }
            if (data.hasOwnProperty('violationInfo')) {
                obj['violationInfo'] = ApiClient.convertToType(data['violationInfo'], [ViolationInfo]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OrgPolicyViolationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OrgPolicyViolationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['resourceType'] && !(typeof data['resourceType'] === 'string' || data['resourceType'] instanceof String)) {
            throw new Error("Expected the field `resourceType` to be a primitive type in the JSON string but got " + data['resourceType']);
        }
        if (data['violationInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['violationInfo'])) {
                throw new Error("Expected the field `violationInfo` to be an array in the JSON data but got " + data['violationInfo']);
            }
            // validate the optional field `violationInfo` (array)
            for (const item of data['violationInfo']) {
                ViolationInfo.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.
 * @member {Object.<String, Object>} payload
 */
OrgPolicyViolationInfo.prototype['payload'] = undefined;

/**
 * Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.
 * @member {Object.<String, String>} resourceTags
 */
OrgPolicyViolationInfo.prototype['resourceTags'] = undefined;

/**
 * Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket
 * @member {String} resourceType
 */
OrgPolicyViolationInfo.prototype['resourceType'] = undefined;

/**
 * Optional. Policy violations
 * @member {Array.<module:model/ViolationInfo>} violationInfo
 */
OrgPolicyViolationInfo.prototype['violationInfo'] = undefined;






export default OrgPolicyViolationInfo;

