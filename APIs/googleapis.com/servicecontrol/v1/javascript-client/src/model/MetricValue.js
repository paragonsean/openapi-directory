/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Distribution from './Distribution';
import Money from './Money';

/**
 * The MetricValue model module.
 * @module model/MetricValue
 * @version v1
 */
class MetricValue {
    /**
     * Constructs a new <code>MetricValue</code>.
     * Represents a single metric value.
     * @alias module:model/MetricValue
     */
    constructor() { 
        
        MetricValue.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricValue</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricValue} obj Optional instance to populate.
     * @return {module:model/MetricValue} The populated <code>MetricValue</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricValue();

            if (data.hasOwnProperty('boolValue')) {
                obj['boolValue'] = ApiClient.convertToType(data['boolValue'], 'Boolean');
            }
            if (data.hasOwnProperty('distributionValue')) {
                obj['distributionValue'] = Distribution.constructFromObject(data['distributionValue']);
            }
            if (data.hasOwnProperty('doubleValue')) {
                obj['doubleValue'] = ApiClient.convertToType(data['doubleValue'], 'Number');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('int64Value')) {
                obj['int64Value'] = ApiClient.convertToType(data['int64Value'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('moneyValue')) {
                obj['moneyValue'] = Money.constructFromObject(data['moneyValue']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('stringValue')) {
                obj['stringValue'] = ApiClient.convertToType(data['stringValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricValue</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricValue</code>.
     */
    static validateJSON(data) {
        // validate the optional field `distributionValue`
        if (data['distributionValue']) { // data not null
          Distribution.validateJSON(data['distributionValue']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['int64Value'] && !(typeof data['int64Value'] === 'string' || data['int64Value'] instanceof String)) {
            throw new Error("Expected the field `int64Value` to be a primitive type in the JSON string but got " + data['int64Value']);
        }
        // validate the optional field `moneyValue`
        if (data['moneyValue']) { // data not null
          Money.validateJSON(data['moneyValue']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['stringValue'] && !(typeof data['stringValue'] === 'string' || data['stringValue'] instanceof String)) {
            throw new Error("Expected the field `stringValue` to be a primitive type in the JSON string but got " + data['stringValue']);
        }

        return true;
    }


}



/**
 * A boolean value.
 * @member {Boolean} boolValue
 */
MetricValue.prototype['boolValue'] = undefined;

/**
 * @member {module:model/Distribution} distributionValue
 */
MetricValue.prototype['distributionValue'] = undefined;

/**
 * A double precision floating point value.
 * @member {Number} doubleValue
 */
MetricValue.prototype['doubleValue'] = undefined;

/**
 * The end of the time period over which this metric value's measurement applies. If not specified, google.api.servicecontrol.v1.Operation.end_time will be used.
 * @member {String} endTime
 */
MetricValue.prototype['endTime'] = undefined;

/**
 * A signed 64-bit integer value.
 * @member {String} int64Value
 */
MetricValue.prototype['int64Value'] = undefined;

/**
 * The labels describing the metric value. See comments on google.api.servicecontrol.v1.Operation.labels for the overriding relationship. Note that this map must not contain monitored resource labels.
 * @member {Object.<String, String>} labels
 */
MetricValue.prototype['labels'] = undefined;

/**
 * @member {module:model/Money} moneyValue
 */
MetricValue.prototype['moneyValue'] = undefined;

/**
 * The start of the time period over which this metric value's measurement applies. The time period has different semantics for different metric types (cumulative, delta, and gauge). See the metric definition documentation in the service configuration for details. If not specified, google.api.servicecontrol.v1.Operation.start_time will be used.
 * @member {String} startTime
 */
MetricValue.prototype['startTime'] = undefined;

/**
 * A text string value.
 * @member {String} stringValue
 */
MetricValue.prototype['stringValue'] = undefined;






export default MetricValue;

