/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Exemplar from './Exemplar';
import ExplicitBuckets from './ExplicitBuckets';
import ExponentialBuckets from './ExponentialBuckets';
import LinearBuckets from './LinearBuckets';

/**
 * The Distribution model module.
 * @module model/Distribution
 * @version v1
 */
class Distribution {
    /**
     * Constructs a new <code>Distribution</code>.
     * Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points
     * @alias module:model/Distribution
     */
    constructor() { 
        
        Distribution.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Distribution</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Distribution} obj Optional instance to populate.
     * @return {module:model/Distribution} The populated <code>Distribution</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Distribution();

            if (data.hasOwnProperty('bucketCounts')) {
                obj['bucketCounts'] = ApiClient.convertToType(data['bucketCounts'], ['String']);
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('exemplars')) {
                obj['exemplars'] = ApiClient.convertToType(data['exemplars'], [Exemplar]);
            }
            if (data.hasOwnProperty('explicitBuckets')) {
                obj['explicitBuckets'] = ExplicitBuckets.constructFromObject(data['explicitBuckets']);
            }
            if (data.hasOwnProperty('exponentialBuckets')) {
                obj['exponentialBuckets'] = ExponentialBuckets.constructFromObject(data['exponentialBuckets']);
            }
            if (data.hasOwnProperty('linearBuckets')) {
                obj['linearBuckets'] = LinearBuckets.constructFromObject(data['linearBuckets']);
            }
            if (data.hasOwnProperty('maximum')) {
                obj['maximum'] = ApiClient.convertToType(data['maximum'], 'Number');
            }
            if (data.hasOwnProperty('mean')) {
                obj['mean'] = ApiClient.convertToType(data['mean'], 'Number');
            }
            if (data.hasOwnProperty('minimum')) {
                obj['minimum'] = ApiClient.convertToType(data['minimum'], 'Number');
            }
            if (data.hasOwnProperty('sumOfSquaredDeviation')) {
                obj['sumOfSquaredDeviation'] = ApiClient.convertToType(data['sumOfSquaredDeviation'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Distribution</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Distribution</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bucketCounts'])) {
            throw new Error("Expected the field `bucketCounts` to be an array in the JSON data but got " + data['bucketCounts']);
        }
        // ensure the json data is a string
        if (data['count'] && !(typeof data['count'] === 'string' || data['count'] instanceof String)) {
            throw new Error("Expected the field `count` to be a primitive type in the JSON string but got " + data['count']);
        }
        if (data['exemplars']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exemplars'])) {
                throw new Error("Expected the field `exemplars` to be an array in the JSON data but got " + data['exemplars']);
            }
            // validate the optional field `exemplars` (array)
            for (const item of data['exemplars']) {
                Exemplar.validateJSON(item);
            };
        }
        // validate the optional field `explicitBuckets`
        if (data['explicitBuckets']) { // data not null
          ExplicitBuckets.validateJSON(data['explicitBuckets']);
        }
        // validate the optional field `exponentialBuckets`
        if (data['exponentialBuckets']) { // data not null
          ExponentialBuckets.validateJSON(data['exponentialBuckets']);
        }
        // validate the optional field `linearBuckets`
        if (data['linearBuckets']) { // data not null
          LinearBuckets.validateJSON(data['linearBuckets']);
        }

        return true;
    }


}



/**
 * The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted.
 * @member {Array.<String>} bucketCounts
 */
Distribution.prototype['bucketCounts'] = undefined;

/**
 * The total number of samples in the distribution. Must be >= 0.
 * @member {String} count
 */
Distribution.prototype['count'] = undefined;

/**
 * Example points. Must be in increasing order of `value` field.
 * @member {Array.<module:model/Exemplar>} exemplars
 */
Distribution.prototype['exemplars'] = undefined;

/**
 * @member {module:model/ExplicitBuckets} explicitBuckets
 */
Distribution.prototype['explicitBuckets'] = undefined;

/**
 * @member {module:model/ExponentialBuckets} exponentialBuckets
 */
Distribution.prototype['exponentialBuckets'] = undefined;

/**
 * @member {module:model/LinearBuckets} linearBuckets
 */
Distribution.prototype['linearBuckets'] = undefined;

/**
 * The maximum of the population of values. Ignored if `count` is zero.
 * @member {Number} maximum
 */
Distribution.prototype['maximum'] = undefined;

/**
 * The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero.
 * @member {Number} mean
 */
Distribution.prototype['mean'] = undefined;

/**
 * The minimum of the population of values. Ignored if `count` is zero.
 * @member {Number} minimum
 */
Distribution.prototype['minimum'] = undefined;

/**
 * The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails.
 * @member {Number} sumOfSquaredDeviation
 */
Distribution.prototype['sumOfSquaredDeviation'] = undefined;






export default Distribution;

