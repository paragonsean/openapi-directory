/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Operation from './Operation';

/**
 * The ReportRequest model module.
 * @module model/ReportRequest
 * @version v1
 */
class ReportRequest {
    /**
     * Constructs a new <code>ReportRequest</code>.
     * Request message for the Report method.
     * @alias module:model/ReportRequest
     */
    constructor() { 
        
        ReportRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportRequest} obj Optional instance to populate.
     * @return {module:model/ReportRequest} The populated <code>ReportRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportRequest();

            if (data.hasOwnProperty('operations')) {
                obj['operations'] = ApiClient.convertToType(data['operations'], [Operation]);
            }
            if (data.hasOwnProperty('serviceConfigId')) {
                obj['serviceConfigId'] = ApiClient.convertToType(data['serviceConfigId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportRequest</code>.
     */
    static validateJSON(data) {
        if (data['operations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['operations'])) {
                throw new Error("Expected the field `operations` to be an array in the JSON data but got " + data['operations']);
            }
            // validate the optional field `operations` (array)
            for (const item of data['operations']) {
                Operation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceConfigId'] && !(typeof data['serviceConfigId'] === 'string' || data['serviceConfigId'] instanceof String)) {
            throw new Error("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got " + data['serviceConfigId']);
        }

        return true;
    }


}



/**
 * Operations to be reported. Typically the service should report one operation per request. Putting multiple operations into a single request is allowed, but should be used only when multiple operations are natually available at the time of the report. There is no limit on the number of operations in the same ReportRequest, however the ReportRequest size should be no larger than 1MB. See ReportResponse.report_errors for partial failure behavior.
 * @member {Array.<module:model/Operation>} operations
 */
ReportRequest.prototype['operations'] = undefined;

/**
 * Specifies which version of service config should be used to process the request. If unspecified or no matching version can be found, the latest one will be used.
 * @member {String} serviceConfigId
 */
ReportRequest.prototype['serviceConfigId'] = undefined;






export default ReportRequest;

