/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceInfo model module.
 * @module model/ResourceInfo
 * @version v1
 */
class ResourceInfo {
    /**
     * Constructs a new <code>ResourceInfo</code>.
     * Describes a resource associated with this operation.
     * @alias module:model/ResourceInfo
     */
    constructor() { 
        
        ResourceInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceInfo} obj Optional instance to populate.
     * @return {module:model/ResourceInfo} The populated <code>ResourceInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceInfo();

            if (data.hasOwnProperty('permission')) {
                obj['permission'] = ApiClient.convertToType(data['permission'], 'String');
            }
            if (data.hasOwnProperty('resourceContainer')) {
                obj['resourceContainer'] = ApiClient.convertToType(data['resourceContainer'], 'String');
            }
            if (data.hasOwnProperty('resourceLocation')) {
                obj['resourceLocation'] = ApiClient.convertToType(data['resourceLocation'], 'String');
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['permission'] && !(typeof data['permission'] === 'string' || data['permission'] instanceof String)) {
            throw new Error("Expected the field `permission` to be a primitive type in the JSON string but got " + data['permission']);
        }
        // ensure the json data is a string
        if (data['resourceContainer'] && !(typeof data['resourceContainer'] === 'string' || data['resourceContainer'] instanceof String)) {
            throw new Error("Expected the field `resourceContainer` to be a primitive type in the JSON string but got " + data['resourceContainer']);
        }
        // ensure the json data is a string
        if (data['resourceLocation'] && !(typeof data['resourceLocation'] === 'string' || data['resourceLocation'] instanceof String)) {
            throw new Error("Expected the field `resourceLocation` to be a primitive type in the JSON string but got " + data['resourceLocation']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }

        return true;
    }


}



/**
 * The resource permission required for this request.
 * @member {String} permission
 */
ResourceInfo.prototype['permission'] = undefined;

/**
 * The identifier of the parent of this resource instance. Must be in one of the following formats: - `projects/` - `folders/` - `organizations/`
 * @member {String} resourceContainer
 */
ResourceInfo.prototype['resourceContainer'] = undefined;

/**
 * The location of the resource. If not empty, the resource will be checked against location policy. The value must be a valid zone, region or multiregion. For example: \"europe-west4\" or \"northamerica-northeast1-a\"
 * @member {String} resourceLocation
 */
ResourceInfo.prototype['resourceLocation'] = undefined;

/**
 * Name of the resource. This is used for auditing purposes.
 * @member {String} resourceName
 */
ResourceInfo.prototype['resourceName'] = undefined;






export default ResourceInfo;

