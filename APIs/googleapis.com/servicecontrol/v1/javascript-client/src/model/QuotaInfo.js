/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricValueSet from './MetricValueSet';

/**
 * The QuotaInfo model module.
 * @module model/QuotaInfo
 * @version v1
 */
class QuotaInfo {
    /**
     * Constructs a new <code>QuotaInfo</code>.
     * Contains the quota information for a quota check response.
     * @alias module:model/QuotaInfo
     */
    constructor() { 
        
        QuotaInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuotaInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuotaInfo} obj Optional instance to populate.
     * @return {module:model/QuotaInfo} The populated <code>QuotaInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuotaInfo();

            if (data.hasOwnProperty('limitExceeded')) {
                obj['limitExceeded'] = ApiClient.convertToType(data['limitExceeded'], ['String']);
            }
            if (data.hasOwnProperty('quotaConsumed')) {
                obj['quotaConsumed'] = ApiClient.convertToType(data['quotaConsumed'], {'String': 'Number'});
            }
            if (data.hasOwnProperty('quotaMetrics')) {
                obj['quotaMetrics'] = ApiClient.convertToType(data['quotaMetrics'], [MetricValueSet]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuotaInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuotaInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['limitExceeded'])) {
            throw new Error("Expected the field `limitExceeded` to be an array in the JSON data but got " + data['limitExceeded']);
        }
        if (data['quotaMetrics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['quotaMetrics'])) {
                throw new Error("Expected the field `quotaMetrics` to be an array in the JSON data but got " + data['quotaMetrics']);
            }
            // validate the optional field `quotaMetrics` (array)
            for (const item of data['quotaMetrics']) {
                MetricValueSet.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota Deprecated: Use quota_metrics to get per quota group limit exceeded status.
 * @member {Array.<String>} limitExceeded
 */
QuotaInfo.prototype['limitExceeded'] = undefined;

/**
 * Map of quota group name to the actual number of tokens consumed. If the quota check was not successful, then this will not be populated due to no quota consumption. We are not merging this field with 'quota_metrics' field because of the complexity of scaling in Chemist client code base. For simplicity, we will keep this field for Castor (that scales quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage). 
 * @member {Object.<String, Number>} quotaConsumed
 */
QuotaInfo.prototype['quotaConsumed'] = undefined;

/**
 * Quota metrics to indicate the usage. Depending on the check request, one or more of the following metrics will be included: 1. For rate quota, per quota group or per quota metric incremental usage will be specified using the following delta metric: \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. For allocation quota, per quota metric total usage will be specified using the following gauge metric: \"serviceruntime.googleapis.com/allocation/consumer/quota_used_count\" 3. For both rate quota and allocation quota, the quota limit reached condition will be specified using the following boolean metric: \"serviceruntime.googleapis.com/quota/exceeded\"
 * @member {Array.<module:model/MetricValueSet>} quotaMetrics
 */
QuotaInfo.prototype['quotaMetrics'] = undefined;






export default QuotaInfo;

