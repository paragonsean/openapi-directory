/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AllocateInfo model module.
 * @module model/AllocateInfo
 * @version v1
 */
class AllocateInfo {
    /**
     * Constructs a new <code>AllocateInfo</code>.
     * @alias module:model/AllocateInfo
     */
    constructor() { 
        
        AllocateInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AllocateInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AllocateInfo} obj Optional instance to populate.
     * @return {module:model/AllocateInfo} The populated <code>AllocateInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AllocateInfo();

            if (data.hasOwnProperty('unusedArguments')) {
                obj['unusedArguments'] = ApiClient.convertToType(data['unusedArguments'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AllocateInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AllocateInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['unusedArguments'])) {
            throw new Error("Expected the field `unusedArguments` to be an array in the JSON data but got " + data['unusedArguments']);
        }

        return true;
    }


}



/**
 * A list of label keys that were unused by the server in processing the request. Thus, for similar requests repeated in a certain future time window, the caller can choose to ignore these labels in the requests to achieve better client-side cache hits and quota aggregation for rate quota. This field is not populated for allocation quota checks.
 * @member {Array.<String>} unusedArguments
 */
AllocateInfo.prototype['unusedArguments'] = undefined;






export default AllocateInfo;

