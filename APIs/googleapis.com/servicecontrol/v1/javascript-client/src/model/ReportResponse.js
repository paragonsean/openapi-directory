/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ReportError from './ReportError';

/**
 * The ReportResponse model module.
 * @module model/ReportResponse
 * @version v1
 */
class ReportResponse {
    /**
     * Constructs a new <code>ReportResponse</code>.
     * Response message for the Report method.
     * @alias module:model/ReportResponse
     */
    constructor() { 
        
        ReportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReportResponse} obj Optional instance to populate.
     * @return {module:model/ReportResponse} The populated <code>ReportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReportResponse();

            if (data.hasOwnProperty('reportErrors')) {
                obj['reportErrors'] = ApiClient.convertToType(data['reportErrors'], [ReportError]);
            }
            if (data.hasOwnProperty('serviceConfigId')) {
                obj['serviceConfigId'] = ApiClient.convertToType(data['serviceConfigId'], 'String');
            }
            if (data.hasOwnProperty('serviceRolloutId')) {
                obj['serviceRolloutId'] = ApiClient.convertToType(data['serviceRolloutId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReportResponse</code>.
     */
    static validateJSON(data) {
        if (data['reportErrors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reportErrors'])) {
                throw new Error("Expected the field `reportErrors` to be an array in the JSON data but got " + data['reportErrors']);
            }
            // validate the optional field `reportErrors` (array)
            for (const item of data['reportErrors']) {
                ReportError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceConfigId'] && !(typeof data['serviceConfigId'] === 'string' || data['serviceConfigId'] instanceof String)) {
            throw new Error("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got " + data['serviceConfigId']);
        }
        // ensure the json data is a string
        if (data['serviceRolloutId'] && !(typeof data['serviceRolloutId'] === 'string' || data['serviceRolloutId'] instanceof String)) {
            throw new Error("Expected the field `serviceRolloutId` to be a primitive type in the JSON string but got " + data['serviceRolloutId']);
        }

        return true;
    }


}



/**
 * Partial failures, one for each `Operation` in the request that failed processing. There are three possible combinations of the RPC status: 1. The combination of a successful RPC status and an empty `report_errors` list indicates a complete success where all `Operations` in the request are processed successfully. 2. The combination of a successful RPC status and a non-empty `report_errors` list indicates a partial success where some `Operations` in the request succeeded. Each `Operation` that failed processing has a corresponding item in this list. 3. A failed RPC status indicates a general non-deterministic failure. When this happens, it's impossible to know which of the 'Operations' in the request succeeded or failed.
 * @member {Array.<module:model/ReportError>} reportErrors
 */
ReportResponse.prototype['reportErrors'] = undefined;

/**
 * The actual config id used to process the request.
 * @member {String} serviceConfigId
 */
ReportResponse.prototype['serviceConfigId'] = undefined;

/**
 * The current service rollout id used to process the request.
 * @member {String} serviceRolloutId
 */
ReportResponse.prototype['serviceRolloutId'] = undefined;






export default ReportResponse;

