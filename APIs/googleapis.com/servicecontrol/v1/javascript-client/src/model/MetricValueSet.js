/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MetricValue from './MetricValue';

/**
 * The MetricValueSet model module.
 * @module model/MetricValueSet
 * @version v1
 */
class MetricValueSet {
    /**
     * Constructs a new <code>MetricValueSet</code>.
     * Represents a set of metric values in the same metric. Each metric value in the set should have a unique combination of start time, end time, and label values.
     * @alias module:model/MetricValueSet
     */
    constructor() { 
        
        MetricValueSet.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MetricValueSet</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MetricValueSet} obj Optional instance to populate.
     * @return {module:model/MetricValueSet} The populated <code>MetricValueSet</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MetricValueSet();

            if (data.hasOwnProperty('metricName')) {
                obj['metricName'] = ApiClient.convertToType(data['metricName'], 'String');
            }
            if (data.hasOwnProperty('metricValues')) {
                obj['metricValues'] = ApiClient.convertToType(data['metricValues'], [MetricValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MetricValueSet</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MetricValueSet</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['metricName'] && !(typeof data['metricName'] === 'string' || data['metricName'] instanceof String)) {
            throw new Error("Expected the field `metricName` to be a primitive type in the JSON string but got " + data['metricName']);
        }
        if (data['metricValues']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metricValues'])) {
                throw new Error("Expected the field `metricValues` to be an array in the JSON data but got " + data['metricValues']);
            }
            // validate the optional field `metricValues` (array)
            for (const item of data['metricValues']) {
                MetricValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The metric name defined in the service configuration.
 * @member {String} metricName
 */
MetricValueSet.prototype['metricName'] = undefined;

/**
 * The values in this metric.
 * @member {Array.<module:model/MetricValue>} metricValues
 */
MetricValueSet.prototype['metricValues'] = undefined;






export default MetricValueSet;

