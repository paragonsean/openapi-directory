/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExplicitBuckets model module.
 * @module model/ExplicitBuckets
 * @version v1
 */
class ExplicitBuckets {
    /**
     * Constructs a new <code>ExplicitBuckets</code>.
     * Describing buckets with arbitrary user-provided width.
     * @alias module:model/ExplicitBuckets
     */
    constructor() { 
        
        ExplicitBuckets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExplicitBuckets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExplicitBuckets} obj Optional instance to populate.
     * @return {module:model/ExplicitBuckets} The populated <code>ExplicitBuckets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExplicitBuckets();

            if (data.hasOwnProperty('bounds')) {
                obj['bounds'] = ApiClient.convertToType(data['bounds'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExplicitBuckets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExplicitBuckets</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['bounds'])) {
            throw new Error("Expected the field `bounds` to be an array in the JSON data but got " + data['bounds']);
        }

        return true;
    }


}



/**
 * 'bound' is a list of strictly increasing boundaries between buckets. Note that a list of length N-1 defines N buckets because of fenceposting. See comments on `bucket_options` for details. The i'th finite bucket covers the interval [bound[i-1], bound[i]) where i ranges from 1 to bound_size() - 1. Note that there are no finite buckets at all if 'bound' only contains a single element; in that special case the single bound defines the boundary between the underflow and overflow buckets. bucket number lower bound upper bound i == 0 (underflow) -inf bound[i] 0 < i < bound_size() bound[i-1] bound[i] i == bound_size() (overflow) bound[i-1] +inf
 * @member {Array.<Number>} bounds
 */
ExplicitBuckets.prototype['bounds'] = undefined;






export default ExplicitBuckets;

