/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HttpRequest from './HttpRequest';
import LogEntryOperation from './LogEntryOperation';
import LogEntrySourceLocation from './LogEntrySourceLocation';

/**
 * The LogEntry model module.
 * @module model/LogEntry
 * @version v1
 */
class LogEntry {
    /**
     * Constructs a new <code>LogEntry</code>.
     * An individual log entry.
     * @alias module:model/LogEntry
     */
    constructor() { 
        
        LogEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogEntry} obj Optional instance to populate.
     * @return {module:model/LogEntry} The populated <code>LogEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogEntry();

            if (data.hasOwnProperty('httpRequest')) {
                obj['httpRequest'] = HttpRequest.constructFromObject(data['httpRequest']);
            }
            if (data.hasOwnProperty('insertId')) {
                obj['insertId'] = ApiClient.convertToType(data['insertId'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operation')) {
                obj['operation'] = LogEntryOperation.constructFromObject(data['operation']);
            }
            if (data.hasOwnProperty('protoPayload')) {
                obj['protoPayload'] = ApiClient.convertToType(data['protoPayload'], {'String': Object});
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('sourceLocation')) {
                obj['sourceLocation'] = LogEntrySourceLocation.constructFromObject(data['sourceLocation']);
            }
            if (data.hasOwnProperty('structPayload')) {
                obj['structPayload'] = ApiClient.convertToType(data['structPayload'], {'String': Object});
            }
            if (data.hasOwnProperty('textPayload')) {
                obj['textPayload'] = ApiClient.convertToType(data['textPayload'], 'String');
            }
            if (data.hasOwnProperty('timestamp')) {
                obj['timestamp'] = ApiClient.convertToType(data['timestamp'], 'String');
            }
            if (data.hasOwnProperty('trace')) {
                obj['trace'] = ApiClient.convertToType(data['trace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogEntry</code>.
     */
    static validateJSON(data) {
        // validate the optional field `httpRequest`
        if (data['httpRequest']) { // data not null
          HttpRequest.validateJSON(data['httpRequest']);
        }
        // ensure the json data is a string
        if (data['insertId'] && !(typeof data['insertId'] === 'string' || data['insertId'] instanceof String)) {
            throw new Error("Expected the field `insertId` to be a primitive type in the JSON string but got " + data['insertId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `operation`
        if (data['operation']) { // data not null
          LogEntryOperation.validateJSON(data['operation']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // validate the optional field `sourceLocation`
        if (data['sourceLocation']) { // data not null
          LogEntrySourceLocation.validateJSON(data['sourceLocation']);
        }
        // ensure the json data is a string
        if (data['textPayload'] && !(typeof data['textPayload'] === 'string' || data['textPayload'] instanceof String)) {
            throw new Error("Expected the field `textPayload` to be a primitive type in the JSON string but got " + data['textPayload']);
        }
        // ensure the json data is a string
        if (data['timestamp'] && !(typeof data['timestamp'] === 'string' || data['timestamp'] instanceof String)) {
            throw new Error("Expected the field `timestamp` to be a primitive type in the JSON string but got " + data['timestamp']);
        }
        // ensure the json data is a string
        if (data['trace'] && !(typeof data['trace'] === 'string' || data['trace'] instanceof String)) {
            throw new Error("Expected the field `trace` to be a primitive type in the JSON string but got " + data['trace']);
        }

        return true;
    }


}



/**
 * @member {module:model/HttpRequest} httpRequest
 */
LogEntry.prototype['httpRequest'] = undefined;

/**
 * A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.
 * @member {String} insertId
 */
LogEntry.prototype['insertId'] = undefined;

/**
 * A set of user-defined (key, value) data that provides additional information about the log entry.
 * @member {Object.<String, String>} labels
 */
LogEntry.prototype['labels'] = undefined;

/**
 * Required. The log to which this log entry belongs. Examples: `\"syslog\"`, `\"book_log\"`.
 * @member {String} name
 */
LogEntry.prototype['name'] = undefined;

/**
 * @member {module:model/LogEntryOperation} operation
 */
LogEntry.prototype['operation'] = undefined;

/**
 * The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.
 * @member {Object.<String, Object>} protoPayload
 */
LogEntry.prototype['protoPayload'] = undefined;

/**
 * The severity of the log entry. The default value is `LogSeverity.DEFAULT`.
 * @member {module:model/LogEntry.SeverityEnum} severity
 */
LogEntry.prototype['severity'] = undefined;

/**
 * @member {module:model/LogEntrySourceLocation} sourceLocation
 */
LogEntry.prototype['sourceLocation'] = undefined;

/**
 * The log entry payload, represented as a structure that is expressed as a JSON object.
 * @member {Object.<String, Object>} structPayload
 */
LogEntry.prototype['structPayload'] = undefined;

/**
 * The log entry payload, represented as a Unicode string (UTF-8).
 * @member {String} textPayload
 */
LogEntry.prototype['textPayload'] = undefined;

/**
 * The time the event described by the log entry occurred. If omitted, defaults to operation start time.
 * @member {String} timestamp
 */
LogEntry.prototype['timestamp'] = undefined;

/**
 * Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`
 * @member {String} trace
 */
LogEntry.prototype['trace'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
LogEntry['SeverityEnum'] = {

    /**
     * value: "DEFAULT"
     * @const
     */
    "DEFAULT": "DEFAULT",

    /**
     * value: "DEBUG"
     * @const
     */
    "DEBUG": "DEBUG",

    /**
     * value: "INFO"
     * @const
     */
    "INFO": "INFO",

    /**
     * value: "NOTICE"
     * @const
     */
    "NOTICE": "NOTICE",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "CRITICAL"
     * @const
     */
    "CRITICAL": "CRITICAL",

    /**
     * value: "ALERT"
     * @const
     */
    "ALERT": "ALERT",

    /**
     * value: "EMERGENCY"
     * @const
     */
    "EMERGENCY": "EMERGENCY"
};



export default LogEntry;

