# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.distribution import Distribution
from openapi_server.models.money import Money
from openapi_server import util


class MetricValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bool_value: bool=None, distribution_value: Distribution=None, double_value: float=None, end_time: str=None, int64_value: str=None, labels: Dict[str, str]=None, money_value: Money=None, start_time: str=None, string_value: str=None):
        """MetricValue - a model defined in OpenAPI

        :param bool_value: The bool_value of this MetricValue.
        :param distribution_value: The distribution_value of this MetricValue.
        :param double_value: The double_value of this MetricValue.
        :param end_time: The end_time of this MetricValue.
        :param int64_value: The int64_value of this MetricValue.
        :param labels: The labels of this MetricValue.
        :param money_value: The money_value of this MetricValue.
        :param start_time: The start_time of this MetricValue.
        :param string_value: The string_value of this MetricValue.
        """
        self.openapi_types = {
            'bool_value': bool,
            'distribution_value': Distribution,
            'double_value': float,
            'end_time': str,
            'int64_value': str,
            'labels': Dict[str, str],
            'money_value': Money,
            'start_time': str,
            'string_value': str
        }

        self.attribute_map = {
            'bool_value': 'boolValue',
            'distribution_value': 'distributionValue',
            'double_value': 'doubleValue',
            'end_time': 'endTime',
            'int64_value': 'int64Value',
            'labels': 'labels',
            'money_value': 'moneyValue',
            'start_time': 'startTime',
            'string_value': 'stringValue'
        }

        self._bool_value = bool_value
        self._distribution_value = distribution_value
        self._double_value = double_value
        self._end_time = end_time
        self._int64_value = int64_value
        self._labels = labels
        self._money_value = money_value
        self._start_time = start_time
        self._string_value = string_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricValue of this MetricValue.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bool_value(self):
        """Gets the bool_value of this MetricValue.

        A boolean value.

        :return: The bool_value of this MetricValue.
        :rtype: bool
        """
        return self._bool_value

    @bool_value.setter
    def bool_value(self, bool_value):
        """Sets the bool_value of this MetricValue.

        A boolean value.

        :param bool_value: The bool_value of this MetricValue.
        :type bool_value: bool
        """

        self._bool_value = bool_value

    @property
    def distribution_value(self):
        """Gets the distribution_value of this MetricValue.


        :return: The distribution_value of this MetricValue.
        :rtype: Distribution
        """
        return self._distribution_value

    @distribution_value.setter
    def distribution_value(self, distribution_value):
        """Sets the distribution_value of this MetricValue.


        :param distribution_value: The distribution_value of this MetricValue.
        :type distribution_value: Distribution
        """

        self._distribution_value = distribution_value

    @property
    def double_value(self):
        """Gets the double_value of this MetricValue.

        A double precision floating point value.

        :return: The double_value of this MetricValue.
        :rtype: float
        """
        return self._double_value

    @double_value.setter
    def double_value(self, double_value):
        """Sets the double_value of this MetricValue.

        A double precision floating point value.

        :param double_value: The double_value of this MetricValue.
        :type double_value: float
        """

        self._double_value = double_value

    @property
    def end_time(self):
        """Gets the end_time of this MetricValue.

        The end of the time period over which this metric value's measurement applies. If not specified, google.api.servicecontrol.v1.Operation.end_time will be used.

        :return: The end_time of this MetricValue.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MetricValue.

        The end of the time period over which this metric value's measurement applies. If not specified, google.api.servicecontrol.v1.Operation.end_time will be used.

        :param end_time: The end_time of this MetricValue.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def int64_value(self):
        """Gets the int64_value of this MetricValue.

        A signed 64-bit integer value.

        :return: The int64_value of this MetricValue.
        :rtype: str
        """
        return self._int64_value

    @int64_value.setter
    def int64_value(self, int64_value):
        """Sets the int64_value of this MetricValue.

        A signed 64-bit integer value.

        :param int64_value: The int64_value of this MetricValue.
        :type int64_value: str
        """

        self._int64_value = int64_value

    @property
    def labels(self):
        """Gets the labels of this MetricValue.

        The labels describing the metric value. See comments on google.api.servicecontrol.v1.Operation.labels for the overriding relationship. Note that this map must not contain monitored resource labels.

        :return: The labels of this MetricValue.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MetricValue.

        The labels describing the metric value. See comments on google.api.servicecontrol.v1.Operation.labels for the overriding relationship. Note that this map must not contain monitored resource labels.

        :param labels: The labels of this MetricValue.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def money_value(self):
        """Gets the money_value of this MetricValue.


        :return: The money_value of this MetricValue.
        :rtype: Money
        """
        return self._money_value

    @money_value.setter
    def money_value(self, money_value):
        """Sets the money_value of this MetricValue.


        :param money_value: The money_value of this MetricValue.
        :type money_value: Money
        """

        self._money_value = money_value

    @property
    def start_time(self):
        """Gets the start_time of this MetricValue.

        The start of the time period over which this metric value's measurement applies. The time period has different semantics for different metric types (cumulative, delta, and gauge). See the metric definition documentation in the service configuration for details. If not specified, google.api.servicecontrol.v1.Operation.start_time will be used.

        :return: The start_time of this MetricValue.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MetricValue.

        The start of the time period over which this metric value's measurement applies. The time period has different semantics for different metric types (cumulative, delta, and gauge). See the metric definition documentation in the service configuration for details. If not specified, google.api.servicecontrol.v1.Operation.start_time will be used.

        :param start_time: The start_time of this MetricValue.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def string_value(self):
        """Gets the string_value of this MetricValue.

        A text string value.

        :return: The string_value of this MetricValue.
        :rtype: str
        """
        return self._string_value

    @string_value.setter
    def string_value(self, string_value):
        """Sets the string_value of this MetricValue.

        A text string value.

        :param string_value: The string_value of this MetricValue.
        :type string_value: str
        """

        self._string_value = string_value
