# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.exemplar import Exemplar
from openapi_server.models.explicit_buckets import ExplicitBuckets
from openapi_server.models.exponential_buckets import ExponentialBuckets
from openapi_server.models.linear_buckets import LinearBuckets
from openapi_server import util


class Distribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bucket_counts: List[str]=None, count: str=None, exemplars: List[Exemplar]=None, explicit_buckets: ExplicitBuckets=None, exponential_buckets: ExponentialBuckets=None, linear_buckets: LinearBuckets=None, maximum: float=None, mean: float=None, minimum: float=None, sum_of_squared_deviation: float=None):
        """Distribution - a model defined in OpenAPI

        :param bucket_counts: The bucket_counts of this Distribution.
        :param count: The count of this Distribution.
        :param exemplars: The exemplars of this Distribution.
        :param explicit_buckets: The explicit_buckets of this Distribution.
        :param exponential_buckets: The exponential_buckets of this Distribution.
        :param linear_buckets: The linear_buckets of this Distribution.
        :param maximum: The maximum of this Distribution.
        :param mean: The mean of this Distribution.
        :param minimum: The minimum of this Distribution.
        :param sum_of_squared_deviation: The sum_of_squared_deviation of this Distribution.
        """
        self.openapi_types = {
            'bucket_counts': List[str],
            'count': str,
            'exemplars': List[Exemplar],
            'explicit_buckets': ExplicitBuckets,
            'exponential_buckets': ExponentialBuckets,
            'linear_buckets': LinearBuckets,
            'maximum': float,
            'mean': float,
            'minimum': float,
            'sum_of_squared_deviation': float
        }

        self.attribute_map = {
            'bucket_counts': 'bucketCounts',
            'count': 'count',
            'exemplars': 'exemplars',
            'explicit_buckets': 'explicitBuckets',
            'exponential_buckets': 'exponentialBuckets',
            'linear_buckets': 'linearBuckets',
            'maximum': 'maximum',
            'mean': 'mean',
            'minimum': 'minimum',
            'sum_of_squared_deviation': 'sumOfSquaredDeviation'
        }

        self._bucket_counts = bucket_counts
        self._count = count
        self._exemplars = exemplars
        self._explicit_buckets = explicit_buckets
        self._exponential_buckets = exponential_buckets
        self._linear_buckets = linear_buckets
        self._maximum = maximum
        self._mean = mean
        self._minimum = minimum
        self._sum_of_squared_deviation = sum_of_squared_deviation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Distribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Distribution of this Distribution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bucket_counts(self):
        """Gets the bucket_counts of this Distribution.

        The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted.

        :return: The bucket_counts of this Distribution.
        :rtype: List[str]
        """
        return self._bucket_counts

    @bucket_counts.setter
    def bucket_counts(self, bucket_counts):
        """Sets the bucket_counts of this Distribution.

        The number of samples in each histogram bucket. `bucket_counts` are optional. If present, they must sum to the `count` value. The buckets are defined below in `bucket_option`. There are N buckets. `bucket_counts[0]` is the number of samples in the underflow bucket. `bucket_counts[1]` to `bucket_counts[N-1]` are the numbers of samples in each of the finite buckets. And `bucket_counts[N] is the number of samples in the overflow bucket. See the comments of `bucket_option` below for more details. Any suffix of trailing zeros may be omitted.

        :param bucket_counts: The bucket_counts of this Distribution.
        :type bucket_counts: List[str]
        """

        self._bucket_counts = bucket_counts

    @property
    def count(self):
        """Gets the count of this Distribution.

        The total number of samples in the distribution. Must be >= 0.

        :return: The count of this Distribution.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Distribution.

        The total number of samples in the distribution. Must be >= 0.

        :param count: The count of this Distribution.
        :type count: str
        """

        self._count = count

    @property
    def exemplars(self):
        """Gets the exemplars of this Distribution.

        Example points. Must be in increasing order of `value` field.

        :return: The exemplars of this Distribution.
        :rtype: List[Exemplar]
        """
        return self._exemplars

    @exemplars.setter
    def exemplars(self, exemplars):
        """Sets the exemplars of this Distribution.

        Example points. Must be in increasing order of `value` field.

        :param exemplars: The exemplars of this Distribution.
        :type exemplars: List[Exemplar]
        """

        self._exemplars = exemplars

    @property
    def explicit_buckets(self):
        """Gets the explicit_buckets of this Distribution.


        :return: The explicit_buckets of this Distribution.
        :rtype: ExplicitBuckets
        """
        return self._explicit_buckets

    @explicit_buckets.setter
    def explicit_buckets(self, explicit_buckets):
        """Sets the explicit_buckets of this Distribution.


        :param explicit_buckets: The explicit_buckets of this Distribution.
        :type explicit_buckets: ExplicitBuckets
        """

        self._explicit_buckets = explicit_buckets

    @property
    def exponential_buckets(self):
        """Gets the exponential_buckets of this Distribution.


        :return: The exponential_buckets of this Distribution.
        :rtype: ExponentialBuckets
        """
        return self._exponential_buckets

    @exponential_buckets.setter
    def exponential_buckets(self, exponential_buckets):
        """Sets the exponential_buckets of this Distribution.


        :param exponential_buckets: The exponential_buckets of this Distribution.
        :type exponential_buckets: ExponentialBuckets
        """

        self._exponential_buckets = exponential_buckets

    @property
    def linear_buckets(self):
        """Gets the linear_buckets of this Distribution.


        :return: The linear_buckets of this Distribution.
        :rtype: LinearBuckets
        """
        return self._linear_buckets

    @linear_buckets.setter
    def linear_buckets(self, linear_buckets):
        """Sets the linear_buckets of this Distribution.


        :param linear_buckets: The linear_buckets of this Distribution.
        :type linear_buckets: LinearBuckets
        """

        self._linear_buckets = linear_buckets

    @property
    def maximum(self):
        """Gets the maximum of this Distribution.

        The maximum of the population of values. Ignored if `count` is zero.

        :return: The maximum of this Distribution.
        :rtype: float
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this Distribution.

        The maximum of the population of values. Ignored if `count` is zero.

        :param maximum: The maximum of this Distribution.
        :type maximum: float
        """

        self._maximum = maximum

    @property
    def mean(self):
        """Gets the mean of this Distribution.

        The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero.

        :return: The mean of this Distribution.
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this Distribution.

        The arithmetic mean of the samples in the distribution. If `count` is zero then this field must be zero.

        :param mean: The mean of this Distribution.
        :type mean: float
        """

        self._mean = mean

    @property
    def minimum(self):
        """Gets the minimum of this Distribution.

        The minimum of the population of values. Ignored if `count` is zero.

        :return: The minimum of this Distribution.
        :rtype: float
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this Distribution.

        The minimum of the population of values. Ignored if `count` is zero.

        :param minimum: The minimum of this Distribution.
        :type minimum: float
        """

        self._minimum = minimum

    @property
    def sum_of_squared_deviation(self):
        """Gets the sum_of_squared_deviation of this Distribution.

        The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails.

        :return: The sum_of_squared_deviation of this Distribution.
        :rtype: float
        """
        return self._sum_of_squared_deviation

    @sum_of_squared_deviation.setter
    def sum_of_squared_deviation(self, sum_of_squared_deviation):
        """Sets the sum_of_squared_deviation of this Distribution.

        The sum of squared deviations from the mean: Sum[i=1..count]((x_i - mean)^2) where each x_i is a sample values. If `count` is zero then this field must be zero, otherwise validation of the request fails.

        :param sum_of_squared_deviation: The sum_of_squared_deviation of this Distribution.
        :type sum_of_squared_deviation: float
        """

        self._sum_of_squared_deviation = sum_of_squared_deviation
