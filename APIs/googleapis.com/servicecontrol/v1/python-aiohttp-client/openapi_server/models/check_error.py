# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class CheckError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, detail: str=None, status: Status=None, subject: str=None):
        """CheckError - a model defined in OpenAPI

        :param code: The code of this CheckError.
        :param detail: The detail of this CheckError.
        :param status: The status of this CheckError.
        :param subject: The subject of this CheckError.
        """
        self.openapi_types = {
            'code': str,
            'detail': str,
            'status': Status,
            'subject': str
        }

        self.attribute_map = {
            'code': 'code',
            'detail': 'detail',
            'status': 'status',
            'subject': 'subject'
        }

        self._code = code
        self._detail = detail
        self._status = status
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckError of this CheckError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CheckError.

        The error code.

        :return: The code of this CheckError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CheckError.

        The error code.

        :param code: The code of this CheckError.
        :type code: str
        """
        allowed_values = ["ERROR_CODE_UNSPECIFIED", "NOT_FOUND", "PERMISSION_DENIED", "RESOURCE_EXHAUSTED", "BUDGET_EXCEEDED", "DENIAL_OF_SERVICE_DETECTED", "LOAD_SHEDDING", "ABUSER_DETECTED", "SERVICE_NOT_ACTIVATED", "VISIBILITY_DENIED", "BILLING_DISABLED", "PROJECT_DELETED", "PROJECT_INVALID", "CONSUMER_INVALID", "IP_ADDRESS_BLOCKED", "REFERER_BLOCKED", "CLIENT_APP_BLOCKED", "API_TARGET_BLOCKED", "API_KEY_INVALID", "API_KEY_EXPIRED", "API_KEY_NOT_FOUND", "SPATULA_HEADER_INVALID", "LOAS_ROLE_INVALID", "NO_LOAS_PROJECT", "LOAS_PROJECT_DISABLED", "SECURITY_POLICY_VIOLATED", "INVALID_CREDENTIAL", "LOCATION_POLICY_VIOLATED", "NAMESPACE_LOOKUP_UNAVAILABLE", "SERVICE_STATUS_UNAVAILABLE", "BILLING_STATUS_UNAVAILABLE", "QUOTA_CHECK_UNAVAILABLE", "LOAS_PROJECT_LOOKUP_UNAVAILABLE", "CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE", "SECURITY_POLICY_BACKEND_UNAVAILABLE", "LOCATION_POLICY_BACKEND_UNAVAILABLE", "INJECTED_ERROR"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def detail(self):
        """Gets the detail of this CheckError.

        Free-form text providing details on the error cause of the error.

        :return: The detail of this CheckError.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this CheckError.

        Free-form text providing details on the error cause of the error.

        :param detail: The detail of this CheckError.
        :type detail: str
        """

        self._detail = detail

    @property
    def status(self):
        """Gets the status of this CheckError.


        :return: The status of this CheckError.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CheckError.


        :param status: The status of this CheckError.
        :type status: Status
        """

        self._status = status

    @property
    def subject(self):
        """Gets the subject of this CheckError.

        Subject to whom this error applies. See the specific code enum for more details on this field. For example: - \"project:\" - \"folder:\" - \"organization:\"

        :return: The subject of this CheckError.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CheckError.

        Subject to whom this error applies. See the specific code enum for more details on this field. For example: - \"project:\" - \"folder:\" - \"organization:\"

        :param subject: The subject of this CheckError.
        :type subject: str
        """

        self._subject = subject
