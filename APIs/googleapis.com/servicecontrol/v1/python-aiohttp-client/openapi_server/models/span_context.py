# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpanContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, span_name: str=None):
        """SpanContext - a model defined in OpenAPI

        :param span_name: The span_name of this SpanContext.
        """
        self.openapi_types = {
            'span_name': str
        }

        self.attribute_map = {
            'span_name': 'spanName'
        }

        self._span_name = span_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpanContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpanContext of this SpanContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def span_name(self):
        """Gets the span_name of this SpanContext.

        The resource name of the span. The format is: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID] `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.

        :return: The span_name of this SpanContext.
        :rtype: str
        """
        return self._span_name

    @span_name.setter
    def span_name(self, span_name):
        """Sets the span_name of this SpanContext.

        The resource name of the span. The format is: projects/[PROJECT_ID_OR_NUMBER]/traces/[TRACE_ID]/spans/[SPAN_ID] `[TRACE_ID]` is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. `[SPAN_ID]` is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.

        :param span_name: The span_name of this SpanContext.
        :type span_name: str
        """

        self._span_name = span_name
