# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permission: str=None, resource_container: str=None, resource_location: str=None, resource_name: str=None):
        """ResourceInfo - a model defined in OpenAPI

        :param permission: The permission of this ResourceInfo.
        :param resource_container: The resource_container of this ResourceInfo.
        :param resource_location: The resource_location of this ResourceInfo.
        :param resource_name: The resource_name of this ResourceInfo.
        """
        self.openapi_types = {
            'permission': str,
            'resource_container': str,
            'resource_location': str,
            'resource_name': str
        }

        self.attribute_map = {
            'permission': 'permission',
            'resource_container': 'resourceContainer',
            'resource_location': 'resourceLocation',
            'resource_name': 'resourceName'
        }

        self._permission = permission
        self._resource_container = resource_container
        self._resource_location = resource_location
        self._resource_name = resource_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceInfo of this ResourceInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permission(self):
        """Gets the permission of this ResourceInfo.

        The resource permission required for this request.

        :return: The permission of this ResourceInfo.
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this ResourceInfo.

        The resource permission required for this request.

        :param permission: The permission of this ResourceInfo.
        :type permission: str
        """

        self._permission = permission

    @property
    def resource_container(self):
        """Gets the resource_container of this ResourceInfo.

        The identifier of the parent of this resource instance. Must be in one of the following formats: - `projects/` - `folders/` - `organizations/`

        :return: The resource_container of this ResourceInfo.
        :rtype: str
        """
        return self._resource_container

    @resource_container.setter
    def resource_container(self, resource_container):
        """Sets the resource_container of this ResourceInfo.

        The identifier of the parent of this resource instance. Must be in one of the following formats: - `projects/` - `folders/` - `organizations/`

        :param resource_container: The resource_container of this ResourceInfo.
        :type resource_container: str
        """

        self._resource_container = resource_container

    @property
    def resource_location(self):
        """Gets the resource_location of this ResourceInfo.

        The location of the resource. If not empty, the resource will be checked against location policy. The value must be a valid zone, region or multiregion. For example: \"europe-west4\" or \"northamerica-northeast1-a\"

        :return: The resource_location of this ResourceInfo.
        :rtype: str
        """
        return self._resource_location

    @resource_location.setter
    def resource_location(self, resource_location):
        """Sets the resource_location of this ResourceInfo.

        The location of the resource. If not empty, the resource will be checked against location policy. The value must be a valid zone, region or multiregion. For example: \"europe-west4\" or \"northamerica-northeast1-a\"

        :param resource_location: The resource_location of this ResourceInfo.
        :type resource_location: str
        """

        self._resource_location = resource_location

    @property
    def resource_name(self):
        """Gets the resource_name of this ResourceInfo.

        Name of the resource. This is used for auditing purposes.

        :return: The resource_name of this ResourceInfo.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """Sets the resource_name of this ResourceInfo.

        Name of the resource. This is used for auditing purposes.

        :param resource_name: The resource_name of this ResourceInfo.
        :type resource_name: str
        """

        self._resource_name = resource_name
