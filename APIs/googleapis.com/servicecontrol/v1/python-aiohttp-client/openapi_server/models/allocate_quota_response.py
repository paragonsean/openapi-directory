# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allocate_info import AllocateInfo
from openapi_server.models.metric_value_set import MetricValueSet
from openapi_server.models.quota_error import QuotaError
from openapi_server import util


class AllocateQuotaResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocate_errors: List[QuotaError]=None, allocate_info: AllocateInfo=None, operation_id: str=None, quota_metrics: List[MetricValueSet]=None, service_config_id: str=None):
        """AllocateQuotaResponse - a model defined in OpenAPI

        :param allocate_errors: The allocate_errors of this AllocateQuotaResponse.
        :param allocate_info: The allocate_info of this AllocateQuotaResponse.
        :param operation_id: The operation_id of this AllocateQuotaResponse.
        :param quota_metrics: The quota_metrics of this AllocateQuotaResponse.
        :param service_config_id: The service_config_id of this AllocateQuotaResponse.
        """
        self.openapi_types = {
            'allocate_errors': List[QuotaError],
            'allocate_info': AllocateInfo,
            'operation_id': str,
            'quota_metrics': List[MetricValueSet],
            'service_config_id': str
        }

        self.attribute_map = {
            'allocate_errors': 'allocateErrors',
            'allocate_info': 'allocateInfo',
            'operation_id': 'operationId',
            'quota_metrics': 'quotaMetrics',
            'service_config_id': 'serviceConfigId'
        }

        self._allocate_errors = allocate_errors
        self._allocate_info = allocate_info
        self._operation_id = operation_id
        self._quota_metrics = quota_metrics
        self._service_config_id = service_config_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AllocateQuotaResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AllocateQuotaResponse of this AllocateQuotaResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocate_errors(self):
        """Gets the allocate_errors of this AllocateQuotaResponse.

        Indicates the decision of the allocate.

        :return: The allocate_errors of this AllocateQuotaResponse.
        :rtype: List[QuotaError]
        """
        return self._allocate_errors

    @allocate_errors.setter
    def allocate_errors(self, allocate_errors):
        """Sets the allocate_errors of this AllocateQuotaResponse.

        Indicates the decision of the allocate.

        :param allocate_errors: The allocate_errors of this AllocateQuotaResponse.
        :type allocate_errors: List[QuotaError]
        """

        self._allocate_errors = allocate_errors

    @property
    def allocate_info(self):
        """Gets the allocate_info of this AllocateQuotaResponse.


        :return: The allocate_info of this AllocateQuotaResponse.
        :rtype: AllocateInfo
        """
        return self._allocate_info

    @allocate_info.setter
    def allocate_info(self, allocate_info):
        """Sets the allocate_info of this AllocateQuotaResponse.


        :param allocate_info: The allocate_info of this AllocateQuotaResponse.
        :type allocate_info: AllocateInfo
        """

        self._allocate_info = allocate_info

    @property
    def operation_id(self):
        """Gets the operation_id of this AllocateQuotaResponse.

        The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.

        :return: The operation_id of this AllocateQuotaResponse.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this AllocateQuotaResponse.

        The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.

        :param operation_id: The operation_id of this AllocateQuotaResponse.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def quota_metrics(self):
        """Gets the quota_metrics of this AllocateQuotaResponse.

        Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. The quota limit reached condition will be specified using the following boolean metric : \"serviceruntime.googleapis.com/quota/exceeded\"

        :return: The quota_metrics of this AllocateQuotaResponse.
        :rtype: List[MetricValueSet]
        """
        return self._quota_metrics

    @quota_metrics.setter
    def quota_metrics(self, quota_metrics):
        """Sets the quota_metrics of this AllocateQuotaResponse.

        Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. The quota limit reached condition will be specified using the following boolean metric : \"serviceruntime.googleapis.com/quota/exceeded\"

        :param quota_metrics: The quota_metrics of this AllocateQuotaResponse.
        :type quota_metrics: List[MetricValueSet]
        """

        self._quota_metrics = quota_metrics

    @property
    def service_config_id(self):
        """Gets the service_config_id of this AllocateQuotaResponse.

        ID of the actual config used to process the request.

        :return: The service_config_id of this AllocateQuotaResponse.
        :rtype: str
        """
        return self._service_config_id

    @service_config_id.setter
    def service_config_id(self, service_config_id):
        """Sets the service_config_id of this AllocateQuotaResponse.

        ID of the actual config used to process the request.

        :param service_config_id: The service_config_id of this AllocateQuotaResponse.
        :type service_config_id: str
        """

        self._service_config_id = service_config_id
