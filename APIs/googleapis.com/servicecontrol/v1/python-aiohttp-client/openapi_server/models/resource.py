# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Resource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, annotations: Dict[str, str]=None, create_time: str=None, delete_time: str=None, display_name: str=None, etag: str=None, labels: Dict[str, str]=None, location: str=None, name: str=None, service: str=None, type: str=None, uid: str=None, update_time: str=None):
        """Resource - a model defined in OpenAPI

        :param annotations: The annotations of this Resource.
        :param create_time: The create_time of this Resource.
        :param delete_time: The delete_time of this Resource.
        :param display_name: The display_name of this Resource.
        :param etag: The etag of this Resource.
        :param labels: The labels of this Resource.
        :param location: The location of this Resource.
        :param name: The name of this Resource.
        :param service: The service of this Resource.
        :param type: The type of this Resource.
        :param uid: The uid of this Resource.
        :param update_time: The update_time of this Resource.
        """
        self.openapi_types = {
            'annotations': Dict[str, str],
            'create_time': str,
            'delete_time': str,
            'display_name': str,
            'etag': str,
            'labels': Dict[str, str],
            'location': str,
            'name': str,
            'service': str,
            'type': str,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'annotations': 'annotations',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'etag': 'etag',
            'labels': 'labels',
            'location': 'location',
            'name': 'name',
            'service': 'service',
            'type': 'type',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._annotations = annotations
        self._create_time = create_time
        self._delete_time = delete_time
        self._display_name = display_name
        self._etag = etag
        self._labels = labels
        self._location = location
        self._name = name
        self._service = service
        self._type = type
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Resource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Resource of this Resource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def annotations(self):
        """Gets the annotations of this Resource.

        Annotations is an unstructured key-value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/

        :return: The annotations of this Resource.
        :rtype: Dict[str, str]
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this Resource.

        Annotations is an unstructured key-value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/

        :param annotations: The annotations of this Resource.
        :type annotations: Dict[str, str]
        """

        self._annotations = annotations

    @property
    def create_time(self):
        """Gets the create_time of this Resource.

        Output only. The timestamp when the resource was created. This may be either the time creation was initiated or when it was completed.

        :return: The create_time of this Resource.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Resource.

        Output only. The timestamp when the resource was created. This may be either the time creation was initiated or when it was completed.

        :param create_time: The create_time of this Resource.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Resource.

        Output only. The timestamp when the resource was deleted. If the resource is not deleted, this must be empty.

        :return: The delete_time of this Resource.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Resource.

        Output only. The timestamp when the resource was deleted. If the resource is not deleted, this must be empty.

        :param delete_time: The delete_time of this Resource.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Resource.

        Mutable. The display name set by clients. Must be <= 63 characters.

        :return: The display_name of this Resource.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Resource.

        Mutable. The display name set by clients. Must be <= 63 characters.

        :param display_name: The display_name of this Resource.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def etag(self):
        """Gets the etag of this Resource.

        Output only. An opaque value that uniquely identifies a version or generation of a resource. It can be used to confirm that the client and server agree on the ordering of a resource being written.

        :return: The etag of this Resource.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Resource.

        Output only. An opaque value that uniquely identifies a version or generation of a resource. It can be used to confirm that the client and server agree on the ordering of a resource being written.

        :param etag: The etag of this Resource.
        :type etag: str
        """

        self._etag = etag

    @property
    def labels(self):
        """Gets the labels of this Resource.

        The labels or tags on the resource, such as AWS resource tags and Kubernetes resource labels.

        :return: The labels of this Resource.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Resource.

        The labels or tags on the resource, such as AWS resource tags and Kubernetes resource labels.

        :param labels: The labels of this Resource.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this Resource.

        Immutable. The location of the resource. The location encoding is specific to the service provider, and new encoding may be introduced as the service evolves. For Google Cloud products, the encoding is what is used by Google Cloud APIs, such as `us-east1`, `aws-us-east-1`, and `azure-eastus2`. The semantics of `location` is identical to the `cloud.googleapis.com/location` label used by some Google Cloud APIs.

        :return: The location of this Resource.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Resource.

        Immutable. The location of the resource. The location encoding is specific to the service provider, and new encoding may be introduced as the service evolves. For Google Cloud products, the encoding is what is used by Google Cloud APIs, such as `us-east1`, `aws-us-east-1`, and `azure-eastus2`. The semantics of `location` is identical to the `cloud.googleapis.com/location` label used by some Google Cloud APIs.

        :param location: The location of this Resource.
        :type location: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this Resource.

        The stable identifier (name) of a resource on the `service`. A resource can be logically identified as \"//{resource.service}/{resource.name}\". The differences between a resource name and a URI are: * Resource name is a logical identifier, independent of network protocol and API version. For example, `//pubsub.googleapis.com/projects/123/topics/news-feed`. * URI often includes protocol and version information, so it can be used directly by applications. For example, `https://pubsub.googleapis.com/v1/projects/123/topics/news-feed`. See https://cloud.google.com/apis/design/resource_names for details.

        :return: The name of this Resource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Resource.

        The stable identifier (name) of a resource on the `service`. A resource can be logically identified as \"//{resource.service}/{resource.name}\". The differences between a resource name and a URI are: * Resource name is a logical identifier, independent of network protocol and API version. For example, `//pubsub.googleapis.com/projects/123/topics/news-feed`. * URI often includes protocol and version information, so it can be used directly by applications. For example, `https://pubsub.googleapis.com/v1/projects/123/topics/news-feed`. See https://cloud.google.com/apis/design/resource_names for details.

        :param name: The name of this Resource.
        :type name: str
        """

        self._name = name

    @property
    def service(self):
        """Gets the service of this Resource.

        The name of the service that this resource belongs to, such as `pubsub.googleapis.com`. The service may be different from the DNS hostname that actually serves the request.

        :return: The service of this Resource.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this Resource.

        The name of the service that this resource belongs to, such as `pubsub.googleapis.com`. The service may be different from the DNS hostname that actually serves the request.

        :param service: The service of this Resource.
        :type service: str
        """

        self._service = service

    @property
    def type(self):
        """Gets the type of this Resource.

        The type of the resource. The syntax is platform-specific because different platforms define their resources differently. For Google APIs, the type format must be \"{service}/{kind}\", such as \"pubsub.googleapis.com/Topic\".

        :return: The type of this Resource.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Resource.

        The type of the resource. The syntax is platform-specific because different platforms define their resources differently. For Google APIs, the type format must be \"{service}/{kind}\", such as \"pubsub.googleapis.com/Topic\".

        :param type: The type of this Resource.
        :type type: str
        """

        self._type = type

    @property
    def uid(self):
        """Gets the uid of this Resource.

        The unique identifier of the resource. UID is unique in the time and space for this resource within the scope of the service. It is typically generated by the server on successful creation of a resource and must not be changed. UID is used to uniquely identify resources with resource name reuses. This should be a UUID4.

        :return: The uid of this Resource.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Resource.

        The unique identifier of the resource. UID is unique in the time and space for this resource within the scope of the service. It is typically generated by the server on successful creation of a resource and must not be changed. UID is used to uniquely identify resources with resource name reuses. This should be a UUID4.

        :param uid: The uid of this Resource.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Resource.

        Output only. The timestamp when the resource was last updated. Any change to the resource made by users must refresh this value. Changes to a resource made by the service should refresh this value.

        :return: The update_time of this Resource.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Resource.

        Output only. The timestamp when the resource was last updated. Any change to the resource made by users must refresh this value. Changes to a resource made by the service should refresh this value.

        :param update_time: The update_time of this Resource.
        :type update_time: str
        """

        self._update_time = update_time
