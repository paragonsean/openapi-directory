# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.violation_info import ViolationInfo
from openapi_server import util


class OrgPolicyViolationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payload: Dict[str, object]=None, resource_tags: Dict[str, str]=None, resource_type: str=None, violation_info: List[ViolationInfo]=None):
        """OrgPolicyViolationInfo - a model defined in OpenAPI

        :param payload: The payload of this OrgPolicyViolationInfo.
        :param resource_tags: The resource_tags of this OrgPolicyViolationInfo.
        :param resource_type: The resource_type of this OrgPolicyViolationInfo.
        :param violation_info: The violation_info of this OrgPolicyViolationInfo.
        """
        self.openapi_types = {
            'payload': Dict[str, object],
            'resource_tags': Dict[str, str],
            'resource_type': str,
            'violation_info': List[ViolationInfo]
        }

        self.attribute_map = {
            'payload': 'payload',
            'resource_tags': 'resourceTags',
            'resource_type': 'resourceType',
            'violation_info': 'violationInfo'
        }

        self._payload = payload
        self._resource_tags = resource_tags
        self._resource_type = resource_type
        self._violation_info = violation_info

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrgPolicyViolationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrgPolicyViolationInfo of this OrgPolicyViolationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payload(self):
        """Gets the payload of this OrgPolicyViolationInfo.

        Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.

        :return: The payload of this OrgPolicyViolationInfo.
        :rtype: Dict[str, object]
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this OrgPolicyViolationInfo.

        Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.

        :param payload: The payload of this OrgPolicyViolationInfo.
        :type payload: Dict[str, object]
        """

        self._payload = payload

    @property
    def resource_tags(self):
        """Gets the resource_tags of this OrgPolicyViolationInfo.

        Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.

        :return: The resource_tags of this OrgPolicyViolationInfo.
        :rtype: Dict[str, str]
        """
        return self._resource_tags

    @resource_tags.setter
    def resource_tags(self, resource_tags):
        """Sets the resource_tags of this OrgPolicyViolationInfo.

        Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.

        :param resource_tags: The resource_tags of this OrgPolicyViolationInfo.
        :type resource_tags: Dict[str, str]
        """

        self._resource_tags = resource_tags

    @property
    def resource_type(self):
        """Gets the resource_type of this OrgPolicyViolationInfo.

        Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket

        :return: The resource_type of this OrgPolicyViolationInfo.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this OrgPolicyViolationInfo.

        Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket

        :param resource_type: The resource_type of this OrgPolicyViolationInfo.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def violation_info(self):
        """Gets the violation_info of this OrgPolicyViolationInfo.

        Optional. Policy violations

        :return: The violation_info of this OrgPolicyViolationInfo.
        :rtype: List[ViolationInfo]
        """
        return self._violation_info

    @violation_info.setter
    def violation_info(self, violation_info):
        """Sets the violation_info of this OrgPolicyViolationInfo.

        Optional. Policy violations

        :param violation_info: The violation_info of this OrgPolicyViolationInfo.
        :type violation_info: List[ViolationInfo]
        """

        self._violation_info = violation_info
