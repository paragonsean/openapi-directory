# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThirdPartyPrincipal(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, third_party_claims: Dict[str, object]=None):
        """ThirdPartyPrincipal - a model defined in OpenAPI

        :param third_party_claims: The third_party_claims of this ThirdPartyPrincipal.
        """
        self.openapi_types = {
            'third_party_claims': Dict[str, object]
        }

        self.attribute_map = {
            'third_party_claims': 'thirdPartyClaims'
        }

        self._third_party_claims = third_party_claims

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThirdPartyPrincipal':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThirdPartyPrincipal of this ThirdPartyPrincipal.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def third_party_claims(self):
        """Gets the third_party_claims of this ThirdPartyPrincipal.

        Metadata about third party identity.

        :return: The third_party_claims of this ThirdPartyPrincipal.
        :rtype: Dict[str, object]
        """
        return self._third_party_claims

    @third_party_claims.setter
    def third_party_claims(self, third_party_claims):
        """Sets the third_party_claims of this ThirdPartyPrincipal.

        Metadata about third party identity.

        :param third_party_claims: The third_party_claims of this ThirdPartyPrincipal.
        :type third_party_claims: Dict[str, object]
        """

        self._third_party_claims = third_party_claims
