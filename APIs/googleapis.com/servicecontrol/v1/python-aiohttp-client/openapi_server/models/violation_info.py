# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ViolationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, checked_value: str=None, constraint: str=None, error_message: str=None, policy_type: str=None):
        """ViolationInfo - a model defined in OpenAPI

        :param checked_value: The checked_value of this ViolationInfo.
        :param constraint: The constraint of this ViolationInfo.
        :param error_message: The error_message of this ViolationInfo.
        :param policy_type: The policy_type of this ViolationInfo.
        """
        self.openapi_types = {
            'checked_value': str,
            'constraint': str,
            'error_message': str,
            'policy_type': str
        }

        self.attribute_map = {
            'checked_value': 'checkedValue',
            'constraint': 'constraint',
            'error_message': 'errorMessage',
            'policy_type': 'policyType'
        }

        self._checked_value = checked_value
        self._constraint = constraint
        self._error_message = error_message
        self._policy_type = policy_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ViolationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ViolationInfo of this ViolationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def checked_value(self):
        """Gets the checked_value of this ViolationInfo.

        Optional. Value that is being checked for the policy. This could be in encrypted form (if pii sensitive). This field will only be emitted in LIST_POLICY types

        :return: The checked_value of this ViolationInfo.
        :rtype: str
        """
        return self._checked_value

    @checked_value.setter
    def checked_value(self, checked_value):
        """Sets the checked_value of this ViolationInfo.

        Optional. Value that is being checked for the policy. This could be in encrypted form (if pii sensitive). This field will only be emitted in LIST_POLICY types

        :param checked_value: The checked_value of this ViolationInfo.
        :type checked_value: str
        """

        self._checked_value = checked_value

    @property
    def constraint(self):
        """Gets the constraint of this ViolationInfo.

        Optional. Constraint name

        :return: The constraint of this ViolationInfo.
        :rtype: str
        """
        return self._constraint

    @constraint.setter
    def constraint(self, constraint):
        """Sets the constraint of this ViolationInfo.

        Optional. Constraint name

        :param constraint: The constraint of this ViolationInfo.
        :type constraint: str
        """

        self._constraint = constraint

    @property
    def error_message(self):
        """Gets the error_message of this ViolationInfo.

        Optional. Error message that policy is indicating.

        :return: The error_message of this ViolationInfo.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ViolationInfo.

        Optional. Error message that policy is indicating.

        :param error_message: The error_message of this ViolationInfo.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def policy_type(self):
        """Gets the policy_type of this ViolationInfo.

        Optional. Indicates the type of the policy.

        :return: The policy_type of this ViolationInfo.
        :rtype: str
        """
        return self._policy_type

    @policy_type.setter
    def policy_type(self, policy_type):
        """Sets the policy_type of this ViolationInfo.

        Optional. Indicates the type of the policy.

        :param policy_type: The policy_type of this ViolationInfo.
        :type policy_type: str
        """
        allowed_values = ["POLICY_TYPE_UNSPECIFIED", "BOOLEAN_CONSTRAINT", "LIST_CONSTRAINT", "CUSTOM_CONSTRAINT"]  # noqa: E501
        if policy_type not in allowed_values:
            raise ValueError(
                "Invalid value for `policy_type` ({0}), must be one of {1}"
                .format(policy_type, allowed_values)
            )

        self._policy_type = policy_type
