# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.log_entry import LogEntry
from openapi_server.models.metric_value_set import MetricValueSet
from openapi_server.models.quota_properties import QuotaProperties
from openapi_server.models.resource_info import ResourceInfo
from openapi_server.models.trace_span import TraceSpan
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_id: str=None, end_time: str=None, importance: str=None, labels: Dict[str, str]=None, log_entries: List[LogEntry]=None, metric_value_sets: List[MetricValueSet]=None, operation_id: str=None, operation_name: str=None, quota_properties: QuotaProperties=None, resources: List[ResourceInfo]=None, start_time: str=None, trace_spans: List[TraceSpan]=None, user_labels: Dict[str, str]=None):
        """Operation - a model defined in OpenAPI

        :param consumer_id: The consumer_id of this Operation.
        :param end_time: The end_time of this Operation.
        :param importance: The importance of this Operation.
        :param labels: The labels of this Operation.
        :param log_entries: The log_entries of this Operation.
        :param metric_value_sets: The metric_value_sets of this Operation.
        :param operation_id: The operation_id of this Operation.
        :param operation_name: The operation_name of this Operation.
        :param quota_properties: The quota_properties of this Operation.
        :param resources: The resources of this Operation.
        :param start_time: The start_time of this Operation.
        :param trace_spans: The trace_spans of this Operation.
        :param user_labels: The user_labels of this Operation.
        """
        self.openapi_types = {
            'consumer_id': str,
            'end_time': str,
            'importance': str,
            'labels': Dict[str, str],
            'log_entries': List[LogEntry],
            'metric_value_sets': List[MetricValueSet],
            'operation_id': str,
            'operation_name': str,
            'quota_properties': QuotaProperties,
            'resources': List[ResourceInfo],
            'start_time': str,
            'trace_spans': List[TraceSpan],
            'user_labels': Dict[str, str]
        }

        self.attribute_map = {
            'consumer_id': 'consumerId',
            'end_time': 'endTime',
            'importance': 'importance',
            'labels': 'labels',
            'log_entries': 'logEntries',
            'metric_value_sets': 'metricValueSets',
            'operation_id': 'operationId',
            'operation_name': 'operationName',
            'quota_properties': 'quotaProperties',
            'resources': 'resources',
            'start_time': 'startTime',
            'trace_spans': 'traceSpans',
            'user_labels': 'userLabels'
        }

        self._consumer_id = consumer_id
        self._end_time = end_time
        self._importance = importance
        self._labels = labels
        self._log_entries = log_entries
        self._metric_value_sets = metric_value_sets
        self._operation_id = operation_id
        self._operation_name = operation_name
        self._quota_properties = quota_properties
        self._resources = resources
        self._start_time = start_time
        self._trace_spans = trace_spans
        self._user_labels = user_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_id(self):
        """Gets the consumer_id of this Operation.

        Identity of the consumer who is using the service. This field should be filled in for the operations initiated by a consumer, but not for service-initiated operations that are not related to a specific consumer. - This can be in one of the following formats: - project:PROJECT_ID, - project`_`number:PROJECT_NUMBER, - projects/PROJECT_ID or PROJECT_NUMBER, - folders/FOLDER_NUMBER, - organizations/ORGANIZATION_NUMBER, - api`_`key:API_KEY.

        :return: The consumer_id of this Operation.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this Operation.

        Identity of the consumer who is using the service. This field should be filled in for the operations initiated by a consumer, but not for service-initiated operations that are not related to a specific consumer. - This can be in one of the following formats: - project:PROJECT_ID, - project`_`number:PROJECT_NUMBER, - projects/PROJECT_ID or PROJECT_NUMBER, - folders/FOLDER_NUMBER, - organizations/ORGANIZATION_NUMBER, - api`_`key:API_KEY.

        :param consumer_id: The consumer_id of this Operation.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def end_time(self):
        """Gets the end_time of this Operation.

        End time of the operation. Required when the operation is used in ServiceController.Report, but optional when the operation is used in ServiceController.Check.

        :return: The end_time of this Operation.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Operation.

        End time of the operation. Required when the operation is used in ServiceController.Report, but optional when the operation is used in ServiceController.Check.

        :param end_time: The end_time of this Operation.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def importance(self):
        """Gets the importance of this Operation.

        DO NOT USE. This is an experimental field.

        :return: The importance of this Operation.
        :rtype: str
        """
        return self._importance

    @importance.setter
    def importance(self, importance):
        """Sets the importance of this Operation.

        DO NOT USE. This is an experimental field.

        :param importance: The importance of this Operation.
        :type importance: str
        """
        allowed_values = ["LOW", "HIGH", "DEBUG", "PROMOTED"]  # noqa: E501
        if importance not in allowed_values:
            raise ValueError(
                "Invalid value for `importance` ({0}), must be one of {1}"
                .format(importance, allowed_values)
            )

        self._importance = importance

    @property
    def labels(self):
        """Gets the labels of this Operation.

        Labels describing the operation. Only the following labels are allowed: - Labels describing monitored resources as defined in the service configuration. - Default labels of metric values. When specified, labels defined in the metric value override these default. - The following labels defined by Google Cloud Platform: - `cloud.googleapis.com/location` describing the location where the operation happened, - `servicecontrol.googleapis.com/user_agent` describing the user agent of the API request, - `servicecontrol.googleapis.com/service_agent` describing the service used to handle the API request (e.g. ESP), - `servicecontrol.googleapis.com/platform` describing the platform where the API is served, such as App Engine, Compute Engine, or Kubernetes Engine.

        :return: The labels of this Operation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Operation.

        Labels describing the operation. Only the following labels are allowed: - Labels describing monitored resources as defined in the service configuration. - Default labels of metric values. When specified, labels defined in the metric value override these default. - The following labels defined by Google Cloud Platform: - `cloud.googleapis.com/location` describing the location where the operation happened, - `servicecontrol.googleapis.com/user_agent` describing the user agent of the API request, - `servicecontrol.googleapis.com/service_agent` describing the service used to handle the API request (e.g. ESP), - `servicecontrol.googleapis.com/platform` describing the platform where the API is served, such as App Engine, Compute Engine, or Kubernetes Engine.

        :param labels: The labels of this Operation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def log_entries(self):
        """Gets the log_entries of this Operation.

        Represents information to be logged.

        :return: The log_entries of this Operation.
        :rtype: List[LogEntry]
        """
        return self._log_entries

    @log_entries.setter
    def log_entries(self, log_entries):
        """Sets the log_entries of this Operation.

        Represents information to be logged.

        :param log_entries: The log_entries of this Operation.
        :type log_entries: List[LogEntry]
        """

        self._log_entries = log_entries

    @property
    def metric_value_sets(self):
        """Gets the metric_value_sets of this Operation.

        Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error.

        :return: The metric_value_sets of this Operation.
        :rtype: List[MetricValueSet]
        """
        return self._metric_value_sets

    @metric_value_sets.setter
    def metric_value_sets(self, metric_value_sets):
        """Sets the metric_value_sets of this Operation.

        Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error.

        :param metric_value_sets: The metric_value_sets of this Operation.
        :type metric_value_sets: List[MetricValueSet]
        """

        self._metric_value_sets = metric_value_sets

    @property
    def operation_id(self):
        """Gets the operation_id of this Operation.

        Identity of the operation. This must be unique within the scope of the service that generated the operation. If the service calls Check() and Report() on the same operation, the two calls should carry the same id. UUID version 4 is recommended, though not required. In scenarios where an operation is computed from existing information and an idempotent id is desirable for deduplication purpose, UUID version 5 is recommended. See RFC 4122 for details.

        :return: The operation_id of this Operation.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this Operation.

        Identity of the operation. This must be unique within the scope of the service that generated the operation. If the service calls Check() and Report() on the same operation, the two calls should carry the same id. UUID version 4 is recommended, though not required. In scenarios where an operation is computed from existing information and an idempotent id is desirable for deduplication purpose, UUID version 5 is recommended. See RFC 4122 for details.

        :param operation_id: The operation_id of this Operation.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def operation_name(self):
        """Gets the operation_name of this Operation.

        Fully qualified name of the operation. Reserved for future use.

        :return: The operation_name of this Operation.
        :rtype: str
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this Operation.

        Fully qualified name of the operation. Reserved for future use.

        :param operation_name: The operation_name of this Operation.
        :type operation_name: str
        """

        self._operation_name = operation_name

    @property
    def quota_properties(self):
        """Gets the quota_properties of this Operation.


        :return: The quota_properties of this Operation.
        :rtype: QuotaProperties
        """
        return self._quota_properties

    @quota_properties.setter
    def quota_properties(self, quota_properties):
        """Sets the quota_properties of this Operation.


        :param quota_properties: The quota_properties of this Operation.
        :type quota_properties: QuotaProperties
        """

        self._quota_properties = quota_properties

    @property
    def resources(self):
        """Gets the resources of this Operation.

        The resources that are involved in the operation. The maximum supported number of entries in this field is 100.

        :return: The resources of this Operation.
        :rtype: List[ResourceInfo]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Operation.

        The resources that are involved in the operation. The maximum supported number of entries in this field is 100.

        :param resources: The resources of this Operation.
        :type resources: List[ResourceInfo]
        """

        self._resources = resources

    @property
    def start_time(self):
        """Gets the start_time of this Operation.

        Required. Start time of the operation.

        :return: The start_time of this Operation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Operation.

        Required. Start time of the operation.

        :param start_time: The start_time of this Operation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def trace_spans(self):
        """Gets the trace_spans of this Operation.

        Unimplemented. A list of Cloud Trace spans. The span names shall contain the id of the destination project which can be either the produce or the consumer project.

        :return: The trace_spans of this Operation.
        :rtype: List[TraceSpan]
        """
        return self._trace_spans

    @trace_spans.setter
    def trace_spans(self, trace_spans):
        """Sets the trace_spans of this Operation.

        Unimplemented. A list of Cloud Trace spans. The span names shall contain the id of the destination project which can be either the produce or the consumer project.

        :param trace_spans: The trace_spans of this Operation.
        :type trace_spans: List[TraceSpan]
        """

        self._trace_spans = trace_spans

    @property
    def user_labels(self):
        """Gets the user_labels of this Operation.

        Private Preview. This feature is only available for approved services. User defined labels for the resource that this operation is associated with.

        :return: The user_labels of this Operation.
        :rtype: Dict[str, str]
        """
        return self._user_labels

    @user_labels.setter
    def user_labels(self, user_labels):
        """Sets the user_labels of this Operation.

        Private Preview. This feature is only available for approved services. User defined labels for the resource that this operation is associated with.

        :param user_labels: The user_labels of this Operation.
        :type user_labels: Dict[str, str]
        """

        self._user_labels = user_labels
