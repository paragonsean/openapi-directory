# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attributes import Attributes
from openapi_server.models.status import Status
from openapi_server.models.truncatable_string import TruncatableString
from openapi_server import util


class TraceSpan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes: Attributes=None, child_span_count: int=None, display_name: TruncatableString=None, end_time: str=None, name: str=None, parent_span_id: str=None, same_process_as_parent_span: bool=None, span_id: str=None, span_kind: str=None, start_time: str=None, status: Status=None):
        """TraceSpan - a model defined in OpenAPI

        :param attributes: The attributes of this TraceSpan.
        :param child_span_count: The child_span_count of this TraceSpan.
        :param display_name: The display_name of this TraceSpan.
        :param end_time: The end_time of this TraceSpan.
        :param name: The name of this TraceSpan.
        :param parent_span_id: The parent_span_id of this TraceSpan.
        :param same_process_as_parent_span: The same_process_as_parent_span of this TraceSpan.
        :param span_id: The span_id of this TraceSpan.
        :param span_kind: The span_kind of this TraceSpan.
        :param start_time: The start_time of this TraceSpan.
        :param status: The status of this TraceSpan.
        """
        self.openapi_types = {
            'attributes': Attributes,
            'child_span_count': int,
            'display_name': TruncatableString,
            'end_time': str,
            'name': str,
            'parent_span_id': str,
            'same_process_as_parent_span': bool,
            'span_id': str,
            'span_kind': str,
            'start_time': str,
            'status': Status
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'child_span_count': 'childSpanCount',
            'display_name': 'displayName',
            'end_time': 'endTime',
            'name': 'name',
            'parent_span_id': 'parentSpanId',
            'same_process_as_parent_span': 'sameProcessAsParentSpan',
            'span_id': 'spanId',
            'span_kind': 'spanKind',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._attributes = attributes
        self._child_span_count = child_span_count
        self._display_name = display_name
        self._end_time = end_time
        self._name = name
        self._parent_span_id = parent_span_id
        self._same_process_as_parent_span = same_process_as_parent_span
        self._span_id = span_id
        self._span_kind = span_kind
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TraceSpan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TraceSpan of this TraceSpan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self):
        """Gets the attributes of this TraceSpan.


        :return: The attributes of this TraceSpan.
        :rtype: Attributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this TraceSpan.


        :param attributes: The attributes of this TraceSpan.
        :type attributes: Attributes
        """

        self._attributes = attributes

    @property
    def child_span_count(self):
        """Gets the child_span_count of this TraceSpan.

        An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.

        :return: The child_span_count of this TraceSpan.
        :rtype: int
        """
        return self._child_span_count

    @child_span_count.setter
    def child_span_count(self, child_span_count):
        """Sets the child_span_count of this TraceSpan.

        An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.

        :param child_span_count: The child_span_count of this TraceSpan.
        :type child_span_count: int
        """

        self._child_span_count = child_span_count

    @property
    def display_name(self):
        """Gets the display_name of this TraceSpan.


        :return: The display_name of this TraceSpan.
        :rtype: TruncatableString
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this TraceSpan.


        :param display_name: The display_name of this TraceSpan.
        :type display_name: TruncatableString
        """

        self._display_name = display_name

    @property
    def end_time(self):
        """Gets the end_time of this TraceSpan.

        The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.

        :return: The end_time of this TraceSpan.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this TraceSpan.

        The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.

        :param end_time: The end_time of this TraceSpan.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def name(self):
        """Gets the name of this TraceSpan.

        The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.

        :return: The name of this TraceSpan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TraceSpan.

        The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.

        :param name: The name of this TraceSpan.
        :type name: str
        """

        self._name = name

    @property
    def parent_span_id(self):
        """Gets the parent_span_id of this TraceSpan.

        The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be empty.

        :return: The parent_span_id of this TraceSpan.
        :rtype: str
        """
        return self._parent_span_id

    @parent_span_id.setter
    def parent_span_id(self, parent_span_id):
        """Sets the parent_span_id of this TraceSpan.

        The [SPAN_ID] of this span's parent span. If this is a root span, then this field must be empty.

        :param parent_span_id: The parent_span_id of this TraceSpan.
        :type parent_span_id: str
        """

        self._parent_span_id = parent_span_id

    @property
    def same_process_as_parent_span(self):
        """Gets the same_process_as_parent_span of this TraceSpan.

        (Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.

        :return: The same_process_as_parent_span of this TraceSpan.
        :rtype: bool
        """
        return self._same_process_as_parent_span

    @same_process_as_parent_span.setter
    def same_process_as_parent_span(self, same_process_as_parent_span):
        """Sets the same_process_as_parent_span of this TraceSpan.

        (Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.

        :param same_process_as_parent_span: The same_process_as_parent_span of this TraceSpan.
        :type same_process_as_parent_span: bool
        """

        self._same_process_as_parent_span = same_process_as_parent_span

    @property
    def span_id(self):
        """Gets the span_id of this TraceSpan.

        The [SPAN_ID] portion of the span's resource name.

        :return: The span_id of this TraceSpan.
        :rtype: str
        """
        return self._span_id

    @span_id.setter
    def span_id(self, span_id):
        """Sets the span_id of this TraceSpan.

        The [SPAN_ID] portion of the span's resource name.

        :param span_id: The span_id of this TraceSpan.
        :type span_id: str
        """

        self._span_id = span_id

    @property
    def span_kind(self):
        """Gets the span_kind of this TraceSpan.

        Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.

        :return: The span_kind of this TraceSpan.
        :rtype: str
        """
        return self._span_kind

    @span_kind.setter
    def span_kind(self, span_kind):
        """Sets the span_kind of this TraceSpan.

        Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using `CLIENT` (caller) and `SERVER` (callee) to identify an RPC call.

        :param span_kind: The span_kind of this TraceSpan.
        :type span_kind: str
        """
        allowed_values = ["SPAN_KIND_UNSPECIFIED", "INTERNAL", "SERVER", "CLIENT", "PRODUCER", "CONSUMER"]  # noqa: E501
        if span_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `span_kind` ({0}), must be one of {1}"
                .format(span_kind, allowed_values)
            )

        self._span_kind = span_kind

    @property
    def start_time(self):
        """Gets the start_time of this TraceSpan.

        The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.

        :return: The start_time of this TraceSpan.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this TraceSpan.

        The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server's application handler starts running.

        :param start_time: The start_time of this TraceSpan.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this TraceSpan.


        :return: The status of this TraceSpan.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TraceSpan.


        :param status: The status of this TraceSpan.
        :type status: Status
        """

        self._status = status
