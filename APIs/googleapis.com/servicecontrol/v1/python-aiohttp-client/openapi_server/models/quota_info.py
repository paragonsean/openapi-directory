# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_value_set import MetricValueSet
from openapi_server import util


class QuotaInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit_exceeded: List[str]=None, quota_consumed: Dict[str, int]=None, quota_metrics: List[MetricValueSet]=None):
        """QuotaInfo - a model defined in OpenAPI

        :param limit_exceeded: The limit_exceeded of this QuotaInfo.
        :param quota_consumed: The quota_consumed of this QuotaInfo.
        :param quota_metrics: The quota_metrics of this QuotaInfo.
        """
        self.openapi_types = {
            'limit_exceeded': List[str],
            'quota_consumed': Dict[str, int],
            'quota_metrics': List[MetricValueSet]
        }

        self.attribute_map = {
            'limit_exceeded': 'limitExceeded',
            'quota_consumed': 'quotaConsumed',
            'quota_metrics': 'quotaMetrics'
        }

        self._limit_exceeded = limit_exceeded
        self._quota_consumed = quota_consumed
        self._quota_metrics = quota_metrics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaInfo of this QuotaInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit_exceeded(self):
        """Gets the limit_exceeded of this QuotaInfo.

        Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota Deprecated: Use quota_metrics to get per quota group limit exceeded status.

        :return: The limit_exceeded of this QuotaInfo.
        :rtype: List[str]
        """
        return self._limit_exceeded

    @limit_exceeded.setter
    def limit_exceeded(self, limit_exceeded):
        """Sets the limit_exceeded of this QuotaInfo.

        Quota Metrics that have exceeded quota limits. For QuotaGroup-based quota, this is QuotaGroup.name For QuotaLimit-based quota, this is QuotaLimit.name See: google.api.Quota Deprecated: Use quota_metrics to get per quota group limit exceeded status.

        :param limit_exceeded: The limit_exceeded of this QuotaInfo.
        :type limit_exceeded: List[str]
        """

        self._limit_exceeded = limit_exceeded

    @property
    def quota_consumed(self):
        """Gets the quota_consumed of this QuotaInfo.

        Map of quota group name to the actual number of tokens consumed. If the quota check was not successful, then this will not be populated due to no quota consumption. We are not merging this field with 'quota_metrics' field because of the complexity of scaling in Chemist client code base. For simplicity, we will keep this field for Castor (that scales quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage). 

        :return: The quota_consumed of this QuotaInfo.
        :rtype: Dict[str, int]
        """
        return self._quota_consumed

    @quota_consumed.setter
    def quota_consumed(self, quota_consumed):
        """Sets the quota_consumed of this QuotaInfo.

        Map of quota group name to the actual number of tokens consumed. If the quota check was not successful, then this will not be populated due to no quota consumption. We are not merging this field with 'quota_metrics' field because of the complexity of scaling in Chemist client code base. For simplicity, we will keep this field for Castor (that scales quota usage) and 'quota_metrics' for SuperQuota (that doesn't scale quota usage). 

        :param quota_consumed: The quota_consumed of this QuotaInfo.
        :type quota_consumed: Dict[str, int]
        """

        self._quota_consumed = quota_consumed

    @property
    def quota_metrics(self):
        """Gets the quota_metrics of this QuotaInfo.

        Quota metrics to indicate the usage. Depending on the check request, one or more of the following metrics will be included: 1. For rate quota, per quota group or per quota metric incremental usage will be specified using the following delta metric: \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. For allocation quota, per quota metric total usage will be specified using the following gauge metric: \"serviceruntime.googleapis.com/allocation/consumer/quota_used_count\" 3. For both rate quota and allocation quota, the quota limit reached condition will be specified using the following boolean metric: \"serviceruntime.googleapis.com/quota/exceeded\"

        :return: The quota_metrics of this QuotaInfo.
        :rtype: List[MetricValueSet]
        """
        return self._quota_metrics

    @quota_metrics.setter
    def quota_metrics(self, quota_metrics):
        """Sets the quota_metrics of this QuotaInfo.

        Quota metrics to indicate the usage. Depending on the check request, one or more of the following metrics will be included: 1. For rate quota, per quota group or per quota metric incremental usage will be specified using the following delta metric: \"serviceruntime.googleapis.com/api/consumer/quota_used_count\" 2. For allocation quota, per quota metric total usage will be specified using the following gauge metric: \"serviceruntime.googleapis.com/allocation/consumer/quota_used_count\" 3. For both rate quota and allocation quota, the quota limit reached condition will be specified using the following boolean metric: \"serviceruntime.googleapis.com/quota/exceeded\"

        :param quota_metrics: The quota_metrics of this QuotaInfo.
        :type quota_metrics: List[MetricValueSet]
        """

        self._quota_metrics = quota_metrics
