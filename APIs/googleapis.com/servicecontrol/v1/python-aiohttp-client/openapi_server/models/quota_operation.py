# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.metric_value_set import MetricValueSet
from openapi_server import util


class QuotaOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_id: str=None, labels: Dict[str, str]=None, method_name: str=None, operation_id: str=None, quota_metrics: List[MetricValueSet]=None, quota_mode: str=None):
        """QuotaOperation - a model defined in OpenAPI

        :param consumer_id: The consumer_id of this QuotaOperation.
        :param labels: The labels of this QuotaOperation.
        :param method_name: The method_name of this QuotaOperation.
        :param operation_id: The operation_id of this QuotaOperation.
        :param quota_metrics: The quota_metrics of this QuotaOperation.
        :param quota_mode: The quota_mode of this QuotaOperation.
        """
        self.openapi_types = {
            'consumer_id': str,
            'labels': Dict[str, str],
            'method_name': str,
            'operation_id': str,
            'quota_metrics': List[MetricValueSet],
            'quota_mode': str
        }

        self.attribute_map = {
            'consumer_id': 'consumerId',
            'labels': 'labels',
            'method_name': 'methodName',
            'operation_id': 'operationId',
            'quota_metrics': 'quotaMetrics',
            'quota_mode': 'quotaMode'
        }

        self._consumer_id = consumer_id
        self._labels = labels
        self._method_name = method_name
        self._operation_id = operation_id
        self._quota_metrics = quota_metrics
        self._quota_mode = quota_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuotaOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QuotaOperation of this QuotaOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_id(self):
        """Gets the consumer_id of this QuotaOperation.

        Identity of the consumer for whom this quota operation is being performed. This can be in one of the following formats: project:, project_number:, api_key:.

        :return: The consumer_id of this QuotaOperation.
        :rtype: str
        """
        return self._consumer_id

    @consumer_id.setter
    def consumer_id(self, consumer_id):
        """Sets the consumer_id of this QuotaOperation.

        Identity of the consumer for whom this quota operation is being performed. This can be in one of the following formats: project:, project_number:, api_key:.

        :param consumer_id: The consumer_id of this QuotaOperation.
        :type consumer_id: str
        """

        self._consumer_id = consumer_id

    @property
    def labels(self):
        """Gets the labels of this QuotaOperation.

        Labels describing the operation.

        :return: The labels of this QuotaOperation.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this QuotaOperation.

        Labels describing the operation.

        :param labels: The labels of this QuotaOperation.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def method_name(self):
        """Gets the method_name of this QuotaOperation.

        Fully qualified name of the API method for which this quota operation is requested. This name is used for matching quota rules or metric rules and billing status rules defined in service configuration. This field should not be set if any of the following is true: (1) the quota operation is performed on non-API resources. (2) quota_metrics is set because the caller is doing quota override. Example of an RPC method name: google.example.library.v1.LibraryService.CreateShelf

        :return: The method_name of this QuotaOperation.
        :rtype: str
        """
        return self._method_name

    @method_name.setter
    def method_name(self, method_name):
        """Sets the method_name of this QuotaOperation.

        Fully qualified name of the API method for which this quota operation is requested. This name is used for matching quota rules or metric rules and billing status rules defined in service configuration. This field should not be set if any of the following is true: (1) the quota operation is performed on non-API resources. (2) quota_metrics is set because the caller is doing quota override. Example of an RPC method name: google.example.library.v1.LibraryService.CreateShelf

        :param method_name: The method_name of this QuotaOperation.
        :type method_name: str
        """

        self._method_name = method_name

    @property
    def operation_id(self):
        """Gets the operation_id of this QuotaOperation.

        Identity of the operation. For Allocation Quota, this is expected to be unique within the scope of the service that generated the operation, and guarantees idempotency in case of retries. In order to ensure best performance and latency in the Quota backends, operation_ids are optimally associated with time, so that related operations can be accessed fast in storage. For this reason, the recommended token for services that intend to operate at a high QPS is Unix time in nanos + UUID

        :return: The operation_id of this QuotaOperation.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this QuotaOperation.

        Identity of the operation. For Allocation Quota, this is expected to be unique within the scope of the service that generated the operation, and guarantees idempotency in case of retries. In order to ensure best performance and latency in the Quota backends, operation_ids are optimally associated with time, so that related operations can be accessed fast in storage. For this reason, the recommended token for services that intend to operate at a high QPS is Unix time in nanos + UUID

        :param operation_id: The operation_id of this QuotaOperation.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def quota_metrics(self):
        """Gets the quota_metrics of this QuotaOperation.

        Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error. This field is mutually exclusive with method_name.

        :return: The quota_metrics of this QuotaOperation.
        :rtype: List[MetricValueSet]
        """
        return self._quota_metrics

    @quota_metrics.setter
    def quota_metrics(self, quota_metrics):
        """Sets the quota_metrics of this QuotaOperation.

        Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error. This field is mutually exclusive with method_name.

        :param quota_metrics: The quota_metrics of this QuotaOperation.
        :type quota_metrics: List[MetricValueSet]
        """

        self._quota_metrics = quota_metrics

    @property
    def quota_mode(self):
        """Gets the quota_mode of this QuotaOperation.

        Quota mode for this operation.

        :return: The quota_mode of this QuotaOperation.
        :rtype: str
        """
        return self._quota_mode

    @quota_mode.setter
    def quota_mode(self, quota_mode):
        """Sets the quota_mode of this QuotaOperation.

        Quota mode for this operation.

        :param quota_mode: The quota_mode of this QuotaOperation.
        :type quota_mode: str
        """
        allowed_values = ["UNSPECIFIED", "NORMAL", "BEST_EFFORT", "CHECK_ONLY", "ADJUST_ONLY"]  # noqa: E501
        if quota_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `quota_mode` ({0}), must be one of {1}"
                .format(quota_mode, allowed_values)
            )

        self._quota_mode = quota_mode
