# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth import Auth
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth: Auth=None, headers: Dict[str, str]=None, host: str=None, id: str=None, method: str=None, path: str=None, protocol: str=None, query: str=None, reason: str=None, scheme: str=None, size: str=None, time: str=None):
        """Request - a model defined in OpenAPI

        :param auth: The auth of this Request.
        :param headers: The headers of this Request.
        :param host: The host of this Request.
        :param id: The id of this Request.
        :param method: The method of this Request.
        :param path: The path of this Request.
        :param protocol: The protocol of this Request.
        :param query: The query of this Request.
        :param reason: The reason of this Request.
        :param scheme: The scheme of this Request.
        :param size: The size of this Request.
        :param time: The time of this Request.
        """
        self.openapi_types = {
            'auth': Auth,
            'headers': Dict[str, str],
            'host': str,
            'id': str,
            'method': str,
            'path': str,
            'protocol': str,
            'query': str,
            'reason': str,
            'scheme': str,
            'size': str,
            'time': str
        }

        self.attribute_map = {
            'auth': 'auth',
            'headers': 'headers',
            'host': 'host',
            'id': 'id',
            'method': 'method',
            'path': 'path',
            'protocol': 'protocol',
            'query': 'query',
            'reason': 'reason',
            'scheme': 'scheme',
            'size': 'size',
            'time': 'time'
        }

        self._auth = auth
        self._headers = headers
        self._host = host
        self._id = id
        self._method = method
        self._path = path
        self._protocol = protocol
        self._query = query
        self._reason = reason
        self._scheme = scheme
        self._size = size
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth(self):
        """Gets the auth of this Request.


        :return: The auth of this Request.
        :rtype: Auth
        """
        return self._auth

    @auth.setter
    def auth(self, auth):
        """Sets the auth of this Request.


        :param auth: The auth of this Request.
        :type auth: Auth
        """

        self._auth = auth

    @property
    def headers(self):
        """Gets the headers of this Request.

        The HTTP request headers. If multiple headers share the same key, they must be merged according to the HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.

        :return: The headers of this Request.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Request.

        The HTTP request headers. If multiple headers share the same key, they must be merged according to the HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.

        :param headers: The headers of this Request.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def host(self):
        """Gets the host of this Request.

        The HTTP request `Host` header value.

        :return: The host of this Request.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Request.

        The HTTP request `Host` header value.

        :param host: The host of this Request.
        :type host: str
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this Request.

        The unique ID for a request, which can be propagated to downstream systems. The ID should have low probability of collision within a single day for a specific service.

        :return: The id of this Request.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Request.

        The unique ID for a request, which can be propagated to downstream systems. The ID should have low probability of collision within a single day for a specific service.

        :param id: The id of this Request.
        :type id: str
        """

        self._id = id

    @property
    def method(self):
        """Gets the method of this Request.

        The HTTP request method, such as `GET`, `POST`.

        :return: The method of this Request.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Request.

        The HTTP request method, such as `GET`, `POST`.

        :param method: The method of this Request.
        :type method: str
        """

        self._method = method

    @property
    def path(self):
        """Gets the path of this Request.

        The HTTP URL path, excluding the query parameters.

        :return: The path of this Request.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Request.

        The HTTP URL path, excluding the query parameters.

        :param path: The path of this Request.
        :type path: str
        """

        self._path = path

    @property
    def protocol(self):
        """Gets the protocol of this Request.

        The network protocol used with the request, such as \"http/1.1\", \"spdy/3\", \"h2\", \"h2c\", \"webrtc\", \"tcp\", \"udp\", \"quic\". See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for details.

        :return: The protocol of this Request.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this Request.

        The network protocol used with the request, such as \"http/1.1\", \"spdy/3\", \"h2\", \"h2c\", \"webrtc\", \"tcp\", \"udp\", \"quic\". See https://www.iana.org/assignments/tls-extensiontype-values/tls-extensiontype-values.xhtml#alpn-protocol-ids for details.

        :param protocol: The protocol of this Request.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def query(self):
        """Gets the query of this Request.

        The HTTP URL query in the format of `name1=value1&name2=value2`, as it appears in the first line of the HTTP request. No decoding is performed.

        :return: The query of this Request.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this Request.

        The HTTP URL query in the format of `name1=value1&name2=value2`, as it appears in the first line of the HTTP request. No decoding is performed.

        :param query: The query of this Request.
        :type query: str
        """

        self._query = query

    @property
    def reason(self):
        """Gets the reason of this Request.

        A special parameter for request reason. It is used by security systems to associate auditing information with a request.

        :return: The reason of this Request.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this Request.

        A special parameter for request reason. It is used by security systems to associate auditing information with a request.

        :param reason: The reason of this Request.
        :type reason: str
        """

        self._reason = reason

    @property
    def scheme(self):
        """Gets the scheme of this Request.

        The HTTP URL scheme, such as `http` and `https`.

        :return: The scheme of this Request.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this Request.

        The HTTP URL scheme, such as `http` and `https`.

        :param scheme: The scheme of this Request.
        :type scheme: str
        """

        self._scheme = scheme

    @property
    def size(self):
        """Gets the size of this Request.

        The HTTP request size in bytes. If unknown, it must be -1.

        :return: The size of this Request.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Request.

        The HTTP request size in bytes. If unknown, it must be -1.

        :param size: The size of this Request.
        :type size: str
        """

        self._size = size

    @property
    def time(self):
        """Gets the time of this Request.

        The timestamp when the `destination` service receives the last byte of the request.

        :return: The time of this Request.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Request.

        The timestamp when the `destination` service receives the last byte of the request.

        :param time: The time of this Request.
        :type time: str
        """

        self._time = time
