# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.consumer_info import ConsumerInfo
from openapi_server import util


class CheckInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_uid: str=None, consumer_info: ConsumerInfo=None, unused_arguments: List[str]=None):
        """CheckInfo - a model defined in OpenAPI

        :param api_key_uid: The api_key_uid of this CheckInfo.
        :param consumer_info: The consumer_info of this CheckInfo.
        :param unused_arguments: The unused_arguments of this CheckInfo.
        """
        self.openapi_types = {
            'api_key_uid': str,
            'consumer_info': ConsumerInfo,
            'unused_arguments': List[str]
        }

        self.attribute_map = {
            'api_key_uid': 'apiKeyUid',
            'consumer_info': 'consumerInfo',
            'unused_arguments': 'unusedArguments'
        }

        self._api_key_uid = api_key_uid
        self._consumer_info = consumer_info
        self._unused_arguments = unused_arguments

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckInfo of this CheckInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_uid(self):
        """Gets the api_key_uid of this CheckInfo.

        The unique id of the api key in the format of \"apikey:\". This field will be populated when the consumer passed to Chemist is an API key and all the API key related validations are successful.

        :return: The api_key_uid of this CheckInfo.
        :rtype: str
        """
        return self._api_key_uid

    @api_key_uid.setter
    def api_key_uid(self, api_key_uid):
        """Sets the api_key_uid of this CheckInfo.

        The unique id of the api key in the format of \"apikey:\". This field will be populated when the consumer passed to Chemist is an API key and all the API key related validations are successful.

        :param api_key_uid: The api_key_uid of this CheckInfo.
        :type api_key_uid: str
        """

        self._api_key_uid = api_key_uid

    @property
    def consumer_info(self):
        """Gets the consumer_info of this CheckInfo.


        :return: The consumer_info of this CheckInfo.
        :rtype: ConsumerInfo
        """
        return self._consumer_info

    @consumer_info.setter
    def consumer_info(self, consumer_info):
        """Sets the consumer_info of this CheckInfo.


        :param consumer_info: The consumer_info of this CheckInfo.
        :type consumer_info: ConsumerInfo
        """

        self._consumer_info = consumer_info

    @property
    def unused_arguments(self):
        """Gets the unused_arguments of this CheckInfo.

        A list of fields and label keys that are ignored by the server. The client doesn't need to send them for following requests to improve performance and allow better aggregation.

        :return: The unused_arguments of this CheckInfo.
        :rtype: List[str]
        """
        return self._unused_arguments

    @unused_arguments.setter
    def unused_arguments(self, unused_arguments):
        """Sets the unused_arguments of this CheckInfo.

        A list of fields and label keys that are ignored by the server. The client doesn't need to send them for following requests to improve performance and allow better aggregation.

        :param unused_arguments: The unused_arguments of this CheckInfo.
        :type unused_arguments: List[str]
        """

        self._unused_arguments = unused_arguments
