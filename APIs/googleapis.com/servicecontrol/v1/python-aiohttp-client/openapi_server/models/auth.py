# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Auth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_levels: List[str]=None, audiences: List[str]=None, claims: Dict[str, object]=None, presenter: str=None, principal: str=None):
        """Auth - a model defined in OpenAPI

        :param access_levels: The access_levels of this Auth.
        :param audiences: The audiences of this Auth.
        :param claims: The claims of this Auth.
        :param presenter: The presenter of this Auth.
        :param principal: The principal of this Auth.
        """
        self.openapi_types = {
            'access_levels': List[str],
            'audiences': List[str],
            'claims': Dict[str, object],
            'presenter': str,
            'principal': str
        }

        self.attribute_map = {
            'access_levels': 'accessLevels',
            'audiences': 'audiences',
            'claims': 'claims',
            'presenter': 'presenter',
            'principal': 'principal'
        }

        self._access_levels = access_levels
        self._audiences = audiences
        self._claims = claims
        self._presenter = presenter
        self._principal = principal

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Auth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Auth of this Auth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_levels(self):
        """Gets the access_levels of this Auth.

        A list of access level resource names that allow resources to be accessed by authenticated requester. It is part of Secure GCP processing for the incoming request. An access level string has the format: \"//{api_service_name}/accessPolicies/{policy_id}/accessLevels/{short_name}\" Example: \"//accesscontextmanager.googleapis.com/accessPolicies/MY_POLICY_ID/accessLevels/MY_LEVEL\"

        :return: The access_levels of this Auth.
        :rtype: List[str]
        """
        return self._access_levels

    @access_levels.setter
    def access_levels(self, access_levels):
        """Sets the access_levels of this Auth.

        A list of access level resource names that allow resources to be accessed by authenticated requester. It is part of Secure GCP processing for the incoming request. An access level string has the format: \"//{api_service_name}/accessPolicies/{policy_id}/accessLevels/{short_name}\" Example: \"//accesscontextmanager.googleapis.com/accessPolicies/MY_POLICY_ID/accessLevels/MY_LEVEL\"

        :param access_levels: The access_levels of this Auth.
        :type access_levels: List[str]
        """

        self._access_levels = access_levels

    @property
    def audiences(self):
        """Gets the audiences of this Auth.

        The intended audience(s) for this authentication information. Reflects the audience (`aud`) claim within a JWT. The audience value(s) depends on the `issuer`, but typically include one or more of the following pieces of information: * The services intended to receive the credential. For example, [\"https://pubsub.googleapis.com/\", \"https://storage.googleapis.com/\"]. * A set of service-based scopes. For example, [\"https://www.googleapis.com/auth/cloud-platform\"]. * The client id of an app, such as the Firebase project id for JWTs from Firebase Auth. Consult the documentation for the credential issuer to determine the information provided.

        :return: The audiences of this Auth.
        :rtype: List[str]
        """
        return self._audiences

    @audiences.setter
    def audiences(self, audiences):
        """Sets the audiences of this Auth.

        The intended audience(s) for this authentication information. Reflects the audience (`aud`) claim within a JWT. The audience value(s) depends on the `issuer`, but typically include one or more of the following pieces of information: * The services intended to receive the credential. For example, [\"https://pubsub.googleapis.com/\", \"https://storage.googleapis.com/\"]. * A set of service-based scopes. For example, [\"https://www.googleapis.com/auth/cloud-platform\"]. * The client id of an app, such as the Firebase project id for JWTs from Firebase Auth. Consult the documentation for the credential issuer to determine the information provided.

        :param audiences: The audiences of this Auth.
        :type audiences: List[str]
        """

        self._audiences = audiences

    @property
    def claims(self):
        """Gets the claims of this Auth.

        Structured claims presented with the credential. JWTs include `{key: value}` pairs for standard and private claims. The following is a subset of the standard required and optional claims that would typically be presented for a Google-based JWT: {'iss': 'accounts.google.com', 'sub': '113289723416554971153', 'aud': ['123456789012', 'pubsub.googleapis.com'], 'azp': '123456789012.apps.googleusercontent.com', 'email': 'jsmith@example.com', 'iat': 1353601026, 'exp': 1353604926} SAML assertions are similarly specified, but with an identity provider dependent structure.

        :return: The claims of this Auth.
        :rtype: Dict[str, object]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this Auth.

        Structured claims presented with the credential. JWTs include `{key: value}` pairs for standard and private claims. The following is a subset of the standard required and optional claims that would typically be presented for a Google-based JWT: {'iss': 'accounts.google.com', 'sub': '113289723416554971153', 'aud': ['123456789012', 'pubsub.googleapis.com'], 'azp': '123456789012.apps.googleusercontent.com', 'email': 'jsmith@example.com', 'iat': 1353601026, 'exp': 1353604926} SAML assertions are similarly specified, but with an identity provider dependent structure.

        :param claims: The claims of this Auth.
        :type claims: Dict[str, object]
        """

        self._claims = claims

    @property
    def presenter(self):
        """Gets the presenter of this Auth.

        The authorized presenter of the credential. Reflects the optional Authorized Presenter (`azp`) claim within a JWT or the OAuth client id. For example, a Google Cloud Platform client id looks as follows: \"123456789012.apps.googleusercontent.com\".

        :return: The presenter of this Auth.
        :rtype: str
        """
        return self._presenter

    @presenter.setter
    def presenter(self, presenter):
        """Sets the presenter of this Auth.

        The authorized presenter of the credential. Reflects the optional Authorized Presenter (`azp`) claim within a JWT or the OAuth client id. For example, a Google Cloud Platform client id looks as follows: \"123456789012.apps.googleusercontent.com\".

        :param presenter: The presenter of this Auth.
        :type presenter: str
        """

        self._presenter = presenter

    @property
    def principal(self):
        """Gets the principal of this Auth.

        The authenticated principal. Reflects the issuer (`iss`) and subject (`sub`) claims within a JWT. The issuer and subject should be `/` delimited, with `/` percent-encoded within the subject fragment. For Google accounts, the principal format is: \"https://accounts.google.com/{id}\"

        :return: The principal of this Auth.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Auth.

        The authenticated principal. Reflects the issuer (`iss`) and subject (`sub`) claims within a JWT. The issuer and subject should be `/` delimited, with `/` percent-encoded within the subject fragment. For Google accounts, the principal format is: \"https://accounts.google.com/{id}\"

        :param principal: The principal of this Auth.
        :type principal: str
        """

        self._principal = principal
