# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, job_metadata: Dict[str, object]=None, principal_subject: str=None, service_domain: str=None):
        """ServiceMetadata - a model defined in OpenAPI

        :param job_metadata: The job_metadata of this ServiceMetadata.
        :param principal_subject: The principal_subject of this ServiceMetadata.
        :param service_domain: The service_domain of this ServiceMetadata.
        """
        self.openapi_types = {
            'job_metadata': Dict[str, object],
            'principal_subject': str,
            'service_domain': str
        }

        self.attribute_map = {
            'job_metadata': 'jobMetadata',
            'principal_subject': 'principalSubject',
            'service_domain': 'serviceDomain'
        }

        self._job_metadata = job_metadata
        self._principal_subject = principal_subject
        self._service_domain = service_domain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMetadata of this ServiceMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def job_metadata(self):
        """Gets the job_metadata of this ServiceMetadata.

        Additional metadata provided by service teams to describe service specific job information that was triggered by the original principal.

        :return: The job_metadata of this ServiceMetadata.
        :rtype: Dict[str, object]
        """
        return self._job_metadata

    @job_metadata.setter
    def job_metadata(self, job_metadata):
        """Sets the job_metadata of this ServiceMetadata.

        Additional metadata provided by service teams to describe service specific job information that was triggered by the original principal.

        :param job_metadata: The job_metadata of this ServiceMetadata.
        :type job_metadata: Dict[str, object]
        """

        self._job_metadata = job_metadata

    @property
    def principal_subject(self):
        """Gets the principal_subject of this ServiceMetadata.

        A string representing the principal_subject associated with the identity. For most identities, the format will be `principal://iam.googleapis.com/{identity pool name}/subject/{subject)` except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format `serviceAccount:{identity pool name}[{subject}]` If the identity is a Google account (e.g. workspace user account or service account), this will be the email of the prefixed by `serviceAccount:`. For example: `serviceAccount:my-service-account@project-1.iam.gserviceaccount.com`. If the identity is an individual user, the identity will be formatted as: `user:user_ABC@email.com`.

        :return: The principal_subject of this ServiceMetadata.
        :rtype: str
        """
        return self._principal_subject

    @principal_subject.setter
    def principal_subject(self, principal_subject):
        """Sets the principal_subject of this ServiceMetadata.

        A string representing the principal_subject associated with the identity. For most identities, the format will be `principal://iam.googleapis.com/{identity pool name}/subject/{subject)` except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format `serviceAccount:{identity pool name}[{subject}]` If the identity is a Google account (e.g. workspace user account or service account), this will be the email of the prefixed by `serviceAccount:`. For example: `serviceAccount:my-service-account@project-1.iam.gserviceaccount.com`. If the identity is an individual user, the identity will be formatted as: `user:user_ABC@email.com`.

        :param principal_subject: The principal_subject of this ServiceMetadata.
        :type principal_subject: str
        """

        self._principal_subject = principal_subject

    @property
    def service_domain(self):
        """Gets the service_domain of this ServiceMetadata.

        The service's fully qualified domain name, e.g. \"dataproc.googleapis.com\".

        :return: The service_domain of this ServiceMetadata.
        :rtype: str
        """
        return self._service_domain

    @service_domain.setter
    def service_domain(self, service_domain):
        """Sets the service_domain of this ServiceMetadata.

        The service's fully qualified domain name, e.g. \"dataproc.googleapis.com\".

        :param service_domain: The service_domain of this ServiceMetadata.
        :type service_domain: str
        """

        self._service_domain = service_domain
