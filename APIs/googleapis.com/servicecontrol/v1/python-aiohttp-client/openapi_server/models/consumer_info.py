# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsumerInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_number: str=None, project_number: str=None, type: str=None):
        """ConsumerInfo - a model defined in OpenAPI

        :param consumer_number: The consumer_number of this ConsumerInfo.
        :param project_number: The project_number of this ConsumerInfo.
        :param type: The type of this ConsumerInfo.
        """
        self.openapi_types = {
            'consumer_number': str,
            'project_number': str,
            'type': str
        }

        self.attribute_map = {
            'consumer_number': 'consumerNumber',
            'project_number': 'projectNumber',
            'type': 'type'
        }

        self._consumer_number = consumer_number
        self._project_number = project_number
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerInfo of this ConsumerInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_number(self):
        """Gets the consumer_number of this ConsumerInfo.

        The consumer identity number, can be Google cloud project number, folder number or organization number e.g. 1234567890. A value of 0 indicates no consumer number is found.

        :return: The consumer_number of this ConsumerInfo.
        :rtype: str
        """
        return self._consumer_number

    @consumer_number.setter
    def consumer_number(self, consumer_number):
        """Sets the consumer_number of this ConsumerInfo.

        The consumer identity number, can be Google cloud project number, folder number or organization number e.g. 1234567890. A value of 0 indicates no consumer number is found.

        :param consumer_number: The consumer_number of this ConsumerInfo.
        :type consumer_number: str
        """

        self._consumer_number = consumer_number

    @property
    def project_number(self):
        """Gets the project_number of this ConsumerInfo.

        The Google cloud project number, e.g. 1234567890. A value of 0 indicates no project number is found. NOTE: This field is deprecated after Chemist support flexible consumer id. New code should not depend on this field anymore.

        :return: The project_number of this ConsumerInfo.
        :rtype: str
        """
        return self._project_number

    @project_number.setter
    def project_number(self, project_number):
        """Sets the project_number of this ConsumerInfo.

        The Google cloud project number, e.g. 1234567890. A value of 0 indicates no project number is found. NOTE: This field is deprecated after Chemist support flexible consumer id. New code should not depend on this field anymore.

        :param project_number: The project_number of this ConsumerInfo.
        :type project_number: str
        """

        self._project_number = project_number

    @property
    def type(self):
        """Gets the type of this ConsumerInfo.

        The type of the consumer which should have been defined in [Google Resource Manager](https://cloud.google.com/resource-manager/).

        :return: The type of this ConsumerInfo.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConsumerInfo.

        The type of the consumer which should have been defined in [Google Resource Manager](https://cloud.google.com/resource-manager/).

        :param type: The type of this ConsumerInfo.
        :type type: str
        """
        allowed_values = ["CONSUMER_TYPE_UNSPECIFIED", "PROJECT", "FOLDER", "ORGANIZATION", "SERVICE_SPECIFIC"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
