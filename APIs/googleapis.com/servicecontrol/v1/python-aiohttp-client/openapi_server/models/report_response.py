# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.report_error import ReportError
from openapi_server import util


class ReportResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, report_errors: List[ReportError]=None, service_config_id: str=None, service_rollout_id: str=None):
        """ReportResponse - a model defined in OpenAPI

        :param report_errors: The report_errors of this ReportResponse.
        :param service_config_id: The service_config_id of this ReportResponse.
        :param service_rollout_id: The service_rollout_id of this ReportResponse.
        """
        self.openapi_types = {
            'report_errors': List[ReportError],
            'service_config_id': str,
            'service_rollout_id': str
        }

        self.attribute_map = {
            'report_errors': 'reportErrors',
            'service_config_id': 'serviceConfigId',
            'service_rollout_id': 'serviceRolloutId'
        }

        self._report_errors = report_errors
        self._service_config_id = service_config_id
        self._service_rollout_id = service_rollout_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReportResponse of this ReportResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def report_errors(self):
        """Gets the report_errors of this ReportResponse.

        Partial failures, one for each `Operation` in the request that failed processing. There are three possible combinations of the RPC status: 1. The combination of a successful RPC status and an empty `report_errors` list indicates a complete success where all `Operations` in the request are processed successfully. 2. The combination of a successful RPC status and a non-empty `report_errors` list indicates a partial success where some `Operations` in the request succeeded. Each `Operation` that failed processing has a corresponding item in this list. 3. A failed RPC status indicates a general non-deterministic failure. When this happens, it's impossible to know which of the 'Operations' in the request succeeded or failed.

        :return: The report_errors of this ReportResponse.
        :rtype: List[ReportError]
        """
        return self._report_errors

    @report_errors.setter
    def report_errors(self, report_errors):
        """Sets the report_errors of this ReportResponse.

        Partial failures, one for each `Operation` in the request that failed processing. There are three possible combinations of the RPC status: 1. The combination of a successful RPC status and an empty `report_errors` list indicates a complete success where all `Operations` in the request are processed successfully. 2. The combination of a successful RPC status and a non-empty `report_errors` list indicates a partial success where some `Operations` in the request succeeded. Each `Operation` that failed processing has a corresponding item in this list. 3. A failed RPC status indicates a general non-deterministic failure. When this happens, it's impossible to know which of the 'Operations' in the request succeeded or failed.

        :param report_errors: The report_errors of this ReportResponse.
        :type report_errors: List[ReportError]
        """

        self._report_errors = report_errors

    @property
    def service_config_id(self):
        """Gets the service_config_id of this ReportResponse.

        The actual config id used to process the request.

        :return: The service_config_id of this ReportResponse.
        :rtype: str
        """
        return self._service_config_id

    @service_config_id.setter
    def service_config_id(self, service_config_id):
        """Sets the service_config_id of this ReportResponse.

        The actual config id used to process the request.

        :param service_config_id: The service_config_id of this ReportResponse.
        :type service_config_id: str
        """

        self._service_config_id = service_config_id

    @property
    def service_rollout_id(self):
        """Gets the service_rollout_id of this ReportResponse.

        The current service rollout id used to process the request.

        :return: The service_rollout_id of this ReportResponse.
        :rtype: str
        """
        return self._service_rollout_id

    @service_rollout_id.setter
    def service_rollout_id(self, service_rollout_id):
        """Sets the service_rollout_id of this ReportResponse.

        The current service rollout id used to process the request.

        :param service_rollout_id: The service_rollout_id of this ReportResponse.
        :type service_rollout_id: str
        """

        self._service_rollout_id = service_rollout_id
