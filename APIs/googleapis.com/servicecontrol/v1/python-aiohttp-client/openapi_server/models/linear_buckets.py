# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LinearBuckets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, num_finite_buckets: int=None, offset: float=None, width: float=None):
        """LinearBuckets - a model defined in OpenAPI

        :param num_finite_buckets: The num_finite_buckets of this LinearBuckets.
        :param offset: The offset of this LinearBuckets.
        :param width: The width of this LinearBuckets.
        """
        self.openapi_types = {
            'num_finite_buckets': int,
            'offset': float,
            'width': float
        }

        self.attribute_map = {
            'num_finite_buckets': 'numFiniteBuckets',
            'offset': 'offset',
            'width': 'width'
        }

        self._num_finite_buckets = num_finite_buckets
        self._offset = offset
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LinearBuckets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LinearBuckets of this LinearBuckets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def num_finite_buckets(self):
        """Gets the num_finite_buckets of this LinearBuckets.

        The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.

        :return: The num_finite_buckets of this LinearBuckets.
        :rtype: int
        """
        return self._num_finite_buckets

    @num_finite_buckets.setter
    def num_finite_buckets(self, num_finite_buckets):
        """Sets the num_finite_buckets of this LinearBuckets.

        The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is `num_finite_buckets` + 2. See comments on `bucket_options` for details.

        :param num_finite_buckets: The num_finite_buckets of this LinearBuckets.
        :type num_finite_buckets: int
        """

        self._num_finite_buckets = num_finite_buckets

    @property
    def offset(self):
        """Gets the offset of this LinearBuckets.

        The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive.

        :return: The offset of this LinearBuckets.
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this LinearBuckets.

        The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive.

        :param offset: The offset of this LinearBuckets.
        :type offset: float
        """

        self._offset = offset

    @property
    def width(self):
        """Gets the width of this LinearBuckets.

        The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive. Must be strictly positive.

        :return: The width of this LinearBuckets.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this LinearBuckets.

        The i'th linear bucket covers the interval [offset + (i-1) * width, offset + i * width) where i ranges from 1 to num_finite_buckets, inclusive. Must be strictly positive.

        :param width: The width of this LinearBuckets.
        :type width: float
        """

        self._width = width
