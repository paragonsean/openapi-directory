/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a resource associated with this operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceInfo {
  public static final String SERIALIZED_NAME_PERMISSION = "permission";
  @SerializedName(SERIALIZED_NAME_PERMISSION)
  private String permission;

  public static final String SERIALIZED_NAME_RESOURCE_CONTAINER = "resourceContainer";
  @SerializedName(SERIALIZED_NAME_RESOURCE_CONTAINER)
  private String resourceContainer;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private String resourceLocation;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public ResourceInfo() {
  }

  public ResourceInfo permission(String permission) {
    this.permission = permission;
    return this;
  }

  /**
   * The resource permission required for this request.
   * @return permission
   */
  @javax.annotation.Nullable
  public String getPermission() {
    return permission;
  }

  public void setPermission(String permission) {
    this.permission = permission;
  }


  public ResourceInfo resourceContainer(String resourceContainer) {
    this.resourceContainer = resourceContainer;
    return this;
  }

  /**
   * The identifier of the parent of this resource instance. Must be in one of the following formats: - &#x60;projects/&#x60; - &#x60;folders/&#x60; - &#x60;organizations/&#x60;
   * @return resourceContainer
   */
  @javax.annotation.Nullable
  public String getResourceContainer() {
    return resourceContainer;
  }

  public void setResourceContainer(String resourceContainer) {
    this.resourceContainer = resourceContainer;
  }


  public ResourceInfo resourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
    return this;
  }

  /**
   * The location of the resource. If not empty, the resource will be checked against location policy. The value must be a valid zone, region or multiregion. For example: \&quot;europe-west4\&quot; or \&quot;northamerica-northeast1-a\&quot;
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public String getResourceLocation() {
    return resourceLocation;
  }

  public void setResourceLocation(String resourceLocation) {
    this.resourceLocation = resourceLocation;
  }


  public ResourceInfo resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * Name of the resource. This is used for auditing purposes.
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceInfo resourceInfo = (ResourceInfo) o;
    return Objects.equals(this.permission, resourceInfo.permission) &&
        Objects.equals(this.resourceContainer, resourceInfo.resourceContainer) &&
        Objects.equals(this.resourceLocation, resourceInfo.resourceLocation) &&
        Objects.equals(this.resourceName, resourceInfo.resourceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(permission, resourceContainer, resourceLocation, resourceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceInfo {\n");
    sb.append("    permission: ").append(toIndentedString(permission)).append("\n");
    sb.append("    resourceContainer: ").append(toIndentedString(resourceContainer)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("permission");
    openapiFields.add("resourceContainer");
    openapiFields.add("resourceLocation");
    openapiFields.add("resourceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceInfo is not found in the empty JSON string", ResourceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("permission") != null && !jsonObj.get("permission").isJsonNull()) && !jsonObj.get("permission").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `permission` to be a primitive type in the JSON string but got `%s`", jsonObj.get("permission").toString()));
      }
      if ((jsonObj.get("resourceContainer") != null && !jsonObj.get("resourceContainer").isJsonNull()) && !jsonObj.get("resourceContainer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceContainer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceContainer").toString()));
      }
      if ((jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) && !jsonObj.get("resourceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceLocation").toString()));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceInfo>() {
           @Override
           public void write(JsonWriter out, ResourceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceInfo
   * @throws IOException if the JSON string is invalid with respect to ResourceInfo
   */
  public static ResourceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceInfo.class);
  }

  /**
   * Convert an instance of ResourceInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

