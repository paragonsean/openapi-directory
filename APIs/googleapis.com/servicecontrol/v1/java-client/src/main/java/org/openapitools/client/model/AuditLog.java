/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.AuthenticationInfo;
import org.openapitools.client.model.AuthorizationInfo;
import org.openapitools.client.model.PolicyViolationInfo;
import org.openapitools.client.model.RequestMetadata;
import org.openapitools.client.model.ResourceLocation;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Common audit log format for Google Cloud Platform API operations. 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuditLog {
  public static final String SERIALIZED_NAME_AUTHENTICATION_INFO = "authenticationInfo";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_INFO)
  private AuthenticationInfo authenticationInfo;

  public static final String SERIALIZED_NAME_AUTHORIZATION_INFO = "authorizationInfo";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_INFO)
  private List<AuthorizationInfo> authorizationInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_NUM_RESPONSE_ITEMS = "numResponseItems";
  @SerializedName(SERIALIZED_NAME_NUM_RESPONSE_ITEMS)
  private String numResponseItems;

  public static final String SERIALIZED_NAME_POLICY_VIOLATION_INFO = "policyViolationInfo";
  @SerializedName(SERIALIZED_NAME_POLICY_VIOLATION_INFO)
  private PolicyViolationInfo policyViolationInfo;

  public static final String SERIALIZED_NAME_REQUEST = "request";
  @SerializedName(SERIALIZED_NAME_REQUEST)
  private Map<String, Object> request = new HashMap<>();

  public static final String SERIALIZED_NAME_REQUEST_METADATA = "requestMetadata";
  @SerializedName(SERIALIZED_NAME_REQUEST_METADATA)
  private RequestMetadata requestMetadata;

  public static final String SERIALIZED_NAME_RESOURCE_LOCATION = "resourceLocation";
  @SerializedName(SERIALIZED_NAME_RESOURCE_LOCATION)
  private ResourceLocation resourceLocation;

  public static final String SERIALIZED_NAME_RESOURCE_NAME = "resourceName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_NAME)
  private String resourceName;

  public static final String SERIALIZED_NAME_RESOURCE_ORIGINAL_STATE = "resourceOriginalState";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ORIGINAL_STATE)
  private Map<String, Object> resourceOriginalState = new HashMap<>();

  public static final String SERIALIZED_NAME_RESPONSE = "response";
  @SerializedName(SERIALIZED_NAME_RESPONSE)
  private Map<String, Object> response = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_DATA = "serviceData";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SERVICE_DATA)
  private Map<String, Object> serviceData = new HashMap<>();

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public AuditLog() {
  }

  public AuditLog authenticationInfo(AuthenticationInfo authenticationInfo) {
    this.authenticationInfo = authenticationInfo;
    return this;
  }

  /**
   * Get authenticationInfo
   * @return authenticationInfo
   */
  @javax.annotation.Nullable
  public AuthenticationInfo getAuthenticationInfo() {
    return authenticationInfo;
  }

  public void setAuthenticationInfo(AuthenticationInfo authenticationInfo) {
    this.authenticationInfo = authenticationInfo;
  }


  public AuditLog authorizationInfo(List<AuthorizationInfo> authorizationInfo) {
    this.authorizationInfo = authorizationInfo;
    return this;
  }

  public AuditLog addAuthorizationInfoItem(AuthorizationInfo authorizationInfoItem) {
    if (this.authorizationInfo == null) {
      this.authorizationInfo = new ArrayList<>();
    }
    this.authorizationInfo.add(authorizationInfoItem);
    return this;
  }

  /**
   * Authorization information. If there are multiple resources or permissions involved, then there is one AuthorizationInfo element for each {resource, permission} tuple.
   * @return authorizationInfo
   */
  @javax.annotation.Nullable
  public List<AuthorizationInfo> getAuthorizationInfo() {
    return authorizationInfo;
  }

  public void setAuthorizationInfo(List<AuthorizationInfo> authorizationInfo) {
    this.authorizationInfo = authorizationInfo;
  }


  public AuditLog metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public AuditLog putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * Other service-specific data about the request, response, and other information associated with the current audited event.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }


  public AuditLog methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  /**
   * The name of the service method or operation. For API calls, this should be the name of the API method. For example, \&quot;google.cloud.bigquery.v2.TableService.InsertTable\&quot; \&quot;google.logging.v2.ConfigServiceV2.CreateSink\&quot;
   * @return methodName
   */
  @javax.annotation.Nullable
  public String getMethodName() {
    return methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public AuditLog numResponseItems(String numResponseItems) {
    this.numResponseItems = numResponseItems;
    return this;
  }

  /**
   * The number of items returned from a List or Query API method, if applicable.
   * @return numResponseItems
   */
  @javax.annotation.Nullable
  public String getNumResponseItems() {
    return numResponseItems;
  }

  public void setNumResponseItems(String numResponseItems) {
    this.numResponseItems = numResponseItems;
  }


  public AuditLog policyViolationInfo(PolicyViolationInfo policyViolationInfo) {
    this.policyViolationInfo = policyViolationInfo;
    return this;
  }

  /**
   * Get policyViolationInfo
   * @return policyViolationInfo
   */
  @javax.annotation.Nullable
  public PolicyViolationInfo getPolicyViolationInfo() {
    return policyViolationInfo;
  }

  public void setPolicyViolationInfo(PolicyViolationInfo policyViolationInfo) {
    this.policyViolationInfo = policyViolationInfo;
  }


  public AuditLog request(Map<String, Object> request) {
    this.request = request;
    return this;
  }

  public AuditLog putRequestItem(String key, Object requestItem) {
    if (this.request == null) {
      this.request = new HashMap<>();
    }
    this.request.put(key, requestItem);
    return this;
  }

  /**
   * The operation request. This may not include all request parameters, such as those that are too large, privacy-sensitive, or duplicated elsewhere in the log record. It should never include user-generated data, such as file contents. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the &#x60;@type&#x60; property.
   * @return request
   */
  @javax.annotation.Nullable
  public Map<String, Object> getRequest() {
    return request;
  }

  public void setRequest(Map<String, Object> request) {
    this.request = request;
  }


  public AuditLog requestMetadata(RequestMetadata requestMetadata) {
    this.requestMetadata = requestMetadata;
    return this;
  }

  /**
   * Get requestMetadata
   * @return requestMetadata
   */
  @javax.annotation.Nullable
  public RequestMetadata getRequestMetadata() {
    return requestMetadata;
  }

  public void setRequestMetadata(RequestMetadata requestMetadata) {
    this.requestMetadata = requestMetadata;
  }


  public AuditLog resourceLocation(ResourceLocation resourceLocation) {
    this.resourceLocation = resourceLocation;
    return this;
  }

  /**
   * Get resourceLocation
   * @return resourceLocation
   */
  @javax.annotation.Nullable
  public ResourceLocation getResourceLocation() {
    return resourceLocation;
  }

  public void setResourceLocation(ResourceLocation resourceLocation) {
    this.resourceLocation = resourceLocation;
  }


  public AuditLog resourceName(String resourceName) {
    this.resourceName = resourceName;
    return this;
  }

  /**
   * The resource or collection that is the target of the operation. The name is a scheme-less URI, not including the API service name. For example: \&quot;projects/PROJECT_ID/zones/us-central1-a/instances\&quot; \&quot;projects/PROJECT_ID/datasets/DATASET_ID\&quot;
   * @return resourceName
   */
  @javax.annotation.Nullable
  public String getResourceName() {
    return resourceName;
  }

  public void setResourceName(String resourceName) {
    this.resourceName = resourceName;
  }


  public AuditLog resourceOriginalState(Map<String, Object> resourceOriginalState) {
    this.resourceOriginalState = resourceOriginalState;
    return this;
  }

  public AuditLog putResourceOriginalStateItem(String key, Object resourceOriginalStateItem) {
    if (this.resourceOriginalState == null) {
      this.resourceOriginalState = new HashMap<>();
    }
    this.resourceOriginalState.put(key, resourceOriginalStateItem);
    return this;
  }

  /**
   * The resource&#39;s original state before mutation. Present only for operations which have successfully modified the targeted resource(s). In general, this field should contain all changed fields, except those that are already been included in &#x60;request&#x60;, &#x60;response&#x60;, &#x60;metadata&#x60; or &#x60;service_data&#x60; fields. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the &#x60;@type&#x60; property.
   * @return resourceOriginalState
   */
  @javax.annotation.Nullable
  public Map<String, Object> getResourceOriginalState() {
    return resourceOriginalState;
  }

  public void setResourceOriginalState(Map<String, Object> resourceOriginalState) {
    this.resourceOriginalState = resourceOriginalState;
  }


  public AuditLog response(Map<String, Object> response) {
    this.response = response;
    return this;
  }

  public AuditLog putResponseItem(String key, Object responseItem) {
    if (this.response == null) {
      this.response = new HashMap<>();
    }
    this.response.put(key, responseItem);
    return this;
  }

  /**
   * The operation response. This may not include all response elements, such as those that are too large, privacy-sensitive, or duplicated elsewhere in the log record. It should never include user-generated data, such as file contents. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the &#x60;@type&#x60; property.
   * @return response
   */
  @javax.annotation.Nullable
  public Map<String, Object> getResponse() {
    return response;
  }

  public void setResponse(Map<String, Object> response) {
    this.response = response;
  }


  @Deprecated
  public AuditLog serviceData(Map<String, Object> serviceData) {
    this.serviceData = serviceData;
    return this;
  }

  public AuditLog putServiceDataItem(String key, Object serviceDataItem) {
    if (this.serviceData == null) {
      this.serviceData = new HashMap<>();
    }
    this.serviceData.put(key, serviceDataItem);
    return this;
  }

  /**
   * Deprecated. Use the &#x60;metadata&#x60; field instead. Other service-specific data about the request, response, and other activities.
   * @return serviceData
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Map<String, Object> getServiceData() {
    return serviceData;
  }

  @Deprecated
  public void setServiceData(Map<String, Object> serviceData) {
    this.serviceData = serviceData;
  }


  public AuditLog serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The name of the API service performing the operation. For example, &#x60;\&quot;compute.googleapis.com\&quot;&#x60;.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public AuditLog status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLog auditLog = (AuditLog) o;
    return Objects.equals(this.authenticationInfo, auditLog.authenticationInfo) &&
        Objects.equals(this.authorizationInfo, auditLog.authorizationInfo) &&
        Objects.equals(this.metadata, auditLog.metadata) &&
        Objects.equals(this.methodName, auditLog.methodName) &&
        Objects.equals(this.numResponseItems, auditLog.numResponseItems) &&
        Objects.equals(this.policyViolationInfo, auditLog.policyViolationInfo) &&
        Objects.equals(this.request, auditLog.request) &&
        Objects.equals(this.requestMetadata, auditLog.requestMetadata) &&
        Objects.equals(this.resourceLocation, auditLog.resourceLocation) &&
        Objects.equals(this.resourceName, auditLog.resourceName) &&
        Objects.equals(this.resourceOriginalState, auditLog.resourceOriginalState) &&
        Objects.equals(this.response, auditLog.response) &&
        Objects.equals(this.serviceData, auditLog.serviceData) &&
        Objects.equals(this.serviceName, auditLog.serviceName) &&
        Objects.equals(this.status, auditLog.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authenticationInfo, authorizationInfo, metadata, methodName, numResponseItems, policyViolationInfo, request, requestMetadata, resourceLocation, resourceName, resourceOriginalState, response, serviceData, serviceName, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLog {\n");
    sb.append("    authenticationInfo: ").append(toIndentedString(authenticationInfo)).append("\n");
    sb.append("    authorizationInfo: ").append(toIndentedString(authorizationInfo)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    numResponseItems: ").append(toIndentedString(numResponseItems)).append("\n");
    sb.append("    policyViolationInfo: ").append(toIndentedString(policyViolationInfo)).append("\n");
    sb.append("    request: ").append(toIndentedString(request)).append("\n");
    sb.append("    requestMetadata: ").append(toIndentedString(requestMetadata)).append("\n");
    sb.append("    resourceLocation: ").append(toIndentedString(resourceLocation)).append("\n");
    sb.append("    resourceName: ").append(toIndentedString(resourceName)).append("\n");
    sb.append("    resourceOriginalState: ").append(toIndentedString(resourceOriginalState)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    serviceData: ").append(toIndentedString(serviceData)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authenticationInfo");
    openapiFields.add("authorizationInfo");
    openapiFields.add("metadata");
    openapiFields.add("methodName");
    openapiFields.add("numResponseItems");
    openapiFields.add("policyViolationInfo");
    openapiFields.add("request");
    openapiFields.add("requestMetadata");
    openapiFields.add("resourceLocation");
    openapiFields.add("resourceName");
    openapiFields.add("resourceOriginalState");
    openapiFields.add("response");
    openapiFields.add("serviceData");
    openapiFields.add("serviceName");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditLog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLog is not found in the empty JSON string", AuditLog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditLog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditLog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authenticationInfo`
      if (jsonObj.get("authenticationInfo") != null && !jsonObj.get("authenticationInfo").isJsonNull()) {
        AuthenticationInfo.validateJsonElement(jsonObj.get("authenticationInfo"));
      }
      if (jsonObj.get("authorizationInfo") != null && !jsonObj.get("authorizationInfo").isJsonNull()) {
        JsonArray jsonArrayauthorizationInfo = jsonObj.getAsJsonArray("authorizationInfo");
        if (jsonArrayauthorizationInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizationInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizationInfo` to be an array in the JSON string but got `%s`", jsonObj.get("authorizationInfo").toString()));
          }

          // validate the optional field `authorizationInfo` (array)
          for (int i = 0; i < jsonArrayauthorizationInfo.size(); i++) {
            AuthorizationInfo.validateJsonElement(jsonArrayauthorizationInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("methodName") != null && !jsonObj.get("methodName").isJsonNull()) && !jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      if ((jsonObj.get("numResponseItems") != null && !jsonObj.get("numResponseItems").isJsonNull()) && !jsonObj.get("numResponseItems").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `numResponseItems` to be a primitive type in the JSON string but got `%s`", jsonObj.get("numResponseItems").toString()));
      }
      // validate the optional field `policyViolationInfo`
      if (jsonObj.get("policyViolationInfo") != null && !jsonObj.get("policyViolationInfo").isJsonNull()) {
        PolicyViolationInfo.validateJsonElement(jsonObj.get("policyViolationInfo"));
      }
      // validate the optional field `requestMetadata`
      if (jsonObj.get("requestMetadata") != null && !jsonObj.get("requestMetadata").isJsonNull()) {
        RequestMetadata.validateJsonElement(jsonObj.get("requestMetadata"));
      }
      // validate the optional field `resourceLocation`
      if (jsonObj.get("resourceLocation") != null && !jsonObj.get("resourceLocation").isJsonNull()) {
        ResourceLocation.validateJsonElement(jsonObj.get("resourceLocation"));
      }
      if ((jsonObj.get("resourceName") != null && !jsonObj.get("resourceName").isJsonNull()) && !jsonObj.get("resourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceName").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLog.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLog>() {
           @Override
           public void write(JsonWriter out, AuditLog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditLog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditLog
   * @throws IOException if the JSON string is invalid with respect to AuditLog
   */
  public static AuditLog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLog.class);
  }

  /**
   * Convert an instance of AuditLog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

