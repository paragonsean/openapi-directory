/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConsumerInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains additional information about the check operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckInfo {
  public static final String SERIALIZED_NAME_API_KEY_UID = "apiKeyUid";
  @SerializedName(SERIALIZED_NAME_API_KEY_UID)
  private String apiKeyUid;

  public static final String SERIALIZED_NAME_CONSUMER_INFO = "consumerInfo";
  @SerializedName(SERIALIZED_NAME_CONSUMER_INFO)
  private ConsumerInfo consumerInfo;

  public static final String SERIALIZED_NAME_UNUSED_ARGUMENTS = "unusedArguments";
  @SerializedName(SERIALIZED_NAME_UNUSED_ARGUMENTS)
  private List<String> unusedArguments = new ArrayList<>();

  public CheckInfo() {
  }

  public CheckInfo apiKeyUid(String apiKeyUid) {
    this.apiKeyUid = apiKeyUid;
    return this;
  }

  /**
   * The unique id of the api key in the format of \&quot;apikey:\&quot;. This field will be populated when the consumer passed to Chemist is an API key and all the API key related validations are successful.
   * @return apiKeyUid
   */
  @javax.annotation.Nullable
  public String getApiKeyUid() {
    return apiKeyUid;
  }

  public void setApiKeyUid(String apiKeyUid) {
    this.apiKeyUid = apiKeyUid;
  }


  public CheckInfo consumerInfo(ConsumerInfo consumerInfo) {
    this.consumerInfo = consumerInfo;
    return this;
  }

  /**
   * Get consumerInfo
   * @return consumerInfo
   */
  @javax.annotation.Nullable
  public ConsumerInfo getConsumerInfo() {
    return consumerInfo;
  }

  public void setConsumerInfo(ConsumerInfo consumerInfo) {
    this.consumerInfo = consumerInfo;
  }


  public CheckInfo unusedArguments(List<String> unusedArguments) {
    this.unusedArguments = unusedArguments;
    return this;
  }

  public CheckInfo addUnusedArgumentsItem(String unusedArgumentsItem) {
    if (this.unusedArguments == null) {
      this.unusedArguments = new ArrayList<>();
    }
    this.unusedArguments.add(unusedArgumentsItem);
    return this;
  }

  /**
   * A list of fields and label keys that are ignored by the server. The client doesn&#39;t need to send them for following requests to improve performance and allow better aggregation.
   * @return unusedArguments
   */
  @javax.annotation.Nullable
  public List<String> getUnusedArguments() {
    return unusedArguments;
  }

  public void setUnusedArguments(List<String> unusedArguments) {
    this.unusedArguments = unusedArguments;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckInfo checkInfo = (CheckInfo) o;
    return Objects.equals(this.apiKeyUid, checkInfo.apiKeyUid) &&
        Objects.equals(this.consumerInfo, checkInfo.consumerInfo) &&
        Objects.equals(this.unusedArguments, checkInfo.unusedArguments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiKeyUid, consumerInfo, unusedArguments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckInfo {\n");
    sb.append("    apiKeyUid: ").append(toIndentedString(apiKeyUid)).append("\n");
    sb.append("    consumerInfo: ").append(toIndentedString(consumerInfo)).append("\n");
    sb.append("    unusedArguments: ").append(toIndentedString(unusedArguments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiKeyUid");
    openapiFields.add("consumerInfo");
    openapiFields.add("unusedArguments");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckInfo is not found in the empty JSON string", CheckInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiKeyUid") != null && !jsonObj.get("apiKeyUid").isJsonNull()) && !jsonObj.get("apiKeyUid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiKeyUid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiKeyUid").toString()));
      }
      // validate the optional field `consumerInfo`
      if (jsonObj.get("consumerInfo") != null && !jsonObj.get("consumerInfo").isJsonNull()) {
        ConsumerInfo.validateJsonElement(jsonObj.get("consumerInfo"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("unusedArguments") != null && !jsonObj.get("unusedArguments").isJsonNull() && !jsonObj.get("unusedArguments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `unusedArguments` to be an array in the JSON string but got `%s`", jsonObj.get("unusedArguments").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckInfo>() {
           @Override
           public void write(JsonWriter out, CheckInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckInfo
   * @throws IOException if the JSON string is invalid with respect to CheckInfo
   */
  public static CheckInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckInfo.class);
  }

  /**
   * Convert an instance of CheckInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

