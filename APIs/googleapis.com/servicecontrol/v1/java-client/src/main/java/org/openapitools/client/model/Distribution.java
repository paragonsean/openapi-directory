/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Exemplar;
import org.openapitools.client.model.ExplicitBuckets;
import org.openapitools.client.model.ExponentialBuckets;
import org.openapitools.client.model.LinearBuckets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Distribution represents a frequency distribution of double-valued sample points. It contains the size of the population of sample points plus additional optional information: * the arithmetic mean of the samples * the minimum and maximum of the samples * the sum-squared-deviation of the samples, used to compute variance * a histogram of the values of the sample points
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Distribution {
  public static final String SERIALIZED_NAME_BUCKET_COUNTS = "bucketCounts";
  @SerializedName(SERIALIZED_NAME_BUCKET_COUNTS)
  private List<String> bucketCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_EXEMPLARS = "exemplars";
  @SerializedName(SERIALIZED_NAME_EXEMPLARS)
  private List<Exemplar> exemplars = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPLICIT_BUCKETS = "explicitBuckets";
  @SerializedName(SERIALIZED_NAME_EXPLICIT_BUCKETS)
  private ExplicitBuckets explicitBuckets;

  public static final String SERIALIZED_NAME_EXPONENTIAL_BUCKETS = "exponentialBuckets";
  @SerializedName(SERIALIZED_NAME_EXPONENTIAL_BUCKETS)
  private ExponentialBuckets exponentialBuckets;

  public static final String SERIALIZED_NAME_LINEAR_BUCKETS = "linearBuckets";
  @SerializedName(SERIALIZED_NAME_LINEAR_BUCKETS)
  private LinearBuckets linearBuckets;

  public static final String SERIALIZED_NAME_MAXIMUM = "maximum";
  @SerializedName(SERIALIZED_NAME_MAXIMUM)
  private Double maximum;

  public static final String SERIALIZED_NAME_MEAN = "mean";
  @SerializedName(SERIALIZED_NAME_MEAN)
  private Double mean;

  public static final String SERIALIZED_NAME_MINIMUM = "minimum";
  @SerializedName(SERIALIZED_NAME_MINIMUM)
  private Double minimum;

  public static final String SERIALIZED_NAME_SUM_OF_SQUARED_DEVIATION = "sumOfSquaredDeviation";
  @SerializedName(SERIALIZED_NAME_SUM_OF_SQUARED_DEVIATION)
  private Double sumOfSquaredDeviation;

  public Distribution() {
  }

  public Distribution bucketCounts(List<String> bucketCounts) {
    this.bucketCounts = bucketCounts;
    return this;
  }

  public Distribution addBucketCountsItem(String bucketCountsItem) {
    if (this.bucketCounts == null) {
      this.bucketCounts = new ArrayList<>();
    }
    this.bucketCounts.add(bucketCountsItem);
    return this;
  }

  /**
   * The number of samples in each histogram bucket. &#x60;bucket_counts&#x60; are optional. If present, they must sum to the &#x60;count&#x60; value. The buckets are defined below in &#x60;bucket_option&#x60;. There are N buckets. &#x60;bucket_counts[0]&#x60; is the number of samples in the underflow bucket. &#x60;bucket_counts[1]&#x60; to &#x60;bucket_counts[N-1]&#x60; are the numbers of samples in each of the finite buckets. And &#x60;bucket_counts[N] is the number of samples in the overflow bucket. See the comments of &#x60;bucket_option&#x60; below for more details. Any suffix of trailing zeros may be omitted.
   * @return bucketCounts
   */
  @javax.annotation.Nullable
  public List<String> getBucketCounts() {
    return bucketCounts;
  }

  public void setBucketCounts(List<String> bucketCounts) {
    this.bucketCounts = bucketCounts;
  }


  public Distribution count(String count) {
    this.count = count;
    return this;
  }

  /**
   * The total number of samples in the distribution. Must be &gt;&#x3D; 0.
   * @return count
   */
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public Distribution exemplars(List<Exemplar> exemplars) {
    this.exemplars = exemplars;
    return this;
  }

  public Distribution addExemplarsItem(Exemplar exemplarsItem) {
    if (this.exemplars == null) {
      this.exemplars = new ArrayList<>();
    }
    this.exemplars.add(exemplarsItem);
    return this;
  }

  /**
   * Example points. Must be in increasing order of &#x60;value&#x60; field.
   * @return exemplars
   */
  @javax.annotation.Nullable
  public List<Exemplar> getExemplars() {
    return exemplars;
  }

  public void setExemplars(List<Exemplar> exemplars) {
    this.exemplars = exemplars;
  }


  public Distribution explicitBuckets(ExplicitBuckets explicitBuckets) {
    this.explicitBuckets = explicitBuckets;
    return this;
  }

  /**
   * Get explicitBuckets
   * @return explicitBuckets
   */
  @javax.annotation.Nullable
  public ExplicitBuckets getExplicitBuckets() {
    return explicitBuckets;
  }

  public void setExplicitBuckets(ExplicitBuckets explicitBuckets) {
    this.explicitBuckets = explicitBuckets;
  }


  public Distribution exponentialBuckets(ExponentialBuckets exponentialBuckets) {
    this.exponentialBuckets = exponentialBuckets;
    return this;
  }

  /**
   * Get exponentialBuckets
   * @return exponentialBuckets
   */
  @javax.annotation.Nullable
  public ExponentialBuckets getExponentialBuckets() {
    return exponentialBuckets;
  }

  public void setExponentialBuckets(ExponentialBuckets exponentialBuckets) {
    this.exponentialBuckets = exponentialBuckets;
  }


  public Distribution linearBuckets(LinearBuckets linearBuckets) {
    this.linearBuckets = linearBuckets;
    return this;
  }

  /**
   * Get linearBuckets
   * @return linearBuckets
   */
  @javax.annotation.Nullable
  public LinearBuckets getLinearBuckets() {
    return linearBuckets;
  }

  public void setLinearBuckets(LinearBuckets linearBuckets) {
    this.linearBuckets = linearBuckets;
  }


  public Distribution maximum(Double maximum) {
    this.maximum = maximum;
    return this;
  }

  /**
   * The maximum of the population of values. Ignored if &#x60;count&#x60; is zero.
   * @return maximum
   */
  @javax.annotation.Nullable
  public Double getMaximum() {
    return maximum;
  }

  public void setMaximum(Double maximum) {
    this.maximum = maximum;
  }


  public Distribution mean(Double mean) {
    this.mean = mean;
    return this;
  }

  /**
   * The arithmetic mean of the samples in the distribution. If &#x60;count&#x60; is zero then this field must be zero.
   * @return mean
   */
  @javax.annotation.Nullable
  public Double getMean() {
    return mean;
  }

  public void setMean(Double mean) {
    this.mean = mean;
  }


  public Distribution minimum(Double minimum) {
    this.minimum = minimum;
    return this;
  }

  /**
   * The minimum of the population of values. Ignored if &#x60;count&#x60; is zero.
   * @return minimum
   */
  @javax.annotation.Nullable
  public Double getMinimum() {
    return minimum;
  }

  public void setMinimum(Double minimum) {
    this.minimum = minimum;
  }


  public Distribution sumOfSquaredDeviation(Double sumOfSquaredDeviation) {
    this.sumOfSquaredDeviation = sumOfSquaredDeviation;
    return this;
  }

  /**
   * The sum of squared deviations from the mean: Sum[i&#x3D;1..count]((x_i - mean)^2) where each x_i is a sample values. If &#x60;count&#x60; is zero then this field must be zero, otherwise validation of the request fails.
   * @return sumOfSquaredDeviation
   */
  @javax.annotation.Nullable
  public Double getSumOfSquaredDeviation() {
    return sumOfSquaredDeviation;
  }

  public void setSumOfSquaredDeviation(Double sumOfSquaredDeviation) {
    this.sumOfSquaredDeviation = sumOfSquaredDeviation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Distribution distribution = (Distribution) o;
    return Objects.equals(this.bucketCounts, distribution.bucketCounts) &&
        Objects.equals(this.count, distribution.count) &&
        Objects.equals(this.exemplars, distribution.exemplars) &&
        Objects.equals(this.explicitBuckets, distribution.explicitBuckets) &&
        Objects.equals(this.exponentialBuckets, distribution.exponentialBuckets) &&
        Objects.equals(this.linearBuckets, distribution.linearBuckets) &&
        Objects.equals(this.maximum, distribution.maximum) &&
        Objects.equals(this.mean, distribution.mean) &&
        Objects.equals(this.minimum, distribution.minimum) &&
        Objects.equals(this.sumOfSquaredDeviation, distribution.sumOfSquaredDeviation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bucketCounts, count, exemplars, explicitBuckets, exponentialBuckets, linearBuckets, maximum, mean, minimum, sumOfSquaredDeviation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Distribution {\n");
    sb.append("    bucketCounts: ").append(toIndentedString(bucketCounts)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    exemplars: ").append(toIndentedString(exemplars)).append("\n");
    sb.append("    explicitBuckets: ").append(toIndentedString(explicitBuckets)).append("\n");
    sb.append("    exponentialBuckets: ").append(toIndentedString(exponentialBuckets)).append("\n");
    sb.append("    linearBuckets: ").append(toIndentedString(linearBuckets)).append("\n");
    sb.append("    maximum: ").append(toIndentedString(maximum)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    minimum: ").append(toIndentedString(minimum)).append("\n");
    sb.append("    sumOfSquaredDeviation: ").append(toIndentedString(sumOfSquaredDeviation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bucketCounts");
    openapiFields.add("count");
    openapiFields.add("exemplars");
    openapiFields.add("explicitBuckets");
    openapiFields.add("exponentialBuckets");
    openapiFields.add("linearBuckets");
    openapiFields.add("maximum");
    openapiFields.add("mean");
    openapiFields.add("minimum");
    openapiFields.add("sumOfSquaredDeviation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Distribution
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Distribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Distribution is not found in the empty JSON string", Distribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Distribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Distribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bucketCounts") != null && !jsonObj.get("bucketCounts").isJsonNull() && !jsonObj.get("bucketCounts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketCounts` to be an array in the JSON string but got `%s`", jsonObj.get("bucketCounts").toString()));
      }
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if (jsonObj.get("exemplars") != null && !jsonObj.get("exemplars").isJsonNull()) {
        JsonArray jsonArrayexemplars = jsonObj.getAsJsonArray("exemplars");
        if (jsonArrayexemplars != null) {
          // ensure the json data is an array
          if (!jsonObj.get("exemplars").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `exemplars` to be an array in the JSON string but got `%s`", jsonObj.get("exemplars").toString()));
          }

          // validate the optional field `exemplars` (array)
          for (int i = 0; i < jsonArrayexemplars.size(); i++) {
            Exemplar.validateJsonElement(jsonArrayexemplars.get(i));
          };
        }
      }
      // validate the optional field `explicitBuckets`
      if (jsonObj.get("explicitBuckets") != null && !jsonObj.get("explicitBuckets").isJsonNull()) {
        ExplicitBuckets.validateJsonElement(jsonObj.get("explicitBuckets"));
      }
      // validate the optional field `exponentialBuckets`
      if (jsonObj.get("exponentialBuckets") != null && !jsonObj.get("exponentialBuckets").isJsonNull()) {
        ExponentialBuckets.validateJsonElement(jsonObj.get("exponentialBuckets"));
      }
      // validate the optional field `linearBuckets`
      if (jsonObj.get("linearBuckets") != null && !jsonObj.get("linearBuckets").isJsonNull()) {
        LinearBuckets.validateJsonElement(jsonObj.get("linearBuckets"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Distribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Distribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Distribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Distribution.class));

       return (TypeAdapter<T>) new TypeAdapter<Distribution>() {
           @Override
           public void write(JsonWriter out, Distribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Distribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Distribution given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Distribution
   * @throws IOException if the JSON string is invalid with respect to Distribution
   */
  public static Distribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Distribution.class);
  }

  /**
   * Convert an instance of Distribution to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

