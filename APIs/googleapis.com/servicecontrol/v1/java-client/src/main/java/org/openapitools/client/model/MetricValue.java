/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Distribution;
import org.openapitools.client.model.Money;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents a single metric value.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricValue {
  public static final String SERIALIZED_NAME_BOOL_VALUE = "boolValue";
  @SerializedName(SERIALIZED_NAME_BOOL_VALUE)
  private Boolean boolValue;

  public static final String SERIALIZED_NAME_DISTRIBUTION_VALUE = "distributionValue";
  @SerializedName(SERIALIZED_NAME_DISTRIBUTION_VALUE)
  private Distribution distributionValue;

  public static final String SERIALIZED_NAME_DOUBLE_VALUE = "doubleValue";
  @SerializedName(SERIALIZED_NAME_DOUBLE_VALUE)
  private Double doubleValue;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_INT64_VALUE = "int64Value";
  @SerializedName(SERIALIZED_NAME_INT64_VALUE)
  private String int64Value;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_MONEY_VALUE = "moneyValue";
  @SerializedName(SERIALIZED_NAME_MONEY_VALUE)
  private Money moneyValue;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STRING_VALUE = "stringValue";
  @SerializedName(SERIALIZED_NAME_STRING_VALUE)
  private String stringValue;

  public MetricValue() {
  }

  public MetricValue boolValue(Boolean boolValue) {
    this.boolValue = boolValue;
    return this;
  }

  /**
   * A boolean value.
   * @return boolValue
   */
  @javax.annotation.Nullable
  public Boolean getBoolValue() {
    return boolValue;
  }

  public void setBoolValue(Boolean boolValue) {
    this.boolValue = boolValue;
  }


  public MetricValue distributionValue(Distribution distributionValue) {
    this.distributionValue = distributionValue;
    return this;
  }

  /**
   * Get distributionValue
   * @return distributionValue
   */
  @javax.annotation.Nullable
  public Distribution getDistributionValue() {
    return distributionValue;
  }

  public void setDistributionValue(Distribution distributionValue) {
    this.distributionValue = distributionValue;
  }


  public MetricValue doubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
    return this;
  }

  /**
   * A double precision floating point value.
   * @return doubleValue
   */
  @javax.annotation.Nullable
  public Double getDoubleValue() {
    return doubleValue;
  }

  public void setDoubleValue(Double doubleValue) {
    this.doubleValue = doubleValue;
  }


  public MetricValue endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end of the time period over which this metric value&#39;s measurement applies. If not specified, google.api.servicecontrol.v1.Operation.end_time will be used.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public MetricValue int64Value(String int64Value) {
    this.int64Value = int64Value;
    return this;
  }

  /**
   * A signed 64-bit integer value.
   * @return int64Value
   */
  @javax.annotation.Nullable
  public String getInt64Value() {
    return int64Value;
  }

  public void setInt64Value(String int64Value) {
    this.int64Value = int64Value;
  }


  public MetricValue labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public MetricValue putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * The labels describing the metric value. See comments on google.api.servicecontrol.v1.Operation.labels for the overriding relationship. Note that this map must not contain monitored resource labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public MetricValue moneyValue(Money moneyValue) {
    this.moneyValue = moneyValue;
    return this;
  }

  /**
   * Get moneyValue
   * @return moneyValue
   */
  @javax.annotation.Nullable
  public Money getMoneyValue() {
    return moneyValue;
  }

  public void setMoneyValue(Money moneyValue) {
    this.moneyValue = moneyValue;
  }


  public MetricValue startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start of the time period over which this metric value&#39;s measurement applies. The time period has different semantics for different metric types (cumulative, delta, and gauge). See the metric definition documentation in the service configuration for details. If not specified, google.api.servicecontrol.v1.Operation.start_time will be used.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public MetricValue stringValue(String stringValue) {
    this.stringValue = stringValue;
    return this;
  }

  /**
   * A text string value.
   * @return stringValue
   */
  @javax.annotation.Nullable
  public String getStringValue() {
    return stringValue;
  }

  public void setStringValue(String stringValue) {
    this.stringValue = stringValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricValue metricValue = (MetricValue) o;
    return Objects.equals(this.boolValue, metricValue.boolValue) &&
        Objects.equals(this.distributionValue, metricValue.distributionValue) &&
        Objects.equals(this.doubleValue, metricValue.doubleValue) &&
        Objects.equals(this.endTime, metricValue.endTime) &&
        Objects.equals(this.int64Value, metricValue.int64Value) &&
        Objects.equals(this.labels, metricValue.labels) &&
        Objects.equals(this.moneyValue, metricValue.moneyValue) &&
        Objects.equals(this.startTime, metricValue.startTime) &&
        Objects.equals(this.stringValue, metricValue.stringValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boolValue, distributionValue, doubleValue, endTime, int64Value, labels, moneyValue, startTime, stringValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricValue {\n");
    sb.append("    boolValue: ").append(toIndentedString(boolValue)).append("\n");
    sb.append("    distributionValue: ").append(toIndentedString(distributionValue)).append("\n");
    sb.append("    doubleValue: ").append(toIndentedString(doubleValue)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    int64Value: ").append(toIndentedString(int64Value)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    moneyValue: ").append(toIndentedString(moneyValue)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    stringValue: ").append(toIndentedString(stringValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boolValue");
    openapiFields.add("distributionValue");
    openapiFields.add("doubleValue");
    openapiFields.add("endTime");
    openapiFields.add("int64Value");
    openapiFields.add("labels");
    openapiFields.add("moneyValue");
    openapiFields.add("startTime");
    openapiFields.add("stringValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricValue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricValue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricValue is not found in the empty JSON string", MetricValue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricValue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricValue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `distributionValue`
      if (jsonObj.get("distributionValue") != null && !jsonObj.get("distributionValue").isJsonNull()) {
        Distribution.validateJsonElement(jsonObj.get("distributionValue"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("int64Value") != null && !jsonObj.get("int64Value").isJsonNull()) && !jsonObj.get("int64Value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `int64Value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("int64Value").toString()));
      }
      // validate the optional field `moneyValue`
      if (jsonObj.get("moneyValue") != null && !jsonObj.get("moneyValue").isJsonNull()) {
        Money.validateJsonElement(jsonObj.get("moneyValue"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("stringValue") != null && !jsonObj.get("stringValue").isJsonNull()) && !jsonObj.get("stringValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stringValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stringValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricValue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricValue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricValue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricValue.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricValue>() {
           @Override
           public void write(JsonWriter out, MetricValue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricValue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricValue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricValue
   * @throws IOException if the JSON string is invalid with respect to MetricValue
   */
  public static MetricValue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricValue.class);
  }

  /**
   * Convert an instance of MetricValue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

