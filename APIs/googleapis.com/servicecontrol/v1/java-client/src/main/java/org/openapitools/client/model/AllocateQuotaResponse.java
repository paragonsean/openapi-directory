/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AllocateInfo;
import org.openapitools.client.model.MetricValueSet;
import org.openapitools.client.model.QuotaError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for the AllocateQuota method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AllocateQuotaResponse {
  public static final String SERIALIZED_NAME_ALLOCATE_ERRORS = "allocateErrors";
  @SerializedName(SERIALIZED_NAME_ALLOCATE_ERRORS)
  private List<QuotaError> allocateErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOCATE_INFO = "allocateInfo";
  @SerializedName(SERIALIZED_NAME_ALLOCATE_INFO)
  private AllocateInfo allocateInfo;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_QUOTA_METRICS = "quotaMetrics";
  @SerializedName(SERIALIZED_NAME_QUOTA_METRICS)
  private List<MetricValueSet> quotaMetrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CONFIG_ID = "serviceConfigId";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONFIG_ID)
  private String serviceConfigId;

  public AllocateQuotaResponse() {
  }

  public AllocateQuotaResponse allocateErrors(List<QuotaError> allocateErrors) {
    this.allocateErrors = allocateErrors;
    return this;
  }

  public AllocateQuotaResponse addAllocateErrorsItem(QuotaError allocateErrorsItem) {
    if (this.allocateErrors == null) {
      this.allocateErrors = new ArrayList<>();
    }
    this.allocateErrors.add(allocateErrorsItem);
    return this;
  }

  /**
   * Indicates the decision of the allocate.
   * @return allocateErrors
   */
  @javax.annotation.Nullable
  public List<QuotaError> getAllocateErrors() {
    return allocateErrors;
  }

  public void setAllocateErrors(List<QuotaError> allocateErrors) {
    this.allocateErrors = allocateErrors;
  }


  public AllocateQuotaResponse allocateInfo(AllocateInfo allocateInfo) {
    this.allocateInfo = allocateInfo;
    return this;
  }

  /**
   * Get allocateInfo
   * @return allocateInfo
   */
  @javax.annotation.Nullable
  public AllocateInfo getAllocateInfo() {
    return allocateInfo;
  }

  public void setAllocateInfo(AllocateInfo allocateInfo) {
    this.allocateInfo = allocateInfo;
  }


  public AllocateQuotaResponse operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The same operation_id value used in the AllocateQuotaRequest. Used for logging and diagnostics purposes.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public AllocateQuotaResponse quotaMetrics(List<MetricValueSet> quotaMetrics) {
    this.quotaMetrics = quotaMetrics;
    return this;
  }

  public AllocateQuotaResponse addQuotaMetricsItem(MetricValueSet quotaMetricsItem) {
    if (this.quotaMetrics == null) {
      this.quotaMetrics = new ArrayList<>();
    }
    this.quotaMetrics.add(quotaMetricsItem);
    return this;
  }

  /**
   * Quota metrics to indicate the result of allocation. Depending on the request, one or more of the following metrics will be included: 1. Per quota group or per quota metric incremental usage will be specified using the following delta metric : \&quot;serviceruntime.googleapis.com/api/consumer/quota_used_count\&quot; 2. The quota limit reached condition will be specified using the following boolean metric : \&quot;serviceruntime.googleapis.com/quota/exceeded\&quot;
   * @return quotaMetrics
   */
  @javax.annotation.Nullable
  public List<MetricValueSet> getQuotaMetrics() {
    return quotaMetrics;
  }

  public void setQuotaMetrics(List<MetricValueSet> quotaMetrics) {
    this.quotaMetrics = quotaMetrics;
  }


  public AllocateQuotaResponse serviceConfigId(String serviceConfigId) {
    this.serviceConfigId = serviceConfigId;
    return this;
  }

  /**
   * ID of the actual config used to process the request.
   * @return serviceConfigId
   */
  @javax.annotation.Nullable
  public String getServiceConfigId() {
    return serviceConfigId;
  }

  public void setServiceConfigId(String serviceConfigId) {
    this.serviceConfigId = serviceConfigId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AllocateQuotaResponse allocateQuotaResponse = (AllocateQuotaResponse) o;
    return Objects.equals(this.allocateErrors, allocateQuotaResponse.allocateErrors) &&
        Objects.equals(this.allocateInfo, allocateQuotaResponse.allocateInfo) &&
        Objects.equals(this.operationId, allocateQuotaResponse.operationId) &&
        Objects.equals(this.quotaMetrics, allocateQuotaResponse.quotaMetrics) &&
        Objects.equals(this.serviceConfigId, allocateQuotaResponse.serviceConfigId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocateErrors, allocateInfo, operationId, quotaMetrics, serviceConfigId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AllocateQuotaResponse {\n");
    sb.append("    allocateErrors: ").append(toIndentedString(allocateErrors)).append("\n");
    sb.append("    allocateInfo: ").append(toIndentedString(allocateInfo)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    quotaMetrics: ").append(toIndentedString(quotaMetrics)).append("\n");
    sb.append("    serviceConfigId: ").append(toIndentedString(serviceConfigId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocateErrors");
    openapiFields.add("allocateInfo");
    openapiFields.add("operationId");
    openapiFields.add("quotaMetrics");
    openapiFields.add("serviceConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AllocateQuotaResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AllocateQuotaResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AllocateQuotaResponse is not found in the empty JSON string", AllocateQuotaResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AllocateQuotaResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AllocateQuotaResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allocateErrors") != null && !jsonObj.get("allocateErrors").isJsonNull()) {
        JsonArray jsonArrayallocateErrors = jsonObj.getAsJsonArray("allocateErrors");
        if (jsonArrayallocateErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allocateErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allocateErrors` to be an array in the JSON string but got `%s`", jsonObj.get("allocateErrors").toString()));
          }

          // validate the optional field `allocateErrors` (array)
          for (int i = 0; i < jsonArrayallocateErrors.size(); i++) {
            QuotaError.validateJsonElement(jsonArrayallocateErrors.get(i));
          };
        }
      }
      // validate the optional field `allocateInfo`
      if (jsonObj.get("allocateInfo") != null && !jsonObj.get("allocateInfo").isJsonNull()) {
        AllocateInfo.validateJsonElement(jsonObj.get("allocateInfo"));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if (jsonObj.get("quotaMetrics") != null && !jsonObj.get("quotaMetrics").isJsonNull()) {
        JsonArray jsonArrayquotaMetrics = jsonObj.getAsJsonArray("quotaMetrics");
        if (jsonArrayquotaMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quotaMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quotaMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("quotaMetrics").toString()));
          }

          // validate the optional field `quotaMetrics` (array)
          for (int i = 0; i < jsonArrayquotaMetrics.size(); i++) {
            MetricValueSet.validateJsonElement(jsonArrayquotaMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceConfigId") != null && !jsonObj.get("serviceConfigId").isJsonNull()) && !jsonObj.get("serviceConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceConfigId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AllocateQuotaResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AllocateQuotaResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AllocateQuotaResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AllocateQuotaResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<AllocateQuotaResponse>() {
           @Override
           public void write(JsonWriter out, AllocateQuotaResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AllocateQuotaResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AllocateQuotaResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AllocateQuotaResponse
   * @throws IOException if the JSON string is invalid with respect to AllocateQuotaResponse
   */
  public static AllocateQuotaResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AllocateQuotaResponse.class);
  }

  /**
   * Convert an instance of AllocateQuotaResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

