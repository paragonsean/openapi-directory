/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Defines the errors to be returned in google.api.servicecontrol.v1.CheckResponse.check_errors.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckError {
  /**
   * The error code.
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    ERROR_CODE_UNSPECIFIED("ERROR_CODE_UNSPECIFIED"),
    
    NOT_FOUND("NOT_FOUND"),
    
    PERMISSION_DENIED("PERMISSION_DENIED"),
    
    RESOURCE_EXHAUSTED("RESOURCE_EXHAUSTED"),
    
    BUDGET_EXCEEDED("BUDGET_EXCEEDED"),
    
    DENIAL_OF_SERVICE_DETECTED("DENIAL_OF_SERVICE_DETECTED"),
    
    LOAD_SHEDDING("LOAD_SHEDDING"),
    
    ABUSER_DETECTED("ABUSER_DETECTED"),
    
    SERVICE_NOT_ACTIVATED("SERVICE_NOT_ACTIVATED"),
    
    VISIBILITY_DENIED("VISIBILITY_DENIED"),
    
    BILLING_DISABLED("BILLING_DISABLED"),
    
    PROJECT_DELETED("PROJECT_DELETED"),
    
    PROJECT_INVALID("PROJECT_INVALID"),
    
    CONSUMER_INVALID("CONSUMER_INVALID"),
    
    IP_ADDRESS_BLOCKED("IP_ADDRESS_BLOCKED"),
    
    REFERER_BLOCKED("REFERER_BLOCKED"),
    
    CLIENT_APP_BLOCKED("CLIENT_APP_BLOCKED"),
    
    API_TARGET_BLOCKED("API_TARGET_BLOCKED"),
    
    API_KEY_INVALID("API_KEY_INVALID"),
    
    API_KEY_EXPIRED("API_KEY_EXPIRED"),
    
    API_KEY_NOT_FOUND("API_KEY_NOT_FOUND"),
    
    SPATULA_HEADER_INVALID("SPATULA_HEADER_INVALID"),
    
    LOAS_ROLE_INVALID("LOAS_ROLE_INVALID"),
    
    NO_LOAS_PROJECT("NO_LOAS_PROJECT"),
    
    LOAS_PROJECT_DISABLED("LOAS_PROJECT_DISABLED"),
    
    SECURITY_POLICY_VIOLATED("SECURITY_POLICY_VIOLATED"),
    
    INVALID_CREDENTIAL("INVALID_CREDENTIAL"),
    
    LOCATION_POLICY_VIOLATED("LOCATION_POLICY_VIOLATED"),
    
    NAMESPACE_LOOKUP_UNAVAILABLE("NAMESPACE_LOOKUP_UNAVAILABLE"),
    
    SERVICE_STATUS_UNAVAILABLE("SERVICE_STATUS_UNAVAILABLE"),
    
    BILLING_STATUS_UNAVAILABLE("BILLING_STATUS_UNAVAILABLE"),
    
    QUOTA_CHECK_UNAVAILABLE("QUOTA_CHECK_UNAVAILABLE"),
    
    LOAS_PROJECT_LOOKUP_UNAVAILABLE("LOAS_PROJECT_LOOKUP_UNAVAILABLE"),
    
    CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE("CLOUD_RESOURCE_MANAGER_BACKEND_UNAVAILABLE"),
    
    SECURITY_POLICY_BACKEND_UNAVAILABLE("SECURITY_POLICY_BACKEND_UNAVAILABLE"),
    
    LOCATION_POLICY_BACKEND_UNAVAILABLE("LOCATION_POLICY_BACKEND_UNAVAILABLE"),
    
    INJECTED_ERROR("INJECTED_ERROR");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public CheckError() {
  }

  public CheckError code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * The error code.
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public CheckError detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Free-form text providing details on the error cause of the error.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public CheckError status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public CheckError subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject to whom this error applies. See the specific code enum for more details on this field. For example: - \&quot;project:\&quot; - \&quot;folder:\&quot; - \&quot;organization:\&quot;
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckError checkError = (CheckError) o;
    return Objects.equals(this.code, checkError.code) &&
        Objects.equals(this.detail, checkError.detail) &&
        Objects.equals(this.status, checkError.status) &&
        Objects.equals(this.subject, checkError.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, detail, status, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckError {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("detail");
    openapiFields.add("status");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckError is not found in the empty JSON string", CheckError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckError.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckError>() {
           @Override
           public void write(JsonWriter out, CheckError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckError
   * @throws IOException if the JSON string is invalid with respect to CheckError
   */
  public static CheckError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckError.class);
  }

  /**
   * Convert an instance of CheckError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

