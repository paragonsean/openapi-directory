/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FirstPartyPrincipal;
import org.openapitools.client.model.ThirdPartyPrincipal;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Identity delegation history of an authenticated service account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceAccountDelegationInfo {
  public static final String SERIALIZED_NAME_FIRST_PARTY_PRINCIPAL = "firstPartyPrincipal";
  @SerializedName(SERIALIZED_NAME_FIRST_PARTY_PRINCIPAL)
  private FirstPartyPrincipal firstPartyPrincipal;

  public static final String SERIALIZED_NAME_PRINCIPAL_SUBJECT = "principalSubject";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_SUBJECT)
  private String principalSubject;

  public static final String SERIALIZED_NAME_THIRD_PARTY_PRINCIPAL = "thirdPartyPrincipal";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_PRINCIPAL)
  private ThirdPartyPrincipal thirdPartyPrincipal;

  public ServiceAccountDelegationInfo() {
  }

  public ServiceAccountDelegationInfo firstPartyPrincipal(FirstPartyPrincipal firstPartyPrincipal) {
    this.firstPartyPrincipal = firstPartyPrincipal;
    return this;
  }

  /**
   * Get firstPartyPrincipal
   * @return firstPartyPrincipal
   */
  @javax.annotation.Nullable
  public FirstPartyPrincipal getFirstPartyPrincipal() {
    return firstPartyPrincipal;
  }

  public void setFirstPartyPrincipal(FirstPartyPrincipal firstPartyPrincipal) {
    this.firstPartyPrincipal = firstPartyPrincipal;
  }


  public ServiceAccountDelegationInfo principalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
    return this;
  }

  /**
   * A string representing the principal_subject associated with the identity. For most identities, the format will be &#x60;principal://iam.googleapis.com/{identity pool name}/subject/{subject)&#x60; except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format &#x60;serviceAccount:{identity pool name}[{subject}]&#x60;
   * @return principalSubject
   */
  @javax.annotation.Nullable
  public String getPrincipalSubject() {
    return principalSubject;
  }

  public void setPrincipalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
  }


  public ServiceAccountDelegationInfo thirdPartyPrincipal(ThirdPartyPrincipal thirdPartyPrincipal) {
    this.thirdPartyPrincipal = thirdPartyPrincipal;
    return this;
  }

  /**
   * Get thirdPartyPrincipal
   * @return thirdPartyPrincipal
   */
  @javax.annotation.Nullable
  public ThirdPartyPrincipal getThirdPartyPrincipal() {
    return thirdPartyPrincipal;
  }

  public void setThirdPartyPrincipal(ThirdPartyPrincipal thirdPartyPrincipal) {
    this.thirdPartyPrincipal = thirdPartyPrincipal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceAccountDelegationInfo serviceAccountDelegationInfo = (ServiceAccountDelegationInfo) o;
    return Objects.equals(this.firstPartyPrincipal, serviceAccountDelegationInfo.firstPartyPrincipal) &&
        Objects.equals(this.principalSubject, serviceAccountDelegationInfo.principalSubject) &&
        Objects.equals(this.thirdPartyPrincipal, serviceAccountDelegationInfo.thirdPartyPrincipal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstPartyPrincipal, principalSubject, thirdPartyPrincipal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceAccountDelegationInfo {\n");
    sb.append("    firstPartyPrincipal: ").append(toIndentedString(firstPartyPrincipal)).append("\n");
    sb.append("    principalSubject: ").append(toIndentedString(principalSubject)).append("\n");
    sb.append("    thirdPartyPrincipal: ").append(toIndentedString(thirdPartyPrincipal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstPartyPrincipal");
    openapiFields.add("principalSubject");
    openapiFields.add("thirdPartyPrincipal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceAccountDelegationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceAccountDelegationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceAccountDelegationInfo is not found in the empty JSON string", ServiceAccountDelegationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceAccountDelegationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceAccountDelegationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `firstPartyPrincipal`
      if (jsonObj.get("firstPartyPrincipal") != null && !jsonObj.get("firstPartyPrincipal").isJsonNull()) {
        FirstPartyPrincipal.validateJsonElement(jsonObj.get("firstPartyPrincipal"));
      }
      if ((jsonObj.get("principalSubject") != null && !jsonObj.get("principalSubject").isJsonNull()) && !jsonObj.get("principalSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalSubject").toString()));
      }
      // validate the optional field `thirdPartyPrincipal`
      if (jsonObj.get("thirdPartyPrincipal") != null && !jsonObj.get("thirdPartyPrincipal").isJsonNull()) {
        ThirdPartyPrincipal.validateJsonElement(jsonObj.get("thirdPartyPrincipal"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceAccountDelegationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceAccountDelegationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceAccountDelegationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceAccountDelegationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceAccountDelegationInfo>() {
           @Override
           public void write(JsonWriter out, ServiceAccountDelegationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceAccountDelegationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceAccountDelegationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceAccountDelegationInfo
   * @throws IOException if the JSON string is invalid with respect to ServiceAccountDelegationInfo
   */
  public static ServiceAccountDelegationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceAccountDelegationInfo.class);
  }

  /**
   * Convert an instance of ServiceAccountDelegationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

