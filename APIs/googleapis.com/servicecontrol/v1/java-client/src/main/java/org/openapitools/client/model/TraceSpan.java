/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Attributes;
import org.openapitools.client.model.Status;
import org.openapitools.client.model.TruncatableString;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A span represents a single operation within a trace. Spans can be nested to form a trace tree. Often, a trace contains a root span that describes the end-to-end latency, and one or more subspans for its sub-operations. A trace can also contain multiple root spans, or none at all. Spans do not need to be contiguousâ€”there may be gaps or overlaps between spans in a trace.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TraceSpan {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Attributes attributes;

  public static final String SERIALIZED_NAME_CHILD_SPAN_COUNT = "childSpanCount";
  @SerializedName(SERIALIZED_NAME_CHILD_SPAN_COUNT)
  private Integer childSpanCount;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private TruncatableString displayName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_SPAN_ID = "parentSpanId";
  @SerializedName(SERIALIZED_NAME_PARENT_SPAN_ID)
  private String parentSpanId;

  public static final String SERIALIZED_NAME_SAME_PROCESS_AS_PARENT_SPAN = "sameProcessAsParentSpan";
  @SerializedName(SERIALIZED_NAME_SAME_PROCESS_AS_PARENT_SPAN)
  private Boolean sameProcessAsParentSpan;

  public static final String SERIALIZED_NAME_SPAN_ID = "spanId";
  @SerializedName(SERIALIZED_NAME_SPAN_ID)
  private String spanId;

  /**
   * Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using &#x60;CLIENT&#x60; (caller) and &#x60;SERVER&#x60; (callee) to identify an RPC call.
   */
  @JsonAdapter(SpanKindEnum.Adapter.class)
  public enum SpanKindEnum {
    SPAN_KIND_UNSPECIFIED("SPAN_KIND_UNSPECIFIED"),
    
    INTERNAL("INTERNAL"),
    
    SERVER("SERVER"),
    
    CLIENT("CLIENT"),
    
    PRODUCER("PRODUCER"),
    
    CONSUMER("CONSUMER");

    private String value;

    SpanKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpanKindEnum fromValue(String value) {
      for (SpanKindEnum b : SpanKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpanKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpanKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpanKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpanKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpanKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPAN_KIND = "spanKind";
  @SerializedName(SERIALIZED_NAME_SPAN_KIND)
  private SpanKindEnum spanKind;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public TraceSpan() {
  }

  public TraceSpan attributes(Attributes attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public Attributes getAttributes() {
    return attributes;
  }

  public void setAttributes(Attributes attributes) {
    this.attributes = attributes;
  }


  public TraceSpan childSpanCount(Integer childSpanCount) {
    this.childSpanCount = childSpanCount;
    return this;
  }

  /**
   * An optional number of child spans that were generated while this span was active. If set, allows implementation to detect missing child spans.
   * @return childSpanCount
   */
  @javax.annotation.Nullable
  public Integer getChildSpanCount() {
    return childSpanCount;
  }

  public void setChildSpanCount(Integer childSpanCount) {
    this.childSpanCount = childSpanCount;
  }


  public TraceSpan displayName(TruncatableString displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public TruncatableString getDisplayName() {
    return displayName;
  }

  public void setDisplayName(TruncatableString displayName) {
    this.displayName = displayName;
  }


  public TraceSpan endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the span. On the client side, this is the time kept by the local machine where the span execution ends. On the server side, this is the time when the server application handler stops running.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public TraceSpan name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the span in the following format: projects/[PROJECT_ID]/traces/[TRACE_ID]/spans/SPAN_ID is a unique identifier for a trace within a project; it is a 32-character hexadecimal encoding of a 16-byte array. [SPAN_ID] is a unique identifier for a span within a trace; it is a 16-character hexadecimal encoding of an 8-byte array.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TraceSpan parentSpanId(String parentSpanId) {
    this.parentSpanId = parentSpanId;
    return this;
  }

  /**
   * The [SPAN_ID] of this span&#39;s parent span. If this is a root span, then this field must be empty.
   * @return parentSpanId
   */
  @javax.annotation.Nullable
  public String getParentSpanId() {
    return parentSpanId;
  }

  public void setParentSpanId(String parentSpanId) {
    this.parentSpanId = parentSpanId;
  }


  public TraceSpan sameProcessAsParentSpan(Boolean sameProcessAsParentSpan) {
    this.sameProcessAsParentSpan = sameProcessAsParentSpan;
    return this;
  }

  /**
   * (Optional) Set this parameter to indicate whether this span is in the same process as its parent. If you do not set this parameter, Stackdriver Trace is unable to take advantage of this helpful information.
   * @return sameProcessAsParentSpan
   */
  @javax.annotation.Nullable
  public Boolean getSameProcessAsParentSpan() {
    return sameProcessAsParentSpan;
  }

  public void setSameProcessAsParentSpan(Boolean sameProcessAsParentSpan) {
    this.sameProcessAsParentSpan = sameProcessAsParentSpan;
  }


  public TraceSpan spanId(String spanId) {
    this.spanId = spanId;
    return this;
  }

  /**
   * The [SPAN_ID] portion of the span&#39;s resource name.
   * @return spanId
   */
  @javax.annotation.Nullable
  public String getSpanId() {
    return spanId;
  }

  public void setSpanId(String spanId) {
    this.spanId = spanId;
  }


  public TraceSpan spanKind(SpanKindEnum spanKind) {
    this.spanKind = spanKind;
    return this;
  }

  /**
   * Distinguishes between spans generated in a particular context. For example, two spans with the same name may be distinguished using &#x60;CLIENT&#x60; (caller) and &#x60;SERVER&#x60; (callee) to identify an RPC call.
   * @return spanKind
   */
  @javax.annotation.Nullable
  public SpanKindEnum getSpanKind() {
    return spanKind;
  }

  public void setSpanKind(SpanKindEnum spanKind) {
    this.spanKind = spanKind;
  }


  public TraceSpan startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the span. On the client side, this is the time kept by the local machine where the span execution starts. On the server side, this is the time when the server&#39;s application handler starts running.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public TraceSpan status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TraceSpan traceSpan = (TraceSpan) o;
    return Objects.equals(this.attributes, traceSpan.attributes) &&
        Objects.equals(this.childSpanCount, traceSpan.childSpanCount) &&
        Objects.equals(this.displayName, traceSpan.displayName) &&
        Objects.equals(this.endTime, traceSpan.endTime) &&
        Objects.equals(this.name, traceSpan.name) &&
        Objects.equals(this.parentSpanId, traceSpan.parentSpanId) &&
        Objects.equals(this.sameProcessAsParentSpan, traceSpan.sameProcessAsParentSpan) &&
        Objects.equals(this.spanId, traceSpan.spanId) &&
        Objects.equals(this.spanKind, traceSpan.spanKind) &&
        Objects.equals(this.startTime, traceSpan.startTime) &&
        Objects.equals(this.status, traceSpan.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, childSpanCount, displayName, endTime, name, parentSpanId, sameProcessAsParentSpan, spanId, spanKind, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TraceSpan {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    childSpanCount: ").append(toIndentedString(childSpanCount)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentSpanId: ").append(toIndentedString(parentSpanId)).append("\n");
    sb.append("    sameProcessAsParentSpan: ").append(toIndentedString(sameProcessAsParentSpan)).append("\n");
    sb.append("    spanId: ").append(toIndentedString(spanId)).append("\n");
    sb.append("    spanKind: ").append(toIndentedString(spanKind)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("childSpanCount");
    openapiFields.add("displayName");
    openapiFields.add("endTime");
    openapiFields.add("name");
    openapiFields.add("parentSpanId");
    openapiFields.add("sameProcessAsParentSpan");
    openapiFields.add("spanId");
    openapiFields.add("spanKind");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TraceSpan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TraceSpan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TraceSpan is not found in the empty JSON string", TraceSpan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TraceSpan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TraceSpan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        Attributes.validateJsonElement(jsonObj.get("attributes"));
      }
      // validate the optional field `displayName`
      if (jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) {
        TruncatableString.validateJsonElement(jsonObj.get("displayName"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parentSpanId") != null && !jsonObj.get("parentSpanId").isJsonNull()) && !jsonObj.get("parentSpanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentSpanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentSpanId").toString()));
      }
      if ((jsonObj.get("spanId") != null && !jsonObj.get("spanId").isJsonNull()) && !jsonObj.get("spanId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spanId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spanId").toString()));
      }
      if ((jsonObj.get("spanKind") != null && !jsonObj.get("spanKind").isJsonNull()) && !jsonObj.get("spanKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spanKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spanKind").toString()));
      }
      // validate the optional field `spanKind`
      if (jsonObj.get("spanKind") != null && !jsonObj.get("spanKind").isJsonNull()) {
        SpanKindEnum.validateJsonElement(jsonObj.get("spanKind"));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TraceSpan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TraceSpan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TraceSpan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TraceSpan.class));

       return (TypeAdapter<T>) new TypeAdapter<TraceSpan>() {
           @Override
           public void write(JsonWriter out, TraceSpan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TraceSpan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TraceSpan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TraceSpan
   * @throws IOException if the JSON string is invalid with respect to TraceSpan
   */
  public static TraceSpan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TraceSpan.class);
  }

  /**
   * Convert an instance of TraceSpan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

