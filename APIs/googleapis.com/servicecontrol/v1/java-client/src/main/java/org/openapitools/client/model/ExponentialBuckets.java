/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describing buckets with exponentially growing width.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExponentialBuckets {
  public static final String SERIALIZED_NAME_GROWTH_FACTOR = "growthFactor";
  @SerializedName(SERIALIZED_NAME_GROWTH_FACTOR)
  private Double growthFactor;

  public static final String SERIALIZED_NAME_NUM_FINITE_BUCKETS = "numFiniteBuckets";
  @SerializedName(SERIALIZED_NAME_NUM_FINITE_BUCKETS)
  private Integer numFiniteBuckets;

  public static final String SERIALIZED_NAME_SCALE = "scale";
  @SerializedName(SERIALIZED_NAME_SCALE)
  private Double scale;

  public ExponentialBuckets() {
  }

  public ExponentialBuckets growthFactor(Double growthFactor) {
    this.growthFactor = growthFactor;
    return this;
  }

  /**
   * The i&#39;th exponential bucket covers the interval [scale * growth_factor^(i-1), scale * growth_factor^i) where i ranges from 1 to num_finite_buckets inclusive. Must be larger than 1.0.
   * @return growthFactor
   */
  @javax.annotation.Nullable
  public Double getGrowthFactor() {
    return growthFactor;
  }

  public void setGrowthFactor(Double growthFactor) {
    this.growthFactor = growthFactor;
  }


  public ExponentialBuckets numFiniteBuckets(Integer numFiniteBuckets) {
    this.numFiniteBuckets = numFiniteBuckets;
    return this;
  }

  /**
   * The number of finite buckets. With the underflow and overflow buckets, the total number of buckets is &#x60;num_finite_buckets&#x60; + 2. See comments on &#x60;bucket_options&#x60; for details.
   * @return numFiniteBuckets
   */
  @javax.annotation.Nullable
  public Integer getNumFiniteBuckets() {
    return numFiniteBuckets;
  }

  public void setNumFiniteBuckets(Integer numFiniteBuckets) {
    this.numFiniteBuckets = numFiniteBuckets;
  }


  public ExponentialBuckets scale(Double scale) {
    this.scale = scale;
    return this;
  }

  /**
   * The i&#39;th exponential bucket covers the interval [scale * growth_factor^(i-1), scale * growth_factor^i) where i ranges from 1 to num_finite_buckets inclusive. Must be &gt; 0.
   * @return scale
   */
  @javax.annotation.Nullable
  public Double getScale() {
    return scale;
  }

  public void setScale(Double scale) {
    this.scale = scale;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExponentialBuckets exponentialBuckets = (ExponentialBuckets) o;
    return Objects.equals(this.growthFactor, exponentialBuckets.growthFactor) &&
        Objects.equals(this.numFiniteBuckets, exponentialBuckets.numFiniteBuckets) &&
        Objects.equals(this.scale, exponentialBuckets.scale);
  }

  @Override
  public int hashCode() {
    return Objects.hash(growthFactor, numFiniteBuckets, scale);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExponentialBuckets {\n");
    sb.append("    growthFactor: ").append(toIndentedString(growthFactor)).append("\n");
    sb.append("    numFiniteBuckets: ").append(toIndentedString(numFiniteBuckets)).append("\n");
    sb.append("    scale: ").append(toIndentedString(scale)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("growthFactor");
    openapiFields.add("numFiniteBuckets");
    openapiFields.add("scale");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExponentialBuckets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExponentialBuckets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExponentialBuckets is not found in the empty JSON string", ExponentialBuckets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExponentialBuckets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExponentialBuckets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExponentialBuckets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExponentialBuckets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExponentialBuckets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExponentialBuckets.class));

       return (TypeAdapter<T>) new TypeAdapter<ExponentialBuckets>() {
           @Override
           public void write(JsonWriter out, ExponentialBuckets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExponentialBuckets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExponentialBuckets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExponentialBuckets
   * @throws IOException if the JSON string is invalid with respect to ExponentialBuckets
   */
  public static ExponentialBuckets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExponentialBuckets.class);
  }

  /**
   * Convert an instance of ExponentialBuckets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

