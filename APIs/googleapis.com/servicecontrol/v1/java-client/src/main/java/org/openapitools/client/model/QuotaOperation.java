/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.MetricValueSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents information regarding a quota operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuotaOperation {
  public static final String SERIALIZED_NAME_CONSUMER_ID = "consumerId";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ID)
  private String consumerId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_QUOTA_METRICS = "quotaMetrics";
  @SerializedName(SERIALIZED_NAME_QUOTA_METRICS)
  private List<MetricValueSet> quotaMetrics = new ArrayList<>();

  /**
   * Quota mode for this operation.
   */
  @JsonAdapter(QuotaModeEnum.Adapter.class)
  public enum QuotaModeEnum {
    UNSPECIFIED("UNSPECIFIED"),
    
    NORMAL("NORMAL"),
    
    BEST_EFFORT("BEST_EFFORT"),
    
    CHECK_ONLY("CHECK_ONLY"),
    
    ADJUST_ONLY("ADJUST_ONLY");

    private String value;

    QuotaModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static QuotaModeEnum fromValue(String value) {
      for (QuotaModeEnum b : QuotaModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<QuotaModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final QuotaModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public QuotaModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return QuotaModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      QuotaModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_QUOTA_MODE = "quotaMode";
  @SerializedName(SERIALIZED_NAME_QUOTA_MODE)
  private QuotaModeEnum quotaMode;

  public QuotaOperation() {
  }

  public QuotaOperation consumerId(String consumerId) {
    this.consumerId = consumerId;
    return this;
  }

  /**
   * Identity of the consumer for whom this quota operation is being performed. This can be in one of the following formats: project:, project_number:, api_key:.
   * @return consumerId
   */
  @javax.annotation.Nullable
  public String getConsumerId() {
    return consumerId;
  }

  public void setConsumerId(String consumerId) {
    this.consumerId = consumerId;
  }


  public QuotaOperation labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public QuotaOperation putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Labels describing the operation.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public QuotaOperation methodName(String methodName) {
    this.methodName = methodName;
    return this;
  }

  /**
   * Fully qualified name of the API method for which this quota operation is requested. This name is used for matching quota rules or metric rules and billing status rules defined in service configuration. This field should not be set if any of the following is true: (1) the quota operation is performed on non-API resources. (2) quota_metrics is set because the caller is doing quota override. Example of an RPC method name: google.example.library.v1.LibraryService.CreateShelf
   * @return methodName
   */
  @javax.annotation.Nullable
  public String getMethodName() {
    return methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public QuotaOperation operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * Identity of the operation. For Allocation Quota, this is expected to be unique within the scope of the service that generated the operation, and guarantees idempotency in case of retries. In order to ensure best performance and latency in the Quota backends, operation_ids are optimally associated with time, so that related operations can be accessed fast in storage. For this reason, the recommended token for services that intend to operate at a high QPS is Unix time in nanos + UUID
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public QuotaOperation quotaMetrics(List<MetricValueSet> quotaMetrics) {
    this.quotaMetrics = quotaMetrics;
    return this;
  }

  public QuotaOperation addQuotaMetricsItem(MetricValueSet quotaMetricsItem) {
    if (this.quotaMetrics == null) {
      this.quotaMetrics = new ArrayList<>();
    }
    this.quotaMetrics.add(quotaMetricsItem);
    return this;
  }

  /**
   * Represents information about this operation. Each MetricValueSet corresponds to a metric defined in the service configuration. The data type used in the MetricValueSet must agree with the data type specified in the metric definition. Within a single operation, it is not allowed to have more than one MetricValue instances that have the same metric names and identical label value combinations. If a request has such duplicated MetricValue instances, the entire request is rejected with an invalid argument error. This field is mutually exclusive with method_name.
   * @return quotaMetrics
   */
  @javax.annotation.Nullable
  public List<MetricValueSet> getQuotaMetrics() {
    return quotaMetrics;
  }

  public void setQuotaMetrics(List<MetricValueSet> quotaMetrics) {
    this.quotaMetrics = quotaMetrics;
  }


  public QuotaOperation quotaMode(QuotaModeEnum quotaMode) {
    this.quotaMode = quotaMode;
    return this;
  }

  /**
   * Quota mode for this operation.
   * @return quotaMode
   */
  @javax.annotation.Nullable
  public QuotaModeEnum getQuotaMode() {
    return quotaMode;
  }

  public void setQuotaMode(QuotaModeEnum quotaMode) {
    this.quotaMode = quotaMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuotaOperation quotaOperation = (QuotaOperation) o;
    return Objects.equals(this.consumerId, quotaOperation.consumerId) &&
        Objects.equals(this.labels, quotaOperation.labels) &&
        Objects.equals(this.methodName, quotaOperation.methodName) &&
        Objects.equals(this.operationId, quotaOperation.operationId) &&
        Objects.equals(this.quotaMetrics, quotaOperation.quotaMetrics) &&
        Objects.equals(this.quotaMode, quotaOperation.quotaMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerId, labels, methodName, operationId, quotaMetrics, quotaMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuotaOperation {\n");
    sb.append("    consumerId: ").append(toIndentedString(consumerId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    quotaMetrics: ").append(toIndentedString(quotaMetrics)).append("\n");
    sb.append("    quotaMode: ").append(toIndentedString(quotaMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerId");
    openapiFields.add("labels");
    openapiFields.add("methodName");
    openapiFields.add("operationId");
    openapiFields.add("quotaMetrics");
    openapiFields.add("quotaMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuotaOperation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuotaOperation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuotaOperation is not found in the empty JSON string", QuotaOperation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuotaOperation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuotaOperation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerId") != null && !jsonObj.get("consumerId").isJsonNull()) && !jsonObj.get("consumerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerId").toString()));
      }
      if ((jsonObj.get("methodName") != null && !jsonObj.get("methodName").isJsonNull()) && !jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      if (jsonObj.get("quotaMetrics") != null && !jsonObj.get("quotaMetrics").isJsonNull()) {
        JsonArray jsonArrayquotaMetrics = jsonObj.getAsJsonArray("quotaMetrics");
        if (jsonArrayquotaMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("quotaMetrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `quotaMetrics` to be an array in the JSON string but got `%s`", jsonObj.get("quotaMetrics").toString()));
          }

          // validate the optional field `quotaMetrics` (array)
          for (int i = 0; i < jsonArrayquotaMetrics.size(); i++) {
            MetricValueSet.validateJsonElement(jsonArrayquotaMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("quotaMode") != null && !jsonObj.get("quotaMode").isJsonNull()) && !jsonObj.get("quotaMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quotaMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quotaMode").toString()));
      }
      // validate the optional field `quotaMode`
      if (jsonObj.get("quotaMode") != null && !jsonObj.get("quotaMode").isJsonNull()) {
        QuotaModeEnum.validateJsonElement(jsonObj.get("quotaMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuotaOperation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuotaOperation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuotaOperation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuotaOperation.class));

       return (TypeAdapter<T>) new TypeAdapter<QuotaOperation>() {
           @Override
           public void write(JsonWriter out, QuotaOperation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuotaOperation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuotaOperation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuotaOperation
   * @throws IOException if the JSON string is invalid with respect to QuotaOperation
   */
  public static QuotaOperation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuotaOperation.class);
  }

  /**
   * Convert an instance of QuotaOperation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

