/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CheckError;
import org.openapitools.client.model.CheckInfo;
import org.openapitools.client.model.QuotaInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for the Check method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:21.369626-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckResponse {
  public static final String SERIALIZED_NAME_CHECK_ERRORS = "checkErrors";
  @SerializedName(SERIALIZED_NAME_CHECK_ERRORS)
  private List<CheckError> checkErrors = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHECK_INFO = "checkInfo";
  @SerializedName(SERIALIZED_NAME_CHECK_INFO)
  private CheckInfo checkInfo;

  public static final String SERIALIZED_NAME_OPERATION_ID = "operationId";
  @SerializedName(SERIALIZED_NAME_OPERATION_ID)
  private String operationId;

  public static final String SERIALIZED_NAME_QUOTA_INFO = "quotaInfo";
  @SerializedName(SERIALIZED_NAME_QUOTA_INFO)
  private QuotaInfo quotaInfo;

  public static final String SERIALIZED_NAME_SERVICE_CONFIG_ID = "serviceConfigId";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONFIG_ID)
  private String serviceConfigId;

  public static final String SERIALIZED_NAME_SERVICE_ROLLOUT_ID = "serviceRolloutId";
  @SerializedName(SERIALIZED_NAME_SERVICE_ROLLOUT_ID)
  private String serviceRolloutId;

  public CheckResponse() {
  }

  public CheckResponse checkErrors(List<CheckError> checkErrors) {
    this.checkErrors = checkErrors;
    return this;
  }

  public CheckResponse addCheckErrorsItem(CheckError checkErrorsItem) {
    if (this.checkErrors == null) {
      this.checkErrors = new ArrayList<>();
    }
    this.checkErrors.add(checkErrorsItem);
    return this;
  }

  /**
   * Indicate the decision of the check. If no check errors are present, the service should process the operation. Otherwise the service should use the list of errors to determine the appropriate action.
   * @return checkErrors
   */
  @javax.annotation.Nullable
  public List<CheckError> getCheckErrors() {
    return checkErrors;
  }

  public void setCheckErrors(List<CheckError> checkErrors) {
    this.checkErrors = checkErrors;
  }


  public CheckResponse checkInfo(CheckInfo checkInfo) {
    this.checkInfo = checkInfo;
    return this;
  }

  /**
   * Get checkInfo
   * @return checkInfo
   */
  @javax.annotation.Nullable
  public CheckInfo getCheckInfo() {
    return checkInfo;
  }

  public void setCheckInfo(CheckInfo checkInfo) {
    this.checkInfo = checkInfo;
  }


  public CheckResponse operationId(String operationId) {
    this.operationId = operationId;
    return this;
  }

  /**
   * The same operation_id value used in the CheckRequest. Used for logging and diagnostics purposes.
   * @return operationId
   */
  @javax.annotation.Nullable
  public String getOperationId() {
    return operationId;
  }

  public void setOperationId(String operationId) {
    this.operationId = operationId;
  }


  public CheckResponse quotaInfo(QuotaInfo quotaInfo) {
    this.quotaInfo = quotaInfo;
    return this;
  }

  /**
   * Get quotaInfo
   * @return quotaInfo
   */
  @javax.annotation.Nullable
  public QuotaInfo getQuotaInfo() {
    return quotaInfo;
  }

  public void setQuotaInfo(QuotaInfo quotaInfo) {
    this.quotaInfo = quotaInfo;
  }


  public CheckResponse serviceConfigId(String serviceConfigId) {
    this.serviceConfigId = serviceConfigId;
    return this;
  }

  /**
   * The actual config id used to process the request.
   * @return serviceConfigId
   */
  @javax.annotation.Nullable
  public String getServiceConfigId() {
    return serviceConfigId;
  }

  public void setServiceConfigId(String serviceConfigId) {
    this.serviceConfigId = serviceConfigId;
  }


  public CheckResponse serviceRolloutId(String serviceRolloutId) {
    this.serviceRolloutId = serviceRolloutId;
    return this;
  }

  /**
   * The current service rollout id used to process the request.
   * @return serviceRolloutId
   */
  @javax.annotation.Nullable
  public String getServiceRolloutId() {
    return serviceRolloutId;
  }

  public void setServiceRolloutId(String serviceRolloutId) {
    this.serviceRolloutId = serviceRolloutId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckResponse checkResponse = (CheckResponse) o;
    return Objects.equals(this.checkErrors, checkResponse.checkErrors) &&
        Objects.equals(this.checkInfo, checkResponse.checkInfo) &&
        Objects.equals(this.operationId, checkResponse.operationId) &&
        Objects.equals(this.quotaInfo, checkResponse.quotaInfo) &&
        Objects.equals(this.serviceConfigId, checkResponse.serviceConfigId) &&
        Objects.equals(this.serviceRolloutId, checkResponse.serviceRolloutId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkErrors, checkInfo, operationId, quotaInfo, serviceConfigId, serviceRolloutId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckResponse {\n");
    sb.append("    checkErrors: ").append(toIndentedString(checkErrors)).append("\n");
    sb.append("    checkInfo: ").append(toIndentedString(checkInfo)).append("\n");
    sb.append("    operationId: ").append(toIndentedString(operationId)).append("\n");
    sb.append("    quotaInfo: ").append(toIndentedString(quotaInfo)).append("\n");
    sb.append("    serviceConfigId: ").append(toIndentedString(serviceConfigId)).append("\n");
    sb.append("    serviceRolloutId: ").append(toIndentedString(serviceRolloutId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkErrors");
    openapiFields.add("checkInfo");
    openapiFields.add("operationId");
    openapiFields.add("quotaInfo");
    openapiFields.add("serviceConfigId");
    openapiFields.add("serviceRolloutId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckResponse is not found in the empty JSON string", CheckResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("checkErrors") != null && !jsonObj.get("checkErrors").isJsonNull()) {
        JsonArray jsonArraycheckErrors = jsonObj.getAsJsonArray("checkErrors");
        if (jsonArraycheckErrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("checkErrors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `checkErrors` to be an array in the JSON string but got `%s`", jsonObj.get("checkErrors").toString()));
          }

          // validate the optional field `checkErrors` (array)
          for (int i = 0; i < jsonArraycheckErrors.size(); i++) {
            CheckError.validateJsonElement(jsonArraycheckErrors.get(i));
          };
        }
      }
      // validate the optional field `checkInfo`
      if (jsonObj.get("checkInfo") != null && !jsonObj.get("checkInfo").isJsonNull()) {
        CheckInfo.validateJsonElement(jsonObj.get("checkInfo"));
      }
      if ((jsonObj.get("operationId") != null && !jsonObj.get("operationId").isJsonNull()) && !jsonObj.get("operationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationId").toString()));
      }
      // validate the optional field `quotaInfo`
      if (jsonObj.get("quotaInfo") != null && !jsonObj.get("quotaInfo").isJsonNull()) {
        QuotaInfo.validateJsonElement(jsonObj.get("quotaInfo"));
      }
      if ((jsonObj.get("serviceConfigId") != null && !jsonObj.get("serviceConfigId").isJsonNull()) && !jsonObj.get("serviceConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceConfigId").toString()));
      }
      if ((jsonObj.get("serviceRolloutId") != null && !jsonObj.get("serviceRolloutId").isJsonNull()) && !jsonObj.get("serviceRolloutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceRolloutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceRolloutId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckResponse>() {
           @Override
           public void write(JsonWriter out, CheckResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckResponse
   * @throws IOException if the JSON string is invalid with respect to CheckResponse
   */
  public static CheckResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckResponse.class);
  }

  /**
   * Convert an instance of CheckResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

