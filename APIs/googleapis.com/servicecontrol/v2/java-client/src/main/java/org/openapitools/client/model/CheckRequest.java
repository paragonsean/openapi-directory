/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AttributeContext;
import org.openapitools.client.model.ResourceInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for the Check method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:15.323338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckRequest {
  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private AttributeContext attributes;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private String flags;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<ResourceInfo> resources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CONFIG_ID = "serviceConfigId";
  @SerializedName(SERIALIZED_NAME_SERVICE_CONFIG_ID)
  private String serviceConfigId;

  public CheckRequest() {
  }

  public CheckRequest attributes(AttributeContext attributes) {
    this.attributes = attributes;
    return this;
  }

  /**
   * Get attributes
   * @return attributes
   */
  @javax.annotation.Nullable
  public AttributeContext getAttributes() {
    return attributes;
  }

  public void setAttributes(AttributeContext attributes) {
    this.attributes = attributes;
  }


  public CheckRequest flags(String flags) {
    this.flags = flags;
    return this;
  }

  /**
   * Optional. Contains a comma-separated list of flags.
   * @return flags
   */
  @javax.annotation.Nullable
  public String getFlags() {
    return flags;
  }

  public void setFlags(String flags) {
    this.flags = flags;
  }


  public CheckRequest resources(List<ResourceInfo> resources) {
    this.resources = resources;
    return this;
  }

  public CheckRequest addResourcesItem(ResourceInfo resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Describes the resources and the policies applied to each resource.
   * @return resources
   */
  @javax.annotation.Nullable
  public List<ResourceInfo> getResources() {
    return resources;
  }

  public void setResources(List<ResourceInfo> resources) {
    this.resources = resources;
  }


  public CheckRequest serviceConfigId(String serviceConfigId) {
    this.serviceConfigId = serviceConfigId;
    return this;
  }

  /**
   * Specifies the version of the service configuration that should be used to process the request. Must not be empty. Set this field to &#39;latest&#39; to specify using the latest configuration.
   * @return serviceConfigId
   */
  @javax.annotation.Nullable
  public String getServiceConfigId() {
    return serviceConfigId;
  }

  public void setServiceConfigId(String serviceConfigId) {
    this.serviceConfigId = serviceConfigId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckRequest checkRequest = (CheckRequest) o;
    return Objects.equals(this.attributes, checkRequest.attributes) &&
        Objects.equals(this.flags, checkRequest.flags) &&
        Objects.equals(this.resources, checkRequest.resources) &&
        Objects.equals(this.serviceConfigId, checkRequest.serviceConfigId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attributes, flags, resources, serviceConfigId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckRequest {\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    serviceConfigId: ").append(toIndentedString(serviceConfigId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attributes");
    openapiFields.add("flags");
    openapiFields.add("resources");
    openapiFields.add("serviceConfigId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckRequest is not found in the empty JSON string", CheckRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attributes`
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull()) {
        AttributeContext.validateJsonElement(jsonObj.get("attributes"));
      }
      if ((jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull()) && !jsonObj.get("flags").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            ResourceInfo.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceConfigId") != null && !jsonObj.get("serviceConfigId").isJsonNull()) && !jsonObj.get("serviceConfigId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceConfigId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckRequest>() {
           @Override
           public void write(JsonWriter out, CheckRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckRequest
   * @throws IOException if the JSON string is invalid with respect to CheckRequest
   */
  public static CheckRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckRequest.class);
  }

  /**
   * Convert an instance of CheckRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

