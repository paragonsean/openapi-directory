/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata describing the service and additional service specific information used to identify the job or unit of work at hand.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:15.323338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceMetadata {
  public static final String SERIALIZED_NAME_JOB_METADATA = "jobMetadata";
  @SerializedName(SERIALIZED_NAME_JOB_METADATA)
  private Map<String, Object> jobMetadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PRINCIPAL_SUBJECT = "principalSubject";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_SUBJECT)
  private String principalSubject;

  public static final String SERIALIZED_NAME_SERVICE_DOMAIN = "serviceDomain";
  @SerializedName(SERIALIZED_NAME_SERVICE_DOMAIN)
  private String serviceDomain;

  public ServiceMetadata() {
  }

  public ServiceMetadata jobMetadata(Map<String, Object> jobMetadata) {
    this.jobMetadata = jobMetadata;
    return this;
  }

  public ServiceMetadata putJobMetadataItem(String key, Object jobMetadataItem) {
    if (this.jobMetadata == null) {
      this.jobMetadata = new HashMap<>();
    }
    this.jobMetadata.put(key, jobMetadataItem);
    return this;
  }

  /**
   * Additional metadata provided by service teams to describe service specific job information that was triggered by the original principal.
   * @return jobMetadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getJobMetadata() {
    return jobMetadata;
  }

  public void setJobMetadata(Map<String, Object> jobMetadata) {
    this.jobMetadata = jobMetadata;
  }


  public ServiceMetadata principalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
    return this;
  }

  /**
   * A string representing the principal_subject associated with the identity. For most identities, the format will be &#x60;principal://iam.googleapis.com/{identity pool name}/subject/{subject)&#x60; except for some GKE identities (GKE_WORKLOAD, FREEFORM, GKE_HUB_WORKLOAD) that are still in the legacy format &#x60;serviceAccount:{identity pool name}[{subject}]&#x60; If the identity is a Google account (e.g. workspace user account or service account), this will be the email of the prefixed by &#x60;serviceAccount:&#x60;. For example: &#x60;serviceAccount:my-service-account@project-1.iam.gserviceaccount.com&#x60;. If the identity is an individual user, the identity will be formatted as: &#x60;user:user_ABC@email.com&#x60;.
   * @return principalSubject
   */
  @javax.annotation.Nullable
  public String getPrincipalSubject() {
    return principalSubject;
  }

  public void setPrincipalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
  }


  public ServiceMetadata serviceDomain(String serviceDomain) {
    this.serviceDomain = serviceDomain;
    return this;
  }

  /**
   * The service&#39;s fully qualified domain name, e.g. \&quot;dataproc.googleapis.com\&quot;.
   * @return serviceDomain
   */
  @javax.annotation.Nullable
  public String getServiceDomain() {
    return serviceDomain;
  }

  public void setServiceDomain(String serviceDomain) {
    this.serviceDomain = serviceDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceMetadata serviceMetadata = (ServiceMetadata) o;
    return Objects.equals(this.jobMetadata, serviceMetadata.jobMetadata) &&
        Objects.equals(this.principalSubject, serviceMetadata.principalSubject) &&
        Objects.equals(this.serviceDomain, serviceMetadata.serviceDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobMetadata, principalSubject, serviceDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceMetadata {\n");
    sb.append("    jobMetadata: ").append(toIndentedString(jobMetadata)).append("\n");
    sb.append("    principalSubject: ").append(toIndentedString(principalSubject)).append("\n");
    sb.append("    serviceDomain: ").append(toIndentedString(serviceDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("jobMetadata");
    openapiFields.add("principalSubject");
    openapiFields.add("serviceDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceMetadata is not found in the empty JSON string", ServiceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("principalSubject") != null && !jsonObj.get("principalSubject").isJsonNull()) && !jsonObj.get("principalSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalSubject").toString()));
      }
      if ((jsonObj.get("serviceDomain") != null && !jsonObj.get("serviceDomain").isJsonNull()) && !jsonObj.get("serviceDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceMetadata>() {
           @Override
           public void write(JsonWriter out, ServiceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceMetadata
   * @throws IOException if the JSON string is invalid with respect to ServiceMetadata
   */
  public static ServiceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceMetadata.class);
  }

  /**
   * Convert an instance of ServiceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

