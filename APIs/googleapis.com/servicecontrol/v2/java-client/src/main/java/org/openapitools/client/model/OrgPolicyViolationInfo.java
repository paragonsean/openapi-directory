/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ViolationInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents OrgPolicy Violation information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:15.323338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OrgPolicyViolationInfo {
  public static final String SERIALIZED_NAME_PAYLOAD = "payload";
  @SerializedName(SERIALIZED_NAME_PAYLOAD)
  private Map<String, Object> payload = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_TAGS = "resourceTags";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TAGS)
  private Map<String, String> resourceTags = new HashMap<>();

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_VIOLATION_INFO = "violationInfo";
  @SerializedName(SERIALIZED_NAME_VIOLATION_INFO)
  private List<ViolationInfo> violationInfo = new ArrayList<>();

  public OrgPolicyViolationInfo() {
  }

  public OrgPolicyViolationInfo payload(Map<String, Object> payload) {
    this.payload = payload;
    return this;
  }

  public OrgPolicyViolationInfo putPayloadItem(String key, Object payloadItem) {
    if (this.payload == null) {
      this.payload = new HashMap<>();
    }
    this.payload.put(key, payloadItem);
    return this;
  }

  /**
   * Optional. Resource payload that is currently in scope and is subjected to orgpolicy conditions. This payload may be the subset of the actual Resource that may come in the request. This payload should not contain any core content.
   * @return payload
   */
  @javax.annotation.Nullable
  public Map<String, Object> getPayload() {
    return payload;
  }

  public void setPayload(Map<String, Object> payload) {
    this.payload = payload;
  }


  public OrgPolicyViolationInfo resourceTags(Map<String, String> resourceTags) {
    this.resourceTags = resourceTags;
    return this;
  }

  public OrgPolicyViolationInfo putResourceTagsItem(String key, String resourceTagsItem) {
    if (this.resourceTags == null) {
      this.resourceTags = new HashMap<>();
    }
    this.resourceTags.put(key, resourceTagsItem);
    return this;
  }

  /**
   * Optional. Tags referenced on the resource at the time of evaluation. These also include the federated tags, if they are supplied in the CheckOrgPolicy or CheckCustomConstraints Requests. Optional field as of now. These tags are the Cloud tags that are available on the resource during the policy evaluation and will be available as part of the OrgPolicy check response for logging purposes.
   * @return resourceTags
   */
  @javax.annotation.Nullable
  public Map<String, String> getResourceTags() {
    return resourceTags;
  }

  public void setResourceTags(Map<String, String> resourceTags) {
    this.resourceTags = resourceTags;
  }


  public OrgPolicyViolationInfo resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * Optional. Resource type that the orgpolicy is checked against. Example: compute.googleapis.com/Instance, store.googleapis.com/bucket
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public OrgPolicyViolationInfo violationInfo(List<ViolationInfo> violationInfo) {
    this.violationInfo = violationInfo;
    return this;
  }

  public OrgPolicyViolationInfo addViolationInfoItem(ViolationInfo violationInfoItem) {
    if (this.violationInfo == null) {
      this.violationInfo = new ArrayList<>();
    }
    this.violationInfo.add(violationInfoItem);
    return this;
  }

  /**
   * Optional. Policy violations
   * @return violationInfo
   */
  @javax.annotation.Nullable
  public List<ViolationInfo> getViolationInfo() {
    return violationInfo;
  }

  public void setViolationInfo(List<ViolationInfo> violationInfo) {
    this.violationInfo = violationInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgPolicyViolationInfo orgPolicyViolationInfo = (OrgPolicyViolationInfo) o;
    return Objects.equals(this.payload, orgPolicyViolationInfo.payload) &&
        Objects.equals(this.resourceTags, orgPolicyViolationInfo.resourceTags) &&
        Objects.equals(this.resourceType, orgPolicyViolationInfo.resourceType) &&
        Objects.equals(this.violationInfo, orgPolicyViolationInfo.violationInfo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payload, resourceTags, resourceType, violationInfo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgPolicyViolationInfo {\n");
    sb.append("    payload: ").append(toIndentedString(payload)).append("\n");
    sb.append("    resourceTags: ").append(toIndentedString(resourceTags)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    violationInfo: ").append(toIndentedString(violationInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("payload");
    openapiFields.add("resourceTags");
    openapiFields.add("resourceType");
    openapiFields.add("violationInfo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrgPolicyViolationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrgPolicyViolationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgPolicyViolationInfo is not found in the empty JSON string", OrgPolicyViolationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrgPolicyViolationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrgPolicyViolationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if (jsonObj.get("violationInfo") != null && !jsonObj.get("violationInfo").isJsonNull()) {
        JsonArray jsonArrayviolationInfo = jsonObj.getAsJsonArray("violationInfo");
        if (jsonArrayviolationInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("violationInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `violationInfo` to be an array in the JSON string but got `%s`", jsonObj.get("violationInfo").toString()));
          }

          // validate the optional field `violationInfo` (array)
          for (int i = 0; i < jsonArrayviolationInfo.size(); i++) {
            ViolationInfo.validateJsonElement(jsonArrayviolationInfo.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgPolicyViolationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgPolicyViolationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgPolicyViolationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgPolicyViolationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgPolicyViolationInfo>() {
           @Override
           public void write(JsonWriter out, OrgPolicyViolationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgPolicyViolationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrgPolicyViolationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrgPolicyViolationInfo
   * @throws IOException if the JSON string is invalid with respect to OrgPolicyViolationInfo
   */
  public static OrgPolicyViolationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgPolicyViolationInfo.class);
  }

  /**
   * Convert an instance of OrgPolicyViolationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

