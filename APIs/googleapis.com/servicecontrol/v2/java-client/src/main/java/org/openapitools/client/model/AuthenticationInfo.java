/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ServiceAccountDelegationInfo;
import org.openapitools.client.model.ServiceDelegationHistory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Authentication information for the operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:15.323338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthenticationInfo {
  public static final String SERIALIZED_NAME_AUTHORITY_SELECTOR = "authoritySelector";
  @SerializedName(SERIALIZED_NAME_AUTHORITY_SELECTOR)
  private String authoritySelector;

  public static final String SERIALIZED_NAME_PRINCIPAL_EMAIL = "principalEmail";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_EMAIL)
  private String principalEmail;

  public static final String SERIALIZED_NAME_PRINCIPAL_SUBJECT = "principalSubject";
  @SerializedName(SERIALIZED_NAME_PRINCIPAL_SUBJECT)
  private String principalSubject;

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_DELEGATION_INFO = "serviceAccountDelegationInfo";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_DELEGATION_INFO)
  private List<ServiceAccountDelegationInfo> serviceAccountDelegationInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_ACCOUNT_KEY_NAME = "serviceAccountKeyName";
  @SerializedName(SERIALIZED_NAME_SERVICE_ACCOUNT_KEY_NAME)
  private String serviceAccountKeyName;

  public static final String SERIALIZED_NAME_SERVICE_DELEGATION_HISTORY = "serviceDelegationHistory";
  @SerializedName(SERIALIZED_NAME_SERVICE_DELEGATION_HISTORY)
  private ServiceDelegationHistory serviceDelegationHistory;

  public static final String SERIALIZED_NAME_THIRD_PARTY_PRINCIPAL = "thirdPartyPrincipal";
  @SerializedName(SERIALIZED_NAME_THIRD_PARTY_PRINCIPAL)
  private Map<String, Object> thirdPartyPrincipal = new HashMap<>();

  public AuthenticationInfo() {
  }

  public AuthenticationInfo authoritySelector(String authoritySelector) {
    this.authoritySelector = authoritySelector;
    return this;
  }

  /**
   * The authority selector specified by the requestor, if any. It is not guaranteed that the principal was allowed to use this authority.
   * @return authoritySelector
   */
  @javax.annotation.Nullable
  public String getAuthoritySelector() {
    return authoritySelector;
  }

  public void setAuthoritySelector(String authoritySelector) {
    this.authoritySelector = authoritySelector;
  }


  public AuthenticationInfo principalEmail(String principalEmail) {
    this.principalEmail = principalEmail;
    return this;
  }

  /**
   * The email address of the authenticated user (or service account on behalf of third party principal) making the request. For third party identity callers, the &#x60;principal_subject&#x60; field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).
   * @return principalEmail
   */
  @javax.annotation.Nullable
  public String getPrincipalEmail() {
    return principalEmail;
  }

  public void setPrincipalEmail(String principalEmail) {
    this.principalEmail = principalEmail;
  }


  public AuthenticationInfo principalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
    return this;
  }

  /**
   * String representation of identity of requesting party. Populated for both first and third party identities.
   * @return principalSubject
   */
  @javax.annotation.Nullable
  public String getPrincipalSubject() {
    return principalSubject;
  }

  public void setPrincipalSubject(String principalSubject) {
    this.principalSubject = principalSubject;
  }


  public AuthenticationInfo serviceAccountDelegationInfo(List<ServiceAccountDelegationInfo> serviceAccountDelegationInfo) {
    this.serviceAccountDelegationInfo = serviceAccountDelegationInfo;
    return this;
  }

  public AuthenticationInfo addServiceAccountDelegationInfoItem(ServiceAccountDelegationInfo serviceAccountDelegationInfoItem) {
    if (this.serviceAccountDelegationInfo == null) {
      this.serviceAccountDelegationInfo = new ArrayList<>();
    }
    this.serviceAccountDelegationInfo.add(serviceAccountDelegationInfoItem);
    return this;
  }

  /**
   * Identity delegation history of an authenticated service account that makes the request. It contains information on the real authorities that try to access GCP resources by delegating on a service account. When multiple authorities present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.
   * @return serviceAccountDelegationInfo
   */
  @javax.annotation.Nullable
  public List<ServiceAccountDelegationInfo> getServiceAccountDelegationInfo() {
    return serviceAccountDelegationInfo;
  }

  public void setServiceAccountDelegationInfo(List<ServiceAccountDelegationInfo> serviceAccountDelegationInfo) {
    this.serviceAccountDelegationInfo = serviceAccountDelegationInfo;
  }


  public AuthenticationInfo serviceAccountKeyName(String serviceAccountKeyName) {
    this.serviceAccountKeyName = serviceAccountKeyName;
    return this;
  }

  /**
   * The name of the service account key used to create or exchange credentials for authenticating the service account making the request. This is a scheme-less URI full resource name. For example: \&quot;//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}\&quot;
   * @return serviceAccountKeyName
   */
  @javax.annotation.Nullable
  public String getServiceAccountKeyName() {
    return serviceAccountKeyName;
  }

  public void setServiceAccountKeyName(String serviceAccountKeyName) {
    this.serviceAccountKeyName = serviceAccountKeyName;
  }


  public AuthenticationInfo serviceDelegationHistory(ServiceDelegationHistory serviceDelegationHistory) {
    this.serviceDelegationHistory = serviceDelegationHistory;
    return this;
  }

  /**
   * Get serviceDelegationHistory
   * @return serviceDelegationHistory
   */
  @javax.annotation.Nullable
  public ServiceDelegationHistory getServiceDelegationHistory() {
    return serviceDelegationHistory;
  }

  public void setServiceDelegationHistory(ServiceDelegationHistory serviceDelegationHistory) {
    this.serviceDelegationHistory = serviceDelegationHistory;
  }


  public AuthenticationInfo thirdPartyPrincipal(Map<String, Object> thirdPartyPrincipal) {
    this.thirdPartyPrincipal = thirdPartyPrincipal;
    return this;
  }

  public AuthenticationInfo putThirdPartyPrincipalItem(String key, Object thirdPartyPrincipalItem) {
    if (this.thirdPartyPrincipal == null) {
      this.thirdPartyPrincipal = new HashMap<>();
    }
    this.thirdPartyPrincipal.put(key, thirdPartyPrincipalItem);
    return this;
  }

  /**
   * The third party identification (if any) of the authenticated user making the request. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the &#x60;@type&#x60; property.
   * @return thirdPartyPrincipal
   */
  @javax.annotation.Nullable
  public Map<String, Object> getThirdPartyPrincipal() {
    return thirdPartyPrincipal;
  }

  public void setThirdPartyPrincipal(Map<String, Object> thirdPartyPrincipal) {
    this.thirdPartyPrincipal = thirdPartyPrincipal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationInfo authenticationInfo = (AuthenticationInfo) o;
    return Objects.equals(this.authoritySelector, authenticationInfo.authoritySelector) &&
        Objects.equals(this.principalEmail, authenticationInfo.principalEmail) &&
        Objects.equals(this.principalSubject, authenticationInfo.principalSubject) &&
        Objects.equals(this.serviceAccountDelegationInfo, authenticationInfo.serviceAccountDelegationInfo) &&
        Objects.equals(this.serviceAccountKeyName, authenticationInfo.serviceAccountKeyName) &&
        Objects.equals(this.serviceDelegationHistory, authenticationInfo.serviceDelegationHistory) &&
        Objects.equals(this.thirdPartyPrincipal, authenticationInfo.thirdPartyPrincipal);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authoritySelector, principalEmail, principalSubject, serviceAccountDelegationInfo, serviceAccountKeyName, serviceDelegationHistory, thirdPartyPrincipal);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationInfo {\n");
    sb.append("    authoritySelector: ").append(toIndentedString(authoritySelector)).append("\n");
    sb.append("    principalEmail: ").append(toIndentedString(principalEmail)).append("\n");
    sb.append("    principalSubject: ").append(toIndentedString(principalSubject)).append("\n");
    sb.append("    serviceAccountDelegationInfo: ").append(toIndentedString(serviceAccountDelegationInfo)).append("\n");
    sb.append("    serviceAccountKeyName: ").append(toIndentedString(serviceAccountKeyName)).append("\n");
    sb.append("    serviceDelegationHistory: ").append(toIndentedString(serviceDelegationHistory)).append("\n");
    sb.append("    thirdPartyPrincipal: ").append(toIndentedString(thirdPartyPrincipal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authoritySelector");
    openapiFields.add("principalEmail");
    openapiFields.add("principalSubject");
    openapiFields.add("serviceAccountDelegationInfo");
    openapiFields.add("serviceAccountKeyName");
    openapiFields.add("serviceDelegationHistory");
    openapiFields.add("thirdPartyPrincipal");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticationInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationInfo is not found in the empty JSON string", AuthenticationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authoritySelector") != null && !jsonObj.get("authoritySelector").isJsonNull()) && !jsonObj.get("authoritySelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authoritySelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authoritySelector").toString()));
      }
      if ((jsonObj.get("principalEmail") != null && !jsonObj.get("principalEmail").isJsonNull()) && !jsonObj.get("principalEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalEmail").toString()));
      }
      if ((jsonObj.get("principalSubject") != null && !jsonObj.get("principalSubject").isJsonNull()) && !jsonObj.get("principalSubject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `principalSubject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("principalSubject").toString()));
      }
      if (jsonObj.get("serviceAccountDelegationInfo") != null && !jsonObj.get("serviceAccountDelegationInfo").isJsonNull()) {
        JsonArray jsonArrayserviceAccountDelegationInfo = jsonObj.getAsJsonArray("serviceAccountDelegationInfo");
        if (jsonArrayserviceAccountDelegationInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("serviceAccountDelegationInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `serviceAccountDelegationInfo` to be an array in the JSON string but got `%s`", jsonObj.get("serviceAccountDelegationInfo").toString()));
          }

          // validate the optional field `serviceAccountDelegationInfo` (array)
          for (int i = 0; i < jsonArrayserviceAccountDelegationInfo.size(); i++) {
            ServiceAccountDelegationInfo.validateJsonElement(jsonArrayserviceAccountDelegationInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceAccountKeyName") != null && !jsonObj.get("serviceAccountKeyName").isJsonNull()) && !jsonObj.get("serviceAccountKeyName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceAccountKeyName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceAccountKeyName").toString()));
      }
      // validate the optional field `serviceDelegationHistory`
      if (jsonObj.get("serviceDelegationHistory") != null && !jsonObj.get("serviceDelegationHistory").isJsonNull()) {
        ServiceDelegationHistory.validateJsonElement(jsonObj.get("serviceDelegationHistory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationInfo>() {
           @Override
           public void write(JsonWriter out, AuthenticationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticationInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticationInfo
   * @throws IOException if the JSON string is invalid with respect to AuthenticationInfo
   */
  public static AuthenticationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationInfo.class);
  }

  /**
   * Convert an instance of AuthenticationInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

