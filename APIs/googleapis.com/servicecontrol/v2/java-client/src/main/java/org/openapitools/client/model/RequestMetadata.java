/*
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Peer;
import org.openapitools.client.model.Request;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about the request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:15.323338-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RequestMetadata {
  public static final String SERIALIZED_NAME_CALLER_IP = "callerIp";
  @SerializedName(SERIALIZED_NAME_CALLER_IP)
  private String callerIp;

  public static final String SERIALIZED_NAME_CALLER_NETWORK = "callerNetwork";
  @SerializedName(SERIALIZED_NAME_CALLER_NETWORK)
  private String callerNetwork;

  public static final String SERIALIZED_NAME_CALLER_SUPPLIED_USER_AGENT = "callerSuppliedUserAgent";
  @SerializedName(SERIALIZED_NAME_CALLER_SUPPLIED_USER_AGENT)
  private String callerSuppliedUserAgent;

  public static final String SERIALIZED_NAME_DESTINATION_ATTRIBUTES = "destinationAttributes";
  @SerializedName(SERIALIZED_NAME_DESTINATION_ATTRIBUTES)
  private Peer destinationAttributes;

  public static final String SERIALIZED_NAME_REQUEST_ATTRIBUTES = "requestAttributes";
  @SerializedName(SERIALIZED_NAME_REQUEST_ATTRIBUTES)
  private Request requestAttributes;

  public RequestMetadata() {
  }

  public RequestMetadata callerIp(String callerIp) {
    this.callerIp = callerIp;
    return this;
  }

  /**
   * The IP address of the caller. For a caller from the internet, this will be the public IPv4 or IPv6 address. For calls made from inside Google&#39;s internal production network from one GCP service to another, &#x60;caller_ip&#x60; will be redacted to \&quot;private\&quot;. For a caller from a Compute Engine VM with a external IP address, &#x60;caller_ip&#x60; will be the VM&#39;s external IP address. For a caller from a Compute Engine VM without a external IP address, if the VM is in the same organization (or project) as the accessed resource, &#x60;caller_ip&#x60; will be the VM&#39;s internal IPv4 address, otherwise &#x60;caller_ip&#x60; will be redacted to \&quot;gce-internal-ip\&quot;. See https://cloud.google.com/compute/docs/vpc/ for more information.
   * @return callerIp
   */
  @javax.annotation.Nullable
  public String getCallerIp() {
    return callerIp;
  }

  public void setCallerIp(String callerIp) {
    this.callerIp = callerIp;
  }


  public RequestMetadata callerNetwork(String callerNetwork) {
    this.callerNetwork = callerNetwork;
    return this;
  }

  /**
   * The network of the caller. Set only if the network host project is part of the same GCP organization (or project) as the accessed resource. See https://cloud.google.com/compute/docs/vpc/ for more information. This is a scheme-less URI full resource name. For example: \&quot;//compute.googleapis.com/projects/PROJECT_ID/global/networks/NETWORK_ID\&quot;
   * @return callerNetwork
   */
  @javax.annotation.Nullable
  public String getCallerNetwork() {
    return callerNetwork;
  }

  public void setCallerNetwork(String callerNetwork) {
    this.callerNetwork = callerNetwork;
  }


  public RequestMetadata callerSuppliedUserAgent(String callerSuppliedUserAgent) {
    this.callerSuppliedUserAgent = callerSuppliedUserAgent;
    return this;
  }

  /**
   * The user agent of the caller. This information is not authenticated and should be treated accordingly. For example: + &#x60;google-api-python-client/1.4.0&#x60;: The request was made by the Google API client for Python. + &#x60;Cloud SDK Command Line Tool apitools-client/1.0 gcloud/0.9.62&#x60;: The request was made by the Google Cloud SDK CLI (gcloud). + &#x60;AppEngine-Google; (+http://code.google.com/appengine; appid: s~my-project&#x60;: The request was made from the &#x60;my-project&#x60; App Engine app.
   * @return callerSuppliedUserAgent
   */
  @javax.annotation.Nullable
  public String getCallerSuppliedUserAgent() {
    return callerSuppliedUserAgent;
  }

  public void setCallerSuppliedUserAgent(String callerSuppliedUserAgent) {
    this.callerSuppliedUserAgent = callerSuppliedUserAgent;
  }


  public RequestMetadata destinationAttributes(Peer destinationAttributes) {
    this.destinationAttributes = destinationAttributes;
    return this;
  }

  /**
   * Get destinationAttributes
   * @return destinationAttributes
   */
  @javax.annotation.Nullable
  public Peer getDestinationAttributes() {
    return destinationAttributes;
  }

  public void setDestinationAttributes(Peer destinationAttributes) {
    this.destinationAttributes = destinationAttributes;
  }


  public RequestMetadata requestAttributes(Request requestAttributes) {
    this.requestAttributes = requestAttributes;
    return this;
  }

  /**
   * Get requestAttributes
   * @return requestAttributes
   */
  @javax.annotation.Nullable
  public Request getRequestAttributes() {
    return requestAttributes;
  }

  public void setRequestAttributes(Request requestAttributes) {
    this.requestAttributes = requestAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestMetadata requestMetadata = (RequestMetadata) o;
    return Objects.equals(this.callerIp, requestMetadata.callerIp) &&
        Objects.equals(this.callerNetwork, requestMetadata.callerNetwork) &&
        Objects.equals(this.callerSuppliedUserAgent, requestMetadata.callerSuppliedUserAgent) &&
        Objects.equals(this.destinationAttributes, requestMetadata.destinationAttributes) &&
        Objects.equals(this.requestAttributes, requestMetadata.requestAttributes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callerIp, callerNetwork, callerSuppliedUserAgent, destinationAttributes, requestAttributes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestMetadata {\n");
    sb.append("    callerIp: ").append(toIndentedString(callerIp)).append("\n");
    sb.append("    callerNetwork: ").append(toIndentedString(callerNetwork)).append("\n");
    sb.append("    callerSuppliedUserAgent: ").append(toIndentedString(callerSuppliedUserAgent)).append("\n");
    sb.append("    destinationAttributes: ").append(toIndentedString(destinationAttributes)).append("\n");
    sb.append("    requestAttributes: ").append(toIndentedString(requestAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callerIp");
    openapiFields.add("callerNetwork");
    openapiFields.add("callerSuppliedUserAgent");
    openapiFields.add("destinationAttributes");
    openapiFields.add("requestAttributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RequestMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RequestMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RequestMetadata is not found in the empty JSON string", RequestMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RequestMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RequestMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("callerIp") != null && !jsonObj.get("callerIp").isJsonNull()) && !jsonObj.get("callerIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerIp").toString()));
      }
      if ((jsonObj.get("callerNetwork") != null && !jsonObj.get("callerNetwork").isJsonNull()) && !jsonObj.get("callerNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerNetwork").toString()));
      }
      if ((jsonObj.get("callerSuppliedUserAgent") != null && !jsonObj.get("callerSuppliedUserAgent").isJsonNull()) && !jsonObj.get("callerSuppliedUserAgent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callerSuppliedUserAgent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callerSuppliedUserAgent").toString()));
      }
      // validate the optional field `destinationAttributes`
      if (jsonObj.get("destinationAttributes") != null && !jsonObj.get("destinationAttributes").isJsonNull()) {
        Peer.validateJsonElement(jsonObj.get("destinationAttributes"));
      }
      // validate the optional field `requestAttributes`
      if (jsonObj.get("requestAttributes") != null && !jsonObj.get("requestAttributes").isJsonNull()) {
        Request.validateJsonElement(jsonObj.get("requestAttributes"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RequestMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RequestMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RequestMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RequestMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<RequestMetadata>() {
           @Override
           public void write(JsonWriter out, RequestMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RequestMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RequestMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RequestMetadata
   * @throws IOException if the JSON string is invalid with respect to RequestMetadata
   */
  public static RequestMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RequestMetadata.class);
  }

  /**
   * Convert an instance of RequestMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

