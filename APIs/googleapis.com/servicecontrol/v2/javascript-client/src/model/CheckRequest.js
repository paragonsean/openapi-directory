/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AttributeContext from './AttributeContext';
import ResourceInfo from './ResourceInfo';

/**
 * The CheckRequest model module.
 * @module model/CheckRequest
 * @version v2
 */
class CheckRequest {
    /**
     * Constructs a new <code>CheckRequest</code>.
     * Request message for the Check method.
     * @alias module:model/CheckRequest
     */
    constructor() { 
        
        CheckRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckRequest} obj Optional instance to populate.
     * @return {module:model/CheckRequest} The populated <code>CheckRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckRequest();

            if (data.hasOwnProperty('attributes')) {
                obj['attributes'] = AttributeContext.constructFromObject(data['attributes']);
            }
            if (data.hasOwnProperty('flags')) {
                obj['flags'] = ApiClient.convertToType(data['flags'], 'String');
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [ResourceInfo]);
            }
            if (data.hasOwnProperty('serviceConfigId')) {
                obj['serviceConfigId'] = ApiClient.convertToType(data['serviceConfigId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `attributes`
        if (data['attributes']) { // data not null
          AttributeContext.validateJSON(data['attributes']);
        }
        // ensure the json data is a string
        if (data['flags'] && !(typeof data['flags'] === 'string' || data['flags'] instanceof String)) {
            throw new Error("Expected the field `flags` to be a primitive type in the JSON string but got " + data['flags']);
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                ResourceInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceConfigId'] && !(typeof data['serviceConfigId'] === 'string' || data['serviceConfigId'] instanceof String)) {
            throw new Error("Expected the field `serviceConfigId` to be a primitive type in the JSON string but got " + data['serviceConfigId']);
        }

        return true;
    }


}



/**
 * @member {module:model/AttributeContext} attributes
 */
CheckRequest.prototype['attributes'] = undefined;

/**
 * Optional. Contains a comma-separated list of flags.
 * @member {String} flags
 */
CheckRequest.prototype['flags'] = undefined;

/**
 * Describes the resources and the policies applied to each resource.
 * @member {Array.<module:model/ResourceInfo>} resources
 */
CheckRequest.prototype['resources'] = undefined;

/**
 * Specifies the version of the service configuration that should be used to process the request. Must not be empty. Set this field to 'latest' to specify using the latest configuration.
 * @member {String} serviceConfigId
 */
CheckRequest.prototype['serviceConfigId'] = undefined;






export default CheckRequest;

