/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ViolationInfo model module.
 * @module model/ViolationInfo
 * @version v2
 */
class ViolationInfo {
    /**
     * Constructs a new <code>ViolationInfo</code>.
     * Provides information about the Policy violation info for this request.
     * @alias module:model/ViolationInfo
     */
    constructor() { 
        
        ViolationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ViolationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ViolationInfo} obj Optional instance to populate.
     * @return {module:model/ViolationInfo} The populated <code>ViolationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ViolationInfo();

            if (data.hasOwnProperty('checkedValue')) {
                obj['checkedValue'] = ApiClient.convertToType(data['checkedValue'], 'String');
            }
            if (data.hasOwnProperty('constraint')) {
                obj['constraint'] = ApiClient.convertToType(data['constraint'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('policyType')) {
                obj['policyType'] = ApiClient.convertToType(data['policyType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ViolationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ViolationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['checkedValue'] && !(typeof data['checkedValue'] === 'string' || data['checkedValue'] instanceof String)) {
            throw new Error("Expected the field `checkedValue` to be a primitive type in the JSON string but got " + data['checkedValue']);
        }
        // ensure the json data is a string
        if (data['constraint'] && !(typeof data['constraint'] === 'string' || data['constraint'] instanceof String)) {
            throw new Error("Expected the field `constraint` to be a primitive type in the JSON string but got " + data['constraint']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        // ensure the json data is a string
        if (data['policyType'] && !(typeof data['policyType'] === 'string' || data['policyType'] instanceof String)) {
            throw new Error("Expected the field `policyType` to be a primitive type in the JSON string but got " + data['policyType']);
        }

        return true;
    }


}



/**
 * Optional. Value that is being checked for the policy. This could be in encrypted form (if pii sensitive). This field will only be emitted in LIST_POLICY types
 * @member {String} checkedValue
 */
ViolationInfo.prototype['checkedValue'] = undefined;

/**
 * Optional. Constraint name
 * @member {String} constraint
 */
ViolationInfo.prototype['constraint'] = undefined;

/**
 * Optional. Error message that policy is indicating.
 * @member {String} errorMessage
 */
ViolationInfo.prototype['errorMessage'] = undefined;

/**
 * Optional. Indicates the type of the policy.
 * @member {module:model/ViolationInfo.PolicyTypeEnum} policyType
 */
ViolationInfo.prototype['policyType'] = undefined;





/**
 * Allowed values for the <code>policyType</code> property.
 * @enum {String}
 * @readonly
 */
ViolationInfo['PolicyTypeEnum'] = {

    /**
     * value: "POLICY_TYPE_UNSPECIFIED"
     * @const
     */
    "POLICY_TYPE_UNSPECIFIED": "POLICY_TYPE_UNSPECIFIED",

    /**
     * value: "BOOLEAN_CONSTRAINT"
     * @const
     */
    "BOOLEAN_CONSTRAINT": "BOOLEAN_CONSTRAINT",

    /**
     * value: "LIST_CONSTRAINT"
     * @const
     */
    "LIST_CONSTRAINT": "LIST_CONSTRAINT",

    /**
     * value: "CUSTOM_CONSTRAINT"
     * @const
     */
    "CUSTOM_CONSTRAINT": "CUSTOM_CONSTRAINT"
};



export default ViolationInfo;

