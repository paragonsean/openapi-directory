/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Api from './Api';
import Peer from './Peer';
import Request from './Request';
import Resource from './Resource';
import Response from './Response';

/**
 * The AttributeContext model module.
 * @module model/AttributeContext
 * @version v2
 */
class AttributeContext {
    /**
     * Constructs a new <code>AttributeContext</code>.
     * This message defines the standard attribute vocabulary for Google APIs. An attribute is a piece of metadata that describes an activity on a network service. For example, the size of an HTTP request, or the status code of an HTTP response. Each attribute has a type and a name, which is logically defined as a proto message field in &#x60;AttributeContext&#x60;. The field type becomes the attribute type, and the field path becomes the attribute name. For example, the attribute &#x60;source.ip&#x60; maps to field &#x60;AttributeContext.source.ip&#x60;. This message definition is guaranteed not to have any wire breaking change. So you can use it directly for passing attributes across different systems. NOTE: Different system may generate different subset of attributes. Please verify the system specification before relying on an attribute generated a system.
     * @alias module:model/AttributeContext
     */
    constructor() { 
        
        AttributeContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AttributeContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AttributeContext} obj Optional instance to populate.
     * @return {module:model/AttributeContext} The populated <code>AttributeContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AttributeContext();

            if (data.hasOwnProperty('api')) {
                obj['api'] = Api.constructFromObject(data['api']);
            }
            if (data.hasOwnProperty('destination')) {
                obj['destination'] = Peer.constructFromObject(data['destination']);
            }
            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], [{'String': Object}]);
            }
            if (data.hasOwnProperty('origin')) {
                obj['origin'] = Peer.constructFromObject(data['origin']);
            }
            if (data.hasOwnProperty('request')) {
                obj['request'] = Request.constructFromObject(data['request']);
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = Resource.constructFromObject(data['resource']);
            }
            if (data.hasOwnProperty('response')) {
                obj['response'] = Response.constructFromObject(data['response']);
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = Peer.constructFromObject(data['source']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AttributeContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AttributeContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `api`
        if (data['api']) { // data not null
          Api.validateJSON(data['api']);
        }
        // validate the optional field `destination`
        if (data['destination']) { // data not null
          Peer.validateJSON(data['destination']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['extensions'])) {
            throw new Error("Expected the field `extensions` to be an array in the JSON data but got " + data['extensions']);
        }
        // validate the optional field `origin`
        if (data['origin']) { // data not null
          Peer.validateJSON(data['origin']);
        }
        // validate the optional field `request`
        if (data['request']) { // data not null
          Request.validateJSON(data['request']);
        }
        // validate the optional field `resource`
        if (data['resource']) { // data not null
          Resource.validateJSON(data['resource']);
        }
        // validate the optional field `response`
        if (data['response']) { // data not null
          Response.validateJSON(data['response']);
        }
        // validate the optional field `source`
        if (data['source']) { // data not null
          Peer.validateJSON(data['source']);
        }

        return true;
    }


}



/**
 * @member {module:model/Api} api
 */
AttributeContext.prototype['api'] = undefined;

/**
 * @member {module:model/Peer} destination
 */
AttributeContext.prototype['destination'] = undefined;

/**
 * Supports extensions for advanced use cases, such as logs and metrics.
 * @member {Array.<Object.<String, Object>>} extensions
 */
AttributeContext.prototype['extensions'] = undefined;

/**
 * @member {module:model/Peer} origin
 */
AttributeContext.prototype['origin'] = undefined;

/**
 * @member {module:model/Request} request
 */
AttributeContext.prototype['request'] = undefined;

/**
 * @member {module:model/Resource} resource
 */
AttributeContext.prototype['resource'] = undefined;

/**
 * @member {module:model/Response} response
 */
AttributeContext.prototype['response'] = undefined;

/**
 * @member {module:model/Peer} source
 */
AttributeContext.prototype['source'] = undefined;






export default AttributeContext;

