/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceAccountDelegationInfo from './ServiceAccountDelegationInfo';
import ServiceDelegationHistory from './ServiceDelegationHistory';

/**
 * The AuthenticationInfo model module.
 * @module model/AuthenticationInfo
 * @version v2
 */
class AuthenticationInfo {
    /**
     * Constructs a new <code>AuthenticationInfo</code>.
     * Authentication information for the operation.
     * @alias module:model/AuthenticationInfo
     */
    constructor() { 
        
        AuthenticationInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthenticationInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthenticationInfo} obj Optional instance to populate.
     * @return {module:model/AuthenticationInfo} The populated <code>AuthenticationInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthenticationInfo();

            if (data.hasOwnProperty('authoritySelector')) {
                obj['authoritySelector'] = ApiClient.convertToType(data['authoritySelector'], 'String');
            }
            if (data.hasOwnProperty('principalEmail')) {
                obj['principalEmail'] = ApiClient.convertToType(data['principalEmail'], 'String');
            }
            if (data.hasOwnProperty('principalSubject')) {
                obj['principalSubject'] = ApiClient.convertToType(data['principalSubject'], 'String');
            }
            if (data.hasOwnProperty('serviceAccountDelegationInfo')) {
                obj['serviceAccountDelegationInfo'] = ApiClient.convertToType(data['serviceAccountDelegationInfo'], [ServiceAccountDelegationInfo]);
            }
            if (data.hasOwnProperty('serviceAccountKeyName')) {
                obj['serviceAccountKeyName'] = ApiClient.convertToType(data['serviceAccountKeyName'], 'String');
            }
            if (data.hasOwnProperty('serviceDelegationHistory')) {
                obj['serviceDelegationHistory'] = ServiceDelegationHistory.constructFromObject(data['serviceDelegationHistory']);
            }
            if (data.hasOwnProperty('thirdPartyPrincipal')) {
                obj['thirdPartyPrincipal'] = ApiClient.convertToType(data['thirdPartyPrincipal'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthenticationInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthenticationInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authoritySelector'] && !(typeof data['authoritySelector'] === 'string' || data['authoritySelector'] instanceof String)) {
            throw new Error("Expected the field `authoritySelector` to be a primitive type in the JSON string but got " + data['authoritySelector']);
        }
        // ensure the json data is a string
        if (data['principalEmail'] && !(typeof data['principalEmail'] === 'string' || data['principalEmail'] instanceof String)) {
            throw new Error("Expected the field `principalEmail` to be a primitive type in the JSON string but got " + data['principalEmail']);
        }
        // ensure the json data is a string
        if (data['principalSubject'] && !(typeof data['principalSubject'] === 'string' || data['principalSubject'] instanceof String)) {
            throw new Error("Expected the field `principalSubject` to be a primitive type in the JSON string but got " + data['principalSubject']);
        }
        if (data['serviceAccountDelegationInfo']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['serviceAccountDelegationInfo'])) {
                throw new Error("Expected the field `serviceAccountDelegationInfo` to be an array in the JSON data but got " + data['serviceAccountDelegationInfo']);
            }
            // validate the optional field `serviceAccountDelegationInfo` (array)
            for (const item of data['serviceAccountDelegationInfo']) {
                ServiceAccountDelegationInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceAccountKeyName'] && !(typeof data['serviceAccountKeyName'] === 'string' || data['serviceAccountKeyName'] instanceof String)) {
            throw new Error("Expected the field `serviceAccountKeyName` to be a primitive type in the JSON string but got " + data['serviceAccountKeyName']);
        }
        // validate the optional field `serviceDelegationHistory`
        if (data['serviceDelegationHistory']) { // data not null
          ServiceDelegationHistory.validateJSON(data['serviceDelegationHistory']);
        }

        return true;
    }


}



/**
 * The authority selector specified by the requestor, if any. It is not guaranteed that the principal was allowed to use this authority.
 * @member {String} authoritySelector
 */
AuthenticationInfo.prototype['authoritySelector'] = undefined;

/**
 * The email address of the authenticated user (or service account on behalf of third party principal) making the request. For third party identity callers, the `principal_subject` field is populated instead of this field. For privacy reasons, the principal email address is sometimes redacted. For more information, see [Caller identities in audit logs](https://cloud.google.com/logging/docs/audit#user-id).
 * @member {String} principalEmail
 */
AuthenticationInfo.prototype['principalEmail'] = undefined;

/**
 * String representation of identity of requesting party. Populated for both first and third party identities.
 * @member {String} principalSubject
 */
AuthenticationInfo.prototype['principalSubject'] = undefined;

/**
 * Identity delegation history of an authenticated service account that makes the request. It contains information on the real authorities that try to access GCP resources by delegating on a service account. When multiple authorities present, they are guaranteed to be sorted based on the original ordering of the identity delegation events.
 * @member {Array.<module:model/ServiceAccountDelegationInfo>} serviceAccountDelegationInfo
 */
AuthenticationInfo.prototype['serviceAccountDelegationInfo'] = undefined;

/**
 * The name of the service account key used to create or exchange credentials for authenticating the service account making the request. This is a scheme-less URI full resource name. For example: \"//iam.googleapis.com/projects/{PROJECT_ID}/serviceAccounts/{ACCOUNT}/keys/{key}\"
 * @member {String} serviceAccountKeyName
 */
AuthenticationInfo.prototype['serviceAccountKeyName'] = undefined;

/**
 * @member {module:model/ServiceDelegationHistory} serviceDelegationHistory
 */
AuthenticationInfo.prototype['serviceDelegationHistory'] = undefined;

/**
 * The third party identification (if any) of the authenticated user making the request. When the JSON object represented here has a proto equivalent, the proto name will be indicated in the `@type` property.
 * @member {Object.<String, Object>} thirdPartyPrincipal
 */
AuthenticationInfo.prototype['thirdPartyPrincipal'] = undefined;






export default AuthenticationInfo;

