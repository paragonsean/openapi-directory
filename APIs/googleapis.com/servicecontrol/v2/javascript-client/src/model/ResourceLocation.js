/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ResourceLocation model module.
 * @module model/ResourceLocation
 * @version v2
 */
class ResourceLocation {
    /**
     * Constructs a new <code>ResourceLocation</code>.
     * Location information about a resource.
     * @alias module:model/ResourceLocation
     */
    constructor() { 
        
        ResourceLocation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResourceLocation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResourceLocation} obj Optional instance to populate.
     * @return {module:model/ResourceLocation} The populated <code>ResourceLocation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResourceLocation();

            if (data.hasOwnProperty('currentLocations')) {
                obj['currentLocations'] = ApiClient.convertToType(data['currentLocations'], ['String']);
            }
            if (data.hasOwnProperty('originalLocations')) {
                obj['originalLocations'] = ApiClient.convertToType(data['originalLocations'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResourceLocation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResourceLocation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['currentLocations'])) {
            throw new Error("Expected the field `currentLocations` to be an array in the JSON data but got " + data['currentLocations']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['originalLocations'])) {
            throw new Error("Expected the field `originalLocations` to be an array in the JSON data but got " + data['originalLocations']);
        }

        return true;
    }


}



/**
 * The locations of a resource after the execution of the operation. Requests to create or delete a location based resource must populate the 'current_locations' field and not the 'original_locations' field. For example: \"europe-west1-a\" \"us-east1\" \"nam3\"
 * @member {Array.<String>} currentLocations
 */
ResourceLocation.prototype['currentLocations'] = undefined;

/**
 * The locations of a resource prior to the execution of the operation. Requests that mutate the resource's location must populate both the 'original_locations' as well as the 'current_locations' fields. For example: \"europe-west1-a\" \"us-east1\" \"nam3\"
 * @member {Array.<String>} originalLocations
 */
ResourceLocation.prototype['originalLocations'] = undefined;






export default ResourceLocation;

