/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ServiceControlApi);
  }
}(this, function(expect, ServiceControlApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ServiceControlApi.AuditLog();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('AuditLog', function() {
    it('should create an instance of AuditLog', function() {
      // uncomment below and update the code to test AuditLog
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be.a(ServiceControlApi.AuditLog);
    });

    it('should have the property authenticationInfo (base name: "authenticationInfo")', function() {
      // uncomment below and update the code to test the property authenticationInfo
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property authorizationInfo (base name: "authorizationInfo")', function() {
      // uncomment below and update the code to test the property authorizationInfo
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property methodName (base name: "methodName")', function() {
      // uncomment below and update the code to test the property methodName
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property numResponseItems (base name: "numResponseItems")', function() {
      // uncomment below and update the code to test the property numResponseItems
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property policyViolationInfo (base name: "policyViolationInfo")', function() {
      // uncomment below and update the code to test the property policyViolationInfo
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property request (base name: "request")', function() {
      // uncomment below and update the code to test the property request
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property requestMetadata (base name: "requestMetadata")', function() {
      // uncomment below and update the code to test the property requestMetadata
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property resourceLocation (base name: "resourceLocation")', function() {
      // uncomment below and update the code to test the property resourceLocation
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property resourceName (base name: "resourceName")', function() {
      // uncomment below and update the code to test the property resourceName
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property resourceOriginalState (base name: "resourceOriginalState")', function() {
      // uncomment below and update the code to test the property resourceOriginalState
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property response (base name: "response")', function() {
      // uncomment below and update the code to test the property response
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property serviceData (base name: "serviceData")', function() {
      // uncomment below and update the code to test the property serviceData
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property serviceName (base name: "serviceName")', function() {
      // uncomment below and update the code to test the property serviceName
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ServiceControlApi.AuditLog();
      //expect(instance).to.be();
    });

  });

}));
