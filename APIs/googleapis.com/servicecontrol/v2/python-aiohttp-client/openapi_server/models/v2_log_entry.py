# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.v2_http_request import V2HttpRequest
from openapi_server.models.v2_log_entry_operation import V2LogEntryOperation
from openapi_server.models.v2_log_entry_source_location import V2LogEntrySourceLocation
from openapi_server import util


class V2LogEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, http_request: V2HttpRequest=None, insert_id: str=None, labels: Dict[str, str]=None, monitored_resource_labels: Dict[str, str]=None, name: str=None, operation: V2LogEntryOperation=None, proto_payload: Dict[str, object]=None, severity: str=None, source_location: V2LogEntrySourceLocation=None, struct_payload: Dict[str, object]=None, text_payload: str=None, timestamp: str=None, trace: str=None):
        """V2LogEntry - a model defined in OpenAPI

        :param http_request: The http_request of this V2LogEntry.
        :param insert_id: The insert_id of this V2LogEntry.
        :param labels: The labels of this V2LogEntry.
        :param monitored_resource_labels: The monitored_resource_labels of this V2LogEntry.
        :param name: The name of this V2LogEntry.
        :param operation: The operation of this V2LogEntry.
        :param proto_payload: The proto_payload of this V2LogEntry.
        :param severity: The severity of this V2LogEntry.
        :param source_location: The source_location of this V2LogEntry.
        :param struct_payload: The struct_payload of this V2LogEntry.
        :param text_payload: The text_payload of this V2LogEntry.
        :param timestamp: The timestamp of this V2LogEntry.
        :param trace: The trace of this V2LogEntry.
        """
        self.openapi_types = {
            'http_request': V2HttpRequest,
            'insert_id': str,
            'labels': Dict[str, str],
            'monitored_resource_labels': Dict[str, str],
            'name': str,
            'operation': V2LogEntryOperation,
            'proto_payload': Dict[str, object],
            'severity': str,
            'source_location': V2LogEntrySourceLocation,
            'struct_payload': Dict[str, object],
            'text_payload': str,
            'timestamp': str,
            'trace': str
        }

        self.attribute_map = {
            'http_request': 'httpRequest',
            'insert_id': 'insertId',
            'labels': 'labels',
            'monitored_resource_labels': 'monitoredResourceLabels',
            'name': 'name',
            'operation': 'operation',
            'proto_payload': 'protoPayload',
            'severity': 'severity',
            'source_location': 'sourceLocation',
            'struct_payload': 'structPayload',
            'text_payload': 'textPayload',
            'timestamp': 'timestamp',
            'trace': 'trace'
        }

        self._http_request = http_request
        self._insert_id = insert_id
        self._labels = labels
        self._monitored_resource_labels = monitored_resource_labels
        self._name = name
        self._operation = operation
        self._proto_payload = proto_payload
        self._severity = severity
        self._source_location = source_location
        self._struct_payload = struct_payload
        self._text_payload = text_payload
        self._timestamp = timestamp
        self._trace = trace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V2LogEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V2LogEntry of this V2LogEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def http_request(self):
        """Gets the http_request of this V2LogEntry.


        :return: The http_request of this V2LogEntry.
        :rtype: V2HttpRequest
        """
        return self._http_request

    @http_request.setter
    def http_request(self, http_request):
        """Sets the http_request of this V2LogEntry.


        :param http_request: The http_request of this V2LogEntry.
        :type http_request: V2HttpRequest
        """

        self._http_request = http_request

    @property
    def insert_id(self):
        """Gets the insert_id of this V2LogEntry.

        A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.

        :return: The insert_id of this V2LogEntry.
        :rtype: str
        """
        return self._insert_id

    @insert_id.setter
    def insert_id(self, insert_id):
        """Sets the insert_id of this V2LogEntry.

        A unique ID for the log entry used for deduplication. If omitted, the implementation will generate one based on operation_id.

        :param insert_id: The insert_id of this V2LogEntry.
        :type insert_id: str
        """

        self._insert_id = insert_id

    @property
    def labels(self):
        """Gets the labels of this V2LogEntry.

        A set of user-defined (key, value) data that provides additional information about the log entry.

        :return: The labels of this V2LogEntry.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this V2LogEntry.

        A set of user-defined (key, value) data that provides additional information about the log entry.

        :param labels: The labels of this V2LogEntry.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def monitored_resource_labels(self):
        """Gets the monitored_resource_labels of this V2LogEntry.

        A set of user-defined (key, value) data that provides additional information about the moniotored resource that the log entry belongs to.

        :return: The monitored_resource_labels of this V2LogEntry.
        :rtype: Dict[str, str]
        """
        return self._monitored_resource_labels

    @monitored_resource_labels.setter
    def monitored_resource_labels(self, monitored_resource_labels):
        """Sets the monitored_resource_labels of this V2LogEntry.

        A set of user-defined (key, value) data that provides additional information about the moniotored resource that the log entry belongs to.

        :param monitored_resource_labels: The monitored_resource_labels of this V2LogEntry.
        :type monitored_resource_labels: Dict[str, str]
        """

        self._monitored_resource_labels = monitored_resource_labels

    @property
    def name(self):
        """Gets the name of this V2LogEntry.

        Required. The log to which this log entry belongs. Examples: `\"syslog\"`, `\"book_log\"`.

        :return: The name of this V2LogEntry.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this V2LogEntry.

        Required. The log to which this log entry belongs. Examples: `\"syslog\"`, `\"book_log\"`.

        :param name: The name of this V2LogEntry.
        :type name: str
        """

        self._name = name

    @property
    def operation(self):
        """Gets the operation of this V2LogEntry.


        :return: The operation of this V2LogEntry.
        :rtype: V2LogEntryOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this V2LogEntry.


        :param operation: The operation of this V2LogEntry.
        :type operation: V2LogEntryOperation
        """

        self._operation = operation

    @property
    def proto_payload(self):
        """Gets the proto_payload of this V2LogEntry.

        The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.

        :return: The proto_payload of this V2LogEntry.
        :rtype: Dict[str, object]
        """
        return self._proto_payload

    @proto_payload.setter
    def proto_payload(self, proto_payload):
        """Sets the proto_payload of this V2LogEntry.

        The log entry payload, represented as a protocol buffer that is expressed as a JSON object. The only accepted type currently is AuditLog.

        :param proto_payload: The proto_payload of this V2LogEntry.
        :type proto_payload: Dict[str, object]
        """

        self._proto_payload = proto_payload

    @property
    def severity(self):
        """Gets the severity of this V2LogEntry.

        The severity of the log entry. The default value is `LogSeverity.DEFAULT`.

        :return: The severity of this V2LogEntry.
        :rtype: str
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this V2LogEntry.

        The severity of the log entry. The default value is `LogSeverity.DEFAULT`.

        :param severity: The severity of this V2LogEntry.
        :type severity: str
        """
        allowed_values = ["DEFAULT", "DEBUG", "INFO", "NOTICE", "WARNING", "ERROR", "CRITICAL", "ALERT", "EMERGENCY"]  # noqa: E501
        if severity not in allowed_values:
            raise ValueError(
                "Invalid value for `severity` ({0}), must be one of {1}"
                .format(severity, allowed_values)
            )

        self._severity = severity

    @property
    def source_location(self):
        """Gets the source_location of this V2LogEntry.


        :return: The source_location of this V2LogEntry.
        :rtype: V2LogEntrySourceLocation
        """
        return self._source_location

    @source_location.setter
    def source_location(self, source_location):
        """Sets the source_location of this V2LogEntry.


        :param source_location: The source_location of this V2LogEntry.
        :type source_location: V2LogEntrySourceLocation
        """

        self._source_location = source_location

    @property
    def struct_payload(self):
        """Gets the struct_payload of this V2LogEntry.

        The log entry payload, represented as a structure that is expressed as a JSON object.

        :return: The struct_payload of this V2LogEntry.
        :rtype: Dict[str, object]
        """
        return self._struct_payload

    @struct_payload.setter
    def struct_payload(self, struct_payload):
        """Sets the struct_payload of this V2LogEntry.

        The log entry payload, represented as a structure that is expressed as a JSON object.

        :param struct_payload: The struct_payload of this V2LogEntry.
        :type struct_payload: Dict[str, object]
        """

        self._struct_payload = struct_payload

    @property
    def text_payload(self):
        """Gets the text_payload of this V2LogEntry.

        The log entry payload, represented as a Unicode string (UTF-8).

        :return: The text_payload of this V2LogEntry.
        :rtype: str
        """
        return self._text_payload

    @text_payload.setter
    def text_payload(self, text_payload):
        """Sets the text_payload of this V2LogEntry.

        The log entry payload, represented as a Unicode string (UTF-8).

        :param text_payload: The text_payload of this V2LogEntry.
        :type text_payload: str
        """

        self._text_payload = text_payload

    @property
    def timestamp(self):
        """Gets the timestamp of this V2LogEntry.

        The time the event described by the log entry occurred. If omitted, defaults to operation start time.

        :return: The timestamp of this V2LogEntry.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this V2LogEntry.

        The time the event described by the log entry occurred. If omitted, defaults to operation start time.

        :param timestamp: The timestamp of this V2LogEntry.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def trace(self):
        """Gets the trace of this V2LogEntry.

        Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`

        :return: The trace of this V2LogEntry.
        :rtype: str
        """
        return self._trace

    @trace.setter
    def trace(self, trace):
        """Sets the trace of this V2LogEntry.

        Optional. Resource name of the trace associated with the log entry, if any. If this field contains a relative resource name, you can assume the name is relative to `//tracing.googleapis.com`. Example: `projects/my-projectid/traces/06796866738c859f2f19b7cfb3214824`

        :param trace: The trace of this V2LogEntry.
        :type trace: str
        """

        self._trace = trace
