# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Peer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip: str=None, labels: Dict[str, str]=None, port: str=None, principal: str=None, region_code: str=None):
        """Peer - a model defined in OpenAPI

        :param ip: The ip of this Peer.
        :param labels: The labels of this Peer.
        :param port: The port of this Peer.
        :param principal: The principal of this Peer.
        :param region_code: The region_code of this Peer.
        """
        self.openapi_types = {
            'ip': str,
            'labels': Dict[str, str],
            'port': str,
            'principal': str,
            'region_code': str
        }

        self.attribute_map = {
            'ip': 'ip',
            'labels': 'labels',
            'port': 'port',
            'principal': 'principal',
            'region_code': 'regionCode'
        }

        self._ip = ip
        self._labels = labels
        self._port = port
        self._principal = principal
        self._region_code = region_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Peer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Peer of this Peer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self):
        """Gets the ip of this Peer.

        The IP address of the peer.

        :return: The ip of this Peer.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this Peer.

        The IP address of the peer.

        :param ip: The ip of this Peer.
        :type ip: str
        """

        self._ip = ip

    @property
    def labels(self):
        """Gets the labels of this Peer.

        The labels associated with the peer.

        :return: The labels of this Peer.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Peer.

        The labels associated with the peer.

        :param labels: The labels of this Peer.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def port(self):
        """Gets the port of this Peer.

        The network port of the peer.

        :return: The port of this Peer.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this Peer.

        The network port of the peer.

        :param port: The port of this Peer.
        :type port: str
        """

        self._port = port

    @property
    def principal(self):
        """Gets the principal of this Peer.

        The identity of this peer. Similar to `Request.auth.principal`, but relative to the peer instead of the request. For example, the identity associated with a load balancer that forwarded the request.

        :return: The principal of this Peer.
        :rtype: str
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this Peer.

        The identity of this peer. Similar to `Request.auth.principal`, but relative to the peer instead of the request. For example, the identity associated with a load balancer that forwarded the request.

        :param principal: The principal of this Peer.
        :type principal: str
        """

        self._principal = principal

    @property
    def region_code(self):
        """Gets the region_code of this Peer.

        The CLDR country/region code associated with the above IP address. If the IP address is private, the `region_code` should reflect the physical location where this peer is running.

        :return: The region_code of this Peer.
        :rtype: str
        """
        return self._region_code

    @region_code.setter
    def region_code(self, region_code):
        """Sets the region_code of this Peer.

        The CLDR country/region code associated with the above IP address. If the IP address is private, the `region_code` should reflect the physical location where this peer is running.

        :param region_code: The region_code of this Peer.
        :type region_code: str
        """

        self._region_code = region_code
