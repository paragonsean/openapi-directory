# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_latency: str=None, code: str=None, headers: Dict[str, str]=None, size: str=None, time: str=None):
        """Response - a model defined in OpenAPI

        :param backend_latency: The backend_latency of this Response.
        :param code: The code of this Response.
        :param headers: The headers of this Response.
        :param size: The size of this Response.
        :param time: The time of this Response.
        """
        self.openapi_types = {
            'backend_latency': str,
            'code': str,
            'headers': Dict[str, str],
            'size': str,
            'time': str
        }

        self.attribute_map = {
            'backend_latency': 'backendLatency',
            'code': 'code',
            'headers': 'headers',
            'size': 'size',
            'time': 'time'
        }

        self._backend_latency = backend_latency
        self._code = code
        self._headers = headers
        self._size = size
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response of this Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_latency(self):
        """Gets the backend_latency of this Response.

        The amount of time it takes the backend service to fully respond to a request. Measured from when the destination service starts to send the request to the backend until when the destination service receives the complete response from the backend.

        :return: The backend_latency of this Response.
        :rtype: str
        """
        return self._backend_latency

    @backend_latency.setter
    def backend_latency(self, backend_latency):
        """Sets the backend_latency of this Response.

        The amount of time it takes the backend service to fully respond to a request. Measured from when the destination service starts to send the request to the backend until when the destination service receives the complete response from the backend.

        :param backend_latency: The backend_latency of this Response.
        :type backend_latency: str
        """

        self._backend_latency = backend_latency

    @property
    def code(self):
        """Gets the code of this Response.

        The HTTP response status code, such as `200` and `404`.

        :return: The code of this Response.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Response.

        The HTTP response status code, such as `200` and `404`.

        :param code: The code of this Response.
        :type code: str
        """

        self._code = code

    @property
    def headers(self):
        """Gets the headers of this Response.

        The HTTP response headers. If multiple headers share the same key, they must be merged according to HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.

        :return: The headers of this Response.
        :rtype: Dict[str, str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this Response.

        The HTTP response headers. If multiple headers share the same key, they must be merged according to HTTP spec. All header keys must be lowercased, because HTTP header keys are case-insensitive.

        :param headers: The headers of this Response.
        :type headers: Dict[str, str]
        """

        self._headers = headers

    @property
    def size(self):
        """Gets the size of this Response.

        The HTTP response size in bytes. If unknown, it must be -1.

        :return: The size of this Response.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Response.

        The HTTP response size in bytes. If unknown, it must be -1.

        :param size: The size of this Response.
        :type size: str
        """

        self._size = size

    @property
    def time(self):
        """Gets the time of this Response.

        The timestamp when the `destination` service sends the last byte of the response.

        :return: The time of this Response.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Response.

        The timestamp when the `destination` service sends the last byte of the response.

        :param time: The time of this Response.
        :type time: str
        """

        self._time = time
