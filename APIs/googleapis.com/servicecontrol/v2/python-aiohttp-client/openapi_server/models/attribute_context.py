# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api import Api
from openapi_server.models.peer import Peer
from openapi_server.models.request import Request
from openapi_server.models.resource import Resource
from openapi_server.models.response import Response
from openapi_server import util


class AttributeContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api: Api=None, destination: Peer=None, extensions: List[Dict[str, object]]=None, origin: Peer=None, request: Request=None, resource: Resource=None, response: Response=None, source: Peer=None):
        """AttributeContext - a model defined in OpenAPI

        :param api: The api of this AttributeContext.
        :param destination: The destination of this AttributeContext.
        :param extensions: The extensions of this AttributeContext.
        :param origin: The origin of this AttributeContext.
        :param request: The request of this AttributeContext.
        :param resource: The resource of this AttributeContext.
        :param response: The response of this AttributeContext.
        :param source: The source of this AttributeContext.
        """
        self.openapi_types = {
            'api': Api,
            'destination': Peer,
            'extensions': List[Dict[str, object]],
            'origin': Peer,
            'request': Request,
            'resource': Resource,
            'response': Response,
            'source': Peer
        }

        self.attribute_map = {
            'api': 'api',
            'destination': 'destination',
            'extensions': 'extensions',
            'origin': 'origin',
            'request': 'request',
            'resource': 'resource',
            'response': 'response',
            'source': 'source'
        }

        self._api = api
        self._destination = destination
        self._extensions = extensions
        self._origin = origin
        self._request = request
        self._resource = resource
        self._response = response
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AttributeContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AttributeContext of this AttributeContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api(self):
        """Gets the api of this AttributeContext.


        :return: The api of this AttributeContext.
        :rtype: Api
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this AttributeContext.


        :param api: The api of this AttributeContext.
        :type api: Api
        """

        self._api = api

    @property
    def destination(self):
        """Gets the destination of this AttributeContext.


        :return: The destination of this AttributeContext.
        :rtype: Peer
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this AttributeContext.


        :param destination: The destination of this AttributeContext.
        :type destination: Peer
        """

        self._destination = destination

    @property
    def extensions(self):
        """Gets the extensions of this AttributeContext.

        Supports extensions for advanced use cases, such as logs and metrics.

        :return: The extensions of this AttributeContext.
        :rtype: List[Dict[str, object]]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this AttributeContext.

        Supports extensions for advanced use cases, such as logs and metrics.

        :param extensions: The extensions of this AttributeContext.
        :type extensions: List[Dict[str, object]]
        """

        self._extensions = extensions

    @property
    def origin(self):
        """Gets the origin of this AttributeContext.


        :return: The origin of this AttributeContext.
        :rtype: Peer
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this AttributeContext.


        :param origin: The origin of this AttributeContext.
        :type origin: Peer
        """

        self._origin = origin

    @property
    def request(self):
        """Gets the request of this AttributeContext.


        :return: The request of this AttributeContext.
        :rtype: Request
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this AttributeContext.


        :param request: The request of this AttributeContext.
        :type request: Request
        """

        self._request = request

    @property
    def resource(self):
        """Gets the resource of this AttributeContext.


        :return: The resource of this AttributeContext.
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this AttributeContext.


        :param resource: The resource of this AttributeContext.
        :type resource: Resource
        """

        self._resource = resource

    @property
    def response(self):
        """Gets the response of this AttributeContext.


        :return: The response of this AttributeContext.
        :rtype: Response
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this AttributeContext.


        :param response: The response of this AttributeContext.
        :type response: Response
        """

        self._response = response

    @property
    def source(self):
        """Gets the source of this AttributeContext.


        :return: The source of this AttributeContext.
        :rtype: Peer
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AttributeContext.


        :param source: The source of this AttributeContext.
        :type source: Peer
        """

        self._source = source
