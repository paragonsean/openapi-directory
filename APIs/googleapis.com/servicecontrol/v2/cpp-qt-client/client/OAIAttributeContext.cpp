/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttributeContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttributeContext::OAIAttributeContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttributeContext::OAIAttributeContext() {
    this->initializeModel();
}

OAIAttributeContext::~OAIAttributeContext() {}

void OAIAttributeContext::initializeModel() {

    m_api_isSet = false;
    m_api_isValid = false;

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_request_isSet = false;
    m_request_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_response_isSet = false;
    m_response_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIAttributeContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttributeContext::fromJsonObject(QJsonObject json) {

    m_api_isValid = ::OpenAPI::fromJsonValue(m_api, json[QString("api")]);
    m_api_isSet = !json[QString("api")].isNull() && m_api_isValid;

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    if(json["extensions"].isArray()){
        auto arr = json["extensions"].toArray();
        m_extensions_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QJsonValue> item;
                m_extensions_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_extensions_isSet = !jval.isNull() && m_extensions_isValid;
                m_extensions.push_back(item);
            }
        }
    }

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_request_isValid = ::OpenAPI::fromJsonValue(m_request, json[QString("request")]);
    m_request_isSet = !json[QString("request")].isNull() && m_request_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_response_isValid = ::OpenAPI::fromJsonValue(m_response, json[QString("response")]);
    m_response_isSet = !json[QString("response")].isNull() && m_response_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIAttributeContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttributeContext::asJsonObject() const {
    QJsonObject obj;
    if (m_api.isSet()) {
        obj.insert(QString("api"), ::OpenAPI::toJsonValue(m_api));
    }
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_extensions.size() > 0) {
        
        obj.insert(QString("extensions"), toJsonValue(m_extensions));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_request.isSet()) {
        obj.insert(QString("request"), ::OpenAPI::toJsonValue(m_request));
    }
    if (m_resource.isSet()) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_response.isSet()) {
        obj.insert(QString("response"), ::OpenAPI::toJsonValue(m_response));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIApi OAIAttributeContext::getApi() const {
    return m_api;
}
void OAIAttributeContext::setApi(const OAIApi &api) {
    m_api = api;
    m_api_isSet = true;
}

bool OAIAttributeContext::is_api_Set() const{
    return m_api_isSet;
}

bool OAIAttributeContext::is_api_Valid() const{
    return m_api_isValid;
}

OAIPeer OAIAttributeContext::getDestination() const {
    return m_destination;
}
void OAIAttributeContext::setDestination(const OAIPeer &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIAttributeContext::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIAttributeContext::is_destination_Valid() const{
    return m_destination_isValid;
}

QList<QMap<QString, QJsonValue>> OAIAttributeContext::getExtensions() const {
    return m_extensions;
}
void OAIAttributeContext::setExtensions(const QList<QMap<QString, QJsonValue>> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAIAttributeContext::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAIAttributeContext::is_extensions_Valid() const{
    return m_extensions_isValid;
}

OAIPeer OAIAttributeContext::getOrigin() const {
    return m_origin;
}
void OAIAttributeContext::setOrigin(const OAIPeer &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIAttributeContext::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIAttributeContext::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIRequest OAIAttributeContext::getRequest() const {
    return m_request;
}
void OAIAttributeContext::setRequest(const OAIRequest &request) {
    m_request = request;
    m_request_isSet = true;
}

bool OAIAttributeContext::is_request_Set() const{
    return m_request_isSet;
}

bool OAIAttributeContext::is_request_Valid() const{
    return m_request_isValid;
}

OAIResource OAIAttributeContext::getResource() const {
    return m_resource;
}
void OAIAttributeContext::setResource(const OAIResource &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAttributeContext::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAttributeContext::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIResponse OAIAttributeContext::getResponse() const {
    return m_response;
}
void OAIAttributeContext::setResponse(const OAIResponse &response) {
    m_response = response;
    m_response_isSet = true;
}

bool OAIAttributeContext::is_response_Set() const{
    return m_response_isSet;
}

bool OAIAttributeContext::is_response_Valid() const{
    return m_response_isValid;
}

OAIPeer OAIAttributeContext::getSource() const {
    return m_source;
}
void OAIAttributeContext::setSource(const OAIPeer &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAttributeContext::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAttributeContext::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIAttributeContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttributeContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
