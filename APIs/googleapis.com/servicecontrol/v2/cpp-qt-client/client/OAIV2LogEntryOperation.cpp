/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2LogEntryOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2LogEntryOperation::OAIV2LogEntryOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2LogEntryOperation::OAIV2LogEntryOperation() {
    this->initializeModel();
}

OAIV2LogEntryOperation::~OAIV2LogEntryOperation() {}

void OAIV2LogEntryOperation::initializeModel() {

    m_first_isSet = false;
    m_first_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_isSet = false;
    m_last_isValid = false;

    m_producer_isSet = false;
    m_producer_isValid = false;
}

void OAIV2LogEntryOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2LogEntryOperation::fromJsonObject(QJsonObject json) {

    m_first_isValid = ::OpenAPI::fromJsonValue(m_first, json[QString("first")]);
    m_first_isSet = !json[QString("first")].isNull() && m_first_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_isValid = ::OpenAPI::fromJsonValue(m_last, json[QString("last")]);
    m_last_isSet = !json[QString("last")].isNull() && m_last_isValid;

    m_producer_isValid = ::OpenAPI::fromJsonValue(m_producer, json[QString("producer")]);
    m_producer_isSet = !json[QString("producer")].isNull() && m_producer_isValid;
}

QString OAIV2LogEntryOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2LogEntryOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_first_isSet) {
        obj.insert(QString("first"), ::OpenAPI::toJsonValue(m_first));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_isSet) {
        obj.insert(QString("last"), ::OpenAPI::toJsonValue(m_last));
    }
    if (m_producer_isSet) {
        obj.insert(QString("producer"), ::OpenAPI::toJsonValue(m_producer));
    }
    return obj;
}

bool OAIV2LogEntryOperation::isFirst() const {
    return m_first;
}
void OAIV2LogEntryOperation::setFirst(const bool &first) {
    m_first = first;
    m_first_isSet = true;
}

bool OAIV2LogEntryOperation::is_first_Set() const{
    return m_first_isSet;
}

bool OAIV2LogEntryOperation::is_first_Valid() const{
    return m_first_isValid;
}

QString OAIV2LogEntryOperation::getId() const {
    return m_id;
}
void OAIV2LogEntryOperation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIV2LogEntryOperation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIV2LogEntryOperation::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIV2LogEntryOperation::isLast() const {
    return m_last;
}
void OAIV2LogEntryOperation::setLast(const bool &last) {
    m_last = last;
    m_last_isSet = true;
}

bool OAIV2LogEntryOperation::is_last_Set() const{
    return m_last_isSet;
}

bool OAIV2LogEntryOperation::is_last_Valid() const{
    return m_last_isValid;
}

QString OAIV2LogEntryOperation::getProducer() const {
    return m_producer;
}
void OAIV2LogEntryOperation::setProducer(const QString &producer) {
    m_producer = producer;
    m_producer_isSet = true;
}

bool OAIV2LogEntryOperation::is_producer_Set() const{
    return m_producer_isSet;
}

bool OAIV2LogEntryOperation::is_producer_Valid() const{
    return m_producer_isValid;
}

bool OAIV2LogEntryOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_first_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2LogEntryOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
