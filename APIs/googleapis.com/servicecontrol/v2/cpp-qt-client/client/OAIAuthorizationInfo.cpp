/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthorizationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthorizationInfo::OAIAuthorizationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthorizationInfo::OAIAuthorizationInfo() {
    this->initializeModel();
}

OAIAuthorizationInfo::~OAIAuthorizationInfo() {}

void OAIAuthorizationInfo::initializeModel() {

    m_granted_isSet = false;
    m_granted_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;

    m_resource_attributes_isSet = false;
    m_resource_attributes_isValid = false;
}

void OAIAuthorizationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthorizationInfo::fromJsonObject(QJsonObject json) {

    m_granted_isValid = ::OpenAPI::fromJsonValue(m_granted, json[QString("granted")]);
    m_granted_isSet = !json[QString("granted")].isNull() && m_granted_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;

    m_resource_attributes_isValid = ::OpenAPI::fromJsonValue(m_resource_attributes, json[QString("resourceAttributes")]);
    m_resource_attributes_isSet = !json[QString("resourceAttributes")].isNull() && m_resource_attributes_isValid;
}

QString OAIAuthorizationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthorizationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_granted_isSet) {
        obj.insert(QString("granted"), ::OpenAPI::toJsonValue(m_granted));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    if (m_resource_attributes.isSet()) {
        obj.insert(QString("resourceAttributes"), ::OpenAPI::toJsonValue(m_resource_attributes));
    }
    return obj;
}

bool OAIAuthorizationInfo::isGranted() const {
    return m_granted;
}
void OAIAuthorizationInfo::setGranted(const bool &granted) {
    m_granted = granted;
    m_granted_isSet = true;
}

bool OAIAuthorizationInfo::is_granted_Set() const{
    return m_granted_isSet;
}

bool OAIAuthorizationInfo::is_granted_Valid() const{
    return m_granted_isValid;
}

QString OAIAuthorizationInfo::getPermission() const {
    return m_permission;
}
void OAIAuthorizationInfo::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIAuthorizationInfo::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIAuthorizationInfo::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIAuthorizationInfo::getResource() const {
    return m_resource;
}
void OAIAuthorizationInfo::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIAuthorizationInfo::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIAuthorizationInfo::is_resource_Valid() const{
    return m_resource_isValid;
}

OAIResource OAIAuthorizationInfo::getResourceAttributes() const {
    return m_resource_attributes;
}
void OAIAuthorizationInfo::setResourceAttributes(const OAIResource &resource_attributes) {
    m_resource_attributes = resource_attributes;
    m_resource_attributes_isSet = true;
}

bool OAIAuthorizationInfo::is_resource_attributes_Set() const{
    return m_resource_attributes_isSet;
}

bool OAIAuthorizationInfo::is_resource_attributes_Valid() const{
    return m_resource_attributes_isValid;
}

bool OAIAuthorizationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_granted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthorizationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
