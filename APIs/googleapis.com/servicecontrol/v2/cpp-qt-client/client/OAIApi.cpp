/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApi.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApi::OAIApi(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApi::OAIApi() {
    this->initializeModel();
}

OAIApi::~OAIApi() {}

void OAIApi::initializeModel() {

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIApi::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApi::fromJsonObject(QJsonObject json) {

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIApi::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApi::asJsonObject() const {
    QJsonObject obj;
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIApi::getOperation() const {
    return m_operation;
}
void OAIApi::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIApi::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIApi::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIApi::getProtocol() const {
    return m_protocol;
}
void OAIApi::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIApi::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIApi::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIApi::getService() const {
    return m_service;
}
void OAIApi::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIApi::is_service_Set() const{
    return m_service_isSet;
}

bool OAIApi::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIApi::getVersion() const {
    return m_version;
}
void OAIApi::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIApi::is_version_Set() const{
    return m_version_isSet;
}

bool OAIApi::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIApi::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApi::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
