/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckRequest::OAICheckRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckRequest::OAICheckRequest() {
    this->initializeModel();
}

OAICheckRequest::~OAICheckRequest() {}

void OAICheckRequest::initializeModel() {

    m_attributes_isSet = false;
    m_attributes_isValid = false;

    m_flags_isSet = false;
    m_flags_isValid = false;

    m_resources_isSet = false;
    m_resources_isValid = false;

    m_service_config_id_isSet = false;
    m_service_config_id_isValid = false;
}

void OAICheckRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckRequest::fromJsonObject(QJsonObject json) {

    m_attributes_isValid = ::OpenAPI::fromJsonValue(m_attributes, json[QString("attributes")]);
    m_attributes_isSet = !json[QString("attributes")].isNull() && m_attributes_isValid;

    m_flags_isValid = ::OpenAPI::fromJsonValue(m_flags, json[QString("flags")]);
    m_flags_isSet = !json[QString("flags")].isNull() && m_flags_isValid;

    m_resources_isValid = ::OpenAPI::fromJsonValue(m_resources, json[QString("resources")]);
    m_resources_isSet = !json[QString("resources")].isNull() && m_resources_isValid;

    m_service_config_id_isValid = ::OpenAPI::fromJsonValue(m_service_config_id, json[QString("serviceConfigId")]);
    m_service_config_id_isSet = !json[QString("serviceConfigId")].isNull() && m_service_config_id_isValid;
}

QString OAICheckRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_attributes.isSet()) {
        obj.insert(QString("attributes"), ::OpenAPI::toJsonValue(m_attributes));
    }
    if (m_flags_isSet) {
        obj.insert(QString("flags"), ::OpenAPI::toJsonValue(m_flags));
    }
    if (m_resources.size() > 0) {
        obj.insert(QString("resources"), ::OpenAPI::toJsonValue(m_resources));
    }
    if (m_service_config_id_isSet) {
        obj.insert(QString("serviceConfigId"), ::OpenAPI::toJsonValue(m_service_config_id));
    }
    return obj;
}

OAIAttributeContext OAICheckRequest::getAttributes() const {
    return m_attributes;
}
void OAICheckRequest::setAttributes(const OAIAttributeContext &attributes) {
    m_attributes = attributes;
    m_attributes_isSet = true;
}

bool OAICheckRequest::is_attributes_Set() const{
    return m_attributes_isSet;
}

bool OAICheckRequest::is_attributes_Valid() const{
    return m_attributes_isValid;
}

QString OAICheckRequest::getFlags() const {
    return m_flags;
}
void OAICheckRequest::setFlags(const QString &flags) {
    m_flags = flags;
    m_flags_isSet = true;
}

bool OAICheckRequest::is_flags_Set() const{
    return m_flags_isSet;
}

bool OAICheckRequest::is_flags_Valid() const{
    return m_flags_isValid;
}

QList<OAIResourceInfo> OAICheckRequest::getResources() const {
    return m_resources;
}
void OAICheckRequest::setResources(const QList<OAIResourceInfo> &resources) {
    m_resources = resources;
    m_resources_isSet = true;
}

bool OAICheckRequest::is_resources_Set() const{
    return m_resources_isSet;
}

bool OAICheckRequest::is_resources_Valid() const{
    return m_resources_isValid;
}

QString OAICheckRequest::getServiceConfigId() const {
    return m_service_config_id;
}
void OAICheckRequest::setServiceConfigId(const QString &service_config_id) {
    m_service_config_id = service_config_id;
    m_service_config_id_isSet = true;
}

bool OAICheckRequest::is_service_config_id_Set() const{
    return m_service_config_id_isSet;
}

bool OAICheckRequest::is_service_config_id_Valid() const{
    return m_service_config_id_isValid;
}

bool OAICheckRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attributes.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_flags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_config_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
