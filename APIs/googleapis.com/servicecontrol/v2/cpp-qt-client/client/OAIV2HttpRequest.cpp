/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2HttpRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2HttpRequest::OAIV2HttpRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2HttpRequest::OAIV2HttpRequest() {
    this->initializeModel();
}

OAIV2HttpRequest::~OAIV2HttpRequest() {}

void OAIV2HttpRequest::initializeModel() {

    m_cache_fill_bytes_isSet = false;
    m_cache_fill_bytes_isValid = false;

    m_cache_hit_isSet = false;
    m_cache_hit_isValid = false;

    m_cache_lookup_isSet = false;
    m_cache_lookup_isValid = false;

    m_cache_validated_with_origin_server_isSet = false;
    m_cache_validated_with_origin_server_isValid = false;

    m_latency_isSet = false;
    m_latency_isValid = false;

    m_protocol_isSet = false;
    m_protocol_isValid = false;

    m_referer_isSet = false;
    m_referer_isValid = false;

    m_remote_ip_isSet = false;
    m_remote_ip_isValid = false;

    m_request_method_isSet = false;
    m_request_method_isValid = false;

    m_request_size_isSet = false;
    m_request_size_isValid = false;

    m_request_url_isSet = false;
    m_request_url_isValid = false;

    m_response_size_isSet = false;
    m_response_size_isValid = false;

    m_server_ip_isSet = false;
    m_server_ip_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAIV2HttpRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2HttpRequest::fromJsonObject(QJsonObject json) {

    m_cache_fill_bytes_isValid = ::OpenAPI::fromJsonValue(m_cache_fill_bytes, json[QString("cacheFillBytes")]);
    m_cache_fill_bytes_isSet = !json[QString("cacheFillBytes")].isNull() && m_cache_fill_bytes_isValid;

    m_cache_hit_isValid = ::OpenAPI::fromJsonValue(m_cache_hit, json[QString("cacheHit")]);
    m_cache_hit_isSet = !json[QString("cacheHit")].isNull() && m_cache_hit_isValid;

    m_cache_lookup_isValid = ::OpenAPI::fromJsonValue(m_cache_lookup, json[QString("cacheLookup")]);
    m_cache_lookup_isSet = !json[QString("cacheLookup")].isNull() && m_cache_lookup_isValid;

    m_cache_validated_with_origin_server_isValid = ::OpenAPI::fromJsonValue(m_cache_validated_with_origin_server, json[QString("cacheValidatedWithOriginServer")]);
    m_cache_validated_with_origin_server_isSet = !json[QString("cacheValidatedWithOriginServer")].isNull() && m_cache_validated_with_origin_server_isValid;

    m_latency_isValid = ::OpenAPI::fromJsonValue(m_latency, json[QString("latency")]);
    m_latency_isSet = !json[QString("latency")].isNull() && m_latency_isValid;

    m_protocol_isValid = ::OpenAPI::fromJsonValue(m_protocol, json[QString("protocol")]);
    m_protocol_isSet = !json[QString("protocol")].isNull() && m_protocol_isValid;

    m_referer_isValid = ::OpenAPI::fromJsonValue(m_referer, json[QString("referer")]);
    m_referer_isSet = !json[QString("referer")].isNull() && m_referer_isValid;

    m_remote_ip_isValid = ::OpenAPI::fromJsonValue(m_remote_ip, json[QString("remoteIp")]);
    m_remote_ip_isSet = !json[QString("remoteIp")].isNull() && m_remote_ip_isValid;

    m_request_method_isValid = ::OpenAPI::fromJsonValue(m_request_method, json[QString("requestMethod")]);
    m_request_method_isSet = !json[QString("requestMethod")].isNull() && m_request_method_isValid;

    m_request_size_isValid = ::OpenAPI::fromJsonValue(m_request_size, json[QString("requestSize")]);
    m_request_size_isSet = !json[QString("requestSize")].isNull() && m_request_size_isValid;

    m_request_url_isValid = ::OpenAPI::fromJsonValue(m_request_url, json[QString("requestUrl")]);
    m_request_url_isSet = !json[QString("requestUrl")].isNull() && m_request_url_isValid;

    m_response_size_isValid = ::OpenAPI::fromJsonValue(m_response_size, json[QString("responseSize")]);
    m_response_size_isSet = !json[QString("responseSize")].isNull() && m_response_size_isValid;

    m_server_ip_isValid = ::OpenAPI::fromJsonValue(m_server_ip, json[QString("serverIp")]);
    m_server_ip_isSet = !json[QString("serverIp")].isNull() && m_server_ip_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;
}

QString OAIV2HttpRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2HttpRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_fill_bytes_isSet) {
        obj.insert(QString("cacheFillBytes"), ::OpenAPI::toJsonValue(m_cache_fill_bytes));
    }
    if (m_cache_hit_isSet) {
        obj.insert(QString("cacheHit"), ::OpenAPI::toJsonValue(m_cache_hit));
    }
    if (m_cache_lookup_isSet) {
        obj.insert(QString("cacheLookup"), ::OpenAPI::toJsonValue(m_cache_lookup));
    }
    if (m_cache_validated_with_origin_server_isSet) {
        obj.insert(QString("cacheValidatedWithOriginServer"), ::OpenAPI::toJsonValue(m_cache_validated_with_origin_server));
    }
    if (m_latency_isSet) {
        obj.insert(QString("latency"), ::OpenAPI::toJsonValue(m_latency));
    }
    if (m_protocol_isSet) {
        obj.insert(QString("protocol"), ::OpenAPI::toJsonValue(m_protocol));
    }
    if (m_referer_isSet) {
        obj.insert(QString("referer"), ::OpenAPI::toJsonValue(m_referer));
    }
    if (m_remote_ip_isSet) {
        obj.insert(QString("remoteIp"), ::OpenAPI::toJsonValue(m_remote_ip));
    }
    if (m_request_method_isSet) {
        obj.insert(QString("requestMethod"), ::OpenAPI::toJsonValue(m_request_method));
    }
    if (m_request_size_isSet) {
        obj.insert(QString("requestSize"), ::OpenAPI::toJsonValue(m_request_size));
    }
    if (m_request_url_isSet) {
        obj.insert(QString("requestUrl"), ::OpenAPI::toJsonValue(m_request_url));
    }
    if (m_response_size_isSet) {
        obj.insert(QString("responseSize"), ::OpenAPI::toJsonValue(m_response_size));
    }
    if (m_server_ip_isSet) {
        obj.insert(QString("serverIp"), ::OpenAPI::toJsonValue(m_server_ip));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

QString OAIV2HttpRequest::getCacheFillBytes() const {
    return m_cache_fill_bytes;
}
void OAIV2HttpRequest::setCacheFillBytes(const QString &cache_fill_bytes) {
    m_cache_fill_bytes = cache_fill_bytes;
    m_cache_fill_bytes_isSet = true;
}

bool OAIV2HttpRequest::is_cache_fill_bytes_Set() const{
    return m_cache_fill_bytes_isSet;
}

bool OAIV2HttpRequest::is_cache_fill_bytes_Valid() const{
    return m_cache_fill_bytes_isValid;
}

bool OAIV2HttpRequest::isCacheHit() const {
    return m_cache_hit;
}
void OAIV2HttpRequest::setCacheHit(const bool &cache_hit) {
    m_cache_hit = cache_hit;
    m_cache_hit_isSet = true;
}

bool OAIV2HttpRequest::is_cache_hit_Set() const{
    return m_cache_hit_isSet;
}

bool OAIV2HttpRequest::is_cache_hit_Valid() const{
    return m_cache_hit_isValid;
}

bool OAIV2HttpRequest::isCacheLookup() const {
    return m_cache_lookup;
}
void OAIV2HttpRequest::setCacheLookup(const bool &cache_lookup) {
    m_cache_lookup = cache_lookup;
    m_cache_lookup_isSet = true;
}

bool OAIV2HttpRequest::is_cache_lookup_Set() const{
    return m_cache_lookup_isSet;
}

bool OAIV2HttpRequest::is_cache_lookup_Valid() const{
    return m_cache_lookup_isValid;
}

bool OAIV2HttpRequest::isCacheValidatedWithOriginServer() const {
    return m_cache_validated_with_origin_server;
}
void OAIV2HttpRequest::setCacheValidatedWithOriginServer(const bool &cache_validated_with_origin_server) {
    m_cache_validated_with_origin_server = cache_validated_with_origin_server;
    m_cache_validated_with_origin_server_isSet = true;
}

bool OAIV2HttpRequest::is_cache_validated_with_origin_server_Set() const{
    return m_cache_validated_with_origin_server_isSet;
}

bool OAIV2HttpRequest::is_cache_validated_with_origin_server_Valid() const{
    return m_cache_validated_with_origin_server_isValid;
}

QString OAIV2HttpRequest::getLatency() const {
    return m_latency;
}
void OAIV2HttpRequest::setLatency(const QString &latency) {
    m_latency = latency;
    m_latency_isSet = true;
}

bool OAIV2HttpRequest::is_latency_Set() const{
    return m_latency_isSet;
}

bool OAIV2HttpRequest::is_latency_Valid() const{
    return m_latency_isValid;
}

QString OAIV2HttpRequest::getProtocol() const {
    return m_protocol;
}
void OAIV2HttpRequest::setProtocol(const QString &protocol) {
    m_protocol = protocol;
    m_protocol_isSet = true;
}

bool OAIV2HttpRequest::is_protocol_Set() const{
    return m_protocol_isSet;
}

bool OAIV2HttpRequest::is_protocol_Valid() const{
    return m_protocol_isValid;
}

QString OAIV2HttpRequest::getReferer() const {
    return m_referer;
}
void OAIV2HttpRequest::setReferer(const QString &referer) {
    m_referer = referer;
    m_referer_isSet = true;
}

bool OAIV2HttpRequest::is_referer_Set() const{
    return m_referer_isSet;
}

bool OAIV2HttpRequest::is_referer_Valid() const{
    return m_referer_isValid;
}

QString OAIV2HttpRequest::getRemoteIp() const {
    return m_remote_ip;
}
void OAIV2HttpRequest::setRemoteIp(const QString &remote_ip) {
    m_remote_ip = remote_ip;
    m_remote_ip_isSet = true;
}

bool OAIV2HttpRequest::is_remote_ip_Set() const{
    return m_remote_ip_isSet;
}

bool OAIV2HttpRequest::is_remote_ip_Valid() const{
    return m_remote_ip_isValid;
}

QString OAIV2HttpRequest::getRequestMethod() const {
    return m_request_method;
}
void OAIV2HttpRequest::setRequestMethod(const QString &request_method) {
    m_request_method = request_method;
    m_request_method_isSet = true;
}

bool OAIV2HttpRequest::is_request_method_Set() const{
    return m_request_method_isSet;
}

bool OAIV2HttpRequest::is_request_method_Valid() const{
    return m_request_method_isValid;
}

QString OAIV2HttpRequest::getRequestSize() const {
    return m_request_size;
}
void OAIV2HttpRequest::setRequestSize(const QString &request_size) {
    m_request_size = request_size;
    m_request_size_isSet = true;
}

bool OAIV2HttpRequest::is_request_size_Set() const{
    return m_request_size_isSet;
}

bool OAIV2HttpRequest::is_request_size_Valid() const{
    return m_request_size_isValid;
}

QString OAIV2HttpRequest::getRequestUrl() const {
    return m_request_url;
}
void OAIV2HttpRequest::setRequestUrl(const QString &request_url) {
    m_request_url = request_url;
    m_request_url_isSet = true;
}

bool OAIV2HttpRequest::is_request_url_Set() const{
    return m_request_url_isSet;
}

bool OAIV2HttpRequest::is_request_url_Valid() const{
    return m_request_url_isValid;
}

QString OAIV2HttpRequest::getResponseSize() const {
    return m_response_size;
}
void OAIV2HttpRequest::setResponseSize(const QString &response_size) {
    m_response_size = response_size;
    m_response_size_isSet = true;
}

bool OAIV2HttpRequest::is_response_size_Set() const{
    return m_response_size_isSet;
}

bool OAIV2HttpRequest::is_response_size_Valid() const{
    return m_response_size_isValid;
}

QString OAIV2HttpRequest::getServerIp() const {
    return m_server_ip;
}
void OAIV2HttpRequest::setServerIp(const QString &server_ip) {
    m_server_ip = server_ip;
    m_server_ip_isSet = true;
}

bool OAIV2HttpRequest::is_server_ip_Set() const{
    return m_server_ip_isSet;
}

bool OAIV2HttpRequest::is_server_ip_Valid() const{
    return m_server_ip_isValid;
}

qint32 OAIV2HttpRequest::getStatus() const {
    return m_status;
}
void OAIV2HttpRequest::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIV2HttpRequest::is_status_Set() const{
    return m_status_isSet;
}

bool OAIV2HttpRequest::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIV2HttpRequest::getUserAgent() const {
    return m_user_agent;
}
void OAIV2HttpRequest::setUserAgent(const QString &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAIV2HttpRequest::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAIV2HttpRequest::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAIV2HttpRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_fill_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_hit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_lookup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_validated_with_origin_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2HttpRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
