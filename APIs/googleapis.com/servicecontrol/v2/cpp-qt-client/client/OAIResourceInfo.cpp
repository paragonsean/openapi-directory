/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceInfo::OAIResourceInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceInfo::OAIResourceInfo() {
    this->initializeModel();
}

OAIResourceInfo::~OAIResourceInfo() {}

void OAIResourceInfo::initializeModel() {

    m_container_isSet = false;
    m_container_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permission_isSet = false;
    m_permission_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIResourceInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceInfo::fromJsonObject(QJsonObject json) {

    m_container_isValid = ::OpenAPI::fromJsonValue(m_container, json[QString("container")]);
    m_container_isSet = !json[QString("container")].isNull() && m_container_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permission_isValid = ::OpenAPI::fromJsonValue(m_permission, json[QString("permission")]);
    m_permission_isSet = !json[QString("permission")].isNull() && m_permission_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIResourceInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_container_isSet) {
        obj.insert(QString("container"), ::OpenAPI::toJsonValue(m_container));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permission_isSet) {
        obj.insert(QString("permission"), ::OpenAPI::toJsonValue(m_permission));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIResourceInfo::getContainer() const {
    return m_container;
}
void OAIResourceInfo::setContainer(const QString &container) {
    m_container = container;
    m_container_isSet = true;
}

bool OAIResourceInfo::is_container_Set() const{
    return m_container_isSet;
}

bool OAIResourceInfo::is_container_Valid() const{
    return m_container_isValid;
}

QString OAIResourceInfo::getLocation() const {
    return m_location;
}
void OAIResourceInfo::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIResourceInfo::is_location_Set() const{
    return m_location_isSet;
}

bool OAIResourceInfo::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIResourceInfo::getName() const {
    return m_name;
}
void OAIResourceInfo::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceInfo::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceInfo::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceInfo::getPermission() const {
    return m_permission;
}
void OAIResourceInfo::setPermission(const QString &permission) {
    m_permission = permission;
    m_permission_isSet = true;
}

bool OAIResourceInfo::is_permission_Set() const{
    return m_permission_isSet;
}

bool OAIResourceInfo::is_permission_Valid() const{
    return m_permission_isValid;
}

QString OAIResourceInfo::getType() const {
    return m_type;
}
void OAIResourceInfo::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResourceInfo::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResourceInfo::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIResourceInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_permission_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
