/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIThirdPartyPrincipal.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIThirdPartyPrincipal::OAIThirdPartyPrincipal(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIThirdPartyPrincipal::OAIThirdPartyPrincipal() {
    this->initializeModel();
}

OAIThirdPartyPrincipal::~OAIThirdPartyPrincipal() {}

void OAIThirdPartyPrincipal::initializeModel() {

    m_third_party_claims_isSet = false;
    m_third_party_claims_isValid = false;
}

void OAIThirdPartyPrincipal::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIThirdPartyPrincipal::fromJsonObject(QJsonObject json) {

    m_third_party_claims_isValid = ::OpenAPI::fromJsonValue(m_third_party_claims, json[QString("thirdPartyClaims")]);
    m_third_party_claims_isSet = !json[QString("thirdPartyClaims")].isNull() && m_third_party_claims_isValid;
}

QString OAIThirdPartyPrincipal::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIThirdPartyPrincipal::asJsonObject() const {
    QJsonObject obj;
    if (m_third_party_claims.size() > 0) {
        obj.insert(QString("thirdPartyClaims"), ::OpenAPI::toJsonValue(m_third_party_claims));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIThirdPartyPrincipal::getThirdPartyClaims() const {
    return m_third_party_claims;
}
void OAIThirdPartyPrincipal::setThirdPartyClaims(const QMap<QString, QJsonValue> &third_party_claims) {
    m_third_party_claims = third_party_claims;
    m_third_party_claims_isSet = true;
}

bool OAIThirdPartyPrincipal::is_third_party_claims_Set() const{
    return m_third_party_claims_isSet;
}

bool OAIThirdPartyPrincipal::is_third_party_claims_Valid() const{
    return m_third_party_claims_isValid;
}

bool OAIThirdPartyPrincipal::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_third_party_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIThirdPartyPrincipal::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
