/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrgPolicyViolationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrgPolicyViolationInfo::OAIOrgPolicyViolationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrgPolicyViolationInfo::OAIOrgPolicyViolationInfo() {
    this->initializeModel();
}

OAIOrgPolicyViolationInfo::~OAIOrgPolicyViolationInfo() {}

void OAIOrgPolicyViolationInfo::initializeModel() {

    m_payload_isSet = false;
    m_payload_isValid = false;

    m_resource_tags_isSet = false;
    m_resource_tags_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_violation_info_isSet = false;
    m_violation_info_isValid = false;
}

void OAIOrgPolicyViolationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrgPolicyViolationInfo::fromJsonObject(QJsonObject json) {

    m_payload_isValid = ::OpenAPI::fromJsonValue(m_payload, json[QString("payload")]);
    m_payload_isSet = !json[QString("payload")].isNull() && m_payload_isValid;

    m_resource_tags_isValid = ::OpenAPI::fromJsonValue(m_resource_tags, json[QString("resourceTags")]);
    m_resource_tags_isSet = !json[QString("resourceTags")].isNull() && m_resource_tags_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_violation_info_isValid = ::OpenAPI::fromJsonValue(m_violation_info, json[QString("violationInfo")]);
    m_violation_info_isSet = !json[QString("violationInfo")].isNull() && m_violation_info_isValid;
}

QString OAIOrgPolicyViolationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrgPolicyViolationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_payload.size() > 0) {
        obj.insert(QString("payload"), ::OpenAPI::toJsonValue(m_payload));
    }
    if (m_resource_tags.size() > 0) {
        obj.insert(QString("resourceTags"), ::OpenAPI::toJsonValue(m_resource_tags));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_violation_info.size() > 0) {
        obj.insert(QString("violationInfo"), ::OpenAPI::toJsonValue(m_violation_info));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIOrgPolicyViolationInfo::getPayload() const {
    return m_payload;
}
void OAIOrgPolicyViolationInfo::setPayload(const QMap<QString, QJsonValue> &payload) {
    m_payload = payload;
    m_payload_isSet = true;
}

bool OAIOrgPolicyViolationInfo::is_payload_Set() const{
    return m_payload_isSet;
}

bool OAIOrgPolicyViolationInfo::is_payload_Valid() const{
    return m_payload_isValid;
}

QMap<QString, QString> OAIOrgPolicyViolationInfo::getResourceTags() const {
    return m_resource_tags;
}
void OAIOrgPolicyViolationInfo::setResourceTags(const QMap<QString, QString> &resource_tags) {
    m_resource_tags = resource_tags;
    m_resource_tags_isSet = true;
}

bool OAIOrgPolicyViolationInfo::is_resource_tags_Set() const{
    return m_resource_tags_isSet;
}

bool OAIOrgPolicyViolationInfo::is_resource_tags_Valid() const{
    return m_resource_tags_isValid;
}

QString OAIOrgPolicyViolationInfo::getResourceType() const {
    return m_resource_type;
}
void OAIOrgPolicyViolationInfo::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIOrgPolicyViolationInfo::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIOrgPolicyViolationInfo::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<OAIViolationInfo> OAIOrgPolicyViolationInfo::getViolationInfo() const {
    return m_violation_info;
}
void OAIOrgPolicyViolationInfo::setViolationInfo(const QList<OAIViolationInfo> &violation_info) {
    m_violation_info = violation_info;
    m_violation_info_isSet = true;
}

bool OAIOrgPolicyViolationInfo::is_violation_info_Set() const{
    return m_violation_info_isSet;
}

bool OAIOrgPolicyViolationInfo::is_violation_info_Valid() const{
    return m_violation_info_isValid;
}

bool OAIOrgPolicyViolationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_payload.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violation_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrgPolicyViolationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
