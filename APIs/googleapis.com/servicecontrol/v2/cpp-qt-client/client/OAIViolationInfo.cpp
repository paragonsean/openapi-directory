/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIViolationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIViolationInfo::OAIViolationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIViolationInfo::OAIViolationInfo() {
    this->initializeModel();
}

OAIViolationInfo::~OAIViolationInfo() {}

void OAIViolationInfo::initializeModel() {

    m_checked_value_isSet = false;
    m_checked_value_isValid = false;

    m_constraint_isSet = false;
    m_constraint_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_policy_type_isSet = false;
    m_policy_type_isValid = false;
}

void OAIViolationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIViolationInfo::fromJsonObject(QJsonObject json) {

    m_checked_value_isValid = ::OpenAPI::fromJsonValue(m_checked_value, json[QString("checkedValue")]);
    m_checked_value_isSet = !json[QString("checkedValue")].isNull() && m_checked_value_isValid;

    m_constraint_isValid = ::OpenAPI::fromJsonValue(m_constraint, json[QString("constraint")]);
    m_constraint_isSet = !json[QString("constraint")].isNull() && m_constraint_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_policy_type_isValid = ::OpenAPI::fromJsonValue(m_policy_type, json[QString("policyType")]);
    m_policy_type_isSet = !json[QString("policyType")].isNull() && m_policy_type_isValid;
}

QString OAIViolationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIViolationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_checked_value_isSet) {
        obj.insert(QString("checkedValue"), ::OpenAPI::toJsonValue(m_checked_value));
    }
    if (m_constraint_isSet) {
        obj.insert(QString("constraint"), ::OpenAPI::toJsonValue(m_constraint));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_policy_type_isSet) {
        obj.insert(QString("policyType"), ::OpenAPI::toJsonValue(m_policy_type));
    }
    return obj;
}

QString OAIViolationInfo::getCheckedValue() const {
    return m_checked_value;
}
void OAIViolationInfo::setCheckedValue(const QString &checked_value) {
    m_checked_value = checked_value;
    m_checked_value_isSet = true;
}

bool OAIViolationInfo::is_checked_value_Set() const{
    return m_checked_value_isSet;
}

bool OAIViolationInfo::is_checked_value_Valid() const{
    return m_checked_value_isValid;
}

QString OAIViolationInfo::getConstraint() const {
    return m_constraint;
}
void OAIViolationInfo::setConstraint(const QString &constraint) {
    m_constraint = constraint;
    m_constraint_isSet = true;
}

bool OAIViolationInfo::is_constraint_Set() const{
    return m_constraint_isSet;
}

bool OAIViolationInfo::is_constraint_Valid() const{
    return m_constraint_isValid;
}

QString OAIViolationInfo::getErrorMessage() const {
    return m_error_message;
}
void OAIViolationInfo::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIViolationInfo::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIViolationInfo::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIViolationInfo::getPolicyType() const {
    return m_policy_type;
}
void OAIViolationInfo::setPolicyType(const QString &policy_type) {
    m_policy_type = policy_type;
    m_policy_type_isSet = true;
}

bool OAIViolationInfo::is_policy_type_Set() const{
    return m_policy_type_isSet;
}

bool OAIViolationInfo::is_policy_type_Valid() const{
    return m_policy_type_isValid;
}

bool OAIViolationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_checked_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIViolationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
