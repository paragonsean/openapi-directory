/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceLocation::OAIResourceLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceLocation::OAIResourceLocation() {
    this->initializeModel();
}

OAIResourceLocation::~OAIResourceLocation() {}

void OAIResourceLocation::initializeModel() {

    m_current_locations_isSet = false;
    m_current_locations_isValid = false;

    m_original_locations_isSet = false;
    m_original_locations_isValid = false;
}

void OAIResourceLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceLocation::fromJsonObject(QJsonObject json) {

    m_current_locations_isValid = ::OpenAPI::fromJsonValue(m_current_locations, json[QString("currentLocations")]);
    m_current_locations_isSet = !json[QString("currentLocations")].isNull() && m_current_locations_isValid;

    m_original_locations_isValid = ::OpenAPI::fromJsonValue(m_original_locations, json[QString("originalLocations")]);
    m_original_locations_isSet = !json[QString("originalLocations")].isNull() && m_original_locations_isValid;
}

QString OAIResourceLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_current_locations.size() > 0) {
        obj.insert(QString("currentLocations"), ::OpenAPI::toJsonValue(m_current_locations));
    }
    if (m_original_locations.size() > 0) {
        obj.insert(QString("originalLocations"), ::OpenAPI::toJsonValue(m_original_locations));
    }
    return obj;
}

QList<QString> OAIResourceLocation::getCurrentLocations() const {
    return m_current_locations;
}
void OAIResourceLocation::setCurrentLocations(const QList<QString> &current_locations) {
    m_current_locations = current_locations;
    m_current_locations_isSet = true;
}

bool OAIResourceLocation::is_current_locations_Set() const{
    return m_current_locations_isSet;
}

bool OAIResourceLocation::is_current_locations_Valid() const{
    return m_current_locations_isValid;
}

QList<QString> OAIResourceLocation::getOriginalLocations() const {
    return m_original_locations;
}
void OAIResourceLocation::setOriginalLocations(const QList<QString> &original_locations) {
    m_original_locations = original_locations;
    m_original_locations_isSet = true;
}

bool OAIResourceLocation::is_original_locations_Set() const{
    return m_original_locations_isSet;
}

bool OAIResourceLocation::is_original_locations_Valid() const{
    return m_original_locations_isValid;
}

bool OAIResourceLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
