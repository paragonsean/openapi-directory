/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthenticationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthenticationInfo::OAIAuthenticationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthenticationInfo::OAIAuthenticationInfo() {
    this->initializeModel();
}

OAIAuthenticationInfo::~OAIAuthenticationInfo() {}

void OAIAuthenticationInfo::initializeModel() {

    m_authority_selector_isSet = false;
    m_authority_selector_isValid = false;

    m_principal_email_isSet = false;
    m_principal_email_isValid = false;

    m_principal_subject_isSet = false;
    m_principal_subject_isValid = false;

    m_service_account_delegation_info_isSet = false;
    m_service_account_delegation_info_isValid = false;

    m_service_account_key_name_isSet = false;
    m_service_account_key_name_isValid = false;

    m_service_delegation_history_isSet = false;
    m_service_delegation_history_isValid = false;

    m_third_party_principal_isSet = false;
    m_third_party_principal_isValid = false;
}

void OAIAuthenticationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthenticationInfo::fromJsonObject(QJsonObject json) {

    m_authority_selector_isValid = ::OpenAPI::fromJsonValue(m_authority_selector, json[QString("authoritySelector")]);
    m_authority_selector_isSet = !json[QString("authoritySelector")].isNull() && m_authority_selector_isValid;

    m_principal_email_isValid = ::OpenAPI::fromJsonValue(m_principal_email, json[QString("principalEmail")]);
    m_principal_email_isSet = !json[QString("principalEmail")].isNull() && m_principal_email_isValid;

    m_principal_subject_isValid = ::OpenAPI::fromJsonValue(m_principal_subject, json[QString("principalSubject")]);
    m_principal_subject_isSet = !json[QString("principalSubject")].isNull() && m_principal_subject_isValid;

    m_service_account_delegation_info_isValid = ::OpenAPI::fromJsonValue(m_service_account_delegation_info, json[QString("serviceAccountDelegationInfo")]);
    m_service_account_delegation_info_isSet = !json[QString("serviceAccountDelegationInfo")].isNull() && m_service_account_delegation_info_isValid;

    m_service_account_key_name_isValid = ::OpenAPI::fromJsonValue(m_service_account_key_name, json[QString("serviceAccountKeyName")]);
    m_service_account_key_name_isSet = !json[QString("serviceAccountKeyName")].isNull() && m_service_account_key_name_isValid;

    m_service_delegation_history_isValid = ::OpenAPI::fromJsonValue(m_service_delegation_history, json[QString("serviceDelegationHistory")]);
    m_service_delegation_history_isSet = !json[QString("serviceDelegationHistory")].isNull() && m_service_delegation_history_isValid;

    m_third_party_principal_isValid = ::OpenAPI::fromJsonValue(m_third_party_principal, json[QString("thirdPartyPrincipal")]);
    m_third_party_principal_isSet = !json[QString("thirdPartyPrincipal")].isNull() && m_third_party_principal_isValid;
}

QString OAIAuthenticationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthenticationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_authority_selector_isSet) {
        obj.insert(QString("authoritySelector"), ::OpenAPI::toJsonValue(m_authority_selector));
    }
    if (m_principal_email_isSet) {
        obj.insert(QString("principalEmail"), ::OpenAPI::toJsonValue(m_principal_email));
    }
    if (m_principal_subject_isSet) {
        obj.insert(QString("principalSubject"), ::OpenAPI::toJsonValue(m_principal_subject));
    }
    if (m_service_account_delegation_info.size() > 0) {
        obj.insert(QString("serviceAccountDelegationInfo"), ::OpenAPI::toJsonValue(m_service_account_delegation_info));
    }
    if (m_service_account_key_name_isSet) {
        obj.insert(QString("serviceAccountKeyName"), ::OpenAPI::toJsonValue(m_service_account_key_name));
    }
    if (m_service_delegation_history.isSet()) {
        obj.insert(QString("serviceDelegationHistory"), ::OpenAPI::toJsonValue(m_service_delegation_history));
    }
    if (m_third_party_principal.size() > 0) {
        obj.insert(QString("thirdPartyPrincipal"), ::OpenAPI::toJsonValue(m_third_party_principal));
    }
    return obj;
}

QString OAIAuthenticationInfo::getAuthoritySelector() const {
    return m_authority_selector;
}
void OAIAuthenticationInfo::setAuthoritySelector(const QString &authority_selector) {
    m_authority_selector = authority_selector;
    m_authority_selector_isSet = true;
}

bool OAIAuthenticationInfo::is_authority_selector_Set() const{
    return m_authority_selector_isSet;
}

bool OAIAuthenticationInfo::is_authority_selector_Valid() const{
    return m_authority_selector_isValid;
}

QString OAIAuthenticationInfo::getPrincipalEmail() const {
    return m_principal_email;
}
void OAIAuthenticationInfo::setPrincipalEmail(const QString &principal_email) {
    m_principal_email = principal_email;
    m_principal_email_isSet = true;
}

bool OAIAuthenticationInfo::is_principal_email_Set() const{
    return m_principal_email_isSet;
}

bool OAIAuthenticationInfo::is_principal_email_Valid() const{
    return m_principal_email_isValid;
}

QString OAIAuthenticationInfo::getPrincipalSubject() const {
    return m_principal_subject;
}
void OAIAuthenticationInfo::setPrincipalSubject(const QString &principal_subject) {
    m_principal_subject = principal_subject;
    m_principal_subject_isSet = true;
}

bool OAIAuthenticationInfo::is_principal_subject_Set() const{
    return m_principal_subject_isSet;
}

bool OAIAuthenticationInfo::is_principal_subject_Valid() const{
    return m_principal_subject_isValid;
}

QList<OAIServiceAccountDelegationInfo> OAIAuthenticationInfo::getServiceAccountDelegationInfo() const {
    return m_service_account_delegation_info;
}
void OAIAuthenticationInfo::setServiceAccountDelegationInfo(const QList<OAIServiceAccountDelegationInfo> &service_account_delegation_info) {
    m_service_account_delegation_info = service_account_delegation_info;
    m_service_account_delegation_info_isSet = true;
}

bool OAIAuthenticationInfo::is_service_account_delegation_info_Set() const{
    return m_service_account_delegation_info_isSet;
}

bool OAIAuthenticationInfo::is_service_account_delegation_info_Valid() const{
    return m_service_account_delegation_info_isValid;
}

QString OAIAuthenticationInfo::getServiceAccountKeyName() const {
    return m_service_account_key_name;
}
void OAIAuthenticationInfo::setServiceAccountKeyName(const QString &service_account_key_name) {
    m_service_account_key_name = service_account_key_name;
    m_service_account_key_name_isSet = true;
}

bool OAIAuthenticationInfo::is_service_account_key_name_Set() const{
    return m_service_account_key_name_isSet;
}

bool OAIAuthenticationInfo::is_service_account_key_name_Valid() const{
    return m_service_account_key_name_isValid;
}

OAIServiceDelegationHistory OAIAuthenticationInfo::getServiceDelegationHistory() const {
    return m_service_delegation_history;
}
void OAIAuthenticationInfo::setServiceDelegationHistory(const OAIServiceDelegationHistory &service_delegation_history) {
    m_service_delegation_history = service_delegation_history;
    m_service_delegation_history_isSet = true;
}

bool OAIAuthenticationInfo::is_service_delegation_history_Set() const{
    return m_service_delegation_history_isSet;
}

bool OAIAuthenticationInfo::is_service_delegation_history_Valid() const{
    return m_service_delegation_history_isValid;
}

QMap<QString, QJsonValue> OAIAuthenticationInfo::getThirdPartyPrincipal() const {
    return m_third_party_principal;
}
void OAIAuthenticationInfo::setThirdPartyPrincipal(const QMap<QString, QJsonValue> &third_party_principal) {
    m_third_party_principal = third_party_principal;
    m_third_party_principal_isSet = true;
}

bool OAIAuthenticationInfo::is_third_party_principal_Set() const{
    return m_third_party_principal_isSet;
}

bool OAIAuthenticationInfo::is_third_party_principal_Valid() const{
    return m_third_party_principal_isValid;
}

bool OAIAuthenticationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authority_selector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_principal_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_delegation_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_key_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_delegation_history.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_third_party_principal.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthenticationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
