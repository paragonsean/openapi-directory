/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResource::OAIResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResource::OAIResource() {
    this->initializeModel();
}

OAIResource::~OAIResource() {}

void OAIResource::initializeModel() {

    m_annotations_isSet = false;
    m_annotations_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResource::fromJsonObject(QJsonObject json) {

    m_annotations_isValid = ::OpenAPI::fromJsonValue(m_annotations, json[QString("annotations")]);
    m_annotations_isSet = !json[QString("annotations")].isNull() && m_annotations_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResource::asJsonObject() const {
    QJsonObject obj;
    if (m_annotations.size() > 0) {
        obj.insert(QString("annotations"), ::OpenAPI::toJsonValue(m_annotations));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QMap<QString, QString> OAIResource::getAnnotations() const {
    return m_annotations;
}
void OAIResource::setAnnotations(const QMap<QString, QString> &annotations) {
    m_annotations = annotations;
    m_annotations_isSet = true;
}

bool OAIResource::is_annotations_Set() const{
    return m_annotations_isSet;
}

bool OAIResource::is_annotations_Valid() const{
    return m_annotations_isValid;
}

QString OAIResource::getCreateTime() const {
    return m_create_time;
}
void OAIResource::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIResource::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIResource::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIResource::getDeleteTime() const {
    return m_delete_time;
}
void OAIResource::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIResource::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIResource::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIResource::getDisplayName() const {
    return m_display_name;
}
void OAIResource::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIResource::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIResource::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIResource::getEtag() const {
    return m_etag;
}
void OAIResource::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIResource::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIResource::is_etag_Valid() const{
    return m_etag_isValid;
}

QMap<QString, QString> OAIResource::getLabels() const {
    return m_labels;
}
void OAIResource::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIResource::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIResource::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIResource::getLocation() const {
    return m_location;
}
void OAIResource::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIResource::is_location_Set() const{
    return m_location_isSet;
}

bool OAIResource::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIResource::getName() const {
    return m_name;
}
void OAIResource::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResource::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResource::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResource::getService() const {
    return m_service;
}
void OAIResource::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIResource::is_service_Set() const{
    return m_service_isSet;
}

bool OAIResource::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIResource::getType() const {
    return m_type;
}
void OAIResource::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIResource::is_type_Set() const{
    return m_type_isSet;
}

bool OAIResource::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIResource::getUid() const {
    return m_uid;
}
void OAIResource::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIResource::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIResource::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIResource::getUpdateTime() const {
    return m_update_time;
}
void OAIResource::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIResource::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIResource::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
