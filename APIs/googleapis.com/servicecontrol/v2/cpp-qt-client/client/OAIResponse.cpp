/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_backend_latency_isSet = false;
    m_backend_latency_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_backend_latency_isValid = ::OpenAPI::fromJsonValue(m_backend_latency, json[QString("backendLatency")]);
    m_backend_latency_isSet = !json[QString("backendLatency")].isNull() && m_backend_latency_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_latency_isSet) {
        obj.insert(QString("backendLatency"), ::OpenAPI::toJsonValue(m_backend_latency));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

QString OAIResponse::getBackendLatency() const {
    return m_backend_latency;
}
void OAIResponse::setBackendLatency(const QString &backend_latency) {
    m_backend_latency = backend_latency;
    m_backend_latency_isSet = true;
}

bool OAIResponse::is_backend_latency_Set() const{
    return m_backend_latency_isSet;
}

bool OAIResponse::is_backend_latency_Valid() const{
    return m_backend_latency_isValid;
}

QString OAIResponse::getCode() const {
    return m_code;
}
void OAIResponse::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIResponse::is_code_Set() const{
    return m_code_isSet;
}

bool OAIResponse::is_code_Valid() const{
    return m_code_isValid;
}

QMap<QString, QString> OAIResponse::getHeaders() const {
    return m_headers;
}
void OAIResponse::setHeaders(const QMap<QString, QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

QString OAIResponse::getSize() const {
    return m_size;
}
void OAIResponse::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIResponse::is_size_Set() const{
    return m_size_isSet;
}

bool OAIResponse::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIResponse::getTime() const {
    return m_time;
}
void OAIResponse::setTime(const QString &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIResponse::is_time_Set() const{
    return m_time_isSet;
}

bool OAIResponse::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_latency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
