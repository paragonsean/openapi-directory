/**
 * Service Control API
 * Provides admission control and telemetry reporting for services integrated with Service Infrastructure. 
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceDelegationHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceDelegationHistory::OAIServiceDelegationHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceDelegationHistory::OAIServiceDelegationHistory() {
    this->initializeModel();
}

OAIServiceDelegationHistory::~OAIServiceDelegationHistory() {}

void OAIServiceDelegationHistory::initializeModel() {

    m_original_principal_isSet = false;
    m_original_principal_isValid = false;

    m_service_metadata_isSet = false;
    m_service_metadata_isValid = false;
}

void OAIServiceDelegationHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceDelegationHistory::fromJsonObject(QJsonObject json) {

    m_original_principal_isValid = ::OpenAPI::fromJsonValue(m_original_principal, json[QString("originalPrincipal")]);
    m_original_principal_isSet = !json[QString("originalPrincipal")].isNull() && m_original_principal_isValid;

    m_service_metadata_isValid = ::OpenAPI::fromJsonValue(m_service_metadata, json[QString("serviceMetadata")]);
    m_service_metadata_isSet = !json[QString("serviceMetadata")].isNull() && m_service_metadata_isValid;
}

QString OAIServiceDelegationHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceDelegationHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_original_principal_isSet) {
        obj.insert(QString("originalPrincipal"), ::OpenAPI::toJsonValue(m_original_principal));
    }
    if (m_service_metadata.size() > 0) {
        obj.insert(QString("serviceMetadata"), ::OpenAPI::toJsonValue(m_service_metadata));
    }
    return obj;
}

QString OAIServiceDelegationHistory::getOriginalPrincipal() const {
    return m_original_principal;
}
void OAIServiceDelegationHistory::setOriginalPrincipal(const QString &original_principal) {
    m_original_principal = original_principal;
    m_original_principal_isSet = true;
}

bool OAIServiceDelegationHistory::is_original_principal_Set() const{
    return m_original_principal_isSet;
}

bool OAIServiceDelegationHistory::is_original_principal_Valid() const{
    return m_original_principal_isValid;
}

QList<OAIServiceMetadata> OAIServiceDelegationHistory::getServiceMetadata() const {
    return m_service_metadata;
}
void OAIServiceDelegationHistory::setServiceMetadata(const QList<OAIServiceMetadata> &service_metadata) {
    m_service_metadata = service_metadata;
    m_service_metadata_isSet = true;
}

bool OAIServiceDelegationHistory::is_service_metadata_Set() const{
    return m_service_metadata_isSet;
}

bool OAIServiceDelegationHistory::is_service_metadata_Valid() const{
    return m_service_metadata_isValid;
}

bool OAIServiceDelegationHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original_principal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceDelegationHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
