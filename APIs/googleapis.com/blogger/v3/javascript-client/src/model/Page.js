/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PageAuthor from './PageAuthor';
import PageBlog from './PageBlog';

/**
 * The Page model module.
 * @module model/Page
 * @version v3
 */
class Page {
    /**
     * Constructs a new <code>Page</code>.
     * @alias module:model/Page
     */
    constructor() { 
        
        Page.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Page} obj Optional instance to populate.
     * @return {module:model/Page} The populated <code>Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Page();

            if (data.hasOwnProperty('author')) {
                obj['author'] = PageAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('blog')) {
                obj['blog'] = PageBlog.constructFromObject(data['blog']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('trashed')) {
                obj['trashed'] = ApiClient.convertToType(data['trashed'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Page</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          PageAuthor.validateJSON(data['author']);
        }
        // validate the optional field `blog`
        if (data['blog']) { // data not null
          PageBlog.validateJSON(data['blog']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['published'] && !(typeof data['published'] === 'string' || data['published'] instanceof String)) {
            throw new Error("Expected the field `published` to be a primitive type in the JSON string but got " + data['published']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['trashed'] && !(typeof data['trashed'] === 'string' || data['trashed'] instanceof String)) {
            throw new Error("Expected the field `trashed` to be a primitive type in the JSON string but got " + data['trashed']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/PageAuthor} author
 */
Page.prototype['author'] = undefined;

/**
 * @member {module:model/PageBlog} blog
 */
Page.prototype['blog'] = undefined;

/**
 * The body content of this Page, in HTML.
 * @member {String} content
 */
Page.prototype['content'] = undefined;

/**
 * Etag of the resource.
 * @member {String} etag
 */
Page.prototype['etag'] = undefined;

/**
 * The identifier for this resource.
 * @member {String} id
 */
Page.prototype['id'] = undefined;

/**
 * The kind of this entity. Always blogger#page.
 * @member {String} kind
 */
Page.prototype['kind'] = undefined;

/**
 * RFC 3339 date-time when this Page was published.
 * @member {String} published
 */
Page.prototype['published'] = undefined;

/**
 * The API REST URL to fetch this resource from.
 * @member {String} selfLink
 */
Page.prototype['selfLink'] = undefined;

/**
 * The status of the page for admin resources (either LIVE or DRAFT).
 * @member {module:model/Page.StatusEnum} status
 */
Page.prototype['status'] = undefined;

/**
 * The title of this entity. This is the name displayed in the Admin user interface.
 * @member {String} title
 */
Page.prototype['title'] = undefined;

/**
 * RFC 3339 date-time when this Page was trashed.
 * @member {String} trashed
 */
Page.prototype['trashed'] = undefined;

/**
 * RFC 3339 date-time when this Page was last updated.
 * @member {String} updated
 */
Page.prototype['updated'] = undefined;

/**
 * The URL that this Page is displayed at.
 * @member {String} url
 */
Page.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Page['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "SOFT_TRASHED"
     * @const
     */
    "SOFT_TRASHED": "SOFT_TRASHED"
};



export default Page;

