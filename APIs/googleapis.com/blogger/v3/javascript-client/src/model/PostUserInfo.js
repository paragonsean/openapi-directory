/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Post from './Post';
import PostPerUserInfo from './PostPerUserInfo';

/**
 * The PostUserInfo model module.
 * @module model/PostUserInfo
 * @version v3
 */
class PostUserInfo {
    /**
     * Constructs a new <code>PostUserInfo</code>.
     * @alias module:model/PostUserInfo
     */
    constructor() { 
        
        PostUserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostUserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostUserInfo} obj Optional instance to populate.
     * @return {module:model/PostUserInfo} The populated <code>PostUserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostUserInfo();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('post')) {
                obj['post'] = Post.constructFromObject(data['post']);
            }
            if (data.hasOwnProperty('post_user_info')) {
                obj['post_user_info'] = PostPerUserInfo.constructFromObject(data['post_user_info']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostUserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostUserInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `post`
        if (data['post']) { // data not null
          Post.validateJSON(data['post']);
        }
        // validate the optional field `post_user_info`
        if (data['post_user_info']) { // data not null
          PostPerUserInfo.validateJSON(data['post_user_info']);
        }

        return true;
    }


}



/**
 * The kind of this entity. Always blogger#postUserInfo.
 * @member {String} kind
 */
PostUserInfo.prototype['kind'] = undefined;

/**
 * @member {module:model/Post} post
 */
PostUserInfo.prototype['post'] = undefined;

/**
 * @member {module:model/PostPerUserInfo} post_user_info
 */
PostUserInfo.prototype['post_user_info'] = undefined;






export default PostUserInfo;

