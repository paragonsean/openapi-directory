/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommentAuthorImage from './CommentAuthorImage';

/**
 * The CommentAuthor model module.
 * @module model/CommentAuthor
 * @version v3
 */
class CommentAuthor {
    /**
     * Constructs a new <code>CommentAuthor</code>.
     * The author of this Comment.
     * @alias module:model/CommentAuthor
     */
    constructor() { 
        
        CommentAuthor.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CommentAuthor</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CommentAuthor} obj Optional instance to populate.
     * @return {module:model/CommentAuthor} The populated <code>CommentAuthor</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CommentAuthor();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = CommentAuthorImage.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CommentAuthor</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CommentAuthor</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          CommentAuthorImage.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The display name.
 * @member {String} displayName
 */
CommentAuthor.prototype['displayName'] = undefined;

/**
 * The identifier of the creator.
 * @member {String} id
 */
CommentAuthor.prototype['id'] = undefined;

/**
 * @member {module:model/CommentAuthorImage} image
 */
CommentAuthor.prototype['image'] = undefined;

/**
 * The URL of the creator's Profile page.
 * @member {String} url
 */
CommentAuthor.prototype['url'] = undefined;






export default CommentAuthor;

