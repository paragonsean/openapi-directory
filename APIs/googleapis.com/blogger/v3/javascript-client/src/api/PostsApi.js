/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Post from '../model/Post';
import PostList from '../model/PostList';

/**
* Posts service.
* @module api/PostsApi
* @version v3
*/
export default class PostsApi {

    /**
    * Constructs a new PostsApi. 
    * @alias module:api/PostsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bloggerPostsDelete operation.
     * @callback module:api/PostsApi~bloggerPostsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a post by blog id and post id.
     * @param {String} blogId 
     * @param {String} postId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [useTrash] Move to Trash if possible
     * @param {module:api/PostsApi~bloggerPostsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    bloggerPostsDelete(blogId, postId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsDelete");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling bloggerPostsDelete");
      }

      let pathParams = {
        'blogId': blogId,
        'postId': postId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'useTrash': opts['useTrash']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/{postId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsGet operation.
     * @callback module:api/PostsApi~bloggerPostsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a post by blog id and post id
     * @param {String} blogId 
     * @param {String} postId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [fetchBody] 
     * @param {Boolean} [fetchImages] 
     * @param {Number} [maxComments] 
     * @param {module:model/String} [view] 
     * @param {module:api/PostsApi~bloggerPostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsGet(blogId, postId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsGet");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling bloggerPostsGet");
      }

      let pathParams = {
        'blogId': blogId,
        'postId': postId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fetchBody': opts['fetchBody'],
        'fetchImages': opts['fetchImages'],
        'maxComments': opts['maxComments'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/{postId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsGetByPath operation.
     * @callback module:api/PostsApi~bloggerPostsGetByPathCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a post by path.
     * @param {String} blogId 
     * @param {String} path 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxComments] 
     * @param {module:model/String} [view] 
     * @param {module:api/PostsApi~bloggerPostsGetByPathCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsGetByPath(blogId, path, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsGetByPath");
      }
      // verify the required parameter 'path' is set
      if (path === undefined || path === null) {
        throw new Error("Missing the required parameter 'path' when calling bloggerPostsGetByPath");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'path': path,
        'maxComments': opts['maxComments'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/bypath', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsInsert operation.
     * @callback module:api/PostsApi~bloggerPostsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Inserts a post.
     * @param {String} blogId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [fetchBody] 
     * @param {Boolean} [fetchImages] 
     * @param {Boolean} [isDraft] 
     * @param {module:model/Post} [post] 
     * @param {module:api/PostsApi~bloggerPostsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsInsert(blogId, opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsInsert");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fetchBody': opts['fetchBody'],
        'fetchImages': opts['fetchImages'],
        'isDraft': opts['isDraft']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsList operation.
     * @callback module:api/PostsApi~bloggerPostsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists posts.
     * @param {String} blogId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [endDate] 
     * @param {Boolean} [fetchBodies] 
     * @param {Boolean} [fetchImages] 
     * @param {String} [labels] 
     * @param {Number} [maxResults] 
     * @param {module:model/String} [orderBy] 
     * @param {String} [pageToken] 
     * @param {module:model/String} [sortOption] Sort direction applied to post list.
     * @param {String} [startDate] 
     * @param {Array.<module:model/String>} [status] 
     * @param {module:model/String} [view] 
     * @param {module:api/PostsApi~bloggerPostsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostList}
     */
    bloggerPostsList(blogId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsList");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'endDate': opts['endDate'],
        'fetchBodies': opts['fetchBodies'],
        'fetchImages': opts['fetchImages'],
        'labels': opts['labels'],
        'maxResults': opts['maxResults'],
        'orderBy': opts['orderBy'],
        'pageToken': opts['pageToken'],
        'sortOption': opts['sortOption'],
        'startDate': opts['startDate'],
        'status': this.apiClient.buildCollectionParam(opts['status'], 'multi'),
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostList;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsPatch operation.
     * @callback module:api/PostsApi~bloggerPostsPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches a post.
     * @param {String} blogId 
     * @param {String} postId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [fetchBody] 
     * @param {Boolean} [fetchImages] 
     * @param {Number} [maxComments] 
     * @param {Boolean} [publish] 
     * @param {Boolean} [revert] 
     * @param {module:model/Post} [post] 
     * @param {module:api/PostsApi~bloggerPostsPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsPatch(blogId, postId, opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsPatch");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling bloggerPostsPatch");
      }

      let pathParams = {
        'blogId': blogId,
        'postId': postId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fetchBody': opts['fetchBody'],
        'fetchImages': opts['fetchImages'],
        'maxComments': opts['maxComments'],
        'publish': opts['publish'],
        'revert': opts['revert']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/{postId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsPublish operation.
     * @callback module:api/PostsApi~bloggerPostsPublishCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publishes a post.
     * @param {String} blogId 
     * @param {String} postId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [publishDate] 
     * @param {module:api/PostsApi~bloggerPostsPublishCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsPublish(blogId, postId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsPublish");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling bloggerPostsPublish");
      }

      let pathParams = {
        'blogId': blogId,
        'postId': postId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'publishDate': opts['publishDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/{postId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsRevert operation.
     * @callback module:api/PostsApi~bloggerPostsRevertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverts a published or scheduled post to draft state.
     * @param {String} blogId 
     * @param {String} postId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/PostsApi~bloggerPostsRevertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsRevert(blogId, postId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsRevert");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling bloggerPostsRevert");
      }

      let pathParams = {
        'blogId': blogId,
        'postId': postId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/{postId}/revert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsSearch operation.
     * @callback module:api/PostsApi~bloggerPostsSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for posts matching given query terms in the specified blog.
     * @param {String} blogId 
     * @param {String} q 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [fetchBodies] 
     * @param {module:model/String} [orderBy] 
     * @param {module:api/PostsApi~bloggerPostsSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostList}
     */
    bloggerPostsSearch(blogId, q, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsSearch");
      }
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling bloggerPostsSearch");
      }

      let pathParams = {
        'blogId': blogId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'q': q,
        'fetchBodies': opts['fetchBodies'],
        'orderBy': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PostList;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bloggerPostsUpdate operation.
     * @callback module:api/PostsApi~bloggerPostsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Post} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a post by blog id and post id.
     * @param {String} blogId 
     * @param {String} postId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Boolean} [fetchBody] 
     * @param {Boolean} [fetchImages] 
     * @param {Number} [maxComments] 
     * @param {Boolean} [publish] 
     * @param {Boolean} [revert] 
     * @param {module:model/Post} [post] 
     * @param {module:api/PostsApi~bloggerPostsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Post}
     */
    bloggerPostsUpdate(blogId, postId, opts, callback) {
      opts = opts || {};
      let postBody = opts['post'];
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerPostsUpdate");
      }
      // verify the required parameter 'postId' is set
      if (postId === undefined || postId === null) {
        throw new Error("Missing the required parameter 'postId' when calling bloggerPostsUpdate");
      }

      let pathParams = {
        'blogId': blogId,
        'postId': postId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'fetchBody': opts['fetchBody'],
        'fetchImages': opts['fetchImages'],
        'maxComments': opts['maxComments'],
        'publish': opts['publish'],
        'revert': opts['revert']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Post;
      return this.apiClient.callApi(
        '/v3/blogs/{blogId}/posts/{postId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
