/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BlogUserInfo from '../model/BlogUserInfo';

/**
* BlogUserInfos service.
* @module api/BlogUserInfosApi
* @version v3
*/
export default class BlogUserInfosApi {

    /**
    * Constructs a new BlogUserInfosApi. 
    * @alias module:api/BlogUserInfosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the bloggerBlogUserInfosGet operation.
     * @callback module:api/BlogUserInfosApi~bloggerBlogUserInfosGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlogUserInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets one blog and user info pair by blog id and user id.
     * @param {String} userId 
     * @param {String} blogId 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [maxPosts] 
     * @param {module:api/BlogUserInfosApi~bloggerBlogUserInfosGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlogUserInfo}
     */
    bloggerBlogUserInfosGet(userId, blogId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling bloggerBlogUserInfosGet");
      }
      // verify the required parameter 'blogId' is set
      if (blogId === undefined || blogId === null) {
        throw new Error("Missing the required parameter 'blogId' when calling bloggerBlogUserInfosGet");
      }

      let pathParams = {
        'userId': userId,
        'blogId': blogId
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'maxPosts': opts['maxPosts']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BlogUserInfo;
      return this.apiClient.callApi(
        '/v3/users/{userId}/blogs/{blogId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
