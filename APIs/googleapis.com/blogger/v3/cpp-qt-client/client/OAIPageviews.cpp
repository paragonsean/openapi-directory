/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPageviews.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPageviews::OAIPageviews(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPageviews::OAIPageviews() {
    this->initializeModel();
}

OAIPageviews::~OAIPageviews() {}

void OAIPageviews::initializeModel() {

    m_blog_id_isSet = false;
    m_blog_id_isValid = false;

    m_counts_isSet = false;
    m_counts_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIPageviews::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPageviews::fromJsonObject(QJsonObject json) {

    m_blog_id_isValid = ::OpenAPI::fromJsonValue(m_blog_id, json[QString("blogId")]);
    m_blog_id_isSet = !json[QString("blogId")].isNull() && m_blog_id_isValid;

    m_counts_isValid = ::OpenAPI::fromJsonValue(m_counts, json[QString("counts")]);
    m_counts_isSet = !json[QString("counts")].isNull() && m_counts_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIPageviews::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPageviews::asJsonObject() const {
    QJsonObject obj;
    if (m_blog_id_isSet) {
        obj.insert(QString("blogId"), ::OpenAPI::toJsonValue(m_blog_id));
    }
    if (m_counts.size() > 0) {
        obj.insert(QString("counts"), ::OpenAPI::toJsonValue(m_counts));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

QString OAIPageviews::getBlogId() const {
    return m_blog_id;
}
void OAIPageviews::setBlogId(const QString &blog_id) {
    m_blog_id = blog_id;
    m_blog_id_isSet = true;
}

bool OAIPageviews::is_blog_id_Set() const{
    return m_blog_id_isSet;
}

bool OAIPageviews::is_blog_id_Valid() const{
    return m_blog_id_isValid;
}

QList<OAIPageviews_counts_inner> OAIPageviews::getCounts() const {
    return m_counts;
}
void OAIPageviews::setCounts(const QList<OAIPageviews_counts_inner> &counts) {
    m_counts = counts;
    m_counts_isSet = true;
}

bool OAIPageviews::is_counts_Set() const{
    return m_counts_isSet;
}

bool OAIPageviews::is_counts_Valid() const{
    return m_counts_isValid;
}

QString OAIPageviews::getKind() const {
    return m_kind;
}
void OAIPageviews::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPageviews::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPageviews::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIPageviews::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPageviews::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
