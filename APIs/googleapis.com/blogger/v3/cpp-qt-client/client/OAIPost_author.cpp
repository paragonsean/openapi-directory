/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_author.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_author::OAIPost_author(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_author::OAIPost_author() {
    this->initializeModel();
}

OAIPost_author::~OAIPost_author() {}

void OAIPost_author::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPost_author::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_author::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPost_author::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_author::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIPost_author::getDisplayName() const {
    return m_display_name;
}
void OAIPost_author::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPost_author::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPost_author::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPost_author::getId() const {
    return m_id;
}
void OAIPost_author::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPost_author::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPost_author::is_id_Valid() const{
    return m_id_isValid;
}

OAIComment_author_image OAIPost_author::getImage() const {
    return m_image;
}
void OAIPost_author::setImage(const OAIComment_author_image &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPost_author::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPost_author::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPost_author::getUrl() const {
    return m_url;
}
void OAIPost_author::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPost_author::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPost_author::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPost_author::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_author::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
