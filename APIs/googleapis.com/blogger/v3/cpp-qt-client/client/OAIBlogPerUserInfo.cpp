/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlogPerUserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlogPerUserInfo::OAIBlogPerUserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlogPerUserInfo::OAIBlogPerUserInfo() {
    this->initializeModel();
}

OAIBlogPerUserInfo::~OAIBlogPerUserInfo() {}

void OAIBlogPerUserInfo::initializeModel() {

    m_blog_id_isSet = false;
    m_blog_id_isValid = false;

    m_has_admin_access_isSet = false;
    m_has_admin_access_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_photos_album_key_isSet = false;
    m_photos_album_key_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIBlogPerUserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlogPerUserInfo::fromJsonObject(QJsonObject json) {

    m_blog_id_isValid = ::OpenAPI::fromJsonValue(m_blog_id, json[QString("blogId")]);
    m_blog_id_isSet = !json[QString("blogId")].isNull() && m_blog_id_isValid;

    m_has_admin_access_isValid = ::OpenAPI::fromJsonValue(m_has_admin_access, json[QString("hasAdminAccess")]);
    m_has_admin_access_isSet = !json[QString("hasAdminAccess")].isNull() && m_has_admin_access_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_photos_album_key_isValid = ::OpenAPI::fromJsonValue(m_photos_album_key, json[QString("photosAlbumKey")]);
    m_photos_album_key_isSet = !json[QString("photosAlbumKey")].isNull() && m_photos_album_key_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIBlogPerUserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlogPerUserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_blog_id_isSet) {
        obj.insert(QString("blogId"), ::OpenAPI::toJsonValue(m_blog_id));
    }
    if (m_has_admin_access_isSet) {
        obj.insert(QString("hasAdminAccess"), ::OpenAPI::toJsonValue(m_has_admin_access));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_photos_album_key_isSet) {
        obj.insert(QString("photosAlbumKey"), ::OpenAPI::toJsonValue(m_photos_album_key));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIBlogPerUserInfo::getBlogId() const {
    return m_blog_id;
}
void OAIBlogPerUserInfo::setBlogId(const QString &blog_id) {
    m_blog_id = blog_id;
    m_blog_id_isSet = true;
}

bool OAIBlogPerUserInfo::is_blog_id_Set() const{
    return m_blog_id_isSet;
}

bool OAIBlogPerUserInfo::is_blog_id_Valid() const{
    return m_blog_id_isValid;
}

bool OAIBlogPerUserInfo::isHasAdminAccess() const {
    return m_has_admin_access;
}
void OAIBlogPerUserInfo::setHasAdminAccess(const bool &has_admin_access) {
    m_has_admin_access = has_admin_access;
    m_has_admin_access_isSet = true;
}

bool OAIBlogPerUserInfo::is_has_admin_access_Set() const{
    return m_has_admin_access_isSet;
}

bool OAIBlogPerUserInfo::is_has_admin_access_Valid() const{
    return m_has_admin_access_isValid;
}

QString OAIBlogPerUserInfo::getKind() const {
    return m_kind;
}
void OAIBlogPerUserInfo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBlogPerUserInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBlogPerUserInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIBlogPerUserInfo::getPhotosAlbumKey() const {
    return m_photos_album_key;
}
void OAIBlogPerUserInfo::setPhotosAlbumKey(const QString &photos_album_key) {
    m_photos_album_key = photos_album_key;
    m_photos_album_key_isSet = true;
}

bool OAIBlogPerUserInfo::is_photos_album_key_Set() const{
    return m_photos_album_key_isSet;
}

bool OAIBlogPerUserInfo::is_photos_album_key_Valid() const{
    return m_photos_album_key_isValid;
}

QString OAIBlogPerUserInfo::getRole() const {
    return m_role;
}
void OAIBlogPerUserInfo::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIBlogPerUserInfo::is_role_Set() const{
    return m_role_isSet;
}

bool OAIBlogPerUserInfo::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIBlogPerUserInfo::getUserId() const {
    return m_user_id;
}
void OAIBlogPerUserInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIBlogPerUserInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIBlogPerUserInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIBlogPerUserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blog_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_admin_access_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photos_album_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlogPerUserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
