/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlog_locale.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlog_locale::OAIBlog_locale(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlog_locale::OAIBlog_locale() {
    this->initializeModel();
}

OAIBlog_locale::~OAIBlog_locale() {}

void OAIBlog_locale::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_variant_isSet = false;
    m_variant_isValid = false;
}

void OAIBlog_locale::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlog_locale::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_variant_isValid = ::OpenAPI::fromJsonValue(m_variant, json[QString("variant")]);
    m_variant_isSet = !json[QString("variant")].isNull() && m_variant_isValid;
}

QString OAIBlog_locale::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlog_locale::asJsonObject() const {
    QJsonObject obj;
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_variant_isSet) {
        obj.insert(QString("variant"), ::OpenAPI::toJsonValue(m_variant));
    }
    return obj;
}

QString OAIBlog_locale::getCountry() const {
    return m_country;
}
void OAIBlog_locale::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIBlog_locale::is_country_Set() const{
    return m_country_isSet;
}

bool OAIBlog_locale::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIBlog_locale::getLanguage() const {
    return m_language;
}
void OAIBlog_locale::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIBlog_locale::is_language_Set() const{
    return m_language_isSet;
}

bool OAIBlog_locale::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIBlog_locale::getVariant() const {
    return m_variant;
}
void OAIBlog_locale::setVariant(const QString &variant) {
    m_variant = variant;
    m_variant_isSet = true;
}

bool OAIBlog_locale::is_variant_Set() const{
    return m_variant_isSet;
}

bool OAIBlog_locale::is_variant_Valid() const{
    return m_variant_isValid;
}

bool OAIBlog_locale::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlog_locale::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
