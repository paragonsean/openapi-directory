/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlogUserInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlogUserInfo::OAIBlogUserInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlogUserInfo::OAIBlogUserInfo() {
    this->initializeModel();
}

OAIBlogUserInfo::~OAIBlogUserInfo() {}

void OAIBlogUserInfo::initializeModel() {

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_blog_user_info_isSet = false;
    m_blog_user_info_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;
}

void OAIBlogUserInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlogUserInfo::fromJsonObject(QJsonObject json) {

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_blog_user_info_isValid = ::OpenAPI::fromJsonValue(m_blog_user_info, json[QString("blog_user_info")]);
    m_blog_user_info_isSet = !json[QString("blog_user_info")].isNull() && m_blog_user_info_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;
}

QString OAIBlogUserInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlogUserInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_blog.isSet()) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_blog_user_info.isSet()) {
        obj.insert(QString("blog_user_info"), ::OpenAPI::toJsonValue(m_blog_user_info));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    return obj;
}

OAIBlog OAIBlogUserInfo::getBlog() const {
    return m_blog;
}
void OAIBlogUserInfo::setBlog(const OAIBlog &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIBlogUserInfo::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIBlogUserInfo::is_blog_Valid() const{
    return m_blog_isValid;
}

OAIBlogPerUserInfo OAIBlogUserInfo::getBlogUserInfo() const {
    return m_blog_user_info;
}
void OAIBlogUserInfo::setBlogUserInfo(const OAIBlogPerUserInfo &blog_user_info) {
    m_blog_user_info = blog_user_info;
    m_blog_user_info_isSet = true;
}

bool OAIBlogUserInfo::is_blog_user_info_Set() const{
    return m_blog_user_info_isSet;
}

bool OAIBlogUserInfo::is_blog_user_info_Valid() const{
    return m_blog_user_info_isValid;
}

QString OAIBlogUserInfo::getKind() const {
    return m_kind;
}
void OAIBlogUserInfo::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBlogUserInfo::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBlogUserInfo::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIBlogUserInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog_user_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlogUserInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
