/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost_location.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost_location::OAIPost_location(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost_location::OAIPost_location() {
    this->initializeModel();
}

OAIPost_location::~OAIPost_location() {}

void OAIPost_location::initializeModel() {

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_span_isSet = false;
    m_span_isValid = false;
}

void OAIPost_location::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost_location::fromJsonObject(QJsonObject json) {

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_span_isValid = ::OpenAPI::fromJsonValue(m_span, json[QString("span")]);
    m_span_isSet = !json[QString("span")].isNull() && m_span_isValid;
}

QString OAIPost_location::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost_location::asJsonObject() const {
    QJsonObject obj;
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_span_isSet) {
        obj.insert(QString("span"), ::OpenAPI::toJsonValue(m_span));
    }
    return obj;
}

double OAIPost_location::getLat() const {
    return m_lat;
}
void OAIPost_location::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAIPost_location::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAIPost_location::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAIPost_location::getLng() const {
    return m_lng;
}
void OAIPost_location::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAIPost_location::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAIPost_location::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAIPost_location::getName() const {
    return m_name;
}
void OAIPost_location::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPost_location::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPost_location::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPost_location::getSpan() const {
    return m_span;
}
void OAIPost_location::setSpan(const QString &span) {
    m_span = span;
    m_span_isSet = true;
}

bool OAIPost_location::is_span_Set() const{
    return m_span_isSet;
}

bool OAIPost_location::is_span_Valid() const{
    return m_span_isValid;
}

bool OAIPost_location::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost_location::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
