# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PageviewsCountsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, time_range: str=None):
        """PageviewsCountsInner - a model defined in OpenAPI

        :param count: The count of this PageviewsCountsInner.
        :param time_range: The time_range of this PageviewsCountsInner.
        """
        self.openapi_types = {
            'count': str,
            'time_range': str
        }

        self.attribute_map = {
            'count': 'count',
            'time_range': 'timeRange'
        }

        self._count = count
        self._time_range = time_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PageviewsCountsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pageviews_counts_inner of this PageviewsCountsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this PageviewsCountsInner.

        Count of page views for the given time range.

        :return: The count of this PageviewsCountsInner.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this PageviewsCountsInner.

        Count of page views for the given time range.

        :param count: The count of this PageviewsCountsInner.
        :type count: str
        """

        self._count = count

    @property
    def time_range(self):
        """Gets the time_range of this PageviewsCountsInner.

        Time range the given count applies to.

        :return: The time_range of this PageviewsCountsInner.
        :rtype: str
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this PageviewsCountsInner.

        Time range the given count applies to.

        :param time_range: The time_range of this PageviewsCountsInner.
        :type time_range: str
        """
        allowed_values = ["ALL_TIME", "THIRTY_DAYS", "SEVEN_DAYS"]  # noqa: E501
        if time_range not in allowed_values:
            raise ValueError(
                "Invalid value for `time_range` ({0}), must be one of {1}"
                .format(time_range, allowed_values)
            )

        self._time_range = time_range
