# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.pageviews_counts_inner import PageviewsCountsInner
from openapi_server import util


class Pageviews(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blog_id: str=None, counts: List[PageviewsCountsInner]=None, kind: str=None):
        """Pageviews - a model defined in OpenAPI

        :param blog_id: The blog_id of this Pageviews.
        :param counts: The counts of this Pageviews.
        :param kind: The kind of this Pageviews.
        """
        self.openapi_types = {
            'blog_id': str,
            'counts': List[PageviewsCountsInner],
            'kind': str
        }

        self.attribute_map = {
            'blog_id': 'blogId',
            'counts': 'counts',
            'kind': 'kind'
        }

        self._blog_id = blog_id
        self._counts = counts
        self._kind = kind

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Pageviews':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pageviews of this Pageviews.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blog_id(self):
        """Gets the blog_id of this Pageviews.

        Blog Id.

        :return: The blog_id of this Pageviews.
        :rtype: str
        """
        return self._blog_id

    @blog_id.setter
    def blog_id(self, blog_id):
        """Sets the blog_id of this Pageviews.

        Blog Id.

        :param blog_id: The blog_id of this Pageviews.
        :type blog_id: str
        """

        self._blog_id = blog_id

    @property
    def counts(self):
        """Gets the counts of this Pageviews.

        The container of posts in this blog.

        :return: The counts of this Pageviews.
        :rtype: List[PageviewsCountsInner]
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this Pageviews.

        The container of posts in this blog.

        :param counts: The counts of this Pageviews.
        :type counts: List[PageviewsCountsInner]
        """

        self._counts = counts

    @property
    def kind(self):
        """Gets the kind of this Pageviews.

        The kind of this entry. Always blogger#page_views.

        :return: The kind of this Pageviews.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Pageviews.

        The kind of this entry. Always blogger#page_views.

        :param kind: The kind of this Pageviews.
        :type kind: str
        """

        self._kind = kind
