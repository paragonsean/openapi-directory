# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_blogs import UserBlogs
from openapi_server.models.user_locale import UserLocale
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, blogs: UserBlogs=None, created: str=None, display_name: str=None, id: str=None, kind: str=None, locale: UserLocale=None, self_link: str=None, url: str=None):
        """User - a model defined in OpenAPI

        :param about: The about of this User.
        :param blogs: The blogs of this User.
        :param created: The created of this User.
        :param display_name: The display_name of this User.
        :param id: The id of this User.
        :param kind: The kind of this User.
        :param locale: The locale of this User.
        :param self_link: The self_link of this User.
        :param url: The url of this User.
        """
        self.openapi_types = {
            'about': str,
            'blogs': UserBlogs,
            'created': str,
            'display_name': str,
            'id': str,
            'kind': str,
            'locale': UserLocale,
            'self_link': str,
            'url': str
        }

        self.attribute_map = {
            'about': 'about',
            'blogs': 'blogs',
            'created': 'created',
            'display_name': 'displayName',
            'id': 'id',
            'kind': 'kind',
            'locale': 'locale',
            'self_link': 'selfLink',
            'url': 'url'
        }

        self._about = about
        self._blogs = blogs
        self._created = created
        self._display_name = display_name
        self._id = id
        self._kind = kind
        self._locale = locale
        self._self_link = self_link
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this User.

        Profile summary information.

        :return: The about of this User.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this User.

        Profile summary information.

        :param about: The about of this User.
        :type about: str
        """

        self._about = about

    @property
    def blogs(self):
        """Gets the blogs of this User.


        :return: The blogs of this User.
        :rtype: UserBlogs
        """
        return self._blogs

    @blogs.setter
    def blogs(self, blogs):
        """Sets the blogs of this User.


        :param blogs: The blogs of this User.
        :type blogs: UserBlogs
        """

        self._blogs = blogs

    @property
    def created(self):
        """Gets the created of this User.

        The timestamp of when this profile was created, in seconds since epoch.

        :return: The created of this User.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this User.

        The timestamp of when this profile was created, in seconds since epoch.

        :param created: The created of this User.
        :type created: str
        """

        self._created = created

    @property
    def display_name(self):
        """Gets the display_name of this User.

        The display name.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        The display name.

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this User.

        The identifier for this User.

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.

        The identifier for this User.

        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this User.

        The kind of this entity. Always blogger#user.

        :return: The kind of this User.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this User.

        The kind of this entity. Always blogger#user.

        :param kind: The kind of this User.
        :type kind: str
        """

        self._kind = kind

    @property
    def locale(self):
        """Gets the locale of this User.


        :return: The locale of this User.
        :rtype: UserLocale
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.


        :param locale: The locale of this User.
        :type locale: UserLocale
        """

        self._locale = locale

    @property
    def self_link(self):
        """Gets the self_link of this User.

        The API REST URL to fetch this resource from.

        :return: The self_link of this User.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this User.

        The API REST URL to fetch this resource from.

        :param self_link: The self_link of this User.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def url(self):
        """Gets the url of this User.

        The user's profile page.

        :return: The url of this User.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this User.

        The user's profile page.

        :param url: The url of this User.
        :type url: str
        """

        self._url = url
