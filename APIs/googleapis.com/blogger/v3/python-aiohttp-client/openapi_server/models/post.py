# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.post_author import PostAuthor
from openapi_server.models.post_blog import PostBlog
from openapi_server.models.post_images_inner import PostImagesInner
from openapi_server.models.post_location import PostLocation
from openapi_server.models.post_replies import PostReplies
from openapi_server import util


class Post(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: PostAuthor=None, blog: PostBlog=None, content: str=None, custom_meta_data: str=None, etag: str=None, id: str=None, images: List[PostImagesInner]=None, kind: str=None, labels: List[str]=None, location: PostLocation=None, published: str=None, reader_comments: str=None, replies: PostReplies=None, self_link: str=None, status: str=None, title: str=None, title_link: str=None, trashed: str=None, updated: str=None, url: str=None):
        """Post - a model defined in OpenAPI

        :param author: The author of this Post.
        :param blog: The blog of this Post.
        :param content: The content of this Post.
        :param custom_meta_data: The custom_meta_data of this Post.
        :param etag: The etag of this Post.
        :param id: The id of this Post.
        :param images: The images of this Post.
        :param kind: The kind of this Post.
        :param labels: The labels of this Post.
        :param location: The location of this Post.
        :param published: The published of this Post.
        :param reader_comments: The reader_comments of this Post.
        :param replies: The replies of this Post.
        :param self_link: The self_link of this Post.
        :param status: The status of this Post.
        :param title: The title of this Post.
        :param title_link: The title_link of this Post.
        :param trashed: The trashed of this Post.
        :param updated: The updated of this Post.
        :param url: The url of this Post.
        """
        self.openapi_types = {
            'author': PostAuthor,
            'blog': PostBlog,
            'content': str,
            'custom_meta_data': str,
            'etag': str,
            'id': str,
            'images': List[PostImagesInner],
            'kind': str,
            'labels': List[str],
            'location': PostLocation,
            'published': str,
            'reader_comments': str,
            'replies': PostReplies,
            'self_link': str,
            'status': str,
            'title': str,
            'title_link': str,
            'trashed': str,
            'updated': str,
            'url': str
        }

        self.attribute_map = {
            'author': 'author',
            'blog': 'blog',
            'content': 'content',
            'custom_meta_data': 'customMetaData',
            'etag': 'etag',
            'id': 'id',
            'images': 'images',
            'kind': 'kind',
            'labels': 'labels',
            'location': 'location',
            'published': 'published',
            'reader_comments': 'readerComments',
            'replies': 'replies',
            'self_link': 'selfLink',
            'status': 'status',
            'title': 'title',
            'title_link': 'titleLink',
            'trashed': 'trashed',
            'updated': 'updated',
            'url': 'url'
        }

        self._author = author
        self._blog = blog
        self._content = content
        self._custom_meta_data = custom_meta_data
        self._etag = etag
        self._id = id
        self._images = images
        self._kind = kind
        self._labels = labels
        self._location = location
        self._published = published
        self._reader_comments = reader_comments
        self._replies = replies
        self._self_link = self_link
        self._status = status
        self._title = title
        self._title_link = title_link
        self._trashed = trashed
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Post':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Post of this Post.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Post.


        :return: The author of this Post.
        :rtype: PostAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Post.


        :param author: The author of this Post.
        :type author: PostAuthor
        """

        self._author = author

    @property
    def blog(self):
        """Gets the blog of this Post.


        :return: The blog of this Post.
        :rtype: PostBlog
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this Post.


        :param blog: The blog of this Post.
        :type blog: PostBlog
        """

        self._blog = blog

    @property
    def content(self):
        """Gets the content of this Post.

        The content of the Post. May contain HTML markup.

        :return: The content of this Post.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Post.

        The content of the Post. May contain HTML markup.

        :param content: The content of this Post.
        :type content: str
        """

        self._content = content

    @property
    def custom_meta_data(self):
        """Gets the custom_meta_data of this Post.

        The JSON meta-data for the Post.

        :return: The custom_meta_data of this Post.
        :rtype: str
        """
        return self._custom_meta_data

    @custom_meta_data.setter
    def custom_meta_data(self, custom_meta_data):
        """Sets the custom_meta_data of this Post.

        The JSON meta-data for the Post.

        :param custom_meta_data: The custom_meta_data of this Post.
        :type custom_meta_data: str
        """

        self._custom_meta_data = custom_meta_data

    @property
    def etag(self):
        """Gets the etag of this Post.

        Etag of the resource.

        :return: The etag of this Post.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Post.

        Etag of the resource.

        :param etag: The etag of this Post.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this Post.

        The identifier of this Post.

        :return: The id of this Post.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Post.

        The identifier of this Post.

        :param id: The id of this Post.
        :type id: str
        """

        self._id = id

    @property
    def images(self):
        """Gets the images of this Post.

        Display image for the Post.

        :return: The images of this Post.
        :rtype: List[PostImagesInner]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Post.

        Display image for the Post.

        :param images: The images of this Post.
        :type images: List[PostImagesInner]
        """

        self._images = images

    @property
    def kind(self):
        """Gets the kind of this Post.

        The kind of this entity. Always blogger#post.

        :return: The kind of this Post.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Post.

        The kind of this entity. Always blogger#post.

        :param kind: The kind of this Post.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this Post.

        The list of labels this Post was tagged with.

        :return: The labels of this Post.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Post.

        The list of labels this Post was tagged with.

        :param labels: The labels of this Post.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def location(self):
        """Gets the location of this Post.


        :return: The location of this Post.
        :rtype: PostLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Post.


        :param location: The location of this Post.
        :type location: PostLocation
        """

        self._location = location

    @property
    def published(self):
        """Gets the published of this Post.

        RFC 3339 date-time when this Post was published.

        :return: The published of this Post.
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Post.

        RFC 3339 date-time when this Post was published.

        :param published: The published of this Post.
        :type published: str
        """

        self._published = published

    @property
    def reader_comments(self):
        """Gets the reader_comments of this Post.

        Comment control and display setting for readers of this post.

        :return: The reader_comments of this Post.
        :rtype: str
        """
        return self._reader_comments

    @reader_comments.setter
    def reader_comments(self, reader_comments):
        """Sets the reader_comments of this Post.

        Comment control and display setting for readers of this post.

        :param reader_comments: The reader_comments of this Post.
        :type reader_comments: str
        """
        allowed_values = ["ALLOW", "DONT_ALLOW_SHOW_EXISTING", "DONT_ALLOW_HIDE_EXISTING"]  # noqa: E501
        if reader_comments not in allowed_values:
            raise ValueError(
                "Invalid value for `reader_comments` ({0}), must be one of {1}"
                .format(reader_comments, allowed_values)
            )

        self._reader_comments = reader_comments

    @property
    def replies(self):
        """Gets the replies of this Post.


        :return: The replies of this Post.
        :rtype: PostReplies
        """
        return self._replies

    @replies.setter
    def replies(self, replies):
        """Sets the replies of this Post.


        :param replies: The replies of this Post.
        :type replies: PostReplies
        """

        self._replies = replies

    @property
    def self_link(self):
        """Gets the self_link of this Post.

        The API REST URL to fetch this resource from.

        :return: The self_link of this Post.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Post.

        The API REST URL to fetch this resource from.

        :param self_link: The self_link of this Post.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this Post.

        Status of the post. Only set for admin-level requests.

        :return: The status of this Post.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Post.

        Status of the post. Only set for admin-level requests.

        :param status: The status of this Post.
        :type status: str
        """
        allowed_values = ["LIVE", "DRAFT", "SCHEDULED", "SOFT_TRASHED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def title(self):
        """Gets the title of this Post.

        The title of the Post.

        :return: The title of this Post.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Post.

        The title of the Post.

        :param title: The title of this Post.
        :type title: str
        """

        self._title = title

    @property
    def title_link(self):
        """Gets the title_link of this Post.

        The title link URL, similar to atom's related link.

        :return: The title_link of this Post.
        :rtype: str
        """
        return self._title_link

    @title_link.setter
    def title_link(self, title_link):
        """Sets the title_link of this Post.

        The title link URL, similar to atom's related link.

        :param title_link: The title_link of this Post.
        :type title_link: str
        """

        self._title_link = title_link

    @property
    def trashed(self):
        """Gets the trashed of this Post.

        RFC 3339 date-time when this Post was last trashed.

        :return: The trashed of this Post.
        :rtype: str
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this Post.

        RFC 3339 date-time when this Post was last trashed.

        :param trashed: The trashed of this Post.
        :type trashed: str
        """

        self._trashed = trashed

    @property
    def updated(self):
        """Gets the updated of this Post.

        RFC 3339 date-time when this Post was last updated.

        :return: The updated of this Post.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Post.

        RFC 3339 date-time when this Post was last updated.

        :param updated: The updated of this Post.
        :type updated: str
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this Post.

        The URL where this Post is displayed.

        :return: The url of this Post.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Post.

        The URL where this Post is displayed.

        :param url: The url of this Post.
        :type url: str
        """

        self._url = url
