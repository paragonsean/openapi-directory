# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserLocale(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: str=None, language: str=None, variant: str=None):
        """UserLocale - a model defined in OpenAPI

        :param country: The country of this UserLocale.
        :param language: The language of this UserLocale.
        :param variant: The variant of this UserLocale.
        """
        self.openapi_types = {
            'country': str,
            'language': str,
            'variant': str
        }

        self.attribute_map = {
            'country': 'country',
            'language': 'language',
            'variant': 'variant'
        }

        self._country = country
        self._language = language
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserLocale':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User_locale of this UserLocale.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this UserLocale.

        The country this blog's locale is set to.

        :return: The country of this UserLocale.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserLocale.

        The country this blog's locale is set to.

        :param country: The country of this UserLocale.
        :type country: str
        """

        self._country = country

    @property
    def language(self):
        """Gets the language of this UserLocale.

        The language this blog is authored in.

        :return: The language of this UserLocale.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserLocale.

        The language this blog is authored in.

        :param language: The language of this UserLocale.
        :type language: str
        """

        self._language = language

    @property
    def variant(self):
        """Gets the variant of this UserLocale.

        The language variant this blog is authored in.

        :return: The variant of this UserLocale.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant):
        """Sets the variant of this UserLocale.

        The language variant this blog is authored in.

        :param variant: The variant of this UserLocale.
        :type variant: str
        """

        self._variant = variant
