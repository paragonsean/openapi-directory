# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.comment_author import CommentAuthor
from openapi_server.models.comment_blog import CommentBlog
from openapi_server.models.comment_in_reply_to import CommentInReplyTo
from openapi_server.models.comment_post import CommentPost
from openapi_server import util


class Comment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: CommentAuthor=None, blog: CommentBlog=None, content: str=None, id: str=None, in_reply_to: CommentInReplyTo=None, kind: str=None, post: CommentPost=None, published: str=None, self_link: str=None, status: str=None, updated: str=None):
        """Comment - a model defined in OpenAPI

        :param author: The author of this Comment.
        :param blog: The blog of this Comment.
        :param content: The content of this Comment.
        :param id: The id of this Comment.
        :param in_reply_to: The in_reply_to of this Comment.
        :param kind: The kind of this Comment.
        :param post: The post of this Comment.
        :param published: The published of this Comment.
        :param self_link: The self_link of this Comment.
        :param status: The status of this Comment.
        :param updated: The updated of this Comment.
        """
        self.openapi_types = {
            'author': CommentAuthor,
            'blog': CommentBlog,
            'content': str,
            'id': str,
            'in_reply_to': CommentInReplyTo,
            'kind': str,
            'post': CommentPost,
            'published': str,
            'self_link': str,
            'status': str,
            'updated': str
        }

        self.attribute_map = {
            'author': 'author',
            'blog': 'blog',
            'content': 'content',
            'id': 'id',
            'in_reply_to': 'inReplyTo',
            'kind': 'kind',
            'post': 'post',
            'published': 'published',
            'self_link': 'selfLink',
            'status': 'status',
            'updated': 'updated'
        }

        self._author = author
        self._blog = blog
        self._content = content
        self._id = id
        self._in_reply_to = in_reply_to
        self._kind = kind
        self._post = post
        self._published = published
        self._self_link = self_link
        self._status = status
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Comment of this Comment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Comment.


        :return: The author of this Comment.
        :rtype: CommentAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Comment.


        :param author: The author of this Comment.
        :type author: CommentAuthor
        """

        self._author = author

    @property
    def blog(self):
        """Gets the blog of this Comment.


        :return: The blog of this Comment.
        :rtype: CommentBlog
        """
        return self._blog

    @blog.setter
    def blog(self, blog):
        """Sets the blog of this Comment.


        :param blog: The blog of this Comment.
        :type blog: CommentBlog
        """

        self._blog = blog

    @property
    def content(self):
        """Gets the content of this Comment.

        The actual content of the comment. May include HTML markup.

        :return: The content of this Comment.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Comment.

        The actual content of the comment. May include HTML markup.

        :param content: The content of this Comment.
        :type content: str
        """

        self._content = content

    @property
    def id(self):
        """Gets the id of this Comment.

        The identifier for this resource.

        :return: The id of this Comment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Comment.

        The identifier for this resource.

        :param id: The id of this Comment.
        :type id: str
        """

        self._id = id

    @property
    def in_reply_to(self):
        """Gets the in_reply_to of this Comment.


        :return: The in_reply_to of this Comment.
        :rtype: CommentInReplyTo
        """
        return self._in_reply_to

    @in_reply_to.setter
    def in_reply_to(self, in_reply_to):
        """Sets the in_reply_to of this Comment.


        :param in_reply_to: The in_reply_to of this Comment.
        :type in_reply_to: CommentInReplyTo
        """

        self._in_reply_to = in_reply_to

    @property
    def kind(self):
        """Gets the kind of this Comment.

        The kind of this entry. Always blogger#comment.

        :return: The kind of this Comment.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Comment.

        The kind of this entry. Always blogger#comment.

        :param kind: The kind of this Comment.
        :type kind: str
        """

        self._kind = kind

    @property
    def post(self):
        """Gets the post of this Comment.


        :return: The post of this Comment.
        :rtype: CommentPost
        """
        return self._post

    @post.setter
    def post(self, post):
        """Sets the post of this Comment.


        :param post: The post of this Comment.
        :type post: CommentPost
        """

        self._post = post

    @property
    def published(self):
        """Gets the published of this Comment.

        RFC 3339 date-time when this comment was published.

        :return: The published of this Comment.
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Comment.

        RFC 3339 date-time when this comment was published.

        :param published: The published of this Comment.
        :type published: str
        """

        self._published = published

    @property
    def self_link(self):
        """Gets the self_link of this Comment.

        The API REST URL to fetch this resource from.

        :return: The self_link of this Comment.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Comment.

        The API REST URL to fetch this resource from.

        :param self_link: The self_link of this Comment.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this Comment.

        The status of the comment (only populated for admin users).

        :return: The status of this Comment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Comment.

        The status of the comment (only populated for admin users).

        :param status: The status of this Comment.
        :type status: str
        """
        allowed_values = ["LIVE", "EMPTIED", "PENDING", "SPAM"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this Comment.

        RFC 3339 date-time when this comment was last updated.

        :return: The updated of this Comment.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Comment.

        RFC 3339 date-time when this comment was last updated.

        :param updated: The updated of this Comment.
        :type updated: str
        """

        self._updated = updated
