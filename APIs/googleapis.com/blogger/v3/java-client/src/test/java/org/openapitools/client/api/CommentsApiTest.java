/*
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Comment;
import org.openapitools.client.model.CommentList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommentsApi
 */
@Disabled
public class CommentsApiTest {

    private final CommentsApi api = new CommentsApi();

    /**
     * Marks a comment as not spam by blog id, post id and comment id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsApproveTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Comment response = api.bloggerCommentsApprove(blogId, postId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Deletes a comment by blog id, post id and comment id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsDeleteTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        api.bloggerCommentsDelete(blogId, postId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a comment by id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsGetTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Comment response = api.bloggerCommentsGet(blogId, postId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists comments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsListTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endDate = null;
        Boolean fetchBodies = null;
        Integer maxResults = null;
        String pageToken = null;
        String startDate = null;
        String status = null;
        String view = null;
        CommentList response = api.bloggerCommentsList(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endDate, fetchBodies, maxResults, pageToken, startDate, status, view);
        // TODO: test validations
    }

    /**
     * Lists comments by blog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsListByBlogTest() throws ApiException {
        String blogId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endDate = null;
        Boolean fetchBodies = null;
        Integer maxResults = null;
        String pageToken = null;
        String startDate = null;
        List<String> status = null;
        CommentList response = api.bloggerCommentsListByBlog(blogId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endDate, fetchBodies, maxResults, pageToken, startDate, status);
        // TODO: test validations
    }

    /**
     * Marks a comment as spam by blog id, post id and comment id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsMarkAsSpamTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Comment response = api.bloggerCommentsMarkAsSpam(blogId, postId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Removes the content of a comment by blog id, post id and comment id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerCommentsRemoveContentTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String commentId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Comment response = api.bloggerCommentsRemoveContent(blogId, postId, commentId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
