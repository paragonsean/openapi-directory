/*
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Post;
import org.openapitools.client.model.PostList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PostsApi
 */
@Disabled
public class PostsApiTest {

    private final PostsApi api = new PostsApi();

    /**
     * Deletes a post by blog id and post id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsDeleteTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean useTrash = null;
        api.bloggerPostsDelete(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, useTrash);
        // TODO: test validations
    }

    /**
     * Gets a post by blog id and post id
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsGetTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean fetchBody = null;
        Boolean fetchImages = null;
        Integer maxComments = null;
        String view = null;
        Post response = api.bloggerPostsGet(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchBody, fetchImages, maxComments, view);
        // TODO: test validations
    }

    /**
     * Gets a post by path.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsGetByPathTest() throws ApiException {
        String blogId = null;
        String path = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxComments = null;
        String view = null;
        Post response = api.bloggerPostsGetByPath(blogId, path, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxComments, view);
        // TODO: test validations
    }

    /**
     * Inserts a post.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsInsertTest() throws ApiException {
        String blogId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean fetchBody = null;
        Boolean fetchImages = null;
        Boolean isDraft = null;
        Post post = null;
        Post response = api.bloggerPostsInsert(blogId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchBody, fetchImages, isDraft, post);
        // TODO: test validations
    }

    /**
     * Lists posts.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsListTest() throws ApiException {
        String blogId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String endDate = null;
        Boolean fetchBodies = null;
        Boolean fetchImages = null;
        String labels = null;
        Integer maxResults = null;
        String orderBy = null;
        String pageToken = null;
        String sortOption = null;
        String startDate = null;
        List<String> status = null;
        String view = null;
        PostList response = api.bloggerPostsList(blogId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, endDate, fetchBodies, fetchImages, labels, maxResults, orderBy, pageToken, sortOption, startDate, status, view);
        // TODO: test validations
    }

    /**
     * Patches a post.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsPatchTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean fetchBody = null;
        Boolean fetchImages = null;
        Integer maxComments = null;
        Boolean publish = null;
        Boolean revert = null;
        Post post = null;
        Post response = api.bloggerPostsPatch(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchBody, fetchImages, maxComments, publish, revert, post);
        // TODO: test validations
    }

    /**
     * Publishes a post.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsPublishTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String publishDate = null;
        Post response = api.bloggerPostsPublish(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, publishDate);
        // TODO: test validations
    }

    /**
     * Reverts a published or scheduled post to draft state.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsRevertTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Post response = api.bloggerPostsRevert(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Searches for posts matching given query terms in the specified blog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsSearchTest() throws ApiException {
        String blogId = null;
        String q = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean fetchBodies = null;
        String orderBy = null;
        PostList response = api.bloggerPostsSearch(blogId, q, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchBodies, orderBy);
        // TODO: test validations
    }

    /**
     * Updates a post by blog id and post id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bloggerPostsUpdateTest() throws ApiException {
        String blogId = null;
        String postId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean fetchBody = null;
        Boolean fetchImages = null;
        Integer maxComments = null;
        Boolean publish = null;
        Boolean revert = null;
        Post post = null;
        Post response = api.bloggerPostsUpdate(blogId, postId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fetchBody, fetchImages, maxComments, publish, revert, post);
        // TODO: test validations
    }

}
