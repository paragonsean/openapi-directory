/*
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostPerUserInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:35.701418-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostPerUserInfo {
  public static final String SERIALIZED_NAME_BLOG_ID = "blogId";
  @SerializedName(SERIALIZED_NAME_BLOG_ID)
  private String blogId;

  public static final String SERIALIZED_NAME_HAS_EDIT_ACCESS = "hasEditAccess";
  @SerializedName(SERIALIZED_NAME_HAS_EDIT_ACCESS)
  private Boolean hasEditAccess;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_POST_ID = "postId";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private String postId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public PostPerUserInfo() {
  }

  public PostPerUserInfo blogId(String blogId) {
    this.blogId = blogId;
    return this;
  }

  /**
   * ID of the Blog that the post resource belongs to.
   * @return blogId
   */
  @javax.annotation.Nullable
  public String getBlogId() {
    return blogId;
  }

  public void setBlogId(String blogId) {
    this.blogId = blogId;
  }


  public PostPerUserInfo hasEditAccess(Boolean hasEditAccess) {
    this.hasEditAccess = hasEditAccess;
    return this;
  }

  /**
   * True if the user has Author level access to the post.
   * @return hasEditAccess
   */
  @javax.annotation.Nullable
  public Boolean getHasEditAccess() {
    return hasEditAccess;
  }

  public void setHasEditAccess(Boolean hasEditAccess) {
    this.hasEditAccess = hasEditAccess;
  }


  public PostPerUserInfo kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of this entity. Always blogger#postPerUserInfo.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public PostPerUserInfo postId(String postId) {
    this.postId = postId;
    return this;
  }

  /**
   * ID of the Post resource.
   * @return postId
   */
  @javax.annotation.Nullable
  public String getPostId() {
    return postId;
  }

  public void setPostId(String postId) {
    this.postId = postId;
  }


  public PostPerUserInfo userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of the User.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostPerUserInfo postPerUserInfo = (PostPerUserInfo) o;
    return Objects.equals(this.blogId, postPerUserInfo.blogId) &&
        Objects.equals(this.hasEditAccess, postPerUserInfo.hasEditAccess) &&
        Objects.equals(this.kind, postPerUserInfo.kind) &&
        Objects.equals(this.postId, postPerUserInfo.postId) &&
        Objects.equals(this.userId, postPerUserInfo.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blogId, hasEditAccess, kind, postId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostPerUserInfo {\n");
    sb.append("    blogId: ").append(toIndentedString(blogId)).append("\n");
    sb.append("    hasEditAccess: ").append(toIndentedString(hasEditAccess)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blogId");
    openapiFields.add("hasEditAccess");
    openapiFields.add("kind");
    openapiFields.add("postId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostPerUserInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostPerUserInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostPerUserInfo is not found in the empty JSON string", PostPerUserInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostPerUserInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostPerUserInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blogId") != null && !jsonObj.get("blogId").isJsonNull()) && !jsonObj.get("blogId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blogId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blogId").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("postId") != null && !jsonObj.get("postId").isJsonNull()) && !jsonObj.get("postId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostPerUserInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostPerUserInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostPerUserInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostPerUserInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PostPerUserInfo>() {
           @Override
           public void write(JsonWriter out, PostPerUserInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostPerUserInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostPerUserInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostPerUserInfo
   * @throws IOException if the JSON string is invalid with respect to PostPerUserInfo
   */
  public static PostPerUserInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostPerUserInfo.class);
  }

  /**
   * Convert an instance of PostPerUserInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

