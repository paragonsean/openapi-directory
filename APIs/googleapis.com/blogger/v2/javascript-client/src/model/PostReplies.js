/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Comment from './Comment';

/**
 * The PostReplies model module.
 * @module model/PostReplies
 * @version v2
 */
class PostReplies {
    /**
     * Constructs a new <code>PostReplies</code>.
     * The container of comments on this Post.
     * @alias module:model/PostReplies
     */
    constructor() { 
        
        PostReplies.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PostReplies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PostReplies} obj Optional instance to populate.
     * @return {module:model/PostReplies} The populated <code>PostReplies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PostReplies();

            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Comment]);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('totalItems')) {
                obj['totalItems'] = ApiClient.convertToType(data['totalItems'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PostReplies</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PostReplies</code>.
     */
    static validateJSON(data) {
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Comment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['totalItems'] && !(typeof data['totalItems'] === 'string' || data['totalItems'] instanceof String)) {
            throw new Error("Expected the field `totalItems` to be a primitive type in the JSON string but got " + data['totalItems']);
        }

        return true;
    }


}



/**
 * The List of Comments for this Post.
 * @member {Array.<module:model/Comment>} items
 */
PostReplies.prototype['items'] = undefined;

/**
 * The URL of the comments on this post.
 * @member {String} selfLink
 */
PostReplies.prototype['selfLink'] = undefined;

/**
 * The count of comments on this post.
 * @member {String} totalItems
 */
PostReplies.prototype['totalItems'] = undefined;






export default PostReplies;

