/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Blog from './Blog';
import BlogPerUserInfo from './BlogPerUserInfo';

/**
 * The BlogUserInfo model module.
 * @module model/BlogUserInfo
 * @version v2
 */
class BlogUserInfo {
    /**
     * Constructs a new <code>BlogUserInfo</code>.
     * @alias module:model/BlogUserInfo
     */
    constructor() { 
        
        BlogUserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlogUserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlogUserInfo} obj Optional instance to populate.
     * @return {module:model/BlogUserInfo} The populated <code>BlogUserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlogUserInfo();

            if (data.hasOwnProperty('blog')) {
                obj['blog'] = Blog.constructFromObject(data['blog']);
            }
            if (data.hasOwnProperty('blog_user_info')) {
                obj['blog_user_info'] = BlogPerUserInfo.constructFromObject(data['blog_user_info']);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlogUserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlogUserInfo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `blog`
        if (data['blog']) { // data not null
          Blog.validateJSON(data['blog']);
        }
        // validate the optional field `blog_user_info`
        if (data['blog_user_info']) { // data not null
          BlogPerUserInfo.validateJSON(data['blog_user_info']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }

        return true;
    }


}



/**
 * @member {module:model/Blog} blog
 */
BlogUserInfo.prototype['blog'] = undefined;

/**
 * @member {module:model/BlogPerUserInfo} blog_user_info
 */
BlogUserInfo.prototype['blog_user_info'] = undefined;

/**
 * The kind of this entity. Always blogger#blogUserInfo.
 * @member {String} kind
 */
BlogUserInfo.prototype['kind'] = undefined;






export default BlogUserInfo;

