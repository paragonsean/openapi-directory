/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlogPerUserInfo model module.
 * @module model/BlogPerUserInfo
 * @version v2
 */
class BlogPerUserInfo {
    /**
     * Constructs a new <code>BlogPerUserInfo</code>.
     * @alias module:model/BlogPerUserInfo
     */
    constructor() { 
        
        BlogPerUserInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BlogPerUserInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlogPerUserInfo} obj Optional instance to populate.
     * @return {module:model/BlogPerUserInfo} The populated <code>BlogPerUserInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlogPerUserInfo();

            if (data.hasOwnProperty('blogId')) {
                obj['blogId'] = ApiClient.convertToType(data['blogId'], 'String');
            }
            if (data.hasOwnProperty('hasAdminAccess')) {
                obj['hasAdminAccess'] = ApiClient.convertToType(data['hasAdminAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('photosAlbumKey')) {
                obj['photosAlbumKey'] = ApiClient.convertToType(data['photosAlbumKey'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlogPerUserInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlogPerUserInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blogId'] && !(typeof data['blogId'] === 'string' || data['blogId'] instanceof String)) {
            throw new Error("Expected the field `blogId` to be a primitive type in the JSON string but got " + data['blogId']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['photosAlbumKey'] && !(typeof data['photosAlbumKey'] === 'string' || data['photosAlbumKey'] instanceof String)) {
            throw new Error("Expected the field `photosAlbumKey` to be a primitive type in the JSON string but got " + data['photosAlbumKey']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * ID of the Blog resource.
 * @member {String} blogId
 */
BlogPerUserInfo.prototype['blogId'] = undefined;

/**
 * True if the user has Admin level access to the blog.
 * @member {Boolean} hasAdminAccess
 */
BlogPerUserInfo.prototype['hasAdminAccess'] = undefined;

/**
 * The kind of this entity. Always blogger#blogPerUserInfo.
 * @member {String} kind
 */
BlogPerUserInfo.prototype['kind'] = undefined;

/**
 * The Photo Album Key for the user when adding photos to the blog.
 * @member {String} photosAlbumKey
 */
BlogPerUserInfo.prototype['photosAlbumKey'] = undefined;

/**
 * Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).
 * @member {module:model/BlogPerUserInfo.RoleEnum} role
 */
BlogPerUserInfo.prototype['role'] = undefined;

/**
 * ID of the User.
 * @member {String} userId
 */
BlogPerUserInfo.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
BlogPerUserInfo['RoleEnum'] = {

    /**
     * value: "VIEW_TYPE_UNSPECIFIED"
     * @const
     */
    "VIEW_TYPE_UNSPECIFIED": "VIEW_TYPE_UNSPECIFIED",

    /**
     * value: "READER"
     * @const
     */
    "READER": "READER",

    /**
     * value: "AUTHOR"
     * @const
     */
    "AUTHOR": "AUTHOR",

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN"
};



export default BlogPerUserInfo;

