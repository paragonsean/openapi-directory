/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BlogLocale from './BlogLocale';
import BlogPages from './BlogPages';
import BlogPosts from './BlogPosts';

/**
 * The Blog model module.
 * @module model/Blog
 * @version v2
 */
class Blog {
    /**
     * Constructs a new <code>Blog</code>.
     * @alias module:model/Blog
     */
    constructor() { 
        
        Blog.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Blog</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Blog} obj Optional instance to populate.
     * @return {module:model/Blog} The populated <code>Blog</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Blog();

            if (data.hasOwnProperty('customMetaData')) {
                obj['customMetaData'] = ApiClient.convertToType(data['customMetaData'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = BlogLocale.constructFromObject(data['locale']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = BlogPages.constructFromObject(data['pages']);
            }
            if (data.hasOwnProperty('posts')) {
                obj['posts'] = BlogPosts.constructFromObject(data['posts']);
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Blog</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Blog</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['customMetaData'] && !(typeof data['customMetaData'] === 'string' || data['customMetaData'] instanceof String)) {
            throw new Error("Expected the field `customMetaData` to be a primitive type in the JSON string but got " + data['customMetaData']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `locale`
        if (data['locale']) { // data not null
          BlogLocale.validateJSON(data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `pages`
        if (data['pages']) { // data not null
          BlogPages.validateJSON(data['pages']);
        }
        // validate the optional field `posts`
        if (data['posts']) { // data not null
          BlogPosts.validateJSON(data['posts']);
        }
        // ensure the json data is a string
        if (data['published'] && !(typeof data['published'] === 'string' || data['published'] instanceof String)) {
            throw new Error("Expected the field `published` to be a primitive type in the JSON string but got " + data['published']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * The JSON custom meta-data for the Blog.
 * @member {String} customMetaData
 */
Blog.prototype['customMetaData'] = undefined;

/**
 * The description of this blog. This is displayed underneath the title.
 * @member {String} description
 */
Blog.prototype['description'] = undefined;

/**
 * The identifier for this resource.
 * @member {String} id
 */
Blog.prototype['id'] = undefined;

/**
 * The kind of this entry. Always blogger#blog.
 * @member {String} kind
 */
Blog.prototype['kind'] = undefined;

/**
 * @member {module:model/BlogLocale} locale
 */
Blog.prototype['locale'] = undefined;

/**
 * The name of this blog. This is displayed as the title.
 * @member {String} name
 */
Blog.prototype['name'] = undefined;

/**
 * @member {module:model/BlogPages} pages
 */
Blog.prototype['pages'] = undefined;

/**
 * @member {module:model/BlogPosts} posts
 */
Blog.prototype['posts'] = undefined;

/**
 * RFC 3339 date-time when this blog was published.
 * @member {String} published
 */
Blog.prototype['published'] = undefined;

/**
 * The API REST URL to fetch this resource from.
 * @member {String} selfLink
 */
Blog.prototype['selfLink'] = undefined;

/**
 * The status of the blog.
 * @member {module:model/Blog.StatusEnum} status
 */
Blog.prototype['status'] = undefined;

/**
 * RFC 3339 date-time when this blog was last updated.
 * @member {String} updated
 */
Blog.prototype['updated'] = undefined;

/**
 * The URL where this blog is published.
 * @member {String} url
 */
Blog.prototype['url'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Blog['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};



export default Blog;

