/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PostAuthor from './PostAuthor';
import PostBlog from './PostBlog';
import PostImagesInner from './PostImagesInner';
import PostLocation from './PostLocation';
import PostReplies from './PostReplies';

/**
 * The Post model module.
 * @module model/Post
 * @version v2
 */
class Post {
    /**
     * Constructs a new <code>Post</code>.
     * @alias module:model/Post
     */
    constructor() { 
        
        Post.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Post</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Post} obj Optional instance to populate.
     * @return {module:model/Post} The populated <code>Post</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Post();

            if (data.hasOwnProperty('author')) {
                obj['author'] = PostAuthor.constructFromObject(data['author']);
            }
            if (data.hasOwnProperty('blog')) {
                obj['blog'] = PostBlog.constructFromObject(data['blog']);
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('customMetaData')) {
                obj['customMetaData'] = ApiClient.convertToType(data['customMetaData'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('images')) {
                obj['images'] = ApiClient.convertToType(data['images'], [PostImagesInner]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], ['String']);
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = PostLocation.constructFromObject(data['location']);
            }
            if (data.hasOwnProperty('published')) {
                obj['published'] = ApiClient.convertToType(data['published'], 'String');
            }
            if (data.hasOwnProperty('readerComments')) {
                obj['readerComments'] = ApiClient.convertToType(data['readerComments'], 'String');
            }
            if (data.hasOwnProperty('replies')) {
                obj['replies'] = PostReplies.constructFromObject(data['replies']);
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('titleLink')) {
                obj['titleLink'] = ApiClient.convertToType(data['titleLink'], 'String');
            }
            if (data.hasOwnProperty('trashed')) {
                obj['trashed'] = ApiClient.convertToType(data['trashed'], 'String');
            }
            if (data.hasOwnProperty('updated')) {
                obj['updated'] = ApiClient.convertToType(data['updated'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Post</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Post</code>.
     */
    static validateJSON(data) {
        // validate the optional field `author`
        if (data['author']) { // data not null
          PostAuthor.validateJSON(data['author']);
        }
        // validate the optional field `blog`
        if (data['blog']) { // data not null
          PostBlog.validateJSON(data['blog']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['customMetaData'] && !(typeof data['customMetaData'] === 'string' || data['customMetaData'] instanceof String)) {
            throw new Error("Expected the field `customMetaData` to be a primitive type in the JSON string but got " + data['customMetaData']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        if (data['images']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['images'])) {
                throw new Error("Expected the field `images` to be an array in the JSON data but got " + data['images']);
            }
            // validate the optional field `images` (array)
            for (const item of data['images']) {
                PostImagesInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['labels'])) {
            throw new Error("Expected the field `labels` to be an array in the JSON data but got " + data['labels']);
        }
        // validate the optional field `location`
        if (data['location']) { // data not null
          PostLocation.validateJSON(data['location']);
        }
        // ensure the json data is a string
        if (data['published'] && !(typeof data['published'] === 'string' || data['published'] instanceof String)) {
            throw new Error("Expected the field `published` to be a primitive type in the JSON string but got " + data['published']);
        }
        // ensure the json data is a string
        if (data['readerComments'] && !(typeof data['readerComments'] === 'string' || data['readerComments'] instanceof String)) {
            throw new Error("Expected the field `readerComments` to be a primitive type in the JSON string but got " + data['readerComments']);
        }
        // validate the optional field `replies`
        if (data['replies']) { // data not null
          PostReplies.validateJSON(data['replies']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['titleLink'] && !(typeof data['titleLink'] === 'string' || data['titleLink'] instanceof String)) {
            throw new Error("Expected the field `titleLink` to be a primitive type in the JSON string but got " + data['titleLink']);
        }
        // ensure the json data is a string
        if (data['trashed'] && !(typeof data['trashed'] === 'string' || data['trashed'] instanceof String)) {
            throw new Error("Expected the field `trashed` to be a primitive type in the JSON string but got " + data['trashed']);
        }
        // ensure the json data is a string
        if (data['updated'] && !(typeof data['updated'] === 'string' || data['updated'] instanceof String)) {
            throw new Error("Expected the field `updated` to be a primitive type in the JSON string but got " + data['updated']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * @member {module:model/PostAuthor} author
 */
Post.prototype['author'] = undefined;

/**
 * @member {module:model/PostBlog} blog
 */
Post.prototype['blog'] = undefined;

/**
 * The content of the Post. May contain HTML markup.
 * @member {String} content
 */
Post.prototype['content'] = undefined;

/**
 * The JSON meta-data for the Post.
 * @member {String} customMetaData
 */
Post.prototype['customMetaData'] = undefined;

/**
 * Etag of the resource.
 * @member {String} etag
 */
Post.prototype['etag'] = undefined;

/**
 * The identifier of this Post.
 * @member {String} id
 */
Post.prototype['id'] = undefined;

/**
 * Display image for the Post.
 * @member {Array.<module:model/PostImagesInner>} images
 */
Post.prototype['images'] = undefined;

/**
 * The kind of this entity. Always blogger#post.
 * @member {String} kind
 */
Post.prototype['kind'] = undefined;

/**
 * The list of labels this Post was tagged with.
 * @member {Array.<String>} labels
 */
Post.prototype['labels'] = undefined;

/**
 * @member {module:model/PostLocation} location
 */
Post.prototype['location'] = undefined;

/**
 * RFC 3339 date-time when this Post was published.
 * @member {String} published
 */
Post.prototype['published'] = undefined;

/**
 * Comment control and display setting for readers of this post.
 * @member {module:model/Post.ReaderCommentsEnum} readerComments
 */
Post.prototype['readerComments'] = undefined;

/**
 * @member {module:model/PostReplies} replies
 */
Post.prototype['replies'] = undefined;

/**
 * The API REST URL to fetch this resource from.
 * @member {String} selfLink
 */
Post.prototype['selfLink'] = undefined;

/**
 * Status of the post. Only set for admin-level requests.
 * @member {module:model/Post.StatusEnum} status
 */
Post.prototype['status'] = undefined;

/**
 * The title of the Post.
 * @member {String} title
 */
Post.prototype['title'] = undefined;

/**
 * The title link URL, similar to atom's related link.
 * @member {String} titleLink
 */
Post.prototype['titleLink'] = undefined;

/**
 * RFC 3339 date-time when this Post was last trashed.
 * @member {String} trashed
 */
Post.prototype['trashed'] = undefined;

/**
 * RFC 3339 date-time when this Post was last updated.
 * @member {String} updated
 */
Post.prototype['updated'] = undefined;

/**
 * The URL where this Post is displayed.
 * @member {String} url
 */
Post.prototype['url'] = undefined;





/**
 * Allowed values for the <code>readerComments</code> property.
 * @enum {String}
 * @readonly
 */
Post['ReaderCommentsEnum'] = {

    /**
     * value: "ALLOW"
     * @const
     */
    "ALLOW": "ALLOW",

    /**
     * value: "DONT_ALLOW_SHOW_EXISTING"
     * @const
     */
    "DONT_ALLOW_SHOW_EXISTING": "DONT_ALLOW_SHOW_EXISTING",

    /**
     * value: "DONT_ALLOW_HIDE_EXISTING"
     * @const
     */
    "DONT_ALLOW_HIDE_EXISTING": "DONT_ALLOW_HIDE_EXISTING"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Post['StatusEnum'] = {

    /**
     * value: "LIVE"
     * @const
     */
    "LIVE": "LIVE",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "SCHEDULED"
     * @const
     */
    "SCHEDULED": "SCHEDULED",

    /**
     * value: "SOFT_TRASHED"
     * @const
     */
    "SOFT_TRASHED": "SOFT_TRASHED"
};



export default Post;

