/*
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BlogLocale;
import org.openapitools.client.model.BlogPages;
import org.openapitools.client.model.BlogPosts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Blog
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:04.242954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Blog {
  public static final String SERIALIZED_NAME_CUSTOM_META_DATA = "customMetaData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_META_DATA)
  private String customMetaData;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private BlogLocale locale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private BlogPages pages;

  public static final String SERIALIZED_NAME_POSTS = "posts";
  @SerializedName(SERIALIZED_NAME_POSTS)
  private BlogPosts posts;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private String published;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  /**
   * The status of the blog.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    LIVE("LIVE"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Blog() {
  }

  public Blog customMetaData(String customMetaData) {
    this.customMetaData = customMetaData;
    return this;
  }

  /**
   * The JSON custom meta-data for the Blog.
   * @return customMetaData
   */
  @javax.annotation.Nullable
  public String getCustomMetaData() {
    return customMetaData;
  }

  public void setCustomMetaData(String customMetaData) {
    this.customMetaData = customMetaData;
  }


  public Blog description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this blog. This is displayed underneath the title.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Blog id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier for this resource.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Blog kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of this entry. Always blogger#blog.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Blog locale(BlogLocale locale) {
    this.locale = locale;
    return this;
  }

  /**
   * Get locale
   * @return locale
   */
  @javax.annotation.Nullable
  public BlogLocale getLocale() {
    return locale;
  }

  public void setLocale(BlogLocale locale) {
    this.locale = locale;
  }


  public Blog name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of this blog. This is displayed as the title.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Blog pages(BlogPages pages) {
    this.pages = pages;
    return this;
  }

  /**
   * Get pages
   * @return pages
   */
  @javax.annotation.Nullable
  public BlogPages getPages() {
    return pages;
  }

  public void setPages(BlogPages pages) {
    this.pages = pages;
  }


  public Blog posts(BlogPosts posts) {
    this.posts = posts;
    return this;
  }

  /**
   * Get posts
   * @return posts
   */
  @javax.annotation.Nullable
  public BlogPosts getPosts() {
    return posts;
  }

  public void setPosts(BlogPosts posts) {
    this.posts = posts;
  }


  public Blog published(String published) {
    this.published = published;
    return this;
  }

  /**
   * RFC 3339 date-time when this blog was published.
   * @return published
   */
  @javax.annotation.Nullable
  public String getPublished() {
    return published;
  }

  public void setPublished(String published) {
    this.published = published;
  }


  public Blog selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The API REST URL to fetch this resource from.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Blog status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of the blog.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Blog updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * RFC 3339 date-time when this blog was last updated.
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Blog url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL where this blog is published.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Blog blog = (Blog) o;
    return Objects.equals(this.customMetaData, blog.customMetaData) &&
        Objects.equals(this.description, blog.description) &&
        Objects.equals(this.id, blog.id) &&
        Objects.equals(this.kind, blog.kind) &&
        Objects.equals(this.locale, blog.locale) &&
        Objects.equals(this.name, blog.name) &&
        Objects.equals(this.pages, blog.pages) &&
        Objects.equals(this.posts, blog.posts) &&
        Objects.equals(this.published, blog.published) &&
        Objects.equals(this.selfLink, blog.selfLink) &&
        Objects.equals(this.status, blog.status) &&
        Objects.equals(this.updated, blog.updated) &&
        Objects.equals(this.url, blog.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customMetaData, description, id, kind, locale, name, pages, posts, published, selfLink, status, updated, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Blog {\n");
    sb.append("    customMetaData: ").append(toIndentedString(customMetaData)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    posts: ").append(toIndentedString(posts)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customMetaData");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("kind");
    openapiFields.add("locale");
    openapiFields.add("name");
    openapiFields.add("pages");
    openapiFields.add("posts");
    openapiFields.add("published");
    openapiFields.add("selfLink");
    openapiFields.add("status");
    openapiFields.add("updated");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Blog
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Blog.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Blog is not found in the empty JSON string", Blog.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Blog.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Blog` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("customMetaData") != null && !jsonObj.get("customMetaData").isJsonNull()) && !jsonObj.get("customMetaData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customMetaData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customMetaData").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `locale`
      if (jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) {
        BlogLocale.validateJsonElement(jsonObj.get("locale"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `pages`
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull()) {
        BlogPages.validateJsonElement(jsonObj.get("pages"));
      }
      // validate the optional field `posts`
      if (jsonObj.get("posts") != null && !jsonObj.get("posts").isJsonNull()) {
        BlogPosts.validateJsonElement(jsonObj.get("posts"));
      }
      if ((jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) && !jsonObj.get("published").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Blog.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Blog' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Blog> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Blog.class));

       return (TypeAdapter<T>) new TypeAdapter<Blog>() {
           @Override
           public void write(JsonWriter out, Blog value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Blog read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Blog given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Blog
   * @throws IOException if the JSON string is invalid with respect to Blog
   */
  public static Blog fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Blog.class);
  }

  /**
   * Convert an instance of Blog to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

