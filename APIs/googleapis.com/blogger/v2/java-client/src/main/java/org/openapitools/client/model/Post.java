/*
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PostAuthor;
import org.openapitools.client.model.PostBlog;
import org.openapitools.client.model.PostImagesInner;
import org.openapitools.client.model.PostLocation;
import org.openapitools.client.model.PostReplies;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Post
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:04.242954-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Post {
  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private PostAuthor author;

  public static final String SERIALIZED_NAME_BLOG = "blog";
  @SerializedName(SERIALIZED_NAME_BLOG)
  private PostBlog blog;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CUSTOM_META_DATA = "customMetaData";
  @SerializedName(SERIALIZED_NAME_CUSTOM_META_DATA)
  private String customMetaData;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<PostImagesInner> images = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private PostLocation location;

  public static final String SERIALIZED_NAME_PUBLISHED = "published";
  @SerializedName(SERIALIZED_NAME_PUBLISHED)
  private String published;

  /**
   * Comment control and display setting for readers of this post.
   */
  @JsonAdapter(ReaderCommentsEnum.Adapter.class)
  public enum ReaderCommentsEnum {
    ALLOW("ALLOW"),
    
    DONT_ALLOW_SHOW_EXISTING("DONT_ALLOW_SHOW_EXISTING"),
    
    DONT_ALLOW_HIDE_EXISTING("DONT_ALLOW_HIDE_EXISTING");

    private String value;

    ReaderCommentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReaderCommentsEnum fromValue(String value) {
      for (ReaderCommentsEnum b : ReaderCommentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReaderCommentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReaderCommentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReaderCommentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReaderCommentsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReaderCommentsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_READER_COMMENTS = "readerComments";
  @SerializedName(SERIALIZED_NAME_READER_COMMENTS)
  private ReaderCommentsEnum readerComments;

  public static final String SERIALIZED_NAME_REPLIES = "replies";
  @SerializedName(SERIALIZED_NAME_REPLIES)
  private PostReplies replies;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  /**
   * Status of the post. Only set for admin-level requests.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    LIVE("LIVE"),
    
    DRAFT("DRAFT"),
    
    SCHEDULED("SCHEDULED"),
    
    SOFT_TRASHED("SOFT_TRASHED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TITLE_LINK = "titleLink";
  @SerializedName(SERIALIZED_NAME_TITLE_LINK)
  private String titleLink;

  public static final String SERIALIZED_NAME_TRASHED = "trashed";
  @SerializedName(SERIALIZED_NAME_TRASHED)
  private String trashed;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private String updated;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Post() {
  }

  public Post author(PostAuthor author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public PostAuthor getAuthor() {
    return author;
  }

  public void setAuthor(PostAuthor author) {
    this.author = author;
  }


  public Post blog(PostBlog blog) {
    this.blog = blog;
    return this;
  }

  /**
   * Get blog
   * @return blog
   */
  @javax.annotation.Nullable
  public PostBlog getBlog() {
    return blog;
  }

  public void setBlog(PostBlog blog) {
    this.blog = blog;
  }


  public Post content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of the Post. May contain HTML markup.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public Post customMetaData(String customMetaData) {
    this.customMetaData = customMetaData;
    return this;
  }

  /**
   * The JSON meta-data for the Post.
   * @return customMetaData
   */
  @javax.annotation.Nullable
  public String getCustomMetaData() {
    return customMetaData;
  }

  public void setCustomMetaData(String customMetaData) {
    this.customMetaData = customMetaData;
  }


  public Post etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Etag of the resource.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Post id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier of this Post.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Post images(List<PostImagesInner> images) {
    this.images = images;
    return this;
  }

  public Post addImagesItem(PostImagesInner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

  /**
   * Display image for the Post.
   * @return images
   */
  @javax.annotation.Nullable
  public List<PostImagesInner> getImages() {
    return images;
  }

  public void setImages(List<PostImagesInner> images) {
    this.images = images;
  }


  public Post kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * The kind of this entity. Always blogger#post.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Post labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public Post addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * The list of labels this Post was tagged with.
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public Post location(PostLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public PostLocation getLocation() {
    return location;
  }

  public void setLocation(PostLocation location) {
    this.location = location;
  }


  public Post published(String published) {
    this.published = published;
    return this;
  }

  /**
   * RFC 3339 date-time when this Post was published.
   * @return published
   */
  @javax.annotation.Nullable
  public String getPublished() {
    return published;
  }

  public void setPublished(String published) {
    this.published = published;
  }


  public Post readerComments(ReaderCommentsEnum readerComments) {
    this.readerComments = readerComments;
    return this;
  }

  /**
   * Comment control and display setting for readers of this post.
   * @return readerComments
   */
  @javax.annotation.Nullable
  public ReaderCommentsEnum getReaderComments() {
    return readerComments;
  }

  public void setReaderComments(ReaderCommentsEnum readerComments) {
    this.readerComments = readerComments;
  }


  public Post replies(PostReplies replies) {
    this.replies = replies;
    return this;
  }

  /**
   * Get replies
   * @return replies
   */
  @javax.annotation.Nullable
  public PostReplies getReplies() {
    return replies;
  }

  public void setReplies(PostReplies replies) {
    this.replies = replies;
  }


  public Post selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The API REST URL to fetch this resource from.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Post status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of the post. Only set for admin-level requests.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Post title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the Post.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Post titleLink(String titleLink) {
    this.titleLink = titleLink;
    return this;
  }

  /**
   * The title link URL, similar to atom&#39;s related link.
   * @return titleLink
   */
  @javax.annotation.Nullable
  public String getTitleLink() {
    return titleLink;
  }

  public void setTitleLink(String titleLink) {
    this.titleLink = titleLink;
  }


  public Post trashed(String trashed) {
    this.trashed = trashed;
    return this;
  }

  /**
   * RFC 3339 date-time when this Post was last trashed.
   * @return trashed
   */
  @javax.annotation.Nullable
  public String getTrashed() {
    return trashed;
  }

  public void setTrashed(String trashed) {
    this.trashed = trashed;
  }


  public Post updated(String updated) {
    this.updated = updated;
    return this;
  }

  /**
   * RFC 3339 date-time when this Post was last updated.
   * @return updated
   */
  @javax.annotation.Nullable
  public String getUpdated() {
    return updated;
  }

  public void setUpdated(String updated) {
    this.updated = updated;
  }


  public Post url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The URL where this Post is displayed.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Post post = (Post) o;
    return Objects.equals(this.author, post.author) &&
        Objects.equals(this.blog, post.blog) &&
        Objects.equals(this.content, post.content) &&
        Objects.equals(this.customMetaData, post.customMetaData) &&
        Objects.equals(this.etag, post.etag) &&
        Objects.equals(this.id, post.id) &&
        Objects.equals(this.images, post.images) &&
        Objects.equals(this.kind, post.kind) &&
        Objects.equals(this.labels, post.labels) &&
        Objects.equals(this.location, post.location) &&
        Objects.equals(this.published, post.published) &&
        Objects.equals(this.readerComments, post.readerComments) &&
        Objects.equals(this.replies, post.replies) &&
        Objects.equals(this.selfLink, post.selfLink) &&
        Objects.equals(this.status, post.status) &&
        Objects.equals(this.title, post.title) &&
        Objects.equals(this.titleLink, post.titleLink) &&
        Objects.equals(this.trashed, post.trashed) &&
        Objects.equals(this.updated, post.updated) &&
        Objects.equals(this.url, post.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(author, blog, content, customMetaData, etag, id, images, kind, labels, location, published, readerComments, replies, selfLink, status, title, titleLink, trashed, updated, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Post {\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    blog: ").append(toIndentedString(blog)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    customMetaData: ").append(toIndentedString(customMetaData)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    readerComments: ").append(toIndentedString(readerComments)).append("\n");
    sb.append("    replies: ").append(toIndentedString(replies)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    titleLink: ").append(toIndentedString(titleLink)).append("\n");
    sb.append("    trashed: ").append(toIndentedString(trashed)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("author");
    openapiFields.add("blog");
    openapiFields.add("content");
    openapiFields.add("customMetaData");
    openapiFields.add("etag");
    openapiFields.add("id");
    openapiFields.add("images");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("location");
    openapiFields.add("published");
    openapiFields.add("readerComments");
    openapiFields.add("replies");
    openapiFields.add("selfLink");
    openapiFields.add("status");
    openapiFields.add("title");
    openapiFields.add("titleLink");
    openapiFields.add("trashed");
    openapiFields.add("updated");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Post
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Post.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Post is not found in the empty JSON string", Post.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Post.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Post` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        PostAuthor.validateJsonElement(jsonObj.get("author"));
      }
      // validate the optional field `blog`
      if (jsonObj.get("blog") != null && !jsonObj.get("blog").isJsonNull()) {
        PostBlog.validateJsonElement(jsonObj.get("blog"));
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("customMetaData") != null && !jsonObj.get("customMetaData").isJsonNull()) && !jsonObj.get("customMetaData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customMetaData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customMetaData").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            PostImagesInner.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        PostLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("published") != null && !jsonObj.get("published").isJsonNull()) && !jsonObj.get("published").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `published` to be a primitive type in the JSON string but got `%s`", jsonObj.get("published").toString()));
      }
      if ((jsonObj.get("readerComments") != null && !jsonObj.get("readerComments").isJsonNull()) && !jsonObj.get("readerComments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `readerComments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("readerComments").toString()));
      }
      // validate the optional field `readerComments`
      if (jsonObj.get("readerComments") != null && !jsonObj.get("readerComments").isJsonNull()) {
        ReaderCommentsEnum.validateJsonElement(jsonObj.get("readerComments"));
      }
      // validate the optional field `replies`
      if (jsonObj.get("replies") != null && !jsonObj.get("replies").isJsonNull()) {
        PostReplies.validateJsonElement(jsonObj.get("replies"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("titleLink") != null && !jsonObj.get("titleLink").isJsonNull()) && !jsonObj.get("titleLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `titleLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("titleLink").toString()));
      }
      if ((jsonObj.get("trashed") != null && !jsonObj.get("trashed").isJsonNull()) && !jsonObj.get("trashed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trashed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trashed").toString()));
      }
      if ((jsonObj.get("updated") != null && !jsonObj.get("updated").isJsonNull()) && !jsonObj.get("updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Post.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Post' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Post> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Post.class));

       return (TypeAdapter<T>) new TypeAdapter<Post>() {
           @Override
           public void write(JsonWriter out, Post value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Post read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Post given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Post
   * @throws IOException if the JSON string is invalid with respect to Post
   */
  public static Post fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Post.class);
  }

  /**
   * Convert an instance of Post to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

