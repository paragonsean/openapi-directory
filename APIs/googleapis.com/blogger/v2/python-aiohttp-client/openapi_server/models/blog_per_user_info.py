# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlogPerUserInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blog_id: str=None, has_admin_access: bool=None, kind: str=None, photos_album_key: str=None, role: str=None, user_id: str=None):
        """BlogPerUserInfo - a model defined in OpenAPI

        :param blog_id: The blog_id of this BlogPerUserInfo.
        :param has_admin_access: The has_admin_access of this BlogPerUserInfo.
        :param kind: The kind of this BlogPerUserInfo.
        :param photos_album_key: The photos_album_key of this BlogPerUserInfo.
        :param role: The role of this BlogPerUserInfo.
        :param user_id: The user_id of this BlogPerUserInfo.
        """
        self.openapi_types = {
            'blog_id': str,
            'has_admin_access': bool,
            'kind': str,
            'photos_album_key': str,
            'role': str,
            'user_id': str
        }

        self.attribute_map = {
            'blog_id': 'blogId',
            'has_admin_access': 'hasAdminAccess',
            'kind': 'kind',
            'photos_album_key': 'photosAlbumKey',
            'role': 'role',
            'user_id': 'userId'
        }

        self._blog_id = blog_id
        self._has_admin_access = has_admin_access
        self._kind = kind
        self._photos_album_key = photos_album_key
        self._role = role
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlogPerUserInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlogPerUserInfo of this BlogPerUserInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blog_id(self):
        """Gets the blog_id of this BlogPerUserInfo.

        ID of the Blog resource.

        :return: The blog_id of this BlogPerUserInfo.
        :rtype: str
        """
        return self._blog_id

    @blog_id.setter
    def blog_id(self, blog_id):
        """Sets the blog_id of this BlogPerUserInfo.

        ID of the Blog resource.

        :param blog_id: The blog_id of this BlogPerUserInfo.
        :type blog_id: str
        """

        self._blog_id = blog_id

    @property
    def has_admin_access(self):
        """Gets the has_admin_access of this BlogPerUserInfo.

        True if the user has Admin level access to the blog.

        :return: The has_admin_access of this BlogPerUserInfo.
        :rtype: bool
        """
        return self._has_admin_access

    @has_admin_access.setter
    def has_admin_access(self, has_admin_access):
        """Sets the has_admin_access of this BlogPerUserInfo.

        True if the user has Admin level access to the blog.

        :param has_admin_access: The has_admin_access of this BlogPerUserInfo.
        :type has_admin_access: bool
        """

        self._has_admin_access = has_admin_access

    @property
    def kind(self):
        """Gets the kind of this BlogPerUserInfo.

        The kind of this entity. Always blogger#blogPerUserInfo.

        :return: The kind of this BlogPerUserInfo.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BlogPerUserInfo.

        The kind of this entity. Always blogger#blogPerUserInfo.

        :param kind: The kind of this BlogPerUserInfo.
        :type kind: str
        """

        self._kind = kind

    @property
    def photos_album_key(self):
        """Gets the photos_album_key of this BlogPerUserInfo.

        The Photo Album Key for the user when adding photos to the blog.

        :return: The photos_album_key of this BlogPerUserInfo.
        :rtype: str
        """
        return self._photos_album_key

    @photos_album_key.setter
    def photos_album_key(self, photos_album_key):
        """Sets the photos_album_key of this BlogPerUserInfo.

        The Photo Album Key for the user when adding photos to the blog.

        :param photos_album_key: The photos_album_key of this BlogPerUserInfo.
        :type photos_album_key: str
        """

        self._photos_album_key = photos_album_key

    @property
    def role(self):
        """Gets the role of this BlogPerUserInfo.

        Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).

        :return: The role of this BlogPerUserInfo.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this BlogPerUserInfo.

        Access permissions that the user has for the blog (ADMIN, AUTHOR, or READER).

        :param role: The role of this BlogPerUserInfo.
        :type role: str
        """
        allowed_values = ["VIEW_TYPE_UNSPECIFIED", "READER", "AUTHOR", "ADMIN"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user_id(self):
        """Gets the user_id of this BlogPerUserInfo.

        ID of the User.

        :return: The user_id of this BlogPerUserInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this BlogPerUserInfo.

        ID of the User.

        :param user_id: The user_id of this BlogPerUserInfo.
        :type user_id: str
        """

        self._user_id = user_id
