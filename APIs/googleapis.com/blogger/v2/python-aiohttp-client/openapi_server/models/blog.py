# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.blog_locale import BlogLocale
from openapi_server.models.blog_pages import BlogPages
from openapi_server.models.blog_posts import BlogPosts
from openapi_server import util


class Blog(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_meta_data: str=None, description: str=None, id: str=None, kind: str=None, locale: BlogLocale=None, name: str=None, pages: BlogPages=None, posts: BlogPosts=None, published: str=None, self_link: str=None, status: str=None, updated: str=None, url: str=None):
        """Blog - a model defined in OpenAPI

        :param custom_meta_data: The custom_meta_data of this Blog.
        :param description: The description of this Blog.
        :param id: The id of this Blog.
        :param kind: The kind of this Blog.
        :param locale: The locale of this Blog.
        :param name: The name of this Blog.
        :param pages: The pages of this Blog.
        :param posts: The posts of this Blog.
        :param published: The published of this Blog.
        :param self_link: The self_link of this Blog.
        :param status: The status of this Blog.
        :param updated: The updated of this Blog.
        :param url: The url of this Blog.
        """
        self.openapi_types = {
            'custom_meta_data': str,
            'description': str,
            'id': str,
            'kind': str,
            'locale': BlogLocale,
            'name': str,
            'pages': BlogPages,
            'posts': BlogPosts,
            'published': str,
            'self_link': str,
            'status': str,
            'updated': str,
            'url': str
        }

        self.attribute_map = {
            'custom_meta_data': 'customMetaData',
            'description': 'description',
            'id': 'id',
            'kind': 'kind',
            'locale': 'locale',
            'name': 'name',
            'pages': 'pages',
            'posts': 'posts',
            'published': 'published',
            'self_link': 'selfLink',
            'status': 'status',
            'updated': 'updated',
            'url': 'url'
        }

        self._custom_meta_data = custom_meta_data
        self._description = description
        self._id = id
        self._kind = kind
        self._locale = locale
        self._name = name
        self._pages = pages
        self._posts = posts
        self._published = published
        self._self_link = self_link
        self._status = status
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Blog':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Blog of this Blog.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_meta_data(self):
        """Gets the custom_meta_data of this Blog.

        The JSON custom meta-data for the Blog.

        :return: The custom_meta_data of this Blog.
        :rtype: str
        """
        return self._custom_meta_data

    @custom_meta_data.setter
    def custom_meta_data(self, custom_meta_data):
        """Sets the custom_meta_data of this Blog.

        The JSON custom meta-data for the Blog.

        :param custom_meta_data: The custom_meta_data of this Blog.
        :type custom_meta_data: str
        """

        self._custom_meta_data = custom_meta_data

    @property
    def description(self):
        """Gets the description of this Blog.

        The description of this blog. This is displayed underneath the title.

        :return: The description of this Blog.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Blog.

        The description of this blog. This is displayed underneath the title.

        :param description: The description of this Blog.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Blog.

        The identifier for this resource.

        :return: The id of this Blog.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Blog.

        The identifier for this resource.

        :param id: The id of this Blog.
        :type id: str
        """

        self._id = id

    @property
    def kind(self):
        """Gets the kind of this Blog.

        The kind of this entry. Always blogger#blog.

        :return: The kind of this Blog.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Blog.

        The kind of this entry. Always blogger#blog.

        :param kind: The kind of this Blog.
        :type kind: str
        """

        self._kind = kind

    @property
    def locale(self):
        """Gets the locale of this Blog.


        :return: The locale of this Blog.
        :rtype: BlogLocale
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Blog.


        :param locale: The locale of this Blog.
        :type locale: BlogLocale
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this Blog.

        The name of this blog. This is displayed as the title.

        :return: The name of this Blog.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Blog.

        The name of this blog. This is displayed as the title.

        :param name: The name of this Blog.
        :type name: str
        """

        self._name = name

    @property
    def pages(self):
        """Gets the pages of this Blog.


        :return: The pages of this Blog.
        :rtype: BlogPages
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this Blog.


        :param pages: The pages of this Blog.
        :type pages: BlogPages
        """

        self._pages = pages

    @property
    def posts(self):
        """Gets the posts of this Blog.


        :return: The posts of this Blog.
        :rtype: BlogPosts
        """
        return self._posts

    @posts.setter
    def posts(self, posts):
        """Sets the posts of this Blog.


        :param posts: The posts of this Blog.
        :type posts: BlogPosts
        """

        self._posts = posts

    @property
    def published(self):
        """Gets the published of this Blog.

        RFC 3339 date-time when this blog was published.

        :return: The published of this Blog.
        :rtype: str
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this Blog.

        RFC 3339 date-time when this blog was published.

        :param published: The published of this Blog.
        :type published: str
        """

        self._published = published

    @property
    def self_link(self):
        """Gets the self_link of this Blog.

        The API REST URL to fetch this resource from.

        :return: The self_link of this Blog.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Blog.

        The API REST URL to fetch this resource from.

        :param self_link: The self_link of this Blog.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def status(self):
        """Gets the status of this Blog.

        The status of the blog.

        :return: The status of this Blog.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Blog.

        The status of the blog.

        :param status: The status of this Blog.
        :type status: str
        """
        allowed_values = ["LIVE", "DELETED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this Blog.

        RFC 3339 date-time when this blog was last updated.

        :return: The updated of this Blog.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Blog.

        RFC 3339 date-time when this blog was last updated.

        :param updated: The updated of this Blog.
        :type updated: str
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this Blog.

        The URL where this blog is published.

        :return: The url of this Blog.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Blog.

        The URL where this blog is published.

        :param url: The url of this Blog.
        :type url: str
        """

        self._url = url
