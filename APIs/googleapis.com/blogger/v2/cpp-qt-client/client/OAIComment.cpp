/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComment::OAIComment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComment::OAIComment() {
    this->initializeModel();
}

OAIComment::~OAIComment() {}

void OAIComment::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_in_reply_to_isSet = false;
    m_in_reply_to_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_post_isSet = false;
    m_post_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIComment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComment::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_in_reply_to_isValid = ::OpenAPI::fromJsonValue(m_in_reply_to, json[QString("inReplyTo")]);
    m_in_reply_to_isSet = !json[QString("inReplyTo")].isNull() && m_in_reply_to_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_post_isValid = ::OpenAPI::fromJsonValue(m_post, json[QString("post")]);
    m_post_isSet = !json[QString("post")].isNull() && m_post_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIComment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComment::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_blog.isSet()) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_in_reply_to.isSet()) {
        obj.insert(QString("inReplyTo"), ::OpenAPI::toJsonValue(m_in_reply_to));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_post.isSet()) {
        obj.insert(QString("post"), ::OpenAPI::toJsonValue(m_post));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

OAIComment_author OAIComment::getAuthor() const {
    return m_author;
}
void OAIComment::setAuthor(const OAIComment_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIComment::is_author_Set() const{
    return m_author_isSet;
}

bool OAIComment::is_author_Valid() const{
    return m_author_isValid;
}

OAIComment_blog OAIComment::getBlog() const {
    return m_blog;
}
void OAIComment::setBlog(const OAIComment_blog &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIComment::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIComment::is_blog_Valid() const{
    return m_blog_isValid;
}

QString OAIComment::getContent() const {
    return m_content;
}
void OAIComment::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIComment::is_content_Set() const{
    return m_content_isSet;
}

bool OAIComment::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIComment::getId() const {
    return m_id;
}
void OAIComment::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIComment::is_id_Set() const{
    return m_id_isSet;
}

bool OAIComment::is_id_Valid() const{
    return m_id_isValid;
}

OAIComment_inReplyTo OAIComment::getInReplyTo() const {
    return m_in_reply_to;
}
void OAIComment::setInReplyTo(const OAIComment_inReplyTo &in_reply_to) {
    m_in_reply_to = in_reply_to;
    m_in_reply_to_isSet = true;
}

bool OAIComment::is_in_reply_to_Set() const{
    return m_in_reply_to_isSet;
}

bool OAIComment::is_in_reply_to_Valid() const{
    return m_in_reply_to_isValid;
}

QString OAIComment::getKind() const {
    return m_kind;
}
void OAIComment::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIComment::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIComment::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIComment_post OAIComment::getPost() const {
    return m_post;
}
void OAIComment::setPost(const OAIComment_post &post) {
    m_post = post;
    m_post_isSet = true;
}

bool OAIComment::is_post_Set() const{
    return m_post_isSet;
}

bool OAIComment::is_post_Valid() const{
    return m_post_isValid;
}

QString OAIComment::getPublished() const {
    return m_published;
}
void OAIComment::setPublished(const QString &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIComment::is_published_Set() const{
    return m_published_isSet;
}

bool OAIComment::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIComment::getSelfLink() const {
    return m_self_link;
}
void OAIComment::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIComment::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIComment::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIComment::getStatus() const {
    return m_status;
}
void OAIComment::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIComment::is_status_Set() const{
    return m_status_isSet;
}

bool OAIComment::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIComment::getUpdated() const {
    return m_updated;
}
void OAIComment::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIComment::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIComment::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIComment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_reply_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
