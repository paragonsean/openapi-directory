/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_blogs_isSet = false;
    m_blogs_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_blogs_isValid = ::OpenAPI::fromJsonValue(m_blogs, json[QString("blogs")]);
    m_blogs_isSet = !json[QString("blogs")].isNull() && m_blogs_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_blogs.isSet()) {
        obj.insert(QString("blogs"), ::OpenAPI::toJsonValue(m_blogs));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_locale.isSet()) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIUser::getAbout() const {
    return m_about;
}
void OAIUser::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIUser::is_about_Set() const{
    return m_about_isSet;
}

bool OAIUser::is_about_Valid() const{
    return m_about_isValid;
}

OAIUser_blogs OAIUser::getBlogs() const {
    return m_blogs;
}
void OAIUser::setBlogs(const OAIUser_blogs &blogs) {
    m_blogs = blogs;
    m_blogs_isSet = true;
}

bool OAIUser::is_blogs_Set() const{
    return m_blogs_isSet;
}

bool OAIUser::is_blogs_Valid() const{
    return m_blogs_isValid;
}

QString OAIUser::getCreated() const {
    return m_created;
}
void OAIUser::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIUser::is_created_Set() const{
    return m_created_isSet;
}

bool OAIUser::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getKind() const {
    return m_kind;
}
void OAIUser::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIUser::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIUser::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIUser_locale OAIUser::getLocale() const {
    return m_locale;
}
void OAIUser::setLocale(const OAIUser_locale &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUser::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUser::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIUser::getSelfLink() const {
    return m_self_link;
}
void OAIUser::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIUser::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIUser::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIUser::getUrl() const {
    return m_url;
}
void OAIUser::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUser::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUser::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blogs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
