/**
 * Blogger API
 * The Blogger API provides access to posts, comments and pages of a Blogger blog.
 *
 * The version of the OpenAPI document: v2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPost.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPost::OAIPost(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPost::OAIPost() {
    this->initializeModel();
}

OAIPost::~OAIPost() {}

void OAIPost::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_blog_isSet = false;
    m_blog_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_custom_meta_data_isSet = false;
    m_custom_meta_data_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_images_isSet = false;
    m_images_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_published_isSet = false;
    m_published_isValid = false;

    m_reader_comments_isSet = false;
    m_reader_comments_isValid = false;

    m_replies_isSet = false;
    m_replies_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_title_link_isSet = false;
    m_title_link_isValid = false;

    m_trashed_isSet = false;
    m_trashed_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIPost::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPost::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_blog_isValid = ::OpenAPI::fromJsonValue(m_blog, json[QString("blog")]);
    m_blog_isSet = !json[QString("blog")].isNull() && m_blog_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_custom_meta_data_isValid = ::OpenAPI::fromJsonValue(m_custom_meta_data, json[QString("customMetaData")]);
    m_custom_meta_data_isSet = !json[QString("customMetaData")].isNull() && m_custom_meta_data_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_images_isValid = ::OpenAPI::fromJsonValue(m_images, json[QString("images")]);
    m_images_isSet = !json[QString("images")].isNull() && m_images_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_published_isValid = ::OpenAPI::fromJsonValue(m_published, json[QString("published")]);
    m_published_isSet = !json[QString("published")].isNull() && m_published_isValid;

    m_reader_comments_isValid = ::OpenAPI::fromJsonValue(m_reader_comments, json[QString("readerComments")]);
    m_reader_comments_isSet = !json[QString("readerComments")].isNull() && m_reader_comments_isValid;

    m_replies_isValid = ::OpenAPI::fromJsonValue(m_replies, json[QString("replies")]);
    m_replies_isSet = !json[QString("replies")].isNull() && m_replies_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_title_link_isValid = ::OpenAPI::fromJsonValue(m_title_link, json[QString("titleLink")]);
    m_title_link_isSet = !json[QString("titleLink")].isNull() && m_title_link_isValid;

    m_trashed_isValid = ::OpenAPI::fromJsonValue(m_trashed, json[QString("trashed")]);
    m_trashed_isSet = !json[QString("trashed")].isNull() && m_trashed_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIPost::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPost::asJsonObject() const {
    QJsonObject obj;
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_blog.isSet()) {
        obj.insert(QString("blog"), ::OpenAPI::toJsonValue(m_blog));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_custom_meta_data_isSet) {
        obj.insert(QString("customMetaData"), ::OpenAPI::toJsonValue(m_custom_meta_data));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_images.size() > 0) {
        obj.insert(QString("images"), ::OpenAPI::toJsonValue(m_images));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_published_isSet) {
        obj.insert(QString("published"), ::OpenAPI::toJsonValue(m_published));
    }
    if (m_reader_comments_isSet) {
        obj.insert(QString("readerComments"), ::OpenAPI::toJsonValue(m_reader_comments));
    }
    if (m_replies.isSet()) {
        obj.insert(QString("replies"), ::OpenAPI::toJsonValue(m_replies));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_title_link_isSet) {
        obj.insert(QString("titleLink"), ::OpenAPI::toJsonValue(m_title_link));
    }
    if (m_trashed_isSet) {
        obj.insert(QString("trashed"), ::OpenAPI::toJsonValue(m_trashed));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIPost_author OAIPost::getAuthor() const {
    return m_author;
}
void OAIPost::setAuthor(const OAIPost_author &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPost::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPost::is_author_Valid() const{
    return m_author_isValid;
}

OAIPost_blog OAIPost::getBlog() const {
    return m_blog;
}
void OAIPost::setBlog(const OAIPost_blog &blog) {
    m_blog = blog;
    m_blog_isSet = true;
}

bool OAIPost::is_blog_Set() const{
    return m_blog_isSet;
}

bool OAIPost::is_blog_Valid() const{
    return m_blog_isValid;
}

QString OAIPost::getContent() const {
    return m_content;
}
void OAIPost::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIPost::is_content_Set() const{
    return m_content_isSet;
}

bool OAIPost::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIPost::getCustomMetaData() const {
    return m_custom_meta_data;
}
void OAIPost::setCustomMetaData(const QString &custom_meta_data) {
    m_custom_meta_data = custom_meta_data;
    m_custom_meta_data_isSet = true;
}

bool OAIPost::is_custom_meta_data_Set() const{
    return m_custom_meta_data_isSet;
}

bool OAIPost::is_custom_meta_data_Valid() const{
    return m_custom_meta_data_isValid;
}

QString OAIPost::getEtag() const {
    return m_etag;
}
void OAIPost::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIPost::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIPost::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIPost::getId() const {
    return m_id;
}
void OAIPost::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPost::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPost::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIPost_images_inner> OAIPost::getImages() const {
    return m_images;
}
void OAIPost::setImages(const QList<OAIPost_images_inner> &images) {
    m_images = images;
    m_images_isSet = true;
}

bool OAIPost::is_images_Set() const{
    return m_images_isSet;
}

bool OAIPost::is_images_Valid() const{
    return m_images_isValid;
}

QString OAIPost::getKind() const {
    return m_kind;
}
void OAIPost::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPost::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPost::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAIPost::getLabels() const {
    return m_labels;
}
void OAIPost::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPost::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPost::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIPost_location OAIPost::getLocation() const {
    return m_location;
}
void OAIPost::setLocation(const OAIPost_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIPost::is_location_Set() const{
    return m_location_isSet;
}

bool OAIPost::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIPost::getPublished() const {
    return m_published;
}
void OAIPost::setPublished(const QString &published) {
    m_published = published;
    m_published_isSet = true;
}

bool OAIPost::is_published_Set() const{
    return m_published_isSet;
}

bool OAIPost::is_published_Valid() const{
    return m_published_isValid;
}

QString OAIPost::getReaderComments() const {
    return m_reader_comments;
}
void OAIPost::setReaderComments(const QString &reader_comments) {
    m_reader_comments = reader_comments;
    m_reader_comments_isSet = true;
}

bool OAIPost::is_reader_comments_Set() const{
    return m_reader_comments_isSet;
}

bool OAIPost::is_reader_comments_Valid() const{
    return m_reader_comments_isValid;
}

OAIPost_replies OAIPost::getReplies() const {
    return m_replies;
}
void OAIPost::setReplies(const OAIPost_replies &replies) {
    m_replies = replies;
    m_replies_isSet = true;
}

bool OAIPost::is_replies_Set() const{
    return m_replies_isSet;
}

bool OAIPost::is_replies_Valid() const{
    return m_replies_isValid;
}

QString OAIPost::getSelfLink() const {
    return m_self_link;
}
void OAIPost::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIPost::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIPost::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIPost::getStatus() const {
    return m_status;
}
void OAIPost::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPost::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPost::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIPost::getTitle() const {
    return m_title;
}
void OAIPost::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPost::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPost::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPost::getTitleLink() const {
    return m_title_link;
}
void OAIPost::setTitleLink(const QString &title_link) {
    m_title_link = title_link;
    m_title_link_isSet = true;
}

bool OAIPost::is_title_link_Set() const{
    return m_title_link_isSet;
}

bool OAIPost::is_title_link_Valid() const{
    return m_title_link_isValid;
}

QString OAIPost::getTrashed() const {
    return m_trashed;
}
void OAIPost::setTrashed(const QString &trashed) {
    m_trashed = trashed;
    m_trashed_isSet = true;
}

bool OAIPost::is_trashed_Set() const{
    return m_trashed_isSet;
}

bool OAIPost::is_trashed_Valid() const{
    return m_trashed_isValid;
}

QString OAIPost::getUpdated() const {
    return m_updated;
}
void OAIPost::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPost::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPost::is_updated_Valid() const{
    return m_updated_isValid;
}

QString OAIPost::getUrl() const {
    return m_url;
}
void OAIPost::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIPost::is_url_Set() const{
    return m_url_isSet;
}

bool OAIPost::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIPost::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_blog.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reader_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trashed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPost::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
