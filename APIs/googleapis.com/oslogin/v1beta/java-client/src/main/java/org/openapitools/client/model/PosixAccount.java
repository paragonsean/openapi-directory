/*
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The POSIX account information associated with a Google account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:27.625648-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PosixAccount {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_GECOS = "gecos";
  @SerializedName(SERIALIZED_NAME_GECOS)
  private String gecos;

  public static final String SERIALIZED_NAME_GID = "gid";
  @SerializedName(SERIALIZED_NAME_GID)
  private String gid;

  public static final String SERIALIZED_NAME_HOME_DIRECTORY = "homeDirectory";
  @SerializedName(SERIALIZED_NAME_HOME_DIRECTORY)
  private String homeDirectory;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The operating system type where this account applies.
   */
  @JsonAdapter(OperatingSystemTypeEnum.Adapter.class)
  public enum OperatingSystemTypeEnum {
    OPERATING_SYSTEM_TYPE_UNSPECIFIED("OPERATING_SYSTEM_TYPE_UNSPECIFIED"),
    
    LINUX("LINUX"),
    
    WINDOWS("WINDOWS");

    private String value;

    OperatingSystemTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperatingSystemTypeEnum fromValue(String value) {
      for (OperatingSystemTypeEnum b : OperatingSystemTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperatingSystemTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperatingSystemTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperatingSystemTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperatingSystemTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperatingSystemTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATING_SYSTEM_TYPE = "operatingSystemType";
  @SerializedName(SERIALIZED_NAME_OPERATING_SYSTEM_TYPE)
  private OperatingSystemTypeEnum operatingSystemType;

  public static final String SERIALIZED_NAME_PRIMARY = "primary";
  @SerializedName(SERIALIZED_NAME_PRIMARY)
  private Boolean primary;

  public static final String SERIALIZED_NAME_SHELL = "shell";
  @SerializedName(SERIALIZED_NAME_SHELL)
  private String shell;

  public static final String SERIALIZED_NAME_SYSTEM_ID = "systemId";
  @SerializedName(SERIALIZED_NAME_SYSTEM_ID)
  private String systemId;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public PosixAccount() {
  }

  public PosixAccount(
     String accountId, 
     String name
  ) {
    this();
    this.accountId = accountId;
    this.name = name;
  }

  /**
   * Output only. A POSIX account identifier.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }



  public PosixAccount gecos(String gecos) {
    this.gecos = gecos;
    return this;
  }

  /**
   * The GECOS (user information) entry for this account.
   * @return gecos
   */
  @javax.annotation.Nullable
  public String getGecos() {
    return gecos;
  }

  public void setGecos(String gecos) {
    this.gecos = gecos;
  }


  public PosixAccount gid(String gid) {
    this.gid = gid;
    return this;
  }

  /**
   * The default group ID.
   * @return gid
   */
  @javax.annotation.Nullable
  public String getGid() {
    return gid;
  }

  public void setGid(String gid) {
    this.gid = gid;
  }


  public PosixAccount homeDirectory(String homeDirectory) {
    this.homeDirectory = homeDirectory;
    return this;
  }

  /**
   * The path to the home directory for this account.
   * @return homeDirectory
   */
  @javax.annotation.Nullable
  public String getHomeDirectory() {
    return homeDirectory;
  }

  public void setHomeDirectory(String homeDirectory) {
    this.homeDirectory = homeDirectory;
  }


  /**
   * Output only. The canonical resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public PosixAccount operatingSystemType(OperatingSystemTypeEnum operatingSystemType) {
    this.operatingSystemType = operatingSystemType;
    return this;
  }

  /**
   * The operating system type where this account applies.
   * @return operatingSystemType
   */
  @javax.annotation.Nullable
  public OperatingSystemTypeEnum getOperatingSystemType() {
    return operatingSystemType;
  }

  public void setOperatingSystemType(OperatingSystemTypeEnum operatingSystemType) {
    this.operatingSystemType = operatingSystemType;
  }


  public PosixAccount primary(Boolean primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Only one POSIX account can be marked as primary.
   * @return primary
   */
  @javax.annotation.Nullable
  public Boolean getPrimary() {
    return primary;
  }

  public void setPrimary(Boolean primary) {
    this.primary = primary;
  }


  public PosixAccount shell(String shell) {
    this.shell = shell;
    return this;
  }

  /**
   * The path to the logic shell for this account.
   * @return shell
   */
  @javax.annotation.Nullable
  public String getShell() {
    return shell;
  }

  public void setShell(String shell) {
    this.shell = shell;
  }


  public PosixAccount systemId(String systemId) {
    this.systemId = systemId;
    return this;
  }

  /**
   * System identifier for which account the username or uid applies to. By default, the empty value is used.
   * @return systemId
   */
  @javax.annotation.Nullable
  public String getSystemId() {
    return systemId;
  }

  public void setSystemId(String systemId) {
    this.systemId = systemId;
  }


  public PosixAccount uid(String uid) {
    this.uid = uid;
    return this;
  }

  /**
   * The user ID.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }

  public void setUid(String uid) {
    this.uid = uid;
  }


  public PosixAccount username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username of the POSIX account.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PosixAccount posixAccount = (PosixAccount) o;
    return Objects.equals(this.accountId, posixAccount.accountId) &&
        Objects.equals(this.gecos, posixAccount.gecos) &&
        Objects.equals(this.gid, posixAccount.gid) &&
        Objects.equals(this.homeDirectory, posixAccount.homeDirectory) &&
        Objects.equals(this.name, posixAccount.name) &&
        Objects.equals(this.operatingSystemType, posixAccount.operatingSystemType) &&
        Objects.equals(this.primary, posixAccount.primary) &&
        Objects.equals(this.shell, posixAccount.shell) &&
        Objects.equals(this.systemId, posixAccount.systemId) &&
        Objects.equals(this.uid, posixAccount.uid) &&
        Objects.equals(this.username, posixAccount.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, gecos, gid, homeDirectory, name, operatingSystemType, primary, shell, systemId, uid, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PosixAccount {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    gecos: ").append(toIndentedString(gecos)).append("\n");
    sb.append("    gid: ").append(toIndentedString(gid)).append("\n");
    sb.append("    homeDirectory: ").append(toIndentedString(homeDirectory)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operatingSystemType: ").append(toIndentedString(operatingSystemType)).append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    shell: ").append(toIndentedString(shell)).append("\n");
    sb.append("    systemId: ").append(toIndentedString(systemId)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("gecos");
    openapiFields.add("gid");
    openapiFields.add("homeDirectory");
    openapiFields.add("name");
    openapiFields.add("operatingSystemType");
    openapiFields.add("primary");
    openapiFields.add("shell");
    openapiFields.add("systemId");
    openapiFields.add("uid");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PosixAccount
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PosixAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PosixAccount is not found in the empty JSON string", PosixAccount.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PosixAccount.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PosixAccount` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("gecos") != null && !jsonObj.get("gecos").isJsonNull()) && !jsonObj.get("gecos").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gecos` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gecos").toString()));
      }
      if ((jsonObj.get("gid") != null && !jsonObj.get("gid").isJsonNull()) && !jsonObj.get("gid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gid").toString()));
      }
      if ((jsonObj.get("homeDirectory") != null && !jsonObj.get("homeDirectory").isJsonNull()) && !jsonObj.get("homeDirectory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeDirectory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeDirectory").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("operatingSystemType") != null && !jsonObj.get("operatingSystemType").isJsonNull()) && !jsonObj.get("operatingSystemType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operatingSystemType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operatingSystemType").toString()));
      }
      // validate the optional field `operatingSystemType`
      if (jsonObj.get("operatingSystemType") != null && !jsonObj.get("operatingSystemType").isJsonNull()) {
        OperatingSystemTypeEnum.validateJsonElement(jsonObj.get("operatingSystemType"));
      }
      if ((jsonObj.get("shell") != null && !jsonObj.get("shell").isJsonNull()) && !jsonObj.get("shell").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shell` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shell").toString()));
      }
      if ((jsonObj.get("systemId") != null && !jsonObj.get("systemId").isJsonNull()) && !jsonObj.get("systemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `systemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("systemId").toString()));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PosixAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PosixAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PosixAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PosixAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<PosixAccount>() {
           @Override
           public void write(JsonWriter out, PosixAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PosixAccount read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PosixAccount given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PosixAccount
   * @throws IOException if the JSON string is invalid with respect to PosixAccount
   */
  public static PosixAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PosixAccount.class);
  }

  /**
   * Convert an instance of PosixAccount to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

