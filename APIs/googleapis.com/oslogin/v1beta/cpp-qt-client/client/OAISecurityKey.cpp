/**
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISecurityKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISecurityKey::OAISecurityKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISecurityKey::OAISecurityKey() {
    this->initializeModel();
}

OAISecurityKey::~OAISecurityKey() {}

void OAISecurityKey::initializeModel() {

    m_device_nickname_isSet = false;
    m_device_nickname_isValid = false;

    m_private_key_isSet = false;
    m_private_key_isValid = false;

    m_public_key_isSet = false;
    m_public_key_isValid = false;

    m_universal_two_factor_isSet = false;
    m_universal_two_factor_isValid = false;

    m_web_authn_isSet = false;
    m_web_authn_isValid = false;
}

void OAISecurityKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISecurityKey::fromJsonObject(QJsonObject json) {

    m_device_nickname_isValid = ::OpenAPI::fromJsonValue(m_device_nickname, json[QString("deviceNickname")]);
    m_device_nickname_isSet = !json[QString("deviceNickname")].isNull() && m_device_nickname_isValid;

    m_private_key_isValid = ::OpenAPI::fromJsonValue(m_private_key, json[QString("privateKey")]);
    m_private_key_isSet = !json[QString("privateKey")].isNull() && m_private_key_isValid;

    m_public_key_isValid = ::OpenAPI::fromJsonValue(m_public_key, json[QString("publicKey")]);
    m_public_key_isSet = !json[QString("publicKey")].isNull() && m_public_key_isValid;

    m_universal_two_factor_isValid = ::OpenAPI::fromJsonValue(m_universal_two_factor, json[QString("universalTwoFactor")]);
    m_universal_two_factor_isSet = !json[QString("universalTwoFactor")].isNull() && m_universal_two_factor_isValid;

    m_web_authn_isValid = ::OpenAPI::fromJsonValue(m_web_authn, json[QString("webAuthn")]);
    m_web_authn_isSet = !json[QString("webAuthn")].isNull() && m_web_authn_isValid;
}

QString OAISecurityKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISecurityKey::asJsonObject() const {
    QJsonObject obj;
    if (m_device_nickname_isSet) {
        obj.insert(QString("deviceNickname"), ::OpenAPI::toJsonValue(m_device_nickname));
    }
    if (m_private_key_isSet) {
        obj.insert(QString("privateKey"), ::OpenAPI::toJsonValue(m_private_key));
    }
    if (m_public_key_isSet) {
        obj.insert(QString("publicKey"), ::OpenAPI::toJsonValue(m_public_key));
    }
    if (m_universal_two_factor.isSet()) {
        obj.insert(QString("universalTwoFactor"), ::OpenAPI::toJsonValue(m_universal_two_factor));
    }
    if (m_web_authn.isSet()) {
        obj.insert(QString("webAuthn"), ::OpenAPI::toJsonValue(m_web_authn));
    }
    return obj;
}

QString OAISecurityKey::getDeviceNickname() const {
    return m_device_nickname;
}
void OAISecurityKey::setDeviceNickname(const QString &device_nickname) {
    m_device_nickname = device_nickname;
    m_device_nickname_isSet = true;
}

bool OAISecurityKey::is_device_nickname_Set() const{
    return m_device_nickname_isSet;
}

bool OAISecurityKey::is_device_nickname_Valid() const{
    return m_device_nickname_isValid;
}

QString OAISecurityKey::getPrivateKey() const {
    return m_private_key;
}
void OAISecurityKey::setPrivateKey(const QString &private_key) {
    m_private_key = private_key;
    m_private_key_isSet = true;
}

bool OAISecurityKey::is_private_key_Set() const{
    return m_private_key_isSet;
}

bool OAISecurityKey::is_private_key_Valid() const{
    return m_private_key_isValid;
}

QString OAISecurityKey::getPublicKey() const {
    return m_public_key;
}
void OAISecurityKey::setPublicKey(const QString &public_key) {
    m_public_key = public_key;
    m_public_key_isSet = true;
}

bool OAISecurityKey::is_public_key_Set() const{
    return m_public_key_isSet;
}

bool OAISecurityKey::is_public_key_Valid() const{
    return m_public_key_isValid;
}

OAIUniversalTwoFactor OAISecurityKey::getUniversalTwoFactor() const {
    return m_universal_two_factor;
}
void OAISecurityKey::setUniversalTwoFactor(const OAIUniversalTwoFactor &universal_two_factor) {
    m_universal_two_factor = universal_two_factor;
    m_universal_two_factor_isSet = true;
}

bool OAISecurityKey::is_universal_two_factor_Set() const{
    return m_universal_two_factor_isSet;
}

bool OAISecurityKey::is_universal_two_factor_Valid() const{
    return m_universal_two_factor_isValid;
}

OAIWebAuthn OAISecurityKey::getWebAuthn() const {
    return m_web_authn;
}
void OAISecurityKey::setWebAuthn(const OAIWebAuthn &web_authn) {
    m_web_authn = web_authn;
    m_web_authn_isSet = true;
}

bool OAISecurityKey::is_web_authn_Set() const{
    return m_web_authn_isSet;
}

bool OAISecurityKey::is_web_authn_Valid() const{
    return m_web_authn_isValid;
}

bool OAISecurityKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_device_nickname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_universal_two_factor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_authn.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISecurityKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
