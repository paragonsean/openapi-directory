/**
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISecurityKey.h
 *
 * The credential information for a Google registered security key.
 */

#ifndef OAISecurityKey_H
#define OAISecurityKey_H

#include <QJsonObject>

#include "OAIUniversalTwoFactor.h"
#include "OAIWebAuthn.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUniversalTwoFactor;
class OAIWebAuthn;

class OAISecurityKey : public OAIObject {
public:
    OAISecurityKey();
    OAISecurityKey(QString json);
    ~OAISecurityKey() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDeviceNickname() const;
    void setDeviceNickname(const QString &device_nickname);
    bool is_device_nickname_Set() const;
    bool is_device_nickname_Valid() const;

    QString getPrivateKey() const;
    void setPrivateKey(const QString &private_key);
    bool is_private_key_Set() const;
    bool is_private_key_Valid() const;

    QString getPublicKey() const;
    void setPublicKey(const QString &public_key);
    bool is_public_key_Set() const;
    bool is_public_key_Valid() const;

    OAIUniversalTwoFactor getUniversalTwoFactor() const;
    void setUniversalTwoFactor(const OAIUniversalTwoFactor &universal_two_factor);
    bool is_universal_two_factor_Set() const;
    bool is_universal_two_factor_Valid() const;

    OAIWebAuthn getWebAuthn() const;
    void setWebAuthn(const OAIWebAuthn &web_authn);
    bool is_web_authn_Set() const;
    bool is_web_authn_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_device_nickname;
    bool m_device_nickname_isSet;
    bool m_device_nickname_isValid;

    QString m_private_key;
    bool m_private_key_isSet;
    bool m_private_key_isValid;

    QString m_public_key;
    bool m_public_key_isSet;
    bool m_public_key_isValid;

    OAIUniversalTwoFactor m_universal_two_factor;
    bool m_universal_two_factor_isSet;
    bool m_universal_two_factor_isValid;

    OAIWebAuthn m_web_authn;
    bool m_web_authn_isSet;
    bool m_web_authn_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISecurityKey)

#endif // OAISecurityKey_H
