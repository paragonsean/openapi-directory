# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PosixAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, gecos: str=None, gid: str=None, home_directory: str=None, name: str=None, operating_system_type: str=None, primary: bool=None, shell: str=None, system_id: str=None, uid: str=None, username: str=None):
        """PosixAccount - a model defined in OpenAPI

        :param account_id: The account_id of this PosixAccount.
        :param gecos: The gecos of this PosixAccount.
        :param gid: The gid of this PosixAccount.
        :param home_directory: The home_directory of this PosixAccount.
        :param name: The name of this PosixAccount.
        :param operating_system_type: The operating_system_type of this PosixAccount.
        :param primary: The primary of this PosixAccount.
        :param shell: The shell of this PosixAccount.
        :param system_id: The system_id of this PosixAccount.
        :param uid: The uid of this PosixAccount.
        :param username: The username of this PosixAccount.
        """
        self.openapi_types = {
            'account_id': str,
            'gecos': str,
            'gid': str,
            'home_directory': str,
            'name': str,
            'operating_system_type': str,
            'primary': bool,
            'shell': str,
            'system_id': str,
            'uid': str,
            'username': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'gecos': 'gecos',
            'gid': 'gid',
            'home_directory': 'homeDirectory',
            'name': 'name',
            'operating_system_type': 'operatingSystemType',
            'primary': 'primary',
            'shell': 'shell',
            'system_id': 'systemId',
            'uid': 'uid',
            'username': 'username'
        }

        self._account_id = account_id
        self._gecos = gecos
        self._gid = gid
        self._home_directory = home_directory
        self._name = name
        self._operating_system_type = operating_system_type
        self._primary = primary
        self._shell = shell
        self._system_id = system_id
        self._uid = uid
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PosixAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PosixAccount of this PosixAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this PosixAccount.

        Output only. A POSIX account identifier.

        :return: The account_id of this PosixAccount.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PosixAccount.

        Output only. A POSIX account identifier.

        :param account_id: The account_id of this PosixAccount.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def gecos(self):
        """Gets the gecos of this PosixAccount.

        The GECOS (user information) entry for this account.

        :return: The gecos of this PosixAccount.
        :rtype: str
        """
        return self._gecos

    @gecos.setter
    def gecos(self, gecos):
        """Sets the gecos of this PosixAccount.

        The GECOS (user information) entry for this account.

        :param gecos: The gecos of this PosixAccount.
        :type gecos: str
        """

        self._gecos = gecos

    @property
    def gid(self):
        """Gets the gid of this PosixAccount.

        The default group ID.

        :return: The gid of this PosixAccount.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid):
        """Sets the gid of this PosixAccount.

        The default group ID.

        :param gid: The gid of this PosixAccount.
        :type gid: str
        """

        self._gid = gid

    @property
    def home_directory(self):
        """Gets the home_directory of this PosixAccount.

        The path to the home directory for this account.

        :return: The home_directory of this PosixAccount.
        :rtype: str
        """
        return self._home_directory

    @home_directory.setter
    def home_directory(self, home_directory):
        """Sets the home_directory of this PosixAccount.

        The path to the home directory for this account.

        :param home_directory: The home_directory of this PosixAccount.
        :type home_directory: str
        """

        self._home_directory = home_directory

    @property
    def name(self):
        """Gets the name of this PosixAccount.

        Output only. The canonical resource name.

        :return: The name of this PosixAccount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PosixAccount.

        Output only. The canonical resource name.

        :param name: The name of this PosixAccount.
        :type name: str
        """

        self._name = name

    @property
    def operating_system_type(self):
        """Gets the operating_system_type of this PosixAccount.

        The operating system type where this account applies.

        :return: The operating_system_type of this PosixAccount.
        :rtype: str
        """
        return self._operating_system_type

    @operating_system_type.setter
    def operating_system_type(self, operating_system_type):
        """Sets the operating_system_type of this PosixAccount.

        The operating system type where this account applies.

        :param operating_system_type: The operating_system_type of this PosixAccount.
        :type operating_system_type: str
        """
        allowed_values = ["OPERATING_SYSTEM_TYPE_UNSPECIFIED", "LINUX", "WINDOWS"]  # noqa: E501
        if operating_system_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operating_system_type` ({0}), must be one of {1}"
                .format(operating_system_type, allowed_values)
            )

        self._operating_system_type = operating_system_type

    @property
    def primary(self):
        """Gets the primary of this PosixAccount.

        Only one POSIX account can be marked as primary.

        :return: The primary of this PosixAccount.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this PosixAccount.

        Only one POSIX account can be marked as primary.

        :param primary: The primary of this PosixAccount.
        :type primary: bool
        """

        self._primary = primary

    @property
    def shell(self):
        """Gets the shell of this PosixAccount.

        The path to the logic shell for this account.

        :return: The shell of this PosixAccount.
        :rtype: str
        """
        return self._shell

    @shell.setter
    def shell(self, shell):
        """Sets the shell of this PosixAccount.

        The path to the logic shell for this account.

        :param shell: The shell of this PosixAccount.
        :type shell: str
        """

        self._shell = shell

    @property
    def system_id(self):
        """Gets the system_id of this PosixAccount.

        System identifier for which account the username or uid applies to. By default, the empty value is used.

        :return: The system_id of this PosixAccount.
        :rtype: str
        """
        return self._system_id

    @system_id.setter
    def system_id(self, system_id):
        """Sets the system_id of this PosixAccount.

        System identifier for which account the username or uid applies to. By default, the empty value is used.

        :param system_id: The system_id of this PosixAccount.
        :type system_id: str
        """

        self._system_id = system_id

    @property
    def uid(self):
        """Gets the uid of this PosixAccount.

        The user ID.

        :return: The uid of this PosixAccount.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PosixAccount.

        The user ID.

        :param uid: The uid of this PosixAccount.
        :type uid: str
        """

        self._uid = uid

    @property
    def username(self):
        """Gets the username of this PosixAccount.

        The username of the POSIX account.

        :return: The username of this PosixAccount.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PosixAccount.

        The username of the POSIX account.

        :param username: The username of this PosixAccount.
        :type username: str
        """

        self._username = username
