/*
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The SSH public key information associated with a Google account.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:29.965616-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SshPublicKey {
  public static final String SERIALIZED_NAME_EXPIRATION_TIME_USEC = "expirationTimeUsec";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_TIME_USEC)
  private String expirationTimeUsec;

  public static final String SERIALIZED_NAME_FINGERPRINT = "fingerprint";
  @SerializedName(SERIALIZED_NAME_FINGERPRINT)
  private String fingerprint;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public SshPublicKey() {
  }

  public SshPublicKey(
     String fingerprint, 
     String name
  ) {
    this();
    this.fingerprint = fingerprint;
    this.name = name;
  }

  public SshPublicKey expirationTimeUsec(String expirationTimeUsec) {
    this.expirationTimeUsec = expirationTimeUsec;
    return this;
  }

  /**
   * An expiration time in microseconds since epoch.
   * @return expirationTimeUsec
   */
  @javax.annotation.Nullable
  public String getExpirationTimeUsec() {
    return expirationTimeUsec;
  }

  public void setExpirationTimeUsec(String expirationTimeUsec) {
    this.expirationTimeUsec = expirationTimeUsec;
  }


  /**
   * Output only. The SHA-256 fingerprint of the SSH public key.
   * @return fingerprint
   */
  @javax.annotation.Nullable
  public String getFingerprint() {
    return fingerprint;
  }



  public SshPublicKey key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Public key text in SSH format, defined by RFC4253 section 6.6.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  /**
   * Output only. The canonical resource name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SshPublicKey sshPublicKey = (SshPublicKey) o;
    return Objects.equals(this.expirationTimeUsec, sshPublicKey.expirationTimeUsec) &&
        Objects.equals(this.fingerprint, sshPublicKey.fingerprint) &&
        Objects.equals(this.key, sshPublicKey.key) &&
        Objects.equals(this.name, sshPublicKey.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expirationTimeUsec, fingerprint, key, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SshPublicKey {\n");
    sb.append("    expirationTimeUsec: ").append(toIndentedString(expirationTimeUsec)).append("\n");
    sb.append("    fingerprint: ").append(toIndentedString(fingerprint)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("expirationTimeUsec");
    openapiFields.add("fingerprint");
    openapiFields.add("key");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SshPublicKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SshPublicKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SshPublicKey is not found in the empty JSON string", SshPublicKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SshPublicKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SshPublicKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("expirationTimeUsec") != null && !jsonObj.get("expirationTimeUsec").isJsonNull()) && !jsonObj.get("expirationTimeUsec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expirationTimeUsec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expirationTimeUsec").toString()));
      }
      if ((jsonObj.get("fingerprint") != null && !jsonObj.get("fingerprint").isJsonNull()) && !jsonObj.get("fingerprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fingerprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fingerprint").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SshPublicKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SshPublicKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SshPublicKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SshPublicKey.class));

       return (TypeAdapter<T>) new TypeAdapter<SshPublicKey>() {
           @Override
           public void write(JsonWriter out, SshPublicKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SshPublicKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SshPublicKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SshPublicKey
   * @throws IOException if the JSON string is invalid with respect to SshPublicKey
   */
  public static SshPublicKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SshPublicKey.class);
  }

  /**
   * Convert an instance of SshPublicKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

