/*
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ImportSshPublicKeyResponse;
import org.openapitools.client.model.LoginProfile;
import org.openapitools.client.model.SshPublicKey;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Retrieves the profile information used for logging in to a virtual machine on Google Compute Engine.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osloginUsersGetLoginProfileTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String projectId = null;
        String systemId = null;
        LoginProfile response = api.osloginUsersGetLoginProfile(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, projectId, systemId);
        // TODO: test validations
    }

    /**
     * Adds an SSH public key and returns the profile information. Default POSIX account information is set when no username and UID exist as part of the login profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osloginUsersImportSshPublicKeyTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String projectId = null;
        List<String> regions = null;
        SshPublicKey sshPublicKey = null;
        ImportSshPublicKeyResponse response = api.osloginUsersImportSshPublicKey(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, projectId, regions, sshPublicKey);
        // TODO: test validations
    }

    /**
     * Create an SSH public key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osloginUsersSshPublicKeysCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SshPublicKey sshPublicKey = null;
        SshPublicKey response = api.osloginUsersSshPublicKeysCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sshPublicKey);
        // TODO: test validations
    }

    /**
     * Deletes an SSH public key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osloginUsersSshPublicKeysDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.osloginUsersSshPublicKeysDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves an SSH public key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osloginUsersSshPublicKeysGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SshPublicKey response = api.osloginUsersSshPublicKeysGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates an SSH public key and returns the profile information. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void osloginUsersSshPublicKeysPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        SshPublicKey sshPublicKey = null;
        SshPublicKey response = api.osloginUsersSshPublicKeysPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, sshPublicKey);
        // TODO: test validations
    }

}
