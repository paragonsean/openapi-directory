/**
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPosixAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPosixAccount::OAIPosixAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPosixAccount::OAIPosixAccount() {
    this->initializeModel();
}

OAIPosixAccount::~OAIPosixAccount() {}

void OAIPosixAccount::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_gecos_isSet = false;
    m_gecos_isValid = false;

    m_gid_isSet = false;
    m_gid_isValid = false;

    m_home_directory_isSet = false;
    m_home_directory_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operating_system_type_isSet = false;
    m_operating_system_type_isValid = false;

    m_primary_isSet = false;
    m_primary_isValid = false;

    m_shell_isSet = false;
    m_shell_isValid = false;

    m_system_id_isSet = false;
    m_system_id_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIPosixAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPosixAccount::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_gecos_isValid = ::OpenAPI::fromJsonValue(m_gecos, json[QString("gecos")]);
    m_gecos_isSet = !json[QString("gecos")].isNull() && m_gecos_isValid;

    m_gid_isValid = ::OpenAPI::fromJsonValue(m_gid, json[QString("gid")]);
    m_gid_isSet = !json[QString("gid")].isNull() && m_gid_isValid;

    m_home_directory_isValid = ::OpenAPI::fromJsonValue(m_home_directory, json[QString("homeDirectory")]);
    m_home_directory_isSet = !json[QString("homeDirectory")].isNull() && m_home_directory_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operating_system_type_isValid = ::OpenAPI::fromJsonValue(m_operating_system_type, json[QString("operatingSystemType")]);
    m_operating_system_type_isSet = !json[QString("operatingSystemType")].isNull() && m_operating_system_type_isValid;

    m_primary_isValid = ::OpenAPI::fromJsonValue(m_primary, json[QString("primary")]);
    m_primary_isSet = !json[QString("primary")].isNull() && m_primary_isValid;

    m_shell_isValid = ::OpenAPI::fromJsonValue(m_shell, json[QString("shell")]);
    m_shell_isSet = !json[QString("shell")].isNull() && m_shell_isValid;

    m_system_id_isValid = ::OpenAPI::fromJsonValue(m_system_id, json[QString("systemId")]);
    m_system_id_isSet = !json[QString("systemId")].isNull() && m_system_id_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIPosixAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPosixAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_gecos_isSet) {
        obj.insert(QString("gecos"), ::OpenAPI::toJsonValue(m_gecos));
    }
    if (m_gid_isSet) {
        obj.insert(QString("gid"), ::OpenAPI::toJsonValue(m_gid));
    }
    if (m_home_directory_isSet) {
        obj.insert(QString("homeDirectory"), ::OpenAPI::toJsonValue(m_home_directory));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operating_system_type_isSet) {
        obj.insert(QString("operatingSystemType"), ::OpenAPI::toJsonValue(m_operating_system_type));
    }
    if (m_primary_isSet) {
        obj.insert(QString("primary"), ::OpenAPI::toJsonValue(m_primary));
    }
    if (m_shell_isSet) {
        obj.insert(QString("shell"), ::OpenAPI::toJsonValue(m_shell));
    }
    if (m_system_id_isSet) {
        obj.insert(QString("systemId"), ::OpenAPI::toJsonValue(m_system_id));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIPosixAccount::getAccountId() const {
    return m_account_id;
}
void OAIPosixAccount::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIPosixAccount::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIPosixAccount::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAIPosixAccount::getGecos() const {
    return m_gecos;
}
void OAIPosixAccount::setGecos(const QString &gecos) {
    m_gecos = gecos;
    m_gecos_isSet = true;
}

bool OAIPosixAccount::is_gecos_Set() const{
    return m_gecos_isSet;
}

bool OAIPosixAccount::is_gecos_Valid() const{
    return m_gecos_isValid;
}

QString OAIPosixAccount::getGid() const {
    return m_gid;
}
void OAIPosixAccount::setGid(const QString &gid) {
    m_gid = gid;
    m_gid_isSet = true;
}

bool OAIPosixAccount::is_gid_Set() const{
    return m_gid_isSet;
}

bool OAIPosixAccount::is_gid_Valid() const{
    return m_gid_isValid;
}

QString OAIPosixAccount::getHomeDirectory() const {
    return m_home_directory;
}
void OAIPosixAccount::setHomeDirectory(const QString &home_directory) {
    m_home_directory = home_directory;
    m_home_directory_isSet = true;
}

bool OAIPosixAccount::is_home_directory_Set() const{
    return m_home_directory_isSet;
}

bool OAIPosixAccount::is_home_directory_Valid() const{
    return m_home_directory_isValid;
}

QString OAIPosixAccount::getName() const {
    return m_name;
}
void OAIPosixAccount::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPosixAccount::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPosixAccount::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPosixAccount::getOperatingSystemType() const {
    return m_operating_system_type;
}
void OAIPosixAccount::setOperatingSystemType(const QString &operating_system_type) {
    m_operating_system_type = operating_system_type;
    m_operating_system_type_isSet = true;
}

bool OAIPosixAccount::is_operating_system_type_Set() const{
    return m_operating_system_type_isSet;
}

bool OAIPosixAccount::is_operating_system_type_Valid() const{
    return m_operating_system_type_isValid;
}

bool OAIPosixAccount::isPrimary() const {
    return m_primary;
}
void OAIPosixAccount::setPrimary(const bool &primary) {
    m_primary = primary;
    m_primary_isSet = true;
}

bool OAIPosixAccount::is_primary_Set() const{
    return m_primary_isSet;
}

bool OAIPosixAccount::is_primary_Valid() const{
    return m_primary_isValid;
}

QString OAIPosixAccount::getShell() const {
    return m_shell;
}
void OAIPosixAccount::setShell(const QString &shell) {
    m_shell = shell;
    m_shell_isSet = true;
}

bool OAIPosixAccount::is_shell_Set() const{
    return m_shell_isSet;
}

bool OAIPosixAccount::is_shell_Valid() const{
    return m_shell_isValid;
}

QString OAIPosixAccount::getSystemId() const {
    return m_system_id;
}
void OAIPosixAccount::setSystemId(const QString &system_id) {
    m_system_id = system_id;
    m_system_id_isSet = true;
}

bool OAIPosixAccount::is_system_id_Set() const{
    return m_system_id_isSet;
}

bool OAIPosixAccount::is_system_id_Valid() const{
    return m_system_id_isValid;
}

QString OAIPosixAccount::getUid() const {
    return m_uid;
}
void OAIPosixAccount::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIPosixAccount::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIPosixAccount::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIPosixAccount::getUsername() const {
    return m_username;
}
void OAIPosixAccount::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPosixAccount::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPosixAccount::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIPosixAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gecos_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_directory_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operating_system_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shell_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_system_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPosixAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
