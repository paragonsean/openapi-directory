# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.universal_two_factor import UniversalTwoFactor
from openapi_server.models.web_authn import WebAuthn
from openapi_server import util


class SecurityKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, device_nickname: str=None, private_key: str=None, public_key: str=None, universal_two_factor: UniversalTwoFactor=None, web_authn: WebAuthn=None):
        """SecurityKey - a model defined in OpenAPI

        :param device_nickname: The device_nickname of this SecurityKey.
        :param private_key: The private_key of this SecurityKey.
        :param public_key: The public_key of this SecurityKey.
        :param universal_two_factor: The universal_two_factor of this SecurityKey.
        :param web_authn: The web_authn of this SecurityKey.
        """
        self.openapi_types = {
            'device_nickname': str,
            'private_key': str,
            'public_key': str,
            'universal_two_factor': UniversalTwoFactor,
            'web_authn': WebAuthn
        }

        self.attribute_map = {
            'device_nickname': 'deviceNickname',
            'private_key': 'privateKey',
            'public_key': 'publicKey',
            'universal_two_factor': 'universalTwoFactor',
            'web_authn': 'webAuthn'
        }

        self._device_nickname = device_nickname
        self._private_key = private_key
        self._public_key = public_key
        self._universal_two_factor = universal_two_factor
        self._web_authn = web_authn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurityKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurityKey of this SecurityKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def device_nickname(self):
        """Gets the device_nickname of this SecurityKey.

        The security key nickname explicitly set by the user.

        :return: The device_nickname of this SecurityKey.
        :rtype: str
        """
        return self._device_nickname

    @device_nickname.setter
    def device_nickname(self, device_nickname):
        """Sets the device_nickname of this SecurityKey.

        The security key nickname explicitly set by the user.

        :param device_nickname: The device_nickname of this SecurityKey.
        :type device_nickname: str
        """

        self._device_nickname = device_nickname

    @property
    def private_key(self):
        """Gets the private_key of this SecurityKey.

        Hardware-backed private key text in SSH format.

        :return: The private_key of this SecurityKey.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this SecurityKey.

        Hardware-backed private key text in SSH format.

        :param private_key: The private_key of this SecurityKey.
        :type private_key: str
        """

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this SecurityKey.

        Public key text in SSH format, defined by [RFC4253](\"https://www.ietf.org/rfc/rfc4253.txt\") section 6.6.

        :return: The public_key of this SecurityKey.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this SecurityKey.

        Public key text in SSH format, defined by [RFC4253](\"https://www.ietf.org/rfc/rfc4253.txt\") section 6.6.

        :param public_key: The public_key of this SecurityKey.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def universal_two_factor(self):
        """Gets the universal_two_factor of this SecurityKey.


        :return: The universal_two_factor of this SecurityKey.
        :rtype: UniversalTwoFactor
        """
        return self._universal_two_factor

    @universal_two_factor.setter
    def universal_two_factor(self, universal_two_factor):
        """Sets the universal_two_factor of this SecurityKey.


        :param universal_two_factor: The universal_two_factor of this SecurityKey.
        :type universal_two_factor: UniversalTwoFactor
        """

        self._universal_two_factor = universal_two_factor

    @property
    def web_authn(self):
        """Gets the web_authn of this SecurityKey.


        :return: The web_authn of this SecurityKey.
        :rtype: WebAuthn
        """
        return self._web_authn

    @web_authn.setter
    def web_authn(self, web_authn):
        """Sets the web_authn of this SecurityKey.


        :param web_authn: The web_authn of this SecurityKey.
        :type web_authn: WebAuthn
        """

        self._web_authn = web_authn
