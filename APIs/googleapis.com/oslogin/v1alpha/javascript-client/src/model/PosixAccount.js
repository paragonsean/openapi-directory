/**
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PosixAccount model module.
 * @module model/PosixAccount
 * @version v1alpha
 */
class PosixAccount {
    /**
     * Constructs a new <code>PosixAccount</code>.
     * The POSIX account information associated with a Google account.
     * @alias module:model/PosixAccount
     */
    constructor() { 
        
        PosixAccount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PosixAccount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PosixAccount} obj Optional instance to populate.
     * @return {module:model/PosixAccount} The populated <code>PosixAccount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PosixAccount();

            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('gecos')) {
                obj['gecos'] = ApiClient.convertToType(data['gecos'], 'String');
            }
            if (data.hasOwnProperty('gid')) {
                obj['gid'] = ApiClient.convertToType(data['gid'], 'String');
            }
            if (data.hasOwnProperty('homeDirectory')) {
                obj['homeDirectory'] = ApiClient.convertToType(data['homeDirectory'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operatingSystemType')) {
                obj['operatingSystemType'] = ApiClient.convertToType(data['operatingSystemType'], 'String');
            }
            if (data.hasOwnProperty('primary')) {
                obj['primary'] = ApiClient.convertToType(data['primary'], 'Boolean');
            }
            if (data.hasOwnProperty('shell')) {
                obj['shell'] = ApiClient.convertToType(data['shell'], 'String');
            }
            if (data.hasOwnProperty('systemId')) {
                obj['systemId'] = ApiClient.convertToType(data['systemId'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PosixAccount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PosixAccount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['gecos'] && !(typeof data['gecos'] === 'string' || data['gecos'] instanceof String)) {
            throw new Error("Expected the field `gecos` to be a primitive type in the JSON string but got " + data['gecos']);
        }
        // ensure the json data is a string
        if (data['gid'] && !(typeof data['gid'] === 'string' || data['gid'] instanceof String)) {
            throw new Error("Expected the field `gid` to be a primitive type in the JSON string but got " + data['gid']);
        }
        // ensure the json data is a string
        if (data['homeDirectory'] && !(typeof data['homeDirectory'] === 'string' || data['homeDirectory'] instanceof String)) {
            throw new Error("Expected the field `homeDirectory` to be a primitive type in the JSON string but got " + data['homeDirectory']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operatingSystemType'] && !(typeof data['operatingSystemType'] === 'string' || data['operatingSystemType'] instanceof String)) {
            throw new Error("Expected the field `operatingSystemType` to be a primitive type in the JSON string but got " + data['operatingSystemType']);
        }
        // ensure the json data is a string
        if (data['shell'] && !(typeof data['shell'] === 'string' || data['shell'] instanceof String)) {
            throw new Error("Expected the field `shell` to be a primitive type in the JSON string but got " + data['shell']);
        }
        // ensure the json data is a string
        if (data['systemId'] && !(typeof data['systemId'] === 'string' || data['systemId'] instanceof String)) {
            throw new Error("Expected the field `systemId` to be a primitive type in the JSON string but got " + data['systemId']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Output only. A POSIX account identifier.
 * @member {String} accountId
 */
PosixAccount.prototype['accountId'] = undefined;

/**
 * The GECOS (user information) entry for this account.
 * @member {String} gecos
 */
PosixAccount.prototype['gecos'] = undefined;

/**
 * The default group ID.
 * @member {String} gid
 */
PosixAccount.prototype['gid'] = undefined;

/**
 * The path to the home directory for this account.
 * @member {String} homeDirectory
 */
PosixAccount.prototype['homeDirectory'] = undefined;

/**
 * Output only. The canonical resource name.
 * @member {String} name
 */
PosixAccount.prototype['name'] = undefined;

/**
 * The operating system type where this account applies.
 * @member {module:model/PosixAccount.OperatingSystemTypeEnum} operatingSystemType
 */
PosixAccount.prototype['operatingSystemType'] = undefined;

/**
 * Only one POSIX account can be marked as primary.
 * @member {Boolean} primary
 */
PosixAccount.prototype['primary'] = undefined;

/**
 * The path to the logic shell for this account.
 * @member {String} shell
 */
PosixAccount.prototype['shell'] = undefined;

/**
 * System identifier for which account the username or uid applies to. By default, the empty value is used.
 * @member {String} systemId
 */
PosixAccount.prototype['systemId'] = undefined;

/**
 * The user ID.
 * @member {String} uid
 */
PosixAccount.prototype['uid'] = undefined;

/**
 * The username of the POSIX account.
 * @member {String} username
 */
PosixAccount.prototype['username'] = undefined;





/**
 * Allowed values for the <code>operatingSystemType</code> property.
 * @enum {String}
 * @readonly
 */
PosixAccount['OperatingSystemTypeEnum'] = {

    /**
     * value: "OPERATING_SYSTEM_TYPE_UNSPECIFIED"
     * @const
     */
    "OPERATING_SYSTEM_TYPE_UNSPECIFIED": "OPERATING_SYSTEM_TYPE_UNSPECIFIED",

    /**
     * value: "LINUX"
     * @const
     */
    "LINUX": "LINUX",

    /**
     * value: "WINDOWS"
     * @const
     */
    "WINDOWS": "WINDOWS"
};



export default PosixAccount;

