/**
 * Cloud OS Login API
 * You can use OS Login to manage access to your VM instances using IAM roles.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UniversalTwoFactor from './UniversalTwoFactor';
import WebAuthn from './WebAuthn';

/**
 * The SecurityKey model module.
 * @module model/SecurityKey
 * @version v1alpha
 */
class SecurityKey {
    /**
     * Constructs a new <code>SecurityKey</code>.
     * The credential information for a Google registered security key.
     * @alias module:model/SecurityKey
     */
    constructor() { 
        
        SecurityKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SecurityKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SecurityKey} obj Optional instance to populate.
     * @return {module:model/SecurityKey} The populated <code>SecurityKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SecurityKey();

            if (data.hasOwnProperty('deviceNickname')) {
                obj['deviceNickname'] = ApiClient.convertToType(data['deviceNickname'], 'String');
            }
            if (data.hasOwnProperty('privateKey')) {
                obj['privateKey'] = ApiClient.convertToType(data['privateKey'], 'String');
            }
            if (data.hasOwnProperty('publicKey')) {
                obj['publicKey'] = ApiClient.convertToType(data['publicKey'], 'String');
            }
            if (data.hasOwnProperty('universalTwoFactor')) {
                obj['universalTwoFactor'] = UniversalTwoFactor.constructFromObject(data['universalTwoFactor']);
            }
            if (data.hasOwnProperty('webAuthn')) {
                obj['webAuthn'] = WebAuthn.constructFromObject(data['webAuthn']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SecurityKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SecurityKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['deviceNickname'] && !(typeof data['deviceNickname'] === 'string' || data['deviceNickname'] instanceof String)) {
            throw new Error("Expected the field `deviceNickname` to be a primitive type in the JSON string but got " + data['deviceNickname']);
        }
        // ensure the json data is a string
        if (data['privateKey'] && !(typeof data['privateKey'] === 'string' || data['privateKey'] instanceof String)) {
            throw new Error("Expected the field `privateKey` to be a primitive type in the JSON string but got " + data['privateKey']);
        }
        // ensure the json data is a string
        if (data['publicKey'] && !(typeof data['publicKey'] === 'string' || data['publicKey'] instanceof String)) {
            throw new Error("Expected the field `publicKey` to be a primitive type in the JSON string but got " + data['publicKey']);
        }
        // validate the optional field `universalTwoFactor`
        if (data['universalTwoFactor']) { // data not null
          UniversalTwoFactor.validateJSON(data['universalTwoFactor']);
        }
        // validate the optional field `webAuthn`
        if (data['webAuthn']) { // data not null
          WebAuthn.validateJSON(data['webAuthn']);
        }

        return true;
    }


}



/**
 * The security key nickname explicitly set by the user.
 * @member {String} deviceNickname
 */
SecurityKey.prototype['deviceNickname'] = undefined;

/**
 * Hardware-backed private key text in SSH format.
 * @member {String} privateKey
 */
SecurityKey.prototype['privateKey'] = undefined;

/**
 * Public key text in SSH format, defined by [RFC4253](\"https://www.ietf.org/rfc/rfc4253.txt\") section 6.6.
 * @member {String} publicKey
 */
SecurityKey.prototype['publicKey'] = undefined;

/**
 * @member {module:model/UniversalTwoFactor} universalTwoFactor
 */
SecurityKey.prototype['universalTwoFactor'] = undefined;

/**
 * @member {module:model/WebAuthn} webAuthn
 */
SecurityKey.prototype['webAuthn'] = undefined;






export default SecurityKey;

