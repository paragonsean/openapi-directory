/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p1beta1Feature from './GoogleCloudVisionV1p1beta1Feature';
import GoogleCloudVisionV1p1beta1ImageContext from './GoogleCloudVisionV1p1beta1ImageContext';
import GoogleCloudVisionV1p1beta1InputConfig from './GoogleCloudVisionV1p1beta1InputConfig';
import GoogleCloudVisionV1p1beta1OutputConfig from './GoogleCloudVisionV1p1beta1OutputConfig';

/**
 * The GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest model module.
 * @module model/GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest
 * @version v1p1beta1
 */
class GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest</code>.
     * An offline file annotation request.
     * @alias module:model/GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest
     */
    constructor() { 
        
        GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest} The populated <code>GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest();

            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [GoogleCloudVisionV1p1beta1Feature]);
            }
            if (data.hasOwnProperty('imageContext')) {
                obj['imageContext'] = GoogleCloudVisionV1p1beta1ImageContext.constructFromObject(data['imageContext']);
            }
            if (data.hasOwnProperty('inputConfig')) {
                obj['inputConfig'] = GoogleCloudVisionV1p1beta1InputConfig.constructFromObject(data['inputConfig']);
            }
            if (data.hasOwnProperty('outputConfig')) {
                obj['outputConfig'] = GoogleCloudVisionV1p1beta1OutputConfig.constructFromObject(data['outputConfig']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest</code>.
     */
    static validateJSON(data) {
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                GoogleCloudVisionV1p1beta1Feature.validateJSON(item);
            };
        }
        // validate the optional field `imageContext`
        if (data['imageContext']) { // data not null
          GoogleCloudVisionV1p1beta1ImageContext.validateJSON(data['imageContext']);
        }
        // validate the optional field `inputConfig`
        if (data['inputConfig']) { // data not null
          GoogleCloudVisionV1p1beta1InputConfig.validateJSON(data['inputConfig']);
        }
        // validate the optional field `outputConfig`
        if (data['outputConfig']) { // data not null
          GoogleCloudVisionV1p1beta1OutputConfig.validateJSON(data['outputConfig']);
        }

        return true;
    }


}



/**
 * Required. Requested features.
 * @member {Array.<module:model/GoogleCloudVisionV1p1beta1Feature>} features
 */
GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest.prototype['features'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p1beta1ImageContext} imageContext
 */
GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest.prototype['imageContext'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p1beta1InputConfig} inputConfig
 */
GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest.prototype['inputConfig'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p1beta1OutputConfig} outputConfig
 */
GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest.prototype['outputConfig'] = undefined;






export default GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest;

