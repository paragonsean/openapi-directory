/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoundingPoly from './BoundingPoly';
import Landmark from './Landmark';

/**
 * The FaceAnnotation model module.
 * @module model/FaceAnnotation
 * @version v1p1beta1
 */
class FaceAnnotation {
    /**
     * Constructs a new <code>FaceAnnotation</code>.
     * A face annotation object contains the results of face detection.
     * @alias module:model/FaceAnnotation
     */
    constructor() { 
        
        FaceAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FaceAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FaceAnnotation} obj Optional instance to populate.
     * @return {module:model/FaceAnnotation} The populated <code>FaceAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FaceAnnotation();

            if (data.hasOwnProperty('angerLikelihood')) {
                obj['angerLikelihood'] = ApiClient.convertToType(data['angerLikelihood'], 'String');
            }
            if (data.hasOwnProperty('blurredLikelihood')) {
                obj['blurredLikelihood'] = ApiClient.convertToType(data['blurredLikelihood'], 'String');
            }
            if (data.hasOwnProperty('boundingPoly')) {
                obj['boundingPoly'] = BoundingPoly.constructFromObject(data['boundingPoly']);
            }
            if (data.hasOwnProperty('detectionConfidence')) {
                obj['detectionConfidence'] = ApiClient.convertToType(data['detectionConfidence'], 'Number');
            }
            if (data.hasOwnProperty('fdBoundingPoly')) {
                obj['fdBoundingPoly'] = BoundingPoly.constructFromObject(data['fdBoundingPoly']);
            }
            if (data.hasOwnProperty('headwearLikelihood')) {
                obj['headwearLikelihood'] = ApiClient.convertToType(data['headwearLikelihood'], 'String');
            }
            if (data.hasOwnProperty('joyLikelihood')) {
                obj['joyLikelihood'] = ApiClient.convertToType(data['joyLikelihood'], 'String');
            }
            if (data.hasOwnProperty('landmarkingConfidence')) {
                obj['landmarkingConfidence'] = ApiClient.convertToType(data['landmarkingConfidence'], 'Number');
            }
            if (data.hasOwnProperty('landmarks')) {
                obj['landmarks'] = ApiClient.convertToType(data['landmarks'], [Landmark]);
            }
            if (data.hasOwnProperty('panAngle')) {
                obj['panAngle'] = ApiClient.convertToType(data['panAngle'], 'Number');
            }
            if (data.hasOwnProperty('rollAngle')) {
                obj['rollAngle'] = ApiClient.convertToType(data['rollAngle'], 'Number');
            }
            if (data.hasOwnProperty('sorrowLikelihood')) {
                obj['sorrowLikelihood'] = ApiClient.convertToType(data['sorrowLikelihood'], 'String');
            }
            if (data.hasOwnProperty('surpriseLikelihood')) {
                obj['surpriseLikelihood'] = ApiClient.convertToType(data['surpriseLikelihood'], 'String');
            }
            if (data.hasOwnProperty('tiltAngle')) {
                obj['tiltAngle'] = ApiClient.convertToType(data['tiltAngle'], 'Number');
            }
            if (data.hasOwnProperty('underExposedLikelihood')) {
                obj['underExposedLikelihood'] = ApiClient.convertToType(data['underExposedLikelihood'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FaceAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FaceAnnotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['angerLikelihood'] && !(typeof data['angerLikelihood'] === 'string' || data['angerLikelihood'] instanceof String)) {
            throw new Error("Expected the field `angerLikelihood` to be a primitive type in the JSON string but got " + data['angerLikelihood']);
        }
        // ensure the json data is a string
        if (data['blurredLikelihood'] && !(typeof data['blurredLikelihood'] === 'string' || data['blurredLikelihood'] instanceof String)) {
            throw new Error("Expected the field `blurredLikelihood` to be a primitive type in the JSON string but got " + data['blurredLikelihood']);
        }
        // validate the optional field `boundingPoly`
        if (data['boundingPoly']) { // data not null
          BoundingPoly.validateJSON(data['boundingPoly']);
        }
        // validate the optional field `fdBoundingPoly`
        if (data['fdBoundingPoly']) { // data not null
          BoundingPoly.validateJSON(data['fdBoundingPoly']);
        }
        // ensure the json data is a string
        if (data['headwearLikelihood'] && !(typeof data['headwearLikelihood'] === 'string' || data['headwearLikelihood'] instanceof String)) {
            throw new Error("Expected the field `headwearLikelihood` to be a primitive type in the JSON string but got " + data['headwearLikelihood']);
        }
        // ensure the json data is a string
        if (data['joyLikelihood'] && !(typeof data['joyLikelihood'] === 'string' || data['joyLikelihood'] instanceof String)) {
            throw new Error("Expected the field `joyLikelihood` to be a primitive type in the JSON string but got " + data['joyLikelihood']);
        }
        if (data['landmarks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['landmarks'])) {
                throw new Error("Expected the field `landmarks` to be an array in the JSON data but got " + data['landmarks']);
            }
            // validate the optional field `landmarks` (array)
            for (const item of data['landmarks']) {
                Landmark.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sorrowLikelihood'] && !(typeof data['sorrowLikelihood'] === 'string' || data['sorrowLikelihood'] instanceof String)) {
            throw new Error("Expected the field `sorrowLikelihood` to be a primitive type in the JSON string but got " + data['sorrowLikelihood']);
        }
        // ensure the json data is a string
        if (data['surpriseLikelihood'] && !(typeof data['surpriseLikelihood'] === 'string' || data['surpriseLikelihood'] instanceof String)) {
            throw new Error("Expected the field `surpriseLikelihood` to be a primitive type in the JSON string but got " + data['surpriseLikelihood']);
        }
        // ensure the json data is a string
        if (data['underExposedLikelihood'] && !(typeof data['underExposedLikelihood'] === 'string' || data['underExposedLikelihood'] instanceof String)) {
            throw new Error("Expected the field `underExposedLikelihood` to be a primitive type in the JSON string but got " + data['underExposedLikelihood']);
        }

        return true;
    }


}



/**
 * Anger likelihood.
 * @member {module:model/FaceAnnotation.AngerLikelihoodEnum} angerLikelihood
 */
FaceAnnotation.prototype['angerLikelihood'] = undefined;

/**
 * Blurred likelihood.
 * @member {module:model/FaceAnnotation.BlurredLikelihoodEnum} blurredLikelihood
 */
FaceAnnotation.prototype['blurredLikelihood'] = undefined;

/**
 * @member {module:model/BoundingPoly} boundingPoly
 */
FaceAnnotation.prototype['boundingPoly'] = undefined;

/**
 * Detection confidence. Range [0, 1].
 * @member {Number} detectionConfidence
 */
FaceAnnotation.prototype['detectionConfidence'] = undefined;

/**
 * @member {module:model/BoundingPoly} fdBoundingPoly
 */
FaceAnnotation.prototype['fdBoundingPoly'] = undefined;

/**
 * Headwear likelihood.
 * @member {module:model/FaceAnnotation.HeadwearLikelihoodEnum} headwearLikelihood
 */
FaceAnnotation.prototype['headwearLikelihood'] = undefined;

/**
 * Joy likelihood.
 * @member {module:model/FaceAnnotation.JoyLikelihoodEnum} joyLikelihood
 */
FaceAnnotation.prototype['joyLikelihood'] = undefined;

/**
 * Face landmarking confidence. Range [0, 1].
 * @member {Number} landmarkingConfidence
 */
FaceAnnotation.prototype['landmarkingConfidence'] = undefined;

/**
 * Detected face landmarks.
 * @member {Array.<module:model/Landmark>} landmarks
 */
FaceAnnotation.prototype['landmarks'] = undefined;

/**
 * Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].
 * @member {Number} panAngle
 */
FaceAnnotation.prototype['panAngle'] = undefined;

/**
 * Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].
 * @member {Number} rollAngle
 */
FaceAnnotation.prototype['rollAngle'] = undefined;

/**
 * Sorrow likelihood.
 * @member {module:model/FaceAnnotation.SorrowLikelihoodEnum} sorrowLikelihood
 */
FaceAnnotation.prototype['sorrowLikelihood'] = undefined;

/**
 * Surprise likelihood.
 * @member {module:model/FaceAnnotation.SurpriseLikelihoodEnum} surpriseLikelihood
 */
FaceAnnotation.prototype['surpriseLikelihood'] = undefined;

/**
 * Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].
 * @member {Number} tiltAngle
 */
FaceAnnotation.prototype['tiltAngle'] = undefined;

/**
 * Under-exposed likelihood.
 * @member {module:model/FaceAnnotation.UnderExposedLikelihoodEnum} underExposedLikelihood
 */
FaceAnnotation.prototype['underExposedLikelihood'] = undefined;





/**
 * Allowed values for the <code>angerLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['AngerLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>blurredLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['BlurredLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>headwearLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['HeadwearLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>joyLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['JoyLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>sorrowLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['SorrowLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>surpriseLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['SurpriseLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>underExposedLikelihood</code> property.
 * @enum {String}
 * @readonly
 */
FaceAnnotation['UnderExposedLikelihoodEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};



export default FaceAnnotation;

