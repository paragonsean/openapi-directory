/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebEntity from './WebEntity';
import WebImage from './WebImage';
import WebLabel from './WebLabel';
import WebPage from './WebPage';

/**
 * The WebDetection model module.
 * @module model/WebDetection
 * @version v1p1beta1
 */
class WebDetection {
    /**
     * Constructs a new <code>WebDetection</code>.
     * Relevant information for the image from the Internet.
     * @alias module:model/WebDetection
     */
    constructor() { 
        
        WebDetection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebDetection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebDetection} obj Optional instance to populate.
     * @return {module:model/WebDetection} The populated <code>WebDetection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebDetection();

            if (data.hasOwnProperty('bestGuessLabels')) {
                obj['bestGuessLabels'] = ApiClient.convertToType(data['bestGuessLabels'], [WebLabel]);
            }
            if (data.hasOwnProperty('fullMatchingImages')) {
                obj['fullMatchingImages'] = ApiClient.convertToType(data['fullMatchingImages'], [WebImage]);
            }
            if (data.hasOwnProperty('pagesWithMatchingImages')) {
                obj['pagesWithMatchingImages'] = ApiClient.convertToType(data['pagesWithMatchingImages'], [WebPage]);
            }
            if (data.hasOwnProperty('partialMatchingImages')) {
                obj['partialMatchingImages'] = ApiClient.convertToType(data['partialMatchingImages'], [WebImage]);
            }
            if (data.hasOwnProperty('visuallySimilarImages')) {
                obj['visuallySimilarImages'] = ApiClient.convertToType(data['visuallySimilarImages'], [WebImage]);
            }
            if (data.hasOwnProperty('webEntities')) {
                obj['webEntities'] = ApiClient.convertToType(data['webEntities'], [WebEntity]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebDetection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebDetection</code>.
     */
    static validateJSON(data) {
        if (data['bestGuessLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bestGuessLabels'])) {
                throw new Error("Expected the field `bestGuessLabels` to be an array in the JSON data but got " + data['bestGuessLabels']);
            }
            // validate the optional field `bestGuessLabels` (array)
            for (const item of data['bestGuessLabels']) {
                WebLabel.validateJSON(item);
            };
        }
        if (data['fullMatchingImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fullMatchingImages'])) {
                throw new Error("Expected the field `fullMatchingImages` to be an array in the JSON data but got " + data['fullMatchingImages']);
            }
            // validate the optional field `fullMatchingImages` (array)
            for (const item of data['fullMatchingImages']) {
                WebImage.validateJSON(item);
            };
        }
        if (data['pagesWithMatchingImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pagesWithMatchingImages'])) {
                throw new Error("Expected the field `pagesWithMatchingImages` to be an array in the JSON data but got " + data['pagesWithMatchingImages']);
            }
            // validate the optional field `pagesWithMatchingImages` (array)
            for (const item of data['pagesWithMatchingImages']) {
                WebPage.validateJSON(item);
            };
        }
        if (data['partialMatchingImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partialMatchingImages'])) {
                throw new Error("Expected the field `partialMatchingImages` to be an array in the JSON data but got " + data['partialMatchingImages']);
            }
            // validate the optional field `partialMatchingImages` (array)
            for (const item of data['partialMatchingImages']) {
                WebImage.validateJSON(item);
            };
        }
        if (data['visuallySimilarImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['visuallySimilarImages'])) {
                throw new Error("Expected the field `visuallySimilarImages` to be an array in the JSON data but got " + data['visuallySimilarImages']);
            }
            // validate the optional field `visuallySimilarImages` (array)
            for (const item of data['visuallySimilarImages']) {
                WebImage.validateJSON(item);
            };
        }
        if (data['webEntities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['webEntities'])) {
                throw new Error("Expected the field `webEntities` to be an array in the JSON data but got " + data['webEntities']);
            }
            // validate the optional field `webEntities` (array)
            for (const item of data['webEntities']) {
                WebEntity.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The service's best guess as to the topic of the request image. Inferred from similar images on the open web.
 * @member {Array.<module:model/WebLabel>} bestGuessLabels
 */
WebDetection.prototype['bestGuessLabels'] = undefined;

/**
 * Fully matching images from the Internet. Can include resized copies of the query image.
 * @member {Array.<module:model/WebImage>} fullMatchingImages
 */
WebDetection.prototype['fullMatchingImages'] = undefined;

/**
 * Web pages containing the matching images from the Internet.
 * @member {Array.<module:model/WebPage>} pagesWithMatchingImages
 */
WebDetection.prototype['pagesWithMatchingImages'] = undefined;

/**
 * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.
 * @member {Array.<module:model/WebImage>} partialMatchingImages
 */
WebDetection.prototype['partialMatchingImages'] = undefined;

/**
 * The visually similar image results.
 * @member {Array.<module:model/WebImage>} visuallySimilarImages
 */
WebDetection.prototype['visuallySimilarImages'] = undefined;

/**
 * Deduced entities from similar images on the Internet.
 * @member {Array.<module:model/WebEntity>} webEntities
 */
WebDetection.prototype['webEntities'] = undefined;






export default WebDetection;

