/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p3beta1ProductKeyValue from './GoogleCloudVisionV1p3beta1ProductKeyValue';

/**
 * The GoogleCloudVisionV1p3beta1Product model module.
 * @module model/GoogleCloudVisionV1p3beta1Product
 * @version v1p1beta1
 */
class GoogleCloudVisionV1p3beta1Product {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p3beta1Product</code>.
     * A Product contains ReferenceImages.
     * @alias module:model/GoogleCloudVisionV1p3beta1Product
     */
    constructor() { 
        
        GoogleCloudVisionV1p3beta1Product.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p3beta1Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p3beta1Product} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p3beta1Product} The populated <code>GoogleCloudVisionV1p3beta1Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p3beta1Product();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('productCategory')) {
                obj['productCategory'] = ApiClient.convertToType(data['productCategory'], 'String');
            }
            if (data.hasOwnProperty('productLabels')) {
                obj['productLabels'] = ApiClient.convertToType(data['productLabels'], [GoogleCloudVisionV1p3beta1ProductKeyValue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p3beta1Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p3beta1Product</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['productCategory'] && !(typeof data['productCategory'] === 'string' || data['productCategory'] instanceof String)) {
            throw new Error("Expected the field `productCategory` to be a primitive type in the JSON string but got " + data['productCategory']);
        }
        if (data['productLabels']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['productLabels'])) {
                throw new Error("Expected the field `productLabels` to be an array in the JSON data but got " + data['productLabels']);
            }
            // validate the optional field `productLabels` (array)
            for (const item of data['productLabels']) {
                GoogleCloudVisionV1p3beta1ProductKeyValue.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * User-provided metadata to be stored with this product. Must be at most 4096 characters long.
 * @member {String} description
 */
GoogleCloudVisionV1p3beta1Product.prototype['description'] = undefined;

/**
 * The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.
 * @member {String} displayName
 */
GoogleCloudVisionV1p3beta1Product.prototype['displayName'] = undefined;

/**
 * The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.
 * @member {String} name
 */
GoogleCloudVisionV1p3beta1Product.prototype['name'] = undefined;

/**
 * Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.
 * @member {String} productCategory
 */
GoogleCloudVisionV1p3beta1Product.prototype['productCategory'] = undefined;

/**
 * Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1ProductKeyValue>} productLabels
 */
GoogleCloudVisionV1p3beta1Product.prototype['productLabels'] = undefined;






export default GoogleCloudVisionV1p3beta1Product;

