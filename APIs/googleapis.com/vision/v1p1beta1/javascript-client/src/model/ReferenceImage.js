/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoundingPoly from './BoundingPoly';

/**
 * The ReferenceImage model module.
 * @module model/ReferenceImage
 * @version v1p1beta1
 */
class ReferenceImage {
    /**
     * Constructs a new <code>ReferenceImage</code>.
     * A &#x60;ReferenceImage&#x60; represents a product image and its associated metadata, such as bounding boxes.
     * @alias module:model/ReferenceImage
     */
    constructor() { 
        
        ReferenceImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReferenceImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReferenceImage} obj Optional instance to populate.
     * @return {module:model/ReferenceImage} The populated <code>ReferenceImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReferenceImage();

            if (data.hasOwnProperty('boundingPolys')) {
                obj['boundingPolys'] = ApiClient.convertToType(data['boundingPolys'], [BoundingPoly]);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReferenceImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReferenceImage</code>.
     */
    static validateJSON(data) {
        if (data['boundingPolys']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['boundingPolys'])) {
                throw new Error("Expected the field `boundingPolys` to be an array in the JSON data but got " + data['boundingPolys']);
            }
            // validate the optional field `boundingPolys` (array)
            for (const item of data['boundingPolys']) {
                BoundingPoly.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
 * @member {Array.<module:model/BoundingPoly>} boundingPolys
 */
ReferenceImage.prototype['boundingPolys'] = undefined;

/**
 * The resource name of the reference image. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID`. This field is ignored when creating a reference image.
 * @member {String} name
 */
ReferenceImage.prototype['name'] = undefined;

/**
 * Required. The Google Cloud Storage URI of the reference image. The URI must start with `gs://`.
 * @member {String} uri
 */
ReferenceImage.prototype['uri'] = undefined;






export default ReferenceImage;

