/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p1beta1AnnotateFileRequest from './GoogleCloudVisionV1p1beta1AnnotateFileRequest';

/**
 * The GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest model module.
 * @module model/GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest
 * @version v1p1beta1
 */
class GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest</code>.
     * A list of requests to annotate files using the BatchAnnotateFiles API.
     * @alias module:model/GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest
     */
    constructor() { 
        
        GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest} The populated <code>GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest();

            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = ApiClient.convertToType(data['parent'], 'String');
            }
            if (data.hasOwnProperty('requests')) {
                obj['requests'] = ApiClient.convertToType(data['requests'], [GoogleCloudVisionV1p1beta1AnnotateFileRequest]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['parent'] && !(typeof data['parent'] === 'string' || data['parent'] instanceof String)) {
            throw new Error("Expected the field `parent` to be a primitive type in the JSON string but got " + data['parent']);
        }
        if (data['requests']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requests'])) {
                throw new Error("Expected the field `requests` to be an array in the JSON data but got " + data['requests']);
            }
            // validate the optional field `requests` (array)
            for (const item of data['requests']) {
                GoogleCloudVisionV1p1beta1AnnotateFileRequest.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.
 * @member {Object.<String, String>} labels
 */
GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest.prototype['labels'] = undefined;

/**
 * Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.
 * @member {String} parent
 */
GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest.prototype['parent'] = undefined;

/**
 * Required. The list of file annotation requests. Right now we support only one AnnotateFileRequest in BatchAnnotateFilesRequest.
 * @member {Array.<module:model/GoogleCloudVisionV1p1beta1AnnotateFileRequest>} requests
 */
GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest.prototype['requests'] = undefined;






export default GoogleCloudVisionV1p1beta1BatchAnnotateFilesRequest;

