/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p1beta1BoundingPoly from './GoogleCloudVisionV1p1beta1BoundingPoly';

/**
 * The GoogleCloudVisionV1p1beta1ProductSearchParams model module.
 * @module model/GoogleCloudVisionV1p1beta1ProductSearchParams
 * @version v1p1beta1
 */
class GoogleCloudVisionV1p1beta1ProductSearchParams {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p1beta1ProductSearchParams</code>.
     * Parameters for a product search request.
     * @alias module:model/GoogleCloudVisionV1p1beta1ProductSearchParams
     */
    constructor() { 
        
        GoogleCloudVisionV1p1beta1ProductSearchParams.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p1beta1ProductSearchParams</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p1beta1ProductSearchParams} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p1beta1ProductSearchParams} The populated <code>GoogleCloudVisionV1p1beta1ProductSearchParams</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p1beta1ProductSearchParams();

            if (data.hasOwnProperty('boundingPoly')) {
                obj['boundingPoly'] = GoogleCloudVisionV1p1beta1BoundingPoly.constructFromObject(data['boundingPoly']);
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('productCategories')) {
                obj['productCategories'] = ApiClient.convertToType(data['productCategories'], ['String']);
            }
            if (data.hasOwnProperty('productSet')) {
                obj['productSet'] = ApiClient.convertToType(data['productSet'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p1beta1ProductSearchParams</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p1beta1ProductSearchParams</code>.
     */
    static validateJSON(data) {
        // validate the optional field `boundingPoly`
        if (data['boundingPoly']) { // data not null
          GoogleCloudVisionV1p1beta1BoundingPoly.validateJSON(data['boundingPoly']);
        }
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['productCategories'])) {
            throw new Error("Expected the field `productCategories` to be an array in the JSON data but got " + data['productCategories']);
        }
        // ensure the json data is a string
        if (data['productSet'] && !(typeof data['productSet'] === 'string' || data['productSet'] instanceof String)) {
            throw new Error("Expected the field `productSet` to be a primitive type in the JSON string but got " + data['productSet']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudVisionV1p1beta1BoundingPoly} boundingPoly
 */
GoogleCloudVisionV1p1beta1ProductSearchParams.prototype['boundingPoly'] = undefined;

/**
 * The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An '=' should be used to connect the key and value. For example, \"(color = red OR color = blue) AND brand = Google\" is acceptable, but \"(color = red OR brand = Google)\" is not acceptable. \"color: red\" is not acceptable because it uses a ':' instead of an '='.
 * @member {String} filter
 */
GoogleCloudVisionV1p1beta1ProductSearchParams.prototype['filter'] = undefined;

/**
 * The list of product categories to search in. Currently, we only consider the first category, and either \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\", or \"general-v1\" should be specified. The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported but will be deprecated. For new products, please use \"homegoods-v2\", \"apparel-v2\", or \"toys-v2\" for better product search accuracy. It is recommended to migrate existing products to these categories as well.
 * @member {Array.<String>} productCategories
 */
GoogleCloudVisionV1p1beta1ProductSearchParams.prototype['productCategories'] = undefined;

/**
 * The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.
 * @member {String} productSet
 */
GoogleCloudVisionV1p1beta1ProductSearchParams.prototype['productSet'] = undefined;






export default GoogleCloudVisionV1p1beta1ProductSearchParams;

