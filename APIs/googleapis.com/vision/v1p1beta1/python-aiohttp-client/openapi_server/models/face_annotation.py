# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server.models.landmark import Landmark
from openapi_server import util


class FaceAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anger_likelihood: str=None, blurred_likelihood: str=None, bounding_poly: BoundingPoly=None, detection_confidence: float=None, fd_bounding_poly: BoundingPoly=None, headwear_likelihood: str=None, joy_likelihood: str=None, landmarking_confidence: float=None, landmarks: List[Landmark]=None, pan_angle: float=None, roll_angle: float=None, sorrow_likelihood: str=None, surprise_likelihood: str=None, tilt_angle: float=None, under_exposed_likelihood: str=None):
        """FaceAnnotation - a model defined in OpenAPI

        :param anger_likelihood: The anger_likelihood of this FaceAnnotation.
        :param blurred_likelihood: The blurred_likelihood of this FaceAnnotation.
        :param bounding_poly: The bounding_poly of this FaceAnnotation.
        :param detection_confidence: The detection_confidence of this FaceAnnotation.
        :param fd_bounding_poly: The fd_bounding_poly of this FaceAnnotation.
        :param headwear_likelihood: The headwear_likelihood of this FaceAnnotation.
        :param joy_likelihood: The joy_likelihood of this FaceAnnotation.
        :param landmarking_confidence: The landmarking_confidence of this FaceAnnotation.
        :param landmarks: The landmarks of this FaceAnnotation.
        :param pan_angle: The pan_angle of this FaceAnnotation.
        :param roll_angle: The roll_angle of this FaceAnnotation.
        :param sorrow_likelihood: The sorrow_likelihood of this FaceAnnotation.
        :param surprise_likelihood: The surprise_likelihood of this FaceAnnotation.
        :param tilt_angle: The tilt_angle of this FaceAnnotation.
        :param under_exposed_likelihood: The under_exposed_likelihood of this FaceAnnotation.
        """
        self.openapi_types = {
            'anger_likelihood': str,
            'blurred_likelihood': str,
            'bounding_poly': BoundingPoly,
            'detection_confidence': float,
            'fd_bounding_poly': BoundingPoly,
            'headwear_likelihood': str,
            'joy_likelihood': str,
            'landmarking_confidence': float,
            'landmarks': List[Landmark],
            'pan_angle': float,
            'roll_angle': float,
            'sorrow_likelihood': str,
            'surprise_likelihood': str,
            'tilt_angle': float,
            'under_exposed_likelihood': str
        }

        self.attribute_map = {
            'anger_likelihood': 'angerLikelihood',
            'blurred_likelihood': 'blurredLikelihood',
            'bounding_poly': 'boundingPoly',
            'detection_confidence': 'detectionConfidence',
            'fd_bounding_poly': 'fdBoundingPoly',
            'headwear_likelihood': 'headwearLikelihood',
            'joy_likelihood': 'joyLikelihood',
            'landmarking_confidence': 'landmarkingConfidence',
            'landmarks': 'landmarks',
            'pan_angle': 'panAngle',
            'roll_angle': 'rollAngle',
            'sorrow_likelihood': 'sorrowLikelihood',
            'surprise_likelihood': 'surpriseLikelihood',
            'tilt_angle': 'tiltAngle',
            'under_exposed_likelihood': 'underExposedLikelihood'
        }

        self._anger_likelihood = anger_likelihood
        self._blurred_likelihood = blurred_likelihood
        self._bounding_poly = bounding_poly
        self._detection_confidence = detection_confidence
        self._fd_bounding_poly = fd_bounding_poly
        self._headwear_likelihood = headwear_likelihood
        self._joy_likelihood = joy_likelihood
        self._landmarking_confidence = landmarking_confidence
        self._landmarks = landmarks
        self._pan_angle = pan_angle
        self._roll_angle = roll_angle
        self._sorrow_likelihood = sorrow_likelihood
        self._surprise_likelihood = surprise_likelihood
        self._tilt_angle = tilt_angle
        self._under_exposed_likelihood = under_exposed_likelihood

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FaceAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FaceAnnotation of this FaceAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anger_likelihood(self):
        """Gets the anger_likelihood of this FaceAnnotation.

        Anger likelihood.

        :return: The anger_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._anger_likelihood

    @anger_likelihood.setter
    def anger_likelihood(self, anger_likelihood):
        """Sets the anger_likelihood of this FaceAnnotation.

        Anger likelihood.

        :param anger_likelihood: The anger_likelihood of this FaceAnnotation.
        :type anger_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if anger_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `anger_likelihood` ({0}), must be one of {1}"
                .format(anger_likelihood, allowed_values)
            )

        self._anger_likelihood = anger_likelihood

    @property
    def blurred_likelihood(self):
        """Gets the blurred_likelihood of this FaceAnnotation.

        Blurred likelihood.

        :return: The blurred_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._blurred_likelihood

    @blurred_likelihood.setter
    def blurred_likelihood(self, blurred_likelihood):
        """Sets the blurred_likelihood of this FaceAnnotation.

        Blurred likelihood.

        :param blurred_likelihood: The blurred_likelihood of this FaceAnnotation.
        :type blurred_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if blurred_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `blurred_likelihood` ({0}), must be one of {1}"
                .format(blurred_likelihood, allowed_values)
            )

        self._blurred_likelihood = blurred_likelihood

    @property
    def bounding_poly(self):
        """Gets the bounding_poly of this FaceAnnotation.


        :return: The bounding_poly of this FaceAnnotation.
        :rtype: BoundingPoly
        """
        return self._bounding_poly

    @bounding_poly.setter
    def bounding_poly(self, bounding_poly):
        """Sets the bounding_poly of this FaceAnnotation.


        :param bounding_poly: The bounding_poly of this FaceAnnotation.
        :type bounding_poly: BoundingPoly
        """

        self._bounding_poly = bounding_poly

    @property
    def detection_confidence(self):
        """Gets the detection_confidence of this FaceAnnotation.

        Detection confidence. Range [0, 1].

        :return: The detection_confidence of this FaceAnnotation.
        :rtype: float
        """
        return self._detection_confidence

    @detection_confidence.setter
    def detection_confidence(self, detection_confidence):
        """Sets the detection_confidence of this FaceAnnotation.

        Detection confidence. Range [0, 1].

        :param detection_confidence: The detection_confidence of this FaceAnnotation.
        :type detection_confidence: float
        """

        self._detection_confidence = detection_confidence

    @property
    def fd_bounding_poly(self):
        """Gets the fd_bounding_poly of this FaceAnnotation.


        :return: The fd_bounding_poly of this FaceAnnotation.
        :rtype: BoundingPoly
        """
        return self._fd_bounding_poly

    @fd_bounding_poly.setter
    def fd_bounding_poly(self, fd_bounding_poly):
        """Sets the fd_bounding_poly of this FaceAnnotation.


        :param fd_bounding_poly: The fd_bounding_poly of this FaceAnnotation.
        :type fd_bounding_poly: BoundingPoly
        """

        self._fd_bounding_poly = fd_bounding_poly

    @property
    def headwear_likelihood(self):
        """Gets the headwear_likelihood of this FaceAnnotation.

        Headwear likelihood.

        :return: The headwear_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._headwear_likelihood

    @headwear_likelihood.setter
    def headwear_likelihood(self, headwear_likelihood):
        """Sets the headwear_likelihood of this FaceAnnotation.

        Headwear likelihood.

        :param headwear_likelihood: The headwear_likelihood of this FaceAnnotation.
        :type headwear_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if headwear_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `headwear_likelihood` ({0}), must be one of {1}"
                .format(headwear_likelihood, allowed_values)
            )

        self._headwear_likelihood = headwear_likelihood

    @property
    def joy_likelihood(self):
        """Gets the joy_likelihood of this FaceAnnotation.

        Joy likelihood.

        :return: The joy_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._joy_likelihood

    @joy_likelihood.setter
    def joy_likelihood(self, joy_likelihood):
        """Sets the joy_likelihood of this FaceAnnotation.

        Joy likelihood.

        :param joy_likelihood: The joy_likelihood of this FaceAnnotation.
        :type joy_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if joy_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `joy_likelihood` ({0}), must be one of {1}"
                .format(joy_likelihood, allowed_values)
            )

        self._joy_likelihood = joy_likelihood

    @property
    def landmarking_confidence(self):
        """Gets the landmarking_confidence of this FaceAnnotation.

        Face landmarking confidence. Range [0, 1].

        :return: The landmarking_confidence of this FaceAnnotation.
        :rtype: float
        """
        return self._landmarking_confidence

    @landmarking_confidence.setter
    def landmarking_confidence(self, landmarking_confidence):
        """Sets the landmarking_confidence of this FaceAnnotation.

        Face landmarking confidence. Range [0, 1].

        :param landmarking_confidence: The landmarking_confidence of this FaceAnnotation.
        :type landmarking_confidence: float
        """

        self._landmarking_confidence = landmarking_confidence

    @property
    def landmarks(self):
        """Gets the landmarks of this FaceAnnotation.

        Detected face landmarks.

        :return: The landmarks of this FaceAnnotation.
        :rtype: List[Landmark]
        """
        return self._landmarks

    @landmarks.setter
    def landmarks(self, landmarks):
        """Sets the landmarks of this FaceAnnotation.

        Detected face landmarks.

        :param landmarks: The landmarks of this FaceAnnotation.
        :type landmarks: List[Landmark]
        """

        self._landmarks = landmarks

    @property
    def pan_angle(self):
        """Gets the pan_angle of this FaceAnnotation.

        Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].

        :return: The pan_angle of this FaceAnnotation.
        :rtype: float
        """
        return self._pan_angle

    @pan_angle.setter
    def pan_angle(self, pan_angle):
        """Sets the pan_angle of this FaceAnnotation.

        Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].

        :param pan_angle: The pan_angle of this FaceAnnotation.
        :type pan_angle: float
        """

        self._pan_angle = pan_angle

    @property
    def roll_angle(self):
        """Gets the roll_angle of this FaceAnnotation.

        Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].

        :return: The roll_angle of this FaceAnnotation.
        :rtype: float
        """
        return self._roll_angle

    @roll_angle.setter
    def roll_angle(self, roll_angle):
        """Sets the roll_angle of this FaceAnnotation.

        Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].

        :param roll_angle: The roll_angle of this FaceAnnotation.
        :type roll_angle: float
        """

        self._roll_angle = roll_angle

    @property
    def sorrow_likelihood(self):
        """Gets the sorrow_likelihood of this FaceAnnotation.

        Sorrow likelihood.

        :return: The sorrow_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._sorrow_likelihood

    @sorrow_likelihood.setter
    def sorrow_likelihood(self, sorrow_likelihood):
        """Sets the sorrow_likelihood of this FaceAnnotation.

        Sorrow likelihood.

        :param sorrow_likelihood: The sorrow_likelihood of this FaceAnnotation.
        :type sorrow_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if sorrow_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `sorrow_likelihood` ({0}), must be one of {1}"
                .format(sorrow_likelihood, allowed_values)
            )

        self._sorrow_likelihood = sorrow_likelihood

    @property
    def surprise_likelihood(self):
        """Gets the surprise_likelihood of this FaceAnnotation.

        Surprise likelihood.

        :return: The surprise_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._surprise_likelihood

    @surprise_likelihood.setter
    def surprise_likelihood(self, surprise_likelihood):
        """Sets the surprise_likelihood of this FaceAnnotation.

        Surprise likelihood.

        :param surprise_likelihood: The surprise_likelihood of this FaceAnnotation.
        :type surprise_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if surprise_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `surprise_likelihood` ({0}), must be one of {1}"
                .format(surprise_likelihood, allowed_values)
            )

        self._surprise_likelihood = surprise_likelihood

    @property
    def tilt_angle(self):
        """Gets the tilt_angle of this FaceAnnotation.

        Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].

        :return: The tilt_angle of this FaceAnnotation.
        :rtype: float
        """
        return self._tilt_angle

    @tilt_angle.setter
    def tilt_angle(self, tilt_angle):
        """Sets the tilt_angle of this FaceAnnotation.

        Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image's horizontal plane. Range [-180,180].

        :param tilt_angle: The tilt_angle of this FaceAnnotation.
        :type tilt_angle: float
        """

        self._tilt_angle = tilt_angle

    @property
    def under_exposed_likelihood(self):
        """Gets the under_exposed_likelihood of this FaceAnnotation.

        Under-exposed likelihood.

        :return: The under_exposed_likelihood of this FaceAnnotation.
        :rtype: str
        """
        return self._under_exposed_likelihood

    @under_exposed_likelihood.setter
    def under_exposed_likelihood(self, under_exposed_likelihood):
        """Sets the under_exposed_likelihood of this FaceAnnotation.

        Under-exposed likelihood.

        :param under_exposed_likelihood: The under_exposed_likelihood of this FaceAnnotation.
        :type under_exposed_likelihood: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if under_exposed_likelihood not in allowed_values:
            raise ValueError(
                "Invalid value for `under_exposed_likelihood` ({0}), must be one of {1}"
                .format(under_exposed_likelihood, allowed_values)
            )

        self._under_exposed_likelihood = under_exposed_likelihood
