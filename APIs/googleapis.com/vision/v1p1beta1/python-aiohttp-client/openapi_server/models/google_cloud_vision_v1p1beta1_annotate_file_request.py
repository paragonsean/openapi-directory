# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_vision_v1p1beta1_feature import GoogleCloudVisionV1p1beta1Feature
from openapi_server.models.google_cloud_vision_v1p1beta1_image_context import GoogleCloudVisionV1p1beta1ImageContext
from openapi_server.models.google_cloud_vision_v1p1beta1_input_config import GoogleCloudVisionV1p1beta1InputConfig
from openapi_server import util


class GoogleCloudVisionV1p1beta1AnnotateFileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, features: List[GoogleCloudVisionV1p1beta1Feature]=None, image_context: GoogleCloudVisionV1p1beta1ImageContext=None, input_config: GoogleCloudVisionV1p1beta1InputConfig=None, pages: List[int]=None):
        """GoogleCloudVisionV1p1beta1AnnotateFileRequest - a model defined in OpenAPI

        :param features: The features of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :param image_context: The image_context of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :param input_config: The input_config of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :param pages: The pages of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        """
        self.openapi_types = {
            'features': List[GoogleCloudVisionV1p1beta1Feature],
            'image_context': GoogleCloudVisionV1p1beta1ImageContext,
            'input_config': GoogleCloudVisionV1p1beta1InputConfig,
            'pages': List[int]
        }

        self.attribute_map = {
            'features': 'features',
            'image_context': 'imageContext',
            'input_config': 'inputConfig',
            'pages': 'pages'
        }

        self._features = features
        self._image_context = image_context
        self._input_config = input_config
        self._pages = pages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p1beta1AnnotateFileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p1beta1AnnotateFileRequest of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def features(self):
        """Gets the features of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.

        Required. Requested features.

        :return: The features of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :rtype: List[GoogleCloudVisionV1p1beta1Feature]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.

        Required. Requested features.

        :param features: The features of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :type features: List[GoogleCloudVisionV1p1beta1Feature]
        """

        self._features = features

    @property
    def image_context(self):
        """Gets the image_context of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.


        :return: The image_context of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :rtype: GoogleCloudVisionV1p1beta1ImageContext
        """
        return self._image_context

    @image_context.setter
    def image_context(self, image_context):
        """Sets the image_context of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.


        :param image_context: The image_context of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :type image_context: GoogleCloudVisionV1p1beta1ImageContext
        """

        self._image_context = image_context

    @property
    def input_config(self):
        """Gets the input_config of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.


        :return: The input_config of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :rtype: GoogleCloudVisionV1p1beta1InputConfig
        """
        return self._input_config

    @input_config.setter
    def input_config(self, input_config):
        """Sets the input_config of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.


        :param input_config: The input_config of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :type input_config: GoogleCloudVisionV1p1beta1InputConfig
        """

        self._input_config = input_config

    @property
    def pages(self):
        """Gets the pages of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.

        Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.

        :return: The pages of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :rtype: List[int]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.

        Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.

        :param pages: The pages of this GoogleCloudVisionV1p1beta1AnnotateFileRequest.
        :type pages: List[int]
        """

        self._pages = pages
