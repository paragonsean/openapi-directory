# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.web_entity import WebEntity
from openapi_server.models.web_image import WebImage
from openapi_server.models.web_label import WebLabel
from openapi_server.models.web_page import WebPage
from openapi_server import util


class WebDetection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, best_guess_labels: List[WebLabel]=None, full_matching_images: List[WebImage]=None, pages_with_matching_images: List[WebPage]=None, partial_matching_images: List[WebImage]=None, visually_similar_images: List[WebImage]=None, web_entities: List[WebEntity]=None):
        """WebDetection - a model defined in OpenAPI

        :param best_guess_labels: The best_guess_labels of this WebDetection.
        :param full_matching_images: The full_matching_images of this WebDetection.
        :param pages_with_matching_images: The pages_with_matching_images of this WebDetection.
        :param partial_matching_images: The partial_matching_images of this WebDetection.
        :param visually_similar_images: The visually_similar_images of this WebDetection.
        :param web_entities: The web_entities of this WebDetection.
        """
        self.openapi_types = {
            'best_guess_labels': List[WebLabel],
            'full_matching_images': List[WebImage],
            'pages_with_matching_images': List[WebPage],
            'partial_matching_images': List[WebImage],
            'visually_similar_images': List[WebImage],
            'web_entities': List[WebEntity]
        }

        self.attribute_map = {
            'best_guess_labels': 'bestGuessLabels',
            'full_matching_images': 'fullMatchingImages',
            'pages_with_matching_images': 'pagesWithMatchingImages',
            'partial_matching_images': 'partialMatchingImages',
            'visually_similar_images': 'visuallySimilarImages',
            'web_entities': 'webEntities'
        }

        self._best_guess_labels = best_guess_labels
        self._full_matching_images = full_matching_images
        self._pages_with_matching_images = pages_with_matching_images
        self._partial_matching_images = partial_matching_images
        self._visually_similar_images = visually_similar_images
        self._web_entities = web_entities

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebDetection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebDetection of this WebDetection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def best_guess_labels(self):
        """Gets the best_guess_labels of this WebDetection.

        The service's best guess as to the topic of the request image. Inferred from similar images on the open web.

        :return: The best_guess_labels of this WebDetection.
        :rtype: List[WebLabel]
        """
        return self._best_guess_labels

    @best_guess_labels.setter
    def best_guess_labels(self, best_guess_labels):
        """Sets the best_guess_labels of this WebDetection.

        The service's best guess as to the topic of the request image. Inferred from similar images on the open web.

        :param best_guess_labels: The best_guess_labels of this WebDetection.
        :type best_guess_labels: List[WebLabel]
        """

        self._best_guess_labels = best_guess_labels

    @property
    def full_matching_images(self):
        """Gets the full_matching_images of this WebDetection.

        Fully matching images from the Internet. Can include resized copies of the query image.

        :return: The full_matching_images of this WebDetection.
        :rtype: List[WebImage]
        """
        return self._full_matching_images

    @full_matching_images.setter
    def full_matching_images(self, full_matching_images):
        """Sets the full_matching_images of this WebDetection.

        Fully matching images from the Internet. Can include resized copies of the query image.

        :param full_matching_images: The full_matching_images of this WebDetection.
        :type full_matching_images: List[WebImage]
        """

        self._full_matching_images = full_matching_images

    @property
    def pages_with_matching_images(self):
        """Gets the pages_with_matching_images of this WebDetection.

        Web pages containing the matching images from the Internet.

        :return: The pages_with_matching_images of this WebDetection.
        :rtype: List[WebPage]
        """
        return self._pages_with_matching_images

    @pages_with_matching_images.setter
    def pages_with_matching_images(self, pages_with_matching_images):
        """Sets the pages_with_matching_images of this WebDetection.

        Web pages containing the matching images from the Internet.

        :param pages_with_matching_images: The pages_with_matching_images of this WebDetection.
        :type pages_with_matching_images: List[WebPage]
        """

        self._pages_with_matching_images = pages_with_matching_images

    @property
    def partial_matching_images(self):
        """Gets the partial_matching_images of this WebDetection.

        Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.

        :return: The partial_matching_images of this WebDetection.
        :rtype: List[WebImage]
        """
        return self._partial_matching_images

    @partial_matching_images.setter
    def partial_matching_images(self, partial_matching_images):
        """Sets the partial_matching_images of this WebDetection.

        Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.

        :param partial_matching_images: The partial_matching_images of this WebDetection.
        :type partial_matching_images: List[WebImage]
        """

        self._partial_matching_images = partial_matching_images

    @property
    def visually_similar_images(self):
        """Gets the visually_similar_images of this WebDetection.

        The visually similar image results.

        :return: The visually_similar_images of this WebDetection.
        :rtype: List[WebImage]
        """
        return self._visually_similar_images

    @visually_similar_images.setter
    def visually_similar_images(self, visually_similar_images):
        """Sets the visually_similar_images of this WebDetection.

        The visually similar image results.

        :param visually_similar_images: The visually_similar_images of this WebDetection.
        :type visually_similar_images: List[WebImage]
        """

        self._visually_similar_images = visually_similar_images

    @property
    def web_entities(self):
        """Gets the web_entities of this WebDetection.

        Deduced entities from similar images on the Internet.

        :return: The web_entities of this WebDetection.
        :rtype: List[WebEntity]
        """
        return self._web_entities

    @web_entities.setter
    def web_entities(self, web_entities):
        """Sets the web_entities of this WebDetection.

        Deduced entities from similar images on the Internet.

        :param web_entities: The web_entities of this WebDetection.
        :type web_entities: List[WebEntity]
        """

        self._web_entities = web_entities
