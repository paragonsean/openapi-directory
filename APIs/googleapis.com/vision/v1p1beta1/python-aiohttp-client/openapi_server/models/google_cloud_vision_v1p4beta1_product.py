# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_vision_v1p4beta1_product_key_value import GoogleCloudVisionV1p4beta1ProductKeyValue
from openapi_server import util


class GoogleCloudVisionV1p4beta1Product(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, name: str=None, product_category: str=None, product_labels: List[GoogleCloudVisionV1p4beta1ProductKeyValue]=None):
        """GoogleCloudVisionV1p4beta1Product - a model defined in OpenAPI

        :param description: The description of this GoogleCloudVisionV1p4beta1Product.
        :param display_name: The display_name of this GoogleCloudVisionV1p4beta1Product.
        :param name: The name of this GoogleCloudVisionV1p4beta1Product.
        :param product_category: The product_category of this GoogleCloudVisionV1p4beta1Product.
        :param product_labels: The product_labels of this GoogleCloudVisionV1p4beta1Product.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'name': str,
            'product_category': str,
            'product_labels': List[GoogleCloudVisionV1p4beta1ProductKeyValue]
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'name': 'name',
            'product_category': 'productCategory',
            'product_labels': 'productLabels'
        }

        self._description = description
        self._display_name = display_name
        self._name = name
        self._product_category = product_category
        self._product_labels = product_labels

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p4beta1Product':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p4beta1Product of this GoogleCloudVisionV1p4beta1Product.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this GoogleCloudVisionV1p4beta1Product.

        User-provided metadata to be stored with this product. Must be at most 4096 characters long.

        :return: The description of this GoogleCloudVisionV1p4beta1Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudVisionV1p4beta1Product.

        User-provided metadata to be stored with this product. Must be at most 4096 characters long.

        :param description: The description of this GoogleCloudVisionV1p4beta1Product.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GoogleCloudVisionV1p4beta1Product.

        The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.

        :return: The display_name of this GoogleCloudVisionV1p4beta1Product.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GoogleCloudVisionV1p4beta1Product.

        The user-provided name for this Product. Must not be empty. Must be at most 4096 characters long.

        :param display_name: The display_name of this GoogleCloudVisionV1p4beta1Product.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this GoogleCloudVisionV1p4beta1Product.

        The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.

        :return: The name of this GoogleCloudVisionV1p4beta1Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudVisionV1p4beta1Product.

        The resource name of the product. Format is: `projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID`. This field is ignored when creating a product.

        :param name: The name of this GoogleCloudVisionV1p4beta1Product.
        :type name: str
        """

        self._name = name

    @property
    def product_category(self):
        """Gets the product_category of this GoogleCloudVisionV1p4beta1Product.

        Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.

        :return: The product_category of this GoogleCloudVisionV1p4beta1Product.
        :rtype: str
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this GoogleCloudVisionV1p4beta1Product.

        Immutable. The category for the product identified by the reference image. This should be one of \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\" or \"general-v1\". The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported, but these should not be used for new products.

        :param product_category: The product_category of this GoogleCloudVisionV1p4beta1Product.
        :type product_category: str
        """

        self._product_category = product_category

    @property
    def product_labels(self):
        """Gets the product_labels of this GoogleCloudVisionV1p4beta1Product.

        Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.

        :return: The product_labels of this GoogleCloudVisionV1p4beta1Product.
        :rtype: List[GoogleCloudVisionV1p4beta1ProductKeyValue]
        """
        return self._product_labels

    @product_labels.setter
    def product_labels(self, product_labels):
        """Sets the product_labels of this GoogleCloudVisionV1p4beta1Product.

        Key-value pairs that can be attached to a product. At query time, constraints can be specified based on the product_labels. Note that integer values can be provided as strings, e.g. \"1199\". Only strings with integer values can match a range-based restriction which is to be supported soon. Multiple values can be assigned to the same key. One product may have up to 500 product_labels. Notice that the total number of distinct product_labels over all products in one ProductSet cannot exceed 1M, otherwise the product search pipeline will refuse to work for that ProductSet.

        :param product_labels: The product_labels of this GoogleCloudVisionV1p4beta1Product.
        :type product_labels: List[GoogleCloudVisionV1p4beta1ProductKeyValue]
        """

        self._product_labels = product_labels
