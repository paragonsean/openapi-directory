# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_prefix: bool=None, type: str=None):
        """GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak - a model defined in OpenAPI

        :param is_prefix: The is_prefix of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        :param type: The type of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        """
        self.openapi_types = {
            'is_prefix': bool,
            'type': str
        }

        self.attribute_map = {
            'is_prefix': 'isPrefix',
            'type': 'type'
        }

        self._is_prefix = is_prefix
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_prefix(self):
        """Gets the is_prefix of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.

        True if break prepends the element.

        :return: The is_prefix of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        :rtype: bool
        """
        return self._is_prefix

    @is_prefix.setter
    def is_prefix(self, is_prefix):
        """Sets the is_prefix of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.

        True if break prepends the element.

        :param is_prefix: The is_prefix of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        :type is_prefix: bool
        """

        self._is_prefix = is_prefix

    @property
    def type(self):
        """Gets the type of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.

        Detected break type.

        :return: The type of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.

        Detected break type.

        :param type: The type of this GoogleCloudVisionV1p1beta1TextAnnotationDetectedBreak.
        :type type: str
        """
        allowed_values = ["UNKNOWN", "SPACE", "SURE_SPACE", "EOL_SURE_SPACE", "HYPHEN", "LINE_BREAK"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
