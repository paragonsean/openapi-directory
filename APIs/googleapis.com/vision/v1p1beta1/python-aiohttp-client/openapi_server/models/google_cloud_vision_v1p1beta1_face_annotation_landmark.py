# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_vision_v1p1beta1_position import GoogleCloudVisionV1p1beta1Position
from openapi_server import util


class GoogleCloudVisionV1p1beta1FaceAnnotationLandmark(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, position: GoogleCloudVisionV1p1beta1Position=None, type: str=None):
        """GoogleCloudVisionV1p1beta1FaceAnnotationLandmark - a model defined in OpenAPI

        :param position: The position of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        :param type: The type of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        """
        self.openapi_types = {
            'position': GoogleCloudVisionV1p1beta1Position,
            'type': str
        }

        self.attribute_map = {
            'position': 'position',
            'type': 'type'
        }

        self._position = position
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p1beta1FaceAnnotationLandmark':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p1beta1FaceAnnotationLandmark of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def position(self):
        """Gets the position of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.


        :return: The position of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        :rtype: GoogleCloudVisionV1p1beta1Position
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.


        :param position: The position of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        :type position: GoogleCloudVisionV1p1beta1Position
        """

        self._position = position

    @property
    def type(self):
        """Gets the type of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.

        Face landmark type.

        :return: The type of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.

        Face landmark type.

        :param type: The type of this GoogleCloudVisionV1p1beta1FaceAnnotationLandmark.
        :type type: str
        """
        allowed_values = ["UNKNOWN_LANDMARK", "LEFT_EYE", "RIGHT_EYE", "LEFT_OF_LEFT_EYEBROW", "RIGHT_OF_LEFT_EYEBROW", "LEFT_OF_RIGHT_EYEBROW", "RIGHT_OF_RIGHT_EYEBROW", "MIDPOINT_BETWEEN_EYES", "NOSE_TIP", "UPPER_LIP", "LOWER_LIP", "MOUTH_LEFT", "MOUTH_RIGHT", "MOUTH_CENTER", "NOSE_BOTTOM_RIGHT", "NOSE_BOTTOM_LEFT", "NOSE_BOTTOM_CENTER", "LEFT_EYE_TOP_BOUNDARY", "LEFT_EYE_RIGHT_CORNER", "LEFT_EYE_BOTTOM_BOUNDARY", "LEFT_EYE_LEFT_CORNER", "RIGHT_EYE_TOP_BOUNDARY", "RIGHT_EYE_RIGHT_CORNER", "RIGHT_EYE_BOTTOM_BOUNDARY", "RIGHT_EYE_LEFT_CORNER", "LEFT_EYEBROW_UPPER_MIDPOINT", "RIGHT_EYEBROW_UPPER_MIDPOINT", "LEFT_EAR_TRAGION", "RIGHT_EAR_TRAGION", "LEFT_EYE_PUPIL", "RIGHT_EYE_PUPIL", "FOREHEAD_GLABELLA", "CHIN_GNATHION", "CHIN_LEFT_GONION", "CHIN_RIGHT_GONION", "LEFT_CHEEK_CENTER", "RIGHT_CHEEK_CENTER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
