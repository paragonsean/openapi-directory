# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_vision_v1p1beta1_async_annotate_file_request import GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest
from openapi_server import util


class GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, labels: Dict[str, str]=None, parent: str=None, requests: List[GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest]=None):
        """GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest - a model defined in OpenAPI

        :param labels: The labels of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :param parent: The parent of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :param requests: The requests of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        """
        self.openapi_types = {
            'labels': Dict[str, str],
            'parent': str,
            'requests': List[GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest]
        }

        self.attribute_map = {
            'labels': 'labels',
            'parent': 'parent',
            'requests': 'requests'
        }

        self._labels = labels
        self._parent = parent
        self._requests = requests

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def labels(self):
        """Gets the labels of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.

        Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.

        :return: The labels of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.

        Optional. The labels with user-defined metadata for the request. Label keys and values can be no longer than 63 characters (Unicode codepoints), can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter.

        :param labels: The labels of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def parent(self):
        """Gets the parent of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.

        Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.

        :return: The parent of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.

        Optional. Target project and location to make a call. Format: `projects/{project-id}/locations/{location-id}`. If no parent is specified, a region will be chosen automatically. Supported location-ids: `us`: USA country only, `asia`: East asia areas, like Japan, Taiwan, `eu`: The European Union. Example: `projects/project-A/locations/eu`.

        :param parent: The parent of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :type parent: str
        """

        self._parent = parent

    @property
    def requests(self):
        """Gets the requests of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.

        Required. Individual async file annotation requests for this batch.

        :return: The requests of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :rtype: List[GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest]
        """
        return self._requests

    @requests.setter
    def requests(self, requests):
        """Sets the requests of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.

        Required. Individual async file annotation requests for this batch.

        :param requests: The requests of this GoogleCloudVisionV1p1beta1AsyncBatchAnnotateFilesRequest.
        :type requests: List[GoogleCloudVisionV1p1beta1AsyncAnnotateFileRequest]
        """

        self._requests = requests
