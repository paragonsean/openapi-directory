/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_product_category_isSet = false;
    m_product_category_isValid = false;

    m_product_labels_isSet = false;
    m_product_labels_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_product_category_isValid = ::OpenAPI::fromJsonValue(m_product_category, json[QString("productCategory")]);
    m_product_category_isSet = !json[QString("productCategory")].isNull() && m_product_category_isValid;

    m_product_labels_isValid = ::OpenAPI::fromJsonValue(m_product_labels, json[QString("productLabels")]);
    m_product_labels_isSet = !json[QString("productLabels")].isNull() && m_product_labels_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_product_category_isSet) {
        obj.insert(QString("productCategory"), ::OpenAPI::toJsonValue(m_product_category));
    }
    if (m_product_labels.size() > 0) {
        obj.insert(QString("productLabels"), ::OpenAPI::toJsonValue(m_product_labels));
    }
    return obj;
}

QString OAIProduct::getDescription() const {
    return m_description;
}
void OAIProduct::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProduct::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProduct::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProduct::getDisplayName() const {
    return m_display_name;
}
void OAIProduct::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProduct::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProduct::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProduct::getProductCategory() const {
    return m_product_category;
}
void OAIProduct::setProductCategory(const QString &product_category) {
    m_product_category = product_category;
    m_product_category_isSet = true;
}

bool OAIProduct::is_product_category_Set() const{
    return m_product_category_isSet;
}

bool OAIProduct::is_product_category_Valid() const{
    return m_product_category_isValid;
}

QList<OAIKeyValue> OAIProduct::getProductLabels() const {
    return m_product_labels;
}
void OAIProduct::setProductLabels(const QList<OAIKeyValue> &product_labels) {
    m_product_labels = product_labels;
    m_product_labels_isSet = true;
}

bool OAIProduct::is_product_labels_Set() const{
    return m_product_labels_isSet;
}

bool OAIProduct::is_product_labels_Valid() const{
    return m_product_labels_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
