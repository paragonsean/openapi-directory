/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::~OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult() {}

void OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::initializeModel() {

    m_celebrity_isSet = false;
    m_celebrity_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;
}

void OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::fromJsonObject(QJsonObject json) {

    m_celebrity_isValid = ::OpenAPI::fromJsonValue(m_celebrity, json[QString("celebrity")]);
    m_celebrity_isSet = !json[QString("celebrity")].isNull() && m_celebrity_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::asJsonObject() const {
    QJsonObject obj;
    if (m_celebrity.isSet()) {
        obj.insert(QString("celebrity"), ::OpenAPI::toJsonValue(m_celebrity));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    return obj;
}

OAIGoogleCloudVisionV1p4beta1Celebrity OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::getCelebrity() const {
    return m_celebrity;
}
void OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::setCelebrity(const OAIGoogleCloudVisionV1p4beta1Celebrity &celebrity) {
    m_celebrity = celebrity;
    m_celebrity_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::is_celebrity_Set() const{
    return m_celebrity_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::is_celebrity_Valid() const{
    return m_celebrity_isValid;
}

float OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::is_confidence_Valid() const{
    return m_confidence_isValid;
}

bool OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_celebrity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
