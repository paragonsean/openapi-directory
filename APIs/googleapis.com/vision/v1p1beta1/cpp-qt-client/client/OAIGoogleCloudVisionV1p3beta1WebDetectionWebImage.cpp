/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::~OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage() {}

void OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::initializeModel() {

    m_score_isSet = false;
    m_score_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::fromJsonObject(QJsonObject json) {

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::asJsonObject() const {
    QJsonObject obj;
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

float OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::getScore() const {
    return m_score;
}
void OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::getUrl() const {
    return m_url;
}
void OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p3beta1WebDetectionWebImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
