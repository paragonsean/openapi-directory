/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsyncBatchAnnotateImagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsyncBatchAnnotateImagesResponse::OAIAsyncBatchAnnotateImagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsyncBatchAnnotateImagesResponse::OAIAsyncBatchAnnotateImagesResponse() {
    this->initializeModel();
}

OAIAsyncBatchAnnotateImagesResponse::~OAIAsyncBatchAnnotateImagesResponse() {}

void OAIAsyncBatchAnnotateImagesResponse::initializeModel() {

    m_output_config_isSet = false;
    m_output_config_isValid = false;
}

void OAIAsyncBatchAnnotateImagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsyncBatchAnnotateImagesResponse::fromJsonObject(QJsonObject json) {

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;
}

QString OAIAsyncBatchAnnotateImagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsyncBatchAnnotateImagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    return obj;
}

OAIOutputConfig OAIAsyncBatchAnnotateImagesResponse::getOutputConfig() const {
    return m_output_config;
}
void OAIAsyncBatchAnnotateImagesResponse::setOutputConfig(const OAIOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIAsyncBatchAnnotateImagesResponse::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIAsyncBatchAnnotateImagesResponse::is_output_config_Valid() const{
    return m_output_config_isValid;
}

bool OAIAsyncBatchAnnotateImagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsyncBatchAnnotateImagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
