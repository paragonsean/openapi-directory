/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p4beta1Page.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p4beta1Page::OAIGoogleCloudVisionV1p4beta1Page(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p4beta1Page::OAIGoogleCloudVisionV1p4beta1Page() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p4beta1Page::~OAIGoogleCloudVisionV1p4beta1Page() {}

void OAIGoogleCloudVisionV1p4beta1Page::initializeModel() {

    m_blocks_isSet = false;
    m_blocks_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIGoogleCloudVisionV1p4beta1Page::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p4beta1Page::fromJsonObject(QJsonObject json) {

    m_blocks_isValid = ::OpenAPI::fromJsonValue(m_blocks, json[QString("blocks")]);
    m_blocks_isSet = !json[QString("blocks")].isNull() && m_blocks_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1Page::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p4beta1Page::asJsonObject() const {
    QJsonObject obj;
    if (m_blocks.size() > 0) {
        obj.insert(QString("blocks"), ::OpenAPI::toJsonValue(m_blocks));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QList<OAIGoogleCloudVisionV1p4beta1Block> OAIGoogleCloudVisionV1p4beta1Page::getBlocks() const {
    return m_blocks;
}
void OAIGoogleCloudVisionV1p4beta1Page::setBlocks(const QList<OAIGoogleCloudVisionV1p4beta1Block> &blocks) {
    m_blocks = blocks;
    m_blocks_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_blocks_Set() const{
    return m_blocks_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_blocks_Valid() const{
    return m_blocks_isValid;
}

float OAIGoogleCloudVisionV1p4beta1Page::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVisionV1p4beta1Page::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_confidence_Valid() const{
    return m_confidence_isValid;
}

qint32 OAIGoogleCloudVisionV1p4beta1Page::getHeight() const {
    return m_height;
}
void OAIGoogleCloudVisionV1p4beta1Page::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_height_Set() const{
    return m_height_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_height_Valid() const{
    return m_height_isValid;
}

OAIGoogleCloudVisionV1p4beta1TextAnnotationTextProperty OAIGoogleCloudVisionV1p4beta1Page::getProperty() const {
    return m_property;
}
void OAIGoogleCloudVisionV1p4beta1Page::setProperty(const OAIGoogleCloudVisionV1p4beta1TextAnnotationTextProperty &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_property_Set() const{
    return m_property_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_property_Valid() const{
    return m_property_isValid;
}

qint32 OAIGoogleCloudVisionV1p4beta1Page::getWidth() const {
    return m_width;
}
void OAIGoogleCloudVisionV1p4beta1Page::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_width_Set() const{
    return m_width_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1Page::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIGoogleCloudVisionV1p4beta1Page::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p4beta1Page::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
