/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p3beta1EntityAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p3beta1EntityAnnotation::OAIGoogleCloudVisionV1p3beta1EntityAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p3beta1EntityAnnotation::OAIGoogleCloudVisionV1p3beta1EntityAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p3beta1EntityAnnotation::~OAIGoogleCloudVisionV1p3beta1EntityAnnotation() {}

void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::initializeModel() {

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_mid_isSet = false;
    m_mid_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_topicality_isSet = false;
    m_topicality_isValid = false;
}

void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::fromJsonObject(QJsonObject json) {

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_mid_isValid = ::OpenAPI::fromJsonValue(m_mid, json[QString("mid")]);
    m_mid_isSet = !json[QString("mid")].isNull() && m_mid_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_topicality_isValid = ::OpenAPI::fromJsonValue(m_topicality, json[QString("topicality")]);
    m_topicality_isSet = !json[QString("topicality")].isNull() && m_topicality_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1EntityAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p3beta1EntityAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_mid_isSet) {
        obj.insert(QString("mid"), ::OpenAPI::toJsonValue(m_mid));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_topicality_isSet) {
        obj.insert(QString("topicality"), ::OpenAPI::toJsonValue(m_topicality));
    }
    return obj;
}

OAIGoogleCloudVisionV1p3beta1BoundingPoly OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setBoundingPoly(const OAIGoogleCloudVisionV1p3beta1BoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

float OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getDescription() const {
    return m_description;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getLocale() const {
    return m_locale;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_locale_Valid() const{
    return m_locale_isValid;
}

QList<OAIGoogleCloudVisionV1p3beta1LocationInfo> OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getLocations() const {
    return m_locations;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setLocations(const QList<OAIGoogleCloudVisionV1p3beta1LocationInfo> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getMid() const {
    return m_mid;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setMid(const QString &mid) {
    m_mid = mid;
    m_mid_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_mid_Set() const{
    return m_mid_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_mid_Valid() const{
    return m_mid_isValid;
}

QList<OAIGoogleCloudVisionV1p3beta1Property> OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getProperties() const {
    return m_properties;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setProperties(const QList<OAIGoogleCloudVisionV1p3beta1Property> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_properties_Valid() const{
    return m_properties_isValid;
}

float OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getScore() const {
    return m_score;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_score_Valid() const{
    return m_score_isValid;
}

float OAIGoogleCloudVisionV1p3beta1EntityAnnotation::getTopicality() const {
    return m_topicality;
}
void OAIGoogleCloudVisionV1p3beta1EntityAnnotation::setTopicality(const float &topicality) {
    m_topicality = topicality;
    m_topicality_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_topicality_Set() const{
    return m_topicality_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::is_topicality_Valid() const{
    return m_topicality_isValid;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topicality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p3beta1EntityAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
