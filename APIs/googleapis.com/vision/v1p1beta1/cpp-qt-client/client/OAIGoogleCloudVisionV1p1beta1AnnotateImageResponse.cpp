/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::~OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse() {}

void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::initializeModel() {

    m_context_isSet = false;
    m_context_isValid = false;

    m_crop_hints_annotation_isSet = false;
    m_crop_hints_annotation_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_face_annotations_isSet = false;
    m_face_annotations_isValid = false;

    m_full_text_annotation_isSet = false;
    m_full_text_annotation_isValid = false;

    m_image_properties_annotation_isSet = false;
    m_image_properties_annotation_isValid = false;

    m_label_annotations_isSet = false;
    m_label_annotations_isValid = false;

    m_landmark_annotations_isSet = false;
    m_landmark_annotations_isValid = false;

    m_localized_object_annotations_isSet = false;
    m_localized_object_annotations_isValid = false;

    m_logo_annotations_isSet = false;
    m_logo_annotations_isValid = false;

    m_product_search_results_isSet = false;
    m_product_search_results_isValid = false;

    m_safe_search_annotation_isSet = false;
    m_safe_search_annotation_isValid = false;

    m_text_annotations_isSet = false;
    m_text_annotations_isValid = false;

    m_web_detection_isSet = false;
    m_web_detection_isValid = false;
}

void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::fromJsonObject(QJsonObject json) {

    m_context_isValid = ::OpenAPI::fromJsonValue(m_context, json[QString("context")]);
    m_context_isSet = !json[QString("context")].isNull() && m_context_isValid;

    m_crop_hints_annotation_isValid = ::OpenAPI::fromJsonValue(m_crop_hints_annotation, json[QString("cropHintsAnnotation")]);
    m_crop_hints_annotation_isSet = !json[QString("cropHintsAnnotation")].isNull() && m_crop_hints_annotation_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_face_annotations_isValid = ::OpenAPI::fromJsonValue(m_face_annotations, json[QString("faceAnnotations")]);
    m_face_annotations_isSet = !json[QString("faceAnnotations")].isNull() && m_face_annotations_isValid;

    m_full_text_annotation_isValid = ::OpenAPI::fromJsonValue(m_full_text_annotation, json[QString("fullTextAnnotation")]);
    m_full_text_annotation_isSet = !json[QString("fullTextAnnotation")].isNull() && m_full_text_annotation_isValid;

    m_image_properties_annotation_isValid = ::OpenAPI::fromJsonValue(m_image_properties_annotation, json[QString("imagePropertiesAnnotation")]);
    m_image_properties_annotation_isSet = !json[QString("imagePropertiesAnnotation")].isNull() && m_image_properties_annotation_isValid;

    m_label_annotations_isValid = ::OpenAPI::fromJsonValue(m_label_annotations, json[QString("labelAnnotations")]);
    m_label_annotations_isSet = !json[QString("labelAnnotations")].isNull() && m_label_annotations_isValid;

    m_landmark_annotations_isValid = ::OpenAPI::fromJsonValue(m_landmark_annotations, json[QString("landmarkAnnotations")]);
    m_landmark_annotations_isSet = !json[QString("landmarkAnnotations")].isNull() && m_landmark_annotations_isValid;

    m_localized_object_annotations_isValid = ::OpenAPI::fromJsonValue(m_localized_object_annotations, json[QString("localizedObjectAnnotations")]);
    m_localized_object_annotations_isSet = !json[QString("localizedObjectAnnotations")].isNull() && m_localized_object_annotations_isValid;

    m_logo_annotations_isValid = ::OpenAPI::fromJsonValue(m_logo_annotations, json[QString("logoAnnotations")]);
    m_logo_annotations_isSet = !json[QString("logoAnnotations")].isNull() && m_logo_annotations_isValid;

    m_product_search_results_isValid = ::OpenAPI::fromJsonValue(m_product_search_results, json[QString("productSearchResults")]);
    m_product_search_results_isSet = !json[QString("productSearchResults")].isNull() && m_product_search_results_isValid;

    m_safe_search_annotation_isValid = ::OpenAPI::fromJsonValue(m_safe_search_annotation, json[QString("safeSearchAnnotation")]);
    m_safe_search_annotation_isSet = !json[QString("safeSearchAnnotation")].isNull() && m_safe_search_annotation_isValid;

    m_text_annotations_isValid = ::OpenAPI::fromJsonValue(m_text_annotations, json[QString("textAnnotations")]);
    m_text_annotations_isSet = !json[QString("textAnnotations")].isNull() && m_text_annotations_isValid;

    m_web_detection_isValid = ::OpenAPI::fromJsonValue(m_web_detection, json[QString("webDetection")]);
    m_web_detection_isSet = !json[QString("webDetection")].isNull() && m_web_detection_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_context.isSet()) {
        obj.insert(QString("context"), ::OpenAPI::toJsonValue(m_context));
    }
    if (m_crop_hints_annotation.isSet()) {
        obj.insert(QString("cropHintsAnnotation"), ::OpenAPI::toJsonValue(m_crop_hints_annotation));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_face_annotations.size() > 0) {
        obj.insert(QString("faceAnnotations"), ::OpenAPI::toJsonValue(m_face_annotations));
    }
    if (m_full_text_annotation.isSet()) {
        obj.insert(QString("fullTextAnnotation"), ::OpenAPI::toJsonValue(m_full_text_annotation));
    }
    if (m_image_properties_annotation.isSet()) {
        obj.insert(QString("imagePropertiesAnnotation"), ::OpenAPI::toJsonValue(m_image_properties_annotation));
    }
    if (m_label_annotations.size() > 0) {
        obj.insert(QString("labelAnnotations"), ::OpenAPI::toJsonValue(m_label_annotations));
    }
    if (m_landmark_annotations.size() > 0) {
        obj.insert(QString("landmarkAnnotations"), ::OpenAPI::toJsonValue(m_landmark_annotations));
    }
    if (m_localized_object_annotations.size() > 0) {
        obj.insert(QString("localizedObjectAnnotations"), ::OpenAPI::toJsonValue(m_localized_object_annotations));
    }
    if (m_logo_annotations.size() > 0) {
        obj.insert(QString("logoAnnotations"), ::OpenAPI::toJsonValue(m_logo_annotations));
    }
    if (m_product_search_results.isSet()) {
        obj.insert(QString("productSearchResults"), ::OpenAPI::toJsonValue(m_product_search_results));
    }
    if (m_safe_search_annotation.isSet()) {
        obj.insert(QString("safeSearchAnnotation"), ::OpenAPI::toJsonValue(m_safe_search_annotation));
    }
    if (m_text_annotations.size() > 0) {
        obj.insert(QString("textAnnotations"), ::OpenAPI::toJsonValue(m_text_annotations));
    }
    if (m_web_detection.isSet()) {
        obj.insert(QString("webDetection"), ::OpenAPI::toJsonValue(m_web_detection));
    }
    return obj;
}

OAIGoogleCloudVisionV1p1beta1ImageAnnotationContext OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getContext() const {
    return m_context;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setContext(const OAIGoogleCloudVisionV1p1beta1ImageAnnotationContext &context) {
    m_context = context;
    m_context_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_context_Set() const{
    return m_context_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_context_Valid() const{
    return m_context_isValid;
}

OAIGoogleCloudVisionV1p1beta1CropHintsAnnotation OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getCropHintsAnnotation() const {
    return m_crop_hints_annotation;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setCropHintsAnnotation(const OAIGoogleCloudVisionV1p1beta1CropHintsAnnotation &crop_hints_annotation) {
    m_crop_hints_annotation = crop_hints_annotation;
    m_crop_hints_annotation_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_crop_hints_annotation_Set() const{
    return m_crop_hints_annotation_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_crop_hints_annotation_Valid() const{
    return m_crop_hints_annotation_isValid;
}

OAIStatus OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getError() const {
    return m_error;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setError(const OAIStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_error_Valid() const{
    return m_error_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1FaceAnnotation> OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getFaceAnnotations() const {
    return m_face_annotations;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setFaceAnnotations(const QList<OAIGoogleCloudVisionV1p1beta1FaceAnnotation> &face_annotations) {
    m_face_annotations = face_annotations;
    m_face_annotations_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_face_annotations_Set() const{
    return m_face_annotations_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_face_annotations_Valid() const{
    return m_face_annotations_isValid;
}

OAIGoogleCloudVisionV1p1beta1TextAnnotation OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getFullTextAnnotation() const {
    return m_full_text_annotation;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setFullTextAnnotation(const OAIGoogleCloudVisionV1p1beta1TextAnnotation &full_text_annotation) {
    m_full_text_annotation = full_text_annotation;
    m_full_text_annotation_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_full_text_annotation_Set() const{
    return m_full_text_annotation_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_full_text_annotation_Valid() const{
    return m_full_text_annotation_isValid;
}

OAIGoogleCloudVisionV1p1beta1ImageProperties OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getImagePropertiesAnnotation() const {
    return m_image_properties_annotation;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setImagePropertiesAnnotation(const OAIGoogleCloudVisionV1p1beta1ImageProperties &image_properties_annotation) {
    m_image_properties_annotation = image_properties_annotation;
    m_image_properties_annotation_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_image_properties_annotation_Set() const{
    return m_image_properties_annotation_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_image_properties_annotation_Valid() const{
    return m_image_properties_annotation_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getLabelAnnotations() const {
    return m_label_annotations;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setLabelAnnotations(const QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> &label_annotations) {
    m_label_annotations = label_annotations;
    m_label_annotations_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_label_annotations_Set() const{
    return m_label_annotations_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_label_annotations_Valid() const{
    return m_label_annotations_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getLandmarkAnnotations() const {
    return m_landmark_annotations;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setLandmarkAnnotations(const QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> &landmark_annotations) {
    m_landmark_annotations = landmark_annotations;
    m_landmark_annotations_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_landmark_annotations_Set() const{
    return m_landmark_annotations_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_landmark_annotations_Valid() const{
    return m_landmark_annotations_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1LocalizedObjectAnnotation> OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getLocalizedObjectAnnotations() const {
    return m_localized_object_annotations;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setLocalizedObjectAnnotations(const QList<OAIGoogleCloudVisionV1p1beta1LocalizedObjectAnnotation> &localized_object_annotations) {
    m_localized_object_annotations = localized_object_annotations;
    m_localized_object_annotations_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_localized_object_annotations_Set() const{
    return m_localized_object_annotations_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_localized_object_annotations_Valid() const{
    return m_localized_object_annotations_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getLogoAnnotations() const {
    return m_logo_annotations;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setLogoAnnotations(const QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> &logo_annotations) {
    m_logo_annotations = logo_annotations;
    m_logo_annotations_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_logo_annotations_Set() const{
    return m_logo_annotations_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_logo_annotations_Valid() const{
    return m_logo_annotations_isValid;
}

OAIGoogleCloudVisionV1p1beta1ProductSearchResults OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getProductSearchResults() const {
    return m_product_search_results;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setProductSearchResults(const OAIGoogleCloudVisionV1p1beta1ProductSearchResults &product_search_results) {
    m_product_search_results = product_search_results;
    m_product_search_results_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_product_search_results_Set() const{
    return m_product_search_results_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_product_search_results_Valid() const{
    return m_product_search_results_isValid;
}

OAIGoogleCloudVisionV1p1beta1SafeSearchAnnotation OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getSafeSearchAnnotation() const {
    return m_safe_search_annotation;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setSafeSearchAnnotation(const OAIGoogleCloudVisionV1p1beta1SafeSearchAnnotation &safe_search_annotation) {
    m_safe_search_annotation = safe_search_annotation;
    m_safe_search_annotation_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_safe_search_annotation_Set() const{
    return m_safe_search_annotation_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_safe_search_annotation_Valid() const{
    return m_safe_search_annotation_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getTextAnnotations() const {
    return m_text_annotations;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setTextAnnotations(const QList<OAIGoogleCloudVisionV1p1beta1EntityAnnotation> &text_annotations) {
    m_text_annotations = text_annotations;
    m_text_annotations_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_text_annotations_Set() const{
    return m_text_annotations_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_text_annotations_Valid() const{
    return m_text_annotations_isValid;
}

OAIGoogleCloudVisionV1p1beta1WebDetection OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::getWebDetection() const {
    return m_web_detection;
}
void OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::setWebDetection(const OAIGoogleCloudVisionV1p1beta1WebDetection &web_detection) {
    m_web_detection = web_detection;
    m_web_detection_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_web_detection_Set() const{
    return m_web_detection_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::is_web_detection_Valid() const{
    return m_web_detection_isValid;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_crop_hints_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_face_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_text_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_properties_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmark_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_localized_object_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_search_results.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_search_annotation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_detection.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p1beta1AnnotateImageResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
