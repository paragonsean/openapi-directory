/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p1beta1ProductSearchParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p1beta1ProductSearchParams::OAIGoogleCloudVisionV1p1beta1ProductSearchParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p1beta1ProductSearchParams::OAIGoogleCloudVisionV1p1beta1ProductSearchParams() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p1beta1ProductSearchParams::~OAIGoogleCloudVisionV1p1beta1ProductSearchParams() {}

void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::initializeModel() {

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_product_categories_isSet = false;
    m_product_categories_isValid = false;

    m_product_set_isSet = false;
    m_product_set_isValid = false;
}

void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::fromJsonObject(QJsonObject json) {

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_product_categories_isValid = ::OpenAPI::fromJsonValue(m_product_categories, json[QString("productCategories")]);
    m_product_categories_isSet = !json[QString("productCategories")].isNull() && m_product_categories_isValid;

    m_product_set_isValid = ::OpenAPI::fromJsonValue(m_product_set, json[QString("productSet")]);
    m_product_set_isSet = !json[QString("productSet")].isNull() && m_product_set_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1ProductSearchParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p1beta1ProductSearchParams::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_product_categories.size() > 0) {
        obj.insert(QString("productCategories"), ::OpenAPI::toJsonValue(m_product_categories));
    }
    if (m_product_set_isSet) {
        obj.insert(QString("productSet"), ::OpenAPI::toJsonValue(m_product_set));
    }
    return obj;
}

OAIGoogleCloudVisionV1p1beta1BoundingPoly OAIGoogleCloudVisionV1p1beta1ProductSearchParams::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::setBoundingPoly(const OAIGoogleCloudVisionV1p1beta1BoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1ProductSearchParams::getFilter() const {
    return m_filter;
}
void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_filter_Valid() const{
    return m_filter_isValid;
}

QList<QString> OAIGoogleCloudVisionV1p1beta1ProductSearchParams::getProductCategories() const {
    return m_product_categories;
}
void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::setProductCategories(const QList<QString> &product_categories) {
    m_product_categories = product_categories;
    m_product_categories_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_product_categories_Set() const{
    return m_product_categories_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_product_categories_Valid() const{
    return m_product_categories_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1ProductSearchParams::getProductSet() const {
    return m_product_set;
}
void OAIGoogleCloudVisionV1p1beta1ProductSearchParams::setProductSet(const QString &product_set) {
    m_product_set = product_set;
    m_product_set_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_product_set_Set() const{
    return m_product_set_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::is_product_set_Valid() const{
    return m_product_set_isValid;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_set_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p1beta1ProductSearchParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
