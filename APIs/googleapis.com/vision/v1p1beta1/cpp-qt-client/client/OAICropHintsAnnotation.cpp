/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICropHintsAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICropHintsAnnotation::OAICropHintsAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICropHintsAnnotation::OAICropHintsAnnotation() {
    this->initializeModel();
}

OAICropHintsAnnotation::~OAICropHintsAnnotation() {}

void OAICropHintsAnnotation::initializeModel() {

    m_crop_hints_isSet = false;
    m_crop_hints_isValid = false;
}

void OAICropHintsAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICropHintsAnnotation::fromJsonObject(QJsonObject json) {

    m_crop_hints_isValid = ::OpenAPI::fromJsonValue(m_crop_hints, json[QString("cropHints")]);
    m_crop_hints_isSet = !json[QString("cropHints")].isNull() && m_crop_hints_isValid;
}

QString OAICropHintsAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICropHintsAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_crop_hints.size() > 0) {
        obj.insert(QString("cropHints"), ::OpenAPI::toJsonValue(m_crop_hints));
    }
    return obj;
}

QList<OAICropHint> OAICropHintsAnnotation::getCropHints() const {
    return m_crop_hints;
}
void OAICropHintsAnnotation::setCropHints(const QList<OAICropHint> &crop_hints) {
    m_crop_hints = crop_hints;
    m_crop_hints_isSet = true;
}

bool OAICropHintsAnnotation::is_crop_hints_Set() const{
    return m_crop_hints_isSet;
}

bool OAICropHintsAnnotation::is_crop_hints_Valid() const{
    return m_crop_hints_isValid;
}

bool OAICropHintsAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICropHintsAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
