/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupedResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupedResult::OAIGroupedResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupedResult::OAIGroupedResult() {
    this->initializeModel();
}

OAIGroupedResult::~OAIGroupedResult() {}

void OAIGroupedResult::initializeModel() {

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_object_annotations_isSet = false;
    m_object_annotations_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIGroupedResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupedResult::fromJsonObject(QJsonObject json) {

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_object_annotations_isValid = ::OpenAPI::fromJsonValue(m_object_annotations, json[QString("objectAnnotations")]);
    m_object_annotations_isSet = !json[QString("objectAnnotations")].isNull() && m_object_annotations_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIGroupedResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupedResult::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_object_annotations.size() > 0) {
        obj.insert(QString("objectAnnotations"), ::OpenAPI::toJsonValue(m_object_annotations));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

OAIBoundingPoly OAIGroupedResult::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGroupedResult::setBoundingPoly(const OAIBoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGroupedResult::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGroupedResult::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

QList<OAIObjectAnnotation> OAIGroupedResult::getObjectAnnotations() const {
    return m_object_annotations;
}
void OAIGroupedResult::setObjectAnnotations(const QList<OAIObjectAnnotation> &object_annotations) {
    m_object_annotations = object_annotations;
    m_object_annotations_isSet = true;
}

bool OAIGroupedResult::is_object_annotations_Set() const{
    return m_object_annotations_isSet;
}

bool OAIGroupedResult::is_object_annotations_Valid() const{
    return m_object_annotations_isValid;
}

QList<OAIResult> OAIGroupedResult::getResults() const {
    return m_results;
}
void OAIGroupedResult::setResults(const QList<OAIResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGroupedResult::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGroupedResult::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIGroupedResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_annotations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupedResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
