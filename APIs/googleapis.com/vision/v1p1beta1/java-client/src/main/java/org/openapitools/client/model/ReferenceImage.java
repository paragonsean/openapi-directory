/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BoundingPoly;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A &#x60;ReferenceImage&#x60; represents a product image and its associated metadata, such as bounding boxes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:33.892355-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReferenceImage {
  public static final String SERIALIZED_NAME_BOUNDING_POLYS = "boundingPolys";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLYS)
  private List<BoundingPoly> boundingPolys = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ReferenceImage() {
  }

  public ReferenceImage boundingPolys(List<BoundingPoly> boundingPolys) {
    this.boundingPolys = boundingPolys;
    return this;
  }

  public ReferenceImage addBoundingPolysItem(BoundingPoly boundingPolysItem) {
    if (this.boundingPolys == null) {
      this.boundingPolys = new ArrayList<>();
    }
    this.boundingPolys.add(boundingPolysItem);
    return this;
  }

  /**
   * Optional. Bounding polygons around the areas of interest in the reference image. If this field is empty, the system will try to detect regions of interest. At most 10 bounding polygons will be used. The provided shape is converted into a non-rotated rectangle. Once converted, the small edge of the rectangle must be greater than or equal to 300 pixels. The aspect ratio must be 1:4 or less (i.e. 1:3 is ok; 1:5 is not).
   * @return boundingPolys
   */
  @javax.annotation.Nullable
  public List<BoundingPoly> getBoundingPolys() {
    return boundingPolys;
  }

  public void setBoundingPolys(List<BoundingPoly> boundingPolys) {
    this.boundingPolys = boundingPolys;
  }


  public ReferenceImage name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the reference image. Format is: &#x60;projects/PROJECT_ID/locations/LOC_ID/products/PRODUCT_ID/referenceImages/IMAGE_ID&#x60;. This field is ignored when creating a reference image.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ReferenceImage uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Required. The Google Cloud Storage URI of the reference image. The URI must start with &#x60;gs://&#x60;.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReferenceImage referenceImage = (ReferenceImage) o;
    return Objects.equals(this.boundingPolys, referenceImage.boundingPolys) &&
        Objects.equals(this.name, referenceImage.name) &&
        Objects.equals(this.uri, referenceImage.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingPolys, name, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReferenceImage {\n");
    sb.append("    boundingPolys: ").append(toIndentedString(boundingPolys)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingPolys");
    openapiFields.add("name");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReferenceImage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReferenceImage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReferenceImage is not found in the empty JSON string", ReferenceImage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReferenceImage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReferenceImage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("boundingPolys") != null && !jsonObj.get("boundingPolys").isJsonNull()) {
        JsonArray jsonArrayboundingPolys = jsonObj.getAsJsonArray("boundingPolys");
        if (jsonArrayboundingPolys != null) {
          // ensure the json data is an array
          if (!jsonObj.get("boundingPolys").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `boundingPolys` to be an array in the JSON string but got `%s`", jsonObj.get("boundingPolys").toString()));
          }

          // validate the optional field `boundingPolys` (array)
          for (int i = 0; i < jsonArrayboundingPolys.size(); i++) {
            BoundingPoly.validateJsonElement(jsonArrayboundingPolys.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReferenceImage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReferenceImage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReferenceImage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReferenceImage.class));

       return (TypeAdapter<T>) new TypeAdapter<ReferenceImage>() {
           @Override
           public void write(JsonWriter out, ReferenceImage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReferenceImage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReferenceImage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReferenceImage
   * @throws IOException if the JSON string is invalid with respect to ReferenceImage
   */
  public static ReferenceImage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReferenceImage.class);
  }

  /**
   * Convert an instance of ReferenceImage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

