/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WebEntity;
import org.openapitools.client.model.WebImage;
import org.openapitools.client.model.WebLabel;
import org.openapitools.client.model.WebPage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Relevant information for the image from the Internet.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:33.892355-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WebDetection {
  public static final String SERIALIZED_NAME_BEST_GUESS_LABELS = "bestGuessLabels";
  @SerializedName(SERIALIZED_NAME_BEST_GUESS_LABELS)
  private List<WebLabel> bestGuessLabels = new ArrayList<>();

  public static final String SERIALIZED_NAME_FULL_MATCHING_IMAGES = "fullMatchingImages";
  @SerializedName(SERIALIZED_NAME_FULL_MATCHING_IMAGES)
  private List<WebImage> fullMatchingImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGES_WITH_MATCHING_IMAGES = "pagesWithMatchingImages";
  @SerializedName(SERIALIZED_NAME_PAGES_WITH_MATCHING_IMAGES)
  private List<WebPage> pagesWithMatchingImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARTIAL_MATCHING_IMAGES = "partialMatchingImages";
  @SerializedName(SERIALIZED_NAME_PARTIAL_MATCHING_IMAGES)
  private List<WebImage> partialMatchingImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_VISUALLY_SIMILAR_IMAGES = "visuallySimilarImages";
  @SerializedName(SERIALIZED_NAME_VISUALLY_SIMILAR_IMAGES)
  private List<WebImage> visuallySimilarImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEB_ENTITIES = "webEntities";
  @SerializedName(SERIALIZED_NAME_WEB_ENTITIES)
  private List<WebEntity> webEntities = new ArrayList<>();

  public WebDetection() {
  }

  public WebDetection bestGuessLabels(List<WebLabel> bestGuessLabels) {
    this.bestGuessLabels = bestGuessLabels;
    return this;
  }

  public WebDetection addBestGuessLabelsItem(WebLabel bestGuessLabelsItem) {
    if (this.bestGuessLabels == null) {
      this.bestGuessLabels = new ArrayList<>();
    }
    this.bestGuessLabels.add(bestGuessLabelsItem);
    return this;
  }

  /**
   * The service&#39;s best guess as to the topic of the request image. Inferred from similar images on the open web.
   * @return bestGuessLabels
   */
  @javax.annotation.Nullable
  public List<WebLabel> getBestGuessLabels() {
    return bestGuessLabels;
  }

  public void setBestGuessLabels(List<WebLabel> bestGuessLabels) {
    this.bestGuessLabels = bestGuessLabels;
  }


  public WebDetection fullMatchingImages(List<WebImage> fullMatchingImages) {
    this.fullMatchingImages = fullMatchingImages;
    return this;
  }

  public WebDetection addFullMatchingImagesItem(WebImage fullMatchingImagesItem) {
    if (this.fullMatchingImages == null) {
      this.fullMatchingImages = new ArrayList<>();
    }
    this.fullMatchingImages.add(fullMatchingImagesItem);
    return this;
  }

  /**
   * Fully matching images from the Internet. Can include resized copies of the query image.
   * @return fullMatchingImages
   */
  @javax.annotation.Nullable
  public List<WebImage> getFullMatchingImages() {
    return fullMatchingImages;
  }

  public void setFullMatchingImages(List<WebImage> fullMatchingImages) {
    this.fullMatchingImages = fullMatchingImages;
  }


  public WebDetection pagesWithMatchingImages(List<WebPage> pagesWithMatchingImages) {
    this.pagesWithMatchingImages = pagesWithMatchingImages;
    return this;
  }

  public WebDetection addPagesWithMatchingImagesItem(WebPage pagesWithMatchingImagesItem) {
    if (this.pagesWithMatchingImages == null) {
      this.pagesWithMatchingImages = new ArrayList<>();
    }
    this.pagesWithMatchingImages.add(pagesWithMatchingImagesItem);
    return this;
  }

  /**
   * Web pages containing the matching images from the Internet.
   * @return pagesWithMatchingImages
   */
  @javax.annotation.Nullable
  public List<WebPage> getPagesWithMatchingImages() {
    return pagesWithMatchingImages;
  }

  public void setPagesWithMatchingImages(List<WebPage> pagesWithMatchingImages) {
    this.pagesWithMatchingImages = pagesWithMatchingImages;
  }


  public WebDetection partialMatchingImages(List<WebImage> partialMatchingImages) {
    this.partialMatchingImages = partialMatchingImages;
    return this;
  }

  public WebDetection addPartialMatchingImagesItem(WebImage partialMatchingImagesItem) {
    if (this.partialMatchingImages == null) {
      this.partialMatchingImages = new ArrayList<>();
    }
    this.partialMatchingImages.add(partialMatchingImagesItem);
    return this;
  }

  /**
   * Partial matching images from the Internet. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.
   * @return partialMatchingImages
   */
  @javax.annotation.Nullable
  public List<WebImage> getPartialMatchingImages() {
    return partialMatchingImages;
  }

  public void setPartialMatchingImages(List<WebImage> partialMatchingImages) {
    this.partialMatchingImages = partialMatchingImages;
  }


  public WebDetection visuallySimilarImages(List<WebImage> visuallySimilarImages) {
    this.visuallySimilarImages = visuallySimilarImages;
    return this;
  }

  public WebDetection addVisuallySimilarImagesItem(WebImage visuallySimilarImagesItem) {
    if (this.visuallySimilarImages == null) {
      this.visuallySimilarImages = new ArrayList<>();
    }
    this.visuallySimilarImages.add(visuallySimilarImagesItem);
    return this;
  }

  /**
   * The visually similar image results.
   * @return visuallySimilarImages
   */
  @javax.annotation.Nullable
  public List<WebImage> getVisuallySimilarImages() {
    return visuallySimilarImages;
  }

  public void setVisuallySimilarImages(List<WebImage> visuallySimilarImages) {
    this.visuallySimilarImages = visuallySimilarImages;
  }


  public WebDetection webEntities(List<WebEntity> webEntities) {
    this.webEntities = webEntities;
    return this;
  }

  public WebDetection addWebEntitiesItem(WebEntity webEntitiesItem) {
    if (this.webEntities == null) {
      this.webEntities = new ArrayList<>();
    }
    this.webEntities.add(webEntitiesItem);
    return this;
  }

  /**
   * Deduced entities from similar images on the Internet.
   * @return webEntities
   */
  @javax.annotation.Nullable
  public List<WebEntity> getWebEntities() {
    return webEntities;
  }

  public void setWebEntities(List<WebEntity> webEntities) {
    this.webEntities = webEntities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebDetection webDetection = (WebDetection) o;
    return Objects.equals(this.bestGuessLabels, webDetection.bestGuessLabels) &&
        Objects.equals(this.fullMatchingImages, webDetection.fullMatchingImages) &&
        Objects.equals(this.pagesWithMatchingImages, webDetection.pagesWithMatchingImages) &&
        Objects.equals(this.partialMatchingImages, webDetection.partialMatchingImages) &&
        Objects.equals(this.visuallySimilarImages, webDetection.visuallySimilarImages) &&
        Objects.equals(this.webEntities, webDetection.webEntities);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestGuessLabels, fullMatchingImages, pagesWithMatchingImages, partialMatchingImages, visuallySimilarImages, webEntities);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebDetection {\n");
    sb.append("    bestGuessLabels: ").append(toIndentedString(bestGuessLabels)).append("\n");
    sb.append("    fullMatchingImages: ").append(toIndentedString(fullMatchingImages)).append("\n");
    sb.append("    pagesWithMatchingImages: ").append(toIndentedString(pagesWithMatchingImages)).append("\n");
    sb.append("    partialMatchingImages: ").append(toIndentedString(partialMatchingImages)).append("\n");
    sb.append("    visuallySimilarImages: ").append(toIndentedString(visuallySimilarImages)).append("\n");
    sb.append("    webEntities: ").append(toIndentedString(webEntities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bestGuessLabels");
    openapiFields.add("fullMatchingImages");
    openapiFields.add("pagesWithMatchingImages");
    openapiFields.add("partialMatchingImages");
    openapiFields.add("visuallySimilarImages");
    openapiFields.add("webEntities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebDetection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WebDetection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebDetection is not found in the empty JSON string", WebDetection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebDetection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebDetection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bestGuessLabels") != null && !jsonObj.get("bestGuessLabels").isJsonNull()) {
        JsonArray jsonArraybestGuessLabels = jsonObj.getAsJsonArray("bestGuessLabels");
        if (jsonArraybestGuessLabels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bestGuessLabels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bestGuessLabels` to be an array in the JSON string but got `%s`", jsonObj.get("bestGuessLabels").toString()));
          }

          // validate the optional field `bestGuessLabels` (array)
          for (int i = 0; i < jsonArraybestGuessLabels.size(); i++) {
            WebLabel.validateJsonElement(jsonArraybestGuessLabels.get(i));
          };
        }
      }
      if (jsonObj.get("fullMatchingImages") != null && !jsonObj.get("fullMatchingImages").isJsonNull()) {
        JsonArray jsonArrayfullMatchingImages = jsonObj.getAsJsonArray("fullMatchingImages");
        if (jsonArrayfullMatchingImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fullMatchingImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fullMatchingImages` to be an array in the JSON string but got `%s`", jsonObj.get("fullMatchingImages").toString()));
          }

          // validate the optional field `fullMatchingImages` (array)
          for (int i = 0; i < jsonArrayfullMatchingImages.size(); i++) {
            WebImage.validateJsonElement(jsonArrayfullMatchingImages.get(i));
          };
        }
      }
      if (jsonObj.get("pagesWithMatchingImages") != null && !jsonObj.get("pagesWithMatchingImages").isJsonNull()) {
        JsonArray jsonArraypagesWithMatchingImages = jsonObj.getAsJsonArray("pagesWithMatchingImages");
        if (jsonArraypagesWithMatchingImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pagesWithMatchingImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pagesWithMatchingImages` to be an array in the JSON string but got `%s`", jsonObj.get("pagesWithMatchingImages").toString()));
          }

          // validate the optional field `pagesWithMatchingImages` (array)
          for (int i = 0; i < jsonArraypagesWithMatchingImages.size(); i++) {
            WebPage.validateJsonElement(jsonArraypagesWithMatchingImages.get(i));
          };
        }
      }
      if (jsonObj.get("partialMatchingImages") != null && !jsonObj.get("partialMatchingImages").isJsonNull()) {
        JsonArray jsonArraypartialMatchingImages = jsonObj.getAsJsonArray("partialMatchingImages");
        if (jsonArraypartialMatchingImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partialMatchingImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partialMatchingImages` to be an array in the JSON string but got `%s`", jsonObj.get("partialMatchingImages").toString()));
          }

          // validate the optional field `partialMatchingImages` (array)
          for (int i = 0; i < jsonArraypartialMatchingImages.size(); i++) {
            WebImage.validateJsonElement(jsonArraypartialMatchingImages.get(i));
          };
        }
      }
      if (jsonObj.get("visuallySimilarImages") != null && !jsonObj.get("visuallySimilarImages").isJsonNull()) {
        JsonArray jsonArrayvisuallySimilarImages = jsonObj.getAsJsonArray("visuallySimilarImages");
        if (jsonArrayvisuallySimilarImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("visuallySimilarImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `visuallySimilarImages` to be an array in the JSON string but got `%s`", jsonObj.get("visuallySimilarImages").toString()));
          }

          // validate the optional field `visuallySimilarImages` (array)
          for (int i = 0; i < jsonArrayvisuallySimilarImages.size(); i++) {
            WebImage.validateJsonElement(jsonArrayvisuallySimilarImages.get(i));
          };
        }
      }
      if (jsonObj.get("webEntities") != null && !jsonObj.get("webEntities").isJsonNull()) {
        JsonArray jsonArraywebEntities = jsonObj.getAsJsonArray("webEntities");
        if (jsonArraywebEntities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("webEntities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `webEntities` to be an array in the JSON string but got `%s`", jsonObj.get("webEntities").toString()));
          }

          // validate the optional field `webEntities` (array)
          for (int i = 0; i < jsonArraywebEntities.size(); i++) {
            WebEntity.validateJsonElement(jsonArraywebEntities.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebDetection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebDetection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebDetection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebDetection.class));

       return (TypeAdapter<T>) new TypeAdapter<WebDetection>() {
           @Override
           public void write(JsonWriter out, WebDetection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebDetection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebDetection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebDetection
   * @throws IOException if the JSON string is invalid with respect to WebDetection
   */
  public static WebDetection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebDetection.class);
  }

  /**
   * Convert an instance of WebDetection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

