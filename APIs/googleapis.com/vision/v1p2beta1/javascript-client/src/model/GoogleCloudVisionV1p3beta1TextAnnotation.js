/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p3beta1Page from './GoogleCloudVisionV1p3beta1Page';

/**
 * The GoogleCloudVisionV1p3beta1TextAnnotation model module.
 * @module model/GoogleCloudVisionV1p3beta1TextAnnotation
 * @version v1p2beta1
 */
class GoogleCloudVisionV1p3beta1TextAnnotation {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p3beta1TextAnnotation</code>.
     * TextAnnotation contains a structured representation of OCR extracted text. The hierarchy of an OCR extracted text structure is like this: TextAnnotation -&gt; Page -&gt; Block -&gt; Paragraph -&gt; Word -&gt; Symbol Each structural component, starting from Page, may further have their own properties. Properties describe detected languages, breaks etc.. Please refer to the TextAnnotation.TextProperty message definition below for more detail.
     * @alias module:model/GoogleCloudVisionV1p3beta1TextAnnotation
     */
    constructor() { 
        
        GoogleCloudVisionV1p3beta1TextAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p3beta1TextAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p3beta1TextAnnotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p3beta1TextAnnotation} The populated <code>GoogleCloudVisionV1p3beta1TextAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p3beta1TextAnnotation();

            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], [GoogleCloudVisionV1p3beta1Page]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p3beta1TextAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p3beta1TextAnnotation</code>.
     */
    static validateJSON(data) {
        if (data['pages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pages'])) {
                throw new Error("Expected the field `pages` to be an array in the JSON data but got " + data['pages']);
            }
            // validate the optional field `pages` (array)
            for (const item of data['pages']) {
                GoogleCloudVisionV1p3beta1Page.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * List of pages detected by OCR.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1Page>} pages
 */
GoogleCloudVisionV1p3beta1TextAnnotation.prototype['pages'] = undefined;

/**
 * UTF-8 text detected on the pages.
 * @member {String} text
 */
GoogleCloudVisionV1p3beta1TextAnnotation.prototype['text'] = undefined;






export default GoogleCloudVisionV1p3beta1TextAnnotation;

