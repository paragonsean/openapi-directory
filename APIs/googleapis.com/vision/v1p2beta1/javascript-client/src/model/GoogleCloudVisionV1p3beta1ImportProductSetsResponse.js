/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p3beta1ReferenceImage from './GoogleCloudVisionV1p3beta1ReferenceImage';
import Status from './Status';

/**
 * The GoogleCloudVisionV1p3beta1ImportProductSetsResponse model module.
 * @module model/GoogleCloudVisionV1p3beta1ImportProductSetsResponse
 * @version v1p2beta1
 */
class GoogleCloudVisionV1p3beta1ImportProductSetsResponse {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p3beta1ImportProductSetsResponse</code>.
     * Response message for the &#x60;ImportProductSets&#x60; method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.
     * @alias module:model/GoogleCloudVisionV1p3beta1ImportProductSetsResponse
     */
    constructor() { 
        
        GoogleCloudVisionV1p3beta1ImportProductSetsResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p3beta1ImportProductSetsResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p3beta1ImportProductSetsResponse} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p3beta1ImportProductSetsResponse} The populated <code>GoogleCloudVisionV1p3beta1ImportProductSetsResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p3beta1ImportProductSetsResponse();

            if (data.hasOwnProperty('referenceImages')) {
                obj['referenceImages'] = ApiClient.convertToType(data['referenceImages'], [GoogleCloudVisionV1p3beta1ReferenceImage]);
            }
            if (data.hasOwnProperty('statuses')) {
                obj['statuses'] = ApiClient.convertToType(data['statuses'], [Status]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p3beta1ImportProductSetsResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p3beta1ImportProductSetsResponse</code>.
     */
    static validateJSON(data) {
        if (data['referenceImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['referenceImages'])) {
                throw new Error("Expected the field `referenceImages` to be an array in the JSON data but got " + data['referenceImages']);
            }
            // validate the optional field `referenceImages` (array)
            for (const item of data['referenceImages']) {
                GoogleCloudVisionV1p3beta1ReferenceImage.validateJSON(item);
            };
        }
        if (data['statuses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['statuses'])) {
                throw new Error("Expected the field `statuses` to be an array in the JSON data but got " + data['statuses']);
            }
            // validate the optional field `statuses` (array)
            for (const item of data['statuses']) {
                Status.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The list of reference_images that are imported successfully.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1ReferenceImage>} referenceImages
 */
GoogleCloudVisionV1p3beta1ImportProductSetsResponse.prototype['referenceImages'] = undefined;

/**
 * The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.
 * @member {Array.<module:model/Status>} statuses
 */
GoogleCloudVisionV1p3beta1ImportProductSetsResponse.prototype['statuses'] = undefined;






export default GoogleCloudVisionV1p3beta1ImportProductSetsResponse;

