/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p3beta1CropHintsAnnotation from './GoogleCloudVisionV1p3beta1CropHintsAnnotation';
import GoogleCloudVisionV1p3beta1EntityAnnotation from './GoogleCloudVisionV1p3beta1EntityAnnotation';
import GoogleCloudVisionV1p3beta1FaceAnnotation from './GoogleCloudVisionV1p3beta1FaceAnnotation';
import GoogleCloudVisionV1p3beta1ImageAnnotationContext from './GoogleCloudVisionV1p3beta1ImageAnnotationContext';
import GoogleCloudVisionV1p3beta1ImageProperties from './GoogleCloudVisionV1p3beta1ImageProperties';
import GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation from './GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation';
import GoogleCloudVisionV1p3beta1ProductSearchResults from './GoogleCloudVisionV1p3beta1ProductSearchResults';
import GoogleCloudVisionV1p3beta1SafeSearchAnnotation from './GoogleCloudVisionV1p3beta1SafeSearchAnnotation';
import GoogleCloudVisionV1p3beta1TextAnnotation from './GoogleCloudVisionV1p3beta1TextAnnotation';
import GoogleCloudVisionV1p3beta1WebDetection from './GoogleCloudVisionV1p3beta1WebDetection';
import Status from './Status';

/**
 * The GoogleCloudVisionV1p3beta1AnnotateImageResponse model module.
 * @module model/GoogleCloudVisionV1p3beta1AnnotateImageResponse
 * @version v1p2beta1
 */
class GoogleCloudVisionV1p3beta1AnnotateImageResponse {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p3beta1AnnotateImageResponse</code>.
     * Response to an image annotation request.
     * @alias module:model/GoogleCloudVisionV1p3beta1AnnotateImageResponse
     */
    constructor() { 
        
        GoogleCloudVisionV1p3beta1AnnotateImageResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p3beta1AnnotateImageResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p3beta1AnnotateImageResponse} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p3beta1AnnotateImageResponse} The populated <code>GoogleCloudVisionV1p3beta1AnnotateImageResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p3beta1AnnotateImageResponse();

            if (data.hasOwnProperty('context')) {
                obj['context'] = GoogleCloudVisionV1p3beta1ImageAnnotationContext.constructFromObject(data['context']);
            }
            if (data.hasOwnProperty('cropHintsAnnotation')) {
                obj['cropHintsAnnotation'] = GoogleCloudVisionV1p3beta1CropHintsAnnotation.constructFromObject(data['cropHintsAnnotation']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Status.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('faceAnnotations')) {
                obj['faceAnnotations'] = ApiClient.convertToType(data['faceAnnotations'], [GoogleCloudVisionV1p3beta1FaceAnnotation]);
            }
            if (data.hasOwnProperty('fullTextAnnotation')) {
                obj['fullTextAnnotation'] = GoogleCloudVisionV1p3beta1TextAnnotation.constructFromObject(data['fullTextAnnotation']);
            }
            if (data.hasOwnProperty('imagePropertiesAnnotation')) {
                obj['imagePropertiesAnnotation'] = GoogleCloudVisionV1p3beta1ImageProperties.constructFromObject(data['imagePropertiesAnnotation']);
            }
            if (data.hasOwnProperty('labelAnnotations')) {
                obj['labelAnnotations'] = ApiClient.convertToType(data['labelAnnotations'], [GoogleCloudVisionV1p3beta1EntityAnnotation]);
            }
            if (data.hasOwnProperty('landmarkAnnotations')) {
                obj['landmarkAnnotations'] = ApiClient.convertToType(data['landmarkAnnotations'], [GoogleCloudVisionV1p3beta1EntityAnnotation]);
            }
            if (data.hasOwnProperty('localizedObjectAnnotations')) {
                obj['localizedObjectAnnotations'] = ApiClient.convertToType(data['localizedObjectAnnotations'], [GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation]);
            }
            if (data.hasOwnProperty('logoAnnotations')) {
                obj['logoAnnotations'] = ApiClient.convertToType(data['logoAnnotations'], [GoogleCloudVisionV1p3beta1EntityAnnotation]);
            }
            if (data.hasOwnProperty('productSearchResults')) {
                obj['productSearchResults'] = GoogleCloudVisionV1p3beta1ProductSearchResults.constructFromObject(data['productSearchResults']);
            }
            if (data.hasOwnProperty('safeSearchAnnotation')) {
                obj['safeSearchAnnotation'] = GoogleCloudVisionV1p3beta1SafeSearchAnnotation.constructFromObject(data['safeSearchAnnotation']);
            }
            if (data.hasOwnProperty('textAnnotations')) {
                obj['textAnnotations'] = ApiClient.convertToType(data['textAnnotations'], [GoogleCloudVisionV1p3beta1EntityAnnotation]);
            }
            if (data.hasOwnProperty('webDetection')) {
                obj['webDetection'] = GoogleCloudVisionV1p3beta1WebDetection.constructFromObject(data['webDetection']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p3beta1AnnotateImageResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p3beta1AnnotateImageResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `context`
        if (data['context']) { // data not null
          GoogleCloudVisionV1p3beta1ImageAnnotationContext.validateJSON(data['context']);
        }
        // validate the optional field `cropHintsAnnotation`
        if (data['cropHintsAnnotation']) { // data not null
          GoogleCloudVisionV1p3beta1CropHintsAnnotation.validateJSON(data['cropHintsAnnotation']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Status.validateJSON(data['error']);
        }
        if (data['faceAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['faceAnnotations'])) {
                throw new Error("Expected the field `faceAnnotations` to be an array in the JSON data but got " + data['faceAnnotations']);
            }
            // validate the optional field `faceAnnotations` (array)
            for (const item of data['faceAnnotations']) {
                GoogleCloudVisionV1p3beta1FaceAnnotation.validateJSON(item);
            };
        }
        // validate the optional field `fullTextAnnotation`
        if (data['fullTextAnnotation']) { // data not null
          GoogleCloudVisionV1p3beta1TextAnnotation.validateJSON(data['fullTextAnnotation']);
        }
        // validate the optional field `imagePropertiesAnnotation`
        if (data['imagePropertiesAnnotation']) { // data not null
          GoogleCloudVisionV1p3beta1ImageProperties.validateJSON(data['imagePropertiesAnnotation']);
        }
        if (data['labelAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['labelAnnotations'])) {
                throw new Error("Expected the field `labelAnnotations` to be an array in the JSON data but got " + data['labelAnnotations']);
            }
            // validate the optional field `labelAnnotations` (array)
            for (const item of data['labelAnnotations']) {
                GoogleCloudVisionV1p3beta1EntityAnnotation.validateJSON(item);
            };
        }
        if (data['landmarkAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['landmarkAnnotations'])) {
                throw new Error("Expected the field `landmarkAnnotations` to be an array in the JSON data but got " + data['landmarkAnnotations']);
            }
            // validate the optional field `landmarkAnnotations` (array)
            for (const item of data['landmarkAnnotations']) {
                GoogleCloudVisionV1p3beta1EntityAnnotation.validateJSON(item);
            };
        }
        if (data['localizedObjectAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['localizedObjectAnnotations'])) {
                throw new Error("Expected the field `localizedObjectAnnotations` to be an array in the JSON data but got " + data['localizedObjectAnnotations']);
            }
            // validate the optional field `localizedObjectAnnotations` (array)
            for (const item of data['localizedObjectAnnotations']) {
                GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation.validateJSON(item);
            };
        }
        if (data['logoAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['logoAnnotations'])) {
                throw new Error("Expected the field `logoAnnotations` to be an array in the JSON data but got " + data['logoAnnotations']);
            }
            // validate the optional field `logoAnnotations` (array)
            for (const item of data['logoAnnotations']) {
                GoogleCloudVisionV1p3beta1EntityAnnotation.validateJSON(item);
            };
        }
        // validate the optional field `productSearchResults`
        if (data['productSearchResults']) { // data not null
          GoogleCloudVisionV1p3beta1ProductSearchResults.validateJSON(data['productSearchResults']);
        }
        // validate the optional field `safeSearchAnnotation`
        if (data['safeSearchAnnotation']) { // data not null
          GoogleCloudVisionV1p3beta1SafeSearchAnnotation.validateJSON(data['safeSearchAnnotation']);
        }
        if (data['textAnnotations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['textAnnotations'])) {
                throw new Error("Expected the field `textAnnotations` to be an array in the JSON data but got " + data['textAnnotations']);
            }
            // validate the optional field `textAnnotations` (array)
            for (const item of data['textAnnotations']) {
                GoogleCloudVisionV1p3beta1EntityAnnotation.validateJSON(item);
            };
        }
        // validate the optional field `webDetection`
        if (data['webDetection']) { // data not null
          GoogleCloudVisionV1p3beta1WebDetection.validateJSON(data['webDetection']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudVisionV1p3beta1ImageAnnotationContext} context
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['context'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p3beta1CropHintsAnnotation} cropHintsAnnotation
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['cropHintsAnnotation'] = undefined;

/**
 * @member {module:model/Status} error
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['error'] = undefined;

/**
 * If present, face detection has completed successfully.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1FaceAnnotation>} faceAnnotations
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['faceAnnotations'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p3beta1TextAnnotation} fullTextAnnotation
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['fullTextAnnotation'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p3beta1ImageProperties} imagePropertiesAnnotation
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['imagePropertiesAnnotation'] = undefined;

/**
 * If present, label detection has completed successfully.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1EntityAnnotation>} labelAnnotations
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['labelAnnotations'] = undefined;

/**
 * If present, landmark detection has completed successfully.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1EntityAnnotation>} landmarkAnnotations
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['landmarkAnnotations'] = undefined;

/**
 * If present, localized object detection has completed successfully. This will be sorted descending by confidence score.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1LocalizedObjectAnnotation>} localizedObjectAnnotations
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['localizedObjectAnnotations'] = undefined;

/**
 * If present, logo detection has completed successfully.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1EntityAnnotation>} logoAnnotations
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['logoAnnotations'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p3beta1ProductSearchResults} productSearchResults
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['productSearchResults'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p3beta1SafeSearchAnnotation} safeSearchAnnotation
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['safeSearchAnnotation'] = undefined;

/**
 * If present, text (OCR) detection has completed successfully.
 * @member {Array.<module:model/GoogleCloudVisionV1p3beta1EntityAnnotation>} textAnnotations
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['textAnnotations'] = undefined;

/**
 * @member {module:model/GoogleCloudVisionV1p3beta1WebDetection} webDetection
 */
GoogleCloudVisionV1p3beta1AnnotateImageResponse.prototype['webDetection'] = undefined;






export default GoogleCloudVisionV1p3beta1AnnotateImageResponse;

