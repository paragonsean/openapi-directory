/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p2beta1Position from './GoogleCloudVisionV1p2beta1Position';

/**
 * The GoogleCloudVisionV1p2beta1FaceAnnotationLandmark model module.
 * @module model/GoogleCloudVisionV1p2beta1FaceAnnotationLandmark
 * @version v1p2beta1
 */
class GoogleCloudVisionV1p2beta1FaceAnnotationLandmark {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p2beta1FaceAnnotationLandmark</code>.
     * A face-specific landmark (for example, a face feature).
     * @alias module:model/GoogleCloudVisionV1p2beta1FaceAnnotationLandmark
     */
    constructor() { 
        
        GoogleCloudVisionV1p2beta1FaceAnnotationLandmark.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p2beta1FaceAnnotationLandmark</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p2beta1FaceAnnotationLandmark} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p2beta1FaceAnnotationLandmark} The populated <code>GoogleCloudVisionV1p2beta1FaceAnnotationLandmark</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p2beta1FaceAnnotationLandmark();

            if (data.hasOwnProperty('position')) {
                obj['position'] = GoogleCloudVisionV1p2beta1Position.constructFromObject(data['position']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p2beta1FaceAnnotationLandmark</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p2beta1FaceAnnotationLandmark</code>.
     */
    static validateJSON(data) {
        // validate the optional field `position`
        if (data['position']) { // data not null
          GoogleCloudVisionV1p2beta1Position.validateJSON(data['position']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudVisionV1p2beta1Position} position
 */
GoogleCloudVisionV1p2beta1FaceAnnotationLandmark.prototype['position'] = undefined;

/**
 * Face landmark type.
 * @member {module:model/GoogleCloudVisionV1p2beta1FaceAnnotationLandmark.TypeEnum} type
 */
GoogleCloudVisionV1p2beta1FaceAnnotationLandmark.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudVisionV1p2beta1FaceAnnotationLandmark['TypeEnum'] = {

    /**
     * value: "UNKNOWN_LANDMARK"
     * @const
     */
    "UNKNOWN_LANDMARK": "UNKNOWN_LANDMARK",

    /**
     * value: "LEFT_EYE"
     * @const
     */
    "LEFT_EYE": "LEFT_EYE",

    /**
     * value: "RIGHT_EYE"
     * @const
     */
    "RIGHT_EYE": "RIGHT_EYE",

    /**
     * value: "LEFT_OF_LEFT_EYEBROW"
     * @const
     */
    "LEFT_OF_LEFT_EYEBROW": "LEFT_OF_LEFT_EYEBROW",

    /**
     * value: "RIGHT_OF_LEFT_EYEBROW"
     * @const
     */
    "RIGHT_OF_LEFT_EYEBROW": "RIGHT_OF_LEFT_EYEBROW",

    /**
     * value: "LEFT_OF_RIGHT_EYEBROW"
     * @const
     */
    "LEFT_OF_RIGHT_EYEBROW": "LEFT_OF_RIGHT_EYEBROW",

    /**
     * value: "RIGHT_OF_RIGHT_EYEBROW"
     * @const
     */
    "RIGHT_OF_RIGHT_EYEBROW": "RIGHT_OF_RIGHT_EYEBROW",

    /**
     * value: "MIDPOINT_BETWEEN_EYES"
     * @const
     */
    "MIDPOINT_BETWEEN_EYES": "MIDPOINT_BETWEEN_EYES",

    /**
     * value: "NOSE_TIP"
     * @const
     */
    "NOSE_TIP": "NOSE_TIP",

    /**
     * value: "UPPER_LIP"
     * @const
     */
    "UPPER_LIP": "UPPER_LIP",

    /**
     * value: "LOWER_LIP"
     * @const
     */
    "LOWER_LIP": "LOWER_LIP",

    /**
     * value: "MOUTH_LEFT"
     * @const
     */
    "MOUTH_LEFT": "MOUTH_LEFT",

    /**
     * value: "MOUTH_RIGHT"
     * @const
     */
    "MOUTH_RIGHT": "MOUTH_RIGHT",

    /**
     * value: "MOUTH_CENTER"
     * @const
     */
    "MOUTH_CENTER": "MOUTH_CENTER",

    /**
     * value: "NOSE_BOTTOM_RIGHT"
     * @const
     */
    "NOSE_BOTTOM_RIGHT": "NOSE_BOTTOM_RIGHT",

    /**
     * value: "NOSE_BOTTOM_LEFT"
     * @const
     */
    "NOSE_BOTTOM_LEFT": "NOSE_BOTTOM_LEFT",

    /**
     * value: "NOSE_BOTTOM_CENTER"
     * @const
     */
    "NOSE_BOTTOM_CENTER": "NOSE_BOTTOM_CENTER",

    /**
     * value: "LEFT_EYE_TOP_BOUNDARY"
     * @const
     */
    "LEFT_EYE_TOP_BOUNDARY": "LEFT_EYE_TOP_BOUNDARY",

    /**
     * value: "LEFT_EYE_RIGHT_CORNER"
     * @const
     */
    "LEFT_EYE_RIGHT_CORNER": "LEFT_EYE_RIGHT_CORNER",

    /**
     * value: "LEFT_EYE_BOTTOM_BOUNDARY"
     * @const
     */
    "LEFT_EYE_BOTTOM_BOUNDARY": "LEFT_EYE_BOTTOM_BOUNDARY",

    /**
     * value: "LEFT_EYE_LEFT_CORNER"
     * @const
     */
    "LEFT_EYE_LEFT_CORNER": "LEFT_EYE_LEFT_CORNER",

    /**
     * value: "RIGHT_EYE_TOP_BOUNDARY"
     * @const
     */
    "RIGHT_EYE_TOP_BOUNDARY": "RIGHT_EYE_TOP_BOUNDARY",

    /**
     * value: "RIGHT_EYE_RIGHT_CORNER"
     * @const
     */
    "RIGHT_EYE_RIGHT_CORNER": "RIGHT_EYE_RIGHT_CORNER",

    /**
     * value: "RIGHT_EYE_BOTTOM_BOUNDARY"
     * @const
     */
    "RIGHT_EYE_BOTTOM_BOUNDARY": "RIGHT_EYE_BOTTOM_BOUNDARY",

    /**
     * value: "RIGHT_EYE_LEFT_CORNER"
     * @const
     */
    "RIGHT_EYE_LEFT_CORNER": "RIGHT_EYE_LEFT_CORNER",

    /**
     * value: "LEFT_EYEBROW_UPPER_MIDPOINT"
     * @const
     */
    "LEFT_EYEBROW_UPPER_MIDPOINT": "LEFT_EYEBROW_UPPER_MIDPOINT",

    /**
     * value: "RIGHT_EYEBROW_UPPER_MIDPOINT"
     * @const
     */
    "RIGHT_EYEBROW_UPPER_MIDPOINT": "RIGHT_EYEBROW_UPPER_MIDPOINT",

    /**
     * value: "LEFT_EAR_TRAGION"
     * @const
     */
    "LEFT_EAR_TRAGION": "LEFT_EAR_TRAGION",

    /**
     * value: "RIGHT_EAR_TRAGION"
     * @const
     */
    "RIGHT_EAR_TRAGION": "RIGHT_EAR_TRAGION",

    /**
     * value: "LEFT_EYE_PUPIL"
     * @const
     */
    "LEFT_EYE_PUPIL": "LEFT_EYE_PUPIL",

    /**
     * value: "RIGHT_EYE_PUPIL"
     * @const
     */
    "RIGHT_EYE_PUPIL": "RIGHT_EYE_PUPIL",

    /**
     * value: "FOREHEAD_GLABELLA"
     * @const
     */
    "FOREHEAD_GLABELLA": "FOREHEAD_GLABELLA",

    /**
     * value: "CHIN_GNATHION"
     * @const
     */
    "CHIN_GNATHION": "CHIN_GNATHION",

    /**
     * value: "CHIN_LEFT_GONION"
     * @const
     */
    "CHIN_LEFT_GONION": "CHIN_LEFT_GONION",

    /**
     * value: "CHIN_RIGHT_GONION"
     * @const
     */
    "CHIN_RIGHT_GONION": "CHIN_RIGHT_GONION",

    /**
     * value: "LEFT_CHEEK_CENTER"
     * @const
     */
    "LEFT_CHEEK_CENTER": "LEFT_CHEEK_CENTER",

    /**
     * value: "RIGHT_CHEEK_CENTER"
     * @const
     */
    "RIGHT_CHEEK_CENTER": "RIGHT_CHEEK_CENTER"
};



export default GoogleCloudVisionV1p2beta1FaceAnnotationLandmark;

