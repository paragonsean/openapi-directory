/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWebDetection.h
 *
 * Relevant information for the image from the Internet.
 */

#ifndef OAIWebDetection_H
#define OAIWebDetection_H

#include <QJsonObject>

#include "OAIWebEntity.h"
#include "OAIWebImage.h"
#include "OAIWebLabel.h"
#include "OAIWebPage.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWebLabel;
class OAIWebImage;
class OAIWebPage;
class OAIWebEntity;

class OAIWebDetection : public OAIObject {
public:
    OAIWebDetection();
    OAIWebDetection(QString json);
    ~OAIWebDetection() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIWebLabel> getBestGuessLabels() const;
    void setBestGuessLabels(const QList<OAIWebLabel> &best_guess_labels);
    bool is_best_guess_labels_Set() const;
    bool is_best_guess_labels_Valid() const;

    QList<OAIWebImage> getFullMatchingImages() const;
    void setFullMatchingImages(const QList<OAIWebImage> &full_matching_images);
    bool is_full_matching_images_Set() const;
    bool is_full_matching_images_Valid() const;

    QList<OAIWebPage> getPagesWithMatchingImages() const;
    void setPagesWithMatchingImages(const QList<OAIWebPage> &pages_with_matching_images);
    bool is_pages_with_matching_images_Set() const;
    bool is_pages_with_matching_images_Valid() const;

    QList<OAIWebImage> getPartialMatchingImages() const;
    void setPartialMatchingImages(const QList<OAIWebImage> &partial_matching_images);
    bool is_partial_matching_images_Set() const;
    bool is_partial_matching_images_Valid() const;

    QList<OAIWebImage> getVisuallySimilarImages() const;
    void setVisuallySimilarImages(const QList<OAIWebImage> &visually_similar_images);
    bool is_visually_similar_images_Set() const;
    bool is_visually_similar_images_Valid() const;

    QList<OAIWebEntity> getWebEntities() const;
    void setWebEntities(const QList<OAIWebEntity> &web_entities);
    bool is_web_entities_Set() const;
    bool is_web_entities_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIWebLabel> m_best_guess_labels;
    bool m_best_guess_labels_isSet;
    bool m_best_guess_labels_isValid;

    QList<OAIWebImage> m_full_matching_images;
    bool m_full_matching_images_isSet;
    bool m_full_matching_images_isValid;

    QList<OAIWebPage> m_pages_with_matching_images;
    bool m_pages_with_matching_images_isSet;
    bool m_pages_with_matching_images_isValid;

    QList<OAIWebImage> m_partial_matching_images;
    bool m_partial_matching_images_isSet;
    bool m_partial_matching_images_isValid;

    QList<OAIWebImage> m_visually_similar_images;
    bool m_visually_similar_images_isSet;
    bool m_visually_similar_images_isValid;

    QList<OAIWebEntity> m_web_entities;
    bool m_web_entities_isSet;
    bool m_web_entities_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWebDetection)

#endif // OAIWebDetection_H
