/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p1beta1CropHint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p1beta1CropHint::OAIGoogleCloudVisionV1p1beta1CropHint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p1beta1CropHint::OAIGoogleCloudVisionV1p1beta1CropHint() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p1beta1CropHint::~OAIGoogleCloudVisionV1p1beta1CropHint() {}

void OAIGoogleCloudVisionV1p1beta1CropHint::initializeModel() {

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_importance_fraction_isSet = false;
    m_importance_fraction_isValid = false;
}

void OAIGoogleCloudVisionV1p1beta1CropHint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p1beta1CropHint::fromJsonObject(QJsonObject json) {

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_importance_fraction_isValid = ::OpenAPI::fromJsonValue(m_importance_fraction, json[QString("importanceFraction")]);
    m_importance_fraction_isSet = !json[QString("importanceFraction")].isNull() && m_importance_fraction_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1CropHint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p1beta1CropHint::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_importance_fraction_isSet) {
        obj.insert(QString("importanceFraction"), ::OpenAPI::toJsonValue(m_importance_fraction));
    }
    return obj;
}

OAIGoogleCloudVisionV1p1beta1BoundingPoly OAIGoogleCloudVisionV1p1beta1CropHint::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGoogleCloudVisionV1p1beta1CropHint::setBoundingPoly(const OAIGoogleCloudVisionV1p1beta1BoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

float OAIGoogleCloudVisionV1p1beta1CropHint::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVisionV1p1beta1CropHint::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::is_confidence_Valid() const{
    return m_confidence_isValid;
}

float OAIGoogleCloudVisionV1p1beta1CropHint::getImportanceFraction() const {
    return m_importance_fraction;
}
void OAIGoogleCloudVisionV1p1beta1CropHint::setImportanceFraction(const float &importance_fraction) {
    m_importance_fraction = importance_fraction;
    m_importance_fraction_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::is_importance_fraction_Set() const{
    return m_importance_fraction_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::is_importance_fraction_Valid() const{
    return m_importance_fraction_isValid;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importance_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p1beta1CropHint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
