/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::~OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest() {}

void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::initializeModel() {

    m_features_isSet = false;
    m_features_isValid = false;

    m_image_context_isSet = false;
    m_image_context_isValid = false;

    m_input_config_isSet = false;
    m_input_config_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;
}

void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::fromJsonObject(QJsonObject json) {

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_image_context_isValid = ::OpenAPI::fromJsonValue(m_image_context, json[QString("imageContext")]);
    m_image_context_isSet = !json[QString("imageContext")].isNull() && m_image_context_isValid;

    m_input_config_isValid = ::OpenAPI::fromJsonValue(m_input_config, json[QString("inputConfig")]);
    m_input_config_isSet = !json[QString("inputConfig")].isNull() && m_input_config_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_image_context.isSet()) {
        obj.insert(QString("imageContext"), ::OpenAPI::toJsonValue(m_image_context));
    }
    if (m_input_config.isSet()) {
        obj.insert(QString("inputConfig"), ::OpenAPI::toJsonValue(m_input_config));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    return obj;
}

QList<OAIGoogleCloudVisionV1p2beta1Feature> OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::getFeatures() const {
    return m_features;
}
void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::setFeatures(const QList<OAIGoogleCloudVisionV1p2beta1Feature> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_features_Set() const{
    return m_features_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_features_Valid() const{
    return m_features_isValid;
}

OAIGoogleCloudVisionV1p2beta1ImageContext OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::getImageContext() const {
    return m_image_context;
}
void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::setImageContext(const OAIGoogleCloudVisionV1p2beta1ImageContext &image_context) {
    m_image_context = image_context;
    m_image_context_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_image_context_Set() const{
    return m_image_context_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_image_context_Valid() const{
    return m_image_context_isValid;
}

OAIGoogleCloudVisionV1p2beta1InputConfig OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::getInputConfig() const {
    return m_input_config;
}
void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::setInputConfig(const OAIGoogleCloudVisionV1p2beta1InputConfig &input_config) {
    m_input_config = input_config;
    m_input_config_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_input_config_Set() const{
    return m_input_config_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_input_config_Valid() const{
    return m_input_config_isValid;
}

OAIGoogleCloudVisionV1p2beta1OutputConfig OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::getOutputConfig() const {
    return m_output_config;
}
void OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::setOutputConfig(const OAIGoogleCloudVisionV1p2beta1OutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p2beta1AsyncAnnotateFileRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
