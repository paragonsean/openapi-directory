/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p1beta1Block.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p1beta1Block::OAIGoogleCloudVisionV1p1beta1Block(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p1beta1Block::OAIGoogleCloudVisionV1p1beta1Block() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p1beta1Block::~OAIGoogleCloudVisionV1p1beta1Block() {}

void OAIGoogleCloudVisionV1p1beta1Block::initializeModel() {

    m_block_type_isSet = false;
    m_block_type_isValid = false;

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_paragraphs_isSet = false;
    m_paragraphs_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;
}

void OAIGoogleCloudVisionV1p1beta1Block::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p1beta1Block::fromJsonObject(QJsonObject json) {

    m_block_type_isValid = ::OpenAPI::fromJsonValue(m_block_type, json[QString("blockType")]);
    m_block_type_isSet = !json[QString("blockType")].isNull() && m_block_type_isValid;

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_paragraphs_isValid = ::OpenAPI::fromJsonValue(m_paragraphs, json[QString("paragraphs")]);
    m_paragraphs_isSet = !json[QString("paragraphs")].isNull() && m_paragraphs_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1Block::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p1beta1Block::asJsonObject() const {
    QJsonObject obj;
    if (m_block_type_isSet) {
        obj.insert(QString("blockType"), ::OpenAPI::toJsonValue(m_block_type));
    }
    if (m_bounding_box.isSet()) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_paragraphs.size() > 0) {
        obj.insert(QString("paragraphs"), ::OpenAPI::toJsonValue(m_paragraphs));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    return obj;
}

QString OAIGoogleCloudVisionV1p1beta1Block::getBlockType() const {
    return m_block_type;
}
void OAIGoogleCloudVisionV1p1beta1Block::setBlockType(const QString &block_type) {
    m_block_type = block_type;
    m_block_type_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_block_type_Set() const{
    return m_block_type_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_block_type_Valid() const{
    return m_block_type_isValid;
}

OAIGoogleCloudVisionV1p1beta1BoundingPoly OAIGoogleCloudVisionV1p1beta1Block::getBoundingBox() const {
    return m_bounding_box;
}
void OAIGoogleCloudVisionV1p1beta1Block::setBoundingBox(const OAIGoogleCloudVisionV1p1beta1BoundingPoly &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

float OAIGoogleCloudVisionV1p1beta1Block::getConfidence() const {
    return m_confidence;
}
void OAIGoogleCloudVisionV1p1beta1Block::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_confidence_Valid() const{
    return m_confidence_isValid;
}

QList<OAIGoogleCloudVisionV1p1beta1Paragraph> OAIGoogleCloudVisionV1p1beta1Block::getParagraphs() const {
    return m_paragraphs;
}
void OAIGoogleCloudVisionV1p1beta1Block::setParagraphs(const QList<OAIGoogleCloudVisionV1p1beta1Paragraph> &paragraphs) {
    m_paragraphs = paragraphs;
    m_paragraphs_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_paragraphs_Set() const{
    return m_paragraphs_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_paragraphs_Valid() const{
    return m_paragraphs_isValid;
}

OAIGoogleCloudVisionV1p1beta1TextAnnotationTextProperty OAIGoogleCloudVisionV1p1beta1Block::getProperty() const {
    return m_property;
}
void OAIGoogleCloudVisionV1p1beta1Block::setProperty(const OAIGoogleCloudVisionV1p1beta1TextAnnotationTextProperty &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_property_Set() const{
    return m_property_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1Block::is_property_Valid() const{
    return m_property_isValid;
}

bool OAIGoogleCloudVisionV1p1beta1Block::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_block_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounding_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_paragraphs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p1beta1Block::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
