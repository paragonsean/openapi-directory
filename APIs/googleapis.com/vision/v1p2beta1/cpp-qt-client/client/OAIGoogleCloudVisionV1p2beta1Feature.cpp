/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p2beta1Feature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p2beta1Feature::OAIGoogleCloudVisionV1p2beta1Feature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p2beta1Feature::OAIGoogleCloudVisionV1p2beta1Feature() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p2beta1Feature::~OAIGoogleCloudVisionV1p2beta1Feature() {}

void OAIGoogleCloudVisionV1p2beta1Feature::initializeModel() {

    m_max_results_isSet = false;
    m_max_results_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGoogleCloudVisionV1p2beta1Feature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p2beta1Feature::fromJsonObject(QJsonObject json) {

    m_max_results_isValid = ::OpenAPI::fromJsonValue(m_max_results, json[QString("maxResults")]);
    m_max_results_isSet = !json[QString("maxResults")].isNull() && m_max_results_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1Feature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p2beta1Feature::asJsonObject() const {
    QJsonObject obj;
    if (m_max_results_isSet) {
        obj.insert(QString("maxResults"), ::OpenAPI::toJsonValue(m_max_results));
    }
    if (m_model_isSet) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIGoogleCloudVisionV1p2beta1Feature::getMaxResults() const {
    return m_max_results;
}
void OAIGoogleCloudVisionV1p2beta1Feature::setMaxResults(const qint32 &max_results) {
    m_max_results = max_results;
    m_max_results_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::is_max_results_Set() const{
    return m_max_results_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::is_max_results_Valid() const{
    return m_max_results_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1Feature::getModel() const {
    return m_model;
}
void OAIGoogleCloudVisionV1p2beta1Feature::setModel(const QString &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::is_model_Set() const{
    return m_model_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::is_model_Valid() const{
    return m_model_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1Feature::getType() const {
    return m_type;
}
void OAIGoogleCloudVisionV1p2beta1Feature::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_max_results_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p2beta1Feature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
