/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p2beta1InputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p2beta1InputConfig::OAIGoogleCloudVisionV1p2beta1InputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p2beta1InputConfig::OAIGoogleCloudVisionV1p2beta1InputConfig() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p2beta1InputConfig::~OAIGoogleCloudVisionV1p2beta1InputConfig() {}

void OAIGoogleCloudVisionV1p2beta1InputConfig::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_gcs_source_isSet = false;
    m_gcs_source_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIGoogleCloudVisionV1p2beta1InputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p2beta1InputConfig::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_gcs_source_isValid = ::OpenAPI::fromJsonValue(m_gcs_source, json[QString("gcsSource")]);
    m_gcs_source_isSet = !json[QString("gcsSource")].isNull() && m_gcs_source_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1InputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p2beta1InputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_gcs_source.isSet()) {
        obj.insert(QString("gcsSource"), ::OpenAPI::toJsonValue(m_gcs_source));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QByteArray OAIGoogleCloudVisionV1p2beta1InputConfig::getContent() const {
    return m_content;
}
void OAIGoogleCloudVisionV1p2beta1InputConfig::setContent(const QByteArray &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::is_content_Set() const{
    return m_content_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::is_content_Valid() const{
    return m_content_isValid;
}

OAIGoogleCloudVisionV1p2beta1GcsSource OAIGoogleCloudVisionV1p2beta1InputConfig::getGcsSource() const {
    return m_gcs_source;
}
void OAIGoogleCloudVisionV1p2beta1InputConfig::setGcsSource(const OAIGoogleCloudVisionV1p2beta1GcsSource &gcs_source) {
    m_gcs_source = gcs_source;
    m_gcs_source_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::is_gcs_source_Set() const{
    return m_gcs_source_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::is_gcs_source_Valid() const{
    return m_gcs_source_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1InputConfig::getMimeType() const {
    return m_mime_type;
}
void OAIGoogleCloudVisionV1p2beta1InputConfig::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_source.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p2beta1InputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
