# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.color import Color
from openapi_server import util


class ColorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color: Color=None, pixel_fraction: float=None, score: float=None):
        """ColorInfo - a model defined in OpenAPI

        :param color: The color of this ColorInfo.
        :param pixel_fraction: The pixel_fraction of this ColorInfo.
        :param score: The score of this ColorInfo.
        """
        self.openapi_types = {
            'color': Color,
            'pixel_fraction': float,
            'score': float
        }

        self.attribute_map = {
            'color': 'color',
            'pixel_fraction': 'pixelFraction',
            'score': 'score'
        }

        self._color = color
        self._pixel_fraction = pixel_fraction
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ColorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ColorInfo of this ColorInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self):
        """Gets the color of this ColorInfo.


        :return: The color of this ColorInfo.
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ColorInfo.


        :param color: The color of this ColorInfo.
        :type color: Color
        """

        self._color = color

    @property
    def pixel_fraction(self):
        """Gets the pixel_fraction of this ColorInfo.

        The fraction of pixels the color occupies in the image. Value in range [0, 1].

        :return: The pixel_fraction of this ColorInfo.
        :rtype: float
        """
        return self._pixel_fraction

    @pixel_fraction.setter
    def pixel_fraction(self, pixel_fraction):
        """Sets the pixel_fraction of this ColorInfo.

        The fraction of pixels the color occupies in the image. Value in range [0, 1].

        :param pixel_fraction: The pixel_fraction of this ColorInfo.
        :type pixel_fraction: float
        """

        self._pixel_fraction = pixel_fraction

    @property
    def score(self):
        """Gets the score of this ColorInfo.

        Image-specific score for this color. Value in range [0, 1].

        :return: The score of this ColorInfo.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ColorInfo.

        Image-specific score for this color. Value in range [0, 1].

        :param score: The score of this ColorInfo.
        :type score: float
        """

        self._score = score
