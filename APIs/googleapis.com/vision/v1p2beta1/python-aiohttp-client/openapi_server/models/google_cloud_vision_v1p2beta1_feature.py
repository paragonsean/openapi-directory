# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudVisionV1p2beta1Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results: int=None, model: str=None, type: str=None):
        """GoogleCloudVisionV1p2beta1Feature - a model defined in OpenAPI

        :param max_results: The max_results of this GoogleCloudVisionV1p2beta1Feature.
        :param model: The model of this GoogleCloudVisionV1p2beta1Feature.
        :param type: The type of this GoogleCloudVisionV1p2beta1Feature.
        """
        self.openapi_types = {
            'max_results': int,
            'model': str,
            'type': str
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'model': 'model',
            'type': 'type'
        }

        self._max_results = max_results
        self._model = model
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p2beta1Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p2beta1Feature of this GoogleCloudVisionV1p2beta1Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self):
        """Gets the max_results of this GoogleCloudVisionV1p2beta1Feature.

        Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`.

        :return: The max_results of this GoogleCloudVisionV1p2beta1Feature.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results):
        """Sets the max_results of this GoogleCloudVisionV1p2beta1Feature.

        Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`.

        :param max_results: The max_results of this GoogleCloudVisionV1p2beta1Feature.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def model(self):
        """Gets the model of this GoogleCloudVisionV1p2beta1Feature.

        Model to use for the feature. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\". `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support \"builtin/weekly\" for the bleeding edge release updated weekly.

        :return: The model of this GoogleCloudVisionV1p2beta1Feature.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GoogleCloudVisionV1p2beta1Feature.

        Model to use for the feature. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\". `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support \"builtin/weekly\" for the bleeding edge release updated weekly.

        :param model: The model of this GoogleCloudVisionV1p2beta1Feature.
        :type model: str
        """

        self._model = model

    @property
    def type(self):
        """Gets the type of this GoogleCloudVisionV1p2beta1Feature.

        The feature type.

        :return: The type of this GoogleCloudVisionV1p2beta1Feature.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GoogleCloudVisionV1p2beta1Feature.

        The feature type.

        :param type: The type of this GoogleCloudVisionV1p2beta1Feature.
        :type type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "FACE_DETECTION", "LANDMARK_DETECTION", "LOGO_DETECTION", "LABEL_DETECTION", "TEXT_DETECTION", "DOCUMENT_TEXT_DETECTION", "SAFE_SEARCH_DETECTION", "IMAGE_PROPERTIES", "CROP_HINTS", "WEB_DETECTION", "PRODUCT_SEARCH", "OBJECT_LOCALIZATION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
