# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudVisionV1p2beta1SafeSearchAnnotation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult: str=None, medical: str=None, racy: str=None, spoof: str=None, violence: str=None):
        """GoogleCloudVisionV1p2beta1SafeSearchAnnotation - a model defined in OpenAPI

        :param adult: The adult of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :param medical: The medical of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :param racy: The racy of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :param spoof: The spoof of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :param violence: The violence of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        """
        self.openapi_types = {
            'adult': str,
            'medical': str,
            'racy': str,
            'spoof': str,
            'violence': str
        }

        self.attribute_map = {
            'adult': 'adult',
            'medical': 'medical',
            'racy': 'racy',
            'spoof': 'spoof',
            'violence': 'violence'
        }

        self._adult = adult
        self._medical = medical
        self._racy = racy
        self._spoof = spoof
        self._violence = violence

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudVisionV1p2beta1SafeSearchAnnotation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudVisionV1p2beta1SafeSearchAnnotation of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult(self):
        """Gets the adult of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.

        :return: The adult of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :rtype: str
        """
        return self._adult

    @adult.setter
    def adult(self, adult):
        """Sets the adult of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.

        :param adult: The adult of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :type adult: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if adult not in allowed_values:
            raise ValueError(
                "Invalid value for `adult` ({0}), must be one of {1}"
                .format(adult, allowed_values)
            )

        self._adult = adult

    @property
    def medical(self):
        """Gets the medical of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Likelihood that this is a medical image.

        :return: The medical of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :rtype: str
        """
        return self._medical

    @medical.setter
    def medical(self, medical):
        """Sets the medical of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Likelihood that this is a medical image.

        :param medical: The medical of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :type medical: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if medical not in allowed_values:
            raise ValueError(
                "Invalid value for `medical` ({0}), must be one of {1}"
                .format(medical, allowed_values)
            )

        self._medical = medical

    @property
    def racy(self):
        """Gets the racy of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.

        :return: The racy of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :rtype: str
        """
        return self._racy

    @racy.setter
    def racy(self, racy):
        """Sets the racy of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.

        :param racy: The racy of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :type racy: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if racy not in allowed_values:
            raise ValueError(
                "Invalid value for `racy` ({0}), must be one of {1}"
                .format(racy, allowed_values)
            )

        self._racy = racy

    @property
    def spoof(self):
        """Gets the spoof of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.

        :return: The spoof of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :rtype: str
        """
        return self._spoof

    @spoof.setter
    def spoof(self, spoof):
        """Sets the spoof of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.

        :param spoof: The spoof of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :type spoof: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if spoof not in allowed_values:
            raise ValueError(
                "Invalid value for `spoof` ({0}), must be one of {1}"
                .format(spoof, allowed_values)
            )

        self._spoof = spoof

    @property
    def violence(self):
        """Gets the violence of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Likelihood that this image contains violent content. Violent content may include death, serious harm, or injury to individuals or groups of individuals.

        :return: The violence of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :rtype: str
        """
        return self._violence

    @violence.setter
    def violence(self, violence):
        """Sets the violence of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.

        Likelihood that this image contains violent content. Violent content may include death, serious harm, or injury to individuals or groups of individuals.

        :param violence: The violence of this GoogleCloudVisionV1p2beta1SafeSearchAnnotation.
        :type violence: str
        """
        allowed_values = ["UNKNOWN", "VERY_UNLIKELY", "UNLIKELY", "POSSIBLE", "LIKELY", "VERY_LIKELY"]  # noqa: E501
        if violence not in allowed_values:
            raise ValueError(
                "Invalid value for `violence` ({0}), must be one of {1}"
                .format(violence, allowed_values)
            )

        self._violence = violence
