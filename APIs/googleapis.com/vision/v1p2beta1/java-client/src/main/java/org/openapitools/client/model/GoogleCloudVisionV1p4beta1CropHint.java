/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudVisionV1p4beta1BoundingPoly;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Single crop hint that is used to generate a new crop when serving an image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:44.794741-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVisionV1p4beta1CropHint {
  public static final String SERIALIZED_NAME_BOUNDING_POLY = "boundingPoly";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLY)
  private GoogleCloudVisionV1p4beta1BoundingPoly boundingPoly;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_IMPORTANCE_FRACTION = "importanceFraction";
  @SerializedName(SERIALIZED_NAME_IMPORTANCE_FRACTION)
  private Float importanceFraction;

  public GoogleCloudVisionV1p4beta1CropHint() {
  }

  public GoogleCloudVisionV1p4beta1CropHint boundingPoly(GoogleCloudVisionV1p4beta1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * Get boundingPoly
   * @return boundingPoly
   */
  @javax.annotation.Nullable
  public GoogleCloudVisionV1p4beta1BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  public void setBoundingPoly(GoogleCloudVisionV1p4beta1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
  }


  public GoogleCloudVisionV1p4beta1CropHint confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence of this being a salient region. Range [0, 1].
   * @return confidence
   */
  @javax.annotation.Nullable
  public Float getConfidence() {
    return confidence;
  }

  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public GoogleCloudVisionV1p4beta1CropHint importanceFraction(Float importanceFraction) {
    this.importanceFraction = importanceFraction;
    return this;
  }

  /**
   * Fraction of importance of this salient region with respect to the original image.
   * @return importanceFraction
   */
  @javax.annotation.Nullable
  public Float getImportanceFraction() {
    return importanceFraction;
  }

  public void setImportanceFraction(Float importanceFraction) {
    this.importanceFraction = importanceFraction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVisionV1p4beta1CropHint googleCloudVisionV1p4beta1CropHint = (GoogleCloudVisionV1p4beta1CropHint) o;
    return Objects.equals(this.boundingPoly, googleCloudVisionV1p4beta1CropHint.boundingPoly) &&
        Objects.equals(this.confidence, googleCloudVisionV1p4beta1CropHint.confidence) &&
        Objects.equals(this.importanceFraction, googleCloudVisionV1p4beta1CropHint.importanceFraction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingPoly, confidence, importanceFraction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVisionV1p4beta1CropHint {\n");
    sb.append("    boundingPoly: ").append(toIndentedString(boundingPoly)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    importanceFraction: ").append(toIndentedString(importanceFraction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingPoly");
    openapiFields.add("confidence");
    openapiFields.add("importanceFraction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVisionV1p4beta1CropHint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVisionV1p4beta1CropHint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVisionV1p4beta1CropHint is not found in the empty JSON string", GoogleCloudVisionV1p4beta1CropHint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVisionV1p4beta1CropHint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVisionV1p4beta1CropHint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boundingPoly`
      if (jsonObj.get("boundingPoly") != null && !jsonObj.get("boundingPoly").isJsonNull()) {
        GoogleCloudVisionV1p4beta1BoundingPoly.validateJsonElement(jsonObj.get("boundingPoly"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVisionV1p4beta1CropHint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVisionV1p4beta1CropHint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVisionV1p4beta1CropHint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVisionV1p4beta1CropHint.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVisionV1p4beta1CropHint>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVisionV1p4beta1CropHint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVisionV1p4beta1CropHint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVisionV1p4beta1CropHint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVisionV1p4beta1CropHint
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVisionV1p4beta1CropHint
   */
  public static GoogleCloudVisionV1p4beta1CropHint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVisionV1p4beta1CropHint.class);
  }

  /**
   * Convert an instance of GoogleCloudVisionV1p4beta1CropHint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

