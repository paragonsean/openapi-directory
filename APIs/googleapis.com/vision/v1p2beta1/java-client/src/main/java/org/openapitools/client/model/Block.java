/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BoundingPoly;
import org.openapitools.client.model.Paragraph;
import org.openapitools.client.model.TextProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Logical element on the page.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:44.794741-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Block {
  /**
   * Detected block type (text, image etc) for this block.
   */
  @JsonAdapter(BlockTypeEnum.Adapter.class)
  public enum BlockTypeEnum {
    UNKNOWN("UNKNOWN"),
    
    TEXT("TEXT"),
    
    TABLE("TABLE"),
    
    PICTURE("PICTURE"),
    
    RULER("RULER"),
    
    BARCODE("BARCODE");

    private String value;

    BlockTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlockTypeEnum fromValue(String value) {
      for (BlockTypeEnum b : BlockTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlockTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlockTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlockTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlockTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlockTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLOCK_TYPE = "blockType";
  @SerializedName(SERIALIZED_NAME_BLOCK_TYPE)
  private BlockTypeEnum blockType;

  public static final String SERIALIZED_NAME_BOUNDING_BOX = "boundingBox";
  @SerializedName(SERIALIZED_NAME_BOUNDING_BOX)
  private BoundingPoly boundingBox;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_PARAGRAPHS = "paragraphs";
  @SerializedName(SERIALIZED_NAME_PARAGRAPHS)
  private List<Paragraph> paragraphs = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY = "property";
  @SerializedName(SERIALIZED_NAME_PROPERTY)
  private TextProperty property;

  public Block() {
  }

  public Block blockType(BlockTypeEnum blockType) {
    this.blockType = blockType;
    return this;
  }

  /**
   * Detected block type (text, image etc) for this block.
   * @return blockType
   */
  @javax.annotation.Nullable
  public BlockTypeEnum getBlockType() {
    return blockType;
  }

  public void setBlockType(BlockTypeEnum blockType) {
    this.blockType = blockType;
  }


  public Block boundingBox(BoundingPoly boundingBox) {
    this.boundingBox = boundingBox;
    return this;
  }

  /**
   * Get boundingBox
   * @return boundingBox
   */
  @javax.annotation.Nullable
  public BoundingPoly getBoundingBox() {
    return boundingBox;
  }

  public void setBoundingBox(BoundingPoly boundingBox) {
    this.boundingBox = boundingBox;
  }


  public Block confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * Confidence of the OCR results on the block. Range [0, 1].
   * @return confidence
   */
  @javax.annotation.Nullable
  public Float getConfidence() {
    return confidence;
  }

  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public Block paragraphs(List<Paragraph> paragraphs) {
    this.paragraphs = paragraphs;
    return this;
  }

  public Block addParagraphsItem(Paragraph paragraphsItem) {
    if (this.paragraphs == null) {
      this.paragraphs = new ArrayList<>();
    }
    this.paragraphs.add(paragraphsItem);
    return this;
  }

  /**
   * List of paragraphs in this block (if this blocks is of type text).
   * @return paragraphs
   */
  @javax.annotation.Nullable
  public List<Paragraph> getParagraphs() {
    return paragraphs;
  }

  public void setParagraphs(List<Paragraph> paragraphs) {
    this.paragraphs = paragraphs;
  }


  public Block property(TextProperty property) {
    this.property = property;
    return this;
  }

  /**
   * Get property
   * @return property
   */
  @javax.annotation.Nullable
  public TextProperty getProperty() {
    return property;
  }

  public void setProperty(TextProperty property) {
    this.property = property;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Block block = (Block) o;
    return Objects.equals(this.blockType, block.blockType) &&
        Objects.equals(this.boundingBox, block.boundingBox) &&
        Objects.equals(this.confidence, block.confidence) &&
        Objects.equals(this.paragraphs, block.paragraphs) &&
        Objects.equals(this.property, block.property);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blockType, boundingBox, confidence, paragraphs, property);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Block {\n");
    sb.append("    blockType: ").append(toIndentedString(blockType)).append("\n");
    sb.append("    boundingBox: ").append(toIndentedString(boundingBox)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    paragraphs: ").append(toIndentedString(paragraphs)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("blockType");
    openapiFields.add("boundingBox");
    openapiFields.add("confidence");
    openapiFields.add("paragraphs");
    openapiFields.add("property");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Block
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Block.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Block is not found in the empty JSON string", Block.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Block.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Block` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("blockType") != null && !jsonObj.get("blockType").isJsonNull()) && !jsonObj.get("blockType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blockType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blockType").toString()));
      }
      // validate the optional field `blockType`
      if (jsonObj.get("blockType") != null && !jsonObj.get("blockType").isJsonNull()) {
        BlockTypeEnum.validateJsonElement(jsonObj.get("blockType"));
      }
      // validate the optional field `boundingBox`
      if (jsonObj.get("boundingBox") != null && !jsonObj.get("boundingBox").isJsonNull()) {
        BoundingPoly.validateJsonElement(jsonObj.get("boundingBox"));
      }
      if (jsonObj.get("paragraphs") != null && !jsonObj.get("paragraphs").isJsonNull()) {
        JsonArray jsonArrayparagraphs = jsonObj.getAsJsonArray("paragraphs");
        if (jsonArrayparagraphs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paragraphs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paragraphs` to be an array in the JSON string but got `%s`", jsonObj.get("paragraphs").toString()));
          }

          // validate the optional field `paragraphs` (array)
          for (int i = 0; i < jsonArrayparagraphs.size(); i++) {
            Paragraph.validateJsonElement(jsonArrayparagraphs.get(i));
          };
        }
      }
      // validate the optional field `property`
      if (jsonObj.get("property") != null && !jsonObj.get("property").isJsonNull()) {
        TextProperty.validateJsonElement(jsonObj.get("property"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Block.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Block' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Block> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Block.class));

       return (TypeAdapter<T>) new TypeAdapter<Block>() {
           @Override
           public void write(JsonWriter out, Block value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Block read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Block given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Block
   * @throws IOException if the JSON string is invalid with respect to Block
   */
  public static Block fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Block.class);
  }

  /**
   * Convert an instance of Block to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

