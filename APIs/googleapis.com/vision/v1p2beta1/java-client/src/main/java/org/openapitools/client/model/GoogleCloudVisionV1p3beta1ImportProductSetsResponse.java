/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudVisionV1p3beta1ReferenceImage;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for the &#x60;ImportProductSets&#x60; method. This message is returned by the google.longrunning.Operations.GetOperation method in the returned google.longrunning.Operation.response field.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:44.794741-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVisionV1p3beta1ImportProductSetsResponse {
  public static final String SERIALIZED_NAME_REFERENCE_IMAGES = "referenceImages";
  @SerializedName(SERIALIZED_NAME_REFERENCE_IMAGES)
  private List<GoogleCloudVisionV1p3beta1ReferenceImage> referenceImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private List<Status> statuses = new ArrayList<>();

  public GoogleCloudVisionV1p3beta1ImportProductSetsResponse() {
  }

  public GoogleCloudVisionV1p3beta1ImportProductSetsResponse referenceImages(List<GoogleCloudVisionV1p3beta1ReferenceImage> referenceImages) {
    this.referenceImages = referenceImages;
    return this;
  }

  public GoogleCloudVisionV1p3beta1ImportProductSetsResponse addReferenceImagesItem(GoogleCloudVisionV1p3beta1ReferenceImage referenceImagesItem) {
    if (this.referenceImages == null) {
      this.referenceImages = new ArrayList<>();
    }
    this.referenceImages.add(referenceImagesItem);
    return this;
  }

  /**
   * The list of reference_images that are imported successfully.
   * @return referenceImages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVisionV1p3beta1ReferenceImage> getReferenceImages() {
    return referenceImages;
  }

  public void setReferenceImages(List<GoogleCloudVisionV1p3beta1ReferenceImage> referenceImages) {
    this.referenceImages = referenceImages;
  }


  public GoogleCloudVisionV1p3beta1ImportProductSetsResponse statuses(List<Status> statuses) {
    this.statuses = statuses;
    return this;
  }

  public GoogleCloudVisionV1p3beta1ImportProductSetsResponse addStatusesItem(Status statusesItem) {
    if (this.statuses == null) {
      this.statuses = new ArrayList<>();
    }
    this.statuses.add(statusesItem);
    return this;
  }

  /**
   * The rpc status for each ImportProductSet request, including both successes and errors. The number of statuses here matches the number of lines in the csv file, and statuses[i] stores the success or failure status of processing the i-th line of the csv, starting from line 0.
   * @return statuses
   */
  @javax.annotation.Nullable
  public List<Status> getStatuses() {
    return statuses;
  }

  public void setStatuses(List<Status> statuses) {
    this.statuses = statuses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVisionV1p3beta1ImportProductSetsResponse googleCloudVisionV1p3beta1ImportProductSetsResponse = (GoogleCloudVisionV1p3beta1ImportProductSetsResponse) o;
    return Objects.equals(this.referenceImages, googleCloudVisionV1p3beta1ImportProductSetsResponse.referenceImages) &&
        Objects.equals(this.statuses, googleCloudVisionV1p3beta1ImportProductSetsResponse.statuses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(referenceImages, statuses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVisionV1p3beta1ImportProductSetsResponse {\n");
    sb.append("    referenceImages: ").append(toIndentedString(referenceImages)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("referenceImages");
    openapiFields.add("statuses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVisionV1p3beta1ImportProductSetsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVisionV1p3beta1ImportProductSetsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVisionV1p3beta1ImportProductSetsResponse is not found in the empty JSON string", GoogleCloudVisionV1p3beta1ImportProductSetsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVisionV1p3beta1ImportProductSetsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVisionV1p3beta1ImportProductSetsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("referenceImages") != null && !jsonObj.get("referenceImages").isJsonNull()) {
        JsonArray jsonArrayreferenceImages = jsonObj.getAsJsonArray("referenceImages");
        if (jsonArrayreferenceImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("referenceImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `referenceImages` to be an array in the JSON string but got `%s`", jsonObj.get("referenceImages").toString()));
          }

          // validate the optional field `referenceImages` (array)
          for (int i = 0; i < jsonArrayreferenceImages.size(); i++) {
            GoogleCloudVisionV1p3beta1ReferenceImage.validateJsonElement(jsonArrayreferenceImages.get(i));
          };
        }
      }
      if (jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) {
        JsonArray jsonArraystatuses = jsonObj.getAsJsonArray("statuses");
        if (jsonArraystatuses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("statuses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `statuses` to be an array in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
          }

          // validate the optional field `statuses` (array)
          for (int i = 0; i < jsonArraystatuses.size(); i++) {
            Status.validateJsonElement(jsonArraystatuses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVisionV1p3beta1ImportProductSetsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVisionV1p3beta1ImportProductSetsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVisionV1p3beta1ImportProductSetsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVisionV1p3beta1ImportProductSetsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVisionV1p3beta1ImportProductSetsResponse>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVisionV1p3beta1ImportProductSetsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVisionV1p3beta1ImportProductSetsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVisionV1p3beta1ImportProductSetsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVisionV1p3beta1ImportProductSetsResponse
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVisionV1p3beta1ImportProductSetsResponse
   */
  public static GoogleCloudVisionV1p3beta1ImportProductSetsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVisionV1p3beta1ImportProductSetsResponse.class);
  }

  /**
   * Convert an instance of GoogleCloudVisionV1p3beta1ImportProductSetsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

