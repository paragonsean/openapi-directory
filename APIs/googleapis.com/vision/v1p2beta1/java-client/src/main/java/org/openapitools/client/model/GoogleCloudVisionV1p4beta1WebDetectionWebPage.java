/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudVisionV1p4beta1WebDetectionWebImage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata for web pages.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:44.794741-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVisionV1p4beta1WebDetectionWebPage {
  public static final String SERIALIZED_NAME_FULL_MATCHING_IMAGES = "fullMatchingImages";
  @SerializedName(SERIALIZED_NAME_FULL_MATCHING_IMAGES)
  private List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> fullMatchingImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_TITLE = "pageTitle";
  @SerializedName(SERIALIZED_NAME_PAGE_TITLE)
  private String pageTitle;

  public static final String SERIALIZED_NAME_PARTIAL_MATCHING_IMAGES = "partialMatchingImages";
  @SerializedName(SERIALIZED_NAME_PARTIAL_MATCHING_IMAGES)
  private List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> partialMatchingImages = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public GoogleCloudVisionV1p4beta1WebDetectionWebPage() {
  }

  public GoogleCloudVisionV1p4beta1WebDetectionWebPage fullMatchingImages(List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> fullMatchingImages) {
    this.fullMatchingImages = fullMatchingImages;
    return this;
  }

  public GoogleCloudVisionV1p4beta1WebDetectionWebPage addFullMatchingImagesItem(GoogleCloudVisionV1p4beta1WebDetectionWebImage fullMatchingImagesItem) {
    if (this.fullMatchingImages == null) {
      this.fullMatchingImages = new ArrayList<>();
    }
    this.fullMatchingImages.add(fullMatchingImagesItem);
    return this;
  }

  /**
   * Fully matching images on the page. Can include resized copies of the query image.
   * @return fullMatchingImages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> getFullMatchingImages() {
    return fullMatchingImages;
  }

  public void setFullMatchingImages(List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> fullMatchingImages) {
    this.fullMatchingImages = fullMatchingImages;
  }


  public GoogleCloudVisionV1p4beta1WebDetectionWebPage pageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
    return this;
  }

  /**
   * Title for the web page, may contain HTML markups.
   * @return pageTitle
   */
  @javax.annotation.Nullable
  public String getPageTitle() {
    return pageTitle;
  }

  public void setPageTitle(String pageTitle) {
    this.pageTitle = pageTitle;
  }


  public GoogleCloudVisionV1p4beta1WebDetectionWebPage partialMatchingImages(List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> partialMatchingImages) {
    this.partialMatchingImages = partialMatchingImages;
    return this;
  }

  public GoogleCloudVisionV1p4beta1WebDetectionWebPage addPartialMatchingImagesItem(GoogleCloudVisionV1p4beta1WebDetectionWebImage partialMatchingImagesItem) {
    if (this.partialMatchingImages == null) {
      this.partialMatchingImages = new ArrayList<>();
    }
    this.partialMatchingImages.add(partialMatchingImagesItem);
    return this;
  }

  /**
   * Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.
   * @return partialMatchingImages
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> getPartialMatchingImages() {
    return partialMatchingImages;
  }

  public void setPartialMatchingImages(List<GoogleCloudVisionV1p4beta1WebDetectionWebImage> partialMatchingImages) {
    this.partialMatchingImages = partialMatchingImages;
  }


  public GoogleCloudVisionV1p4beta1WebDetectionWebPage score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * (Deprecated) Overall relevancy score for the web page.
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public GoogleCloudVisionV1p4beta1WebDetectionWebPage url(String url) {
    this.url = url;
    return this;
  }

  /**
   * The result web page URL.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVisionV1p4beta1WebDetectionWebPage googleCloudVisionV1p4beta1WebDetectionWebPage = (GoogleCloudVisionV1p4beta1WebDetectionWebPage) o;
    return Objects.equals(this.fullMatchingImages, googleCloudVisionV1p4beta1WebDetectionWebPage.fullMatchingImages) &&
        Objects.equals(this.pageTitle, googleCloudVisionV1p4beta1WebDetectionWebPage.pageTitle) &&
        Objects.equals(this.partialMatchingImages, googleCloudVisionV1p4beta1WebDetectionWebPage.partialMatchingImages) &&
        Objects.equals(this.score, googleCloudVisionV1p4beta1WebDetectionWebPage.score) &&
        Objects.equals(this.url, googleCloudVisionV1p4beta1WebDetectionWebPage.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fullMatchingImages, pageTitle, partialMatchingImages, score, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVisionV1p4beta1WebDetectionWebPage {\n");
    sb.append("    fullMatchingImages: ").append(toIndentedString(fullMatchingImages)).append("\n");
    sb.append("    pageTitle: ").append(toIndentedString(pageTitle)).append("\n");
    sb.append("    partialMatchingImages: ").append(toIndentedString(partialMatchingImages)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fullMatchingImages");
    openapiFields.add("pageTitle");
    openapiFields.add("partialMatchingImages");
    openapiFields.add("score");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVisionV1p4beta1WebDetectionWebPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVisionV1p4beta1WebDetectionWebPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVisionV1p4beta1WebDetectionWebPage is not found in the empty JSON string", GoogleCloudVisionV1p4beta1WebDetectionWebPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVisionV1p4beta1WebDetectionWebPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVisionV1p4beta1WebDetectionWebPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("fullMatchingImages") != null && !jsonObj.get("fullMatchingImages").isJsonNull()) {
        JsonArray jsonArrayfullMatchingImages = jsonObj.getAsJsonArray("fullMatchingImages");
        if (jsonArrayfullMatchingImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("fullMatchingImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `fullMatchingImages` to be an array in the JSON string but got `%s`", jsonObj.get("fullMatchingImages").toString()));
          }

          // validate the optional field `fullMatchingImages` (array)
          for (int i = 0; i < jsonArrayfullMatchingImages.size(); i++) {
            GoogleCloudVisionV1p4beta1WebDetectionWebImage.validateJsonElement(jsonArrayfullMatchingImages.get(i));
          };
        }
      }
      if ((jsonObj.get("pageTitle") != null && !jsonObj.get("pageTitle").isJsonNull()) && !jsonObj.get("pageTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pageTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pageTitle").toString()));
      }
      if (jsonObj.get("partialMatchingImages") != null && !jsonObj.get("partialMatchingImages").isJsonNull()) {
        JsonArray jsonArraypartialMatchingImages = jsonObj.getAsJsonArray("partialMatchingImages");
        if (jsonArraypartialMatchingImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("partialMatchingImages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `partialMatchingImages` to be an array in the JSON string but got `%s`", jsonObj.get("partialMatchingImages").toString()));
          }

          // validate the optional field `partialMatchingImages` (array)
          for (int i = 0; i < jsonArraypartialMatchingImages.size(); i++) {
            GoogleCloudVisionV1p4beta1WebDetectionWebImage.validateJsonElement(jsonArraypartialMatchingImages.get(i));
          };
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVisionV1p4beta1WebDetectionWebPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVisionV1p4beta1WebDetectionWebPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVisionV1p4beta1WebDetectionWebPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVisionV1p4beta1WebDetectionWebPage.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVisionV1p4beta1WebDetectionWebPage>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVisionV1p4beta1WebDetectionWebPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVisionV1p4beta1WebDetectionWebPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVisionV1p4beta1WebDetectionWebPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVisionV1p4beta1WebDetectionWebPage
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVisionV1p4beta1WebDetectionWebPage
   */
  public static GoogleCloudVisionV1p4beta1WebDetectionWebPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVisionV1p4beta1WebDetectionWebPage.class);
  }

  /**
   * Convert an instance of GoogleCloudVisionV1p4beta1WebDetectionWebPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

