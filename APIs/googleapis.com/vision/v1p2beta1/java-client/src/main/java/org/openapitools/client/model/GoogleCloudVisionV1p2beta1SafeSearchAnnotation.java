/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:44.794741-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVisionV1p2beta1SafeSearchAnnotation {
  /**
   * Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.
   */
  @JsonAdapter(AdultEnum.Adapter.class)
  public enum AdultEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    AdultEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdultEnum fromValue(String value) {
      for (AdultEnum b : AdultEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdultEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdultEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdultEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdultEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdultEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADULT = "adult";
  @SerializedName(SERIALIZED_NAME_ADULT)
  private AdultEnum adult;

  /**
   * Likelihood that this is a medical image.
   */
  @JsonAdapter(MedicalEnum.Adapter.class)
  public enum MedicalEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    MedicalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MedicalEnum fromValue(String value) {
      for (MedicalEnum b : MedicalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MedicalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MedicalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MedicalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MedicalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MedicalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MEDICAL = "medical";
  @SerializedName(SERIALIZED_NAME_MEDICAL)
  private MedicalEnum medical;

  /**
   * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.
   */
  @JsonAdapter(RacyEnum.Adapter.class)
  public enum RacyEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    RacyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RacyEnum fromValue(String value) {
      for (RacyEnum b : RacyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RacyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RacyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RacyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RacyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RacyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RACY = "racy";
  @SerializedName(SERIALIZED_NAME_RACY)
  private RacyEnum racy;

  /**
   * Spoof likelihood. The likelihood that an modification was made to the image&#39;s canonical version to make it appear funny or offensive.
   */
  @JsonAdapter(SpoofEnum.Adapter.class)
  public enum SpoofEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    SpoofEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpoofEnum fromValue(String value) {
      for (SpoofEnum b : SpoofEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpoofEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpoofEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpoofEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpoofEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpoofEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPOOF = "spoof";
  @SerializedName(SERIALIZED_NAME_SPOOF)
  private SpoofEnum spoof;

  /**
   * Likelihood that this image contains violent content. Violent content may include death, serious harm, or injury to individuals or groups of individuals.
   */
  @JsonAdapter(ViolenceEnum.Adapter.class)
  public enum ViolenceEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    ViolenceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ViolenceEnum fromValue(String value) {
      for (ViolenceEnum b : ViolenceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ViolenceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ViolenceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ViolenceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ViolenceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ViolenceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VIOLENCE = "violence";
  @SerializedName(SERIALIZED_NAME_VIOLENCE)
  private ViolenceEnum violence;

  public GoogleCloudVisionV1p2beta1SafeSearchAnnotation() {
  }

  public GoogleCloudVisionV1p2beta1SafeSearchAnnotation adult(AdultEnum adult) {
    this.adult = adult;
    return this;
  }

  /**
   * Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.
   * @return adult
   */
  @javax.annotation.Nullable
  public AdultEnum getAdult() {
    return adult;
  }

  public void setAdult(AdultEnum adult) {
    this.adult = adult;
  }


  public GoogleCloudVisionV1p2beta1SafeSearchAnnotation medical(MedicalEnum medical) {
    this.medical = medical;
    return this;
  }

  /**
   * Likelihood that this is a medical image.
   * @return medical
   */
  @javax.annotation.Nullable
  public MedicalEnum getMedical() {
    return medical;
  }

  public void setMedical(MedicalEnum medical) {
    this.medical = medical;
  }


  public GoogleCloudVisionV1p2beta1SafeSearchAnnotation racy(RacyEnum racy) {
    this.racy = racy;
    return this;
  }

  /**
   * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.
   * @return racy
   */
  @javax.annotation.Nullable
  public RacyEnum getRacy() {
    return racy;
  }

  public void setRacy(RacyEnum racy) {
    this.racy = racy;
  }


  public GoogleCloudVisionV1p2beta1SafeSearchAnnotation spoof(SpoofEnum spoof) {
    this.spoof = spoof;
    return this;
  }

  /**
   * Spoof likelihood. The likelihood that an modification was made to the image&#39;s canonical version to make it appear funny or offensive.
   * @return spoof
   */
  @javax.annotation.Nullable
  public SpoofEnum getSpoof() {
    return spoof;
  }

  public void setSpoof(SpoofEnum spoof) {
    this.spoof = spoof;
  }


  public GoogleCloudVisionV1p2beta1SafeSearchAnnotation violence(ViolenceEnum violence) {
    this.violence = violence;
    return this;
  }

  /**
   * Likelihood that this image contains violent content. Violent content may include death, serious harm, or injury to individuals or groups of individuals.
   * @return violence
   */
  @javax.annotation.Nullable
  public ViolenceEnum getViolence() {
    return violence;
  }

  public void setViolence(ViolenceEnum violence) {
    this.violence = violence;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVisionV1p2beta1SafeSearchAnnotation googleCloudVisionV1p2beta1SafeSearchAnnotation = (GoogleCloudVisionV1p2beta1SafeSearchAnnotation) o;
    return Objects.equals(this.adult, googleCloudVisionV1p2beta1SafeSearchAnnotation.adult) &&
        Objects.equals(this.medical, googleCloudVisionV1p2beta1SafeSearchAnnotation.medical) &&
        Objects.equals(this.racy, googleCloudVisionV1p2beta1SafeSearchAnnotation.racy) &&
        Objects.equals(this.spoof, googleCloudVisionV1p2beta1SafeSearchAnnotation.spoof) &&
        Objects.equals(this.violence, googleCloudVisionV1p2beta1SafeSearchAnnotation.violence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adult, medical, racy, spoof, violence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVisionV1p2beta1SafeSearchAnnotation {\n");
    sb.append("    adult: ").append(toIndentedString(adult)).append("\n");
    sb.append("    medical: ").append(toIndentedString(medical)).append("\n");
    sb.append("    racy: ").append(toIndentedString(racy)).append("\n");
    sb.append("    spoof: ").append(toIndentedString(spoof)).append("\n");
    sb.append("    violence: ").append(toIndentedString(violence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adult");
    openapiFields.add("medical");
    openapiFields.add("racy");
    openapiFields.add("spoof");
    openapiFields.add("violence");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVisionV1p2beta1SafeSearchAnnotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVisionV1p2beta1SafeSearchAnnotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVisionV1p2beta1SafeSearchAnnotation is not found in the empty JSON string", GoogleCloudVisionV1p2beta1SafeSearchAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVisionV1p2beta1SafeSearchAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVisionV1p2beta1SafeSearchAnnotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adult") != null && !jsonObj.get("adult").isJsonNull()) && !jsonObj.get("adult").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adult` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adult").toString()));
      }
      // validate the optional field `adult`
      if (jsonObj.get("adult") != null && !jsonObj.get("adult").isJsonNull()) {
        AdultEnum.validateJsonElement(jsonObj.get("adult"));
      }
      if ((jsonObj.get("medical") != null && !jsonObj.get("medical").isJsonNull()) && !jsonObj.get("medical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `medical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("medical").toString()));
      }
      // validate the optional field `medical`
      if (jsonObj.get("medical") != null && !jsonObj.get("medical").isJsonNull()) {
        MedicalEnum.validateJsonElement(jsonObj.get("medical"));
      }
      if ((jsonObj.get("racy") != null && !jsonObj.get("racy").isJsonNull()) && !jsonObj.get("racy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `racy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("racy").toString()));
      }
      // validate the optional field `racy`
      if (jsonObj.get("racy") != null && !jsonObj.get("racy").isJsonNull()) {
        RacyEnum.validateJsonElement(jsonObj.get("racy"));
      }
      if ((jsonObj.get("spoof") != null && !jsonObj.get("spoof").isJsonNull()) && !jsonObj.get("spoof").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spoof` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spoof").toString()));
      }
      // validate the optional field `spoof`
      if (jsonObj.get("spoof") != null && !jsonObj.get("spoof").isJsonNull()) {
        SpoofEnum.validateJsonElement(jsonObj.get("spoof"));
      }
      if ((jsonObj.get("violence") != null && !jsonObj.get("violence").isJsonNull()) && !jsonObj.get("violence").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `violence` to be a primitive type in the JSON string but got `%s`", jsonObj.get("violence").toString()));
      }
      // validate the optional field `violence`
      if (jsonObj.get("violence") != null && !jsonObj.get("violence").isJsonNull()) {
        ViolenceEnum.validateJsonElement(jsonObj.get("violence"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVisionV1p2beta1SafeSearchAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVisionV1p2beta1SafeSearchAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVisionV1p2beta1SafeSearchAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVisionV1p2beta1SafeSearchAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVisionV1p2beta1SafeSearchAnnotation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVisionV1p2beta1SafeSearchAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVisionV1p2beta1SafeSearchAnnotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVisionV1p2beta1SafeSearchAnnotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVisionV1p2beta1SafeSearchAnnotation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVisionV1p2beta1SafeSearchAnnotation
   */
  public static GoogleCloudVisionV1p2beta1SafeSearchAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVisionV1p2beta1SafeSearchAnnotation.class);
  }

  /**
   * Convert an instance of GoogleCloudVisionV1p2beta1SafeSearchAnnotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

