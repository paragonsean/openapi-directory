/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1p2beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudVisionV1p2beta1BoundingPoly;
import org.openapitools.client.model.GoogleCloudVisionV1p2beta1LocationInfo;
import org.openapitools.client.model.GoogleCloudVisionV1p2beta1Property;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Set of detected entity features.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:44.794741-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVisionV1p2beta1EntityAnnotation {
  public static final String SERIALIZED_NAME_BOUNDING_POLY = "boundingPoly";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLY)
  private GoogleCloudVisionV1p2beta1BoundingPoly boundingPoly;

  public static final String SERIALIZED_NAME_CONFIDENCE = "confidence";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CONFIDENCE)
  private Float confidence;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LOCALE = "locale";
  @SerializedName(SERIALIZED_NAME_LOCALE)
  private String locale;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private List<GoogleCloudVisionV1p2beta1LocationInfo> locations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MID = "mid";
  @SerializedName(SERIALIZED_NAME_MID)
  private String mid;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private List<GoogleCloudVisionV1p2beta1Property> properties = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Float score;

  public static final String SERIALIZED_NAME_TOPICALITY = "topicality";
  @SerializedName(SERIALIZED_NAME_TOPICALITY)
  private Float topicality;

  public GoogleCloudVisionV1p2beta1EntityAnnotation() {
  }

  public GoogleCloudVisionV1p2beta1EntityAnnotation boundingPoly(GoogleCloudVisionV1p2beta1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * Get boundingPoly
   * @return boundingPoly
   */
  @javax.annotation.Nullable
  public GoogleCloudVisionV1p2beta1BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  public void setBoundingPoly(GoogleCloudVisionV1p2beta1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
  }


  @Deprecated
  public GoogleCloudVisionV1p2beta1EntityAnnotation confidence(Float confidence) {
    this.confidence = confidence;
    return this;
  }

  /**
   * **Deprecated. Use &#x60;score&#x60; instead.** The accuracy of the entity detection in an image. For example, for an image in which the \&quot;Eiffel Tower\&quot; entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].
   * @return confidence
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Float getConfidence() {
    return confidence;
  }

  @Deprecated
  public void setConfidence(Float confidence) {
    this.confidence = confidence;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Entity textual description, expressed in its &#x60;locale&#x60; language.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation locale(String locale) {
    this.locale = locale;
    return this;
  }

  /**
   * The language code for the locale in which the entity textual &#x60;description&#x60; is expressed.
   * @return locale
   */
  @javax.annotation.Nullable
  public String getLocale() {
    return locale;
  }

  public void setLocale(String locale) {
    this.locale = locale;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation locations(List<GoogleCloudVisionV1p2beta1LocationInfo> locations) {
    this.locations = locations;
    return this;
  }

  public GoogleCloudVisionV1p2beta1EntityAnnotation addLocationsItem(GoogleCloudVisionV1p2beta1LocationInfo locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

  /**
   * The location information for the detected entity. Multiple &#x60;LocationInfo&#x60; elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
   * @return locations
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVisionV1p2beta1LocationInfo> getLocations() {
    return locations;
  }

  public void setLocations(List<GoogleCloudVisionV1p2beta1LocationInfo> locations) {
    this.locations = locations;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation mid(String mid) {
    this.mid = mid;
    return this;
  }

  /**
   * Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).
   * @return mid
   */
  @javax.annotation.Nullable
  public String getMid() {
    return mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation properties(List<GoogleCloudVisionV1p2beta1Property> properties) {
    this.properties = properties;
    return this;
  }

  public GoogleCloudVisionV1p2beta1EntityAnnotation addPropertiesItem(GoogleCloudVisionV1p2beta1Property propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

  /**
   * Some entities may have optional user-supplied &#x60;Property&#x60; (name/value) fields, such a score or string that qualifies the entity.
   * @return properties
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVisionV1p2beta1Property> getProperties() {
    return properties;
  }

  public void setProperties(List<GoogleCloudVisionV1p2beta1Property> properties) {
    this.properties = properties;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation score(Float score) {
    this.score = score;
    return this;
  }

  /**
   * Overall score of the result. Range [0, 1].
   * @return score
   */
  @javax.annotation.Nullable
  public Float getScore() {
    return score;
  }

  public void setScore(Float score) {
    this.score = score;
  }


  public GoogleCloudVisionV1p2beta1EntityAnnotation topicality(Float topicality) {
    this.topicality = topicality;
    return this;
  }

  /**
   * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \&quot;tower\&quot; is likely higher to an image containing the detected \&quot;Eiffel Tower\&quot; than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
   * @return topicality
   */
  @javax.annotation.Nullable
  public Float getTopicality() {
    return topicality;
  }

  public void setTopicality(Float topicality) {
    this.topicality = topicality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVisionV1p2beta1EntityAnnotation googleCloudVisionV1p2beta1EntityAnnotation = (GoogleCloudVisionV1p2beta1EntityAnnotation) o;
    return Objects.equals(this.boundingPoly, googleCloudVisionV1p2beta1EntityAnnotation.boundingPoly) &&
        Objects.equals(this.confidence, googleCloudVisionV1p2beta1EntityAnnotation.confidence) &&
        Objects.equals(this.description, googleCloudVisionV1p2beta1EntityAnnotation.description) &&
        Objects.equals(this.locale, googleCloudVisionV1p2beta1EntityAnnotation.locale) &&
        Objects.equals(this.locations, googleCloudVisionV1p2beta1EntityAnnotation.locations) &&
        Objects.equals(this.mid, googleCloudVisionV1p2beta1EntityAnnotation.mid) &&
        Objects.equals(this.properties, googleCloudVisionV1p2beta1EntityAnnotation.properties) &&
        Objects.equals(this.score, googleCloudVisionV1p2beta1EntityAnnotation.score) &&
        Objects.equals(this.topicality, googleCloudVisionV1p2beta1EntityAnnotation.topicality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingPoly, confidence, description, locale, locations, mid, properties, score, topicality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVisionV1p2beta1EntityAnnotation {\n");
    sb.append("    boundingPoly: ").append(toIndentedString(boundingPoly)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    locale: ").append(toIndentedString(locale)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    mid: ").append(toIndentedString(mid)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    topicality: ").append(toIndentedString(topicality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingPoly");
    openapiFields.add("confidence");
    openapiFields.add("description");
    openapiFields.add("locale");
    openapiFields.add("locations");
    openapiFields.add("mid");
    openapiFields.add("properties");
    openapiFields.add("score");
    openapiFields.add("topicality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVisionV1p2beta1EntityAnnotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVisionV1p2beta1EntityAnnotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVisionV1p2beta1EntityAnnotation is not found in the empty JSON string", GoogleCloudVisionV1p2beta1EntityAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVisionV1p2beta1EntityAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVisionV1p2beta1EntityAnnotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boundingPoly`
      if (jsonObj.get("boundingPoly") != null && !jsonObj.get("boundingPoly").isJsonNull()) {
        GoogleCloudVisionV1p2beta1BoundingPoly.validateJsonElement(jsonObj.get("boundingPoly"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("locale") != null && !jsonObj.get("locale").isJsonNull()) && !jsonObj.get("locale").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locale` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locale").toString()));
      }
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        JsonArray jsonArraylocations = jsonObj.getAsJsonArray("locations");
        if (jsonArraylocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `locations` to be an array in the JSON string but got `%s`", jsonObj.get("locations").toString()));
          }

          // validate the optional field `locations` (array)
          for (int i = 0; i < jsonArraylocations.size(); i++) {
            GoogleCloudVisionV1p2beta1LocationInfo.validateJsonElement(jsonArraylocations.get(i));
          };
        }
      }
      if ((jsonObj.get("mid") != null && !jsonObj.get("mid").isJsonNull()) && !jsonObj.get("mid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mid").toString()));
      }
      if (jsonObj.get("properties") != null && !jsonObj.get("properties").isJsonNull()) {
        JsonArray jsonArrayproperties = jsonObj.getAsJsonArray("properties");
        if (jsonArrayproperties != null) {
          // ensure the json data is an array
          if (!jsonObj.get("properties").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `properties` to be an array in the JSON string but got `%s`", jsonObj.get("properties").toString()));
          }

          // validate the optional field `properties` (array)
          for (int i = 0; i < jsonArrayproperties.size(); i++) {
            GoogleCloudVisionV1p2beta1Property.validateJsonElement(jsonArrayproperties.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVisionV1p2beta1EntityAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVisionV1p2beta1EntityAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVisionV1p2beta1EntityAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVisionV1p2beta1EntityAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVisionV1p2beta1EntityAnnotation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVisionV1p2beta1EntityAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVisionV1p2beta1EntityAnnotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVisionV1p2beta1EntityAnnotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVisionV1p2beta1EntityAnnotation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVisionV1p2beta1EntityAnnotation
   */
  public static GoogleCloudVisionV1p2beta1EntityAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVisionV1p2beta1EntityAnnotation.class);
  }

  /**
   * Convert an instance of GoogleCloudVisionV1p2beta1EntityAnnotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

