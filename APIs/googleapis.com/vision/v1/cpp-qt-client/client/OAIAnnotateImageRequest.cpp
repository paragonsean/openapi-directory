/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnotateImageRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnotateImageRequest::OAIAnnotateImageRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnotateImageRequest::OAIAnnotateImageRequest() {
    this->initializeModel();
}

OAIAnnotateImageRequest::~OAIAnnotateImageRequest() {}

void OAIAnnotateImageRequest::initializeModel() {

    m_features_isSet = false;
    m_features_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_image_context_isSet = false;
    m_image_context_isValid = false;
}

void OAIAnnotateImageRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnotateImageRequest::fromJsonObject(QJsonObject json) {

    m_features_isValid = ::OpenAPI::fromJsonValue(m_features, json[QString("features")]);
    m_features_isSet = !json[QString("features")].isNull() && m_features_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_image_context_isValid = ::OpenAPI::fromJsonValue(m_image_context, json[QString("imageContext")]);
    m_image_context_isSet = !json[QString("imageContext")].isNull() && m_image_context_isValid;
}

QString OAIAnnotateImageRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnotateImageRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_features.size() > 0) {
        obj.insert(QString("features"), ::OpenAPI::toJsonValue(m_features));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_image_context.isSet()) {
        obj.insert(QString("imageContext"), ::OpenAPI::toJsonValue(m_image_context));
    }
    return obj;
}

QList<OAIFeature> OAIAnnotateImageRequest::getFeatures() const {
    return m_features;
}
void OAIAnnotateImageRequest::setFeatures(const QList<OAIFeature> &features) {
    m_features = features;
    m_features_isSet = true;
}

bool OAIAnnotateImageRequest::is_features_Set() const{
    return m_features_isSet;
}

bool OAIAnnotateImageRequest::is_features_Valid() const{
    return m_features_isValid;
}

OAIImage OAIAnnotateImageRequest::getImage() const {
    return m_image;
}
void OAIAnnotateImageRequest::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIAnnotateImageRequest::is_image_Set() const{
    return m_image_isSet;
}

bool OAIAnnotateImageRequest::is_image_Valid() const{
    return m_image_isValid;
}

OAIImageContext OAIAnnotateImageRequest::getImageContext() const {
    return m_image_context;
}
void OAIAnnotateImageRequest::setImageContext(const OAIImageContext &image_context) {
    m_image_context = image_context;
    m_image_context_isSet = true;
}

bool OAIAnnotateImageRequest::is_image_context_Set() const{
    return m_image_context_isSet;
}

bool OAIAnnotateImageRequest::is_image_context_Valid() const{
    return m_image_context_isValid;
}

bool OAIAnnotateImageRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_features.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_context.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnotateImageRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
