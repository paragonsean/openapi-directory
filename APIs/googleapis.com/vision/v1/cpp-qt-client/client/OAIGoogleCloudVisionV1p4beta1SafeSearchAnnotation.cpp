/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::~OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation() {}

void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::initializeModel() {

    m_adult_isSet = false;
    m_adult_isValid = false;

    m_medical_isSet = false;
    m_medical_isValid = false;

    m_racy_isSet = false;
    m_racy_isValid = false;

    m_spoof_isSet = false;
    m_spoof_isValid = false;

    m_violence_isSet = false;
    m_violence_isValid = false;
}

void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::fromJsonObject(QJsonObject json) {

    m_adult_isValid = ::OpenAPI::fromJsonValue(m_adult, json[QString("adult")]);
    m_adult_isSet = !json[QString("adult")].isNull() && m_adult_isValid;

    m_medical_isValid = ::OpenAPI::fromJsonValue(m_medical, json[QString("medical")]);
    m_medical_isSet = !json[QString("medical")].isNull() && m_medical_isValid;

    m_racy_isValid = ::OpenAPI::fromJsonValue(m_racy, json[QString("racy")]);
    m_racy_isSet = !json[QString("racy")].isNull() && m_racy_isValid;

    m_spoof_isValid = ::OpenAPI::fromJsonValue(m_spoof, json[QString("spoof")]);
    m_spoof_isSet = !json[QString("spoof")].isNull() && m_spoof_isValid;

    m_violence_isValid = ::OpenAPI::fromJsonValue(m_violence, json[QString("violence")]);
    m_violence_isSet = !json[QString("violence")].isNull() && m_violence_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_isSet) {
        obj.insert(QString("adult"), ::OpenAPI::toJsonValue(m_adult));
    }
    if (m_medical_isSet) {
        obj.insert(QString("medical"), ::OpenAPI::toJsonValue(m_medical));
    }
    if (m_racy_isSet) {
        obj.insert(QString("racy"), ::OpenAPI::toJsonValue(m_racy));
    }
    if (m_spoof_isSet) {
        obj.insert(QString("spoof"), ::OpenAPI::toJsonValue(m_spoof));
    }
    if (m_violence_isSet) {
        obj.insert(QString("violence"), ::OpenAPI::toJsonValue(m_violence));
    }
    return obj;
}

QString OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::getAdult() const {
    return m_adult;
}
void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::setAdult(const QString &adult) {
    m_adult = adult;
    m_adult_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_adult_Set() const{
    return m_adult_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_adult_Valid() const{
    return m_adult_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::getMedical() const {
    return m_medical;
}
void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::setMedical(const QString &medical) {
    m_medical = medical;
    m_medical_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_medical_Set() const{
    return m_medical_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_medical_Valid() const{
    return m_medical_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::getRacy() const {
    return m_racy;
}
void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::setRacy(const QString &racy) {
    m_racy = racy;
    m_racy_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_racy_Set() const{
    return m_racy_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_racy_Valid() const{
    return m_racy_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::getSpoof() const {
    return m_spoof;
}
void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::setSpoof(const QString &spoof) {
    m_spoof = spoof;
    m_spoof_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_spoof_Set() const{
    return m_spoof_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_spoof_Valid() const{
    return m_spoof_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::getViolence() const {
    return m_violence;
}
void OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::setViolence(const QString &violence) {
    m_violence = violence;
    m_violence_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_violence_Set() const{
    return m_violence_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::is_violence_Valid() const{
    return m_violence_isValid;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_medical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_racy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoof_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_violence_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p4beta1SafeSearchAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
