/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebDetectionParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebDetectionParams::OAIWebDetectionParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebDetectionParams::OAIWebDetectionParams() {
    this->initializeModel();
}

OAIWebDetectionParams::~OAIWebDetectionParams() {}

void OAIWebDetectionParams::initializeModel() {

    m_include_geo_results_isSet = false;
    m_include_geo_results_isValid = false;
}

void OAIWebDetectionParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebDetectionParams::fromJsonObject(QJsonObject json) {

    m_include_geo_results_isValid = ::OpenAPI::fromJsonValue(m_include_geo_results, json[QString("includeGeoResults")]);
    m_include_geo_results_isSet = !json[QString("includeGeoResults")].isNull() && m_include_geo_results_isValid;
}

QString OAIWebDetectionParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebDetectionParams::asJsonObject() const {
    QJsonObject obj;
    if (m_include_geo_results_isSet) {
        obj.insert(QString("includeGeoResults"), ::OpenAPI::toJsonValue(m_include_geo_results));
    }
    return obj;
}

bool OAIWebDetectionParams::isIncludeGeoResults() const {
    return m_include_geo_results;
}
void OAIWebDetectionParams::setIncludeGeoResults(const bool &include_geo_results) {
    m_include_geo_results = include_geo_results;
    m_include_geo_results_isSet = true;
}

bool OAIWebDetectionParams::is_include_geo_results_Set() const{
    return m_include_geo_results_isSet;
}

bool OAIWebDetectionParams::is_include_geo_results_Valid() const{
    return m_include_geo_results_isValid;
}

bool OAIWebDetectionParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_geo_results_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebDetectionParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
