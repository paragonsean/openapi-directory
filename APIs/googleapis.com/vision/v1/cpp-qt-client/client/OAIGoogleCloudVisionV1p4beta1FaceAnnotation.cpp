/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p4beta1FaceAnnotation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p4beta1FaceAnnotation::OAIGoogleCloudVisionV1p4beta1FaceAnnotation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p4beta1FaceAnnotation::OAIGoogleCloudVisionV1p4beta1FaceAnnotation() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p4beta1FaceAnnotation::~OAIGoogleCloudVisionV1p4beta1FaceAnnotation() {}

void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::initializeModel() {

    m_anger_likelihood_isSet = false;
    m_anger_likelihood_isValid = false;

    m_blurred_likelihood_isSet = false;
    m_blurred_likelihood_isValid = false;

    m_bounding_poly_isSet = false;
    m_bounding_poly_isValid = false;

    m_detection_confidence_isSet = false;
    m_detection_confidence_isValid = false;

    m_fd_bounding_poly_isSet = false;
    m_fd_bounding_poly_isValid = false;

    m_headwear_likelihood_isSet = false;
    m_headwear_likelihood_isValid = false;

    m_joy_likelihood_isSet = false;
    m_joy_likelihood_isValid = false;

    m_landmarking_confidence_isSet = false;
    m_landmarking_confidence_isValid = false;

    m_landmarks_isSet = false;
    m_landmarks_isValid = false;

    m_pan_angle_isSet = false;
    m_pan_angle_isValid = false;

    m_recognition_result_isSet = false;
    m_recognition_result_isValid = false;

    m_roll_angle_isSet = false;
    m_roll_angle_isValid = false;

    m_sorrow_likelihood_isSet = false;
    m_sorrow_likelihood_isValid = false;

    m_surprise_likelihood_isSet = false;
    m_surprise_likelihood_isValid = false;

    m_tilt_angle_isSet = false;
    m_tilt_angle_isValid = false;

    m_under_exposed_likelihood_isSet = false;
    m_under_exposed_likelihood_isValid = false;
}

void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::fromJsonObject(QJsonObject json) {

    m_anger_likelihood_isValid = ::OpenAPI::fromJsonValue(m_anger_likelihood, json[QString("angerLikelihood")]);
    m_anger_likelihood_isSet = !json[QString("angerLikelihood")].isNull() && m_anger_likelihood_isValid;

    m_blurred_likelihood_isValid = ::OpenAPI::fromJsonValue(m_blurred_likelihood, json[QString("blurredLikelihood")]);
    m_blurred_likelihood_isSet = !json[QString("blurredLikelihood")].isNull() && m_blurred_likelihood_isValid;

    m_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_bounding_poly, json[QString("boundingPoly")]);
    m_bounding_poly_isSet = !json[QString("boundingPoly")].isNull() && m_bounding_poly_isValid;

    m_detection_confidence_isValid = ::OpenAPI::fromJsonValue(m_detection_confidence, json[QString("detectionConfidence")]);
    m_detection_confidence_isSet = !json[QString("detectionConfidence")].isNull() && m_detection_confidence_isValid;

    m_fd_bounding_poly_isValid = ::OpenAPI::fromJsonValue(m_fd_bounding_poly, json[QString("fdBoundingPoly")]);
    m_fd_bounding_poly_isSet = !json[QString("fdBoundingPoly")].isNull() && m_fd_bounding_poly_isValid;

    m_headwear_likelihood_isValid = ::OpenAPI::fromJsonValue(m_headwear_likelihood, json[QString("headwearLikelihood")]);
    m_headwear_likelihood_isSet = !json[QString("headwearLikelihood")].isNull() && m_headwear_likelihood_isValid;

    m_joy_likelihood_isValid = ::OpenAPI::fromJsonValue(m_joy_likelihood, json[QString("joyLikelihood")]);
    m_joy_likelihood_isSet = !json[QString("joyLikelihood")].isNull() && m_joy_likelihood_isValid;

    m_landmarking_confidence_isValid = ::OpenAPI::fromJsonValue(m_landmarking_confidence, json[QString("landmarkingConfidence")]);
    m_landmarking_confidence_isSet = !json[QString("landmarkingConfidence")].isNull() && m_landmarking_confidence_isValid;

    m_landmarks_isValid = ::OpenAPI::fromJsonValue(m_landmarks, json[QString("landmarks")]);
    m_landmarks_isSet = !json[QString("landmarks")].isNull() && m_landmarks_isValid;

    m_pan_angle_isValid = ::OpenAPI::fromJsonValue(m_pan_angle, json[QString("panAngle")]);
    m_pan_angle_isSet = !json[QString("panAngle")].isNull() && m_pan_angle_isValid;

    m_recognition_result_isValid = ::OpenAPI::fromJsonValue(m_recognition_result, json[QString("recognitionResult")]);
    m_recognition_result_isSet = !json[QString("recognitionResult")].isNull() && m_recognition_result_isValid;

    m_roll_angle_isValid = ::OpenAPI::fromJsonValue(m_roll_angle, json[QString("rollAngle")]);
    m_roll_angle_isSet = !json[QString("rollAngle")].isNull() && m_roll_angle_isValid;

    m_sorrow_likelihood_isValid = ::OpenAPI::fromJsonValue(m_sorrow_likelihood, json[QString("sorrowLikelihood")]);
    m_sorrow_likelihood_isSet = !json[QString("sorrowLikelihood")].isNull() && m_sorrow_likelihood_isValid;

    m_surprise_likelihood_isValid = ::OpenAPI::fromJsonValue(m_surprise_likelihood, json[QString("surpriseLikelihood")]);
    m_surprise_likelihood_isSet = !json[QString("surpriseLikelihood")].isNull() && m_surprise_likelihood_isValid;

    m_tilt_angle_isValid = ::OpenAPI::fromJsonValue(m_tilt_angle, json[QString("tiltAngle")]);
    m_tilt_angle_isSet = !json[QString("tiltAngle")].isNull() && m_tilt_angle_isValid;

    m_under_exposed_likelihood_isValid = ::OpenAPI::fromJsonValue(m_under_exposed_likelihood, json[QString("underExposedLikelihood")]);
    m_under_exposed_likelihood_isSet = !json[QString("underExposedLikelihood")].isNull() && m_under_exposed_likelihood_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p4beta1FaceAnnotation::asJsonObject() const {
    QJsonObject obj;
    if (m_anger_likelihood_isSet) {
        obj.insert(QString("angerLikelihood"), ::OpenAPI::toJsonValue(m_anger_likelihood));
    }
    if (m_blurred_likelihood_isSet) {
        obj.insert(QString("blurredLikelihood"), ::OpenAPI::toJsonValue(m_blurred_likelihood));
    }
    if (m_bounding_poly.isSet()) {
        obj.insert(QString("boundingPoly"), ::OpenAPI::toJsonValue(m_bounding_poly));
    }
    if (m_detection_confidence_isSet) {
        obj.insert(QString("detectionConfidence"), ::OpenAPI::toJsonValue(m_detection_confidence));
    }
    if (m_fd_bounding_poly.isSet()) {
        obj.insert(QString("fdBoundingPoly"), ::OpenAPI::toJsonValue(m_fd_bounding_poly));
    }
    if (m_headwear_likelihood_isSet) {
        obj.insert(QString("headwearLikelihood"), ::OpenAPI::toJsonValue(m_headwear_likelihood));
    }
    if (m_joy_likelihood_isSet) {
        obj.insert(QString("joyLikelihood"), ::OpenAPI::toJsonValue(m_joy_likelihood));
    }
    if (m_landmarking_confidence_isSet) {
        obj.insert(QString("landmarkingConfidence"), ::OpenAPI::toJsonValue(m_landmarking_confidence));
    }
    if (m_landmarks.size() > 0) {
        obj.insert(QString("landmarks"), ::OpenAPI::toJsonValue(m_landmarks));
    }
    if (m_pan_angle_isSet) {
        obj.insert(QString("panAngle"), ::OpenAPI::toJsonValue(m_pan_angle));
    }
    if (m_recognition_result.size() > 0) {
        obj.insert(QString("recognitionResult"), ::OpenAPI::toJsonValue(m_recognition_result));
    }
    if (m_roll_angle_isSet) {
        obj.insert(QString("rollAngle"), ::OpenAPI::toJsonValue(m_roll_angle));
    }
    if (m_sorrow_likelihood_isSet) {
        obj.insert(QString("sorrowLikelihood"), ::OpenAPI::toJsonValue(m_sorrow_likelihood));
    }
    if (m_surprise_likelihood_isSet) {
        obj.insert(QString("surpriseLikelihood"), ::OpenAPI::toJsonValue(m_surprise_likelihood));
    }
    if (m_tilt_angle_isSet) {
        obj.insert(QString("tiltAngle"), ::OpenAPI::toJsonValue(m_tilt_angle));
    }
    if (m_under_exposed_likelihood_isSet) {
        obj.insert(QString("underExposedLikelihood"), ::OpenAPI::toJsonValue(m_under_exposed_likelihood));
    }
    return obj;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getAngerLikelihood() const {
    return m_anger_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setAngerLikelihood(const QString &anger_likelihood) {
    m_anger_likelihood = anger_likelihood;
    m_anger_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_anger_likelihood_Set() const{
    return m_anger_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_anger_likelihood_Valid() const{
    return m_anger_likelihood_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getBlurredLikelihood() const {
    return m_blurred_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setBlurredLikelihood(const QString &blurred_likelihood) {
    m_blurred_likelihood = blurred_likelihood;
    m_blurred_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_blurred_likelihood_Set() const{
    return m_blurred_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_blurred_likelihood_Valid() const{
    return m_blurred_likelihood_isValid;
}

OAIGoogleCloudVisionV1p4beta1BoundingPoly OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getBoundingPoly() const {
    return m_bounding_poly;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setBoundingPoly(const OAIGoogleCloudVisionV1p4beta1BoundingPoly &bounding_poly) {
    m_bounding_poly = bounding_poly;
    m_bounding_poly_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_bounding_poly_Set() const{
    return m_bounding_poly_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_bounding_poly_Valid() const{
    return m_bounding_poly_isValid;
}

float OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getDetectionConfidence() const {
    return m_detection_confidence;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setDetectionConfidence(const float &detection_confidence) {
    m_detection_confidence = detection_confidence;
    m_detection_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_detection_confidence_Set() const{
    return m_detection_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_detection_confidence_Valid() const{
    return m_detection_confidence_isValid;
}

OAIGoogleCloudVisionV1p4beta1BoundingPoly OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getFdBoundingPoly() const {
    return m_fd_bounding_poly;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setFdBoundingPoly(const OAIGoogleCloudVisionV1p4beta1BoundingPoly &fd_bounding_poly) {
    m_fd_bounding_poly = fd_bounding_poly;
    m_fd_bounding_poly_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_fd_bounding_poly_Set() const{
    return m_fd_bounding_poly_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_fd_bounding_poly_Valid() const{
    return m_fd_bounding_poly_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getHeadwearLikelihood() const {
    return m_headwear_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setHeadwearLikelihood(const QString &headwear_likelihood) {
    m_headwear_likelihood = headwear_likelihood;
    m_headwear_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_headwear_likelihood_Set() const{
    return m_headwear_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_headwear_likelihood_Valid() const{
    return m_headwear_likelihood_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getJoyLikelihood() const {
    return m_joy_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setJoyLikelihood(const QString &joy_likelihood) {
    m_joy_likelihood = joy_likelihood;
    m_joy_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_joy_likelihood_Set() const{
    return m_joy_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_joy_likelihood_Valid() const{
    return m_joy_likelihood_isValid;
}

float OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getLandmarkingConfidence() const {
    return m_landmarking_confidence;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setLandmarkingConfidence(const float &landmarking_confidence) {
    m_landmarking_confidence = landmarking_confidence;
    m_landmarking_confidence_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_landmarking_confidence_Set() const{
    return m_landmarking_confidence_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_landmarking_confidence_Valid() const{
    return m_landmarking_confidence_isValid;
}

QList<OAIGoogleCloudVisionV1p4beta1FaceAnnotationLandmark> OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getLandmarks() const {
    return m_landmarks;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setLandmarks(const QList<OAIGoogleCloudVisionV1p4beta1FaceAnnotationLandmark> &landmarks) {
    m_landmarks = landmarks;
    m_landmarks_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_landmarks_Set() const{
    return m_landmarks_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_landmarks_Valid() const{
    return m_landmarks_isValid;
}

float OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getPanAngle() const {
    return m_pan_angle;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setPanAngle(const float &pan_angle) {
    m_pan_angle = pan_angle;
    m_pan_angle_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_pan_angle_Set() const{
    return m_pan_angle_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_pan_angle_Valid() const{
    return m_pan_angle_isValid;
}

QList<OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult> OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getRecognitionResult() const {
    return m_recognition_result;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setRecognitionResult(const QList<OAIGoogleCloudVisionV1p4beta1FaceRecognitionResult> &recognition_result) {
    m_recognition_result = recognition_result;
    m_recognition_result_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_recognition_result_Set() const{
    return m_recognition_result_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_recognition_result_Valid() const{
    return m_recognition_result_isValid;
}

float OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getRollAngle() const {
    return m_roll_angle;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setRollAngle(const float &roll_angle) {
    m_roll_angle = roll_angle;
    m_roll_angle_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_roll_angle_Set() const{
    return m_roll_angle_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_roll_angle_Valid() const{
    return m_roll_angle_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getSorrowLikelihood() const {
    return m_sorrow_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setSorrowLikelihood(const QString &sorrow_likelihood) {
    m_sorrow_likelihood = sorrow_likelihood;
    m_sorrow_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_sorrow_likelihood_Set() const{
    return m_sorrow_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_sorrow_likelihood_Valid() const{
    return m_sorrow_likelihood_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getSurpriseLikelihood() const {
    return m_surprise_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setSurpriseLikelihood(const QString &surprise_likelihood) {
    m_surprise_likelihood = surprise_likelihood;
    m_surprise_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_surprise_likelihood_Set() const{
    return m_surprise_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_surprise_likelihood_Valid() const{
    return m_surprise_likelihood_isValid;
}

float OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getTiltAngle() const {
    return m_tilt_angle;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setTiltAngle(const float &tilt_angle) {
    m_tilt_angle = tilt_angle;
    m_tilt_angle_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_tilt_angle_Set() const{
    return m_tilt_angle_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_tilt_angle_Valid() const{
    return m_tilt_angle_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1FaceAnnotation::getUnderExposedLikelihood() const {
    return m_under_exposed_likelihood;
}
void OAIGoogleCloudVisionV1p4beta1FaceAnnotation::setUnderExposedLikelihood(const QString &under_exposed_likelihood) {
    m_under_exposed_likelihood = under_exposed_likelihood;
    m_under_exposed_likelihood_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_under_exposed_likelihood_Set() const{
    return m_under_exposed_likelihood_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::is_under_exposed_likelihood_Valid() const{
    return m_under_exposed_likelihood_isValid;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anger_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blurred_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detection_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fd_bounding_poly.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headwear_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_joy_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmarking_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_landmarks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pan_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recognition_result.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_roll_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sorrow_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surprise_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tilt_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_under_exposed_likelihood_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p4beta1FaceAnnotation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
