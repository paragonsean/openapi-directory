/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::~OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty() {}

void OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::initializeModel() {

    m_detected_break_isSet = false;
    m_detected_break_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;
}

void OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::fromJsonObject(QJsonObject json) {

    m_detected_break_isValid = ::OpenAPI::fromJsonValue(m_detected_break, json[QString("detectedBreak")]);
    m_detected_break_isSet = !json[QString("detectedBreak")].isNull() && m_detected_break_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;
}

QString OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_break.isSet()) {
        obj.insert(QString("detectedBreak"), ::OpenAPI::toJsonValue(m_detected_break));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    return obj;
}

OAIGoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::getDetectedBreak() const {
    return m_detected_break;
}
void OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::setDetectedBreak(const OAIGoogleCloudVisionV1p2beta1TextAnnotationDetectedBreak &detected_break) {
    m_detected_break = detected_break;
    m_detected_break_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::is_detected_break_Set() const{
    return m_detected_break_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::is_detected_break_Valid() const{
    return m_detected_break_isValid;
}

QList<OAIGoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage> OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::setDetectedLanguages(const QList<OAIGoogleCloudVisionV1p2beta1TextAnnotationDetectedLanguage> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

bool OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_break.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p2beta1TextAnnotationTextProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
