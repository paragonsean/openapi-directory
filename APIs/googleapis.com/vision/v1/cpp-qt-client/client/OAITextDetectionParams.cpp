/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITextDetectionParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITextDetectionParams::OAITextDetectionParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITextDetectionParams::OAITextDetectionParams() {
    this->initializeModel();
}

OAITextDetectionParams::~OAITextDetectionParams() {}

void OAITextDetectionParams::initializeModel() {

    m_advanced_ocr_options_isSet = false;
    m_advanced_ocr_options_isValid = false;

    m_enable_text_detection_confidence_score_isSet = false;
    m_enable_text_detection_confidence_score_isValid = false;
}

void OAITextDetectionParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITextDetectionParams::fromJsonObject(QJsonObject json) {

    m_advanced_ocr_options_isValid = ::OpenAPI::fromJsonValue(m_advanced_ocr_options, json[QString("advancedOcrOptions")]);
    m_advanced_ocr_options_isSet = !json[QString("advancedOcrOptions")].isNull() && m_advanced_ocr_options_isValid;

    m_enable_text_detection_confidence_score_isValid = ::OpenAPI::fromJsonValue(m_enable_text_detection_confidence_score, json[QString("enableTextDetectionConfidenceScore")]);
    m_enable_text_detection_confidence_score_isSet = !json[QString("enableTextDetectionConfidenceScore")].isNull() && m_enable_text_detection_confidence_score_isValid;
}

QString OAITextDetectionParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITextDetectionParams::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_ocr_options.size() > 0) {
        obj.insert(QString("advancedOcrOptions"), ::OpenAPI::toJsonValue(m_advanced_ocr_options));
    }
    if (m_enable_text_detection_confidence_score_isSet) {
        obj.insert(QString("enableTextDetectionConfidenceScore"), ::OpenAPI::toJsonValue(m_enable_text_detection_confidence_score));
    }
    return obj;
}

QList<QString> OAITextDetectionParams::getAdvancedOcrOptions() const {
    return m_advanced_ocr_options;
}
void OAITextDetectionParams::setAdvancedOcrOptions(const QList<QString> &advanced_ocr_options) {
    m_advanced_ocr_options = advanced_ocr_options;
    m_advanced_ocr_options_isSet = true;
}

bool OAITextDetectionParams::is_advanced_ocr_options_Set() const{
    return m_advanced_ocr_options_isSet;
}

bool OAITextDetectionParams::is_advanced_ocr_options_Valid() const{
    return m_advanced_ocr_options_isValid;
}

bool OAITextDetectionParams::isEnableTextDetectionConfidenceScore() const {
    return m_enable_text_detection_confidence_score;
}
void OAITextDetectionParams::setEnableTextDetectionConfidenceScore(const bool &enable_text_detection_confidence_score) {
    m_enable_text_detection_confidence_score = enable_text_detection_confidence_score;
    m_enable_text_detection_confidence_score_isSet = true;
}

bool OAITextDetectionParams::is_enable_text_detection_confidence_score_Set() const{
    return m_enable_text_detection_confidence_score_isSet;
}

bool OAITextDetectionParams::is_enable_text_detection_confidence_score_Valid() const{
    return m_enable_text_detection_confidence_score_isValid;
}

bool OAITextDetectionParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_ocr_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_text_detection_confidence_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITextDetectionParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
