/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::~OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata() {}

void OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::initializeModel() {

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submit_time_isSet = false;
    m_submit_time_isValid = false;
}

void OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::fromJsonObject(QJsonObject json) {

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submit_time_isValid = ::OpenAPI::fromJsonValue(m_submit_time, json[QString("submitTime")]);
    m_submit_time_isSet = !json[QString("submitTime")].isNull() && m_submit_time_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submit_time_isSet) {
        obj.insert(QString("submitTime"), ::OpenAPI::toJsonValue(m_submit_time));
    }
    return obj;
}

QString OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::getEndTime() const {
    return m_end_time;
}
void OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::getState() const {
    return m_state;
}
void OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::getSubmitTime() const {
    return m_submit_time;
}
void OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::setSubmitTime(const QString &submit_time) {
    m_submit_time = submit_time;
    m_submit_time_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::is_submit_time_Set() const{
    return m_submit_time_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::is_submit_time_Valid() const{
    return m_submit_time_isValid;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p4beta1BatchOperationMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
