/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebPage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebPage::OAIWebPage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebPage::OAIWebPage() {
    this->initializeModel();
}

OAIWebPage::~OAIWebPage() {}

void OAIWebPage::initializeModel() {

    m_full_matching_images_isSet = false;
    m_full_matching_images_isValid = false;

    m_page_title_isSet = false;
    m_page_title_isValid = false;

    m_partial_matching_images_isSet = false;
    m_partial_matching_images_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIWebPage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebPage::fromJsonObject(QJsonObject json) {

    m_full_matching_images_isValid = ::OpenAPI::fromJsonValue(m_full_matching_images, json[QString("fullMatchingImages")]);
    m_full_matching_images_isSet = !json[QString("fullMatchingImages")].isNull() && m_full_matching_images_isValid;

    m_page_title_isValid = ::OpenAPI::fromJsonValue(m_page_title, json[QString("pageTitle")]);
    m_page_title_isSet = !json[QString("pageTitle")].isNull() && m_page_title_isValid;

    m_partial_matching_images_isValid = ::OpenAPI::fromJsonValue(m_partial_matching_images, json[QString("partialMatchingImages")]);
    m_partial_matching_images_isSet = !json[QString("partialMatchingImages")].isNull() && m_partial_matching_images_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIWebPage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebPage::asJsonObject() const {
    QJsonObject obj;
    if (m_full_matching_images.size() > 0) {
        obj.insert(QString("fullMatchingImages"), ::OpenAPI::toJsonValue(m_full_matching_images));
    }
    if (m_page_title_isSet) {
        obj.insert(QString("pageTitle"), ::OpenAPI::toJsonValue(m_page_title));
    }
    if (m_partial_matching_images.size() > 0) {
        obj.insert(QString("partialMatchingImages"), ::OpenAPI::toJsonValue(m_partial_matching_images));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QList<OAIWebImage> OAIWebPage::getFullMatchingImages() const {
    return m_full_matching_images;
}
void OAIWebPage::setFullMatchingImages(const QList<OAIWebImage> &full_matching_images) {
    m_full_matching_images = full_matching_images;
    m_full_matching_images_isSet = true;
}

bool OAIWebPage::is_full_matching_images_Set() const{
    return m_full_matching_images_isSet;
}

bool OAIWebPage::is_full_matching_images_Valid() const{
    return m_full_matching_images_isValid;
}

QString OAIWebPage::getPageTitle() const {
    return m_page_title;
}
void OAIWebPage::setPageTitle(const QString &page_title) {
    m_page_title = page_title;
    m_page_title_isSet = true;
}

bool OAIWebPage::is_page_title_Set() const{
    return m_page_title_isSet;
}

bool OAIWebPage::is_page_title_Valid() const{
    return m_page_title_isValid;
}

QList<OAIWebImage> OAIWebPage::getPartialMatchingImages() const {
    return m_partial_matching_images;
}
void OAIWebPage::setPartialMatchingImages(const QList<OAIWebImage> &partial_matching_images) {
    m_partial_matching_images = partial_matching_images;
    m_partial_matching_images_isSet = true;
}

bool OAIWebPage::is_partial_matching_images_Set() const{
    return m_partial_matching_images_isSet;
}

bool OAIWebPage::is_partial_matching_images_Valid() const{
    return m_partial_matching_images_isValid;
}

float OAIWebPage::getScore() const {
    return m_score;
}
void OAIWebPage::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIWebPage::is_score_Set() const{
    return m_score_isSet;
}

bool OAIWebPage::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIWebPage::getUrl() const {
    return m_url;
}
void OAIWebPage::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebPage::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebPage::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIWebPage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_full_matching_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_matching_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebPage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
