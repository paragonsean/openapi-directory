/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageContext::OAIImageContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageContext::OAIImageContext() {
    this->initializeModel();
}

OAIImageContext::~OAIImageContext() {}

void OAIImageContext::initializeModel() {

    m_crop_hints_params_isSet = false;
    m_crop_hints_params_isValid = false;

    m_language_hints_isSet = false;
    m_language_hints_isValid = false;

    m_lat_long_rect_isSet = false;
    m_lat_long_rect_isValid = false;

    m_product_search_params_isSet = false;
    m_product_search_params_isValid = false;

    m_text_detection_params_isSet = false;
    m_text_detection_params_isValid = false;

    m_web_detection_params_isSet = false;
    m_web_detection_params_isValid = false;
}

void OAIImageContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageContext::fromJsonObject(QJsonObject json) {

    m_crop_hints_params_isValid = ::OpenAPI::fromJsonValue(m_crop_hints_params, json[QString("cropHintsParams")]);
    m_crop_hints_params_isSet = !json[QString("cropHintsParams")].isNull() && m_crop_hints_params_isValid;

    m_language_hints_isValid = ::OpenAPI::fromJsonValue(m_language_hints, json[QString("languageHints")]);
    m_language_hints_isSet = !json[QString("languageHints")].isNull() && m_language_hints_isValid;

    m_lat_long_rect_isValid = ::OpenAPI::fromJsonValue(m_lat_long_rect, json[QString("latLongRect")]);
    m_lat_long_rect_isSet = !json[QString("latLongRect")].isNull() && m_lat_long_rect_isValid;

    m_product_search_params_isValid = ::OpenAPI::fromJsonValue(m_product_search_params, json[QString("productSearchParams")]);
    m_product_search_params_isSet = !json[QString("productSearchParams")].isNull() && m_product_search_params_isValid;

    m_text_detection_params_isValid = ::OpenAPI::fromJsonValue(m_text_detection_params, json[QString("textDetectionParams")]);
    m_text_detection_params_isSet = !json[QString("textDetectionParams")].isNull() && m_text_detection_params_isValid;

    m_web_detection_params_isValid = ::OpenAPI::fromJsonValue(m_web_detection_params, json[QString("webDetectionParams")]);
    m_web_detection_params_isSet = !json[QString("webDetectionParams")].isNull() && m_web_detection_params_isValid;
}

QString OAIImageContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageContext::asJsonObject() const {
    QJsonObject obj;
    if (m_crop_hints_params.isSet()) {
        obj.insert(QString("cropHintsParams"), ::OpenAPI::toJsonValue(m_crop_hints_params));
    }
    if (m_language_hints.size() > 0) {
        obj.insert(QString("languageHints"), ::OpenAPI::toJsonValue(m_language_hints));
    }
    if (m_lat_long_rect.isSet()) {
        obj.insert(QString("latLongRect"), ::OpenAPI::toJsonValue(m_lat_long_rect));
    }
    if (m_product_search_params.isSet()) {
        obj.insert(QString("productSearchParams"), ::OpenAPI::toJsonValue(m_product_search_params));
    }
    if (m_text_detection_params.isSet()) {
        obj.insert(QString("textDetectionParams"), ::OpenAPI::toJsonValue(m_text_detection_params));
    }
    if (m_web_detection_params.isSet()) {
        obj.insert(QString("webDetectionParams"), ::OpenAPI::toJsonValue(m_web_detection_params));
    }
    return obj;
}

OAICropHintsParams OAIImageContext::getCropHintsParams() const {
    return m_crop_hints_params;
}
void OAIImageContext::setCropHintsParams(const OAICropHintsParams &crop_hints_params) {
    m_crop_hints_params = crop_hints_params;
    m_crop_hints_params_isSet = true;
}

bool OAIImageContext::is_crop_hints_params_Set() const{
    return m_crop_hints_params_isSet;
}

bool OAIImageContext::is_crop_hints_params_Valid() const{
    return m_crop_hints_params_isValid;
}

QList<QString> OAIImageContext::getLanguageHints() const {
    return m_language_hints;
}
void OAIImageContext::setLanguageHints(const QList<QString> &language_hints) {
    m_language_hints = language_hints;
    m_language_hints_isSet = true;
}

bool OAIImageContext::is_language_hints_Set() const{
    return m_language_hints_isSet;
}

bool OAIImageContext::is_language_hints_Valid() const{
    return m_language_hints_isValid;
}

OAILatLongRect OAIImageContext::getLatLongRect() const {
    return m_lat_long_rect;
}
void OAIImageContext::setLatLongRect(const OAILatLongRect &lat_long_rect) {
    m_lat_long_rect = lat_long_rect;
    m_lat_long_rect_isSet = true;
}

bool OAIImageContext::is_lat_long_rect_Set() const{
    return m_lat_long_rect_isSet;
}

bool OAIImageContext::is_lat_long_rect_Valid() const{
    return m_lat_long_rect_isValid;
}

OAIProductSearchParams OAIImageContext::getProductSearchParams() const {
    return m_product_search_params;
}
void OAIImageContext::setProductSearchParams(const OAIProductSearchParams &product_search_params) {
    m_product_search_params = product_search_params;
    m_product_search_params_isSet = true;
}

bool OAIImageContext::is_product_search_params_Set() const{
    return m_product_search_params_isSet;
}

bool OAIImageContext::is_product_search_params_Valid() const{
    return m_product_search_params_isValid;
}

OAITextDetectionParams OAIImageContext::getTextDetectionParams() const {
    return m_text_detection_params;
}
void OAIImageContext::setTextDetectionParams(const OAITextDetectionParams &text_detection_params) {
    m_text_detection_params = text_detection_params;
    m_text_detection_params_isSet = true;
}

bool OAIImageContext::is_text_detection_params_Set() const{
    return m_text_detection_params_isSet;
}

bool OAIImageContext::is_text_detection_params_Valid() const{
    return m_text_detection_params_isValid;
}

OAIWebDetectionParams OAIImageContext::getWebDetectionParams() const {
    return m_web_detection_params;
}
void OAIImageContext::setWebDetectionParams(const OAIWebDetectionParams &web_detection_params) {
    m_web_detection_params = web_detection_params;
    m_web_detection_params_isSet = true;
}

bool OAIImageContext::is_web_detection_params_Set() const{
    return m_web_detection_params_isSet;
}

bool OAIImageContext::is_web_detection_params_Valid() const{
    return m_web_detection_params_isValid;
}

bool OAIImageContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crop_hints_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_hints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_long_rect.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_search_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_detection_params.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_detection_params.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
