/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageContext.h
 *
 * Image context and/or feature-specific parameters.
 */

#ifndef OAIImageContext_H
#define OAIImageContext_H

#include <QJsonObject>

#include "OAICropHintsParams.h"
#include "OAILatLongRect.h"
#include "OAIProductSearchParams.h"
#include "OAITextDetectionParams.h"
#include "OAIWebDetectionParams.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICropHintsParams;
class OAILatLongRect;
class OAIProductSearchParams;
class OAITextDetectionParams;
class OAIWebDetectionParams;

class OAIImageContext : public OAIObject {
public:
    OAIImageContext();
    OAIImageContext(QString json);
    ~OAIImageContext() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICropHintsParams getCropHintsParams() const;
    void setCropHintsParams(const OAICropHintsParams &crop_hints_params);
    bool is_crop_hints_params_Set() const;
    bool is_crop_hints_params_Valid() const;

    QList<QString> getLanguageHints() const;
    void setLanguageHints(const QList<QString> &language_hints);
    bool is_language_hints_Set() const;
    bool is_language_hints_Valid() const;

    OAILatLongRect getLatLongRect() const;
    void setLatLongRect(const OAILatLongRect &lat_long_rect);
    bool is_lat_long_rect_Set() const;
    bool is_lat_long_rect_Valid() const;

    OAIProductSearchParams getProductSearchParams() const;
    void setProductSearchParams(const OAIProductSearchParams &product_search_params);
    bool is_product_search_params_Set() const;
    bool is_product_search_params_Valid() const;

    OAITextDetectionParams getTextDetectionParams() const;
    void setTextDetectionParams(const OAITextDetectionParams &text_detection_params);
    bool is_text_detection_params_Set() const;
    bool is_text_detection_params_Valid() const;

    OAIWebDetectionParams getWebDetectionParams() const;
    void setWebDetectionParams(const OAIWebDetectionParams &web_detection_params);
    bool is_web_detection_params_Set() const;
    bool is_web_detection_params_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICropHintsParams m_crop_hints_params;
    bool m_crop_hints_params_isSet;
    bool m_crop_hints_params_isValid;

    QList<QString> m_language_hints;
    bool m_language_hints_isSet;
    bool m_language_hints_isValid;

    OAILatLongRect m_lat_long_rect;
    bool m_lat_long_rect_isSet;
    bool m_lat_long_rect_isValid;

    OAIProductSearchParams m_product_search_params;
    bool m_product_search_params_isSet;
    bool m_product_search_params_isValid;

    OAITextDetectionParams m_text_detection_params;
    bool m_text_detection_params_isSet;
    bool m_text_detection_params_isValid;

    OAIWebDetectionParams m_web_detection_params;
    bool m_web_detection_params_isSet;
    bool m_web_detection_params_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageContext)

#endif // OAIImageContext_H
