/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductSearchResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductSearchResults::OAIProductSearchResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductSearchResults::OAIProductSearchResults() {
    this->initializeModel();
}

OAIProductSearchResults::~OAIProductSearchResults() {}

void OAIProductSearchResults::initializeModel() {

    m_index_time_isSet = false;
    m_index_time_isValid = false;

    m_product_grouped_results_isSet = false;
    m_product_grouped_results_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIProductSearchResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductSearchResults::fromJsonObject(QJsonObject json) {

    m_index_time_isValid = ::OpenAPI::fromJsonValue(m_index_time, json[QString("indexTime")]);
    m_index_time_isSet = !json[QString("indexTime")].isNull() && m_index_time_isValid;

    m_product_grouped_results_isValid = ::OpenAPI::fromJsonValue(m_product_grouped_results, json[QString("productGroupedResults")]);
    m_product_grouped_results_isSet = !json[QString("productGroupedResults")].isNull() && m_product_grouped_results_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIProductSearchResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductSearchResults::asJsonObject() const {
    QJsonObject obj;
    if (m_index_time_isSet) {
        obj.insert(QString("indexTime"), ::OpenAPI::toJsonValue(m_index_time));
    }
    if (m_product_grouped_results.size() > 0) {
        obj.insert(QString("productGroupedResults"), ::OpenAPI::toJsonValue(m_product_grouped_results));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAIProductSearchResults::getIndexTime() const {
    return m_index_time;
}
void OAIProductSearchResults::setIndexTime(const QString &index_time) {
    m_index_time = index_time;
    m_index_time_isSet = true;
}

bool OAIProductSearchResults::is_index_time_Set() const{
    return m_index_time_isSet;
}

bool OAIProductSearchResults::is_index_time_Valid() const{
    return m_index_time_isValid;
}

QList<OAIGroupedResult> OAIProductSearchResults::getProductGroupedResults() const {
    return m_product_grouped_results;
}
void OAIProductSearchResults::setProductGroupedResults(const QList<OAIGroupedResult> &product_grouped_results) {
    m_product_grouped_results = product_grouped_results;
    m_product_grouped_results_isSet = true;
}

bool OAIProductSearchResults::is_product_grouped_results_Set() const{
    return m_product_grouped_results_isSet;
}

bool OAIProductSearchResults::is_product_grouped_results_Valid() const{
    return m_product_grouped_results_isValid;
}

QList<OAIResult> OAIProductSearchResults::getResults() const {
    return m_results;
}
void OAIProductSearchResults::setResults(const QList<OAIResult> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIProductSearchResults::is_results_Set() const{
    return m_results_isSet;
}

bool OAIProductSearchResults::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIProductSearchResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_grouped_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductSearchResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
