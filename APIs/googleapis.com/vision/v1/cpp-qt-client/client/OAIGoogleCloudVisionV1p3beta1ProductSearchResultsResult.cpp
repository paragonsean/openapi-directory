/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::~OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult() {}

void OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::asJsonObject() const {
    QJsonObject obj;
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_product.isSet()) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

QString OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::getImage() const {
    return m_image;
}
void OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::is_image_Set() const{
    return m_image_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::is_image_Valid() const{
    return m_image_isValid;
}

OAIGoogleCloudVisionV1p3beta1Product OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::getProduct() const {
    return m_product;
}
void OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::setProduct(const OAIGoogleCloudVisionV1p3beta1Product &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::is_product_Set() const{
    return m_product_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::is_product_Valid() const{
    return m_product_isValid;
}

float OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::getScore() const {
    return m_score;
}
void OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p3beta1ProductSearchResultsResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
