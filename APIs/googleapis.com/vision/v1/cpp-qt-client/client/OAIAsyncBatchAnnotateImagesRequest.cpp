/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAsyncBatchAnnotateImagesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAsyncBatchAnnotateImagesRequest::OAIAsyncBatchAnnotateImagesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAsyncBatchAnnotateImagesRequest::OAIAsyncBatchAnnotateImagesRequest() {
    this->initializeModel();
}

OAIAsyncBatchAnnotateImagesRequest::~OAIAsyncBatchAnnotateImagesRequest() {}

void OAIAsyncBatchAnnotateImagesRequest::initializeModel() {

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_output_config_isSet = false;
    m_output_config_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_requests_isSet = false;
    m_requests_isValid = false;
}

void OAIAsyncBatchAnnotateImagesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAsyncBatchAnnotateImagesRequest::fromJsonObject(QJsonObject json) {

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_output_config_isValid = ::OpenAPI::fromJsonValue(m_output_config, json[QString("outputConfig")]);
    m_output_config_isSet = !json[QString("outputConfig")].isNull() && m_output_config_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_requests_isValid = ::OpenAPI::fromJsonValue(m_requests, json[QString("requests")]);
    m_requests_isSet = !json[QString("requests")].isNull() && m_requests_isValid;
}

QString OAIAsyncBatchAnnotateImagesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAsyncBatchAnnotateImagesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_output_config.isSet()) {
        obj.insert(QString("outputConfig"), ::OpenAPI::toJsonValue(m_output_config));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_requests.size() > 0) {
        obj.insert(QString("requests"), ::OpenAPI::toJsonValue(m_requests));
    }
    return obj;
}

QMap<QString, QString> OAIAsyncBatchAnnotateImagesRequest::getLabels() const {
    return m_labels;
}
void OAIAsyncBatchAnnotateImagesRequest::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIOutputConfig OAIAsyncBatchAnnotateImagesRequest::getOutputConfig() const {
    return m_output_config;
}
void OAIAsyncBatchAnnotateImagesRequest::setOutputConfig(const OAIOutputConfig &output_config) {
    m_output_config = output_config;
    m_output_config_isSet = true;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_output_config_Set() const{
    return m_output_config_isSet;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_output_config_Valid() const{
    return m_output_config_isValid;
}

QString OAIAsyncBatchAnnotateImagesRequest::getParent() const {
    return m_parent;
}
void OAIAsyncBatchAnnotateImagesRequest::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_parent_Valid() const{
    return m_parent_isValid;
}

QList<OAIAnnotateImageRequest> OAIAsyncBatchAnnotateImagesRequest::getRequests() const {
    return m_requests;
}
void OAIAsyncBatchAnnotateImagesRequest::setRequests(const QList<OAIAnnotateImageRequest> &requests) {
    m_requests = requests;
    m_requests_isSet = true;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_requests_Set() const{
    return m_requests_isSet;
}

bool OAIAsyncBatchAnnotateImagesRequest::is_requests_Valid() const{
    return m_requests_isValid;
}

bool OAIAsyncBatchAnnotateImagesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requests.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAsyncBatchAnnotateImagesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
