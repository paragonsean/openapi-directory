/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p1beta1ColorInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p1beta1ColorInfo::OAIGoogleCloudVisionV1p1beta1ColorInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p1beta1ColorInfo::OAIGoogleCloudVisionV1p1beta1ColorInfo() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p1beta1ColorInfo::~OAIGoogleCloudVisionV1p1beta1ColorInfo() {}

void OAIGoogleCloudVisionV1p1beta1ColorInfo::initializeModel() {

    m_color_isSet = false;
    m_color_isValid = false;

    m_pixel_fraction_isSet = false;
    m_pixel_fraction_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIGoogleCloudVisionV1p1beta1ColorInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p1beta1ColorInfo::fromJsonObject(QJsonObject json) {

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_pixel_fraction_isValid = ::OpenAPI::fromJsonValue(m_pixel_fraction, json[QString("pixelFraction")]);
    m_pixel_fraction_isSet = !json[QString("pixelFraction")].isNull() && m_pixel_fraction_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;
}

QString OAIGoogleCloudVisionV1p1beta1ColorInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p1beta1ColorInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_color.isSet()) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_pixel_fraction_isSet) {
        obj.insert(QString("pixelFraction"), ::OpenAPI::toJsonValue(m_pixel_fraction));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

OAIColor OAIGoogleCloudVisionV1p1beta1ColorInfo::getColor() const {
    return m_color;
}
void OAIGoogleCloudVisionV1p1beta1ColorInfo::setColor(const OAIColor &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::is_color_Set() const{
    return m_color_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::is_color_Valid() const{
    return m_color_isValid;
}

float OAIGoogleCloudVisionV1p1beta1ColorInfo::getPixelFraction() const {
    return m_pixel_fraction;
}
void OAIGoogleCloudVisionV1p1beta1ColorInfo::setPixelFraction(const float &pixel_fraction) {
    m_pixel_fraction = pixel_fraction;
    m_pixel_fraction_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::is_pixel_fraction_Set() const{
    return m_pixel_fraction_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::is_pixel_fraction_Valid() const{
    return m_pixel_fraction_isValid;
}

float OAIGoogleCloudVisionV1p1beta1ColorInfo::getScore() const {
    return m_score;
}
void OAIGoogleCloudVisionV1p1beta1ColorInfo::setScore(const float &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::is_score_Set() const{
    return m_score_isSet;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_color.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pixel_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p1beta1ColorInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
