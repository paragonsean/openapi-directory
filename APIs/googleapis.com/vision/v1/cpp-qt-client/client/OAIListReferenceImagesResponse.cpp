/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListReferenceImagesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListReferenceImagesResponse::OAIListReferenceImagesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListReferenceImagesResponse::OAIListReferenceImagesResponse() {
    this->initializeModel();
}

OAIListReferenceImagesResponse::~OAIListReferenceImagesResponse() {}

void OAIListReferenceImagesResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_page_size_isSet = false;
    m_page_size_isValid = false;

    m_reference_images_isSet = false;
    m_reference_images_isValid = false;
}

void OAIListReferenceImagesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListReferenceImagesResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_page_size_isValid = ::OpenAPI::fromJsonValue(m_page_size, json[QString("pageSize")]);
    m_page_size_isSet = !json[QString("pageSize")].isNull() && m_page_size_isValid;

    m_reference_images_isValid = ::OpenAPI::fromJsonValue(m_reference_images, json[QString("referenceImages")]);
    m_reference_images_isSet = !json[QString("referenceImages")].isNull() && m_reference_images_isValid;
}

QString OAIListReferenceImagesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListReferenceImagesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_page_size_isSet) {
        obj.insert(QString("pageSize"), ::OpenAPI::toJsonValue(m_page_size));
    }
    if (m_reference_images.size() > 0) {
        obj.insert(QString("referenceImages"), ::OpenAPI::toJsonValue(m_reference_images));
    }
    return obj;
}

QString OAIListReferenceImagesResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListReferenceImagesResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListReferenceImagesResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListReferenceImagesResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

qint32 OAIListReferenceImagesResponse::getPageSize() const {
    return m_page_size;
}
void OAIListReferenceImagesResponse::setPageSize(const qint32 &page_size) {
    m_page_size = page_size;
    m_page_size_isSet = true;
}

bool OAIListReferenceImagesResponse::is_page_size_Set() const{
    return m_page_size_isSet;
}

bool OAIListReferenceImagesResponse::is_page_size_Valid() const{
    return m_page_size_isValid;
}

QList<OAIReferenceImage> OAIListReferenceImagesResponse::getReferenceImages() const {
    return m_reference_images;
}
void OAIListReferenceImagesResponse::setReferenceImages(const QList<OAIReferenceImage> &reference_images) {
    m_reference_images = reference_images;
    m_reference_images_isSet = true;
}

bool OAIListReferenceImagesResponse::is_reference_images_Set() const{
    return m_reference_images_isSet;
}

bool OAIListReferenceImagesResponse::is_reference_images_Valid() const{
    return m_reference_images_isValid;
}

bool OAIListReferenceImagesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListReferenceImagesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
