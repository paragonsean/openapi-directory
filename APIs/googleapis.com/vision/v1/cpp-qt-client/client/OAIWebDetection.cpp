/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebDetection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebDetection::OAIWebDetection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebDetection::OAIWebDetection() {
    this->initializeModel();
}

OAIWebDetection::~OAIWebDetection() {}

void OAIWebDetection::initializeModel() {

    m_best_guess_labels_isSet = false;
    m_best_guess_labels_isValid = false;

    m_full_matching_images_isSet = false;
    m_full_matching_images_isValid = false;

    m_pages_with_matching_images_isSet = false;
    m_pages_with_matching_images_isValid = false;

    m_partial_matching_images_isSet = false;
    m_partial_matching_images_isValid = false;

    m_visually_similar_images_isSet = false;
    m_visually_similar_images_isValid = false;

    m_web_entities_isSet = false;
    m_web_entities_isValid = false;
}

void OAIWebDetection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebDetection::fromJsonObject(QJsonObject json) {

    m_best_guess_labels_isValid = ::OpenAPI::fromJsonValue(m_best_guess_labels, json[QString("bestGuessLabels")]);
    m_best_guess_labels_isSet = !json[QString("bestGuessLabels")].isNull() && m_best_guess_labels_isValid;

    m_full_matching_images_isValid = ::OpenAPI::fromJsonValue(m_full_matching_images, json[QString("fullMatchingImages")]);
    m_full_matching_images_isSet = !json[QString("fullMatchingImages")].isNull() && m_full_matching_images_isValid;

    m_pages_with_matching_images_isValid = ::OpenAPI::fromJsonValue(m_pages_with_matching_images, json[QString("pagesWithMatchingImages")]);
    m_pages_with_matching_images_isSet = !json[QString("pagesWithMatchingImages")].isNull() && m_pages_with_matching_images_isValid;

    m_partial_matching_images_isValid = ::OpenAPI::fromJsonValue(m_partial_matching_images, json[QString("partialMatchingImages")]);
    m_partial_matching_images_isSet = !json[QString("partialMatchingImages")].isNull() && m_partial_matching_images_isValid;

    m_visually_similar_images_isValid = ::OpenAPI::fromJsonValue(m_visually_similar_images, json[QString("visuallySimilarImages")]);
    m_visually_similar_images_isSet = !json[QString("visuallySimilarImages")].isNull() && m_visually_similar_images_isValid;

    m_web_entities_isValid = ::OpenAPI::fromJsonValue(m_web_entities, json[QString("webEntities")]);
    m_web_entities_isSet = !json[QString("webEntities")].isNull() && m_web_entities_isValid;
}

QString OAIWebDetection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebDetection::asJsonObject() const {
    QJsonObject obj;
    if (m_best_guess_labels.size() > 0) {
        obj.insert(QString("bestGuessLabels"), ::OpenAPI::toJsonValue(m_best_guess_labels));
    }
    if (m_full_matching_images.size() > 0) {
        obj.insert(QString("fullMatchingImages"), ::OpenAPI::toJsonValue(m_full_matching_images));
    }
    if (m_pages_with_matching_images.size() > 0) {
        obj.insert(QString("pagesWithMatchingImages"), ::OpenAPI::toJsonValue(m_pages_with_matching_images));
    }
    if (m_partial_matching_images.size() > 0) {
        obj.insert(QString("partialMatchingImages"), ::OpenAPI::toJsonValue(m_partial_matching_images));
    }
    if (m_visually_similar_images.size() > 0) {
        obj.insert(QString("visuallySimilarImages"), ::OpenAPI::toJsonValue(m_visually_similar_images));
    }
    if (m_web_entities.size() > 0) {
        obj.insert(QString("webEntities"), ::OpenAPI::toJsonValue(m_web_entities));
    }
    return obj;
}

QList<OAIWebLabel> OAIWebDetection::getBestGuessLabels() const {
    return m_best_guess_labels;
}
void OAIWebDetection::setBestGuessLabels(const QList<OAIWebLabel> &best_guess_labels) {
    m_best_guess_labels = best_guess_labels;
    m_best_guess_labels_isSet = true;
}

bool OAIWebDetection::is_best_guess_labels_Set() const{
    return m_best_guess_labels_isSet;
}

bool OAIWebDetection::is_best_guess_labels_Valid() const{
    return m_best_guess_labels_isValid;
}

QList<OAIWebImage> OAIWebDetection::getFullMatchingImages() const {
    return m_full_matching_images;
}
void OAIWebDetection::setFullMatchingImages(const QList<OAIWebImage> &full_matching_images) {
    m_full_matching_images = full_matching_images;
    m_full_matching_images_isSet = true;
}

bool OAIWebDetection::is_full_matching_images_Set() const{
    return m_full_matching_images_isSet;
}

bool OAIWebDetection::is_full_matching_images_Valid() const{
    return m_full_matching_images_isValid;
}

QList<OAIWebPage> OAIWebDetection::getPagesWithMatchingImages() const {
    return m_pages_with_matching_images;
}
void OAIWebDetection::setPagesWithMatchingImages(const QList<OAIWebPage> &pages_with_matching_images) {
    m_pages_with_matching_images = pages_with_matching_images;
    m_pages_with_matching_images_isSet = true;
}

bool OAIWebDetection::is_pages_with_matching_images_Set() const{
    return m_pages_with_matching_images_isSet;
}

bool OAIWebDetection::is_pages_with_matching_images_Valid() const{
    return m_pages_with_matching_images_isValid;
}

QList<OAIWebImage> OAIWebDetection::getPartialMatchingImages() const {
    return m_partial_matching_images;
}
void OAIWebDetection::setPartialMatchingImages(const QList<OAIWebImage> &partial_matching_images) {
    m_partial_matching_images = partial_matching_images;
    m_partial_matching_images_isSet = true;
}

bool OAIWebDetection::is_partial_matching_images_Set() const{
    return m_partial_matching_images_isSet;
}

bool OAIWebDetection::is_partial_matching_images_Valid() const{
    return m_partial_matching_images_isValid;
}

QList<OAIWebImage> OAIWebDetection::getVisuallySimilarImages() const {
    return m_visually_similar_images;
}
void OAIWebDetection::setVisuallySimilarImages(const QList<OAIWebImage> &visually_similar_images) {
    m_visually_similar_images = visually_similar_images;
    m_visually_similar_images_isSet = true;
}

bool OAIWebDetection::is_visually_similar_images_Set() const{
    return m_visually_similar_images_isSet;
}

bool OAIWebDetection::is_visually_similar_images_Valid() const{
    return m_visually_similar_images_isValid;
}

QList<OAIWebEntity> OAIWebDetection::getWebEntities() const {
    return m_web_entities;
}
void OAIWebDetection::setWebEntities(const QList<OAIWebEntity> &web_entities) {
    m_web_entities = web_entities;
    m_web_entities_isSet = true;
}

bool OAIWebDetection::is_web_entities_Set() const{
    return m_web_entities_isSet;
}

bool OAIWebDetection::is_web_entities_Valid() const{
    return m_web_entities_isValid;
}

bool OAIWebDetection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_best_guess_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_matching_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages_with_matching_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_matching_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_visually_similar_images.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_entities.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebDetection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
