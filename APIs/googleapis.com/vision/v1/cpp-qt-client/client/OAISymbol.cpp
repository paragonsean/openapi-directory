/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISymbol.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISymbol::OAISymbol(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISymbol::OAISymbol() {
    this->initializeModel();
}

OAISymbol::~OAISymbol() {}

void OAISymbol::initializeModel() {

    m_bounding_box_isSet = false;
    m_bounding_box_isValid = false;

    m_confidence_isSet = false;
    m_confidence_isValid = false;

    m_property_isSet = false;
    m_property_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAISymbol::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISymbol::fromJsonObject(QJsonObject json) {

    m_bounding_box_isValid = ::OpenAPI::fromJsonValue(m_bounding_box, json[QString("boundingBox")]);
    m_bounding_box_isSet = !json[QString("boundingBox")].isNull() && m_bounding_box_isValid;

    m_confidence_isValid = ::OpenAPI::fromJsonValue(m_confidence, json[QString("confidence")]);
    m_confidence_isSet = !json[QString("confidence")].isNull() && m_confidence_isValid;

    m_property_isValid = ::OpenAPI::fromJsonValue(m_property, json[QString("property")]);
    m_property_isSet = !json[QString("property")].isNull() && m_property_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAISymbol::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISymbol::asJsonObject() const {
    QJsonObject obj;
    if (m_bounding_box.isSet()) {
        obj.insert(QString("boundingBox"), ::OpenAPI::toJsonValue(m_bounding_box));
    }
    if (m_confidence_isSet) {
        obj.insert(QString("confidence"), ::OpenAPI::toJsonValue(m_confidence));
    }
    if (m_property.isSet()) {
        obj.insert(QString("property"), ::OpenAPI::toJsonValue(m_property));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

OAIBoundingPoly OAISymbol::getBoundingBox() const {
    return m_bounding_box;
}
void OAISymbol::setBoundingBox(const OAIBoundingPoly &bounding_box) {
    m_bounding_box = bounding_box;
    m_bounding_box_isSet = true;
}

bool OAISymbol::is_bounding_box_Set() const{
    return m_bounding_box_isSet;
}

bool OAISymbol::is_bounding_box_Valid() const{
    return m_bounding_box_isValid;
}

float OAISymbol::getConfidence() const {
    return m_confidence;
}
void OAISymbol::setConfidence(const float &confidence) {
    m_confidence = confidence;
    m_confidence_isSet = true;
}

bool OAISymbol::is_confidence_Set() const{
    return m_confidence_isSet;
}

bool OAISymbol::is_confidence_Valid() const{
    return m_confidence_isValid;
}

OAITextProperty OAISymbol::getProperty() const {
    return m_property;
}
void OAISymbol::setProperty(const OAITextProperty &property) {
    m_property = property;
    m_property_isSet = true;
}

bool OAISymbol::is_property_Set() const{
    return m_property_isSet;
}

bool OAISymbol::is_property_Valid() const{
    return m_property_isValid;
}

QString OAISymbol::getText() const {
    return m_text;
}
void OAISymbol::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAISymbol::is_text_Set() const{
    return m_text_isSet;
}

bool OAISymbol::is_text_Valid() const{
    return m_text_isValid;
}

bool OAISymbol::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bounding_box.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_confidence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISymbol::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
