/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPurgeProductsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPurgeProductsRequest::OAIPurgeProductsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPurgeProductsRequest::OAIPurgeProductsRequest() {
    this->initializeModel();
}

OAIPurgeProductsRequest::~OAIPurgeProductsRequest() {}

void OAIPurgeProductsRequest::initializeModel() {

    m_delete_orphan_products_isSet = false;
    m_delete_orphan_products_isValid = false;

    m_force_isSet = false;
    m_force_isValid = false;

    m_product_set_purge_config_isSet = false;
    m_product_set_purge_config_isValid = false;
}

void OAIPurgeProductsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPurgeProductsRequest::fromJsonObject(QJsonObject json) {

    m_delete_orphan_products_isValid = ::OpenAPI::fromJsonValue(m_delete_orphan_products, json[QString("deleteOrphanProducts")]);
    m_delete_orphan_products_isSet = !json[QString("deleteOrphanProducts")].isNull() && m_delete_orphan_products_isValid;

    m_force_isValid = ::OpenAPI::fromJsonValue(m_force, json[QString("force")]);
    m_force_isSet = !json[QString("force")].isNull() && m_force_isValid;

    m_product_set_purge_config_isValid = ::OpenAPI::fromJsonValue(m_product_set_purge_config, json[QString("productSetPurgeConfig")]);
    m_product_set_purge_config_isSet = !json[QString("productSetPurgeConfig")].isNull() && m_product_set_purge_config_isValid;
}

QString OAIPurgeProductsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPurgeProductsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_delete_orphan_products_isSet) {
        obj.insert(QString("deleteOrphanProducts"), ::OpenAPI::toJsonValue(m_delete_orphan_products));
    }
    if (m_force_isSet) {
        obj.insert(QString("force"), ::OpenAPI::toJsonValue(m_force));
    }
    if (m_product_set_purge_config.isSet()) {
        obj.insert(QString("productSetPurgeConfig"), ::OpenAPI::toJsonValue(m_product_set_purge_config));
    }
    return obj;
}

bool OAIPurgeProductsRequest::isDeleteOrphanProducts() const {
    return m_delete_orphan_products;
}
void OAIPurgeProductsRequest::setDeleteOrphanProducts(const bool &delete_orphan_products) {
    m_delete_orphan_products = delete_orphan_products;
    m_delete_orphan_products_isSet = true;
}

bool OAIPurgeProductsRequest::is_delete_orphan_products_Set() const{
    return m_delete_orphan_products_isSet;
}

bool OAIPurgeProductsRequest::is_delete_orphan_products_Valid() const{
    return m_delete_orphan_products_isValid;
}

bool OAIPurgeProductsRequest::isForce() const {
    return m_force;
}
void OAIPurgeProductsRequest::setForce(const bool &force) {
    m_force = force;
    m_force_isSet = true;
}

bool OAIPurgeProductsRequest::is_force_Set() const{
    return m_force_isSet;
}

bool OAIPurgeProductsRequest::is_force_Valid() const{
    return m_force_isValid;
}

OAIProductSetPurgeConfig OAIPurgeProductsRequest::getProductSetPurgeConfig() const {
    return m_product_set_purge_config;
}
void OAIPurgeProductsRequest::setProductSetPurgeConfig(const OAIProductSetPurgeConfig &product_set_purge_config) {
    m_product_set_purge_config = product_set_purge_config;
    m_product_set_purge_config_isSet = true;
}

bool OAIPurgeProductsRequest::is_product_set_purge_config_Set() const{
    return m_product_set_purge_config_isSet;
}

bool OAIPurgeProductsRequest::is_product_set_purge_config_Valid() const{
    return m_product_set_purge_config_isValid;
}

bool OAIPurgeProductsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_delete_orphan_products_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_set_purge_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPurgeProductsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
