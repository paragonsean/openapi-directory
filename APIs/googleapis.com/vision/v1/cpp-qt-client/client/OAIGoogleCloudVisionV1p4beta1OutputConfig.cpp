/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudVisionV1p4beta1OutputConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudVisionV1p4beta1OutputConfig::OAIGoogleCloudVisionV1p4beta1OutputConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudVisionV1p4beta1OutputConfig::OAIGoogleCloudVisionV1p4beta1OutputConfig() {
    this->initializeModel();
}

OAIGoogleCloudVisionV1p4beta1OutputConfig::~OAIGoogleCloudVisionV1p4beta1OutputConfig() {}

void OAIGoogleCloudVisionV1p4beta1OutputConfig::initializeModel() {

    m_batch_size_isSet = false;
    m_batch_size_isValid = false;

    m_gcs_destination_isSet = false;
    m_gcs_destination_isValid = false;
}

void OAIGoogleCloudVisionV1p4beta1OutputConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudVisionV1p4beta1OutputConfig::fromJsonObject(QJsonObject json) {

    m_batch_size_isValid = ::OpenAPI::fromJsonValue(m_batch_size, json[QString("batchSize")]);
    m_batch_size_isSet = !json[QString("batchSize")].isNull() && m_batch_size_isValid;

    m_gcs_destination_isValid = ::OpenAPI::fromJsonValue(m_gcs_destination, json[QString("gcsDestination")]);
    m_gcs_destination_isSet = !json[QString("gcsDestination")].isNull() && m_gcs_destination_isValid;
}

QString OAIGoogleCloudVisionV1p4beta1OutputConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudVisionV1p4beta1OutputConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_batch_size_isSet) {
        obj.insert(QString("batchSize"), ::OpenAPI::toJsonValue(m_batch_size));
    }
    if (m_gcs_destination.isSet()) {
        obj.insert(QString("gcsDestination"), ::OpenAPI::toJsonValue(m_gcs_destination));
    }
    return obj;
}

qint32 OAIGoogleCloudVisionV1p4beta1OutputConfig::getBatchSize() const {
    return m_batch_size;
}
void OAIGoogleCloudVisionV1p4beta1OutputConfig::setBatchSize(const qint32 &batch_size) {
    m_batch_size = batch_size;
    m_batch_size_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1OutputConfig::is_batch_size_Set() const{
    return m_batch_size_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1OutputConfig::is_batch_size_Valid() const{
    return m_batch_size_isValid;
}

OAIGoogleCloudVisionV1p4beta1GcsDestination OAIGoogleCloudVisionV1p4beta1OutputConfig::getGcsDestination() const {
    return m_gcs_destination;
}
void OAIGoogleCloudVisionV1p4beta1OutputConfig::setGcsDestination(const OAIGoogleCloudVisionV1p4beta1GcsDestination &gcs_destination) {
    m_gcs_destination = gcs_destination;
    m_gcs_destination_isSet = true;
}

bool OAIGoogleCloudVisionV1p4beta1OutputConfig::is_gcs_destination_Set() const{
    return m_gcs_destination_isSet;
}

bool OAIGoogleCloudVisionV1p4beta1OutputConfig::is_gcs_destination_Valid() const{
    return m_gcs_destination_isValid;
}

bool OAIGoogleCloudVisionV1p4beta1OutputConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batch_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcs_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudVisionV1p4beta1OutputConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
