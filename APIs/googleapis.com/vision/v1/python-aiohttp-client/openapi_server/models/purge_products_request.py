# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_set_purge_config import ProductSetPurgeConfig
from openapi_server import util


class PurgeProductsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delete_orphan_products: bool=None, force: bool=None, product_set_purge_config: ProductSetPurgeConfig=None):
        """PurgeProductsRequest - a model defined in OpenAPI

        :param delete_orphan_products: The delete_orphan_products of this PurgeProductsRequest.
        :param force: The force of this PurgeProductsRequest.
        :param product_set_purge_config: The product_set_purge_config of this PurgeProductsRequest.
        """
        self.openapi_types = {
            'delete_orphan_products': bool,
            'force': bool,
            'product_set_purge_config': ProductSetPurgeConfig
        }

        self.attribute_map = {
            'delete_orphan_products': 'deleteOrphanProducts',
            'force': 'force',
            'product_set_purge_config': 'productSetPurgeConfig'
        }

        self._delete_orphan_products = delete_orphan_products
        self._force = force
        self._product_set_purge_config = product_set_purge_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PurgeProductsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PurgeProductsRequest of this PurgeProductsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delete_orphan_products(self):
        """Gets the delete_orphan_products of this PurgeProductsRequest.

        If delete_orphan_products is true, all Products that are not in any ProductSet will be deleted.

        :return: The delete_orphan_products of this PurgeProductsRequest.
        :rtype: bool
        """
        return self._delete_orphan_products

    @delete_orphan_products.setter
    def delete_orphan_products(self, delete_orphan_products):
        """Sets the delete_orphan_products of this PurgeProductsRequest.

        If delete_orphan_products is true, all Products that are not in any ProductSet will be deleted.

        :param delete_orphan_products: The delete_orphan_products of this PurgeProductsRequest.
        :type delete_orphan_products: bool
        """

        self._delete_orphan_products = delete_orphan_products

    @property
    def force(self):
        """Gets the force of this PurgeProductsRequest.

        The default value is false. Override this value to true to actually perform the purge.

        :return: The force of this PurgeProductsRequest.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this PurgeProductsRequest.

        The default value is false. Override this value to true to actually perform the purge.

        :param force: The force of this PurgeProductsRequest.
        :type force: bool
        """

        self._force = force

    @property
    def product_set_purge_config(self):
        """Gets the product_set_purge_config of this PurgeProductsRequest.


        :return: The product_set_purge_config of this PurgeProductsRequest.
        :rtype: ProductSetPurgeConfig
        """
        return self._product_set_purge_config

    @product_set_purge_config.setter
    def product_set_purge_config(self, product_set_purge_config):
        """Sets the product_set_purge_config of this PurgeProductsRequest.


        :param product_set_purge_config: The product_set_purge_config of this PurgeProductsRequest.
        :type product_set_purge_config: ProductSetPurgeConfig
        """

        self._product_set_purge_config = product_set_purge_config
