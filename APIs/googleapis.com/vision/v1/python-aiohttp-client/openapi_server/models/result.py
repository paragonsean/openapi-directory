# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product import Product
from openapi_server import util


class Result(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image: str=None, product: Product=None, score: float=None):
        """Result - a model defined in OpenAPI

        :param image: The image of this Result.
        :param product: The product of this Result.
        :param score: The score of this Result.
        """
        self.openapi_types = {
            'image': str,
            'product': Product,
            'score': float
        }

        self.attribute_map = {
            'image': 'image',
            'product': 'product',
            'score': 'score'
        }

        self._image = image
        self._product = product
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Result':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Result of this Result.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image(self):
        """Gets the image of this Result.

        The resource name of the image from the product that is the closest match to the query.

        :return: The image of this Result.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Result.

        The resource name of the image from the product that is the closest match to the query.

        :param image: The image of this Result.
        :type image: str
        """

        self._image = image

    @property
    def product(self):
        """Gets the product of this Result.


        :return: The product of this Result.
        :rtype: Product
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Result.


        :param product: The product of this Result.
        :type product: Product
        """

        self._product = product

    @property
    def score(self):
        """Gets the score of this Result.

        A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).

        :return: The score of this Result.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Result.

        A confidence level on the match, ranging from 0 (no confidence) to 1 (full confidence).

        :param score: The score of this Result.
        :type score: float
        """

        self._score = score
