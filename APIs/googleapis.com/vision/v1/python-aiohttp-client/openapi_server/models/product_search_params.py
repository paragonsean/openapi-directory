# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server import util


class ProductSearchParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_poly: BoundingPoly=None, filter: str=None, product_categories: List[str]=None, product_set: str=None):
        """ProductSearchParams - a model defined in OpenAPI

        :param bounding_poly: The bounding_poly of this ProductSearchParams.
        :param filter: The filter of this ProductSearchParams.
        :param product_categories: The product_categories of this ProductSearchParams.
        :param product_set: The product_set of this ProductSearchParams.
        """
        self.openapi_types = {
            'bounding_poly': BoundingPoly,
            'filter': str,
            'product_categories': List[str],
            'product_set': str
        }

        self.attribute_map = {
            'bounding_poly': 'boundingPoly',
            'filter': 'filter',
            'product_categories': 'productCategories',
            'product_set': 'productSet'
        }

        self._bounding_poly = bounding_poly
        self._filter = filter
        self._product_categories = product_categories
        self._product_set = product_set

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSearchParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSearchParams of this ProductSearchParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_poly(self):
        """Gets the bounding_poly of this ProductSearchParams.


        :return: The bounding_poly of this ProductSearchParams.
        :rtype: BoundingPoly
        """
        return self._bounding_poly

    @bounding_poly.setter
    def bounding_poly(self, bounding_poly):
        """Sets the bounding_poly of this ProductSearchParams.


        :param bounding_poly: The bounding_poly of this ProductSearchParams.
        :type bounding_poly: BoundingPoly
        """

        self._bounding_poly = bounding_poly

    @property
    def filter(self):
        """Gets the filter of this ProductSearchParams.

        The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An '=' should be used to connect the key and value. For example, \"(color = red OR color = blue) AND brand = Google\" is acceptable, but \"(color = red OR brand = Google)\" is not acceptable. \"color: red\" is not acceptable because it uses a ':' instead of an '='.

        :return: The filter of this ProductSearchParams.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this ProductSearchParams.

        The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An '=' should be used to connect the key and value. For example, \"(color = red OR color = blue) AND brand = Google\" is acceptable, but \"(color = red OR brand = Google)\" is not acceptable. \"color: red\" is not acceptable because it uses a ':' instead of an '='.

        :param filter: The filter of this ProductSearchParams.
        :type filter: str
        """

        self._filter = filter

    @property
    def product_categories(self):
        """Gets the product_categories of this ProductSearchParams.

        The list of product categories to search in. Currently, we only consider the first category, and either \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\", or \"general-v1\" should be specified. The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported but will be deprecated. For new products, please use \"homegoods-v2\", \"apparel-v2\", or \"toys-v2\" for better product search accuracy. It is recommended to migrate existing products to these categories as well.

        :return: The product_categories of this ProductSearchParams.
        :rtype: List[str]
        """
        return self._product_categories

    @product_categories.setter
    def product_categories(self, product_categories):
        """Sets the product_categories of this ProductSearchParams.

        The list of product categories to search in. Currently, we only consider the first category, and either \"homegoods-v2\", \"apparel-v2\", \"toys-v2\", \"packagedgoods-v1\", or \"general-v1\" should be specified. The legacy categories \"homegoods\", \"apparel\", and \"toys\" are still supported but will be deprecated. For new products, please use \"homegoods-v2\", \"apparel-v2\", or \"toys-v2\" for better product search accuracy. It is recommended to migrate existing products to these categories as well.

        :param product_categories: The product_categories of this ProductSearchParams.
        :type product_categories: List[str]
        """

        self._product_categories = product_categories

    @property
    def product_set(self):
        """Gets the product_set of this ProductSearchParams.

        The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.

        :return: The product_set of this ProductSearchParams.
        :rtype: str
        """
        return self._product_set

    @product_set.setter
    def product_set(self, product_set):
        """Sets the product_set of this ProductSearchParams.

        The resource name of a ProductSet to be searched for similar images. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`.

        :param product_set: The product_set of this ProductSearchParams.
        :type product_set: str
        """

        self._product_set = product_set
