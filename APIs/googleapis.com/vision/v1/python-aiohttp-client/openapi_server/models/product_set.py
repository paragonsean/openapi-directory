# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ProductSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, index_error: Status=None, index_time: str=None, name: str=None):
        """ProductSet - a model defined in OpenAPI

        :param display_name: The display_name of this ProductSet.
        :param index_error: The index_error of this ProductSet.
        :param index_time: The index_time of this ProductSet.
        :param name: The name of this ProductSet.
        """
        self.openapi_types = {
            'display_name': str,
            'index_error': Status,
            'index_time': str,
            'name': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'index_error': 'indexError',
            'index_time': 'indexTime',
            'name': 'name'
        }

        self._display_name = display_name
        self._index_error = index_error
        self._index_time = index_time
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductSet of this ProductSet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ProductSet.

        The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.

        :return: The display_name of this ProductSet.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProductSet.

        The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.

        :param display_name: The display_name of this ProductSet.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def index_error(self):
        """Gets the index_error of this ProductSet.


        :return: The index_error of this ProductSet.
        :rtype: Status
        """
        return self._index_error

    @index_error.setter
    def index_error(self, index_error):
        """Sets the index_error of this ProductSet.


        :param index_error: The index_error of this ProductSet.
        :type index_error: Status
        """

        self._index_error = index_error

    @property
    def index_time(self):
        """Gets the index_time of this ProductSet.

        Output only. The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp is the default value \"1970-01-01T00:00:00Z\". This field is ignored when creating a ProductSet.

        :return: The index_time of this ProductSet.
        :rtype: str
        """
        return self._index_time

    @index_time.setter
    def index_time(self, index_time):
        """Sets the index_time of this ProductSet.

        Output only. The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp is the default value \"1970-01-01T00:00:00Z\". This field is ignored when creating a ProductSet.

        :param index_time: The index_time of this ProductSet.
        :type index_time: str
        """

        self._index_time = index_time

    @property
    def name(self):
        """Gets the name of this ProductSet.

        The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.

        :return: The name of this ProductSet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductSet.

        The resource name of the ProductSet. Format is: `projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID`. This field is ignored when creating a ProductSet.

        :param name: The name of this ProductSet.
        :type name: str
        """

        self._name = name
