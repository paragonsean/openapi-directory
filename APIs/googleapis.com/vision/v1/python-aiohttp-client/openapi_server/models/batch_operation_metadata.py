# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BatchOperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, state: str=None, submit_time: str=None):
        """BatchOperationMetadata - a model defined in OpenAPI

        :param end_time: The end_time of this BatchOperationMetadata.
        :param state: The state of this BatchOperationMetadata.
        :param submit_time: The submit_time of this BatchOperationMetadata.
        """
        self.openapi_types = {
            'end_time': str,
            'state': str,
            'submit_time': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'state': 'state',
            'submit_time': 'submitTime'
        }

        self._end_time = end_time
        self._state = state
        self._submit_time = submit_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BatchOperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BatchOperationMetadata of this BatchOperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this BatchOperationMetadata.

        The time when the batch request is finished and google.longrunning.Operation.done is set to true.

        :return: The end_time of this BatchOperationMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this BatchOperationMetadata.

        The time when the batch request is finished and google.longrunning.Operation.done is set to true.

        :param end_time: The end_time of this BatchOperationMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def state(self):
        """Gets the state of this BatchOperationMetadata.

        The current state of the batch operation.

        :return: The state of this BatchOperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BatchOperationMetadata.

        The current state of the batch operation.

        :param state: The state of this BatchOperationMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PROCESSING", "SUCCESSFUL", "FAILED", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submit_time(self):
        """Gets the submit_time of this BatchOperationMetadata.

        The time when the batch request was submitted to the server.

        :return: The submit_time of this BatchOperationMetadata.
        :rtype: str
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """Sets the submit_time of this BatchOperationMetadata.

        The time when the batch request was submitted to the server.

        :param submit_time: The submit_time of this BatchOperationMetadata.
        :type submit_time: str
        """

        self._submit_time = submit_time
