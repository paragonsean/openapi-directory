# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.block import Block
from openapi_server.models.text_property import TextProperty
from openapi_server import util


class Page(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocks: List[Block]=None, confidence: float=None, height: int=None, _property: TextProperty=None, width: int=None):
        """Page - a model defined in OpenAPI

        :param blocks: The blocks of this Page.
        :param confidence: The confidence of this Page.
        :param height: The height of this Page.
        :param _property: The _property of this Page.
        :param width: The width of this Page.
        """
        self.openapi_types = {
            'blocks': List[Block],
            'confidence': float,
            'height': int,
            '_property': TextProperty,
            'width': int
        }

        self.attribute_map = {
            'blocks': 'blocks',
            'confidence': 'confidence',
            'height': 'height',
            '_property': 'property',
            'width': 'width'
        }

        self._blocks = blocks
        self._confidence = confidence
        self._height = height
        self.__property = _property
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Page':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Page of this Page.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocks(self):
        """Gets the blocks of this Page.

        List of blocks of text, images etc on this page.

        :return: The blocks of this Page.
        :rtype: List[Block]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this Page.

        List of blocks of text, images etc on this page.

        :param blocks: The blocks of this Page.
        :type blocks: List[Block]
        """

        self._blocks = blocks

    @property
    def confidence(self):
        """Gets the confidence of this Page.

        Confidence of the OCR results on the page. Range [0, 1].

        :return: The confidence of this Page.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Page.

        Confidence of the OCR results on the page. Range [0, 1].

        :param confidence: The confidence of this Page.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def height(self):
        """Gets the height of this Page.

        Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.

        :return: The height of this Page.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Page.

        Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.

        :param height: The height of this Page.
        :type height: int
        """

        self._height = height

    @property
    def _property(self):
        """Gets the _property of this Page.


        :return: The _property of this Page.
        :rtype: TextProperty
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Page.


        :param _property: The _property of this Page.
        :type _property: TextProperty
        """

        self.__property = _property

    @property
    def width(self):
        """Gets the width of this Page.

        Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.

        :return: The width of this Page.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Page.

        Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.

        :param width: The width of this Page.
        :type width: int
        """

        self._width = width
