# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.gcs_source import GcsSource
from openapi_server import util


class InputConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, gcs_source: GcsSource=None, mime_type: str=None):
        """InputConfig - a model defined in OpenAPI

        :param content: The content of this InputConfig.
        :param gcs_source: The gcs_source of this InputConfig.
        :param mime_type: The mime_type of this InputConfig.
        """
        self.openapi_types = {
            'content': str,
            'gcs_source': GcsSource,
            'mime_type': str
        }

        self.attribute_map = {
            'content': 'content',
            'gcs_source': 'gcsSource',
            'mime_type': 'mimeType'
        }

        self._content = content
        self._gcs_source = gcs_source
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InputConfig of this InputConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this InputConfig.

        File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.

        :return: The content of this InputConfig.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InputConfig.

        File content, represented as a stream of bytes. Note: As with all `bytes` fields, protobuffers use a pure binary representation, whereas JSON representations use base64. Currently, this field only works for BatchAnnotateFiles requests. It does not work for AsyncBatchAnnotateFiles requests.

        :param content: The content of this InputConfig.
        :type content: str
        """

        self._content = content

    @property
    def gcs_source(self):
        """Gets the gcs_source of this InputConfig.


        :return: The gcs_source of this InputConfig.
        :rtype: GcsSource
        """
        return self._gcs_source

    @gcs_source.setter
    def gcs_source(self, gcs_source):
        """Sets the gcs_source of this InputConfig.


        :param gcs_source: The gcs_source of this InputConfig.
        :type gcs_source: GcsSource
        """

        self._gcs_source = gcs_source

    @property
    def mime_type(self):
        """Gets the mime_type of this InputConfig.

        The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.

        :return: The mime_type of this InputConfig.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this InputConfig.

        The type of the file. Currently only \"application/pdf\", \"image/tiff\" and \"image/gif\" are supported. Wildcards are not supported.

        :param mime_type: The mime_type of this InputConfig.
        :type mime_type: str
        """

        self._mime_type = mime_type
