# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server.models.paragraph import Paragraph
from openapi_server.models.text_property import TextProperty
from openapi_server import util


class Block(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, block_type: str=None, bounding_box: BoundingPoly=None, confidence: float=None, paragraphs: List[Paragraph]=None, _property: TextProperty=None):
        """Block - a model defined in OpenAPI

        :param block_type: The block_type of this Block.
        :param bounding_box: The bounding_box of this Block.
        :param confidence: The confidence of this Block.
        :param paragraphs: The paragraphs of this Block.
        :param _property: The _property of this Block.
        """
        self.openapi_types = {
            'block_type': str,
            'bounding_box': BoundingPoly,
            'confidence': float,
            'paragraphs': List[Paragraph],
            '_property': TextProperty
        }

        self.attribute_map = {
            'block_type': 'blockType',
            'bounding_box': 'boundingBox',
            'confidence': 'confidence',
            'paragraphs': 'paragraphs',
            '_property': 'property'
        }

        self._block_type = block_type
        self._bounding_box = bounding_box
        self._confidence = confidence
        self._paragraphs = paragraphs
        self.__property = _property

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Block':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Block of this Block.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def block_type(self):
        """Gets the block_type of this Block.

        Detected block type (text, image etc) for this block.

        :return: The block_type of this Block.
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type):
        """Sets the block_type of this Block.

        Detected block type (text, image etc) for this block.

        :param block_type: The block_type of this Block.
        :type block_type: str
        """
        allowed_values = ["UNKNOWN", "TEXT", "TABLE", "PICTURE", "RULER", "BARCODE"]  # noqa: E501
        if block_type not in allowed_values:
            raise ValueError(
                "Invalid value for `block_type` ({0}), must be one of {1}"
                .format(block_type, allowed_values)
            )

        self._block_type = block_type

    @property
    def bounding_box(self):
        """Gets the bounding_box of this Block.


        :return: The bounding_box of this Block.
        :rtype: BoundingPoly
        """
        return self._bounding_box

    @bounding_box.setter
    def bounding_box(self, bounding_box):
        """Sets the bounding_box of this Block.


        :param bounding_box: The bounding_box of this Block.
        :type bounding_box: BoundingPoly
        """

        self._bounding_box = bounding_box

    @property
    def confidence(self):
        """Gets the confidence of this Block.

        Confidence of the OCR results on the block. Range [0, 1].

        :return: The confidence of this Block.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Block.

        Confidence of the OCR results on the block. Range [0, 1].

        :param confidence: The confidence of this Block.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def paragraphs(self):
        """Gets the paragraphs of this Block.

        List of paragraphs in this block (if this blocks is of type text).

        :return: The paragraphs of this Block.
        :rtype: List[Paragraph]
        """
        return self._paragraphs

    @paragraphs.setter
    def paragraphs(self, paragraphs):
        """Sets the paragraphs of this Block.

        List of paragraphs in this block (if this blocks is of type text).

        :param paragraphs: The paragraphs of this Block.
        :type paragraphs: List[Paragraph]
        """

        self._paragraphs = paragraphs

    @property
    def _property(self):
        """Gets the _property of this Block.


        :return: The _property of this Block.
        :rtype: TextProperty
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Block.


        :param _property: The _property of this Block.
        :type _property: TextProperty
        """

        self.__property = _property
