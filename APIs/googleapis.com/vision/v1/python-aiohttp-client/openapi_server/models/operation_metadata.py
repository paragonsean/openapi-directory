# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, state: str=None, update_time: str=None):
        """OperationMetadata - a model defined in OpenAPI

        :param create_time: The create_time of this OperationMetadata.
        :param state: The state of this OperationMetadata.
        :param update_time: The update_time of this OperationMetadata.
        """
        self.openapi_types = {
            'create_time': str,
            'state': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetadata of this OperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this OperationMetadata.

        The time when the batch request was received.

        :return: The create_time of this OperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OperationMetadata.

        The time when the batch request was received.

        :param create_time: The create_time of this OperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def state(self):
        """Gets the state of this OperationMetadata.

        Current state of the batch operation.

        :return: The state of this OperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OperationMetadata.

        Current state of the batch operation.

        :param state: The state of this OperationMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATED", "RUNNING", "DONE", "CANCELLED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this OperationMetadata.

        The time when the operation result was last updated.

        :return: The update_time of this OperationMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this OperationMetadata.

        The time when the operation result was last updated.

        :param update_time: The update_time of this OperationMetadata.
        :type update_time: str
        """

        self._update_time = update_time
