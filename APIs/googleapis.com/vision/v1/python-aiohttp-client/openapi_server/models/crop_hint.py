# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bounding_poly import BoundingPoly
from openapi_server import util


class CropHint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bounding_poly: BoundingPoly=None, confidence: float=None, importance_fraction: float=None):
        """CropHint - a model defined in OpenAPI

        :param bounding_poly: The bounding_poly of this CropHint.
        :param confidence: The confidence of this CropHint.
        :param importance_fraction: The importance_fraction of this CropHint.
        """
        self.openapi_types = {
            'bounding_poly': BoundingPoly,
            'confidence': float,
            'importance_fraction': float
        }

        self.attribute_map = {
            'bounding_poly': 'boundingPoly',
            'confidence': 'confidence',
            'importance_fraction': 'importanceFraction'
        }

        self._bounding_poly = bounding_poly
        self._confidence = confidence
        self._importance_fraction = importance_fraction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CropHint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CropHint of this CropHint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bounding_poly(self):
        """Gets the bounding_poly of this CropHint.


        :return: The bounding_poly of this CropHint.
        :rtype: BoundingPoly
        """
        return self._bounding_poly

    @bounding_poly.setter
    def bounding_poly(self, bounding_poly):
        """Sets the bounding_poly of this CropHint.


        :param bounding_poly: The bounding_poly of this CropHint.
        :type bounding_poly: BoundingPoly
        """

        self._bounding_poly = bounding_poly

    @property
    def confidence(self):
        """Gets the confidence of this CropHint.

        Confidence of this being a salient region. Range [0, 1].

        :return: The confidence of this CropHint.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this CropHint.

        Confidence of this being a salient region. Range [0, 1].

        :param confidence: The confidence of this CropHint.
        :type confidence: float
        """

        self._confidence = confidence

    @property
    def importance_fraction(self):
        """Gets the importance_fraction of this CropHint.

        Fraction of importance of this salient region with respect to the original image.

        :return: The importance_fraction of this CropHint.
        :rtype: float
        """
        return self._importance_fraction

    @importance_fraction.setter
    def importance_fraction(self, importance_fraction):
        """Sets the importance_fraction of this CropHint.

        Fraction of importance of this salient region with respect to the original image.

        :param importance_fraction: The importance_fraction of this CropHint.
        :type importance_fraction: float
        """

        self._importance_fraction = importance_fraction
