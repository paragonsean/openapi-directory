/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Feature model module.
 * @module model/Feature
 * @version v1
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * The type of Google Cloud Vision API detection to perform, and the maximum number of results to return for that type. Multiple &#x60;Feature&#x60; objects can be specified in the &#x60;features&#x60; list.
     * @alias module:model/Feature
     */
    constructor() { 
        
        Feature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('maxResults')) {
                obj['maxResults'] = ApiClient.convertToType(data['maxResults'], 'Number');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Maximum number of results of this type. Does not apply to `TEXT_DETECTION`, `DOCUMENT_TEXT_DETECTION`, or `CROP_HINTS`.
 * @member {Number} maxResults
 */
Feature.prototype['maxResults'] = undefined;

/**
 * Model to use for the feature. Supported values: \"builtin/stable\" (the default if unset) and \"builtin/latest\". `DOCUMENT_TEXT_DETECTION` and `TEXT_DETECTION` also support \"builtin/weekly\" for the bleeding edge release updated weekly.
 * @member {String} model
 */
Feature.prototype['model'] = undefined;

/**
 * The feature type.
 * @member {module:model/Feature.TypeEnum} type
 */
Feature.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Feature['TypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "FACE_DETECTION"
     * @const
     */
    "FACE_DETECTION": "FACE_DETECTION",

    /**
     * value: "LANDMARK_DETECTION"
     * @const
     */
    "LANDMARK_DETECTION": "LANDMARK_DETECTION",

    /**
     * value: "LOGO_DETECTION"
     * @const
     */
    "LOGO_DETECTION": "LOGO_DETECTION",

    /**
     * value: "LABEL_DETECTION"
     * @const
     */
    "LABEL_DETECTION": "LABEL_DETECTION",

    /**
     * value: "TEXT_DETECTION"
     * @const
     */
    "TEXT_DETECTION": "TEXT_DETECTION",

    /**
     * value: "DOCUMENT_TEXT_DETECTION"
     * @const
     */
    "DOCUMENT_TEXT_DETECTION": "DOCUMENT_TEXT_DETECTION",

    /**
     * value: "SAFE_SEARCH_DETECTION"
     * @const
     */
    "SAFE_SEARCH_DETECTION": "SAFE_SEARCH_DETECTION",

    /**
     * value: "IMAGE_PROPERTIES"
     * @const
     */
    "IMAGE_PROPERTIES": "IMAGE_PROPERTIES",

    /**
     * value: "CROP_HINTS"
     * @const
     */
    "CROP_HINTS": "CROP_HINTS",

    /**
     * value: "WEB_DETECTION"
     * @const
     */
    "WEB_DETECTION": "WEB_DETECTION",

    /**
     * value: "PRODUCT_SEARCH"
     * @const
     */
    "PRODUCT_SEARCH": "PRODUCT_SEARCH",

    /**
     * value: "OBJECT_LOCALIZATION"
     * @const
     */
    "OBJECT_LOCALIZATION": "OBJECT_LOCALIZATION"
};



export default Feature;

