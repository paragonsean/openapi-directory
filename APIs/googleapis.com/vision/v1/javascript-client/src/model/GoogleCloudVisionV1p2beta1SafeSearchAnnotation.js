/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudVisionV1p2beta1SafeSearchAnnotation model module.
 * @module model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation
 * @version v1
 */
class GoogleCloudVisionV1p2beta1SafeSearchAnnotation {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p2beta1SafeSearchAnnotation</code>.
     * Set of features pertaining to the image, computed by computer vision methods over safe-search verticals (for example, adult, spoof, medical, violence).
     * @alias module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation
     */
    constructor() { 
        
        GoogleCloudVisionV1p2beta1SafeSearchAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p2beta1SafeSearchAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation} The populated <code>GoogleCloudVisionV1p2beta1SafeSearchAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p2beta1SafeSearchAnnotation();

            if (data.hasOwnProperty('adult')) {
                obj['adult'] = ApiClient.convertToType(data['adult'], 'String');
            }
            if (data.hasOwnProperty('medical')) {
                obj['medical'] = ApiClient.convertToType(data['medical'], 'String');
            }
            if (data.hasOwnProperty('racy')) {
                obj['racy'] = ApiClient.convertToType(data['racy'], 'String');
            }
            if (data.hasOwnProperty('spoof')) {
                obj['spoof'] = ApiClient.convertToType(data['spoof'], 'String');
            }
            if (data.hasOwnProperty('violence')) {
                obj['violence'] = ApiClient.convertToType(data['violence'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p2beta1SafeSearchAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p2beta1SafeSearchAnnotation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['adult'] && !(typeof data['adult'] === 'string' || data['adult'] instanceof String)) {
            throw new Error("Expected the field `adult` to be a primitive type in the JSON string but got " + data['adult']);
        }
        // ensure the json data is a string
        if (data['medical'] && !(typeof data['medical'] === 'string' || data['medical'] instanceof String)) {
            throw new Error("Expected the field `medical` to be a primitive type in the JSON string but got " + data['medical']);
        }
        // ensure the json data is a string
        if (data['racy'] && !(typeof data['racy'] === 'string' || data['racy'] instanceof String)) {
            throw new Error("Expected the field `racy` to be a primitive type in the JSON string but got " + data['racy']);
        }
        // ensure the json data is a string
        if (data['spoof'] && !(typeof data['spoof'] === 'string' || data['spoof'] instanceof String)) {
            throw new Error("Expected the field `spoof` to be a primitive type in the JSON string but got " + data['spoof']);
        }
        // ensure the json data is a string
        if (data['violence'] && !(typeof data['violence'] === 'string' || data['violence'] instanceof String)) {
            throw new Error("Expected the field `violence` to be a primitive type in the JSON string but got " + data['violence']);
        }

        return true;
    }


}



/**
 * Represents the adult content likelihood for the image. Adult content may contain elements such as nudity, pornographic images or cartoons, or sexual activities.
 * @member {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation.AdultEnum} adult
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation.prototype['adult'] = undefined;

/**
 * Likelihood that this is a medical image.
 * @member {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation.MedicalEnum} medical
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation.prototype['medical'] = undefined;

/**
 * Likelihood that the request image contains racy content. Racy content may include (but is not limited to) skimpy or sheer clothing, strategically covered nudity, lewd or provocative poses, or close-ups of sensitive body areas.
 * @member {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation.RacyEnum} racy
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation.prototype['racy'] = undefined;

/**
 * Spoof likelihood. The likelihood that an modification was made to the image's canonical version to make it appear funny or offensive.
 * @member {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation.SpoofEnum} spoof
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation.prototype['spoof'] = undefined;

/**
 * Likelihood that this image contains violent content. Violent content may include death, serious harm, or injury to individuals or groups of individuals.
 * @member {module:model/GoogleCloudVisionV1p2beta1SafeSearchAnnotation.ViolenceEnum} violence
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation.prototype['violence'] = undefined;





/**
 * Allowed values for the <code>adult</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation['AdultEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>medical</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation['MedicalEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>racy</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation['RacyEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>spoof</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation['SpoofEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};


/**
 * Allowed values for the <code>violence</code> property.
 * @enum {String}
 * @readonly
 */
GoogleCloudVisionV1p2beta1SafeSearchAnnotation['ViolenceEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "VERY_UNLIKELY"
     * @const
     */
    "VERY_UNLIKELY": "VERY_UNLIKELY",

    /**
     * value: "UNLIKELY"
     * @const
     */
    "UNLIKELY": "UNLIKELY",

    /**
     * value: "POSSIBLE"
     * @const
     */
    "POSSIBLE": "POSSIBLE",

    /**
     * value: "LIKELY"
     * @const
     */
    "LIKELY": "LIKELY",

    /**
     * value: "VERY_LIKELY"
     * @const
     */
    "VERY_LIKELY": "VERY_LIKELY"
};



export default GoogleCloudVisionV1p2beta1SafeSearchAnnotation;

