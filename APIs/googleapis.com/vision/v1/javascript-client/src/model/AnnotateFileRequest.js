/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feature from './Feature';
import ImageContext from './ImageContext';
import InputConfig from './InputConfig';

/**
 * The AnnotateFileRequest model module.
 * @module model/AnnotateFileRequest
 * @version v1
 */
class AnnotateFileRequest {
    /**
     * Constructs a new <code>AnnotateFileRequest</code>.
     * A request to annotate one single file, e.g. a PDF, TIFF or GIF file.
     * @alias module:model/AnnotateFileRequest
     */
    constructor() { 
        
        AnnotateFileRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnnotateFileRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnnotateFileRequest} obj Optional instance to populate.
     * @return {module:model/AnnotateFileRequest} The populated <code>AnnotateFileRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnnotateFileRequest();

            if (data.hasOwnProperty('features')) {
                obj['features'] = ApiClient.convertToType(data['features'], [Feature]);
            }
            if (data.hasOwnProperty('imageContext')) {
                obj['imageContext'] = ImageContext.constructFromObject(data['imageContext']);
            }
            if (data.hasOwnProperty('inputConfig')) {
                obj['inputConfig'] = InputConfig.constructFromObject(data['inputConfig']);
            }
            if (data.hasOwnProperty('pages')) {
                obj['pages'] = ApiClient.convertToType(data['pages'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnnotateFileRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnnotateFileRequest</code>.
     */
    static validateJSON(data) {
        if (data['features']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['features'])) {
                throw new Error("Expected the field `features` to be an array in the JSON data but got " + data['features']);
            }
            // validate the optional field `features` (array)
            for (const item of data['features']) {
                Feature.validateJSON(item);
            };
        }
        // validate the optional field `imageContext`
        if (data['imageContext']) { // data not null
          ImageContext.validateJSON(data['imageContext']);
        }
        // validate the optional field `inputConfig`
        if (data['inputConfig']) { // data not null
          InputConfig.validateJSON(data['inputConfig']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['pages'])) {
            throw new Error("Expected the field `pages` to be an array in the JSON data but got " + data['pages']);
        }

        return true;
    }


}



/**
 * Required. Requested features.
 * @member {Array.<module:model/Feature>} features
 */
AnnotateFileRequest.prototype['features'] = undefined;

/**
 * @member {module:model/ImageContext} imageContext
 */
AnnotateFileRequest.prototype['imageContext'] = undefined;

/**
 * @member {module:model/InputConfig} inputConfig
 */
AnnotateFileRequest.prototype['inputConfig'] = undefined;

/**
 * Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.
 * @member {Array.<Number>} pages
 */
AnnotateFileRequest.prototype['pages'] = undefined;






export default AnnotateFileRequest;

