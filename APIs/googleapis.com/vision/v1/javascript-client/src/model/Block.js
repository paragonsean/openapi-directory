/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BoundingPoly from './BoundingPoly';
import Paragraph from './Paragraph';
import TextProperty from './TextProperty';

/**
 * The Block model module.
 * @module model/Block
 * @version v1
 */
class Block {
    /**
     * Constructs a new <code>Block</code>.
     * Logical element on the page.
     * @alias module:model/Block
     */
    constructor() { 
        
        Block.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Block</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Block} obj Optional instance to populate.
     * @return {module:model/Block} The populated <code>Block</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Block();

            if (data.hasOwnProperty('blockType')) {
                obj['blockType'] = ApiClient.convertToType(data['blockType'], 'String');
            }
            if (data.hasOwnProperty('boundingBox')) {
                obj['boundingBox'] = BoundingPoly.constructFromObject(data['boundingBox']);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('paragraphs')) {
                obj['paragraphs'] = ApiClient.convertToType(data['paragraphs'], [Paragraph]);
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = TextProperty.constructFromObject(data['property']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Block</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Block</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['blockType'] && !(typeof data['blockType'] === 'string' || data['blockType'] instanceof String)) {
            throw new Error("Expected the field `blockType` to be a primitive type in the JSON string but got " + data['blockType']);
        }
        // validate the optional field `boundingBox`
        if (data['boundingBox']) { // data not null
          BoundingPoly.validateJSON(data['boundingBox']);
        }
        if (data['paragraphs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['paragraphs'])) {
                throw new Error("Expected the field `paragraphs` to be an array in the JSON data but got " + data['paragraphs']);
            }
            // validate the optional field `paragraphs` (array)
            for (const item of data['paragraphs']) {
                Paragraph.validateJSON(item);
            };
        }
        // validate the optional field `property`
        if (data['property']) { // data not null
          TextProperty.validateJSON(data['property']);
        }

        return true;
    }


}



/**
 * Detected block type (text, image etc) for this block.
 * @member {module:model/Block.BlockTypeEnum} blockType
 */
Block.prototype['blockType'] = undefined;

/**
 * @member {module:model/BoundingPoly} boundingBox
 */
Block.prototype['boundingBox'] = undefined;

/**
 * Confidence of the OCR results on the block. Range [0, 1].
 * @member {Number} confidence
 */
Block.prototype['confidence'] = undefined;

/**
 * List of paragraphs in this block (if this blocks is of type text).
 * @member {Array.<module:model/Paragraph>} paragraphs
 */
Block.prototype['paragraphs'] = undefined;

/**
 * @member {module:model/TextProperty} property
 */
Block.prototype['property'] = undefined;





/**
 * Allowed values for the <code>blockType</code> property.
 * @enum {String}
 * @readonly
 */
Block['BlockTypeEnum'] = {

    /**
     * value: "UNKNOWN"
     * @const
     */
    "UNKNOWN": "UNKNOWN",

    /**
     * value: "TEXT"
     * @const
     */
    "TEXT": "TEXT",

    /**
     * value: "TABLE"
     * @const
     */
    "TABLE": "TABLE",

    /**
     * value: "PICTURE"
     * @const
     */
    "PICTURE": "PICTURE",

    /**
     * value: "RULER"
     * @const
     */
    "RULER": "RULER",

    /**
     * value: "BARCODE"
     * @const
     */
    "BARCODE": "BARCODE"
};



export default Block;

