/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageSource model module.
 * @module model/ImageSource
 * @version v1
 */
class ImageSource {
    /**
     * Constructs a new <code>ImageSource</code>.
     * External image source (Google Cloud Storage or web URL image location).
     * @alias module:model/ImageSource
     */
    constructor() { 
        
        ImageSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageSource} obj Optional instance to populate.
     * @return {module:model/ImageSource} The populated <code>ImageSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageSource();

            if (data.hasOwnProperty('gcsImageUri')) {
                obj['gcsImageUri'] = ApiClient.convertToType(data['gcsImageUri'], 'String');
            }
            if (data.hasOwnProperty('imageUri')) {
                obj['imageUri'] = ApiClient.convertToType(data['imageUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gcsImageUri'] && !(typeof data['gcsImageUri'] === 'string' || data['gcsImageUri'] instanceof String)) {
            throw new Error("Expected the field `gcsImageUri` to be a primitive type in the JSON string but got " + data['gcsImageUri']);
        }
        // ensure the json data is a string
        if (data['imageUri'] && !(typeof data['imageUri'] === 'string' || data['imageUri'] instanceof String)) {
            throw new Error("Expected the field `imageUri` to be a primitive type in the JSON string but got " + data['imageUri']);
        }

        return true;
    }


}



/**
 * **Use `image_uri` instead.** The Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info.
 * @member {String} gcsImageUri
 */
ImageSource.prototype['gcsImageUri'] = undefined;

/**
 * The URI of the source image. Can be either: 1. A Google Cloud Storage URI of the form `gs://bucket_name/object_name`. Object versioning is not supported. See [Google Cloud Storage Request URIs](https://cloud.google.com/storage/docs/reference-uris) for more info. 2. A publicly-accessible image HTTP/HTTPS URL. When fetching images from HTTP/HTTPS URLs, Google cannot guarantee that the request will be completed. Your request may fail if the specified host denies the request (e.g. due to request throttling or DOS prevention), or if Google throttles requests to the site for abuse prevention. You should not depend on externally-hosted images for production applications. When both `gcs_image_uri` and `image_uri` are specified, `image_uri` takes precedence.
 * @member {String} imageUri
 */
ImageSource.prototype['imageUri'] = undefined;






export default ImageSource;

