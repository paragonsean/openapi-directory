/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Block from './Block';
import TextProperty from './TextProperty';

/**
 * The Page model module.
 * @module model/Page
 * @version v1
 */
class Page {
    /**
     * Constructs a new <code>Page</code>.
     * Detected page from OCR.
     * @alias module:model/Page
     */
    constructor() { 
        
        Page.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Page</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Page} obj Optional instance to populate.
     * @return {module:model/Page} The populated <code>Page</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Page();

            if (data.hasOwnProperty('blocks')) {
                obj['blocks'] = ApiClient.convertToType(data['blocks'], [Block]);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('property')) {
                obj['property'] = TextProperty.constructFromObject(data['property']);
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Page</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Page</code>.
     */
    static validateJSON(data) {
        if (data['blocks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['blocks'])) {
                throw new Error("Expected the field `blocks` to be an array in the JSON data but got " + data['blocks']);
            }
            // validate the optional field `blocks` (array)
            for (const item of data['blocks']) {
                Block.validateJSON(item);
            };
        }
        // validate the optional field `property`
        if (data['property']) { // data not null
          TextProperty.validateJSON(data['property']);
        }

        return true;
    }


}



/**
 * List of blocks of text, images etc on this page.
 * @member {Array.<module:model/Block>} blocks
 */
Page.prototype['blocks'] = undefined;

/**
 * Confidence of the OCR results on the page. Range [0, 1].
 * @member {Number} confidence
 */
Page.prototype['confidence'] = undefined;

/**
 * Page height. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.
 * @member {Number} height
 */
Page.prototype['height'] = undefined;

/**
 * @member {module:model/TextProperty} property
 */
Page.prototype['property'] = undefined;

/**
 * Page width. For PDFs the unit is points. For images (including TIFFs) the unit is pixels.
 * @member {Number} width
 */
Page.prototype['width'] = undefined;






export default Page;

