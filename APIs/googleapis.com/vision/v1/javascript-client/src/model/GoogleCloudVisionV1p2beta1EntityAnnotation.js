/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudVisionV1p2beta1BoundingPoly from './GoogleCloudVisionV1p2beta1BoundingPoly';
import GoogleCloudVisionV1p2beta1LocationInfo from './GoogleCloudVisionV1p2beta1LocationInfo';
import GoogleCloudVisionV1p2beta1Property from './GoogleCloudVisionV1p2beta1Property';

/**
 * The GoogleCloudVisionV1p2beta1EntityAnnotation model module.
 * @module model/GoogleCloudVisionV1p2beta1EntityAnnotation
 * @version v1
 */
class GoogleCloudVisionV1p2beta1EntityAnnotation {
    /**
     * Constructs a new <code>GoogleCloudVisionV1p2beta1EntityAnnotation</code>.
     * Set of detected entity features.
     * @alias module:model/GoogleCloudVisionV1p2beta1EntityAnnotation
     */
    constructor() { 
        
        GoogleCloudVisionV1p2beta1EntityAnnotation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudVisionV1p2beta1EntityAnnotation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudVisionV1p2beta1EntityAnnotation} obj Optional instance to populate.
     * @return {module:model/GoogleCloudVisionV1p2beta1EntityAnnotation} The populated <code>GoogleCloudVisionV1p2beta1EntityAnnotation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudVisionV1p2beta1EntityAnnotation();

            if (data.hasOwnProperty('boundingPoly')) {
                obj['boundingPoly'] = GoogleCloudVisionV1p2beta1BoundingPoly.constructFromObject(data['boundingPoly']);
            }
            if (data.hasOwnProperty('confidence')) {
                obj['confidence'] = ApiClient.convertToType(data['confidence'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], [GoogleCloudVisionV1p2beta1LocationInfo]);
            }
            if (data.hasOwnProperty('mid')) {
                obj['mid'] = ApiClient.convertToType(data['mid'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = ApiClient.convertToType(data['properties'], [GoogleCloudVisionV1p2beta1Property]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('topicality')) {
                obj['topicality'] = ApiClient.convertToType(data['topicality'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudVisionV1p2beta1EntityAnnotation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudVisionV1p2beta1EntityAnnotation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `boundingPoly`
        if (data['boundingPoly']) { // data not null
          GoogleCloudVisionV1p2beta1BoundingPoly.validateJSON(data['boundingPoly']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        if (data['locations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['locations'])) {
                throw new Error("Expected the field `locations` to be an array in the JSON data but got " + data['locations']);
            }
            // validate the optional field `locations` (array)
            for (const item of data['locations']) {
                GoogleCloudVisionV1p2beta1LocationInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mid'] && !(typeof data['mid'] === 'string' || data['mid'] instanceof String)) {
            throw new Error("Expected the field `mid` to be a primitive type in the JSON string but got " + data['mid']);
        }
        if (data['properties']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['properties'])) {
                throw new Error("Expected the field `properties` to be an array in the JSON data but got " + data['properties']);
            }
            // validate the optional field `properties` (array)
            for (const item of data['properties']) {
                GoogleCloudVisionV1p2beta1Property.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleCloudVisionV1p2beta1BoundingPoly} boundingPoly
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['boundingPoly'] = undefined;

/**
 * **Deprecated. Use `score` instead.** The accuracy of the entity detection in an image. For example, for an image in which the \"Eiffel Tower\" entity is detected, this field represents the confidence that there is a tower in the query image. Range [0, 1].
 * @member {Number} confidence
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['confidence'] = undefined;

/**
 * Entity textual description, expressed in its `locale` language.
 * @member {String} description
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['description'] = undefined;

/**
 * The language code for the locale in which the entity textual `description` is expressed.
 * @member {String} locale
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['locale'] = undefined;

/**
 * The location information for the detected entity. Multiple `LocationInfo` elements can be present because one location may indicate the location of the scene in the image, and another location may indicate the location of the place where the image was taken. Location information is usually present for landmarks.
 * @member {Array.<module:model/GoogleCloudVisionV1p2beta1LocationInfo>} locations
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['locations'] = undefined;

/**
 * Opaque entity ID. Some IDs may be available in [Google Knowledge Graph Search API](https://developers.google.com/knowledge-graph/).
 * @member {String} mid
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['mid'] = undefined;

/**
 * Some entities may have optional user-supplied `Property` (name/value) fields, such a score or string that qualifies the entity.
 * @member {Array.<module:model/GoogleCloudVisionV1p2beta1Property>} properties
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['properties'] = undefined;

/**
 * Overall score of the result. Range [0, 1].
 * @member {Number} score
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['score'] = undefined;

/**
 * The relevancy of the ICA (Image Content Annotation) label to the image. For example, the relevancy of \"tower\" is likely higher to an image containing the detected \"Eiffel Tower\" than to an image containing a detected distant towering building, even though the confidence that there is a tower in each image may be the same. Range [0, 1].
 * @member {Number} topicality
 */
GoogleCloudVisionV1p2beta1EntityAnnotation.prototype['topicality'] = undefined;






export default GoogleCloudVisionV1p2beta1EntityAnnotation;

