/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportProductSetsGcsSource model module.
 * @module model/ImportProductSetsGcsSource
 * @version v1
 */
class ImportProductSetsGcsSource {
    /**
     * Constructs a new <code>ImportProductSetsGcsSource</code>.
     * The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line.
     * @alias module:model/ImportProductSetsGcsSource
     */
    constructor() { 
        
        ImportProductSetsGcsSource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportProductSetsGcsSource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportProductSetsGcsSource} obj Optional instance to populate.
     * @return {module:model/ImportProductSetsGcsSource} The populated <code>ImportProductSetsGcsSource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportProductSetsGcsSource();

            if (data.hasOwnProperty('csvFileUri')) {
                obj['csvFileUri'] = ApiClient.convertToType(data['csvFileUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportProductSetsGcsSource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportProductSetsGcsSource</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['csvFileUri'] && !(typeof data['csvFileUri'] === 'string' || data['csvFileUri'] instanceof String)) {
            throw new Error("Expected the field `csvFileUri` to be a primitive type in the JSON string but got " + data['csvFileUri']);
        }

        return true;
    }


}



/**
 * The Google Cloud Storage URI of the input csv file. The URI must start with `gs://`. The format of the input csv file should be one image per line. In each line, there are 8 columns. 1. image-uri 2. image-id 3. product-set-id 4. product-id 5. product-category 6. product-display-name 7. labels 8. bounding-poly The `image-uri`, `product-set-id`, `product-id`, and `product-category` columns are required. All other columns are optional. If the `ProductSet` or `Product` specified by the `product-set-id` and `product-id` values does not exist, then the system will create a new `ProductSet` or `Product` for the image. In this case, the `product-display-name` column refers to display_name, the `product-category` column refers to product_category, and the `labels` column refers to product_labels. The `image-id` column is optional but must be unique if provided. If it is empty, the system will automatically assign a unique id to the image. The `product-display-name` column is optional. If it is empty, the system sets the display_name field for the product to a space (\" \"). You can update the `display_name` later by using the API. If a `Product` with the specified `product-id` already exists, then the system ignores the `product-display-name`, `product-category`, and `labels` columns. The `labels` column (optional) is a line containing a list of comma-separated key-value pairs, in the following format: \"key_1=value_1,key_2=value_2,...,key_n=value_n\" The `bounding-poly` column (optional) identifies one region of interest from the image in the same manner as `CreateReferenceImage`. If you do not specify the `bounding-poly` column, then the system will try to detect regions of interest automatically. At most one `bounding-poly` column is allowed per line. If the image contains multiple regions of interest, add a line to the CSV file that includes the same product information, and the `bounding-poly` values for each region of interest. The `bounding-poly` column must contain an even number of comma-separated numbers, in the format \"p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y\". Use non-negative integers for absolute bounding polygons, and float values in [0, 1] for normalized bounding polygons. The system will resize the image if the image resolution is too large to process (larger than 20MP).
 * @member {String} csvFileUri
 */
ImportProductSetsGcsSource.prototype['csvFileUri'] = undefined;






export default ImportProductSetsGcsSource;

