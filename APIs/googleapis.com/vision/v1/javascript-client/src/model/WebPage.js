/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebImage from './WebImage';

/**
 * The WebPage model module.
 * @module model/WebPage
 * @version v1
 */
class WebPage {
    /**
     * Constructs a new <code>WebPage</code>.
     * Metadata for web pages.
     * @alias module:model/WebPage
     */
    constructor() { 
        
        WebPage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebPage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebPage} obj Optional instance to populate.
     * @return {module:model/WebPage} The populated <code>WebPage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebPage();

            if (data.hasOwnProperty('fullMatchingImages')) {
                obj['fullMatchingImages'] = ApiClient.convertToType(data['fullMatchingImages'], [WebImage]);
            }
            if (data.hasOwnProperty('pageTitle')) {
                obj['pageTitle'] = ApiClient.convertToType(data['pageTitle'], 'String');
            }
            if (data.hasOwnProperty('partialMatchingImages')) {
                obj['partialMatchingImages'] = ApiClient.convertToType(data['partialMatchingImages'], [WebImage]);
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebPage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebPage</code>.
     */
    static validateJSON(data) {
        if (data['fullMatchingImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['fullMatchingImages'])) {
                throw new Error("Expected the field `fullMatchingImages` to be an array in the JSON data but got " + data['fullMatchingImages']);
            }
            // validate the optional field `fullMatchingImages` (array)
            for (const item of data['fullMatchingImages']) {
                WebImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['pageTitle'] && !(typeof data['pageTitle'] === 'string' || data['pageTitle'] instanceof String)) {
            throw new Error("Expected the field `pageTitle` to be a primitive type in the JSON string but got " + data['pageTitle']);
        }
        if (data['partialMatchingImages']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['partialMatchingImages'])) {
                throw new Error("Expected the field `partialMatchingImages` to be an array in the JSON data but got " + data['partialMatchingImages']);
            }
            // validate the optional field `partialMatchingImages` (array)
            for (const item of data['partialMatchingImages']) {
                WebImage.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}



/**
 * Fully matching images on the page. Can include resized copies of the query image.
 * @member {Array.<module:model/WebImage>} fullMatchingImages
 */
WebPage.prototype['fullMatchingImages'] = undefined;

/**
 * Title for the web page, may contain HTML markups.
 * @member {String} pageTitle
 */
WebPage.prototype['pageTitle'] = undefined;

/**
 * Partial matching images on the page. Those images are similar enough to share some key-point features. For example an original image will likely have partial matching for its crops.
 * @member {Array.<module:model/WebImage>} partialMatchingImages
 */
WebPage.prototype['partialMatchingImages'] = undefined;

/**
 * (Deprecated) Overall relevancy score for the web page.
 * @member {Number} score
 */
WebPage.prototype['score'] = undefined;

/**
 * The result web page URL.
 * @member {String} url
 */
WebPage.prototype['url'] = undefined;






export default WebPage;

