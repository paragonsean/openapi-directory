/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CropHintsParams from './CropHintsParams';
import LatLongRect from './LatLongRect';
import ProductSearchParams from './ProductSearchParams';
import TextDetectionParams from './TextDetectionParams';
import WebDetectionParams from './WebDetectionParams';

/**
 * The ImageContext model module.
 * @module model/ImageContext
 * @version v1
 */
class ImageContext {
    /**
     * Constructs a new <code>ImageContext</code>.
     * Image context and/or feature-specific parameters.
     * @alias module:model/ImageContext
     */
    constructor() { 
        
        ImageContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageContext} obj Optional instance to populate.
     * @return {module:model/ImageContext} The populated <code>ImageContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageContext();

            if (data.hasOwnProperty('cropHintsParams')) {
                obj['cropHintsParams'] = CropHintsParams.constructFromObject(data['cropHintsParams']);
            }
            if (data.hasOwnProperty('languageHints')) {
                obj['languageHints'] = ApiClient.convertToType(data['languageHints'], ['String']);
            }
            if (data.hasOwnProperty('latLongRect')) {
                obj['latLongRect'] = LatLongRect.constructFromObject(data['latLongRect']);
            }
            if (data.hasOwnProperty('productSearchParams')) {
                obj['productSearchParams'] = ProductSearchParams.constructFromObject(data['productSearchParams']);
            }
            if (data.hasOwnProperty('textDetectionParams')) {
                obj['textDetectionParams'] = TextDetectionParams.constructFromObject(data['textDetectionParams']);
            }
            if (data.hasOwnProperty('webDetectionParams')) {
                obj['webDetectionParams'] = WebDetectionParams.constructFromObject(data['webDetectionParams']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cropHintsParams`
        if (data['cropHintsParams']) { // data not null
          CropHintsParams.validateJSON(data['cropHintsParams']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['languageHints'])) {
            throw new Error("Expected the field `languageHints` to be an array in the JSON data but got " + data['languageHints']);
        }
        // validate the optional field `latLongRect`
        if (data['latLongRect']) { // data not null
          LatLongRect.validateJSON(data['latLongRect']);
        }
        // validate the optional field `productSearchParams`
        if (data['productSearchParams']) { // data not null
          ProductSearchParams.validateJSON(data['productSearchParams']);
        }
        // validate the optional field `textDetectionParams`
        if (data['textDetectionParams']) { // data not null
          TextDetectionParams.validateJSON(data['textDetectionParams']);
        }
        // validate the optional field `webDetectionParams`
        if (data['webDetectionParams']) { // data not null
          WebDetectionParams.validateJSON(data['webDetectionParams']);
        }

        return true;
    }


}



/**
 * @member {module:model/CropHintsParams} cropHintsParams
 */
ImageContext.prototype['cropHintsParams'] = undefined;

/**
 * List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting `language_hints` is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages).
 * @member {Array.<String>} languageHints
 */
ImageContext.prototype['languageHints'] = undefined;

/**
 * @member {module:model/LatLongRect} latLongRect
 */
ImageContext.prototype['latLongRect'] = undefined;

/**
 * @member {module:model/ProductSearchParams} productSearchParams
 */
ImageContext.prototype['productSearchParams'] = undefined;

/**
 * @member {module:model/TextDetectionParams} textDetectionParams
 */
ImageContext.prototype['textDetectionParams'] = undefined;

/**
 * @member {module:model/WebDetectionParams} webDetectionParams
 */
ImageContext.prototype['webDetectionParams'] = undefined;






export default ImageContext;

