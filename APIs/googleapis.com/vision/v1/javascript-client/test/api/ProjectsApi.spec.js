/**
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudVisionApi);
  }
}(this, function(expect, CloudVisionApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudVisionApi.ProjectsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProjectsApi', function() {
    describe('visionProjectsLocationsFilesAnnotate', function() {
      it('should call visionProjectsLocationsFilesAnnotate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsFilesAnnotate
        //instance.visionProjectsLocationsFilesAnnotate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsFilesAsyncBatchAnnotate', function() {
      it('should call visionProjectsLocationsFilesAsyncBatchAnnotate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsFilesAsyncBatchAnnotate
        //instance.visionProjectsLocationsFilesAsyncBatchAnnotate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsImagesAnnotate', function() {
      it('should call visionProjectsLocationsImagesAnnotate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsImagesAnnotate
        //instance.visionProjectsLocationsImagesAnnotate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsImagesAsyncBatchAnnotate', function() {
      it('should call visionProjectsLocationsImagesAsyncBatchAnnotate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsImagesAsyncBatchAnnotate
        //instance.visionProjectsLocationsImagesAsyncBatchAnnotate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsAddProduct', function() {
      it('should call visionProjectsLocationsProductSetsAddProduct successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsAddProduct
        //instance.visionProjectsLocationsProductSetsAddProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsCreate', function() {
      it('should call visionProjectsLocationsProductSetsCreate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsCreate
        //instance.visionProjectsLocationsProductSetsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsDelete', function() {
      it('should call visionProjectsLocationsProductSetsDelete successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsDelete
        //instance.visionProjectsLocationsProductSetsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsImport', function() {
      it('should call visionProjectsLocationsProductSetsImport successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsImport
        //instance.visionProjectsLocationsProductSetsImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsList', function() {
      it('should call visionProjectsLocationsProductSetsList successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsList
        //instance.visionProjectsLocationsProductSetsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsPatch', function() {
      it('should call visionProjectsLocationsProductSetsPatch successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsPatch
        //instance.visionProjectsLocationsProductSetsPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsProductsList', function() {
      it('should call visionProjectsLocationsProductSetsProductsList successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsProductsList
        //instance.visionProjectsLocationsProductSetsProductsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductSetsRemoveProduct', function() {
      it('should call visionProjectsLocationsProductSetsRemoveProduct successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductSetsRemoveProduct
        //instance.visionProjectsLocationsProductSetsRemoveProduct(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductsCreate', function() {
      it('should call visionProjectsLocationsProductsCreate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductsCreate
        //instance.visionProjectsLocationsProductsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductsList', function() {
      it('should call visionProjectsLocationsProductsList successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductsList
        //instance.visionProjectsLocationsProductsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductsPurge', function() {
      it('should call visionProjectsLocationsProductsPurge successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductsPurge
        //instance.visionProjectsLocationsProductsPurge(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductsReferenceImagesCreate', function() {
      it('should call visionProjectsLocationsProductsReferenceImagesCreate successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductsReferenceImagesCreate
        //instance.visionProjectsLocationsProductsReferenceImagesCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsLocationsProductsReferenceImagesList', function() {
      it('should call visionProjectsLocationsProductsReferenceImagesList successfully', function(done) {
        //uncomment below and update the code to test visionProjectsLocationsProductsReferenceImagesList
        //instance.visionProjectsLocationsProductsReferenceImagesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('visionProjectsOperationsGet', function() {
      it('should call visionProjectsOperationsGet successfully', function(done) {
        //uncomment below and update the code to test visionProjectsOperationsGet
        //instance.visionProjectsOperationsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
