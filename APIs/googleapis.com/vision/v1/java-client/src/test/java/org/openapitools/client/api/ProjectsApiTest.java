/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddProductToProductSetRequest;
import org.openapitools.client.model.AsyncBatchAnnotateFilesRequest;
import org.openapitools.client.model.AsyncBatchAnnotateImagesRequest;
import org.openapitools.client.model.BatchAnnotateFilesRequest;
import org.openapitools.client.model.BatchAnnotateFilesResponse;
import org.openapitools.client.model.BatchAnnotateImagesRequest;
import org.openapitools.client.model.BatchAnnotateImagesResponse;
import org.openapitools.client.model.ImportProductSetsRequest;
import org.openapitools.client.model.ListProductSetsResponse;
import org.openapitools.client.model.ListProductsInProductSetResponse;
import org.openapitools.client.model.ListProductsResponse;
import org.openapitools.client.model.ListReferenceImagesResponse;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.ProductSet;
import org.openapitools.client.model.PurgeProductsRequest;
import org.openapitools.client.model.ReferenceImage;
import org.openapitools.client.model.RemoveProductFromProductSetRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Service that performs image detection and annotation for a batch of files. Now only \&quot;application/pdf\&quot;, \&quot;image/tiff\&quot; and \&quot;image/gif\&quot; are supported. This service will extract at most 5 (customers can specify which 5 in AnnotateFileRequest.pages) frames (gif) or pages (pdf or tiff) from each file provided and perform detection and annotation for each image extracted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsFilesAnnotateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchAnnotateFilesRequest batchAnnotateFilesRequest = null;
        BatchAnnotateFilesResponse response = api.visionProjectsLocationsFilesAnnotate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchAnnotateFilesRequest);
        // TODO: test validations
    }

    /**
     * Run asynchronous image detection and annotation for a list of generic files, such as PDF files, which may contain multiple pages and multiple images per page. Progress and results can be retrieved through the &#x60;google.longrunning.Operations&#x60; interface. &#x60;Operation.metadata&#x60; contains &#x60;OperationMetadata&#x60; (metadata). &#x60;Operation.response&#x60; contains &#x60;AsyncBatchAnnotateFilesResponse&#x60; (results).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsFilesAsyncBatchAnnotateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AsyncBatchAnnotateFilesRequest asyncBatchAnnotateFilesRequest = null;
        Operation response = api.visionProjectsLocationsFilesAsyncBatchAnnotate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, asyncBatchAnnotateFilesRequest);
        // TODO: test validations
    }

    /**
     * Run image detection and annotation for a batch of images.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsImagesAnnotateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchAnnotateImagesRequest batchAnnotateImagesRequest = null;
        BatchAnnotateImagesResponse response = api.visionProjectsLocationsImagesAnnotate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchAnnotateImagesRequest);
        // TODO: test validations
    }

    /**
     * Run asynchronous image detection and annotation for a list of images. Progress and results can be retrieved through the &#x60;google.longrunning.Operations&#x60; interface. &#x60;Operation.metadata&#x60; contains &#x60;OperationMetadata&#x60; (metadata). &#x60;Operation.response&#x60; contains &#x60;AsyncBatchAnnotateImagesResponse&#x60; (results). This service will write image annotation outputs to json files in customer GCS bucket, each json file containing BatchAnnotateImagesResponse proto.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsImagesAsyncBatchAnnotateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AsyncBatchAnnotateImagesRequest asyncBatchAnnotateImagesRequest = null;
        Operation response = api.visionProjectsLocationsImagesAsyncBatchAnnotate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, asyncBatchAnnotateImagesRequest);
        // TODO: test validations
    }

    /**
     * Adds a Product to the specified ProductSet. If the Product is already present, no change is made. One Product can be added to at most 100 ProductSets. Possible errors: * Returns NOT_FOUND if the Product or the ProductSet doesn&#39;t exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsAddProductTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddProductToProductSetRequest addProductToProductSetRequest = null;
        Object response = api.visionProjectsLocationsProductSetsAddProduct(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addProductToProductSetRequest);
        // TODO: test validations
    }

    /**
     * Creates and returns a new ProductSet resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing, or is longer than 4096 characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String productSetId = null;
        ProductSet productSet = null;
        ProductSet response = api.visionProjectsLocationsProductSetsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, productSetId, productSet);
        // TODO: test validations
    }

    /**
     * Permanently deletes a ProductSet. Products and ReferenceImages in the ProductSet are not deleted. The actual image files are not deleted from Google Cloud Storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.visionProjectsLocationsProductSetsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Asynchronous API that imports a list of reference images to specified product sets based on a list of image information. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. &#x60;Operation.metadata&#x60; contains &#x60;BatchOperationMetadata&#x60;. (progress) &#x60;Operation.response&#x60; contains &#x60;ImportProductSetsResponse&#x60;. (results) The input source of this method is a csv file on Google Cloud Storage. For the format of the csv file please see ImportProductSetsGcsSource.csv_file_uri.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsImportTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ImportProductSetsRequest importProductSetsRequest = null;
        Operation response = api.visionProjectsLocationsProductSetsImport(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, importProductSetsRequest);
        // TODO: test validations
    }

    /**
     * Lists ProductSets in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100, or less than 1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProductSetsResponse response = api.visionProjectsLocationsProductSetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Makes changes to a ProductSet resource. Only display_name can be updated currently. Possible errors: * Returns NOT_FOUND if the ProductSet does not exist. * Returns INVALID_ARGUMENT if display_name is present in update_mask but missing from the request or longer than 4096 characters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        ProductSet productSet = null;
        ProductSet response = api.visionProjectsLocationsProductSetsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, productSet);
        // TODO: test validations
    }

    /**
     * Lists the Products in a ProductSet, in an unspecified order. If the ProductSet does not exist, the products field of the response will be empty. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsProductsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProductsInProductSetResponse response = api.visionProjectsLocationsProductSetsProductsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Removes a Product from the specified ProductSet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductSetsRemoveProductTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveProductFromProductSetRequest removeProductFromProductSetRequest = null;
        Object response = api.visionProjectsLocationsProductSetsRemoveProduct(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeProductFromProductSetRequest);
        // TODO: test validations
    }

    /**
     * Creates and returns a new product resource. Possible errors: * Returns INVALID_ARGUMENT if display_name is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if description is longer than 4096 characters. * Returns INVALID_ARGUMENT if product_category is missing or invalid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String productId = null;
        Product product = null;
        Product response = api.visionProjectsLocationsProductsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, productId, product);
        // TODO: test validations
    }

    /**
     * Lists products in an unspecified order. Possible errors: * Returns INVALID_ARGUMENT if page_size is greater than 100 or less than 1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListProductsResponse response = api.visionProjectsLocationsProductsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Asynchronous API to delete all Products in a ProductSet or all Products that are in no ProductSet. If a Product is a member of the specified ProductSet in addition to other ProductSets, the Product will still be deleted. It is recommended to not delete the specified ProductSet until after this operation has completed. It is also recommended to not add any of the Products involved in the batch delete to a new ProductSet while this operation is running because those Products may still end up deleted. It&#39;s not possible to undo the PurgeProducts operation. Therefore, it is recommended to keep the csv files used in ImportProductSets (if that was how you originally built the Product Set) before starting PurgeProducts, in case you need to re-import the data after deletion. If the plan is to purge all of the Products from a ProductSet and then re-use the empty ProductSet to re-import new Products into the empty ProductSet, you must wait until the PurgeProducts operation has finished for that ProductSet. The google.longrunning.Operation API can be used to keep track of the progress and results of the request. &#x60;Operation.metadata&#x60; contains &#x60;BatchOperationMetadata&#x60;. (progress)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductsPurgeTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PurgeProductsRequest purgeProductsRequest = null;
        Operation response = api.visionProjectsLocationsProductsPurge(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, purgeProductsRequest);
        // TODO: test validations
    }

    /**
     * Creates and returns a new ReferenceImage resource. The &#x60;bounding_poly&#x60; field is optional. If &#x60;bounding_poly&#x60; is not specified, the system will try to detect regions of interest in the image that are compatible with the product_category on the parent product. If it is specified, detection is ALWAYS skipped. The system converts polygons into non-rotated rectangles. Note that the pipeline will resize the image if the image resolution is too large to process (above 50MP). Possible errors: * Returns INVALID_ARGUMENT if the image_uri is missing or longer than 4096 characters. * Returns INVALID_ARGUMENT if the product does not exist. * Returns INVALID_ARGUMENT if bounding_poly is not provided, and nothing compatible with the parent product&#39;s product_category is detected. * Returns INVALID_ARGUMENT if bounding_poly contains more than 10 polygons.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductsReferenceImagesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String referenceImageId = null;
        ReferenceImage referenceImage = null;
        ReferenceImage response = api.visionProjectsLocationsProductsReferenceImagesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, referenceImageId, referenceImage);
        // TODO: test validations
    }

    /**
     * Lists reference images. Possible errors: * Returns NOT_FOUND if the parent product does not exist. * Returns INVALID_ARGUMENT if the page_size is greater than 100, or less than 1.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsLocationsProductsReferenceImagesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListReferenceImagesResponse response = api.visionProjectsLocationsProductsReferenceImagesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void visionProjectsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        Operation response = api.visionProjectsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
