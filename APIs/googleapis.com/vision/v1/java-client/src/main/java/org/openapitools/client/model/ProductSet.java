/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ProductSet contains Products. A ProductSet can contain a maximum of 1 million reference images. If the limit is exceeded, periodic indexing will fail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSet {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INDEX_ERROR = "indexError";
  @SerializedName(SERIALIZED_NAME_INDEX_ERROR)
  private Status indexError;

  public static final String SERIALIZED_NAME_INDEX_TIME = "indexTime";
  @SerializedName(SERIALIZED_NAME_INDEX_TIME)
  private String indexTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public ProductSet() {
  }

  public ProductSet(
     String indexTime
  ) {
    this();
    this.indexTime = indexTime;
  }

  public ProductSet displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The user-provided name for this ProductSet. Must not be empty. Must be at most 4096 characters long.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ProductSet indexError(Status indexError) {
    this.indexError = indexError;
    return this;
  }

  /**
   * Get indexError
   * @return indexError
   */
  @javax.annotation.Nullable
  public Status getIndexError() {
    return indexError;
  }

  public void setIndexError(Status indexError) {
    this.indexError = indexError;
  }


  /**
   * Output only. The time at which this ProductSet was last indexed. Query results will reflect all updates before this time. If this ProductSet has never been indexed, this timestamp is the default value \&quot;1970-01-01T00:00:00Z\&quot;. This field is ignored when creating a ProductSet.
   * @return indexTime
   */
  @javax.annotation.Nullable
  public String getIndexTime() {
    return indexTime;
  }



  public ProductSet name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The resource name of the ProductSet. Format is: &#x60;projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID&#x60;. This field is ignored when creating a ProductSet.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSet productSet = (ProductSet) o;
    return Objects.equals(this.displayName, productSet.displayName) &&
        Objects.equals(this.indexError, productSet.indexError) &&
        Objects.equals(this.indexTime, productSet.indexTime) &&
        Objects.equals(this.name, productSet.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, indexError, indexTime, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSet {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    indexError: ").append(toIndentedString(indexError)).append("\n");
    sb.append("    indexTime: ").append(toIndentedString(indexTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("indexError");
    openapiFields.add("indexTime");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSet
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSet.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSet is not found in the empty JSON string", ProductSet.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSet.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSet` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `indexError`
      if (jsonObj.get("indexError") != null && !jsonObj.get("indexError").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("indexError"));
      }
      if ((jsonObj.get("indexTime") != null && !jsonObj.get("indexTime").isJsonNull()) && !jsonObj.get("indexTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexTime").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSet.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSet' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSet> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSet.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSet>() {
           @Override
           public void write(JsonWriter out, ProductSet value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSet read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSet given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSet
   * @throws IOException if the JSON string is invalid with respect to ProductSet
   */
  public static ProductSet fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSet.class);
  }

  /**
   * Convert an instance of ProductSet to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

