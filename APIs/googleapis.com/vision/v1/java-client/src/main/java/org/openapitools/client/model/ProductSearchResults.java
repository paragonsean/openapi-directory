/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GroupedResult;
import org.openapitools.client.model.Result;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Results for a product search request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSearchResults {
  public static final String SERIALIZED_NAME_INDEX_TIME = "indexTime";
  @SerializedName(SERIALIZED_NAME_INDEX_TIME)
  private String indexTime;

  public static final String SERIALIZED_NAME_PRODUCT_GROUPED_RESULTS = "productGroupedResults";
  @SerializedName(SERIALIZED_NAME_PRODUCT_GROUPED_RESULTS)
  private List<GroupedResult> productGroupedResults = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULTS = "results";
  @SerializedName(SERIALIZED_NAME_RESULTS)
  private List<Result> results = new ArrayList<>();

  public ProductSearchResults() {
  }

  public ProductSearchResults indexTime(String indexTime) {
    this.indexTime = indexTime;
    return this;
  }

  /**
   * Timestamp of the index which provided these results. Products added to the product set and products removed from the product set after this time are not reflected in the current results.
   * @return indexTime
   */
  @javax.annotation.Nullable
  public String getIndexTime() {
    return indexTime;
  }

  public void setIndexTime(String indexTime) {
    this.indexTime = indexTime;
  }


  public ProductSearchResults productGroupedResults(List<GroupedResult> productGroupedResults) {
    this.productGroupedResults = productGroupedResults;
    return this;
  }

  public ProductSearchResults addProductGroupedResultsItem(GroupedResult productGroupedResultsItem) {
    if (this.productGroupedResults == null) {
      this.productGroupedResults = new ArrayList<>();
    }
    this.productGroupedResults.add(productGroupedResultsItem);
    return this;
  }

  /**
   * List of results grouped by products detected in the query image. Each entry corresponds to one bounding polygon in the query image, and contains the matching products specific to that region. There may be duplicate product matches in the union of all the per-product results.
   * @return productGroupedResults
   */
  @javax.annotation.Nullable
  public List<GroupedResult> getProductGroupedResults() {
    return productGroupedResults;
  }

  public void setProductGroupedResults(List<GroupedResult> productGroupedResults) {
    this.productGroupedResults = productGroupedResults;
  }


  public ProductSearchResults results(List<Result> results) {
    this.results = results;
    return this;
  }

  public ProductSearchResults addResultsItem(Result resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.results.add(resultsItem);
    return this;
  }

  /**
   * List of results, one for each product match.
   * @return results
   */
  @javax.annotation.Nullable
  public List<Result> getResults() {
    return results;
  }

  public void setResults(List<Result> results) {
    this.results = results;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSearchResults productSearchResults = (ProductSearchResults) o;
    return Objects.equals(this.indexTime, productSearchResults.indexTime) &&
        Objects.equals(this.productGroupedResults, productSearchResults.productGroupedResults) &&
        Objects.equals(this.results, productSearchResults.results);
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexTime, productGroupedResults, results);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSearchResults {\n");
    sb.append("    indexTime: ").append(toIndentedString(indexTime)).append("\n");
    sb.append("    productGroupedResults: ").append(toIndentedString(productGroupedResults)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("indexTime");
    openapiFields.add("productGroupedResults");
    openapiFields.add("results");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSearchResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSearchResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSearchResults is not found in the empty JSON string", ProductSearchResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSearchResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSearchResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("indexTime") != null && !jsonObj.get("indexTime").isJsonNull()) && !jsonObj.get("indexTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `indexTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("indexTime").toString()));
      }
      if (jsonObj.get("productGroupedResults") != null && !jsonObj.get("productGroupedResults").isJsonNull()) {
        JsonArray jsonArrayproductGroupedResults = jsonObj.getAsJsonArray("productGroupedResults");
        if (jsonArrayproductGroupedResults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("productGroupedResults").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `productGroupedResults` to be an array in the JSON string but got `%s`", jsonObj.get("productGroupedResults").toString()));
          }

          // validate the optional field `productGroupedResults` (array)
          for (int i = 0; i < jsonArrayproductGroupedResults.size(); i++) {
            GroupedResult.validateJsonElement(jsonArrayproductGroupedResults.get(i));
          };
        }
      }
      if (jsonObj.get("results") != null && !jsonObj.get("results").isJsonNull()) {
        JsonArray jsonArrayresults = jsonObj.getAsJsonArray("results");
        if (jsonArrayresults != null) {
          // ensure the json data is an array
          if (!jsonObj.get("results").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `results` to be an array in the JSON string but got `%s`", jsonObj.get("results").toString()));
          }

          // validate the optional field `results` (array)
          for (int i = 0; i < jsonArrayresults.size(); i++) {
            Result.validateJsonElement(jsonArrayresults.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSearchResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSearchResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSearchResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSearchResults.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSearchResults>() {
           @Override
           public void write(JsonWriter out, ProductSearchResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSearchResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSearchResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSearchResults
   * @throws IOException if the JSON string is invalid with respect to ProductSearchResults
   */
  public static ProductSearchResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSearchResults.class);
  }

  /**
   * Convert an instance of ProductSearchResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

