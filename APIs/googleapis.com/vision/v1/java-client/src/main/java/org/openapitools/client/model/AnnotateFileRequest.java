/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.ImageContext;
import org.openapitools.client.model.InputConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to annotate one single file, e.g. a PDF, TIFF or GIF file.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AnnotateFileRequest {
  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<Feature> features = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_CONTEXT = "imageContext";
  @SerializedName(SERIALIZED_NAME_IMAGE_CONTEXT)
  private ImageContext imageContext;

  public static final String SERIALIZED_NAME_INPUT_CONFIG = "inputConfig";
  @SerializedName(SERIALIZED_NAME_INPUT_CONFIG)
  private InputConfig inputConfig;

  public static final String SERIALIZED_NAME_PAGES = "pages";
  @SerializedName(SERIALIZED_NAME_PAGES)
  private List<Integer> pages = new ArrayList<>();

  public AnnotateFileRequest() {
  }

  public AnnotateFileRequest features(List<Feature> features) {
    this.features = features;
    return this;
  }

  public AnnotateFileRequest addFeaturesItem(Feature featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

  /**
   * Required. Requested features.
   * @return features
   */
  @javax.annotation.Nullable
  public List<Feature> getFeatures() {
    return features;
  }

  public void setFeatures(List<Feature> features) {
    this.features = features;
  }


  public AnnotateFileRequest imageContext(ImageContext imageContext) {
    this.imageContext = imageContext;
    return this;
  }

  /**
   * Get imageContext
   * @return imageContext
   */
  @javax.annotation.Nullable
  public ImageContext getImageContext() {
    return imageContext;
  }

  public void setImageContext(ImageContext imageContext) {
    this.imageContext = imageContext;
  }


  public AnnotateFileRequest inputConfig(InputConfig inputConfig) {
    this.inputConfig = inputConfig;
    return this;
  }

  /**
   * Get inputConfig
   * @return inputConfig
   */
  @javax.annotation.Nullable
  public InputConfig getInputConfig() {
    return inputConfig;
  }

  public void setInputConfig(InputConfig inputConfig) {
    this.inputConfig = inputConfig;
  }


  public AnnotateFileRequest pages(List<Integer> pages) {
    this.pages = pages;
    return this;
  }

  public AnnotateFileRequest addPagesItem(Integer pagesItem) {
    if (this.pages == null) {
      this.pages = new ArrayList<>();
    }
    this.pages.add(pagesItem);
    return this;
  }

  /**
   * Pages of the file to perform image annotation. Pages starts from 1, we assume the first page of the file is page 1. At most 5 pages are supported per request. Pages can be negative. Page 1 means the first page. Page 2 means the second page. Page -1 means the last page. Page -2 means the second to the last page. If the file is GIF instead of PDF or TIFF, page refers to GIF frames. If this field is empty, by default the service performs image annotation for the first 5 pages of the file.
   * @return pages
   */
  @javax.annotation.Nullable
  public List<Integer> getPages() {
    return pages;
  }

  public void setPages(List<Integer> pages) {
    this.pages = pages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnotateFileRequest annotateFileRequest = (AnnotateFileRequest) o;
    return Objects.equals(this.features, annotateFileRequest.features) &&
        Objects.equals(this.imageContext, annotateFileRequest.imageContext) &&
        Objects.equals(this.inputConfig, annotateFileRequest.inputConfig) &&
        Objects.equals(this.pages, annotateFileRequest.pages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(features, imageContext, inputConfig, pages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnotateFileRequest {\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    imageContext: ").append(toIndentedString(imageContext)).append("\n");
    sb.append("    inputConfig: ").append(toIndentedString(inputConfig)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("features");
    openapiFields.add("imageContext");
    openapiFields.add("inputConfig");
    openapiFields.add("pages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnnotateFileRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnnotateFileRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnnotateFileRequest is not found in the empty JSON string", AnnotateFileRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnnotateFileRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnnotateFileRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("features") != null && !jsonObj.get("features").isJsonNull()) {
        JsonArray jsonArrayfeatures = jsonObj.getAsJsonArray("features");
        if (jsonArrayfeatures != null) {
          // ensure the json data is an array
          if (!jsonObj.get("features").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `features` to be an array in the JSON string but got `%s`", jsonObj.get("features").toString()));
          }

          // validate the optional field `features` (array)
          for (int i = 0; i < jsonArrayfeatures.size(); i++) {
            Feature.validateJsonElement(jsonArrayfeatures.get(i));
          };
        }
      }
      // validate the optional field `imageContext`
      if (jsonObj.get("imageContext") != null && !jsonObj.get("imageContext").isJsonNull()) {
        ImageContext.validateJsonElement(jsonObj.get("imageContext"));
      }
      // validate the optional field `inputConfig`
      if (jsonObj.get("inputConfig") != null && !jsonObj.get("inputConfig").isJsonNull()) {
        InputConfig.validateJsonElement(jsonObj.get("inputConfig"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pages") != null && !jsonObj.get("pages").isJsonNull() && !jsonObj.get("pages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pages` to be an array in the JSON string but got `%s`", jsonObj.get("pages").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnnotateFileRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnnotateFileRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnnotateFileRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnnotateFileRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AnnotateFileRequest>() {
           @Override
           public void write(JsonWriter out, AnnotateFileRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnnotateFileRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnnotateFileRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnnotateFileRequest
   * @throws IOException if the JSON string is invalid with respect to AnnotateFileRequest
   */
  public static AnnotateFileRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnnotateFileRequest.class);
  }

  /**
   * Convert an instance of AnnotateFileRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

