/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BoundingPoly;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameters for a product search request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSearchParams {
  public static final String SERIALIZED_NAME_BOUNDING_POLY = "boundingPoly";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLY)
  private BoundingPoly boundingPoly;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_PRODUCT_CATEGORIES = "productCategories";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CATEGORIES)
  private List<String> productCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRODUCT_SET = "productSet";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SET)
  private String productSet;

  public ProductSearchParams() {
  }

  public ProductSearchParams boundingPoly(BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * Get boundingPoly
   * @return boundingPoly
   */
  @javax.annotation.Nullable
  public BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  public void setBoundingPoly(BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
  }


  public ProductSearchParams filter(String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * The filtering expression. This can be used to restrict search results based on Product labels. We currently support an AND of OR of key-value expressions, where each expression within an OR must have the same key. An &#39;&#x3D;&#39; should be used to connect the key and value. For example, \&quot;(color &#x3D; red OR color &#x3D; blue) AND brand &#x3D; Google\&quot; is acceptable, but \&quot;(color &#x3D; red OR brand &#x3D; Google)\&quot; is not acceptable. \&quot;color: red\&quot; is not acceptable because it uses a &#39;:&#39; instead of an &#39;&#x3D;&#39;.
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public ProductSearchParams productCategories(List<String> productCategories) {
    this.productCategories = productCategories;
    return this;
  }

  public ProductSearchParams addProductCategoriesItem(String productCategoriesItem) {
    if (this.productCategories == null) {
      this.productCategories = new ArrayList<>();
    }
    this.productCategories.add(productCategoriesItem);
    return this;
  }

  /**
   * The list of product categories to search in. Currently, we only consider the first category, and either \&quot;homegoods-v2\&quot;, \&quot;apparel-v2\&quot;, \&quot;toys-v2\&quot;, \&quot;packagedgoods-v1\&quot;, or \&quot;general-v1\&quot; should be specified. The legacy categories \&quot;homegoods\&quot;, \&quot;apparel\&quot;, and \&quot;toys\&quot; are still supported but will be deprecated. For new products, please use \&quot;homegoods-v2\&quot;, \&quot;apparel-v2\&quot;, or \&quot;toys-v2\&quot; for better product search accuracy. It is recommended to migrate existing products to these categories as well.
   * @return productCategories
   */
  @javax.annotation.Nullable
  public List<String> getProductCategories() {
    return productCategories;
  }

  public void setProductCategories(List<String> productCategories) {
    this.productCategories = productCategories;
  }


  public ProductSearchParams productSet(String productSet) {
    this.productSet = productSet;
    return this;
  }

  /**
   * The resource name of a ProductSet to be searched for similar images. Format is: &#x60;projects/PROJECT_ID/locations/LOC_ID/productSets/PRODUCT_SET_ID&#x60;.
   * @return productSet
   */
  @javax.annotation.Nullable
  public String getProductSet() {
    return productSet;
  }

  public void setProductSet(String productSet) {
    this.productSet = productSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSearchParams productSearchParams = (ProductSearchParams) o;
    return Objects.equals(this.boundingPoly, productSearchParams.boundingPoly) &&
        Objects.equals(this.filter, productSearchParams.filter) &&
        Objects.equals(this.productCategories, productSearchParams.productCategories) &&
        Objects.equals(this.productSet, productSearchParams.productSet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(boundingPoly, filter, productCategories, productSet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSearchParams {\n");
    sb.append("    boundingPoly: ").append(toIndentedString(boundingPoly)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    productCategories: ").append(toIndentedString(productCategories)).append("\n");
    sb.append("    productSet: ").append(toIndentedString(productSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("boundingPoly");
    openapiFields.add("filter");
    openapiFields.add("productCategories");
    openapiFields.add("productSet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSearchParams
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSearchParams.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSearchParams is not found in the empty JSON string", ProductSearchParams.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSearchParams.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSearchParams` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `boundingPoly`
      if (jsonObj.get("boundingPoly") != null && !jsonObj.get("boundingPoly").isJsonNull()) {
        BoundingPoly.validateJsonElement(jsonObj.get("boundingPoly"));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("productCategories") != null && !jsonObj.get("productCategories").isJsonNull() && !jsonObj.get("productCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `productCategories` to be an array in the JSON string but got `%s`", jsonObj.get("productCategories").toString()));
      }
      if ((jsonObj.get("productSet") != null && !jsonObj.get("productSet").isJsonNull()) && !jsonObj.get("productSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `productSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("productSet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSearchParams.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSearchParams' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSearchParams> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSearchParams.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSearchParams>() {
           @Override
           public void write(JsonWriter out, ProductSearchParams value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSearchParams read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSearchParams given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSearchParams
   * @throws IOException if the JSON string is invalid with respect to ProductSearchParams
   */
  public static ProductSearchParams fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSearchParams.class);
  }

  /**
   * Convert an instance of ProductSearchParams to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

