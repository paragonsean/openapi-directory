/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Google Cloud Storage location for a csv file which preserves a list of ImportProductSetRequests in each line.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportProductSetsGcsSource {
  public static final String SERIALIZED_NAME_CSV_FILE_URI = "csvFileUri";
  @SerializedName(SERIALIZED_NAME_CSV_FILE_URI)
  private String csvFileUri;

  public ImportProductSetsGcsSource() {
  }

  public ImportProductSetsGcsSource csvFileUri(String csvFileUri) {
    this.csvFileUri = csvFileUri;
    return this;
  }

  /**
   * The Google Cloud Storage URI of the input csv file. The URI must start with &#x60;gs://&#x60;. The format of the input csv file should be one image per line. In each line, there are 8 columns. 1. image-uri 2. image-id 3. product-set-id 4. product-id 5. product-category 6. product-display-name 7. labels 8. bounding-poly The &#x60;image-uri&#x60;, &#x60;product-set-id&#x60;, &#x60;product-id&#x60;, and &#x60;product-category&#x60; columns are required. All other columns are optional. If the &#x60;ProductSet&#x60; or &#x60;Product&#x60; specified by the &#x60;product-set-id&#x60; and &#x60;product-id&#x60; values does not exist, then the system will create a new &#x60;ProductSet&#x60; or &#x60;Product&#x60; for the image. In this case, the &#x60;product-display-name&#x60; column refers to display_name, the &#x60;product-category&#x60; column refers to product_category, and the &#x60;labels&#x60; column refers to product_labels. The &#x60;image-id&#x60; column is optional but must be unique if provided. If it is empty, the system will automatically assign a unique id to the image. The &#x60;product-display-name&#x60; column is optional. If it is empty, the system sets the display_name field for the product to a space (\&quot; \&quot;). You can update the &#x60;display_name&#x60; later by using the API. If a &#x60;Product&#x60; with the specified &#x60;product-id&#x60; already exists, then the system ignores the &#x60;product-display-name&#x60;, &#x60;product-category&#x60;, and &#x60;labels&#x60; columns. The &#x60;labels&#x60; column (optional) is a line containing a list of comma-separated key-value pairs, in the following format: \&quot;key_1&#x3D;value_1,key_2&#x3D;value_2,...,key_n&#x3D;value_n\&quot; The &#x60;bounding-poly&#x60; column (optional) identifies one region of interest from the image in the same manner as &#x60;CreateReferenceImage&#x60;. If you do not specify the &#x60;bounding-poly&#x60; column, then the system will try to detect regions of interest automatically. At most one &#x60;bounding-poly&#x60; column is allowed per line. If the image contains multiple regions of interest, add a line to the CSV file that includes the same product information, and the &#x60;bounding-poly&#x60; values for each region of interest. The &#x60;bounding-poly&#x60; column must contain an even number of comma-separated numbers, in the format \&quot;p1_x,p1_y,p2_x,p2_y,...,pn_x,pn_y\&quot;. Use non-negative integers for absolute bounding polygons, and float values in [0, 1] for normalized bounding polygons. The system will resize the image if the image resolution is too large to process (larger than 20MP).
   * @return csvFileUri
   */
  @javax.annotation.Nullable
  public String getCsvFileUri() {
    return csvFileUri;
  }

  public void setCsvFileUri(String csvFileUri) {
    this.csvFileUri = csvFileUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportProductSetsGcsSource importProductSetsGcsSource = (ImportProductSetsGcsSource) o;
    return Objects.equals(this.csvFileUri, importProductSetsGcsSource.csvFileUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(csvFileUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportProductSetsGcsSource {\n");
    sb.append("    csvFileUri: ").append(toIndentedString(csvFileUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("csvFileUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportProductSetsGcsSource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportProductSetsGcsSource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportProductSetsGcsSource is not found in the empty JSON string", ImportProductSetsGcsSource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportProductSetsGcsSource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportProductSetsGcsSource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("csvFileUri") != null && !jsonObj.get("csvFileUri").isJsonNull()) && !jsonObj.get("csvFileUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `csvFileUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("csvFileUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportProductSetsGcsSource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportProductSetsGcsSource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportProductSetsGcsSource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportProductSetsGcsSource.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportProductSetsGcsSource>() {
           @Override
           public void write(JsonWriter out, ImportProductSetsGcsSource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportProductSetsGcsSource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportProductSetsGcsSource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportProductSetsGcsSource
   * @throws IOException if the JSON string is invalid with respect to ImportProductSetsGcsSource
   */
  public static ImportProductSetsGcsSource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportProductSetsGcsSource.class);
  }

  /**
   * Convert an instance of ImportProductSetsGcsSource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

