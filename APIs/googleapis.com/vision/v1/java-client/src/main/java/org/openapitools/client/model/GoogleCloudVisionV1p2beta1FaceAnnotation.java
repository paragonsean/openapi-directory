/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudVisionV1p2beta1BoundingPoly;
import org.openapitools.client.model.GoogleCloudVisionV1p2beta1FaceAnnotationLandmark;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A face annotation object contains the results of face detection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudVisionV1p2beta1FaceAnnotation {
  /**
   * Anger likelihood.
   */
  @JsonAdapter(AngerLikelihoodEnum.Adapter.class)
  public enum AngerLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    AngerLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AngerLikelihoodEnum fromValue(String value) {
      for (AngerLikelihoodEnum b : AngerLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AngerLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AngerLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AngerLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AngerLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AngerLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ANGER_LIKELIHOOD = "angerLikelihood";
  @SerializedName(SERIALIZED_NAME_ANGER_LIKELIHOOD)
  private AngerLikelihoodEnum angerLikelihood;

  /**
   * Blurred likelihood.
   */
  @JsonAdapter(BlurredLikelihoodEnum.Adapter.class)
  public enum BlurredLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    BlurredLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BlurredLikelihoodEnum fromValue(String value) {
      for (BlurredLikelihoodEnum b : BlurredLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BlurredLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BlurredLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BlurredLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BlurredLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BlurredLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BLURRED_LIKELIHOOD = "blurredLikelihood";
  @SerializedName(SERIALIZED_NAME_BLURRED_LIKELIHOOD)
  private BlurredLikelihoodEnum blurredLikelihood;

  public static final String SERIALIZED_NAME_BOUNDING_POLY = "boundingPoly";
  @SerializedName(SERIALIZED_NAME_BOUNDING_POLY)
  private GoogleCloudVisionV1p2beta1BoundingPoly boundingPoly;

  public static final String SERIALIZED_NAME_DETECTION_CONFIDENCE = "detectionConfidence";
  @SerializedName(SERIALIZED_NAME_DETECTION_CONFIDENCE)
  private Float detectionConfidence;

  public static final String SERIALIZED_NAME_FD_BOUNDING_POLY = "fdBoundingPoly";
  @SerializedName(SERIALIZED_NAME_FD_BOUNDING_POLY)
  private GoogleCloudVisionV1p2beta1BoundingPoly fdBoundingPoly;

  /**
   * Headwear likelihood.
   */
  @JsonAdapter(HeadwearLikelihoodEnum.Adapter.class)
  public enum HeadwearLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    HeadwearLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HeadwearLikelihoodEnum fromValue(String value) {
      for (HeadwearLikelihoodEnum b : HeadwearLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HeadwearLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HeadwearLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HeadwearLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HeadwearLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HeadwearLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEADWEAR_LIKELIHOOD = "headwearLikelihood";
  @SerializedName(SERIALIZED_NAME_HEADWEAR_LIKELIHOOD)
  private HeadwearLikelihoodEnum headwearLikelihood;

  /**
   * Joy likelihood.
   */
  @JsonAdapter(JoyLikelihoodEnum.Adapter.class)
  public enum JoyLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    JoyLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static JoyLikelihoodEnum fromValue(String value) {
      for (JoyLikelihoodEnum b : JoyLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<JoyLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final JoyLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public JoyLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return JoyLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      JoyLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_JOY_LIKELIHOOD = "joyLikelihood";
  @SerializedName(SERIALIZED_NAME_JOY_LIKELIHOOD)
  private JoyLikelihoodEnum joyLikelihood;

  public static final String SERIALIZED_NAME_LANDMARKING_CONFIDENCE = "landmarkingConfidence";
  @SerializedName(SERIALIZED_NAME_LANDMARKING_CONFIDENCE)
  private Float landmarkingConfidence;

  public static final String SERIALIZED_NAME_LANDMARKS = "landmarks";
  @SerializedName(SERIALIZED_NAME_LANDMARKS)
  private List<GoogleCloudVisionV1p2beta1FaceAnnotationLandmark> landmarks = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAN_ANGLE = "panAngle";
  @SerializedName(SERIALIZED_NAME_PAN_ANGLE)
  private Float panAngle;

  public static final String SERIALIZED_NAME_ROLL_ANGLE = "rollAngle";
  @SerializedName(SERIALIZED_NAME_ROLL_ANGLE)
  private Float rollAngle;

  /**
   * Sorrow likelihood.
   */
  @JsonAdapter(SorrowLikelihoodEnum.Adapter.class)
  public enum SorrowLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    SorrowLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SorrowLikelihoodEnum fromValue(String value) {
      for (SorrowLikelihoodEnum b : SorrowLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SorrowLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SorrowLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SorrowLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SorrowLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SorrowLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORROW_LIKELIHOOD = "sorrowLikelihood";
  @SerializedName(SERIALIZED_NAME_SORROW_LIKELIHOOD)
  private SorrowLikelihoodEnum sorrowLikelihood;

  /**
   * Surprise likelihood.
   */
  @JsonAdapter(SurpriseLikelihoodEnum.Adapter.class)
  public enum SurpriseLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    SurpriseLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SurpriseLikelihoodEnum fromValue(String value) {
      for (SurpriseLikelihoodEnum b : SurpriseLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SurpriseLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SurpriseLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SurpriseLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SurpriseLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SurpriseLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SURPRISE_LIKELIHOOD = "surpriseLikelihood";
  @SerializedName(SERIALIZED_NAME_SURPRISE_LIKELIHOOD)
  private SurpriseLikelihoodEnum surpriseLikelihood;

  public static final String SERIALIZED_NAME_TILT_ANGLE = "tiltAngle";
  @SerializedName(SERIALIZED_NAME_TILT_ANGLE)
  private Float tiltAngle;

  /**
   * Under-exposed likelihood.
   */
  @JsonAdapter(UnderExposedLikelihoodEnum.Adapter.class)
  public enum UnderExposedLikelihoodEnum {
    UNKNOWN("UNKNOWN"),
    
    VERY_UNLIKELY("VERY_UNLIKELY"),
    
    UNLIKELY("UNLIKELY"),
    
    POSSIBLE("POSSIBLE"),
    
    LIKELY("LIKELY"),
    
    VERY_LIKELY("VERY_LIKELY");

    private String value;

    UnderExposedLikelihoodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UnderExposedLikelihoodEnum fromValue(String value) {
      for (UnderExposedLikelihoodEnum b : UnderExposedLikelihoodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UnderExposedLikelihoodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UnderExposedLikelihoodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UnderExposedLikelihoodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UnderExposedLikelihoodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UnderExposedLikelihoodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_UNDER_EXPOSED_LIKELIHOOD = "underExposedLikelihood";
  @SerializedName(SERIALIZED_NAME_UNDER_EXPOSED_LIKELIHOOD)
  private UnderExposedLikelihoodEnum underExposedLikelihood;

  public GoogleCloudVisionV1p2beta1FaceAnnotation() {
  }

  public GoogleCloudVisionV1p2beta1FaceAnnotation angerLikelihood(AngerLikelihoodEnum angerLikelihood) {
    this.angerLikelihood = angerLikelihood;
    return this;
  }

  /**
   * Anger likelihood.
   * @return angerLikelihood
   */
  @javax.annotation.Nullable
  public AngerLikelihoodEnum getAngerLikelihood() {
    return angerLikelihood;
  }

  public void setAngerLikelihood(AngerLikelihoodEnum angerLikelihood) {
    this.angerLikelihood = angerLikelihood;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation blurredLikelihood(BlurredLikelihoodEnum blurredLikelihood) {
    this.blurredLikelihood = blurredLikelihood;
    return this;
  }

  /**
   * Blurred likelihood.
   * @return blurredLikelihood
   */
  @javax.annotation.Nullable
  public BlurredLikelihoodEnum getBlurredLikelihood() {
    return blurredLikelihood;
  }

  public void setBlurredLikelihood(BlurredLikelihoodEnum blurredLikelihood) {
    this.blurredLikelihood = blurredLikelihood;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation boundingPoly(GoogleCloudVisionV1p2beta1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
    return this;
  }

  /**
   * Get boundingPoly
   * @return boundingPoly
   */
  @javax.annotation.Nullable
  public GoogleCloudVisionV1p2beta1BoundingPoly getBoundingPoly() {
    return boundingPoly;
  }

  public void setBoundingPoly(GoogleCloudVisionV1p2beta1BoundingPoly boundingPoly) {
    this.boundingPoly = boundingPoly;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation detectionConfidence(Float detectionConfidence) {
    this.detectionConfidence = detectionConfidence;
    return this;
  }

  /**
   * Detection confidence. Range [0, 1].
   * @return detectionConfidence
   */
  @javax.annotation.Nullable
  public Float getDetectionConfidence() {
    return detectionConfidence;
  }

  public void setDetectionConfidence(Float detectionConfidence) {
    this.detectionConfidence = detectionConfidence;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation fdBoundingPoly(GoogleCloudVisionV1p2beta1BoundingPoly fdBoundingPoly) {
    this.fdBoundingPoly = fdBoundingPoly;
    return this;
  }

  /**
   * Get fdBoundingPoly
   * @return fdBoundingPoly
   */
  @javax.annotation.Nullable
  public GoogleCloudVisionV1p2beta1BoundingPoly getFdBoundingPoly() {
    return fdBoundingPoly;
  }

  public void setFdBoundingPoly(GoogleCloudVisionV1p2beta1BoundingPoly fdBoundingPoly) {
    this.fdBoundingPoly = fdBoundingPoly;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation headwearLikelihood(HeadwearLikelihoodEnum headwearLikelihood) {
    this.headwearLikelihood = headwearLikelihood;
    return this;
  }

  /**
   * Headwear likelihood.
   * @return headwearLikelihood
   */
  @javax.annotation.Nullable
  public HeadwearLikelihoodEnum getHeadwearLikelihood() {
    return headwearLikelihood;
  }

  public void setHeadwearLikelihood(HeadwearLikelihoodEnum headwearLikelihood) {
    this.headwearLikelihood = headwearLikelihood;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation joyLikelihood(JoyLikelihoodEnum joyLikelihood) {
    this.joyLikelihood = joyLikelihood;
    return this;
  }

  /**
   * Joy likelihood.
   * @return joyLikelihood
   */
  @javax.annotation.Nullable
  public JoyLikelihoodEnum getJoyLikelihood() {
    return joyLikelihood;
  }

  public void setJoyLikelihood(JoyLikelihoodEnum joyLikelihood) {
    this.joyLikelihood = joyLikelihood;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation landmarkingConfidence(Float landmarkingConfidence) {
    this.landmarkingConfidence = landmarkingConfidence;
    return this;
  }

  /**
   * Face landmarking confidence. Range [0, 1].
   * @return landmarkingConfidence
   */
  @javax.annotation.Nullable
  public Float getLandmarkingConfidence() {
    return landmarkingConfidence;
  }

  public void setLandmarkingConfidence(Float landmarkingConfidence) {
    this.landmarkingConfidence = landmarkingConfidence;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation landmarks(List<GoogleCloudVisionV1p2beta1FaceAnnotationLandmark> landmarks) {
    this.landmarks = landmarks;
    return this;
  }

  public GoogleCloudVisionV1p2beta1FaceAnnotation addLandmarksItem(GoogleCloudVisionV1p2beta1FaceAnnotationLandmark landmarksItem) {
    if (this.landmarks == null) {
      this.landmarks = new ArrayList<>();
    }
    this.landmarks.add(landmarksItem);
    return this;
  }

  /**
   * Detected face landmarks.
   * @return landmarks
   */
  @javax.annotation.Nullable
  public List<GoogleCloudVisionV1p2beta1FaceAnnotationLandmark> getLandmarks() {
    return landmarks;
  }

  public void setLandmarks(List<GoogleCloudVisionV1p2beta1FaceAnnotationLandmark> landmarks) {
    this.landmarks = landmarks;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation panAngle(Float panAngle) {
    this.panAngle = panAngle;
    return this;
  }

  /**
   * Yaw angle, which indicates the leftward/rightward angle that the face is pointing relative to the vertical plane perpendicular to the image. Range [-180,180].
   * @return panAngle
   */
  @javax.annotation.Nullable
  public Float getPanAngle() {
    return panAngle;
  }

  public void setPanAngle(Float panAngle) {
    this.panAngle = panAngle;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation rollAngle(Float rollAngle) {
    this.rollAngle = rollAngle;
    return this;
  }

  /**
   * Roll angle, which indicates the amount of clockwise/anti-clockwise rotation of the face relative to the image vertical about the axis perpendicular to the face. Range [-180,180].
   * @return rollAngle
   */
  @javax.annotation.Nullable
  public Float getRollAngle() {
    return rollAngle;
  }

  public void setRollAngle(Float rollAngle) {
    this.rollAngle = rollAngle;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation sorrowLikelihood(SorrowLikelihoodEnum sorrowLikelihood) {
    this.sorrowLikelihood = sorrowLikelihood;
    return this;
  }

  /**
   * Sorrow likelihood.
   * @return sorrowLikelihood
   */
  @javax.annotation.Nullable
  public SorrowLikelihoodEnum getSorrowLikelihood() {
    return sorrowLikelihood;
  }

  public void setSorrowLikelihood(SorrowLikelihoodEnum sorrowLikelihood) {
    this.sorrowLikelihood = sorrowLikelihood;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation surpriseLikelihood(SurpriseLikelihoodEnum surpriseLikelihood) {
    this.surpriseLikelihood = surpriseLikelihood;
    return this;
  }

  /**
   * Surprise likelihood.
   * @return surpriseLikelihood
   */
  @javax.annotation.Nullable
  public SurpriseLikelihoodEnum getSurpriseLikelihood() {
    return surpriseLikelihood;
  }

  public void setSurpriseLikelihood(SurpriseLikelihoodEnum surpriseLikelihood) {
    this.surpriseLikelihood = surpriseLikelihood;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation tiltAngle(Float tiltAngle) {
    this.tiltAngle = tiltAngle;
    return this;
  }

  /**
   * Pitch angle, which indicates the upwards/downwards angle that the face is pointing relative to the image&#39;s horizontal plane. Range [-180,180].
   * @return tiltAngle
   */
  @javax.annotation.Nullable
  public Float getTiltAngle() {
    return tiltAngle;
  }

  public void setTiltAngle(Float tiltAngle) {
    this.tiltAngle = tiltAngle;
  }


  public GoogleCloudVisionV1p2beta1FaceAnnotation underExposedLikelihood(UnderExposedLikelihoodEnum underExposedLikelihood) {
    this.underExposedLikelihood = underExposedLikelihood;
    return this;
  }

  /**
   * Under-exposed likelihood.
   * @return underExposedLikelihood
   */
  @javax.annotation.Nullable
  public UnderExposedLikelihoodEnum getUnderExposedLikelihood() {
    return underExposedLikelihood;
  }

  public void setUnderExposedLikelihood(UnderExposedLikelihoodEnum underExposedLikelihood) {
    this.underExposedLikelihood = underExposedLikelihood;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudVisionV1p2beta1FaceAnnotation googleCloudVisionV1p2beta1FaceAnnotation = (GoogleCloudVisionV1p2beta1FaceAnnotation) o;
    return Objects.equals(this.angerLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.angerLikelihood) &&
        Objects.equals(this.blurredLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.blurredLikelihood) &&
        Objects.equals(this.boundingPoly, googleCloudVisionV1p2beta1FaceAnnotation.boundingPoly) &&
        Objects.equals(this.detectionConfidence, googleCloudVisionV1p2beta1FaceAnnotation.detectionConfidence) &&
        Objects.equals(this.fdBoundingPoly, googleCloudVisionV1p2beta1FaceAnnotation.fdBoundingPoly) &&
        Objects.equals(this.headwearLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.headwearLikelihood) &&
        Objects.equals(this.joyLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.joyLikelihood) &&
        Objects.equals(this.landmarkingConfidence, googleCloudVisionV1p2beta1FaceAnnotation.landmarkingConfidence) &&
        Objects.equals(this.landmarks, googleCloudVisionV1p2beta1FaceAnnotation.landmarks) &&
        Objects.equals(this.panAngle, googleCloudVisionV1p2beta1FaceAnnotation.panAngle) &&
        Objects.equals(this.rollAngle, googleCloudVisionV1p2beta1FaceAnnotation.rollAngle) &&
        Objects.equals(this.sorrowLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.sorrowLikelihood) &&
        Objects.equals(this.surpriseLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.surpriseLikelihood) &&
        Objects.equals(this.tiltAngle, googleCloudVisionV1p2beta1FaceAnnotation.tiltAngle) &&
        Objects.equals(this.underExposedLikelihood, googleCloudVisionV1p2beta1FaceAnnotation.underExposedLikelihood);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angerLikelihood, blurredLikelihood, boundingPoly, detectionConfidence, fdBoundingPoly, headwearLikelihood, joyLikelihood, landmarkingConfidence, landmarks, panAngle, rollAngle, sorrowLikelihood, surpriseLikelihood, tiltAngle, underExposedLikelihood);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudVisionV1p2beta1FaceAnnotation {\n");
    sb.append("    angerLikelihood: ").append(toIndentedString(angerLikelihood)).append("\n");
    sb.append("    blurredLikelihood: ").append(toIndentedString(blurredLikelihood)).append("\n");
    sb.append("    boundingPoly: ").append(toIndentedString(boundingPoly)).append("\n");
    sb.append("    detectionConfidence: ").append(toIndentedString(detectionConfidence)).append("\n");
    sb.append("    fdBoundingPoly: ").append(toIndentedString(fdBoundingPoly)).append("\n");
    sb.append("    headwearLikelihood: ").append(toIndentedString(headwearLikelihood)).append("\n");
    sb.append("    joyLikelihood: ").append(toIndentedString(joyLikelihood)).append("\n");
    sb.append("    landmarkingConfidence: ").append(toIndentedString(landmarkingConfidence)).append("\n");
    sb.append("    landmarks: ").append(toIndentedString(landmarks)).append("\n");
    sb.append("    panAngle: ").append(toIndentedString(panAngle)).append("\n");
    sb.append("    rollAngle: ").append(toIndentedString(rollAngle)).append("\n");
    sb.append("    sorrowLikelihood: ").append(toIndentedString(sorrowLikelihood)).append("\n");
    sb.append("    surpriseLikelihood: ").append(toIndentedString(surpriseLikelihood)).append("\n");
    sb.append("    tiltAngle: ").append(toIndentedString(tiltAngle)).append("\n");
    sb.append("    underExposedLikelihood: ").append(toIndentedString(underExposedLikelihood)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("angerLikelihood");
    openapiFields.add("blurredLikelihood");
    openapiFields.add("boundingPoly");
    openapiFields.add("detectionConfidence");
    openapiFields.add("fdBoundingPoly");
    openapiFields.add("headwearLikelihood");
    openapiFields.add("joyLikelihood");
    openapiFields.add("landmarkingConfidence");
    openapiFields.add("landmarks");
    openapiFields.add("panAngle");
    openapiFields.add("rollAngle");
    openapiFields.add("sorrowLikelihood");
    openapiFields.add("surpriseLikelihood");
    openapiFields.add("tiltAngle");
    openapiFields.add("underExposedLikelihood");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudVisionV1p2beta1FaceAnnotation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudVisionV1p2beta1FaceAnnotation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudVisionV1p2beta1FaceAnnotation is not found in the empty JSON string", GoogleCloudVisionV1p2beta1FaceAnnotation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudVisionV1p2beta1FaceAnnotation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudVisionV1p2beta1FaceAnnotation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("angerLikelihood") != null && !jsonObj.get("angerLikelihood").isJsonNull()) && !jsonObj.get("angerLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `angerLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("angerLikelihood").toString()));
      }
      // validate the optional field `angerLikelihood`
      if (jsonObj.get("angerLikelihood") != null && !jsonObj.get("angerLikelihood").isJsonNull()) {
        AngerLikelihoodEnum.validateJsonElement(jsonObj.get("angerLikelihood"));
      }
      if ((jsonObj.get("blurredLikelihood") != null && !jsonObj.get("blurredLikelihood").isJsonNull()) && !jsonObj.get("blurredLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blurredLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blurredLikelihood").toString()));
      }
      // validate the optional field `blurredLikelihood`
      if (jsonObj.get("blurredLikelihood") != null && !jsonObj.get("blurredLikelihood").isJsonNull()) {
        BlurredLikelihoodEnum.validateJsonElement(jsonObj.get("blurredLikelihood"));
      }
      // validate the optional field `boundingPoly`
      if (jsonObj.get("boundingPoly") != null && !jsonObj.get("boundingPoly").isJsonNull()) {
        GoogleCloudVisionV1p2beta1BoundingPoly.validateJsonElement(jsonObj.get("boundingPoly"));
      }
      // validate the optional field `fdBoundingPoly`
      if (jsonObj.get("fdBoundingPoly") != null && !jsonObj.get("fdBoundingPoly").isJsonNull()) {
        GoogleCloudVisionV1p2beta1BoundingPoly.validateJsonElement(jsonObj.get("fdBoundingPoly"));
      }
      if ((jsonObj.get("headwearLikelihood") != null && !jsonObj.get("headwearLikelihood").isJsonNull()) && !jsonObj.get("headwearLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headwearLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headwearLikelihood").toString()));
      }
      // validate the optional field `headwearLikelihood`
      if (jsonObj.get("headwearLikelihood") != null && !jsonObj.get("headwearLikelihood").isJsonNull()) {
        HeadwearLikelihoodEnum.validateJsonElement(jsonObj.get("headwearLikelihood"));
      }
      if ((jsonObj.get("joyLikelihood") != null && !jsonObj.get("joyLikelihood").isJsonNull()) && !jsonObj.get("joyLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joyLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joyLikelihood").toString()));
      }
      // validate the optional field `joyLikelihood`
      if (jsonObj.get("joyLikelihood") != null && !jsonObj.get("joyLikelihood").isJsonNull()) {
        JoyLikelihoodEnum.validateJsonElement(jsonObj.get("joyLikelihood"));
      }
      if (jsonObj.get("landmarks") != null && !jsonObj.get("landmarks").isJsonNull()) {
        JsonArray jsonArraylandmarks = jsonObj.getAsJsonArray("landmarks");
        if (jsonArraylandmarks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("landmarks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `landmarks` to be an array in the JSON string but got `%s`", jsonObj.get("landmarks").toString()));
          }

          // validate the optional field `landmarks` (array)
          for (int i = 0; i < jsonArraylandmarks.size(); i++) {
            GoogleCloudVisionV1p2beta1FaceAnnotationLandmark.validateJsonElement(jsonArraylandmarks.get(i));
          };
        }
      }
      if ((jsonObj.get("sorrowLikelihood") != null && !jsonObj.get("sorrowLikelihood").isJsonNull()) && !jsonObj.get("sorrowLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sorrowLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sorrowLikelihood").toString()));
      }
      // validate the optional field `sorrowLikelihood`
      if (jsonObj.get("sorrowLikelihood") != null && !jsonObj.get("sorrowLikelihood").isJsonNull()) {
        SorrowLikelihoodEnum.validateJsonElement(jsonObj.get("sorrowLikelihood"));
      }
      if ((jsonObj.get("surpriseLikelihood") != null && !jsonObj.get("surpriseLikelihood").isJsonNull()) && !jsonObj.get("surpriseLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surpriseLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surpriseLikelihood").toString()));
      }
      // validate the optional field `surpriseLikelihood`
      if (jsonObj.get("surpriseLikelihood") != null && !jsonObj.get("surpriseLikelihood").isJsonNull()) {
        SurpriseLikelihoodEnum.validateJsonElement(jsonObj.get("surpriseLikelihood"));
      }
      if ((jsonObj.get("underExposedLikelihood") != null && !jsonObj.get("underExposedLikelihood").isJsonNull()) && !jsonObj.get("underExposedLikelihood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `underExposedLikelihood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("underExposedLikelihood").toString()));
      }
      // validate the optional field `underExposedLikelihood`
      if (jsonObj.get("underExposedLikelihood") != null && !jsonObj.get("underExposedLikelihood").isJsonNull()) {
        UnderExposedLikelihoodEnum.validateJsonElement(jsonObj.get("underExposedLikelihood"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudVisionV1p2beta1FaceAnnotation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudVisionV1p2beta1FaceAnnotation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudVisionV1p2beta1FaceAnnotation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudVisionV1p2beta1FaceAnnotation.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudVisionV1p2beta1FaceAnnotation>() {
           @Override
           public void write(JsonWriter out, GoogleCloudVisionV1p2beta1FaceAnnotation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudVisionV1p2beta1FaceAnnotation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudVisionV1p2beta1FaceAnnotation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudVisionV1p2beta1FaceAnnotation
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudVisionV1p2beta1FaceAnnotation
   */
  public static GoogleCloudVisionV1p2beta1FaceAnnotation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudVisionV1p2beta1FaceAnnotation.class);
  }

  /**
   * Convert an instance of GoogleCloudVisionV1p2beta1FaceAnnotation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

