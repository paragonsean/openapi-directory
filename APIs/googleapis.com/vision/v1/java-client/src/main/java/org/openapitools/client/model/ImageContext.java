/*
 * Cloud Vision API
 * Integrates Google Vision features, including image labeling, face, logo, and landmark detection, optical character recognition (OCR), and detection of explicit content, into applications.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CropHintsParams;
import org.openapitools.client.model.LatLongRect;
import org.openapitools.client.model.ProductSearchParams;
import org.openapitools.client.model.TextDetectionParams;
import org.openapitools.client.model.WebDetectionParams;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Image context and/or feature-specific parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:45:39.270009-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageContext {
  public static final String SERIALIZED_NAME_CROP_HINTS_PARAMS = "cropHintsParams";
  @SerializedName(SERIALIZED_NAME_CROP_HINTS_PARAMS)
  private CropHintsParams cropHintsParams;

  public static final String SERIALIZED_NAME_LANGUAGE_HINTS = "languageHints";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_HINTS)
  private List<String> languageHints = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAT_LONG_RECT = "latLongRect";
  @SerializedName(SERIALIZED_NAME_LAT_LONG_RECT)
  private LatLongRect latLongRect;

  public static final String SERIALIZED_NAME_PRODUCT_SEARCH_PARAMS = "productSearchParams";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SEARCH_PARAMS)
  private ProductSearchParams productSearchParams;

  public static final String SERIALIZED_NAME_TEXT_DETECTION_PARAMS = "textDetectionParams";
  @SerializedName(SERIALIZED_NAME_TEXT_DETECTION_PARAMS)
  private TextDetectionParams textDetectionParams;

  public static final String SERIALIZED_NAME_WEB_DETECTION_PARAMS = "webDetectionParams";
  @SerializedName(SERIALIZED_NAME_WEB_DETECTION_PARAMS)
  private WebDetectionParams webDetectionParams;

  public ImageContext() {
  }

  public ImageContext cropHintsParams(CropHintsParams cropHintsParams) {
    this.cropHintsParams = cropHintsParams;
    return this;
  }

  /**
   * Get cropHintsParams
   * @return cropHintsParams
   */
  @javax.annotation.Nullable
  public CropHintsParams getCropHintsParams() {
    return cropHintsParams;
  }

  public void setCropHintsParams(CropHintsParams cropHintsParams) {
    this.cropHintsParams = cropHintsParams;
  }


  public ImageContext languageHints(List<String> languageHints) {
    this.languageHints = languageHints;
    return this;
  }

  public ImageContext addLanguageHintsItem(String languageHintsItem) {
    if (this.languageHints == null) {
      this.languageHints = new ArrayList<>();
    }
    this.languageHints.add(languageHintsItem);
    return this;
  }

  /**
   * List of languages to use for TEXT_DETECTION. In most cases, an empty value yields the best results since it enables automatic language detection. For languages based on the Latin alphabet, setting &#x60;language_hints&#x60; is not needed. In rare cases, when the language of the text in the image is known, setting a hint will help get better results (although it will be a significant hindrance if the hint is wrong). Text detection returns an error if one or more of the specified languages is not one of the [supported languages](https://cloud.google.com/vision/docs/languages).
   * @return languageHints
   */
  @javax.annotation.Nullable
  public List<String> getLanguageHints() {
    return languageHints;
  }

  public void setLanguageHints(List<String> languageHints) {
    this.languageHints = languageHints;
  }


  public ImageContext latLongRect(LatLongRect latLongRect) {
    this.latLongRect = latLongRect;
    return this;
  }

  /**
   * Get latLongRect
   * @return latLongRect
   */
  @javax.annotation.Nullable
  public LatLongRect getLatLongRect() {
    return latLongRect;
  }

  public void setLatLongRect(LatLongRect latLongRect) {
    this.latLongRect = latLongRect;
  }


  public ImageContext productSearchParams(ProductSearchParams productSearchParams) {
    this.productSearchParams = productSearchParams;
    return this;
  }

  /**
   * Get productSearchParams
   * @return productSearchParams
   */
  @javax.annotation.Nullable
  public ProductSearchParams getProductSearchParams() {
    return productSearchParams;
  }

  public void setProductSearchParams(ProductSearchParams productSearchParams) {
    this.productSearchParams = productSearchParams;
  }


  public ImageContext textDetectionParams(TextDetectionParams textDetectionParams) {
    this.textDetectionParams = textDetectionParams;
    return this;
  }

  /**
   * Get textDetectionParams
   * @return textDetectionParams
   */
  @javax.annotation.Nullable
  public TextDetectionParams getTextDetectionParams() {
    return textDetectionParams;
  }

  public void setTextDetectionParams(TextDetectionParams textDetectionParams) {
    this.textDetectionParams = textDetectionParams;
  }


  public ImageContext webDetectionParams(WebDetectionParams webDetectionParams) {
    this.webDetectionParams = webDetectionParams;
    return this;
  }

  /**
   * Get webDetectionParams
   * @return webDetectionParams
   */
  @javax.annotation.Nullable
  public WebDetectionParams getWebDetectionParams() {
    return webDetectionParams;
  }

  public void setWebDetectionParams(WebDetectionParams webDetectionParams) {
    this.webDetectionParams = webDetectionParams;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageContext imageContext = (ImageContext) o;
    return Objects.equals(this.cropHintsParams, imageContext.cropHintsParams) &&
        Objects.equals(this.languageHints, imageContext.languageHints) &&
        Objects.equals(this.latLongRect, imageContext.latLongRect) &&
        Objects.equals(this.productSearchParams, imageContext.productSearchParams) &&
        Objects.equals(this.textDetectionParams, imageContext.textDetectionParams) &&
        Objects.equals(this.webDetectionParams, imageContext.webDetectionParams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cropHintsParams, languageHints, latLongRect, productSearchParams, textDetectionParams, webDetectionParams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageContext {\n");
    sb.append("    cropHintsParams: ").append(toIndentedString(cropHintsParams)).append("\n");
    sb.append("    languageHints: ").append(toIndentedString(languageHints)).append("\n");
    sb.append("    latLongRect: ").append(toIndentedString(latLongRect)).append("\n");
    sb.append("    productSearchParams: ").append(toIndentedString(productSearchParams)).append("\n");
    sb.append("    textDetectionParams: ").append(toIndentedString(textDetectionParams)).append("\n");
    sb.append("    webDetectionParams: ").append(toIndentedString(webDetectionParams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cropHintsParams");
    openapiFields.add("languageHints");
    openapiFields.add("latLongRect");
    openapiFields.add("productSearchParams");
    openapiFields.add("textDetectionParams");
    openapiFields.add("webDetectionParams");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageContext is not found in the empty JSON string", ImageContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cropHintsParams`
      if (jsonObj.get("cropHintsParams") != null && !jsonObj.get("cropHintsParams").isJsonNull()) {
        CropHintsParams.validateJsonElement(jsonObj.get("cropHintsParams"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("languageHints") != null && !jsonObj.get("languageHints").isJsonNull() && !jsonObj.get("languageHints").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `languageHints` to be an array in the JSON string but got `%s`", jsonObj.get("languageHints").toString()));
      }
      // validate the optional field `latLongRect`
      if (jsonObj.get("latLongRect") != null && !jsonObj.get("latLongRect").isJsonNull()) {
        LatLongRect.validateJsonElement(jsonObj.get("latLongRect"));
      }
      // validate the optional field `productSearchParams`
      if (jsonObj.get("productSearchParams") != null && !jsonObj.get("productSearchParams").isJsonNull()) {
        ProductSearchParams.validateJsonElement(jsonObj.get("productSearchParams"));
      }
      // validate the optional field `textDetectionParams`
      if (jsonObj.get("textDetectionParams") != null && !jsonObj.get("textDetectionParams").isJsonNull()) {
        TextDetectionParams.validateJsonElement(jsonObj.get("textDetectionParams"));
      }
      // validate the optional field `webDetectionParams`
      if (jsonObj.get("webDetectionParams") != null && !jsonObj.get("webDetectionParams").isJsonNull()) {
        WebDetectionParams.validateJsonElement(jsonObj.get("webDetectionParams"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageContext>() {
           @Override
           public void write(JsonWriter out, ImageContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageContext
   * @throws IOException if the JSON string is invalid with respect to ImageContext
   */
  public static ImageContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageContext.class);
  }

  /**
   * Convert an instance of ImageContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

