/*
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GoogleIamV1Policy;
import org.openapitools.client.model.GoogleIamV1SetIamPolicyRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsRequest;
import org.openapitools.client.model.GoogleIamV1TestIamPermissionsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicebrokerGetIamPolicy
     * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param optionsRequestedPolicyVersion Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicebrokerGetIamPolicyCall(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, Integer optionsRequestedPolicyVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{resource}:getIamPolicy"
            .replace("{" + "resource" + "}", localVarApiClient.escapeString(resource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        if (optionsRequestedPolicyVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("options.requestedPolicyVersion", optionsRequestedPolicyVersion));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicebrokerGetIamPolicyValidateBeforeCall(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, Integer optionsRequestedPolicyVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling servicebrokerGetIamPolicy(Async)");
        }

        return servicebrokerGetIamPolicyCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, optionsRequestedPolicyVersion, _callback);

    }

    /**
     * 
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param optionsRequestedPolicyVersion Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. (optional)
     * @return GoogleIamV1Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GoogleIamV1Policy servicebrokerGetIamPolicy(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, Integer optionsRequestedPolicyVersion) throws ApiException {
        ApiResponse<GoogleIamV1Policy> localVarResp = servicebrokerGetIamPolicyWithHttpInfo(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, optionsRequestedPolicyVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param optionsRequestedPolicyVersion Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. (optional)
     * @return ApiResponse&lt;GoogleIamV1Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleIamV1Policy> servicebrokerGetIamPolicyWithHttpInfo(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, Integer optionsRequestedPolicyVersion) throws ApiException {
        okhttp3.Call localVarCall = servicebrokerGetIamPolicyValidateBeforeCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, optionsRequestedPolicyVersion, null);
        Type localVarReturnType = new TypeToken<GoogleIamV1Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * @param resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param optionsRequestedPolicyVersion Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicebrokerGetIamPolicyAsync(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, Integer optionsRequestedPolicyVersion, final ApiCallback<GoogleIamV1Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicebrokerGetIamPolicyValidateBeforeCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, optionsRequestedPolicyVersion, _callback);
        Type localVarReturnType = new TypeToken<GoogleIamV1Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicebrokerSetIamPolicy
     * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1SetIamPolicyRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicebrokerSetIamPolicyCall(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleIamV1SetIamPolicyRequest;

        // create path and map variables
        String localVarPath = "/v1/{resource}:setIamPolicy"
            .replace("{" + "resource" + "}", localVarApiClient.escapeString(resource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicebrokerSetIamPolicyValidateBeforeCall(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling servicebrokerSetIamPolicy(Async)");
        }

        return servicebrokerSetIamPolicyCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1SetIamPolicyRequest, _callback);

    }

    /**
     * 
     * Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
     * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1SetIamPolicyRequest  (optional)
     * @return GoogleIamV1Policy
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GoogleIamV1Policy servicebrokerSetIamPolicy(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest) throws ApiException {
        ApiResponse<GoogleIamV1Policy> localVarResp = servicebrokerSetIamPolicyWithHttpInfo(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1SetIamPolicyRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
     * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1SetIamPolicyRequest  (optional)
     * @return ApiResponse&lt;GoogleIamV1Policy&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleIamV1Policy> servicebrokerSetIamPolicyWithHttpInfo(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest) throws ApiException {
        okhttp3.Call localVarCall = servicebrokerSetIamPolicyValidateBeforeCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1SetIamPolicyRequest, null);
        Type localVarReturnType = new TypeToken<GoogleIamV1Policy>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
     * @param resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1SetIamPolicyRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicebrokerSetIamPolicyAsync(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1SetIamPolicyRequest googleIamV1SetIamPolicyRequest, final ApiCallback<GoogleIamV1Policy> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicebrokerSetIamPolicyValidateBeforeCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1SetIamPolicyRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleIamV1Policy>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicebrokerTestIamPermissions
     * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1TestIamPermissionsRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicebrokerTestIamPermissionsCall(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = googleIamV1TestIamPermissionsRequest;

        // create path and map variables
        String localVarPath = "/v1/{resource}:testIamPermissions"
            .replace("{" + "resource" + "}", localVarApiClient.escapeString(resource.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if ($xgafv != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$.xgafv", $xgafv));
        }

        if (oauthToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oauth_token", oauthToken));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (alt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alt", alt));
        }

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (accessToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("access_token", accessToken));
        }

        if (uploadProtocol != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("upload_protocol", uploadProtocol));
        }

        if (prettyPrint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prettyPrint", prettyPrint));
        }

        if (quotaUser != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quotaUser", quotaUser));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (uploadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uploadType", uploadType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Oauth2c", "Oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicebrokerTestIamPermissionsValidateBeforeCall(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resource' is set
        if (resource == null) {
            throw new ApiException("Missing the required parameter 'resource' when calling servicebrokerTestIamPermissions(Async)");
        }

        return servicebrokerTestIamPermissionsCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1TestIamPermissionsRequest, _callback);

    }

    /**
     * 
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1TestIamPermissionsRequest  (optional)
     * @return GoogleIamV1TestIamPermissionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public GoogleIamV1TestIamPermissionsResponse servicebrokerTestIamPermissions(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest) throws ApiException {
        ApiResponse<GoogleIamV1TestIamPermissionsResponse> localVarResp = servicebrokerTestIamPermissionsWithHttpInfo(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1TestIamPermissionsRequest);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1TestIamPermissionsRequest  (optional)
     * @return ApiResponse&lt;GoogleIamV1TestIamPermissionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GoogleIamV1TestIamPermissionsResponse> servicebrokerTestIamPermissionsWithHttpInfo(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest) throws ApiException {
        okhttp3.Call localVarCall = servicebrokerTestIamPermissionsValidateBeforeCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1TestIamPermissionsRequest, null);
        Type localVarReturnType = new TypeToken<GoogleIamV1TestIamPermissionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     * @param resource REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
     * @param $xgafv V1 error format. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param paramCallback JSONP (optional)
     * @param alt Data format for response. (optional, default to json)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param accessToken OAuth access token. (optional)
     * @param uploadProtocol Upload protocol for media (e.g. \&quot;raw\&quot;, \&quot;multipart\&quot;). (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional, default to true)
     * @param quotaUser Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param uploadType Legacy upload protocol for media (e.g. \&quot;media\&quot;, \&quot;multipart\&quot;). (optional)
     * @param googleIamV1TestIamPermissionsRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicebrokerTestIamPermissionsAsync(String resource, String $xgafv, String oauthToken, String paramCallback, String alt, String key, String accessToken, String uploadProtocol, Boolean prettyPrint, String quotaUser, String fields, String uploadType, GoogleIamV1TestIamPermissionsRequest googleIamV1TestIamPermissionsRequest, final ApiCallback<GoogleIamV1TestIamPermissionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicebrokerTestIamPermissionsValidateBeforeCall(resource, $xgafv, oauthToken, paramCallback, alt, key, accessToken, uploadProtocol, prettyPrint, quotaUser, fields, uploadType, googleIamV1TestIamPermissionsRequest, _callback);
        Type localVarReturnType = new TypeToken<GoogleIamV1TestIamPermissionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
