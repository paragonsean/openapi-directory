/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudServicebrokerV1beta1Plan model module.
 * @module model/GoogleCloudServicebrokerV1beta1Plan
 * @version v1beta1
 */
class GoogleCloudServicebrokerV1beta1Plan {
    /**
     * Constructs a new <code>GoogleCloudServicebrokerV1beta1Plan</code>.
     * Plan message describes a Service Plan.
     * @alias module:model/GoogleCloudServicebrokerV1beta1Plan
     */
    constructor() { 
        
        GoogleCloudServicebrokerV1beta1Plan.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudServicebrokerV1beta1Plan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudServicebrokerV1beta1Plan} obj Optional instance to populate.
     * @return {module:model/GoogleCloudServicebrokerV1beta1Plan} The populated <code>GoogleCloudServicebrokerV1beta1Plan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudServicebrokerV1beta1Plan();

            if (data.hasOwnProperty('bindable')) {
                obj['bindable'] = ApiClient.convertToType(data['bindable'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('free')) {
                obj['free'] = ApiClient.convertToType(data['free'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('schemas')) {
                obj['schemas'] = ApiClient.convertToType(data['schemas'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudServicebrokerV1beta1Plan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudServicebrokerV1beta1Plan</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Specifies whether instances of the service can be bound to applications. If not specified, `Service.bindable` will be presumed.
 * @member {Boolean} bindable
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['bindable'] = undefined;

/**
 * Textual description of the plan. Optional.
 * @member {String} description
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['description'] = undefined;

/**
 * Whether the service is free.
 * @member {Boolean} free
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['free'] = undefined;

/**
 * ID is a globally unique identifier used to uniquely identify the plan. User must make no presumption about the format of this field.
 * @member {String} id
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['id'] = undefined;

/**
 * A list of metadata for a service offering. Metadata is an arbitrary JSON object.
 * @member {Object.<String, Object>} metadata
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['metadata'] = undefined;

/**
 * User friendly name of the plan. The name must be globally unique within GCP project. Note, which is different from (\"This must be globally unique within a platform marketplace\").
 * @member {String} name
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['name'] = undefined;

/**
 * Schema definitions for service instances and bindings for the plan.
 * @member {Object.<String, Object>} schemas
 */
GoogleCloudServicebrokerV1beta1Plan.prototype['schemas'] = undefined;






export default GoogleCloudServicebrokerV1beta1Plan;

