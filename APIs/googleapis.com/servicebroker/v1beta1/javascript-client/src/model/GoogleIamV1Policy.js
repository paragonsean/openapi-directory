/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleIamV1Binding from './GoogleIamV1Binding';

/**
 * The GoogleIamV1Policy model module.
 * @module model/GoogleIamV1Policy
 * @version v1beta1
 */
class GoogleIamV1Policy {
    /**
     * Constructs a new <code>GoogleIamV1Policy</code>.
     * An Identity and Access Management (IAM) policy, which specifies access controls for Google Cloud resources.   A &#x60;Policy&#x60; is a collection of &#x60;bindings&#x60;. A &#x60;binding&#x60; binds one or more &#x60;members&#x60; to a single &#x60;role&#x60;. Members can be user accounts, service accounts, Google groups, and domains (such as G Suite). A &#x60;role&#x60; is a named list of permissions; each &#x60;role&#x60; can be an IAM predefined role or a user-created custom role.  Optionally, a &#x60;binding&#x60; can specify a &#x60;condition&#x60;, which is a logical expression that allows access to a resource only if the expression evaluates to &#x60;true&#x60;. A condition can add constraints based on attributes of the request, the resource, or both.  **JSON example:**      {       \&quot;bindings\&quot;: [         {           \&quot;role\&quot;: \&quot;roles/resourcemanager.organizationAdmin\&quot;,           \&quot;members\&quot;: [             \&quot;user:mike@example.com\&quot;,             \&quot;group:admins@example.com\&quot;,             \&quot;domain:google.com\&quot;,             \&quot;serviceAccount:my-project-id@appspot.gserviceaccount.com\&quot;           ]         },         {           \&quot;role\&quot;: \&quot;roles/resourcemanager.organizationViewer\&quot;,           \&quot;members\&quot;: [\&quot;user:eve@example.com\&quot;],           \&quot;condition\&quot;: {             \&quot;title\&quot;: \&quot;expirable access\&quot;,             \&quot;description\&quot;: \&quot;Does not grant access after Sep 2020\&quot;,             \&quot;expression\&quot;: \&quot;request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)\&quot;,           }         }       ],       \&quot;etag\&quot;: \&quot;BwWWja0YfJA&#x3D;\&quot;,       \&quot;version\&quot;: 3     }  **YAML example:**      bindings:     - members:       - user:mike@example.com       - group:admins@example.com       - domain:google.com       - serviceAccount:my-project-id@appspot.gserviceaccount.com       role: roles/resourcemanager.organizationAdmin     - members:       - user:eve@example.com       role: roles/resourcemanager.organizationViewer       condition:         title: expirable access         description: Does not grant access after Sep 2020         expression: request.time &lt; timestamp(&#39;2020-10-01T00:00:00.000Z&#39;)     - etag: BwWWja0YfJA&#x3D;     - version: 3  For a description of IAM and its features, see the [IAM documentation](https://cloud.google.com/iam/docs/).
     * @alias module:model/GoogleIamV1Policy
     */
    constructor() { 
        
        GoogleIamV1Policy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleIamV1Policy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleIamV1Policy} obj Optional instance to populate.
     * @return {module:model/GoogleIamV1Policy} The populated <code>GoogleIamV1Policy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleIamV1Policy();

            if (data.hasOwnProperty('bindings')) {
                obj['bindings'] = ApiClient.convertToType(data['bindings'], [GoogleIamV1Binding]);
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'Blob');
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleIamV1Policy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleIamV1Policy</code>.
     */
    static validateJSON(data) {
        if (data['bindings']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bindings'])) {
                throw new Error("Expected the field `bindings` to be an array in the JSON data but got " + data['bindings']);
            }
            // validate the optional field `bindings` (array)
            for (const item of data['bindings']) {
                GoogleIamV1Binding.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Associates a list of `members` to a `role`. Optionally, may specify a `condition` that determines how and when the `bindings` are applied. Each of the `bindings` must contain at least one member.
 * @member {Array.<module:model/GoogleIamV1Binding>} bindings
 */
GoogleIamV1Policy.prototype['bindings'] = undefined;

/**
 * `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.  **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.
 * @member {Blob} etag
 */
GoogleIamV1Policy.prototype['etag'] = undefined;

/**
 * Specifies the format of the policy.  Valid values are `0`, `1`, and `3`. Requests that specify an invalid value are rejected.  Any operation that affects conditional role bindings must specify version `3`. This requirement applies to the following operations:  * Getting a policy that includes a conditional role binding * Adding a conditional role binding to a policy * Changing a conditional role binding in a policy * Removing any role binding, with or without a condition, from a policy   that includes conditions  **Important:** If you use IAM Conditions, you must include the `etag` field whenever you call `setIamPolicy`. If you omit this field, then IAM allows you to overwrite a version `3` policy with a version `1` policy, and all of the conditions in the version `3` policy are lost.  If a policy does not include any conditions, operations on that policy may specify any valid version or leave the field unset.
 * @member {Number} version
 */
GoogleIamV1Policy.prototype['version'] = undefined;






export default GoogleIamV1Policy;

