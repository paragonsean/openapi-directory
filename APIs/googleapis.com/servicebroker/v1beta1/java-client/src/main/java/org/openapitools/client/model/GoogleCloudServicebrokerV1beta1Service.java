/*
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleCloudServicebrokerV1beta1DashboardClient;
import org.openapitools.client.model.GoogleCloudServicebrokerV1beta1Plan;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The resource model mostly follows the Open Service Broker API, as described here: https://github.com/openservicebrokerapi/servicebroker/blob/master/_spec.md Though due to Google Specifics it has additional optional fields.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:34:17.619469-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudServicebrokerV1beta1Service {
  public static final String SERIALIZED_NAME_BINDABLE = "bindable";
  @SerializedName(SERIALIZED_NAME_BINDABLE)
  private Boolean bindable;

  public static final String SERIALIZED_NAME_BINDING_RETRIEVABLE = "binding_retrievable";
  @SerializedName(SERIALIZED_NAME_BINDING_RETRIEVABLE)
  private Boolean bindingRetrievable;

  public static final String SERIALIZED_NAME_BINDINGS_RETRIEVABLE = "bindings_retrievable";
  @SerializedName(SERIALIZED_NAME_BINDINGS_RETRIEVABLE)
  private Boolean bindingsRetrievable;

  public static final String SERIALIZED_NAME_DASHBOARD_CLIENT = "dashboard_client";
  @SerializedName(SERIALIZED_NAME_DASHBOARD_CLIENT)
  private GoogleCloudServicebrokerV1beta1DashboardClient dashboardClient;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCES_RETRIEVABLE = "instances_retrievable";
  @SerializedName(SERIALIZED_NAME_INSTANCES_RETRIEVABLE)
  private Boolean instancesRetrievable;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, Object> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PLAN_UPDATEABLE = "plan_updateable";
  @SerializedName(SERIALIZED_NAME_PLAN_UPDATEABLE)
  private Boolean planUpdateable;

  public static final String SERIALIZED_NAME_PLANS = "plans";
  @SerializedName(SERIALIZED_NAME_PLANS)
  private List<GoogleCloudServicebrokerV1beta1Plan> plans = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public GoogleCloudServicebrokerV1beta1Service() {
  }

  public GoogleCloudServicebrokerV1beta1Service bindable(Boolean bindable) {
    this.bindable = bindable;
    return this;
  }

  /**
   * Specifies whether instances of the service can be bound to applications. Required.
   * @return bindable
   */
  @javax.annotation.Nullable
  public Boolean getBindable() {
    return bindable;
  }

  public void setBindable(Boolean bindable) {
    this.bindable = bindable;
  }


  public GoogleCloudServicebrokerV1beta1Service bindingRetrievable(Boolean bindingRetrievable) {
    this.bindingRetrievable = bindingRetrievable;
    return this;
  }

  /**
   * Whether the service provides an endpoint to get service bindings.
   * @return bindingRetrievable
   */
  @javax.annotation.Nullable
  public Boolean getBindingRetrievable() {
    return bindingRetrievable;
  }

  public void setBindingRetrievable(Boolean bindingRetrievable) {
    this.bindingRetrievable = bindingRetrievable;
  }


  public GoogleCloudServicebrokerV1beta1Service bindingsRetrievable(Boolean bindingsRetrievable) {
    this.bindingsRetrievable = bindingsRetrievable;
    return this;
  }

  /**
   * Whether the service provides an endpoint to get service bindings.
   * @return bindingsRetrievable
   */
  @javax.annotation.Nullable
  public Boolean getBindingsRetrievable() {
    return bindingsRetrievable;
  }

  public void setBindingsRetrievable(Boolean bindingsRetrievable) {
    this.bindingsRetrievable = bindingsRetrievable;
  }


  public GoogleCloudServicebrokerV1beta1Service dashboardClient(GoogleCloudServicebrokerV1beta1DashboardClient dashboardClient) {
    this.dashboardClient = dashboardClient;
    return this;
  }

  /**
   * Get dashboardClient
   * @return dashboardClient
   */
  @javax.annotation.Nullable
  public GoogleCloudServicebrokerV1beta1DashboardClient getDashboardClient() {
    return dashboardClient;
  }

  public void setDashboardClient(GoogleCloudServicebrokerV1beta1DashboardClient dashboardClient) {
    this.dashboardClient = dashboardClient;
  }


  public GoogleCloudServicebrokerV1beta1Service description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Textual description of the service. Required.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudServicebrokerV1beta1Service id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID is a globally unique identifier used to uniquely identify the service. ID is an opaque string.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GoogleCloudServicebrokerV1beta1Service instancesRetrievable(Boolean instancesRetrievable) {
    this.instancesRetrievable = instancesRetrievable;
    return this;
  }

  /**
   * Whether the service provides an endpoint to get service instances.
   * @return instancesRetrievable
   */
  @javax.annotation.Nullable
  public Boolean getInstancesRetrievable() {
    return instancesRetrievable;
  }

  public void setInstancesRetrievable(Boolean instancesRetrievable) {
    this.instancesRetrievable = instancesRetrievable;
  }


  public GoogleCloudServicebrokerV1beta1Service metadata(Map<String, Object> metadata) {
    this.metadata = metadata;
    return this;
  }

  public GoogleCloudServicebrokerV1beta1Service putMetadataItem(String key, Object metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * A list of metadata for a service offering. Metadata is an arbitrary JSON object.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, Object> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, Object> metadata) {
    this.metadata = metadata;
  }


  public GoogleCloudServicebrokerV1beta1Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * User friendly service name. Name must match [a-z0-9]+ regexp. The name must be globally unique within GCP project. Note, which is different from (\&quot;This must be globally unique within a platform marketplace\&quot;). Required.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudServicebrokerV1beta1Service planUpdateable(Boolean planUpdateable) {
    this.planUpdateable = planUpdateable;
    return this;
  }

  /**
   * Whether the service supports upgrade/downgrade for some plans.
   * @return planUpdateable
   */
  @javax.annotation.Nullable
  public Boolean getPlanUpdateable() {
    return planUpdateable;
  }

  public void setPlanUpdateable(Boolean planUpdateable) {
    this.planUpdateable = planUpdateable;
  }


  public GoogleCloudServicebrokerV1beta1Service plans(List<GoogleCloudServicebrokerV1beta1Plan> plans) {
    this.plans = plans;
    return this;
  }

  public GoogleCloudServicebrokerV1beta1Service addPlansItem(GoogleCloudServicebrokerV1beta1Plan plansItem) {
    if (this.plans == null) {
      this.plans = new ArrayList<>();
    }
    this.plans.add(plansItem);
    return this;
  }

  /**
   * A list of plans for this service. At least one plan is required.
   * @return plans
   */
  @javax.annotation.Nullable
  public List<GoogleCloudServicebrokerV1beta1Plan> getPlans() {
    return plans;
  }

  public void setPlans(List<GoogleCloudServicebrokerV1beta1Plan> plans) {
    this.plans = plans;
  }


  public GoogleCloudServicebrokerV1beta1Service tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public GoogleCloudServicebrokerV1beta1Service addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudServicebrokerV1beta1Service googleCloudServicebrokerV1beta1Service = (GoogleCloudServicebrokerV1beta1Service) o;
    return Objects.equals(this.bindable, googleCloudServicebrokerV1beta1Service.bindable) &&
        Objects.equals(this.bindingRetrievable, googleCloudServicebrokerV1beta1Service.bindingRetrievable) &&
        Objects.equals(this.bindingsRetrievable, googleCloudServicebrokerV1beta1Service.bindingsRetrievable) &&
        Objects.equals(this.dashboardClient, googleCloudServicebrokerV1beta1Service.dashboardClient) &&
        Objects.equals(this.description, googleCloudServicebrokerV1beta1Service.description) &&
        Objects.equals(this.id, googleCloudServicebrokerV1beta1Service.id) &&
        Objects.equals(this.instancesRetrievable, googleCloudServicebrokerV1beta1Service.instancesRetrievable) &&
        Objects.equals(this.metadata, googleCloudServicebrokerV1beta1Service.metadata) &&
        Objects.equals(this.name, googleCloudServicebrokerV1beta1Service.name) &&
        Objects.equals(this.planUpdateable, googleCloudServicebrokerV1beta1Service.planUpdateable) &&
        Objects.equals(this.plans, googleCloudServicebrokerV1beta1Service.plans) &&
        Objects.equals(this.tags, googleCloudServicebrokerV1beta1Service.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bindable, bindingRetrievable, bindingsRetrievable, dashboardClient, description, id, instancesRetrievable, metadata, name, planUpdateable, plans, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudServicebrokerV1beta1Service {\n");
    sb.append("    bindable: ").append(toIndentedString(bindable)).append("\n");
    sb.append("    bindingRetrievable: ").append(toIndentedString(bindingRetrievable)).append("\n");
    sb.append("    bindingsRetrievable: ").append(toIndentedString(bindingsRetrievable)).append("\n");
    sb.append("    dashboardClient: ").append(toIndentedString(dashboardClient)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instancesRetrievable: ").append(toIndentedString(instancesRetrievable)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    planUpdateable: ").append(toIndentedString(planUpdateable)).append("\n");
    sb.append("    plans: ").append(toIndentedString(plans)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bindable");
    openapiFields.add("binding_retrievable");
    openapiFields.add("bindings_retrievable");
    openapiFields.add("dashboard_client");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("instances_retrievable");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("plan_updateable");
    openapiFields.add("plans");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudServicebrokerV1beta1Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudServicebrokerV1beta1Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudServicebrokerV1beta1Service is not found in the empty JSON string", GoogleCloudServicebrokerV1beta1Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudServicebrokerV1beta1Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudServicebrokerV1beta1Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dashboard_client`
      if (jsonObj.get("dashboard_client") != null && !jsonObj.get("dashboard_client").isJsonNull()) {
        GoogleCloudServicebrokerV1beta1DashboardClient.validateJsonElement(jsonObj.get("dashboard_client"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("plans") != null && !jsonObj.get("plans").isJsonNull()) {
        JsonArray jsonArrayplans = jsonObj.getAsJsonArray("plans");
        if (jsonArrayplans != null) {
          // ensure the json data is an array
          if (!jsonObj.get("plans").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `plans` to be an array in the JSON string but got `%s`", jsonObj.get("plans").toString()));
          }

          // validate the optional field `plans` (array)
          for (int i = 0; i < jsonArrayplans.size(); i++) {
            GoogleCloudServicebrokerV1beta1Plan.validateJsonElement(jsonArrayplans.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudServicebrokerV1beta1Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudServicebrokerV1beta1Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudServicebrokerV1beta1Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudServicebrokerV1beta1Service.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudServicebrokerV1beta1Service>() {
           @Override
           public void write(JsonWriter out, GoogleCloudServicebrokerV1beta1Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudServicebrokerV1beta1Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudServicebrokerV1beta1Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudServicebrokerV1beta1Service
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudServicebrokerV1beta1Service
   */
  public static GoogleCloudServicebrokerV1beta1Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudServicebrokerV1beta1Service.class);
  }

  /**
   * Convert an instance of GoogleCloudServicebrokerV1beta1Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

