# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudServicebrokerV1beta1Plan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bindable: bool=None, description: str=None, free: bool=None, id: str=None, metadata: Dict[str, object]=None, name: str=None, schemas: Dict[str, object]=None):
        """GoogleCloudServicebrokerV1beta1Plan - a model defined in OpenAPI

        :param bindable: The bindable of this GoogleCloudServicebrokerV1beta1Plan.
        :param description: The description of this GoogleCloudServicebrokerV1beta1Plan.
        :param free: The free of this GoogleCloudServicebrokerV1beta1Plan.
        :param id: The id of this GoogleCloudServicebrokerV1beta1Plan.
        :param metadata: The metadata of this GoogleCloudServicebrokerV1beta1Plan.
        :param name: The name of this GoogleCloudServicebrokerV1beta1Plan.
        :param schemas: The schemas of this GoogleCloudServicebrokerV1beta1Plan.
        """
        self.openapi_types = {
            'bindable': bool,
            'description': str,
            'free': bool,
            'id': str,
            'metadata': Dict[str, object],
            'name': str,
            'schemas': Dict[str, object]
        }

        self.attribute_map = {
            'bindable': 'bindable',
            'description': 'description',
            'free': 'free',
            'id': 'id',
            'metadata': 'metadata',
            'name': 'name',
            'schemas': 'schemas'
        }

        self._bindable = bindable
        self._description = description
        self._free = free
        self._id = id
        self._metadata = metadata
        self._name = name
        self._schemas = schemas

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudServicebrokerV1beta1Plan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudServicebrokerV1beta1__Plan of this GoogleCloudServicebrokerV1beta1Plan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bindable(self):
        """Gets the bindable of this GoogleCloudServicebrokerV1beta1Plan.

        Specifies whether instances of the service can be bound to applications. If not specified, `Service.bindable` will be presumed.

        :return: The bindable of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: bool
        """
        return self._bindable

    @bindable.setter
    def bindable(self, bindable):
        """Sets the bindable of this GoogleCloudServicebrokerV1beta1Plan.

        Specifies whether instances of the service can be bound to applications. If not specified, `Service.bindable` will be presumed.

        :param bindable: The bindable of this GoogleCloudServicebrokerV1beta1Plan.
        :type bindable: bool
        """

        self._bindable = bindable

    @property
    def description(self):
        """Gets the description of this GoogleCloudServicebrokerV1beta1Plan.

        Textual description of the plan. Optional.

        :return: The description of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GoogleCloudServicebrokerV1beta1Plan.

        Textual description of the plan. Optional.

        :param description: The description of this GoogleCloudServicebrokerV1beta1Plan.
        :type description: str
        """

        self._description = description

    @property
    def free(self):
        """Gets the free of this GoogleCloudServicebrokerV1beta1Plan.

        Whether the service is free.

        :return: The free of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: bool
        """
        return self._free

    @free.setter
    def free(self, free):
        """Sets the free of this GoogleCloudServicebrokerV1beta1Plan.

        Whether the service is free.

        :param free: The free of this GoogleCloudServicebrokerV1beta1Plan.
        :type free: bool
        """

        self._free = free

    @property
    def id(self):
        """Gets the id of this GoogleCloudServicebrokerV1beta1Plan.

        ID is a globally unique identifier used to uniquely identify the plan. User must make no presumption about the format of this field.

        :return: The id of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GoogleCloudServicebrokerV1beta1Plan.

        ID is a globally unique identifier used to uniquely identify the plan. User must make no presumption about the format of this field.

        :param id: The id of this GoogleCloudServicebrokerV1beta1Plan.
        :type id: str
        """

        self._id = id

    @property
    def metadata(self):
        """Gets the metadata of this GoogleCloudServicebrokerV1beta1Plan.

        A list of metadata for a service offering. Metadata is an arbitrary JSON object.

        :return: The metadata of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GoogleCloudServicebrokerV1beta1Plan.

        A list of metadata for a service offering. Metadata is an arbitrary JSON object.

        :param metadata: The metadata of this GoogleCloudServicebrokerV1beta1Plan.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this GoogleCloudServicebrokerV1beta1Plan.

        User friendly name of the plan. The name must be globally unique within GCP project. Note, which is different from (\"This must be globally unique within a platform marketplace\").

        :return: The name of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GoogleCloudServicebrokerV1beta1Plan.

        User friendly name of the plan. The name must be globally unique within GCP project. Note, which is different from (\"This must be globally unique within a platform marketplace\").

        :param name: The name of this GoogleCloudServicebrokerV1beta1Plan.
        :type name: str
        """

        self._name = name

    @property
    def schemas(self):
        """Gets the schemas of this GoogleCloudServicebrokerV1beta1Plan.

        Schema definitions for service instances and bindings for the plan.

        :return: The schemas of this GoogleCloudServicebrokerV1beta1Plan.
        :rtype: Dict[str, object]
        """
        return self._schemas

    @schemas.setter
    def schemas(self, schemas):
        """Sets the schemas of this GoogleCloudServicebrokerV1beta1Plan.

        Schema definitions for service instances and bindings for the plan.

        :param schemas: The schemas of this GoogleCloudServicebrokerV1beta1Plan.
        :type schemas: Dict[str, object]
        """

        self._schemas = schemas
