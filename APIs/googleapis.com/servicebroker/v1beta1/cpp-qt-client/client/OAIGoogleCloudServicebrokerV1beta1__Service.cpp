/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudServicebrokerV1beta1__Service.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudServicebrokerV1beta1__Service::OAIGoogleCloudServicebrokerV1beta1__Service(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudServicebrokerV1beta1__Service::OAIGoogleCloudServicebrokerV1beta1__Service() {
    this->initializeModel();
}

OAIGoogleCloudServicebrokerV1beta1__Service::~OAIGoogleCloudServicebrokerV1beta1__Service() {}

void OAIGoogleCloudServicebrokerV1beta1__Service::initializeModel() {

    m_bindable_isSet = false;
    m_bindable_isValid = false;

    m_binding_retrievable_isSet = false;
    m_binding_retrievable_isValid = false;

    m_bindings_retrievable_isSet = false;
    m_bindings_retrievable_isValid = false;

    m_dashboard_client_isSet = false;
    m_dashboard_client_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instances_retrievable_isSet = false;
    m_instances_retrievable_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_plan_updateable_isSet = false;
    m_plan_updateable_isValid = false;

    m_plans_isSet = false;
    m_plans_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIGoogleCloudServicebrokerV1beta1__Service::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudServicebrokerV1beta1__Service::fromJsonObject(QJsonObject json) {

    m_bindable_isValid = ::OpenAPI::fromJsonValue(m_bindable, json[QString("bindable")]);
    m_bindable_isSet = !json[QString("bindable")].isNull() && m_bindable_isValid;

    m_binding_retrievable_isValid = ::OpenAPI::fromJsonValue(m_binding_retrievable, json[QString("binding_retrievable")]);
    m_binding_retrievable_isSet = !json[QString("binding_retrievable")].isNull() && m_binding_retrievable_isValid;

    m_bindings_retrievable_isValid = ::OpenAPI::fromJsonValue(m_bindings_retrievable, json[QString("bindings_retrievable")]);
    m_bindings_retrievable_isSet = !json[QString("bindings_retrievable")].isNull() && m_bindings_retrievable_isValid;

    m_dashboard_client_isValid = ::OpenAPI::fromJsonValue(m_dashboard_client, json[QString("dashboard_client")]);
    m_dashboard_client_isSet = !json[QString("dashboard_client")].isNull() && m_dashboard_client_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instances_retrievable_isValid = ::OpenAPI::fromJsonValue(m_instances_retrievable, json[QString("instances_retrievable")]);
    m_instances_retrievable_isSet = !json[QString("instances_retrievable")].isNull() && m_instances_retrievable_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_plan_updateable_isValid = ::OpenAPI::fromJsonValue(m_plan_updateable, json[QString("plan_updateable")]);
    m_plan_updateable_isSet = !json[QString("plan_updateable")].isNull() && m_plan_updateable_isValid;

    m_plans_isValid = ::OpenAPI::fromJsonValue(m_plans, json[QString("plans")]);
    m_plans_isSet = !json[QString("plans")].isNull() && m_plans_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIGoogleCloudServicebrokerV1beta1__Service::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudServicebrokerV1beta1__Service::asJsonObject() const {
    QJsonObject obj;
    if (m_bindable_isSet) {
        obj.insert(QString("bindable"), ::OpenAPI::toJsonValue(m_bindable));
    }
    if (m_binding_retrievable_isSet) {
        obj.insert(QString("binding_retrievable"), ::OpenAPI::toJsonValue(m_binding_retrievable));
    }
    if (m_bindings_retrievable_isSet) {
        obj.insert(QString("bindings_retrievable"), ::OpenAPI::toJsonValue(m_bindings_retrievable));
    }
    if (m_dashboard_client.isSet()) {
        obj.insert(QString("dashboard_client"), ::OpenAPI::toJsonValue(m_dashboard_client));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instances_retrievable_isSet) {
        obj.insert(QString("instances_retrievable"), ::OpenAPI::toJsonValue(m_instances_retrievable));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_plan_updateable_isSet) {
        obj.insert(QString("plan_updateable"), ::OpenAPI::toJsonValue(m_plan_updateable));
    }
    if (m_plans.size() > 0) {
        obj.insert(QString("plans"), ::OpenAPI::toJsonValue(m_plans));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isBindable() const {
    return m_bindable;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setBindable(const bool &bindable) {
    m_bindable = bindable;
    m_bindable_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_bindable_Set() const{
    return m_bindable_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_bindable_Valid() const{
    return m_bindable_isValid;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isBindingRetrievable() const {
    return m_binding_retrievable;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setBindingRetrievable(const bool &binding_retrievable) {
    m_binding_retrievable = binding_retrievable;
    m_binding_retrievable_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_binding_retrievable_Set() const{
    return m_binding_retrievable_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_binding_retrievable_Valid() const{
    return m_binding_retrievable_isValid;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isBindingsRetrievable() const {
    return m_bindings_retrievable;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setBindingsRetrievable(const bool &bindings_retrievable) {
    m_bindings_retrievable = bindings_retrievable;
    m_bindings_retrievable_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_bindings_retrievable_Set() const{
    return m_bindings_retrievable_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_bindings_retrievable_Valid() const{
    return m_bindings_retrievable_isValid;
}

OAIGoogleCloudServicebrokerV1beta1__DashboardClient OAIGoogleCloudServicebrokerV1beta1__Service::getDashboardClient() const {
    return m_dashboard_client;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setDashboardClient(const OAIGoogleCloudServicebrokerV1beta1__DashboardClient &dashboard_client) {
    m_dashboard_client = dashboard_client;
    m_dashboard_client_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_dashboard_client_Set() const{
    return m_dashboard_client_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_dashboard_client_Valid() const{
    return m_dashboard_client_isValid;
}

QString OAIGoogleCloudServicebrokerV1beta1__Service::getDescription() const {
    return m_description;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudServicebrokerV1beta1__Service::getId() const {
    return m_id;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isInstancesRetrievable() const {
    return m_instances_retrievable;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setInstancesRetrievable(const bool &instances_retrievable) {
    m_instances_retrievable = instances_retrievable;
    m_instances_retrievable_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_instances_retrievable_Set() const{
    return m_instances_retrievable_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_instances_retrievable_Valid() const{
    return m_instances_retrievable_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudServicebrokerV1beta1__Service::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGoogleCloudServicebrokerV1beta1__Service::getName() const {
    return m_name;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isPlanUpdateable() const {
    return m_plan_updateable;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setPlanUpdateable(const bool &plan_updateable) {
    m_plan_updateable = plan_updateable;
    m_plan_updateable_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_plan_updateable_Set() const{
    return m_plan_updateable_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_plan_updateable_Valid() const{
    return m_plan_updateable_isValid;
}

QList<OAIGoogleCloudServicebrokerV1beta1__Plan> OAIGoogleCloudServicebrokerV1beta1__Service::getPlans() const {
    return m_plans;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setPlans(const QList<OAIGoogleCloudServicebrokerV1beta1__Plan> &plans) {
    m_plans = plans;
    m_plans_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_plans_Set() const{
    return m_plans_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_plans_Valid() const{
    return m_plans_isValid;
}

QList<QString> OAIGoogleCloudServicebrokerV1beta1__Service::getTags() const {
    return m_tags;
}
void OAIGoogleCloudServicebrokerV1beta1__Service::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bindable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_binding_retrievable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bindings_retrievable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dashboard_client.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instances_retrievable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_updateable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plans.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudServicebrokerV1beta1__Service::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
