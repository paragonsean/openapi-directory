/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectsApi_H
#define OAI_OAIProjectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudServicebrokerV1alpha1__Binding.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__CreateBindingResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__CreateServiceInstanceResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__DeleteServiceInstanceResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__GetBindingResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__ListBindingsResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__ListCatalogResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__ListServiceInstancesResponse.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__Operation.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance.h"
#include "OAIGoogleCloudServicebrokerV1alpha1__UpdateServiceInstanceResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectsApi : public QObject {
    Q_OBJECT

public:
    OAIProjectsApi(const int timeOut = 0);
    ~OAIProjectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicebroker_projects_brokers_instances_serviceBindings_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicebroker_projects_brokers_serviceInstances_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void servicebroker_projects_brokers_v2_catalog_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  accepts_incomplete bool [optional]
    * @param[in]  oai_google_cloud_servicebroker_v1alpha1__service_instance OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_create(const QString &parent, const QString &instance_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &accepts_incomplete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance> &oai_google_cloud_servicebroker_v1alpha1__service_instance = ::OpenAPI::OptionalParam<OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  accepts_incomplete bool [optional]
    * @param[in]  plan_id QString [optional]
    * @param[in]  service_id QString [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_delete(const QString &parent, const QString &instance_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &accepts_incomplete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_get(const QString &name, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  operation QString [optional]
    * @param[in]  plan_id QString [optional]
    * @param[in]  service_id QString [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_getLastOperation(const QString &parent, const QString &instance_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &operation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  accepts_incomplete bool [optional]
    * @param[in]  oai_google_cloud_servicebroker_v1alpha1__service_instance OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_patch(const QString &parent, const QString &instance_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &accepts_incomplete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance> &oai_google_cloud_servicebroker_v1alpha1__service_instance = ::OpenAPI::OptionalParam<OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  binding_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  accepts_incomplete bool [optional]
    * @param[in]  oai_google_cloud_servicebroker_v1alpha1__binding OAIGoogleCloudServicebrokerV1alpha1__Binding [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_create(const QString &parent, const QString &instance_id, const QString &binding_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &accepts_incomplete = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudServicebrokerV1alpha1__Binding> &oai_google_cloud_servicebroker_v1alpha1__binding = ::OpenAPI::OptionalParam<OAIGoogleCloudServicebrokerV1alpha1__Binding>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  binding_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  plan_id QString [optional]
    * @param[in]  service_id QString [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_get(const QString &parent, const QString &instance_id, const QString &binding_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  instance_id QString [required]
    * @param[in]  binding_id QString [required]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  operation QString [optional]
    * @param[in]  plan_id QString [optional]
    * @param[in]  service_id QString [optional]
    */
    virtual void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperation(const QString &parent, const QString &instance_id, const QString &binding_id, const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &operation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &plan_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void servicebroker_projects_brokers_instances_serviceBindings_listCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_serviceInstances_listCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_catalog_listCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_createCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_deleteCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_getCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_patchCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getCallback(OAIHttpRequestWorker *worker);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void servicebroker_projects_brokers_instances_serviceBindings_listSignal(OAIGoogleCloudServicebrokerV1alpha1__ListBindingsResponse summary);
    void servicebroker_projects_brokers_serviceInstances_listSignal(OAIGoogleCloudServicebrokerV1alpha1__ListServiceInstancesResponse summary);
    void servicebroker_projects_brokers_v2_catalog_listSignal(OAIGoogleCloudServicebrokerV1alpha1__ListCatalogResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_createSignal(OAIGoogleCloudServicebrokerV1alpha1__CreateServiceInstanceResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_deleteSignal(OAIGoogleCloudServicebrokerV1alpha1__DeleteServiceInstanceResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_getSignal(OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance summary);
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignal(OAIGoogleCloudServicebrokerV1alpha1__Operation summary);
    void servicebroker_projects_brokers_v2_serviceInstances_patchSignal(OAIGoogleCloudServicebrokerV1alpha1__UpdateServiceInstanceResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignal(OAIGoogleCloudServicebrokerV1alpha1__CreateBindingResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignal(OAIGoogleCloudServicebrokerV1alpha1__GetBindingResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignal(OAIGoogleCloudServicebrokerV1alpha1__Operation summary);


    void servicebroker_projects_brokers_instances_serviceBindings_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__ListBindingsResponse summary);
    void servicebroker_projects_brokers_serviceInstances_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__ListServiceInstancesResponse summary);
    void servicebroker_projects_brokers_v2_catalog_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__ListCatalogResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__CreateServiceInstanceResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_deleteSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__DeleteServiceInstanceResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance summary);
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__Operation summary);
    void servicebroker_projects_brokers_v2_serviceInstances_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__UpdateServiceInstanceResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__CreateBindingResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__GetBindingResponse summary);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudServicebrokerV1alpha1__Operation summary);

    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_instances_serviceBindings_listSignalError() instead")
    void servicebroker_projects_brokers_instances_serviceBindings_listSignalE(OAIGoogleCloudServicebrokerV1alpha1__ListBindingsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_instances_serviceBindings_listSignalError(OAIGoogleCloudServicebrokerV1alpha1__ListBindingsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_serviceInstances_listSignalError() instead")
    void servicebroker_projects_brokers_serviceInstances_listSignalE(OAIGoogleCloudServicebrokerV1alpha1__ListServiceInstancesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_serviceInstances_listSignalError(OAIGoogleCloudServicebrokerV1alpha1__ListServiceInstancesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_catalog_listSignalError() instead")
    void servicebroker_projects_brokers_v2_catalog_listSignalE(OAIGoogleCloudServicebrokerV1alpha1__ListCatalogResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_catalog_listSignalError(OAIGoogleCloudServicebrokerV1alpha1__ListCatalogResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_createSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_createSignalE(OAIGoogleCloudServicebrokerV1alpha1__CreateServiceInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_createSignalError(OAIGoogleCloudServicebrokerV1alpha1__CreateServiceInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_deleteSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_deleteSignalE(OAIGoogleCloudServicebrokerV1alpha1__DeleteServiceInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_deleteSignalError(OAIGoogleCloudServicebrokerV1alpha1__DeleteServiceInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_getSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_getSignalE(OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_getSignalError(OAIGoogleCloudServicebrokerV1alpha1__ServiceInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalE(OAIGoogleCloudServicebrokerV1alpha1__Operation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalError(OAIGoogleCloudServicebrokerV1alpha1__Operation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_patchSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_patchSignalE(OAIGoogleCloudServicebrokerV1alpha1__UpdateServiceInstanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_patchSignalError(OAIGoogleCloudServicebrokerV1alpha1__UpdateServiceInstanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalE(OAIGoogleCloudServicebrokerV1alpha1__CreateBindingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalError(OAIGoogleCloudServicebrokerV1alpha1__CreateBindingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalE(OAIGoogleCloudServicebrokerV1alpha1__GetBindingResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalError(OAIGoogleCloudServicebrokerV1alpha1__GetBindingResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalError() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalE(OAIGoogleCloudServicebrokerV1alpha1__Operation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalError(OAIGoogleCloudServicebrokerV1alpha1__Operation summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_instances_serviceBindings_listSignalErrorFull() instead")
    void servicebroker_projects_brokers_instances_serviceBindings_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_instances_serviceBindings_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_serviceInstances_listSignalErrorFull() instead")
    void servicebroker_projects_brokers_serviceInstances_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_serviceInstances_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_catalog_listSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_catalog_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_catalog_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_createSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_deleteSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_getSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_getLastOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_patchSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalErrorFull() instead")
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicebroker_projects_brokers_v2_serviceInstances_serviceBindings_getLastOperationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
