/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudServicebrokerV1alpha1__Plan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudServicebrokerV1alpha1__Plan::OAIGoogleCloudServicebrokerV1alpha1__Plan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudServicebrokerV1alpha1__Plan::OAIGoogleCloudServicebrokerV1alpha1__Plan() {
    this->initializeModel();
}

OAIGoogleCloudServicebrokerV1alpha1__Plan::~OAIGoogleCloudServicebrokerV1alpha1__Plan() {}

void OAIGoogleCloudServicebrokerV1alpha1__Plan::initializeModel() {

    m_bindable_isSet = false;
    m_bindable_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_free_isSet = false;
    m_free_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_schemas_isSet = false;
    m_schemas_isValid = false;
}

void OAIGoogleCloudServicebrokerV1alpha1__Plan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudServicebrokerV1alpha1__Plan::fromJsonObject(QJsonObject json) {

    m_bindable_isValid = ::OpenAPI::fromJsonValue(m_bindable, json[QString("bindable")]);
    m_bindable_isSet = !json[QString("bindable")].isNull() && m_bindable_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_free_isValid = ::OpenAPI::fromJsonValue(m_free, json[QString("free")]);
    m_free_isSet = !json[QString("free")].isNull() && m_free_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_schemas_isValid = ::OpenAPI::fromJsonValue(m_schemas, json[QString("schemas")]);
    m_schemas_isSet = !json[QString("schemas")].isNull() && m_schemas_isValid;
}

QString OAIGoogleCloudServicebrokerV1alpha1__Plan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudServicebrokerV1alpha1__Plan::asJsonObject() const {
    QJsonObject obj;
    if (m_bindable_isSet) {
        obj.insert(QString("bindable"), ::OpenAPI::toJsonValue(m_bindable));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_free_isSet) {
        obj.insert(QString("free"), ::OpenAPI::toJsonValue(m_free));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_schemas.size() > 0) {
        obj.insert(QString("schemas"), ::OpenAPI::toJsonValue(m_schemas));
    }
    return obj;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::isBindable() const {
    return m_bindable;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setBindable(const bool &bindable) {
    m_bindable = bindable;
    m_bindable_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_bindable_Set() const{
    return m_bindable_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_bindable_Valid() const{
    return m_bindable_isValid;
}

QString OAIGoogleCloudServicebrokerV1alpha1__Plan::getDescription() const {
    return m_description;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::isFree() const {
    return m_free;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setFree(const bool &free) {
    m_free = free;
    m_free_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_free_Set() const{
    return m_free_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_free_Valid() const{
    return m_free_isValid;
}

QString OAIGoogleCloudServicebrokerV1alpha1__Plan::getId() const {
    return m_id;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudServicebrokerV1alpha1__Plan::getMetadata() const {
    return m_metadata;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setMetadata(const QMap<QString, QJsonValue> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIGoogleCloudServicebrokerV1alpha1__Plan::getName() const {
    return m_name;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QJsonValue> OAIGoogleCloudServicebrokerV1alpha1__Plan::getSchemas() const {
    return m_schemas;
}
void OAIGoogleCloudServicebrokerV1alpha1__Plan::setSchemas(const QMap<QString, QJsonValue> &schemas) {
    m_schemas = schemas;
    m_schemas_isSet = true;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_schemas_Set() const{
    return m_schemas_isSet;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::is_schemas_Valid() const{
    return m_schemas_isValid;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bindable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_free_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schemas.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudServicebrokerV1alpha1__Plan::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
