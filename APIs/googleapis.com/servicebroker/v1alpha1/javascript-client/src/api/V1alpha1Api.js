/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GoogleIamV1Policy from '../model/GoogleIamV1Policy';
import GoogleIamV1SetIamPolicyRequest from '../model/GoogleIamV1SetIamPolicyRequest';
import GoogleIamV1TestIamPermissionsRequest from '../model/GoogleIamV1TestIamPermissionsRequest';
import GoogleIamV1TestIamPermissionsResponse from '../model/GoogleIamV1TestIamPermissionsResponse';

/**
* V1alpha1 service.
* @module api/V1alpha1Api
* @version v1alpha1
*/
export default class V1alpha1Api {

    /**
    * Constructs a new V1alpha1Api. 
    * @alias module:api/V1alpha1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the servicebrokerGetIamPolicy operation.
     * @callback module:api/V1alpha1Api~servicebrokerGetIamPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleIamV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     * @param {String} resource REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field.
     * @param {Object} opts Optional parameters
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [callback] JSONP
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {module:model/String} [alt = 'json')] Data format for response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [accessToken] OAuth access token.
     * @param {Number} [optionsRequestedPolicyVersion] Optional. The policy format version to be returned.  Valid values are 0, 1, and 3. Requests specifying an invalid value will be rejected.  Requests for policies with any conditional bindings must specify version 3. Policies without any conditional bindings may specify any valid value or leave the field unset.
     * @param {module:api/V1alpha1Api~servicebrokerGetIamPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleIamV1Policy}
     */
    servicebrokerGetIamPolicy(resource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling servicebrokerGetIamPolicy");
      }

      let pathParams = {
        'resource': resource
      };
      let queryParams = {
        'upload_protocol': opts['uploadProtocol'],
        'quotaUser': opts['quotaUser'],
        'prettyPrint': opts['prettyPrint'],
        'uploadType': opts['uploadType'],
        'fields': opts['fields'],
        'callback': opts['callback'],
        'oauth_token': opts['oauthToken'],
        '$.xgafv': opts['xgafv'],
        'alt': opts['alt'],
        'key': opts['key'],
        'access_token': opts['accessToken'],
        'options.requestedPolicyVersion': opts['optionsRequestedPolicyVersion']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = GoogleIamV1Policy;
      return this.apiClient.callApi(
        '/v1alpha1/{resource}:getIamPolicy', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicebrokerSetIamPolicy operation.
     * @callback module:api/V1alpha1Api~servicebrokerSetIamPolicyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleIamV1Policy} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy.  Can return Public Errors: NOT_FOUND, INVALID_ARGUMENT and PERMISSION_DENIED
     * @param {String} resource REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field.
     * @param {Object} opts Optional parameters
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [callback] JSONP
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {module:model/String} [alt = 'json')] Data format for response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/GoogleIamV1SetIamPolicyRequest} [googleIamV1SetIamPolicyRequest] 
     * @param {module:api/V1alpha1Api~servicebrokerSetIamPolicyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleIamV1Policy}
     */
    servicebrokerSetIamPolicy(resource, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleIamV1SetIamPolicyRequest'];
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling servicebrokerSetIamPolicy");
      }

      let pathParams = {
        'resource': resource
      };
      let queryParams = {
        'upload_protocol': opts['uploadProtocol'],
        'quotaUser': opts['quotaUser'],
        'prettyPrint': opts['prettyPrint'],
        'uploadType': opts['uploadType'],
        'fields': opts['fields'],
        'callback': opts['callback'],
        'oauth_token': opts['oauthToken'],
        '$.xgafv': opts['xgafv'],
        'alt': opts['alt'],
        'key': opts['key'],
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = GoogleIamV1Policy;
      return this.apiClient.callApi(
        '/v1alpha1/{resource}:setIamPolicy', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicebrokerTestIamPermissions operation.
     * @callback module:api/V1alpha1Api~servicebrokerTestIamPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GoogleIamV1TestIamPermissionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.
     * @param {String} resource REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field.
     * @param {Object} opts Optional parameters
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {Boolean} [prettyPrint = true)] Returns response with indentations and line breaks.
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [callback] JSONP
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {module:model/String} [alt = 'json')] Data format for response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/GoogleIamV1TestIamPermissionsRequest} [googleIamV1TestIamPermissionsRequest] 
     * @param {module:api/V1alpha1Api~servicebrokerTestIamPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GoogleIamV1TestIamPermissionsResponse}
     */
    servicebrokerTestIamPermissions(resource, opts, callback) {
      opts = opts || {};
      let postBody = opts['googleIamV1TestIamPermissionsRequest'];
      // verify the required parameter 'resource' is set
      if (resource === undefined || resource === null) {
        throw new Error("Missing the required parameter 'resource' when calling servicebrokerTestIamPermissions");
      }

      let pathParams = {
        'resource': resource
      };
      let queryParams = {
        'upload_protocol': opts['uploadProtocol'],
        'quotaUser': opts['quotaUser'],
        'prettyPrint': opts['prettyPrint'],
        'uploadType': opts['uploadType'],
        'fields': opts['fields'],
        'callback': opts['callback'],
        'oauth_token': opts['oauthToken'],
        '$.xgafv': opts['xgafv'],
        'alt': opts['alt'],
        'key': opts['key'],
        'access_token': opts['accessToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = GoogleIamV1TestIamPermissionsResponse;
      return this.apiClient.callApi(
        '/v1alpha1/{resource}:testIamPermissions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
