/**
 * Service Broker
 * The Google Cloud Platform Service Broker API provides Google hosted implementation of the Open Service Broker API (https://www.openservicebrokerapi.org/). 
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleCloudServicebrokerV1alpha1DashboardClient from './GoogleCloudServicebrokerV1alpha1DashboardClient';
import GoogleCloudServicebrokerV1alpha1Plan from './GoogleCloudServicebrokerV1alpha1Plan';

/**
 * The GoogleCloudServicebrokerV1alpha1Service model module.
 * @module model/GoogleCloudServicebrokerV1alpha1Service
 * @version v1alpha1
 */
class GoogleCloudServicebrokerV1alpha1Service {
    /**
     * Constructs a new <code>GoogleCloudServicebrokerV1alpha1Service</code>.
     * The resource model mostly follows the Open Service Broker API, as described here: https://github.com/openservicebrokerapi/servicebroker/blob/master/_spec.md Though due to Google Specifics it has additional optional fields.
     * @alias module:model/GoogleCloudServicebrokerV1alpha1Service
     */
    constructor() { 
        
        GoogleCloudServicebrokerV1alpha1Service.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudServicebrokerV1alpha1Service</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudServicebrokerV1alpha1Service} obj Optional instance to populate.
     * @return {module:model/GoogleCloudServicebrokerV1alpha1Service} The populated <code>GoogleCloudServicebrokerV1alpha1Service</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudServicebrokerV1alpha1Service();

            if (data.hasOwnProperty('bindable')) {
                obj['bindable'] = ApiClient.convertToType(data['bindable'], 'Boolean');
            }
            if (data.hasOwnProperty('binding_retrievable')) {
                obj['binding_retrievable'] = ApiClient.convertToType(data['binding_retrievable'], 'Boolean');
            }
            if (data.hasOwnProperty('dashboard_client')) {
                obj['dashboard_client'] = GoogleCloudServicebrokerV1alpha1DashboardClient.constructFromObject(data['dashboard_client']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instance_retrievable')) {
                obj['instance_retrievable'] = ApiClient.convertToType(data['instance_retrievable'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('plan_updateable')) {
                obj['plan_updateable'] = ApiClient.convertToType(data['plan_updateable'], 'Boolean');
            }
            if (data.hasOwnProperty('plans')) {
                obj['plans'] = ApiClient.convertToType(data['plans'], [GoogleCloudServicebrokerV1alpha1Plan]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudServicebrokerV1alpha1Service</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudServicebrokerV1alpha1Service</code>.
     */
    static validateJSON(data) {
        // validate the optional field `dashboard_client`
        if (data['dashboard_client']) { // data not null
          GoogleCloudServicebrokerV1alpha1DashboardClient.validateJSON(data['dashboard_client']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['plans']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['plans'])) {
                throw new Error("Expected the field `plans` to be an array in the JSON data but got " + data['plans']);
            }
            // validate the optional field `plans` (array)
            for (const item of data['plans']) {
                GoogleCloudServicebrokerV1alpha1Plan.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * Specifies whether instances of the service can be bound to applications. Required.
 * @member {Boolean} bindable
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['bindable'] = undefined;

/**
 * Whether the service provides an endpoint to get service bindings.
 * @member {Boolean} binding_retrievable
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['binding_retrievable'] = undefined;

/**
 * @member {module:model/GoogleCloudServicebrokerV1alpha1DashboardClient} dashboard_client
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['dashboard_client'] = undefined;

/**
 * Textual description of the service. Required.
 * @member {String} description
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['description'] = undefined;

/**
 * ID is a globally unique identifier used to uniquely identify the service. ID is an opaque string.
 * @member {String} id
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['id'] = undefined;

/**
 * Whether the service provides an endpoint to get service instances.
 * @member {Boolean} instance_retrievable
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['instance_retrievable'] = undefined;

/**
 * A list of metadata for a service offering. Metadata is an arbitrary JSON object.
 * @member {Object.<String, Object>} metadata
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['metadata'] = undefined;

/**
 * User friendly service name. Name must match [a-z0-9]+ regexp. The name must be globally unique within GCP project. Note, which is different from (\"This must be globally unique within a platform marketplace\"). Required.
 * @member {String} name
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['name'] = undefined;

/**
 * Whether the service supports upgrade/downgrade for some plans.
 * @member {Boolean} plan_updateable
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['plan_updateable'] = undefined;

/**
 * A list of plans for this service. At least one plan is required.
 * @member {Array.<module:model/GoogleCloudServicebrokerV1alpha1Plan>} plans
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['plans'] = undefined;

/**
 * Tags provide a flexible mechanism to expose a classification, attribute, or base technology of a service.
 * @member {Array.<String>} tags
 */
GoogleCloudServicebrokerV1alpha1Service.prototype['tags'] = undefined;






export default GoogleCloudServicebrokerV1alpha1Service;

