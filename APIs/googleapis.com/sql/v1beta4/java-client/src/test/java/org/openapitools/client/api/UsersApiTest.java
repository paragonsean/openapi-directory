/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.User;
import org.openapitools.client.model.UsersListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Deletes a user from a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlUsersDeleteTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String host = null;
        String name = null;
        Operation response = api.sqlUsersDelete(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, host, name);
        // TODO: test validations
    }

    /**
     * Retrieves a resource containing information about a user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlUsersGetTest() throws ApiException {
        String project = null;
        String instance = null;
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String host = null;
        User response = api.sqlUsersGet(project, instance, name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, host);
        // TODO: test validations
    }

    /**
     * Creates a new user in a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlUsersInsertTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        User user = null;
        Operation response = api.sqlUsersInsert(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, user);
        // TODO: test validations
    }

    /**
     * Lists users in the specified Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlUsersListTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UsersListResponse response = api.sqlUsersList(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Updates an existing user in a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlUsersUpdateTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String host = null;
        String name = null;
        User user = null;
        Operation response = api.sqlUsersUpdate(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, host, name, user);
        // TODO: test validations
    }

}
