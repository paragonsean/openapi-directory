/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Database;
import org.openapitools.client.model.DatabasesListResponse;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DatabasesApi
 */
@Disabled
public class DatabasesApiTest {

    private final DatabasesApi api = new DatabasesApi();

    /**
     * Deletes a database from a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlDatabasesDeleteTest() throws ApiException {
        String project = null;
        String instance = null;
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlDatabasesDelete(project, instance, database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a resource containing information about a database inside a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlDatabasesGetTest() throws ApiException {
        String project = null;
        String instance = null;
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Database response = api.sqlDatabasesGet(project, instance, database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Inserts a resource containing information about a database inside a Cloud SQL instance. **Note:** You can&#39;t modify the default character set and collation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlDatabasesInsertTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Database database = null;
        Operation response = api.sqlDatabasesInsert(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, database);
        // TODO: test validations
    }

    /**
     * Lists databases in the specified Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlDatabasesListTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatabasesListResponse response = api.sqlDatabasesList(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Partially updates a resource containing information about a database inside a Cloud SQL instance. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlDatabasesPatchTest() throws ApiException {
        String project = null;
        String instance = null;
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Database database2 = null;
        Operation response = api.sqlDatabasesPatch(project, instance, database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, database2);
        // TODO: test validations
    }

    /**
     * Updates a resource containing information about a database inside a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlDatabasesUpdateTest() throws ApiException {
        String project = null;
        String instance = null;
        String database = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Database database2 = null;
        Operation response = api.sqlDatabasesUpdate(project, instance, database, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, database2);
        // TODO: test validations
    }

}
