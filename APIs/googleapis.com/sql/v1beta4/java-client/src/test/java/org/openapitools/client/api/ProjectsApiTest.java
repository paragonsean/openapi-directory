/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PerformDiskShrinkContext;
import org.openapitools.client.model.SqlInstancesGetDiskShrinkConfigResponse;
import org.openapitools.client.model.SqlInstancesGetLatestRecoveryTimeResponse;
import org.openapitools.client.model.SqlInstancesRescheduleMaintenanceRequestBody;
import org.openapitools.client.model.SqlInstancesStartExternalSyncRequest;
import org.openapitools.client.model.SqlInstancesVerifyExternalSyncSettingsRequest;
import org.openapitools.client.model.SqlInstancesVerifyExternalSyncSettingsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Get Disk Shrink Config for a given instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesGetDiskShrinkConfigTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SqlInstancesGetDiskShrinkConfigResponse response = api.sqlProjectsInstancesGetDiskShrinkConfig(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get Latest Recovery Time for a given instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesGetLatestRecoveryTimeTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SqlInstancesGetLatestRecoveryTimeResponse response = api.sqlProjectsInstancesGetLatestRecoveryTime(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Perform Disk Shrink on primary instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesPerformDiskShrinkTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PerformDiskShrinkContext performDiskShrinkContext = null;
        Operation response = api.sqlProjectsInstancesPerformDiskShrink(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, performDiskShrinkContext);
        // TODO: test validations
    }

    /**
     * Reschedules the maintenance on the given instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesRescheduleMaintenanceTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SqlInstancesRescheduleMaintenanceRequestBody sqlInstancesRescheduleMaintenanceRequestBody = null;
        Operation response = api.sqlProjectsInstancesRescheduleMaintenance(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sqlInstancesRescheduleMaintenanceRequestBody);
        // TODO: test validations
    }

    /**
     * Reset Replica Size to primary instance disk size.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesResetReplicaSizeTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.sqlProjectsInstancesResetReplicaSize(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Start External primary instance migration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesStartExternalSyncTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SqlInstancesStartExternalSyncRequest sqlInstancesStartExternalSyncRequest = null;
        Operation response = api.sqlProjectsInstancesStartExternalSync(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sqlInstancesStartExternalSyncRequest);
        // TODO: test validations
    }

    /**
     * Verify External primary instance external sync settings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlProjectsInstancesVerifyExternalSyncSettingsTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SqlInstancesVerifyExternalSyncSettingsRequest sqlInstancesVerifyExternalSyncSettingsRequest = null;
        SqlInstancesVerifyExternalSyncSettingsResponse response = api.sqlProjectsInstancesVerifyExternalSyncSettings(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sqlInstancesVerifyExternalSyncSettingsRequest);
        // TODO: test validations
    }

}
