/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BackupRun;
import org.openapitools.client.model.BackupRunsListResponse;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BackupRunsApi
 */
@Disabled
public class BackupRunsApiTest {

    private final BackupRunsApi api = new BackupRunsApi();

    /**
     * Deletes the backup taken by a backup run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlBackupRunsDeleteTest() throws ApiException {
        String project = null;
        String instance = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlBackupRunsDelete(project, instance, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a resource containing information about a backup run.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlBackupRunsGetTest() throws ApiException {
        String project = null;
        String instance = null;
        String id = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BackupRun response = api.sqlBackupRunsGet(project, instance, id, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a new backup run on demand.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlBackupRunsInsertTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BackupRun backupRun = null;
        Operation response = api.sqlBackupRunsInsert(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, backupRun);
        // TODO: test validations
    }

    /**
     * Lists all backup runs associated with the project or a given instance and configuration in the reverse chronological order of the backup initiation time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlBackupRunsListTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer maxResults = null;
        String pageToken = null;
        BackupRunsListResponse response = api.sqlBackupRunsList(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, maxResults, pageToken);
        // TODO: test validations
    }

}
