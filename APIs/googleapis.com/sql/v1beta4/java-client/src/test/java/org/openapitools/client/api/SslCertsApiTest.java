/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.SslCert;
import org.openapitools.client.model.SslCertsCreateEphemeralRequest;
import org.openapitools.client.model.SslCertsInsertRequest;
import org.openapitools.client.model.SslCertsInsertResponse;
import org.openapitools.client.model.SslCertsListResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SslCertsApi
 */
@Disabled
public class SslCertsApiTest {

    private final SslCertsApi api = new SslCertsApi();

    /**
     * Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlSslCertsCreateEphemeralTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SslCertsCreateEphemeralRequest sslCertsCreateEphemeralRequest = null;
        SslCert response = api.sqlSslCertsCreateEphemeral(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sslCertsCreateEphemeralRequest);
        // TODO: test validations
    }

    /**
     * Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlSslCertsDeleteTest() throws ApiException {
        String project = null;
        String instance = null;
        String sha1Fingerprint = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlSslCertsDelete(project, instance, sha1Fingerprint, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlSslCertsGetTest() throws ApiException {
        String project = null;
        String instance = null;
        String sha1Fingerprint = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SslCert response = api.sqlSslCertsGet(project, instance, sha1Fingerprint, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlSslCertsInsertTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SslCertsInsertRequest sslCertsInsertRequest = null;
        SslCertsInsertResponse response = api.sqlSslCertsInsert(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, sslCertsInsertRequest);
        // TODO: test validations
    }

    /**
     * Lists all of the current SSL certificates for the instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlSslCertsListTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SslCertsListResponse response = api.sqlSslCertsList(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
