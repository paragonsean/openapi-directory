/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DatabaseInstance;
import org.openapitools.client.model.InstancesCloneRequest;
import org.openapitools.client.model.InstancesDemoteMasterRequest;
import org.openapitools.client.model.InstancesDemoteRequest;
import org.openapitools.client.model.InstancesExportRequest;
import org.openapitools.client.model.InstancesFailoverRequest;
import org.openapitools.client.model.InstancesImportRequest;
import org.openapitools.client.model.InstancesListResponse;
import org.openapitools.client.model.InstancesListServerCasResponse;
import org.openapitools.client.model.InstancesReencryptRequest;
import org.openapitools.client.model.InstancesRestoreBackupRequest;
import org.openapitools.client.model.InstancesRotateServerCaRequest;
import org.openapitools.client.model.InstancesTruncateLogRequest;
import org.openapitools.client.model.Operation;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InstancesApi
 */
@Disabled
public class InstancesApiTest {

    private final InstancesApi api = new InstancesApi();

    /**
     * Add a new trusted Certificate Authority (CA) version for the specified instance. Required to prepare for a certificate rotation. If a CA version was previously added but never used in a certificate rotation, this operation replaces that version. There cannot be more than one CA version waiting to be rotated in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesAddServerCaTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlInstancesAddServerCa(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Creates a Cloud SQL instance as a clone of the source instance. Using this operation might cause your instance to restart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesCloneTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesCloneRequest instancesCloneRequest = null;
        Operation response = api.sqlInstancesClone(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesCloneRequest);
        // TODO: test validations
    }

    /**
     * Deletes a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesDeleteTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlInstancesDelete(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Demotes an existing standalone instance to be a Cloud SQL read replica for an external database server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesDemoteTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesDemoteRequest instancesDemoteRequest = null;
        Operation response = api.sqlInstancesDemote(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesDemoteRequest);
        // TODO: test validations
    }

    /**
     * Demotes the stand-alone instance to be a Cloud SQL read replica for an external database server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesDemoteMasterTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesDemoteMasterRequest instancesDemoteMasterRequest = null;
        Operation response = api.sqlInstancesDemoteMaster(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesDemoteMasterRequest);
        // TODO: test validations
    }

    /**
     * Exports data from a Cloud SQL instance to a Cloud Storage bucket as a SQL dump or CSV file.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesExportTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesExportRequest instancesExportRequest = null;
        Operation response = api.sqlInstancesExport(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesExportRequest);
        // TODO: test validations
    }

    /**
     * Initiates a manual failover of a high availability (HA) primary instance to a standby instance, which becomes the primary instance. Users are then rerouted to the new primary. For more information, see the [Overview of high availability](https://cloud.google.com/sql/docs/mysql/high-availability) page in the Cloud SQL documentation. If using Legacy HA (MySQL only), this causes the instance to failover to its failover replica instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesFailoverTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesFailoverRequest instancesFailoverRequest = null;
        Operation response = api.sqlInstancesFailover(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesFailoverRequest);
        // TODO: test validations
    }

    /**
     * Retrieves a resource containing information about a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesGetTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatabaseInstance response = api.sqlInstancesGet(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Imports data into a Cloud SQL instance from a SQL dump or CSV file in Cloud Storage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesImportTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesImportRequest instancesImportRequest = null;
        Operation response = api.sqlInstancesImport(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesImportRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesInsertTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatabaseInstance databaseInstance = null;
        Operation response = api.sqlInstancesInsert(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, databaseInstance);
        // TODO: test validations
    }

    /**
     * Lists instances under a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesListTest() throws ApiException {
        String project = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer maxResults = null;
        String pageToken = null;
        InstancesListResponse response = api.sqlInstancesList(project, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, maxResults, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all of the trusted Certificate Authorities (CAs) for the specified instance. There can be up to three CAs listed: the CA that was used to sign the certificate that is currently in use, a CA that has been added but not yet used to sign a certificate, and a CA used to sign a certificate that has previously rotated out.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesListServerCasTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesListServerCasResponse response = api.sqlInstancesListServerCas(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Partially updates settings of a Cloud SQL instance by merging the request with the current configuration. This method supports patch semantics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesPatchTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatabaseInstance databaseInstance = null;
        Operation response = api.sqlInstancesPatch(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, databaseInstance);
        // TODO: test validations
    }

    /**
     * Promotes the read replica instance to be a stand-alone Cloud SQL instance. Using this operation might cause your instance to restart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesPromoteReplicaTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean failover = null;
        Operation response = api.sqlInstancesPromoteReplica(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, failover);
        // TODO: test validations
    }

    /**
     * Reencrypt CMEK instance with latest key version.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesReencryptTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesReencryptRequest instancesReencryptRequest = null;
        Operation response = api.sqlInstancesReencrypt(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesReencryptRequest);
        // TODO: test validations
    }

    /**
     * Deletes all client certificates and generates a new server SSL certificate for the instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesResetSslConfigTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlInstancesResetSslConfig(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Restarts a Cloud SQL instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesRestartTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlInstancesRestart(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Restores a backup of a Cloud SQL instance. Using this operation might cause your instance to restart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesRestoreBackupTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesRestoreBackupRequest instancesRestoreBackupRequest = null;
        Operation response = api.sqlInstancesRestoreBackup(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesRestoreBackupRequest);
        // TODO: test validations
    }

    /**
     * Rotates the server certificate to one signed by the Certificate Authority (CA) version previously added with the addServerCA method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesRotateServerCaTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesRotateServerCaRequest instancesRotateServerCaRequest = null;
        Operation response = api.sqlInstancesRotateServerCa(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesRotateServerCaRequest);
        // TODO: test validations
    }

    /**
     * Starts the replication in the read replica instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesStartReplicaTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlInstancesStartReplica(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Stops the replication in the read replica instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesStopReplicaTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.sqlInstancesStopReplica(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Switches over from the primary instance to a replica instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesSwitchoverTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String dbTimeout = null;
        Operation response = api.sqlInstancesSwitchover(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, dbTimeout);
        // TODO: test validations
    }

    /**
     * Truncate MySQL general and slow query log tables MySQL only.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesTruncateLogTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        InstancesTruncateLogRequest instancesTruncateLogRequest = null;
        Operation response = api.sqlInstancesTruncateLog(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, instancesTruncateLogRequest);
        // TODO: test validations
    }

    /**
     * Updates settings of a Cloud SQL instance. Using this operation might cause your instance to restart.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlInstancesUpdateTest() throws ApiException {
        String project = null;
        String instance = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        DatabaseInstance databaseInstance = null;
        Operation response = api.sqlInstancesUpdate(project, instance, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, databaseInstance);
        // TODO: test validations
    }

}
