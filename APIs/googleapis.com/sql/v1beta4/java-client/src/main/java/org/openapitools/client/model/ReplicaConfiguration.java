/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MySqlReplicaConfiguration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Read-replica configuration for connecting to the primary instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReplicaConfiguration {
  public static final String SERIALIZED_NAME_CASCADABLE_REPLICA = "cascadableReplica";
  @SerializedName(SERIALIZED_NAME_CASCADABLE_REPLICA)
  private Boolean cascadableReplica;

  public static final String SERIALIZED_NAME_FAILOVER_TARGET = "failoverTarget";
  @SerializedName(SERIALIZED_NAME_FAILOVER_TARGET)
  private Boolean failoverTarget;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MYSQL_REPLICA_CONFIGURATION = "mysqlReplicaConfiguration";
  @SerializedName(SERIALIZED_NAME_MYSQL_REPLICA_CONFIGURATION)
  private MySqlReplicaConfiguration mysqlReplicaConfiguration;

  public ReplicaConfiguration() {
  }

  public ReplicaConfiguration cascadableReplica(Boolean cascadableReplica) {
    this.cascadableReplica = cascadableReplica;
    return this;
  }

  /**
   * Optional. Specifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.
   * @return cascadableReplica
   */
  @javax.annotation.Nullable
  public Boolean getCascadableReplica() {
    return cascadableReplica;
  }

  public void setCascadableReplica(Boolean cascadableReplica) {
    this.cascadableReplica = cascadableReplica;
  }


  public ReplicaConfiguration failoverTarget(Boolean failoverTarget) {
    this.failoverTarget = failoverTarget;
    return this;
  }

  /**
   * Specifies if the replica is the failover target. If the field is set to &#x60;true&#x60; the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
   * @return failoverTarget
   */
  @javax.annotation.Nullable
  public Boolean getFailoverTarget() {
    return failoverTarget;
  }

  public void setFailoverTarget(Boolean failoverTarget) {
    this.failoverTarget = failoverTarget;
  }


  public ReplicaConfiguration kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#replicaConfiguration&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ReplicaConfiguration mysqlReplicaConfiguration(MySqlReplicaConfiguration mysqlReplicaConfiguration) {
    this.mysqlReplicaConfiguration = mysqlReplicaConfiguration;
    return this;
  }

  /**
   * Get mysqlReplicaConfiguration
   * @return mysqlReplicaConfiguration
   */
  @javax.annotation.Nullable
  public MySqlReplicaConfiguration getMysqlReplicaConfiguration() {
    return mysqlReplicaConfiguration;
  }

  public void setMysqlReplicaConfiguration(MySqlReplicaConfiguration mysqlReplicaConfiguration) {
    this.mysqlReplicaConfiguration = mysqlReplicaConfiguration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplicaConfiguration replicaConfiguration = (ReplicaConfiguration) o;
    return Objects.equals(this.cascadableReplica, replicaConfiguration.cascadableReplica) &&
        Objects.equals(this.failoverTarget, replicaConfiguration.failoverTarget) &&
        Objects.equals(this.kind, replicaConfiguration.kind) &&
        Objects.equals(this.mysqlReplicaConfiguration, replicaConfiguration.mysqlReplicaConfiguration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cascadableReplica, failoverTarget, kind, mysqlReplicaConfiguration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplicaConfiguration {\n");
    sb.append("    cascadableReplica: ").append(toIndentedString(cascadableReplica)).append("\n");
    sb.append("    failoverTarget: ").append(toIndentedString(failoverTarget)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    mysqlReplicaConfiguration: ").append(toIndentedString(mysqlReplicaConfiguration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cascadableReplica");
    openapiFields.add("failoverTarget");
    openapiFields.add("kind");
    openapiFields.add("mysqlReplicaConfiguration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplicaConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReplicaConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplicaConfiguration is not found in the empty JSON string", ReplicaConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplicaConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplicaConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `mysqlReplicaConfiguration`
      if (jsonObj.get("mysqlReplicaConfiguration") != null && !jsonObj.get("mysqlReplicaConfiguration").isJsonNull()) {
        MySqlReplicaConfiguration.validateJsonElement(jsonObj.get("mysqlReplicaConfiguration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplicaConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplicaConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplicaConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplicaConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplicaConfiguration>() {
           @Override
           public void write(JsonWriter out, ReplicaConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplicaConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplicaConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplicaConfiguration
   * @throws IOException if the JSON string is invalid with respect to ReplicaConfiguration
   */
  public static ReplicaConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplicaConfiguration.class);
  }

  /**
   * Convert an instance of ReplicaConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

