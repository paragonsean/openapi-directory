/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpMapping;
import org.openapitools.client.model.SslCert;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Connect settings retrieval response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConnectSettings {
  /**
   * &#x60;SECOND_GEN&#x60;: Cloud SQL database instance. &#x60;EXTERNAL&#x60;: A database server that is not managed by Google. This property is read-only; use the &#x60;tier&#x60; property in the &#x60;settings&#x60; object to determine the database type.
   */
  @JsonAdapter(BackendTypeEnum.Adapter.class)
  public enum BackendTypeEnum {
    SQL_BACKEND_TYPE_UNSPECIFIED("SQL_BACKEND_TYPE_UNSPECIFIED"),
    
    FIRST_GEN("FIRST_GEN"),
    
    SECOND_GEN("SECOND_GEN"),
    
    EXTERNAL("EXTERNAL");

    private String value;

    BackendTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackendTypeEnum fromValue(String value) {
      for (BackendTypeEnum b : BackendTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackendTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackendTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackendTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackendTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackendTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKEND_TYPE = "backendType";
  @SerializedName(SERIALIZED_NAME_BACKEND_TYPE)
  private BackendTypeEnum backendType;

  /**
   * The database engine type and version. The &#x60;databaseVersion&#x60; field cannot be changed after instance creation. MySQL instances: &#x60;MYSQL_8_0&#x60;, &#x60;MYSQL_5_7&#x60; (default), or &#x60;MYSQL_5_6&#x60;. PostgreSQL instances: &#x60;POSTGRES_9_6&#x60;, &#x60;POSTGRES_10&#x60;, &#x60;POSTGRES_11&#x60; or &#x60;POSTGRES_12&#x60; (default), &#x60;POSTGRES_13&#x60;, or &#x60;POSTGRES_14&#x60;. SQL Server instances: &#x60;SQLSERVER_2017_STANDARD&#x60; (default), &#x60;SQLSERVER_2017_ENTERPRISE&#x60;, &#x60;SQLSERVER_2017_EXPRESS&#x60;, &#x60;SQLSERVER_2017_WEB&#x60;, &#x60;SQLSERVER_2019_STANDARD&#x60;, &#x60;SQLSERVER_2019_ENTERPRISE&#x60;, &#x60;SQLSERVER_2019_EXPRESS&#x60;, or &#x60;SQLSERVER_2019_WEB&#x60;.
   */
  @JsonAdapter(DatabaseVersionEnum.Adapter.class)
  public enum DatabaseVersionEnum {
    SQL_DATABASE_VERSION_UNSPECIFIED("SQL_DATABASE_VERSION_UNSPECIFIED"),
    
    MYSQL_5_1("MYSQL_5_1"),
    
    MYSQL_5_5("MYSQL_5_5"),
    
    MYSQL_5_6("MYSQL_5_6"),
    
    MYSQL_5_7("MYSQL_5_7"),
    
    SQLSERVER_2017_STANDARD("SQLSERVER_2017_STANDARD"),
    
    SQLSERVER_2017_ENTERPRISE("SQLSERVER_2017_ENTERPRISE"),
    
    SQLSERVER_2017_EXPRESS("SQLSERVER_2017_EXPRESS"),
    
    SQLSERVER_2017_WEB("SQLSERVER_2017_WEB"),
    
    POSTGRES_9_6("POSTGRES_9_6"),
    
    POSTGRES_10("POSTGRES_10"),
    
    POSTGRES_11("POSTGRES_11"),
    
    POSTGRES_12("POSTGRES_12"),
    
    POSTGRES_13("POSTGRES_13"),
    
    POSTGRES_14("POSTGRES_14"),
    
    POSTGRES_15("POSTGRES_15"),
    
    MYSQL_8_0("MYSQL_8_0"),
    
    MYSQL_8_0_18("MYSQL_8_0_18"),
    
    MYSQL_8_0_26("MYSQL_8_0_26"),
    
    MYSQL_8_0_27("MYSQL_8_0_27"),
    
    MYSQL_8_0_28("MYSQL_8_0_28"),
    
    MYSQL_8_0_29("MYSQL_8_0_29"),
    
    MYSQL_8_0_30("MYSQL_8_0_30"),
    
    MYSQL_8_0_31("MYSQL_8_0_31"),
    
    MYSQL_8_0_32("MYSQL_8_0_32"),
    
    MYSQL_8_0_33("MYSQL_8_0_33"),
    
    MYSQL_8_0_34("MYSQL_8_0_34"),
    
    MYSQL_8_0_35("MYSQL_8_0_35"),
    
    MYSQL_8_0_36("MYSQL_8_0_36"),
    
    SQLSERVER_2019_STANDARD("SQLSERVER_2019_STANDARD"),
    
    SQLSERVER_2019_ENTERPRISE("SQLSERVER_2019_ENTERPRISE"),
    
    SQLSERVER_2019_EXPRESS("SQLSERVER_2019_EXPRESS"),
    
    SQLSERVER_2019_WEB("SQLSERVER_2019_WEB"),
    
    SQLSERVER_2022_STANDARD("SQLSERVER_2022_STANDARD"),
    
    SQLSERVER_2022_ENTERPRISE("SQLSERVER_2022_ENTERPRISE"),
    
    SQLSERVER_2022_EXPRESS("SQLSERVER_2022_EXPRESS"),
    
    SQLSERVER_2022_WEB("SQLSERVER_2022_WEB");

    private String value;

    DatabaseVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DatabaseVersionEnum fromValue(String value) {
      for (DatabaseVersionEnum b : DatabaseVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DatabaseVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DatabaseVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DatabaseVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DatabaseVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DatabaseVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATABASE_VERSION = "databaseVersion";
  @SerializedName(SERIALIZED_NAME_DATABASE_VERSION)
  private DatabaseVersionEnum databaseVersion;

  public static final String SERIALIZED_NAME_DNS_NAME = "dnsName";
  @SerializedName(SERIALIZED_NAME_DNS_NAME)
  private String dnsName;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ipAddresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<IpMapping> ipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PSC_ENABLED = "pscEnabled";
  @SerializedName(SERIALIZED_NAME_PSC_ENABLED)
  private Boolean pscEnabled;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SERVER_CA_CERT = "serverCaCert";
  @SerializedName(SERIALIZED_NAME_SERVER_CA_CERT)
  private SslCert serverCaCert;

  public ConnectSettings() {
  }

  public ConnectSettings backendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
    return this;
  }

  /**
   * &#x60;SECOND_GEN&#x60;: Cloud SQL database instance. &#x60;EXTERNAL&#x60;: A database server that is not managed by Google. This property is read-only; use the &#x60;tier&#x60; property in the &#x60;settings&#x60; object to determine the database type.
   * @return backendType
   */
  @javax.annotation.Nullable
  public BackendTypeEnum getBackendType() {
    return backendType;
  }

  public void setBackendType(BackendTypeEnum backendType) {
    this.backendType = backendType;
  }


  public ConnectSettings databaseVersion(DatabaseVersionEnum databaseVersion) {
    this.databaseVersion = databaseVersion;
    return this;
  }

  /**
   * The database engine type and version. The &#x60;databaseVersion&#x60; field cannot be changed after instance creation. MySQL instances: &#x60;MYSQL_8_0&#x60;, &#x60;MYSQL_5_7&#x60; (default), or &#x60;MYSQL_5_6&#x60;. PostgreSQL instances: &#x60;POSTGRES_9_6&#x60;, &#x60;POSTGRES_10&#x60;, &#x60;POSTGRES_11&#x60; or &#x60;POSTGRES_12&#x60; (default), &#x60;POSTGRES_13&#x60;, or &#x60;POSTGRES_14&#x60;. SQL Server instances: &#x60;SQLSERVER_2017_STANDARD&#x60; (default), &#x60;SQLSERVER_2017_ENTERPRISE&#x60;, &#x60;SQLSERVER_2017_EXPRESS&#x60;, &#x60;SQLSERVER_2017_WEB&#x60;, &#x60;SQLSERVER_2019_STANDARD&#x60;, &#x60;SQLSERVER_2019_ENTERPRISE&#x60;, &#x60;SQLSERVER_2019_EXPRESS&#x60;, or &#x60;SQLSERVER_2019_WEB&#x60;.
   * @return databaseVersion
   */
  @javax.annotation.Nullable
  public DatabaseVersionEnum getDatabaseVersion() {
    return databaseVersion;
  }

  public void setDatabaseVersion(DatabaseVersionEnum databaseVersion) {
    this.databaseVersion = databaseVersion;
  }


  public ConnectSettings dnsName(String dnsName) {
    this.dnsName = dnsName;
    return this;
  }

  /**
   * The dns name of the instance.
   * @return dnsName
   */
  @javax.annotation.Nullable
  public String getDnsName() {
    return dnsName;
  }

  public void setDnsName(String dnsName) {
    this.dnsName = dnsName;
  }


  public ConnectSettings ipAddresses(List<IpMapping> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public ConnectSettings addIpAddressesItem(IpMapping ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

  /**
   * The assigned IP addresses for the instance.
   * @return ipAddresses
   */
  @javax.annotation.Nullable
  public List<IpMapping> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<IpMapping> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public ConnectSettings kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#connectSettings&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ConnectSettings pscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
    return this;
  }

  /**
   * Whether PSC connectivity is enabled for this instance.
   * @return pscEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPscEnabled() {
    return pscEnabled;
  }

  public void setPscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
  }


  public ConnectSettings region(String region) {
    this.region = region;
    return this;
  }

  /**
   * The cloud region for the instance. e.g. &#x60;us-central1&#x60;, &#x60;europe-west1&#x60;. The region cannot be changed after instance creation.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public ConnectSettings serverCaCert(SslCert serverCaCert) {
    this.serverCaCert = serverCaCert;
    return this;
  }

  /**
   * Get serverCaCert
   * @return serverCaCert
   */
  @javax.annotation.Nullable
  public SslCert getServerCaCert() {
    return serverCaCert;
  }

  public void setServerCaCert(SslCert serverCaCert) {
    this.serverCaCert = serverCaCert;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectSettings connectSettings = (ConnectSettings) o;
    return Objects.equals(this.backendType, connectSettings.backendType) &&
        Objects.equals(this.databaseVersion, connectSettings.databaseVersion) &&
        Objects.equals(this.dnsName, connectSettings.dnsName) &&
        Objects.equals(this.ipAddresses, connectSettings.ipAddresses) &&
        Objects.equals(this.kind, connectSettings.kind) &&
        Objects.equals(this.pscEnabled, connectSettings.pscEnabled) &&
        Objects.equals(this.region, connectSettings.region) &&
        Objects.equals(this.serverCaCert, connectSettings.serverCaCert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backendType, databaseVersion, dnsName, ipAddresses, kind, pscEnabled, region, serverCaCert);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectSettings {\n");
    sb.append("    backendType: ").append(toIndentedString(backendType)).append("\n");
    sb.append("    databaseVersion: ").append(toIndentedString(databaseVersion)).append("\n");
    sb.append("    dnsName: ").append(toIndentedString(dnsName)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pscEnabled: ").append(toIndentedString(pscEnabled)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    serverCaCert: ").append(toIndentedString(serverCaCert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backendType");
    openapiFields.add("databaseVersion");
    openapiFields.add("dnsName");
    openapiFields.add("ipAddresses");
    openapiFields.add("kind");
    openapiFields.add("pscEnabled");
    openapiFields.add("region");
    openapiFields.add("serverCaCert");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConnectSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectSettings is not found in the empty JSON string", ConnectSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backendType") != null && !jsonObj.get("backendType").isJsonNull()) && !jsonObj.get("backendType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backendType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backendType").toString()));
      }
      // validate the optional field `backendType`
      if (jsonObj.get("backendType") != null && !jsonObj.get("backendType").isJsonNull()) {
        BackendTypeEnum.validateJsonElement(jsonObj.get("backendType"));
      }
      if ((jsonObj.get("databaseVersion") != null && !jsonObj.get("databaseVersion").isJsonNull()) && !jsonObj.get("databaseVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("databaseVersion").toString()));
      }
      // validate the optional field `databaseVersion`
      if (jsonObj.get("databaseVersion") != null && !jsonObj.get("databaseVersion").isJsonNull()) {
        DatabaseVersionEnum.validateJsonElement(jsonObj.get("databaseVersion"));
      }
      if ((jsonObj.get("dnsName") != null && !jsonObj.get("dnsName").isJsonNull()) && !jsonObj.get("dnsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsName").toString()));
      }
      if (jsonObj.get("ipAddresses") != null && !jsonObj.get("ipAddresses").isJsonNull()) {
        JsonArray jsonArrayipAddresses = jsonObj.getAsJsonArray("ipAddresses");
        if (jsonArrayipAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ipAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipAddresses").toString()));
          }

          // validate the optional field `ipAddresses` (array)
          for (int i = 0; i < jsonArrayipAddresses.size(); i++) {
            IpMapping.validateJsonElement(jsonArrayipAddresses.get(i));
          };
        }
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the optional field `serverCaCert`
      if (jsonObj.get("serverCaCert") != null && !jsonObj.get("serverCaCert").isJsonNull()) {
        SslCert.validateJsonElement(jsonObj.get("serverCaCert"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectSettings>() {
           @Override
           public void write(JsonWriter out, ConnectSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectSettings
   * @throws IOException if the JSON string is invalid with respect to ConnectSettings
   */
  public static ConnectSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectSettings.class);
  }

  /**
   * Convert an instance of ConnectSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

