/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Insights configuration. This specifies when Cloud SQL Insights feature is enabled and optional configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InsightsConfig {
  public static final String SERIALIZED_NAME_QUERY_INSIGHTS_ENABLED = "queryInsightsEnabled";
  @SerializedName(SERIALIZED_NAME_QUERY_INSIGHTS_ENABLED)
  private Boolean queryInsightsEnabled;

  public static final String SERIALIZED_NAME_QUERY_PLANS_PER_MINUTE = "queryPlansPerMinute";
  @SerializedName(SERIALIZED_NAME_QUERY_PLANS_PER_MINUTE)
  private Integer queryPlansPerMinute;

  public static final String SERIALIZED_NAME_QUERY_STRING_LENGTH = "queryStringLength";
  @SerializedName(SERIALIZED_NAME_QUERY_STRING_LENGTH)
  private Integer queryStringLength;

  public static final String SERIALIZED_NAME_RECORD_APPLICATION_TAGS = "recordApplicationTags";
  @SerializedName(SERIALIZED_NAME_RECORD_APPLICATION_TAGS)
  private Boolean recordApplicationTags;

  public static final String SERIALIZED_NAME_RECORD_CLIENT_ADDRESS = "recordClientAddress";
  @SerializedName(SERIALIZED_NAME_RECORD_CLIENT_ADDRESS)
  private Boolean recordClientAddress;

  public InsightsConfig() {
  }

  public InsightsConfig queryInsightsEnabled(Boolean queryInsightsEnabled) {
    this.queryInsightsEnabled = queryInsightsEnabled;
    return this;
  }

  /**
   * Whether Query Insights feature is enabled.
   * @return queryInsightsEnabled
   */
  @javax.annotation.Nullable
  public Boolean getQueryInsightsEnabled() {
    return queryInsightsEnabled;
  }

  public void setQueryInsightsEnabled(Boolean queryInsightsEnabled) {
    this.queryInsightsEnabled = queryInsightsEnabled;
  }


  public InsightsConfig queryPlansPerMinute(Integer queryPlansPerMinute) {
    this.queryPlansPerMinute = queryPlansPerMinute;
    return this;
  }

  /**
   * Number of query execution plans captured by Insights per minute for all queries combined. Default is 5.
   * @return queryPlansPerMinute
   */
  @javax.annotation.Nullable
  public Integer getQueryPlansPerMinute() {
    return queryPlansPerMinute;
  }

  public void setQueryPlansPerMinute(Integer queryPlansPerMinute) {
    this.queryPlansPerMinute = queryPlansPerMinute;
  }


  public InsightsConfig queryStringLength(Integer queryStringLength) {
    this.queryStringLength = queryStringLength;
    return this;
  }

  /**
   * Maximum query length stored in bytes. Default value: 1024 bytes. Range: 256-4500 bytes. Query length more than this field value will be truncated to this value. When unset, query length will be the default value. Changing query length will restart the database.
   * @return queryStringLength
   */
  @javax.annotation.Nullable
  public Integer getQueryStringLength() {
    return queryStringLength;
  }

  public void setQueryStringLength(Integer queryStringLength) {
    this.queryStringLength = queryStringLength;
  }


  public InsightsConfig recordApplicationTags(Boolean recordApplicationTags) {
    this.recordApplicationTags = recordApplicationTags;
    return this;
  }

  /**
   * Whether Query Insights will record application tags from query when enabled.
   * @return recordApplicationTags
   */
  @javax.annotation.Nullable
  public Boolean getRecordApplicationTags() {
    return recordApplicationTags;
  }

  public void setRecordApplicationTags(Boolean recordApplicationTags) {
    this.recordApplicationTags = recordApplicationTags;
  }


  public InsightsConfig recordClientAddress(Boolean recordClientAddress) {
    this.recordClientAddress = recordClientAddress;
    return this;
  }

  /**
   * Whether Query Insights will record client address when enabled.
   * @return recordClientAddress
   */
  @javax.annotation.Nullable
  public Boolean getRecordClientAddress() {
    return recordClientAddress;
  }

  public void setRecordClientAddress(Boolean recordClientAddress) {
    this.recordClientAddress = recordClientAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsightsConfig insightsConfig = (InsightsConfig) o;
    return Objects.equals(this.queryInsightsEnabled, insightsConfig.queryInsightsEnabled) &&
        Objects.equals(this.queryPlansPerMinute, insightsConfig.queryPlansPerMinute) &&
        Objects.equals(this.queryStringLength, insightsConfig.queryStringLength) &&
        Objects.equals(this.recordApplicationTags, insightsConfig.recordApplicationTags) &&
        Objects.equals(this.recordClientAddress, insightsConfig.recordClientAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(queryInsightsEnabled, queryPlansPerMinute, queryStringLength, recordApplicationTags, recordClientAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsightsConfig {\n");
    sb.append("    queryInsightsEnabled: ").append(toIndentedString(queryInsightsEnabled)).append("\n");
    sb.append("    queryPlansPerMinute: ").append(toIndentedString(queryPlansPerMinute)).append("\n");
    sb.append("    queryStringLength: ").append(toIndentedString(queryStringLength)).append("\n");
    sb.append("    recordApplicationTags: ").append(toIndentedString(recordApplicationTags)).append("\n");
    sb.append("    recordClientAddress: ").append(toIndentedString(recordClientAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("queryInsightsEnabled");
    openapiFields.add("queryPlansPerMinute");
    openapiFields.add("queryStringLength");
    openapiFields.add("recordApplicationTags");
    openapiFields.add("recordClientAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InsightsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InsightsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsightsConfig is not found in the empty JSON string", InsightsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InsightsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InsightsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsightsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsightsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsightsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsightsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<InsightsConfig>() {
           @Override
           public void write(JsonWriter out, InsightsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InsightsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InsightsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InsightsConfig
   * @throws IOException if the JSON string is invalid with respect to InsightsConfig
   */
  public static InsightsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsightsConfig.class);
  }

  /**
   * Convert an instance of InsightsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

