/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.MySqlSyncConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SqlInstancesVerifyExternalSyncSettingsRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlInstancesVerifyExternalSyncSettingsRequest {
  public static final String SERIALIZED_NAME_MYSQL_SYNC_CONFIG = "mysqlSyncConfig";
  @SerializedName(SERIALIZED_NAME_MYSQL_SYNC_CONFIG)
  private MySqlSyncConfig mysqlSyncConfig;

  /**
   * External sync mode
   */
  @JsonAdapter(SyncModeEnum.Adapter.class)
  public enum SyncModeEnum {
    EXTERNAL_SYNC_MODE_UNSPECIFIED("EXTERNAL_SYNC_MODE_UNSPECIFIED"),
    
    ONLINE("ONLINE"),
    
    OFFLINE("OFFLINE");

    private String value;

    SyncModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncModeEnum fromValue(String value) {
      for (SyncModeEnum b : SyncModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_MODE = "syncMode";
  @SerializedName(SERIALIZED_NAME_SYNC_MODE)
  private SyncModeEnum syncMode;

  public static final String SERIALIZED_NAME_VERIFY_CONNECTION_ONLY = "verifyConnectionOnly";
  @SerializedName(SERIALIZED_NAME_VERIFY_CONNECTION_ONLY)
  private Boolean verifyConnectionOnly;

  public static final String SERIALIZED_NAME_VERIFY_REPLICATION_ONLY = "verifyReplicationOnly";
  @SerializedName(SERIALIZED_NAME_VERIFY_REPLICATION_ONLY)
  private Boolean verifyReplicationOnly;

  public SqlInstancesVerifyExternalSyncSettingsRequest() {
  }

  public SqlInstancesVerifyExternalSyncSettingsRequest mysqlSyncConfig(MySqlSyncConfig mysqlSyncConfig) {
    this.mysqlSyncConfig = mysqlSyncConfig;
    return this;
  }

  /**
   * Get mysqlSyncConfig
   * @return mysqlSyncConfig
   */
  @javax.annotation.Nullable
  public MySqlSyncConfig getMysqlSyncConfig() {
    return mysqlSyncConfig;
  }

  public void setMysqlSyncConfig(MySqlSyncConfig mysqlSyncConfig) {
    this.mysqlSyncConfig = mysqlSyncConfig;
  }


  public SqlInstancesVerifyExternalSyncSettingsRequest syncMode(SyncModeEnum syncMode) {
    this.syncMode = syncMode;
    return this;
  }

  /**
   * External sync mode
   * @return syncMode
   */
  @javax.annotation.Nullable
  public SyncModeEnum getSyncMode() {
    return syncMode;
  }

  public void setSyncMode(SyncModeEnum syncMode) {
    this.syncMode = syncMode;
  }


  public SqlInstancesVerifyExternalSyncSettingsRequest verifyConnectionOnly(Boolean verifyConnectionOnly) {
    this.verifyConnectionOnly = verifyConnectionOnly;
    return this;
  }

  /**
   * Flag to enable verifying connection only
   * @return verifyConnectionOnly
   */
  @javax.annotation.Nullable
  public Boolean getVerifyConnectionOnly() {
    return verifyConnectionOnly;
  }

  public void setVerifyConnectionOnly(Boolean verifyConnectionOnly) {
    this.verifyConnectionOnly = verifyConnectionOnly;
  }


  public SqlInstancesVerifyExternalSyncSettingsRequest verifyReplicationOnly(Boolean verifyReplicationOnly) {
    this.verifyReplicationOnly = verifyReplicationOnly;
    return this;
  }

  /**
   * Optional. Flag to verify settings required by replication setup only
   * @return verifyReplicationOnly
   */
  @javax.annotation.Nullable
  public Boolean getVerifyReplicationOnly() {
    return verifyReplicationOnly;
  }

  public void setVerifyReplicationOnly(Boolean verifyReplicationOnly) {
    this.verifyReplicationOnly = verifyReplicationOnly;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlInstancesVerifyExternalSyncSettingsRequest sqlInstancesVerifyExternalSyncSettingsRequest = (SqlInstancesVerifyExternalSyncSettingsRequest) o;
    return Objects.equals(this.mysqlSyncConfig, sqlInstancesVerifyExternalSyncSettingsRequest.mysqlSyncConfig) &&
        Objects.equals(this.syncMode, sqlInstancesVerifyExternalSyncSettingsRequest.syncMode) &&
        Objects.equals(this.verifyConnectionOnly, sqlInstancesVerifyExternalSyncSettingsRequest.verifyConnectionOnly) &&
        Objects.equals(this.verifyReplicationOnly, sqlInstancesVerifyExternalSyncSettingsRequest.verifyReplicationOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mysqlSyncConfig, syncMode, verifyConnectionOnly, verifyReplicationOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlInstancesVerifyExternalSyncSettingsRequest {\n");
    sb.append("    mysqlSyncConfig: ").append(toIndentedString(mysqlSyncConfig)).append("\n");
    sb.append("    syncMode: ").append(toIndentedString(syncMode)).append("\n");
    sb.append("    verifyConnectionOnly: ").append(toIndentedString(verifyConnectionOnly)).append("\n");
    sb.append("    verifyReplicationOnly: ").append(toIndentedString(verifyReplicationOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mysqlSyncConfig");
    openapiFields.add("syncMode");
    openapiFields.add("verifyConnectionOnly");
    openapiFields.add("verifyReplicationOnly");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlInstancesVerifyExternalSyncSettingsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlInstancesVerifyExternalSyncSettingsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlInstancesVerifyExternalSyncSettingsRequest is not found in the empty JSON string", SqlInstancesVerifyExternalSyncSettingsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlInstancesVerifyExternalSyncSettingsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlInstancesVerifyExternalSyncSettingsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mysqlSyncConfig`
      if (jsonObj.get("mysqlSyncConfig") != null && !jsonObj.get("mysqlSyncConfig").isJsonNull()) {
        MySqlSyncConfig.validateJsonElement(jsonObj.get("mysqlSyncConfig"));
      }
      if ((jsonObj.get("syncMode") != null && !jsonObj.get("syncMode").isJsonNull()) && !jsonObj.get("syncMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncMode").toString()));
      }
      // validate the optional field `syncMode`
      if (jsonObj.get("syncMode") != null && !jsonObj.get("syncMode").isJsonNull()) {
        SyncModeEnum.validateJsonElement(jsonObj.get("syncMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlInstancesVerifyExternalSyncSettingsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlInstancesVerifyExternalSyncSettingsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlInstancesVerifyExternalSyncSettingsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlInstancesVerifyExternalSyncSettingsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlInstancesVerifyExternalSyncSettingsRequest>() {
           @Override
           public void write(JsonWriter out, SqlInstancesVerifyExternalSyncSettingsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlInstancesVerifyExternalSyncSettingsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlInstancesVerifyExternalSyncSettingsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlInstancesVerifyExternalSyncSettingsRequest
   * @throws IOException if the JSON string is invalid with respect to SqlInstancesVerifyExternalSyncSettingsRequest
   */
  public static SqlInstancesVerifyExternalSyncSettingsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlInstancesVerifyExternalSyncSettingsRequest.class);
  }

  /**
   * Convert an instance of SqlInstancesVerifyExternalSyncSettingsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

