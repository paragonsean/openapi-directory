/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PSC settings for a Cloud SQL instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PscConfig {
  public static final String SERIALIZED_NAME_ALLOWED_CONSUMER_PROJECTS = "allowedConsumerProjects";
  @SerializedName(SERIALIZED_NAME_ALLOWED_CONSUMER_PROJECTS)
  private List<String> allowedConsumerProjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_PSC_ENABLED = "pscEnabled";
  @SerializedName(SERIALIZED_NAME_PSC_ENABLED)
  private Boolean pscEnabled;

  public PscConfig() {
  }

  public PscConfig allowedConsumerProjects(List<String> allowedConsumerProjects) {
    this.allowedConsumerProjects = allowedConsumerProjects;
    return this;
  }

  public PscConfig addAllowedConsumerProjectsItem(String allowedConsumerProjectsItem) {
    if (this.allowedConsumerProjects == null) {
      this.allowedConsumerProjects = new ArrayList<>();
    }
    this.allowedConsumerProjects.add(allowedConsumerProjectsItem);
    return this;
  }

  /**
   * Optional. The list of consumer projects that are allow-listed for PSC connections to this instance. This instance can be connected to with PSC from any network in these projects. Each consumer project in this list may be represented by a project number (numeric) or by a project id (alphanumeric).
   * @return allowedConsumerProjects
   */
  @javax.annotation.Nullable
  public List<String> getAllowedConsumerProjects() {
    return allowedConsumerProjects;
  }

  public void setAllowedConsumerProjects(List<String> allowedConsumerProjects) {
    this.allowedConsumerProjects = allowedConsumerProjects;
  }


  public PscConfig pscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
    return this;
  }

  /**
   * Whether PSC connectivity is enabled for this instance.
   * @return pscEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPscEnabled() {
    return pscEnabled;
  }

  public void setPscEnabled(Boolean pscEnabled) {
    this.pscEnabled = pscEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PscConfig pscConfig = (PscConfig) o;
    return Objects.equals(this.allowedConsumerProjects, pscConfig.allowedConsumerProjects) &&
        Objects.equals(this.pscEnabled, pscConfig.pscEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedConsumerProjects, pscEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PscConfig {\n");
    sb.append("    allowedConsumerProjects: ").append(toIndentedString(allowedConsumerProjects)).append("\n");
    sb.append("    pscEnabled: ").append(toIndentedString(pscEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedConsumerProjects");
    openapiFields.add("pscEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PscConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PscConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PscConfig is not found in the empty JSON string", PscConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PscConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PscConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedConsumerProjects") != null && !jsonObj.get("allowedConsumerProjects").isJsonNull() && !jsonObj.get("allowedConsumerProjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedConsumerProjects` to be an array in the JSON string but got `%s`", jsonObj.get("allowedConsumerProjects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PscConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PscConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PscConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PscConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PscConfig>() {
           @Override
           public void write(JsonWriter out, PscConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PscConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PscConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PscConfig
   * @throws IOException if the JSON string is invalid with respect to PscConfig
   */
  public static PscConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PscConfig.class);
  }

  /**
   * Convert an instance of PscConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

