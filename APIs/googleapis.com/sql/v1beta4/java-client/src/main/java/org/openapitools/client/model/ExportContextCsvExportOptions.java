/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for exporting data as CSV. &#x60;MySQL&#x60; and &#x60;PostgreSQL&#x60; instances only.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportContextCsvExportOptions {
  public static final String SERIALIZED_NAME_ESCAPE_CHARACTER = "escapeCharacter";
  @SerializedName(SERIALIZED_NAME_ESCAPE_CHARACTER)
  private String escapeCharacter;

  public static final String SERIALIZED_NAME_FIELDS_TERMINATED_BY = "fieldsTerminatedBy";
  @SerializedName(SERIALIZED_NAME_FIELDS_TERMINATED_BY)
  private String fieldsTerminatedBy;

  public static final String SERIALIZED_NAME_LINES_TERMINATED_BY = "linesTerminatedBy";
  @SerializedName(SERIALIZED_NAME_LINES_TERMINATED_BY)
  private String linesTerminatedBy;

  public static final String SERIALIZED_NAME_QUOTE_CHARACTER = "quoteCharacter";
  @SerializedName(SERIALIZED_NAME_QUOTE_CHARACTER)
  private String quoteCharacter;

  public static final String SERIALIZED_NAME_SELECT_QUERY = "selectQuery";
  @SerializedName(SERIALIZED_NAME_SELECT_QUERY)
  private String selectQuery;

  public ExportContextCsvExportOptions() {
  }

  public ExportContextCsvExportOptions escapeCharacter(String escapeCharacter) {
    this.escapeCharacter = escapeCharacter;
    return this;
  }

  /**
   * Specifies the character that should appear before a data character that needs to be escaped.
   * @return escapeCharacter
   */
  @javax.annotation.Nullable
  public String getEscapeCharacter() {
    return escapeCharacter;
  }

  public void setEscapeCharacter(String escapeCharacter) {
    this.escapeCharacter = escapeCharacter;
  }


  public ExportContextCsvExportOptions fieldsTerminatedBy(String fieldsTerminatedBy) {
    this.fieldsTerminatedBy = fieldsTerminatedBy;
    return this;
  }

  /**
   * Specifies the character that separates columns within each row (line) of the file.
   * @return fieldsTerminatedBy
   */
  @javax.annotation.Nullable
  public String getFieldsTerminatedBy() {
    return fieldsTerminatedBy;
  }

  public void setFieldsTerminatedBy(String fieldsTerminatedBy) {
    this.fieldsTerminatedBy = fieldsTerminatedBy;
  }


  public ExportContextCsvExportOptions linesTerminatedBy(String linesTerminatedBy) {
    this.linesTerminatedBy = linesTerminatedBy;
    return this;
  }

  /**
   * This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.
   * @return linesTerminatedBy
   */
  @javax.annotation.Nullable
  public String getLinesTerminatedBy() {
    return linesTerminatedBy;
  }

  public void setLinesTerminatedBy(String linesTerminatedBy) {
    this.linesTerminatedBy = linesTerminatedBy;
  }


  public ExportContextCsvExportOptions quoteCharacter(String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
    return this;
  }

  /**
   * Specifies the quoting character to be used when a data value is quoted.
   * @return quoteCharacter
   */
  @javax.annotation.Nullable
  public String getQuoteCharacter() {
    return quoteCharacter;
  }

  public void setQuoteCharacter(String quoteCharacter) {
    this.quoteCharacter = quoteCharacter;
  }


  public ExportContextCsvExportOptions selectQuery(String selectQuery) {
    this.selectQuery = selectQuery;
    return this;
  }

  /**
   * The select query used to extract the data.
   * @return selectQuery
   */
  @javax.annotation.Nullable
  public String getSelectQuery() {
    return selectQuery;
  }

  public void setSelectQuery(String selectQuery) {
    this.selectQuery = selectQuery;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportContextCsvExportOptions exportContextCsvExportOptions = (ExportContextCsvExportOptions) o;
    return Objects.equals(this.escapeCharacter, exportContextCsvExportOptions.escapeCharacter) &&
        Objects.equals(this.fieldsTerminatedBy, exportContextCsvExportOptions.fieldsTerminatedBy) &&
        Objects.equals(this.linesTerminatedBy, exportContextCsvExportOptions.linesTerminatedBy) &&
        Objects.equals(this.quoteCharacter, exportContextCsvExportOptions.quoteCharacter) &&
        Objects.equals(this.selectQuery, exportContextCsvExportOptions.selectQuery);
  }

  @Override
  public int hashCode() {
    return Objects.hash(escapeCharacter, fieldsTerminatedBy, linesTerminatedBy, quoteCharacter, selectQuery);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportContextCsvExportOptions {\n");
    sb.append("    escapeCharacter: ").append(toIndentedString(escapeCharacter)).append("\n");
    sb.append("    fieldsTerminatedBy: ").append(toIndentedString(fieldsTerminatedBy)).append("\n");
    sb.append("    linesTerminatedBy: ").append(toIndentedString(linesTerminatedBy)).append("\n");
    sb.append("    quoteCharacter: ").append(toIndentedString(quoteCharacter)).append("\n");
    sb.append("    selectQuery: ").append(toIndentedString(selectQuery)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("escapeCharacter");
    openapiFields.add("fieldsTerminatedBy");
    openapiFields.add("linesTerminatedBy");
    openapiFields.add("quoteCharacter");
    openapiFields.add("selectQuery");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportContextCsvExportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportContextCsvExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportContextCsvExportOptions is not found in the empty JSON string", ExportContextCsvExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportContextCsvExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportContextCsvExportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("escapeCharacter") != null && !jsonObj.get("escapeCharacter").isJsonNull()) && !jsonObj.get("escapeCharacter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `escapeCharacter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("escapeCharacter").toString()));
      }
      if ((jsonObj.get("fieldsTerminatedBy") != null && !jsonObj.get("fieldsTerminatedBy").isJsonNull()) && !jsonObj.get("fieldsTerminatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fieldsTerminatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fieldsTerminatedBy").toString()));
      }
      if ((jsonObj.get("linesTerminatedBy") != null && !jsonObj.get("linesTerminatedBy").isJsonNull()) && !jsonObj.get("linesTerminatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linesTerminatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linesTerminatedBy").toString()));
      }
      if ((jsonObj.get("quoteCharacter") != null && !jsonObj.get("quoteCharacter").isJsonNull()) && !jsonObj.get("quoteCharacter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quoteCharacter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quoteCharacter").toString()));
      }
      if ((jsonObj.get("selectQuery") != null && !jsonObj.get("selectQuery").isJsonNull()) && !jsonObj.get("selectQuery").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectQuery` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectQuery").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportContextCsvExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportContextCsvExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportContextCsvExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportContextCsvExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportContextCsvExportOptions>() {
           @Override
           public void write(JsonWriter out, ExportContextCsvExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportContextCsvExportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportContextCsvExportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportContextCsvExportOptions
   * @throws IOException if the JSON string is invalid with respect to ExportContextCsvExportOptions
   */
  public static ExportContextCsvExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportContextCsvExportOptions.class);
  }

  /**
   * Convert an instance of ExportContextCsvExportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

