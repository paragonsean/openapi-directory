/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SqlServerUserDetails;
import org.openapitools.client.model.UserPasswordValidationPolicy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Cloud SQL user resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  /**
   * Dual password status for the user.
   */
  @JsonAdapter(DualPasswordTypeEnum.Adapter.class)
  public enum DualPasswordTypeEnum {
    DUAL_PASSWORD_TYPE_UNSPECIFIED("DUAL_PASSWORD_TYPE_UNSPECIFIED"),
    
    NO_MODIFY_DUAL_PASSWORD("NO_MODIFY_DUAL_PASSWORD"),
    
    NO_DUAL_PASSWORD("NO_DUAL_PASSWORD"),
    
    DUAL_PASSWORD("DUAL_PASSWORD");

    private String value;

    DualPasswordTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DualPasswordTypeEnum fromValue(String value) {
      for (DualPasswordTypeEnum b : DualPasswordTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DualPasswordTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DualPasswordTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DualPasswordTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DualPasswordTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DualPasswordTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DUAL_PASSWORD_TYPE = "dualPasswordType";
  @SerializedName(SERIALIZED_NAME_DUAL_PASSWORD_TYPE)
  private DualPasswordTypeEnum dualPasswordType;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  private String host;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PASSWORD_POLICY = "passwordPolicy";
  @SerializedName(SERIALIZED_NAME_PASSWORD_POLICY)
  private UserPasswordValidationPolicy passwordPolicy;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_SQLSERVER_USER_DETAILS = "sqlserverUserDetails";
  @SerializedName(SERIALIZED_NAME_SQLSERVER_USER_DETAILS)
  private SqlServerUserDetails sqlserverUserDetails;

  /**
   * The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BUILT_IN("BUILT_IN"),
    
    CLOUD_IAM_USER("CLOUD_IAM_USER"),
    
    CLOUD_IAM_SERVICE_ACCOUNT("CLOUD_IAM_SERVICE_ACCOUNT"),
    
    CLOUD_IAM_GROUP("CLOUD_IAM_GROUP"),
    
    CLOUD_IAM_GROUP_USER("CLOUD_IAM_GROUP_USER"),
    
    CLOUD_IAM_GROUP_SERVICE_ACCOUNT("CLOUD_IAM_GROUP_SERVICE_ACCOUNT");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public User() {
  }

  public User dualPasswordType(DualPasswordTypeEnum dualPasswordType) {
    this.dualPasswordType = dualPasswordType;
    return this;
  }

  /**
   * Dual password status for the user.
   * @return dualPasswordType
   */
  @javax.annotation.Nullable
  public DualPasswordTypeEnum getDualPasswordType() {
    return dualPasswordType;
  }

  public void setDualPasswordType(DualPasswordTypeEnum dualPasswordType) {
    this.dualPasswordType = dualPasswordType;
  }


  public User etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * This field is deprecated and will be removed from a future version of the API.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  public User host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Optional. The host from which the user can connect. For &#x60;insert&#x60; operations, host defaults to an empty string. For &#x60;update&#x60; operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it&#39;s required; for a PostgreSQL or SQL Server instance, it&#39;s optional.
   * @return host
   */
  @javax.annotation.Nullable
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }


  public User instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
   * @return instance
   */
  @javax.annotation.Nullable
  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }


  public User kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#user&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the user in the Cloud SQL instance. Can be omitted for &#x60;update&#x60; because it is already specified in the URL.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password for the user.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public User passwordPolicy(UserPasswordValidationPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
    return this;
  }

  /**
   * Get passwordPolicy
   * @return passwordPolicy
   */
  @javax.annotation.Nullable
  public UserPasswordValidationPolicy getPasswordPolicy() {
    return passwordPolicy;
  }

  public void setPasswordPolicy(UserPasswordValidationPolicy passwordPolicy) {
    this.passwordPolicy = passwordPolicy;
  }


  public User project(String project) {
    this.project = project;
    return this;
  }

  /**
   * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
   * @return project
   */
  @javax.annotation.Nullable
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public User sqlserverUserDetails(SqlServerUserDetails sqlserverUserDetails) {
    this.sqlserverUserDetails = sqlserverUserDetails;
    return this;
  }

  /**
   * Get sqlserverUserDetails
   * @return sqlserverUserDetails
   */
  @javax.annotation.Nullable
  public SqlServerUserDetails getSqlserverUserDetails() {
    return sqlserverUserDetails;
  }

  public void setSqlserverUserDetails(SqlServerUserDetails sqlserverUserDetails) {
    this.sqlserverUserDetails = sqlserverUserDetails;
  }


  public User type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The user type. It determines the method to authenticate the user during login. The default is the database&#39;s built-in user type.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.dualPasswordType, user.dualPasswordType) &&
        Objects.equals(this.etag, user.etag) &&
        Objects.equals(this.host, user.host) &&
        Objects.equals(this.instance, user.instance) &&
        Objects.equals(this.kind, user.kind) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.passwordPolicy, user.passwordPolicy) &&
        Objects.equals(this.project, user.project) &&
        Objects.equals(this.sqlserverUserDetails, user.sqlserverUserDetails) &&
        Objects.equals(this.type, user.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dualPasswordType, etag, host, instance, kind, name, password, passwordPolicy, project, sqlserverUserDetails, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    dualPasswordType: ").append(toIndentedString(dualPasswordType)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    passwordPolicy: ").append(toIndentedString(passwordPolicy)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    sqlserverUserDetails: ").append(toIndentedString(sqlserverUserDetails)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dualPasswordType");
    openapiFields.add("etag");
    openapiFields.add("host");
    openapiFields.add("instance");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("passwordPolicy");
    openapiFields.add("project");
    openapiFields.add("sqlserverUserDetails");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dualPasswordType") != null && !jsonObj.get("dualPasswordType").isJsonNull()) && !jsonObj.get("dualPasswordType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dualPasswordType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dualPasswordType").toString()));
      }
      // validate the optional field `dualPasswordType`
      if (jsonObj.get("dualPasswordType") != null && !jsonObj.get("dualPasswordType").isJsonNull()) {
        DualPasswordTypeEnum.validateJsonElement(jsonObj.get("dualPasswordType"));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("host") != null && !jsonObj.get("host").isJsonNull()) && !jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `passwordPolicy`
      if (jsonObj.get("passwordPolicy") != null && !jsonObj.get("passwordPolicy").isJsonNull()) {
        UserPasswordValidationPolicy.validateJsonElement(jsonObj.get("passwordPolicy"));
      }
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
      // validate the optional field `sqlserverUserDetails`
      if (jsonObj.get("sqlserverUserDetails") != null && !jsonObj.get("sqlserverUserDetails").isJsonNull()) {
        SqlServerUserDetails.validateJsonElement(jsonObj.get("sqlserverUserDetails"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

