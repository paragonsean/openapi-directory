/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database instance local user password validation policy
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PasswordValidationPolicy {
  /**
   * The complexity of the password.
   */
  @JsonAdapter(ComplexityEnum.Adapter.class)
  public enum ComplexityEnum {
    UNSPECIFIED("COMPLEXITY_UNSPECIFIED"),
    
    DEFAULT("COMPLEXITY_DEFAULT");

    private String value;

    ComplexityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ComplexityEnum fromValue(String value) {
      for (ComplexityEnum b : ComplexityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ComplexityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ComplexityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ComplexityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ComplexityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ComplexityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COMPLEXITY = "complexity";
  @SerializedName(SERIALIZED_NAME_COMPLEXITY)
  private ComplexityEnum complexity;

  public static final String SERIALIZED_NAME_DISALLOW_COMPROMISED_CREDENTIALS = "disallowCompromisedCredentials";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DISALLOW_COMPROMISED_CREDENTIALS)
  private Boolean disallowCompromisedCredentials;

  public static final String SERIALIZED_NAME_DISALLOW_USERNAME_SUBSTRING = "disallowUsernameSubstring";
  @SerializedName(SERIALIZED_NAME_DISALLOW_USERNAME_SUBSTRING)
  private Boolean disallowUsernameSubstring;

  public static final String SERIALIZED_NAME_ENABLE_PASSWORD_POLICY = "enablePasswordPolicy";
  @SerializedName(SERIALIZED_NAME_ENABLE_PASSWORD_POLICY)
  private Boolean enablePasswordPolicy;

  public static final String SERIALIZED_NAME_MIN_LENGTH = "minLength";
  @SerializedName(SERIALIZED_NAME_MIN_LENGTH)
  private Integer minLength;

  public static final String SERIALIZED_NAME_PASSWORD_CHANGE_INTERVAL = "passwordChangeInterval";
  @SerializedName(SERIALIZED_NAME_PASSWORD_CHANGE_INTERVAL)
  private String passwordChangeInterval;

  public static final String SERIALIZED_NAME_REUSE_INTERVAL = "reuseInterval";
  @SerializedName(SERIALIZED_NAME_REUSE_INTERVAL)
  private Integer reuseInterval;

  public PasswordValidationPolicy() {
  }

  public PasswordValidationPolicy complexity(ComplexityEnum complexity) {
    this.complexity = complexity;
    return this;
  }

  /**
   * The complexity of the password.
   * @return complexity
   */
  @javax.annotation.Nullable
  public ComplexityEnum getComplexity() {
    return complexity;
  }

  public void setComplexity(ComplexityEnum complexity) {
    this.complexity = complexity;
  }


  @Deprecated
  public PasswordValidationPolicy disallowCompromisedCredentials(Boolean disallowCompromisedCredentials) {
    this.disallowCompromisedCredentials = disallowCompromisedCredentials;
    return this;
  }

  /**
   * This field is deprecated and will be removed in a future version of the API.
   * @return disallowCompromisedCredentials
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getDisallowCompromisedCredentials() {
    return disallowCompromisedCredentials;
  }

  @Deprecated
  public void setDisallowCompromisedCredentials(Boolean disallowCompromisedCredentials) {
    this.disallowCompromisedCredentials = disallowCompromisedCredentials;
  }


  public PasswordValidationPolicy disallowUsernameSubstring(Boolean disallowUsernameSubstring) {
    this.disallowUsernameSubstring = disallowUsernameSubstring;
    return this;
  }

  /**
   * Disallow username as a part of the password.
   * @return disallowUsernameSubstring
   */
  @javax.annotation.Nullable
  public Boolean getDisallowUsernameSubstring() {
    return disallowUsernameSubstring;
  }

  public void setDisallowUsernameSubstring(Boolean disallowUsernameSubstring) {
    this.disallowUsernameSubstring = disallowUsernameSubstring;
  }


  public PasswordValidationPolicy enablePasswordPolicy(Boolean enablePasswordPolicy) {
    this.enablePasswordPolicy = enablePasswordPolicy;
    return this;
  }

  /**
   * Whether the password policy is enabled or not.
   * @return enablePasswordPolicy
   */
  @javax.annotation.Nullable
  public Boolean getEnablePasswordPolicy() {
    return enablePasswordPolicy;
  }

  public void setEnablePasswordPolicy(Boolean enablePasswordPolicy) {
    this.enablePasswordPolicy = enablePasswordPolicy;
  }


  public PasswordValidationPolicy minLength(Integer minLength) {
    this.minLength = minLength;
    return this;
  }

  /**
   * Minimum number of characters allowed.
   * @return minLength
   */
  @javax.annotation.Nullable
  public Integer getMinLength() {
    return minLength;
  }

  public void setMinLength(Integer minLength) {
    this.minLength = minLength;
  }


  public PasswordValidationPolicy passwordChangeInterval(String passwordChangeInterval) {
    this.passwordChangeInterval = passwordChangeInterval;
    return this;
  }

  /**
   * Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
   * @return passwordChangeInterval
   */
  @javax.annotation.Nullable
  public String getPasswordChangeInterval() {
    return passwordChangeInterval;
  }

  public void setPasswordChangeInterval(String passwordChangeInterval) {
    this.passwordChangeInterval = passwordChangeInterval;
  }


  public PasswordValidationPolicy reuseInterval(Integer reuseInterval) {
    this.reuseInterval = reuseInterval;
    return this;
  }

  /**
   * Number of previous passwords that cannot be reused.
   * @return reuseInterval
   */
  @javax.annotation.Nullable
  public Integer getReuseInterval() {
    return reuseInterval;
  }

  public void setReuseInterval(Integer reuseInterval) {
    this.reuseInterval = reuseInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PasswordValidationPolicy passwordValidationPolicy = (PasswordValidationPolicy) o;
    return Objects.equals(this.complexity, passwordValidationPolicy.complexity) &&
        Objects.equals(this.disallowCompromisedCredentials, passwordValidationPolicy.disallowCompromisedCredentials) &&
        Objects.equals(this.disallowUsernameSubstring, passwordValidationPolicy.disallowUsernameSubstring) &&
        Objects.equals(this.enablePasswordPolicy, passwordValidationPolicy.enablePasswordPolicy) &&
        Objects.equals(this.minLength, passwordValidationPolicy.minLength) &&
        Objects.equals(this.passwordChangeInterval, passwordValidationPolicy.passwordChangeInterval) &&
        Objects.equals(this.reuseInterval, passwordValidationPolicy.reuseInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complexity, disallowCompromisedCredentials, disallowUsernameSubstring, enablePasswordPolicy, minLength, passwordChangeInterval, reuseInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PasswordValidationPolicy {\n");
    sb.append("    complexity: ").append(toIndentedString(complexity)).append("\n");
    sb.append("    disallowCompromisedCredentials: ").append(toIndentedString(disallowCompromisedCredentials)).append("\n");
    sb.append("    disallowUsernameSubstring: ").append(toIndentedString(disallowUsernameSubstring)).append("\n");
    sb.append("    enablePasswordPolicy: ").append(toIndentedString(enablePasswordPolicy)).append("\n");
    sb.append("    minLength: ").append(toIndentedString(minLength)).append("\n");
    sb.append("    passwordChangeInterval: ").append(toIndentedString(passwordChangeInterval)).append("\n");
    sb.append("    reuseInterval: ").append(toIndentedString(reuseInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complexity");
    openapiFields.add("disallowCompromisedCredentials");
    openapiFields.add("disallowUsernameSubstring");
    openapiFields.add("enablePasswordPolicy");
    openapiFields.add("minLength");
    openapiFields.add("passwordChangeInterval");
    openapiFields.add("reuseInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PasswordValidationPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PasswordValidationPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PasswordValidationPolicy is not found in the empty JSON string", PasswordValidationPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PasswordValidationPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PasswordValidationPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("complexity") != null && !jsonObj.get("complexity").isJsonNull()) && !jsonObj.get("complexity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complexity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complexity").toString()));
      }
      // validate the optional field `complexity`
      if (jsonObj.get("complexity") != null && !jsonObj.get("complexity").isJsonNull()) {
        ComplexityEnum.validateJsonElement(jsonObj.get("complexity"));
      }
      if ((jsonObj.get("passwordChangeInterval") != null && !jsonObj.get("passwordChangeInterval").isJsonNull()) && !jsonObj.get("passwordChangeInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordChangeInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordChangeInterval").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PasswordValidationPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PasswordValidationPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PasswordValidationPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PasswordValidationPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<PasswordValidationPolicy>() {
           @Override
           public void write(JsonWriter out, PasswordValidationPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PasswordValidationPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PasswordValidationPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PasswordValidationPolicy
   * @throws IOException if the JSON string is invalid with respect to PasswordValidationPolicy
   */
  public static PasswordValidationPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PasswordValidationPolicy.class);
  }

  /**
   * Convert an instance of PasswordValidationPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

