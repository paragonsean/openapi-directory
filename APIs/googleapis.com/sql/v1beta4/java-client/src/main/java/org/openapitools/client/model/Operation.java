/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ApiWarning;
import org.openapitools.client.model.BackupContext;
import org.openapitools.client.model.ExportContext;
import org.openapitools.client.model.ImportContext;
import org.openapitools.client.model.OperationErrors;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Operation {
  public static final String SERIALIZED_NAME_API_WARNING = "apiWarning";
  @SerializedName(SERIALIZED_NAME_API_WARNING)
  private ApiWarning apiWarning;

  public static final String SERIALIZED_NAME_BACKUP_CONTEXT = "backupContext";
  @SerializedName(SERIALIZED_NAME_BACKUP_CONTEXT)
  private BackupContext backupContext;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private OperationErrors error;

  public static final String SERIALIZED_NAME_EXPORT_CONTEXT = "exportContext";
  @SerializedName(SERIALIZED_NAME_EXPORT_CONTEXT)
  private ExportContext exportContext;

  public static final String SERIALIZED_NAME_IMPORT_CONTEXT = "importContext";
  @SerializedName(SERIALIZED_NAME_IMPORT_CONTEXT)
  private ImportContext importContext;

  public static final String SERIALIZED_NAME_INSERT_TIME = "insertTime";
  @SerializedName(SERIALIZED_NAME_INSERT_TIME)
  private String insertTime;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The type of the operation. Valid values are: * &#x60;CREATE&#x60; * &#x60;DELETE&#x60; * &#x60;UPDATE&#x60; * &#x60;RESTART&#x60; * &#x60;IMPORT&#x60; * &#x60;EXPORT&#x60; * &#x60;BACKUP_VOLUME&#x60; * &#x60;RESTORE_VOLUME&#x60; * &#x60;CREATE_USER&#x60; * &#x60;DELETE_USER&#x60; * &#x60;CREATE_DATABASE&#x60; * &#x60;DELETE_DATABASE&#x60;
   */
  @JsonAdapter(OperationTypeEnum.Adapter.class)
  public enum OperationTypeEnum {
    SQL_OPERATION_TYPE_UNSPECIFIED("SQL_OPERATION_TYPE_UNSPECIFIED"),
    
    IMPORT("IMPORT"),
    
    EXPORT("EXPORT"),
    
    CREATE("CREATE"),
    
    UPDATE("UPDATE"),
    
    DELETE("DELETE"),
    
    RESTART("RESTART"),
    
    BACKUP("BACKUP"),
    
    SNAPSHOT("SNAPSHOT"),
    
    BACKUP_VOLUME("BACKUP_VOLUME"),
    
    DELETE_VOLUME("DELETE_VOLUME"),
    
    RESTORE_VOLUME("RESTORE_VOLUME"),
    
    INJECT_USER("INJECT_USER"),
    
    CLONE("CLONE"),
    
    STOP_REPLICA("STOP_REPLICA"),
    
    START_REPLICA("START_REPLICA"),
    
    PROMOTE_REPLICA("PROMOTE_REPLICA"),
    
    CREATE_REPLICA("CREATE_REPLICA"),
    
    CREATE_USER("CREATE_USER"),
    
    DELETE_USER("DELETE_USER"),
    
    UPDATE_USER("UPDATE_USER"),
    
    CREATE_DATABASE("CREATE_DATABASE"),
    
    DELETE_DATABASE("DELETE_DATABASE"),
    
    UPDATE_DATABASE("UPDATE_DATABASE"),
    
    FAILOVER("FAILOVER"),
    
    DELETE_BACKUP("DELETE_BACKUP"),
    
    RECREATE_REPLICA("RECREATE_REPLICA"),
    
    TRUNCATE_LOG("TRUNCATE_LOG"),
    
    DEMOTE_MASTER("DEMOTE_MASTER"),
    
    MAINTENANCE("MAINTENANCE"),
    
    ENABLE_PRIVATE_IP("ENABLE_PRIVATE_IP"),
    
    DEFER_MAINTENANCE("DEFER_MAINTENANCE"),
    
    CREATE_CLONE("CREATE_CLONE"),
    
    RESCHEDULE_MAINTENANCE("RESCHEDULE_MAINTENANCE"),
    
    START_EXTERNAL_SYNC("START_EXTERNAL_SYNC"),
    
    LOG_CLEANUP("LOG_CLEANUP"),
    
    AUTO_RESTART("AUTO_RESTART"),
    
    REENCRYPT("REENCRYPT"),
    
    SWITCHOVER("SWITCHOVER");

    private String value;

    OperationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OperationTypeEnum fromValue(String value) {
      for (OperationTypeEnum b : OperationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OperationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OperationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OperationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OperationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OperationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OPERATION_TYPE = "operationType";
  @SerializedName(SERIALIZED_NAME_OPERATION_TYPE)
  private OperationTypeEnum operationType;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The status of an operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SQL_OPERATION_STATUS_UNSPECIFIED("SQL_OPERATION_STATUS_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    RUNNING("RUNNING"),
    
    DONE("DONE");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TARGET_ID = "targetId";
  @SerializedName(SERIALIZED_NAME_TARGET_ID)
  private String targetId;

  public static final String SERIALIZED_NAME_TARGET_LINK = "targetLink";
  @SerializedName(SERIALIZED_NAME_TARGET_LINK)
  private String targetLink;

  public static final String SERIALIZED_NAME_TARGET_PROJECT = "targetProject";
  @SerializedName(SERIALIZED_NAME_TARGET_PROJECT)
  private String targetProject;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private String user;

  public Operation() {
  }

  public Operation apiWarning(ApiWarning apiWarning) {
    this.apiWarning = apiWarning;
    return this;
  }

  /**
   * Get apiWarning
   * @return apiWarning
   */
  @javax.annotation.Nullable
  public ApiWarning getApiWarning() {
    return apiWarning;
  }

  public void setApiWarning(ApiWarning apiWarning) {
    this.apiWarning = apiWarning;
  }


  public Operation backupContext(BackupContext backupContext) {
    this.backupContext = backupContext;
    return this;
  }

  /**
   * Get backupContext
   * @return backupContext
   */
  @javax.annotation.Nullable
  public BackupContext getBackupContext() {
    return backupContext;
  }

  public void setBackupContext(BackupContext backupContext) {
    this.backupContext = backupContext;
  }


  public Operation endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public Operation error(OperationErrors error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public OperationErrors getError() {
    return error;
  }

  public void setError(OperationErrors error) {
    this.error = error;
  }


  public Operation exportContext(ExportContext exportContext) {
    this.exportContext = exportContext;
    return this;
  }

  /**
   * Get exportContext
   * @return exportContext
   */
  @javax.annotation.Nullable
  public ExportContext getExportContext() {
    return exportContext;
  }

  public void setExportContext(ExportContext exportContext) {
    this.exportContext = exportContext;
  }


  public Operation importContext(ImportContext importContext) {
    this.importContext = importContext;
    return this;
  }

  /**
   * Get importContext
   * @return importContext
   */
  @javax.annotation.Nullable
  public ImportContext getImportContext() {
    return importContext;
  }

  public void setImportContext(ImportContext importContext) {
    this.importContext = importContext;
  }


  public Operation insertTime(String insertTime) {
    this.insertTime = insertTime;
    return this;
  }

  /**
   * The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return insertTime
   */
  @javax.annotation.Nullable
  public String getInsertTime() {
    return insertTime;
  }

  public void setInsertTime(String insertTime) {
    this.insertTime = insertTime;
  }


  public Operation kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#operation&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Operation name(String name) {
    this.name = name;
    return this;
  }

  /**
   * An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Operation operationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
    return this;
  }

  /**
   * The type of the operation. Valid values are: * &#x60;CREATE&#x60; * &#x60;DELETE&#x60; * &#x60;UPDATE&#x60; * &#x60;RESTART&#x60; * &#x60;IMPORT&#x60; * &#x60;EXPORT&#x60; * &#x60;BACKUP_VOLUME&#x60; * &#x60;RESTORE_VOLUME&#x60; * &#x60;CREATE_USER&#x60; * &#x60;DELETE_USER&#x60; * &#x60;CREATE_DATABASE&#x60; * &#x60;DELETE_DATABASE&#x60;
   * @return operationType
   */
  @javax.annotation.Nullable
  public OperationTypeEnum getOperationType() {
    return operationType;
  }

  public void setOperationType(OperationTypeEnum operationType) {
    this.operationType = operationType;
  }


  public Operation selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The URI of this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public Operation startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public Operation status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of an operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Operation targetId(String targetId) {
    this.targetId = targetId;
    return this;
  }

  /**
   * Name of the database instance related to this operation.
   * @return targetId
   */
  @javax.annotation.Nullable
  public String getTargetId() {
    return targetId;
  }

  public void setTargetId(String targetId) {
    this.targetId = targetId;
  }


  public Operation targetLink(String targetLink) {
    this.targetLink = targetLink;
    return this;
  }

  /**
   * Get targetLink
   * @return targetLink
   */
  @javax.annotation.Nullable
  public String getTargetLink() {
    return targetLink;
  }

  public void setTargetLink(String targetLink) {
    this.targetLink = targetLink;
  }


  public Operation targetProject(String targetProject) {
    this.targetProject = targetProject;
    return this;
  }

  /**
   * The project ID of the target instance related to this operation.
   * @return targetProject
   */
  @javax.annotation.Nullable
  public String getTargetProject() {
    return targetProject;
  }

  public void setTargetProject(String targetProject) {
    this.targetProject = targetProject;
  }


  public Operation user(String user) {
    this.user = user;
    return this;
  }

  /**
   * The email address of the user who initiated this operation.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Operation operation = (Operation) o;
    return Objects.equals(this.apiWarning, operation.apiWarning) &&
        Objects.equals(this.backupContext, operation.backupContext) &&
        Objects.equals(this.endTime, operation.endTime) &&
        Objects.equals(this.error, operation.error) &&
        Objects.equals(this.exportContext, operation.exportContext) &&
        Objects.equals(this.importContext, operation.importContext) &&
        Objects.equals(this.insertTime, operation.insertTime) &&
        Objects.equals(this.kind, operation.kind) &&
        Objects.equals(this.name, operation.name) &&
        Objects.equals(this.operationType, operation.operationType) &&
        Objects.equals(this.selfLink, operation.selfLink) &&
        Objects.equals(this.startTime, operation.startTime) &&
        Objects.equals(this.status, operation.status) &&
        Objects.equals(this.targetId, operation.targetId) &&
        Objects.equals(this.targetLink, operation.targetLink) &&
        Objects.equals(this.targetProject, operation.targetProject) &&
        Objects.equals(this.user, operation.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiWarning, backupContext, endTime, error, exportContext, importContext, insertTime, kind, name, operationType, selfLink, startTime, status, targetId, targetLink, targetProject, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Operation {\n");
    sb.append("    apiWarning: ").append(toIndentedString(apiWarning)).append("\n");
    sb.append("    backupContext: ").append(toIndentedString(backupContext)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    exportContext: ").append(toIndentedString(exportContext)).append("\n");
    sb.append("    importContext: ").append(toIndentedString(importContext)).append("\n");
    sb.append("    insertTime: ").append(toIndentedString(insertTime)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    operationType: ").append(toIndentedString(operationType)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    targetId: ").append(toIndentedString(targetId)).append("\n");
    sb.append("    targetLink: ").append(toIndentedString(targetLink)).append("\n");
    sb.append("    targetProject: ").append(toIndentedString(targetProject)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiWarning");
    openapiFields.add("backupContext");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("exportContext");
    openapiFields.add("importContext");
    openapiFields.add("insertTime");
    openapiFields.add("kind");
    openapiFields.add("name");
    openapiFields.add("operationType");
    openapiFields.add("selfLink");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("targetId");
    openapiFields.add("targetLink");
    openapiFields.add("targetProject");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Operation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Operation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Operation is not found in the empty JSON string", Operation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Operation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Operation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `apiWarning`
      if (jsonObj.get("apiWarning") != null && !jsonObj.get("apiWarning").isJsonNull()) {
        ApiWarning.validateJsonElement(jsonObj.get("apiWarning"));
      }
      // validate the optional field `backupContext`
      if (jsonObj.get("backupContext") != null && !jsonObj.get("backupContext").isJsonNull()) {
        BackupContext.validateJsonElement(jsonObj.get("backupContext"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        OperationErrors.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `exportContext`
      if (jsonObj.get("exportContext") != null && !jsonObj.get("exportContext").isJsonNull()) {
        ExportContext.validateJsonElement(jsonObj.get("exportContext"));
      }
      // validate the optional field `importContext`
      if (jsonObj.get("importContext") != null && !jsonObj.get("importContext").isJsonNull()) {
        ImportContext.validateJsonElement(jsonObj.get("importContext"));
      }
      if ((jsonObj.get("insertTime") != null && !jsonObj.get("insertTime").isJsonNull()) && !jsonObj.get("insertTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `insertTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("insertTime").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) && !jsonObj.get("operationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operationType").toString()));
      }
      // validate the optional field `operationType`
      if (jsonObj.get("operationType") != null && !jsonObj.get("operationType").isJsonNull()) {
        OperationTypeEnum.validateJsonElement(jsonObj.get("operationType"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("targetId") != null && !jsonObj.get("targetId").isJsonNull()) && !jsonObj.get("targetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetId").toString()));
      }
      if ((jsonObj.get("targetLink") != null && !jsonObj.get("targetLink").isJsonNull()) && !jsonObj.get("targetLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetLink").toString()));
      }
      if ((jsonObj.get("targetProject") != null && !jsonObj.get("targetProject").isJsonNull()) && !jsonObj.get("targetProject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetProject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetProject").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Operation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Operation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Operation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Operation.class));

       return (TypeAdapter<T>) new TypeAdapter<Operation>() {
           @Override
           public void write(JsonWriter out, Operation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Operation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Operation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Operation
   * @throws IOException if the JSON string is invalid with respect to Operation
   */
  public static Operation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Operation.class);
  }

  /**
   * Convert an instance of Operation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

