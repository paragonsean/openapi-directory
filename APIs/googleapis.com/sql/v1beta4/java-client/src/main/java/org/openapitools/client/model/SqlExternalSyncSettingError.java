/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * External primary instance migration setting error/warning.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlExternalSyncSettingError {
  public static final String SERIALIZED_NAME_DETAIL = "detail";
  @SerializedName(SERIALIZED_NAME_DETAIL)
  private String detail;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  /**
   * Identifies the specific error that occurred.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED("SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED"),
    
    CONNECTION_FAILURE("CONNECTION_FAILURE"),
    
    BINLOG_NOT_ENABLED("BINLOG_NOT_ENABLED"),
    
    INCOMPATIBLE_DATABASE_VERSION("INCOMPATIBLE_DATABASE_VERSION"),
    
    REPLICA_ALREADY_SETUP("REPLICA_ALREADY_SETUP"),
    
    INSUFFICIENT_PRIVILEGE("INSUFFICIENT_PRIVILEGE"),
    
    UNSUPPORTED_MIGRATION_TYPE("UNSUPPORTED_MIGRATION_TYPE"),
    
    NO_PGLOGICAL_INSTALLED("NO_PGLOGICAL_INSTALLED"),
    
    PGLOGICAL_NODE_ALREADY_EXISTS("PGLOGICAL_NODE_ALREADY_EXISTS"),
    
    INVALID_WAL_LEVEL("INVALID_WAL_LEVEL"),
    
    INVALID_SHARED_PRELOAD_LIBRARY("INVALID_SHARED_PRELOAD_LIBRARY"),
    
    INSUFFICIENT_MAX_REPLICATION_SLOTS("INSUFFICIENT_MAX_REPLICATION_SLOTS"),
    
    INSUFFICIENT_MAX_WAL_SENDERS("INSUFFICIENT_MAX_WAL_SENDERS"),
    
    INSUFFICIENT_MAX_WORKER_PROCESSES("INSUFFICIENT_MAX_WORKER_PROCESSES"),
    
    UNSUPPORTED_EXTENSIONS("UNSUPPORTED_EXTENSIONS"),
    
    INVALID_RDS_LOGICAL_REPLICATION("INVALID_RDS_LOGICAL_REPLICATION"),
    
    INVALID_LOGGING_SETUP("INVALID_LOGGING_SETUP"),
    
    INVALID_DB_PARAM("INVALID_DB_PARAM"),
    
    UNSUPPORTED_GTID_MODE("UNSUPPORTED_GTID_MODE"),
    
    SQLSERVER_AGENT_NOT_RUNNING("SQLSERVER_AGENT_NOT_RUNNING"),
    
    UNSUPPORTED_TABLE_DEFINITION("UNSUPPORTED_TABLE_DEFINITION"),
    
    UNSUPPORTED_DEFINER("UNSUPPORTED_DEFINER"),
    
    SQLSERVER_SERVERNAME_MISMATCH("SQLSERVER_SERVERNAME_MISMATCH"),
    
    PRIMARY_ALREADY_SETUP("PRIMARY_ALREADY_SETUP"),
    
    UNSUPPORTED_BINLOG_FORMAT("UNSUPPORTED_BINLOG_FORMAT"),
    
    BINLOG_RETENTION_SETTING("BINLOG_RETENTION_SETTING"),
    
    UNSUPPORTED_STORAGE_ENGINE("UNSUPPORTED_STORAGE_ENGINE"),
    
    LIMITED_SUPPORT_TABLES("LIMITED_SUPPORT_TABLES"),
    
    EXISTING_DATA_IN_REPLICA("EXISTING_DATA_IN_REPLICA"),
    
    MISSING_OPTIONAL_PRIVILEGES("MISSING_OPTIONAL_PRIVILEGES"),
    
    RISKY_BACKUP_ADMIN_PRIVILEGE("RISKY_BACKUP_ADMIN_PRIVILEGE"),
    
    INSUFFICIENT_GCS_PERMISSIONS("INSUFFICIENT_GCS_PERMISSIONS"),
    
    INVALID_FILE_INFO("INVALID_FILE_INFO"),
    
    UNSUPPORTED_DATABASE_SETTINGS("UNSUPPORTED_DATABASE_SETTINGS"),
    
    MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE("MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE"),
    
    LOCAL_INFILE_OFF("LOCAL_INFILE_OFF"),
    
    TURN_ON_PITR_AFTER_PROMOTE("TURN_ON_PITR_AFTER_PROMOTE"),
    
    INCOMPATIBLE_DATABASE_MINOR_VERSION("INCOMPATIBLE_DATABASE_MINOR_VERSION"),
    
    SOURCE_MAX_SUBSCRIPTIONS("SOURCE_MAX_SUBSCRIPTIONS"),
    
    UNABLE_TO_VERIFY_DEFINERS("UNABLE_TO_VERIFY_DEFINERS"),
    
    SUBSCRIPTION_CALCULATION_STATUS("SUBSCRIPTION_CALCULATION_STATUS"),
    
    PG_SUBSCRIPTION_COUNT("PG_SUBSCRIPTION_COUNT"),
    
    PG_SYNC_PARALLEL_LEVEL("PG_SYNC_PARALLEL_LEVEL"),
    
    INSUFFICIENT_DISK_SIZE("INSUFFICIENT_DISK_SIZE"),
    
    INSUFFICIENT_MACHINE_TIER("INSUFFICIENT_MACHINE_TIER");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public SqlExternalSyncSettingError() {
  }

  public SqlExternalSyncSettingError detail(String detail) {
    this.detail = detail;
    return this;
  }

  /**
   * Additional information about the error encountered.
   * @return detail
   */
  @javax.annotation.Nullable
  public String getDetail() {
    return detail;
  }

  public void setDetail(String detail) {
    this.detail = detail;
  }


  public SqlExternalSyncSettingError kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Can be &#x60;sql#externalSyncSettingError&#x60; or &#x60;sql#externalSyncSettingWarning&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public SqlExternalSyncSettingError type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Identifies the specific error that occurred.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlExternalSyncSettingError sqlExternalSyncSettingError = (SqlExternalSyncSettingError) o;
    return Objects.equals(this.detail, sqlExternalSyncSettingError.detail) &&
        Objects.equals(this.kind, sqlExternalSyncSettingError.kind) &&
        Objects.equals(this.type, sqlExternalSyncSettingError.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(detail, kind, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlExternalSyncSettingError {\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("detail");
    openapiFields.add("kind");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlExternalSyncSettingError
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlExternalSyncSettingError.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlExternalSyncSettingError is not found in the empty JSON string", SqlExternalSyncSettingError.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlExternalSyncSettingError.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlExternalSyncSettingError` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("detail") != null && !jsonObj.get("detail").isJsonNull()) && !jsonObj.get("detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("detail").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlExternalSyncSettingError.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlExternalSyncSettingError' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlExternalSyncSettingError> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlExternalSyncSettingError.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlExternalSyncSettingError>() {
           @Override
           public void write(JsonWriter out, SqlExternalSyncSettingError value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlExternalSyncSettingError read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlExternalSyncSettingError given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlExternalSyncSettingError
   * @throws IOException if the JSON string is invalid with respect to SqlExternalSyncSettingError
   */
  public static SqlExternalSyncSettingError fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlExternalSyncSettingError.class);
  }

  /**
   * Convert an instance of SqlExternalSyncSettingError to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

