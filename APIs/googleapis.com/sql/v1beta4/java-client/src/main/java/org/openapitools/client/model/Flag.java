/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A flag resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Flag {
  public static final String SERIALIZED_NAME_ALLOWED_INT_VALUES = "allowedIntValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_INT_VALUES)
  private List<String> allowedIntValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALLOWED_STRING_VALUES = "allowedStringValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_STRING_VALUES)
  private List<String> allowedStringValues = new ArrayList<>();

  /**
   * Gets or Sets appliesTo
   */
  @JsonAdapter(AppliesToEnum.Adapter.class)
  public enum AppliesToEnum {
    SQL_DATABASE_VERSION_UNSPECIFIED("SQL_DATABASE_VERSION_UNSPECIFIED"),
    
    MYSQL_5_1("MYSQL_5_1"),
    
    MYSQL_5_5("MYSQL_5_5"),
    
    MYSQL_5_6("MYSQL_5_6"),
    
    MYSQL_5_7("MYSQL_5_7"),
    
    SQLSERVER_2017_STANDARD("SQLSERVER_2017_STANDARD"),
    
    SQLSERVER_2017_ENTERPRISE("SQLSERVER_2017_ENTERPRISE"),
    
    SQLSERVER_2017_EXPRESS("SQLSERVER_2017_EXPRESS"),
    
    SQLSERVER_2017_WEB("SQLSERVER_2017_WEB"),
    
    POSTGRES_9_6("POSTGRES_9_6"),
    
    POSTGRES_10("POSTGRES_10"),
    
    POSTGRES_11("POSTGRES_11"),
    
    POSTGRES_12("POSTGRES_12"),
    
    POSTGRES_13("POSTGRES_13"),
    
    POSTGRES_14("POSTGRES_14"),
    
    POSTGRES_15("POSTGRES_15"),
    
    MYSQL_8_0("MYSQL_8_0"),
    
    MYSQL_8_0_18("MYSQL_8_0_18"),
    
    MYSQL_8_0_26("MYSQL_8_0_26"),
    
    MYSQL_8_0_27("MYSQL_8_0_27"),
    
    MYSQL_8_0_28("MYSQL_8_0_28"),
    
    MYSQL_8_0_29("MYSQL_8_0_29"),
    
    MYSQL_8_0_30("MYSQL_8_0_30"),
    
    MYSQL_8_0_31("MYSQL_8_0_31"),
    
    MYSQL_8_0_32("MYSQL_8_0_32"),
    
    MYSQL_8_0_33("MYSQL_8_0_33"),
    
    MYSQL_8_0_34("MYSQL_8_0_34"),
    
    MYSQL_8_0_35("MYSQL_8_0_35"),
    
    MYSQL_8_0_36("MYSQL_8_0_36"),
    
    SQLSERVER_2019_STANDARD("SQLSERVER_2019_STANDARD"),
    
    SQLSERVER_2019_ENTERPRISE("SQLSERVER_2019_ENTERPRISE"),
    
    SQLSERVER_2019_EXPRESS("SQLSERVER_2019_EXPRESS"),
    
    SQLSERVER_2019_WEB("SQLSERVER_2019_WEB"),
    
    SQLSERVER_2022_STANDARD("SQLSERVER_2022_STANDARD"),
    
    SQLSERVER_2022_ENTERPRISE("SQLSERVER_2022_ENTERPRISE"),
    
    SQLSERVER_2022_EXPRESS("SQLSERVER_2022_EXPRESS"),
    
    SQLSERVER_2022_WEB("SQLSERVER_2022_WEB");

    private String value;

    AppliesToEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AppliesToEnum fromValue(String value) {
      for (AppliesToEnum b : AppliesToEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AppliesToEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AppliesToEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AppliesToEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AppliesToEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AppliesToEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_APPLIES_TO = "appliesTo";
  @SerializedName(SERIALIZED_NAME_APPLIES_TO)
  private List<AppliesToEnum> appliesTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_IN_BETA = "inBeta";
  @SerializedName(SERIALIZED_NAME_IN_BETA)
  private Boolean inBeta;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private String maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private String minValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REQUIRES_RESTART = "requiresRestart";
  @SerializedName(SERIALIZED_NAME_REQUIRES_RESTART)
  private Boolean requiresRestart;

  /**
   * The type of the flag. Flags are typed to being &#x60;BOOLEAN&#x60;, &#x60;STRING&#x60;, &#x60;INTEGER&#x60; or &#x60;NONE&#x60;. &#x60;NONE&#x60; is used for flags which do not take a value, such as &#x60;skip_grant_tables&#x60;.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SQL_FLAG_TYPE_UNSPECIFIED("SQL_FLAG_TYPE_UNSPECIFIED"),
    
    BOOLEAN("BOOLEAN"),
    
    STRING("STRING"),
    
    INTEGER("INTEGER"),
    
    NONE("NONE"),
    
    MYSQL_TIMEZONE_OFFSET("MYSQL_TIMEZONE_OFFSET"),
    
    FLOAT("FLOAT"),
    
    REPEATED_STRING("REPEATED_STRING");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public Flag() {
  }

  public Flag allowedIntValues(List<String> allowedIntValues) {
    this.allowedIntValues = allowedIntValues;
    return this;
  }

  public Flag addAllowedIntValuesItem(String allowedIntValuesItem) {
    if (this.allowedIntValues == null) {
      this.allowedIntValues = new ArrayList<>();
    }
    this.allowedIntValues.add(allowedIntValuesItem);
    return this;
  }

  /**
   * Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.
   * @return allowedIntValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedIntValues() {
    return allowedIntValues;
  }

  public void setAllowedIntValues(List<String> allowedIntValues) {
    this.allowedIntValues = allowedIntValues;
  }


  public Flag allowedStringValues(List<String> allowedStringValues) {
    this.allowedStringValues = allowedStringValues;
    return this;
  }

  public Flag addAllowedStringValuesItem(String allowedStringValuesItem) {
    if (this.allowedStringValues == null) {
      this.allowedStringValues = new ArrayList<>();
    }
    this.allowedStringValues.add(allowedStringValuesItem);
    return this;
  }

  /**
   * For &#x60;STRING&#x60; flags, a list of strings that the value can be set to.
   * @return allowedStringValues
   */
  @javax.annotation.Nullable
  public List<String> getAllowedStringValues() {
    return allowedStringValues;
  }

  public void setAllowedStringValues(List<String> allowedStringValues) {
    this.allowedStringValues = allowedStringValues;
  }


  public Flag appliesTo(List<AppliesToEnum> appliesTo) {
    this.appliesTo = appliesTo;
    return this;
  }

  public Flag addAppliesToItem(AppliesToEnum appliesToItem) {
    if (this.appliesTo == null) {
      this.appliesTo = new ArrayList<>();
    }
    this.appliesTo.add(appliesToItem);
    return this;
  }

  /**
   * The database version this flag applies to. Can be MySQL instances: &#x60;MYSQL_8_0&#x60;, &#x60;MYSQL_8_0_18&#x60;, &#x60;MYSQL_8_0_26&#x60;, &#x60;MYSQL_5_7&#x60;, or &#x60;MYSQL_5_6&#x60;. PostgreSQL instances: &#x60;POSTGRES_9_6&#x60;, &#x60;POSTGRES_10&#x60;, &#x60;POSTGRES_11&#x60; or &#x60;POSTGRES_12&#x60;. SQL Server instances: &#x60;SQLSERVER_2017_STANDARD&#x60;, &#x60;SQLSERVER_2017_ENTERPRISE&#x60;, &#x60;SQLSERVER_2017_EXPRESS&#x60;, &#x60;SQLSERVER_2017_WEB&#x60;, &#x60;SQLSERVER_2019_STANDARD&#x60;, &#x60;SQLSERVER_2019_ENTERPRISE&#x60;, &#x60;SQLSERVER_2019_EXPRESS&#x60;, or &#x60;SQLSERVER_2019_WEB&#x60;. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
   * @return appliesTo
   */
  @javax.annotation.Nullable
  public List<AppliesToEnum> getAppliesTo() {
    return appliesTo;
  }

  public void setAppliesTo(List<AppliesToEnum> appliesTo) {
    this.appliesTo = appliesTo;
  }


  public Flag inBeta(Boolean inBeta) {
    this.inBeta = inBeta;
    return this;
  }

  /**
   * Whether or not the flag is considered in beta.
   * @return inBeta
   */
  @javax.annotation.Nullable
  public Boolean getInBeta() {
    return inBeta;
  }

  public void setInBeta(Boolean inBeta) {
    this.inBeta = inBeta;
  }


  public Flag kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#flag&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Flag maxValue(String maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * For &#x60;INTEGER&#x60; flags, the maximum allowed value.
   * @return maxValue
   */
  @javax.annotation.Nullable
  public String getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(String maxValue) {
    this.maxValue = maxValue;
  }


  public Flag minValue(String minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * For &#x60;INTEGER&#x60; flags, the minimum allowed value.
   * @return minValue
   */
  @javax.annotation.Nullable
  public String getMinValue() {
    return minValue;
  }

  public void setMinValue(String minValue) {
    this.minValue = minValue;
  }


  public Flag name(String name) {
    this.name = name;
    return this;
  }

  /**
   * This is the name of the flag. Flag names always use underscores, not hyphens, for example: &#x60;max_allowed_packet&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Flag requiresRestart(Boolean requiresRestart) {
    this.requiresRestart = requiresRestart;
    return this;
  }

  /**
   * Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
   * @return requiresRestart
   */
  @javax.annotation.Nullable
  public Boolean getRequiresRestart() {
    return requiresRestart;
  }

  public void setRequiresRestart(Boolean requiresRestart) {
    this.requiresRestart = requiresRestart;
  }


  public Flag type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the flag. Flags are typed to being &#x60;BOOLEAN&#x60;, &#x60;STRING&#x60;, &#x60;INTEGER&#x60; or &#x60;NONE&#x60;. &#x60;NONE&#x60; is used for flags which do not take a value, such as &#x60;skip_grant_tables&#x60;.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Flag flag = (Flag) o;
    return Objects.equals(this.allowedIntValues, flag.allowedIntValues) &&
        Objects.equals(this.allowedStringValues, flag.allowedStringValues) &&
        Objects.equals(this.appliesTo, flag.appliesTo) &&
        Objects.equals(this.inBeta, flag.inBeta) &&
        Objects.equals(this.kind, flag.kind) &&
        Objects.equals(this.maxValue, flag.maxValue) &&
        Objects.equals(this.minValue, flag.minValue) &&
        Objects.equals(this.name, flag.name) &&
        Objects.equals(this.requiresRestart, flag.requiresRestart) &&
        Objects.equals(this.type, flag.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedIntValues, allowedStringValues, appliesTo, inBeta, kind, maxValue, minValue, name, requiresRestart, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Flag {\n");
    sb.append("    allowedIntValues: ").append(toIndentedString(allowedIntValues)).append("\n");
    sb.append("    allowedStringValues: ").append(toIndentedString(allowedStringValues)).append("\n");
    sb.append("    appliesTo: ").append(toIndentedString(appliesTo)).append("\n");
    sb.append("    inBeta: ").append(toIndentedString(inBeta)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    requiresRestart: ").append(toIndentedString(requiresRestart)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedIntValues");
    openapiFields.add("allowedStringValues");
    openapiFields.add("appliesTo");
    openapiFields.add("inBeta");
    openapiFields.add("kind");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("name");
    openapiFields.add("requiresRestart");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Flag
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Flag.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Flag is not found in the empty JSON string", Flag.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Flag.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Flag` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedIntValues") != null && !jsonObj.get("allowedIntValues").isJsonNull() && !jsonObj.get("allowedIntValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedIntValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedIntValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedStringValues") != null && !jsonObj.get("allowedStringValues").isJsonNull() && !jsonObj.get("allowedStringValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedStringValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedStringValues").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("appliesTo") != null && !jsonObj.get("appliesTo").isJsonNull() && !jsonObj.get("appliesTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appliesTo` to be an array in the JSON string but got `%s`", jsonObj.get("appliesTo").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("maxValue") != null && !jsonObj.get("maxValue").isJsonNull()) && !jsonObj.get("maxValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maxValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maxValue").toString()));
      }
      if ((jsonObj.get("minValue") != null && !jsonObj.get("minValue").isJsonNull()) && !jsonObj.get("minValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `minValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("minValue").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Flag.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Flag' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Flag> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Flag.class));

       return (TypeAdapter<T>) new TypeAdapter<Flag>() {
           @Override
           public void write(JsonWriter out, Flag value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Flag read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Flag given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Flag
   * @throws IOException if the JSON string is invalid with respect to Flag
   */
  public static Flag fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Flag.class);
  }

  /**
   * Convert an instance of Flag to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

