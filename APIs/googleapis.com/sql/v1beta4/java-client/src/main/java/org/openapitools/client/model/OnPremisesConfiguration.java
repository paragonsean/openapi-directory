/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.InstanceReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * On-premises instance configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OnPremisesConfiguration {
  public static final String SERIALIZED_NAME_CA_CERTIFICATE = "caCertificate";
  @SerializedName(SERIALIZED_NAME_CA_CERTIFICATE)
  private String caCertificate;

  public static final String SERIALIZED_NAME_CLIENT_CERTIFICATE = "clientCertificate";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERTIFICATE)
  private String clientCertificate;

  public static final String SERIALIZED_NAME_CLIENT_KEY = "clientKey";
  @SerializedName(SERIALIZED_NAME_CLIENT_KEY)
  private String clientKey;

  public static final String SERIALIZED_NAME_DUMP_FILE_PATH = "dumpFilePath";
  @SerializedName(SERIALIZED_NAME_DUMP_FILE_PATH)
  private String dumpFilePath;

  public static final String SERIALIZED_NAME_HOST_PORT = "hostPort";
  @SerializedName(SERIALIZED_NAME_HOST_PORT)
  private String hostPort;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_SOURCE_INSTANCE = "sourceInstance";
  @SerializedName(SERIALIZED_NAME_SOURCE_INSTANCE)
  private InstanceReference sourceInstance;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public OnPremisesConfiguration() {
  }

  public OnPremisesConfiguration caCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
    return this;
  }

  /**
   * PEM representation of the trusted CA&#39;s x509 certificate.
   * @return caCertificate
   */
  @javax.annotation.Nullable
  public String getCaCertificate() {
    return caCertificate;
  }

  public void setCaCertificate(String caCertificate) {
    this.caCertificate = caCertificate;
  }


  public OnPremisesConfiguration clientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
    return this;
  }

  /**
   * PEM representation of the replica&#39;s x509 certificate.
   * @return clientCertificate
   */
  @javax.annotation.Nullable
  public String getClientCertificate() {
    return clientCertificate;
  }

  public void setClientCertificate(String clientCertificate) {
    this.clientCertificate = clientCertificate;
  }


  public OnPremisesConfiguration clientKey(String clientKey) {
    this.clientKey = clientKey;
    return this;
  }

  /**
   * PEM representation of the replica&#39;s private key. The corresponsing public key is encoded in the client&#39;s certificate.
   * @return clientKey
   */
  @javax.annotation.Nullable
  public String getClientKey() {
    return clientKey;
  }

  public void setClientKey(String clientKey) {
    this.clientKey = clientKey;
  }


  public OnPremisesConfiguration dumpFilePath(String dumpFilePath) {
    this.dumpFilePath = dumpFilePath;
    return this;
  }

  /**
   * The dump file to create the Cloud SQL replica.
   * @return dumpFilePath
   */
  @javax.annotation.Nullable
  public String getDumpFilePath() {
    return dumpFilePath;
  }

  public void setDumpFilePath(String dumpFilePath) {
    this.dumpFilePath = dumpFilePath;
  }


  public OnPremisesConfiguration hostPort(String hostPort) {
    this.hostPort = hostPort;
    return this;
  }

  /**
   * The host and port of the on-premises instance in host:port format
   * @return hostPort
   */
  @javax.annotation.Nullable
  public String getHostPort() {
    return hostPort;
  }

  public void setHostPort(String hostPort) {
    this.hostPort = hostPort;
  }


  public OnPremisesConfiguration kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#onPremisesConfiguration&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public OnPremisesConfiguration password(String password) {
    this.password = password;
    return this;
  }

  /**
   * The password for connecting to on-premises instance.
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public OnPremisesConfiguration sourceInstance(InstanceReference sourceInstance) {
    this.sourceInstance = sourceInstance;
    return this;
  }

  /**
   * Get sourceInstance
   * @return sourceInstance
   */
  @javax.annotation.Nullable
  public InstanceReference getSourceInstance() {
    return sourceInstance;
  }

  public void setSourceInstance(InstanceReference sourceInstance) {
    this.sourceInstance = sourceInstance;
  }


  public OnPremisesConfiguration username(String username) {
    this.username = username;
    return this;
  }

  /**
   * The username for connecting to on-premises instance.
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnPremisesConfiguration onPremisesConfiguration = (OnPremisesConfiguration) o;
    return Objects.equals(this.caCertificate, onPremisesConfiguration.caCertificate) &&
        Objects.equals(this.clientCertificate, onPremisesConfiguration.clientCertificate) &&
        Objects.equals(this.clientKey, onPremisesConfiguration.clientKey) &&
        Objects.equals(this.dumpFilePath, onPremisesConfiguration.dumpFilePath) &&
        Objects.equals(this.hostPort, onPremisesConfiguration.hostPort) &&
        Objects.equals(this.kind, onPremisesConfiguration.kind) &&
        Objects.equals(this.password, onPremisesConfiguration.password) &&
        Objects.equals(this.sourceInstance, onPremisesConfiguration.sourceInstance) &&
        Objects.equals(this.username, onPremisesConfiguration.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(caCertificate, clientCertificate, clientKey, dumpFilePath, hostPort, kind, password, sourceInstance, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnPremisesConfiguration {\n");
    sb.append("    caCertificate: ").append(toIndentedString(caCertificate)).append("\n");
    sb.append("    clientCertificate: ").append(toIndentedString(clientCertificate)).append("\n");
    sb.append("    clientKey: ").append(toIndentedString(clientKey)).append("\n");
    sb.append("    dumpFilePath: ").append(toIndentedString(dumpFilePath)).append("\n");
    sb.append("    hostPort: ").append(toIndentedString(hostPort)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    sourceInstance: ").append(toIndentedString(sourceInstance)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("caCertificate");
    openapiFields.add("clientCertificate");
    openapiFields.add("clientKey");
    openapiFields.add("dumpFilePath");
    openapiFields.add("hostPort");
    openapiFields.add("kind");
    openapiFields.add("password");
    openapiFields.add("sourceInstance");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnPremisesConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnPremisesConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnPremisesConfiguration is not found in the empty JSON string", OnPremisesConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnPremisesConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnPremisesConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("caCertificate") != null && !jsonObj.get("caCertificate").isJsonNull()) && !jsonObj.get("caCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caCertificate").toString()));
      }
      if ((jsonObj.get("clientCertificate") != null && !jsonObj.get("clientCertificate").isJsonNull()) && !jsonObj.get("clientCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientCertificate").toString()));
      }
      if ((jsonObj.get("clientKey") != null && !jsonObj.get("clientKey").isJsonNull()) && !jsonObj.get("clientKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientKey").toString()));
      }
      if ((jsonObj.get("dumpFilePath") != null && !jsonObj.get("dumpFilePath").isJsonNull()) && !jsonObj.get("dumpFilePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dumpFilePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dumpFilePath").toString()));
      }
      if ((jsonObj.get("hostPort") != null && !jsonObj.get("hostPort").isJsonNull()) && !jsonObj.get("hostPort").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hostPort` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hostPort").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      // validate the optional field `sourceInstance`
      if (jsonObj.get("sourceInstance") != null && !jsonObj.get("sourceInstance").isJsonNull()) {
        InstanceReference.validateJsonElement(jsonObj.get("sourceInstance"));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnPremisesConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnPremisesConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnPremisesConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnPremisesConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<OnPremisesConfiguration>() {
           @Override
           public void write(JsonWriter out, OnPremisesConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnPremisesConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnPremisesConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnPremisesConfiguration
   * @throws IOException if the JSON string is invalid with respect to OnPremisesConfiguration
   */
  public static OnPremisesConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnPremisesConfiguration.class);
  }

  /**
   * Convert an instance of OnPremisesConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

