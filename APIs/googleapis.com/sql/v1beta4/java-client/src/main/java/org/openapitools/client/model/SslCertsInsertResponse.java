/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.SslCert;
import org.openapitools.client.model.SslCertDetail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SslCert insert response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SslCertsInsertResponse {
  public static final String SERIALIZED_NAME_CLIENT_CERT = "clientCert";
  @SerializedName(SERIALIZED_NAME_CLIENT_CERT)
  private SslCertDetail clientCert;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  private Operation operation;

  public static final String SERIALIZED_NAME_SERVER_CA_CERT = "serverCaCert";
  @SerializedName(SERIALIZED_NAME_SERVER_CA_CERT)
  private SslCert serverCaCert;

  public SslCertsInsertResponse() {
  }

  public SslCertsInsertResponse clientCert(SslCertDetail clientCert) {
    this.clientCert = clientCert;
    return this;
  }

  /**
   * Get clientCert
   * @return clientCert
   */
  @javax.annotation.Nullable
  public SslCertDetail getClientCert() {
    return clientCert;
  }

  public void setClientCert(SslCertDetail clientCert) {
    this.clientCert = clientCert;
  }


  public SslCertsInsertResponse kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#sslCertsInsert&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public SslCertsInsertResponse operation(Operation operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nullable
  public Operation getOperation() {
    return operation;
  }

  public void setOperation(Operation operation) {
    this.operation = operation;
  }


  public SslCertsInsertResponse serverCaCert(SslCert serverCaCert) {
    this.serverCaCert = serverCaCert;
    return this;
  }

  /**
   * Get serverCaCert
   * @return serverCaCert
   */
  @javax.annotation.Nullable
  public SslCert getServerCaCert() {
    return serverCaCert;
  }

  public void setServerCaCert(SslCert serverCaCert) {
    this.serverCaCert = serverCaCert;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SslCertsInsertResponse sslCertsInsertResponse = (SslCertsInsertResponse) o;
    return Objects.equals(this.clientCert, sslCertsInsertResponse.clientCert) &&
        Objects.equals(this.kind, sslCertsInsertResponse.kind) &&
        Objects.equals(this.operation, sslCertsInsertResponse.operation) &&
        Objects.equals(this.serverCaCert, sslCertsInsertResponse.serverCaCert);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientCert, kind, operation, serverCaCert);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SslCertsInsertResponse {\n");
    sb.append("    clientCert: ").append(toIndentedString(clientCert)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    serverCaCert: ").append(toIndentedString(serverCaCert)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientCert");
    openapiFields.add("kind");
    openapiFields.add("operation");
    openapiFields.add("serverCaCert");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SslCertsInsertResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SslCertsInsertResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SslCertsInsertResponse is not found in the empty JSON string", SslCertsInsertResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SslCertsInsertResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SslCertsInsertResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `clientCert`
      if (jsonObj.get("clientCert") != null && !jsonObj.get("clientCert").isJsonNull()) {
        SslCertDetail.validateJsonElement(jsonObj.get("clientCert"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `operation`
      if (jsonObj.get("operation") != null && !jsonObj.get("operation").isJsonNull()) {
        Operation.validateJsonElement(jsonObj.get("operation"));
      }
      // validate the optional field `serverCaCert`
      if (jsonObj.get("serverCaCert") != null && !jsonObj.get("serverCaCert").isJsonNull()) {
        SslCert.validateJsonElement(jsonObj.get("serverCaCert"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SslCertsInsertResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SslCertsInsertResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SslCertsInsertResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SslCertsInsertResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<SslCertsInsertResponse>() {
           @Override
           public void write(JsonWriter out, SslCertsInsertResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SslCertsInsertResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SslCertsInsertResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SslCertsInsertResponse
   * @throws IOException if the JSON string is invalid with respect to SslCertsInsertResponse
   */
  public static SslCertsInsertResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SslCertsInsertResponse.class);
  }

  /**
   * Convert an instance of SslCertsInsertResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

