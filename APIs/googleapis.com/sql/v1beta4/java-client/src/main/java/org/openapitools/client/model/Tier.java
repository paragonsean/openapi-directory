/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Google Cloud SQL service tier resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Tier {
  public static final String SERIALIZED_NAME_DISK_QUOTA = "DiskQuota";
  @SerializedName(SERIALIZED_NAME_DISK_QUOTA)
  private String diskQuota;

  public static final String SERIALIZED_NAME_R_A_M = "RAM";
  @SerializedName(SERIALIZED_NAME_R_A_M)
  private String RAM;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private List<String> region = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  private String tier;

  public Tier() {
  }

  public Tier diskQuota(String diskQuota) {
    this.diskQuota = diskQuota;
    return this;
  }

  /**
   * The maximum disk size of this tier in bytes.
   * @return diskQuota
   */
  @javax.annotation.Nullable
  public String getDiskQuota() {
    return diskQuota;
  }

  public void setDiskQuota(String diskQuota) {
    this.diskQuota = diskQuota;
  }


  public Tier RAM(String RAM) {
    this.RAM = RAM;
    return this;
  }

  /**
   * The maximum RAM usage of this tier in bytes.
   * @return RAM
   */
  @javax.annotation.Nullable
  public String getRAM() {
    return RAM;
  }

  public void setRAM(String RAM) {
    this.RAM = RAM;
  }


  public Tier kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#tier&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Tier region(List<String> region) {
    this.region = region;
    return this;
  }

  public Tier addRegionItem(String regionItem) {
    if (this.region == null) {
      this.region = new ArrayList<>();
    }
    this.region.add(regionItem);
    return this;
  }

  /**
   * The applicable regions for this tier.
   * @return region
   */
  @javax.annotation.Nullable
  public List<String> getRegion() {
    return region;
  }

  public void setRegion(List<String> region) {
    this.region = region;
  }


  public Tier tier(String tier) {
    this.tier = tier;
    return this;
  }

  /**
   * An identifier for the machine type, for example, &#x60;db-custom-1-3840&#x60;. For related information, see [Pricing](/sql/pricing).
   * @return tier
   */
  @javax.annotation.Nullable
  public String getTier() {
    return tier;
  }

  public void setTier(String tier) {
    this.tier = tier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Tier tier = (Tier) o;
    return Objects.equals(this.diskQuota, tier.diskQuota) &&
        Objects.equals(this.RAM, tier.RAM) &&
        Objects.equals(this.kind, tier.kind) &&
        Objects.equals(this.region, tier.region) &&
        Objects.equals(this.tier, tier.tier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(diskQuota, RAM, kind, region, tier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Tier {\n");
    sb.append("    diskQuota: ").append(toIndentedString(diskQuota)).append("\n");
    sb.append("    RAM: ").append(toIndentedString(RAM)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DiskQuota");
    openapiFields.add("RAM");
    openapiFields.add("kind");
    openapiFields.add("region");
    openapiFields.add("tier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Tier
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Tier.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Tier is not found in the empty JSON string", Tier.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Tier.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Tier` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("DiskQuota") != null && !jsonObj.get("DiskQuota").isJsonNull()) && !jsonObj.get("DiskQuota").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DiskQuota` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DiskQuota").toString()));
      }
      if ((jsonObj.get("RAM") != null && !jsonObj.get("RAM").isJsonNull()) && !jsonObj.get("RAM").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `RAM` to be a primitive type in the JSON string but got `%s`", jsonObj.get("RAM").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull() && !jsonObj.get("region").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be an array in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("tier") != null && !jsonObj.get("tier").isJsonNull()) && !jsonObj.get("tier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Tier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Tier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Tier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Tier.class));

       return (TypeAdapter<T>) new TypeAdapter<Tier>() {
           @Override
           public void write(JsonWriter out, Tier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Tier read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Tier given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Tier
   * @throws IOException if the JSON string is invalid with respect to Tier
   */
  public static Tier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Tier.class);
  }

  /**
   * Convert an instance of Tier to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

