/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BinLogCoordinates;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database instance clone context.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CloneContext {
  public static final String SERIALIZED_NAME_ALLOCATED_IP_RANGE = "allocatedIpRange";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_IP_RANGE)
  private String allocatedIpRange;

  public static final String SERIALIZED_NAME_BIN_LOG_COORDINATES = "binLogCoordinates";
  @SerializedName(SERIALIZED_NAME_BIN_LOG_COORDINATES)
  private BinLogCoordinates binLogCoordinates;

  public static final String SERIALIZED_NAME_DATABASE_NAMES = "databaseNames";
  @SerializedName(SERIALIZED_NAME_DATABASE_NAMES)
  private List<String> databaseNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESTINATION_INSTANCE_NAME = "destinationInstanceName";
  @SerializedName(SERIALIZED_NAME_DESTINATION_INSTANCE_NAME)
  private String destinationInstanceName;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_PITR_TIMESTAMP_MS = "pitrTimestampMs";
  @SerializedName(SERIALIZED_NAME_PITR_TIMESTAMP_MS)
  private String pitrTimestampMs;

  public static final String SERIALIZED_NAME_POINT_IN_TIME = "pointInTime";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME)
  private String pointInTime;

  public static final String SERIALIZED_NAME_PREFERRED_ZONE = "preferredZone";
  @SerializedName(SERIALIZED_NAME_PREFERRED_ZONE)
  private String preferredZone;

  public CloneContext() {
  }

  public CloneContext allocatedIpRange(String allocatedIpRange) {
    this.allocatedIpRange = allocatedIpRange;
    return this;
  }

  /**
   * The name of the allocated ip range for the private ip Cloud SQL instance. For example: \&quot;google-managed-services-default\&quot;. If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.
   * @return allocatedIpRange
   */
  @javax.annotation.Nullable
  public String getAllocatedIpRange() {
    return allocatedIpRange;
  }

  public void setAllocatedIpRange(String allocatedIpRange) {
    this.allocatedIpRange = allocatedIpRange;
  }


  public CloneContext binLogCoordinates(BinLogCoordinates binLogCoordinates) {
    this.binLogCoordinates = binLogCoordinates;
    return this;
  }

  /**
   * Get binLogCoordinates
   * @return binLogCoordinates
   */
  @javax.annotation.Nullable
  public BinLogCoordinates getBinLogCoordinates() {
    return binLogCoordinates;
  }

  public void setBinLogCoordinates(BinLogCoordinates binLogCoordinates) {
    this.binLogCoordinates = binLogCoordinates;
  }


  public CloneContext databaseNames(List<String> databaseNames) {
    this.databaseNames = databaseNames;
    return this;
  }

  public CloneContext addDatabaseNamesItem(String databaseNamesItem) {
    if (this.databaseNames == null) {
      this.databaseNames = new ArrayList<>();
    }
    this.databaseNames.add(databaseNamesItem);
    return this;
  }

  /**
   * (SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.
   * @return databaseNames
   */
  @javax.annotation.Nullable
  public List<String> getDatabaseNames() {
    return databaseNames;
  }

  public void setDatabaseNames(List<String> databaseNames) {
    this.databaseNames = databaseNames;
  }


  public CloneContext destinationInstanceName(String destinationInstanceName) {
    this.destinationInstanceName = destinationInstanceName;
    return this;
  }

  /**
   * Name of the Cloud SQL instance to be created as a clone.
   * @return destinationInstanceName
   */
  @javax.annotation.Nullable
  public String getDestinationInstanceName() {
    return destinationInstanceName;
  }

  public void setDestinationInstanceName(String destinationInstanceName) {
    this.destinationInstanceName = destinationInstanceName;
  }


  public CloneContext kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#cloneContext&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public CloneContext pitrTimestampMs(String pitrTimestampMs) {
    this.pitrTimestampMs = pitrTimestampMs;
    return this;
  }

  /**
   * Reserved for future use.
   * @return pitrTimestampMs
   */
  @javax.annotation.Nullable
  public String getPitrTimestampMs() {
    return pitrTimestampMs;
  }

  public void setPitrTimestampMs(String pitrTimestampMs) {
    this.pitrTimestampMs = pitrTimestampMs;
  }


  public CloneContext pointInTime(String pointInTime) {
    this.pointInTime = pointInTime;
    return this;
  }

  /**
   * Timestamp, if specified, identifies the time to which the source instance is cloned.
   * @return pointInTime
   */
  @javax.annotation.Nullable
  public String getPointInTime() {
    return pointInTime;
  }

  public void setPointInTime(String pointInTime) {
    this.pointInTime = pointInTime;
  }


  public CloneContext preferredZone(String preferredZone) {
    this.preferredZone = preferredZone;
    return this;
  }

  /**
   * Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.
   * @return preferredZone
   */
  @javax.annotation.Nullable
  public String getPreferredZone() {
    return preferredZone;
  }

  public void setPreferredZone(String preferredZone) {
    this.preferredZone = preferredZone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CloneContext cloneContext = (CloneContext) o;
    return Objects.equals(this.allocatedIpRange, cloneContext.allocatedIpRange) &&
        Objects.equals(this.binLogCoordinates, cloneContext.binLogCoordinates) &&
        Objects.equals(this.databaseNames, cloneContext.databaseNames) &&
        Objects.equals(this.destinationInstanceName, cloneContext.destinationInstanceName) &&
        Objects.equals(this.kind, cloneContext.kind) &&
        Objects.equals(this.pitrTimestampMs, cloneContext.pitrTimestampMs) &&
        Objects.equals(this.pointInTime, cloneContext.pointInTime) &&
        Objects.equals(this.preferredZone, cloneContext.preferredZone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedIpRange, binLogCoordinates, databaseNames, destinationInstanceName, kind, pitrTimestampMs, pointInTime, preferredZone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CloneContext {\n");
    sb.append("    allocatedIpRange: ").append(toIndentedString(allocatedIpRange)).append("\n");
    sb.append("    binLogCoordinates: ").append(toIndentedString(binLogCoordinates)).append("\n");
    sb.append("    databaseNames: ").append(toIndentedString(databaseNames)).append("\n");
    sb.append("    destinationInstanceName: ").append(toIndentedString(destinationInstanceName)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    pitrTimestampMs: ").append(toIndentedString(pitrTimestampMs)).append("\n");
    sb.append("    pointInTime: ").append(toIndentedString(pointInTime)).append("\n");
    sb.append("    preferredZone: ").append(toIndentedString(preferredZone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedIpRange");
    openapiFields.add("binLogCoordinates");
    openapiFields.add("databaseNames");
    openapiFields.add("destinationInstanceName");
    openapiFields.add("kind");
    openapiFields.add("pitrTimestampMs");
    openapiFields.add("pointInTime");
    openapiFields.add("preferredZone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CloneContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CloneContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CloneContext is not found in the empty JSON string", CloneContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CloneContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CloneContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocatedIpRange") != null && !jsonObj.get("allocatedIpRange").isJsonNull()) && !jsonObj.get("allocatedIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatedIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocatedIpRange").toString()));
      }
      // validate the optional field `binLogCoordinates`
      if (jsonObj.get("binLogCoordinates") != null && !jsonObj.get("binLogCoordinates").isJsonNull()) {
        BinLogCoordinates.validateJsonElement(jsonObj.get("binLogCoordinates"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("databaseNames") != null && !jsonObj.get("databaseNames").isJsonNull() && !jsonObj.get("databaseNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `databaseNames` to be an array in the JSON string but got `%s`", jsonObj.get("databaseNames").toString()));
      }
      if ((jsonObj.get("destinationInstanceName") != null && !jsonObj.get("destinationInstanceName").isJsonNull()) && !jsonObj.get("destinationInstanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destinationInstanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destinationInstanceName").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("pitrTimestampMs") != null && !jsonObj.get("pitrTimestampMs").isJsonNull()) && !jsonObj.get("pitrTimestampMs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pitrTimestampMs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pitrTimestampMs").toString()));
      }
      if ((jsonObj.get("pointInTime") != null && !jsonObj.get("pointInTime").isJsonNull()) && !jsonObj.get("pointInTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pointInTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pointInTime").toString()));
      }
      if ((jsonObj.get("preferredZone") != null && !jsonObj.get("preferredZone").isJsonNull()) && !jsonObj.get("preferredZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredZone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CloneContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CloneContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CloneContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CloneContext.class));

       return (TypeAdapter<T>) new TypeAdapter<CloneContext>() {
           @Override
           public void write(JsonWriter out, CloneContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CloneContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CloneContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CloneContext
   * @throws IOException if the JSON string is invalid with respect to CloneContext
   */
  public static CloneContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CloneContext.class);
  }

  /**
   * Convert an instance of CloneContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

