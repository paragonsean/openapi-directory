/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImportContextBakImportOptions;
import org.openapitools.client.model.ImportContextCsvImportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database instance import context.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportContext {
  public static final String SERIALIZED_NAME_BAK_IMPORT_OPTIONS = "bakImportOptions";
  @SerializedName(SERIALIZED_NAME_BAK_IMPORT_OPTIONS)
  private ImportContextBakImportOptions bakImportOptions;

  public static final String SERIALIZED_NAME_CSV_IMPORT_OPTIONS = "csvImportOptions";
  @SerializedName(SERIALIZED_NAME_CSV_IMPORT_OPTIONS)
  private ImportContextCsvImportOptions csvImportOptions;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  private String database;

  /**
   * The file type for the specified uri. * &#x60;SQL&#x60;: The file contains SQL statements. * &#x60;CSV&#x60;: The file contains CSV data. * &#x60;BAK&#x60;: The file contains backup data for a SQL Server instance.
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
  public enum FileTypeEnum {
    SQL_FILE_TYPE_UNSPECIFIED("SQL_FILE_TYPE_UNSPECIFIED"),
    
    SQL("SQL"),
    
    CSV("CSV"),
    
    BAK("BAK");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypeEnum fromValue(String value) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileTypeEnum fileType;

  public static final String SERIALIZED_NAME_IMPORT_USER = "importUser";
  @SerializedName(SERIALIZED_NAME_IMPORT_USER)
  private String importUser;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ImportContext() {
  }

  public ImportContext bakImportOptions(ImportContextBakImportOptions bakImportOptions) {
    this.bakImportOptions = bakImportOptions;
    return this;
  }

  /**
   * Get bakImportOptions
   * @return bakImportOptions
   */
  @javax.annotation.Nullable
  public ImportContextBakImportOptions getBakImportOptions() {
    return bakImportOptions;
  }

  public void setBakImportOptions(ImportContextBakImportOptions bakImportOptions) {
    this.bakImportOptions = bakImportOptions;
  }


  public ImportContext csvImportOptions(ImportContextCsvImportOptions csvImportOptions) {
    this.csvImportOptions = csvImportOptions;
    return this;
  }

  /**
   * Get csvImportOptions
   * @return csvImportOptions
   */
  @javax.annotation.Nullable
  public ImportContextCsvImportOptions getCsvImportOptions() {
    return csvImportOptions;
  }

  public void setCsvImportOptions(ImportContextCsvImportOptions csvImportOptions) {
    this.csvImportOptions = csvImportOptions;
  }


  public ImportContext database(String database) {
    this.database = database;
    return this;
  }

  /**
   * The target database for the import. If &#x60;fileType&#x60; is &#x60;SQL&#x60;, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If &#x60;fileType&#x60; is &#x60;CSV&#x60;, one database must be specified.
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(String database) {
    this.database = database;
  }


  public ImportContext fileType(FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * The file type for the specified uri. * &#x60;SQL&#x60;: The file contains SQL statements. * &#x60;CSV&#x60;: The file contains CSV data. * &#x60;BAK&#x60;: The file contains backup data for a SQL Server instance.
   * @return fileType
   */
  @javax.annotation.Nullable
  public FileTypeEnum getFileType() {
    return fileType;
  }

  public void setFileType(FileTypeEnum fileType) {
    this.fileType = fileType;
  }


  public ImportContext importUser(String importUser) {
    this.importUser = importUser;
    return this;
  }

  /**
   * The PostgreSQL user for this import operation. PostgreSQL instances only.
   * @return importUser
   */
  @javax.annotation.Nullable
  public String getImportUser() {
    return importUser;
  }

  public void setImportUser(String importUser) {
    this.importUser = importUser;
  }


  public ImportContext kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#importContext&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ImportContext uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Path to the import file in Cloud Storage, in the form &#x60;gs://bucketName/fileName&#x60;. Compressed gzip files (.gz) are supported when &#x60;fileType&#x60; is &#x60;SQL&#x60;. The instance must have write permissions to the bucket and read access to the file.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportContext importContext = (ImportContext) o;
    return Objects.equals(this.bakImportOptions, importContext.bakImportOptions) &&
        Objects.equals(this.csvImportOptions, importContext.csvImportOptions) &&
        Objects.equals(this.database, importContext.database) &&
        Objects.equals(this.fileType, importContext.fileType) &&
        Objects.equals(this.importUser, importContext.importUser) &&
        Objects.equals(this.kind, importContext.kind) &&
        Objects.equals(this.uri, importContext.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bakImportOptions, csvImportOptions, database, fileType, importUser, kind, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportContext {\n");
    sb.append("    bakImportOptions: ").append(toIndentedString(bakImportOptions)).append("\n");
    sb.append("    csvImportOptions: ").append(toIndentedString(csvImportOptions)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    importUser: ").append(toIndentedString(importUser)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bakImportOptions");
    openapiFields.add("csvImportOptions");
    openapiFields.add("database");
    openapiFields.add("fileType");
    openapiFields.add("importUser");
    openapiFields.add("kind");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportContext is not found in the empty JSON string", ImportContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bakImportOptions`
      if (jsonObj.get("bakImportOptions") != null && !jsonObj.get("bakImportOptions").isJsonNull()) {
        ImportContextBakImportOptions.validateJsonElement(jsonObj.get("bakImportOptions"));
      }
      // validate the optional field `csvImportOptions`
      if (jsonObj.get("csvImportOptions") != null && !jsonObj.get("csvImportOptions").isJsonNull()) {
        ImportContextCsvImportOptions.validateJsonElement(jsonObj.get("csvImportOptions"));
      }
      if ((jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) && !jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      if ((jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) && !jsonObj.get("fileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileType").toString()));
      }
      // validate the optional field `fileType`
      if (jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) {
        FileTypeEnum.validateJsonElement(jsonObj.get("fileType"));
      }
      if ((jsonObj.get("importUser") != null && !jsonObj.get("importUser").isJsonNull()) && !jsonObj.get("importUser").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importUser` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importUser").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportContext>() {
           @Override
           public void write(JsonWriter out, ImportContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportContext
   * @throws IOException if the JSON string is invalid with respect to ImportContext
   */
  public static ImportContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportContext.class);
  }

  /**
   * Convert an instance of ImportContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

