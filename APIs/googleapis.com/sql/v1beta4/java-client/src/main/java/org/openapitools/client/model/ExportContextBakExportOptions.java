/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for exporting BAK files (SQL Server-only)
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportContextBakExportOptions {
  /**
   * Type of this bak file will be export, FULL or DIFF, SQL Server only
   */
  @JsonAdapter(BakTypeEnum.Adapter.class)
  public enum BakTypeEnum {
    BAK_TYPE_UNSPECIFIED("BAK_TYPE_UNSPECIFIED"),
    
    FULL("FULL"),
    
    DIFF("DIFF"),
    
    TLOG("TLOG");

    private String value;

    BakTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BakTypeEnum fromValue(String value) {
      for (BakTypeEnum b : BakTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BakTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BakTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BakTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BakTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BakTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BAK_TYPE = "bakType";
  @SerializedName(SERIALIZED_NAME_BAK_TYPE)
  private BakTypeEnum bakType;

  public static final String SERIALIZED_NAME_COPY_ONLY = "copyOnly";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COPY_ONLY)
  private Boolean copyOnly;

  public static final String SERIALIZED_NAME_DIFFERENTIAL_BASE = "differentialBase";
  @SerializedName(SERIALIZED_NAME_DIFFERENTIAL_BASE)
  private Boolean differentialBase;

  public static final String SERIALIZED_NAME_STRIPE_COUNT = "stripeCount";
  @SerializedName(SERIALIZED_NAME_STRIPE_COUNT)
  private Integer stripeCount;

  public static final String SERIALIZED_NAME_STRIPED = "striped";
  @SerializedName(SERIALIZED_NAME_STRIPED)
  private Boolean striped;

  public ExportContextBakExportOptions() {
  }

  public ExportContextBakExportOptions bakType(BakTypeEnum bakType) {
    this.bakType = bakType;
    return this;
  }

  /**
   * Type of this bak file will be export, FULL or DIFF, SQL Server only
   * @return bakType
   */
  @javax.annotation.Nullable
  public BakTypeEnum getBakType() {
    return bakType;
  }

  public void setBakType(BakTypeEnum bakType) {
    this.bakType = bakType;
  }


  @Deprecated
  public ExportContextBakExportOptions copyOnly(Boolean copyOnly) {
    this.copyOnly = copyOnly;
    return this;
  }

  /**
   * Deprecated: copy_only is deprecated. Use differential_base instead
   * @return copyOnly
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getCopyOnly() {
    return copyOnly;
  }

  @Deprecated
  public void setCopyOnly(Boolean copyOnly) {
    this.copyOnly = copyOnly;
  }


  public ExportContextBakExportOptions differentialBase(Boolean differentialBase) {
    this.differentialBase = differentialBase;
    return this;
  }

  /**
   * Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base
   * @return differentialBase
   */
  @javax.annotation.Nullable
  public Boolean getDifferentialBase() {
    return differentialBase;
  }

  public void setDifferentialBase(Boolean differentialBase) {
    this.differentialBase = differentialBase;
  }


  public ExportContextBakExportOptions stripeCount(Integer stripeCount) {
    this.stripeCount = stripeCount;
    return this;
  }

  /**
   * Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.
   * @return stripeCount
   */
  @javax.annotation.Nullable
  public Integer getStripeCount() {
    return stripeCount;
  }

  public void setStripeCount(Integer stripeCount) {
    this.stripeCount = stripeCount;
  }


  public ExportContextBakExportOptions striped(Boolean striped) {
    this.striped = striped;
    return this;
  }

  /**
   * Whether or not the export should be striped.
   * @return striped
   */
  @javax.annotation.Nullable
  public Boolean getStriped() {
    return striped;
  }

  public void setStriped(Boolean striped) {
    this.striped = striped;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportContextBakExportOptions exportContextBakExportOptions = (ExportContextBakExportOptions) o;
    return Objects.equals(this.bakType, exportContextBakExportOptions.bakType) &&
        Objects.equals(this.copyOnly, exportContextBakExportOptions.copyOnly) &&
        Objects.equals(this.differentialBase, exportContextBakExportOptions.differentialBase) &&
        Objects.equals(this.stripeCount, exportContextBakExportOptions.stripeCount) &&
        Objects.equals(this.striped, exportContextBakExportOptions.striped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bakType, copyOnly, differentialBase, stripeCount, striped);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportContextBakExportOptions {\n");
    sb.append("    bakType: ").append(toIndentedString(bakType)).append("\n");
    sb.append("    copyOnly: ").append(toIndentedString(copyOnly)).append("\n");
    sb.append("    differentialBase: ").append(toIndentedString(differentialBase)).append("\n");
    sb.append("    stripeCount: ").append(toIndentedString(stripeCount)).append("\n");
    sb.append("    striped: ").append(toIndentedString(striped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bakType");
    openapiFields.add("copyOnly");
    openapiFields.add("differentialBase");
    openapiFields.add("stripeCount");
    openapiFields.add("striped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportContextBakExportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportContextBakExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportContextBakExportOptions is not found in the empty JSON string", ExportContextBakExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportContextBakExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportContextBakExportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bakType") != null && !jsonObj.get("bakType").isJsonNull()) && !jsonObj.get("bakType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bakType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bakType").toString()));
      }
      // validate the optional field `bakType`
      if (jsonObj.get("bakType") != null && !jsonObj.get("bakType").isJsonNull()) {
        BakTypeEnum.validateJsonElement(jsonObj.get("bakType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportContextBakExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportContextBakExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportContextBakExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportContextBakExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportContextBakExportOptions>() {
           @Override
           public void write(JsonWriter out, ExportContextBakExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportContextBakExportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportContextBakExportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportContextBakExportOptions
   * @throws IOException if the JSON string is invalid with respect to ExportContextBakExportOptions
   */
  public static ExportContextBakExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportContextBakExportOptions.class);
  }

  /**
   * Convert an instance of ExportContextBakExportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

