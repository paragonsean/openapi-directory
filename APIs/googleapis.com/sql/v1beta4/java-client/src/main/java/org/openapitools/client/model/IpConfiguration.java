/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AclEntry;
import org.openapitools.client.model.PscConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IP Management configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IpConfiguration {
  public static final String SERIALIZED_NAME_ALLOCATED_IP_RANGE = "allocatedIpRange";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_IP_RANGE)
  private String allocatedIpRange;

  public static final String SERIALIZED_NAME_AUTHORIZED_NETWORKS = "authorizedNetworks";
  @SerializedName(SERIALIZED_NAME_AUTHORIZED_NETWORKS)
  private List<AclEntry> authorizedNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLE_PRIVATE_PATH_FOR_GOOGLE_CLOUD_SERVICES = "enablePrivatePathForGoogleCloudServices";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRIVATE_PATH_FOR_GOOGLE_CLOUD_SERVICES)
  private Boolean enablePrivatePathForGoogleCloudServices;

  public static final String SERIALIZED_NAME_IPV4_ENABLED = "ipv4Enabled";
  @SerializedName(SERIALIZED_NAME_IPV4_ENABLED)
  private Boolean ipv4Enabled;

  public static final String SERIALIZED_NAME_PRIVATE_NETWORK = "privateNetwork";
  @SerializedName(SERIALIZED_NAME_PRIVATE_NETWORK)
  private String privateNetwork;

  public static final String SERIALIZED_NAME_PSC_CONFIG = "pscConfig";
  @SerializedName(SERIALIZED_NAME_PSC_CONFIG)
  private PscConfig pscConfig;

  public static final String SERIALIZED_NAME_REQUIRE_SSL = "requireSsl";
  @SerializedName(SERIALIZED_NAME_REQUIRE_SSL)
  private Boolean requireSsl;

  /**
   * Specify how SSL/TLS is enforced in database connections. MySQL and PostgreSQL use the &#x60;ssl_mode&#x60; flag. If you must use the &#x60;require_ssl&#x60; flag for backward compatibility, then only the following value pairs are valid: * &#x60;ssl_mode&#x3D;ALLOW_UNENCRYPTED_AND_ENCRYPTED&#x60; and &#x60;require_ssl&#x3D;false&#x60; * &#x60;ssl_mode&#x3D;ENCRYPTED_ONLY&#x60; and &#x60;require_ssl&#x3D;false&#x60; * &#x60;ssl_mode&#x3D;TRUSTED_CLIENT_CERTIFICATE_REQUIRED&#x60; and &#x60;require_ssl&#x3D;true&#x60; The value of &#x60;ssl_mode&#x60; gets priority over the value of &#x60;require_ssl&#x60;. For example, for the pair &#x60;ssl_mode&#x3D;ENCRYPTED_ONLY&#x60; and &#x60;require_ssl&#x3D;false&#x60;, the &#x60;ssl_mode&#x3D;ENCRYPTED_ONLY&#x60; means only accept SSL connections, while the &#x60;require_ssl&#x3D;false&#x60; means accept both non-SSL and SSL connections. MySQL and PostgreSQL databases respect &#x60;ssl_mode&#x60; in this case and accept only SSL connections. SQL Server uses the &#x60;require_ssl&#x60; flag. You can set the value for this flag to &#x60;true&#x60; or &#x60;false&#x60;.
   */
  @JsonAdapter(SslModeEnum.Adapter.class)
  public enum SslModeEnum {
    SSL_MODE_UNSPECIFIED("SSL_MODE_UNSPECIFIED"),
    
    ALLOW_UNENCRYPTED_AND_ENCRYPTED("ALLOW_UNENCRYPTED_AND_ENCRYPTED"),
    
    ENCRYPTED_ONLY("ENCRYPTED_ONLY"),
    
    TRUSTED_CLIENT_CERTIFICATE_REQUIRED("TRUSTED_CLIENT_CERTIFICATE_REQUIRED");

    private String value;

    SslModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SslModeEnum fromValue(String value) {
      for (SslModeEnum b : SslModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SslModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SslModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SslModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SslModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SslModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SSL_MODE = "sslMode";
  @SerializedName(SERIALIZED_NAME_SSL_MODE)
  private SslModeEnum sslMode;

  public IpConfiguration() {
  }

  public IpConfiguration allocatedIpRange(String allocatedIpRange) {
    this.allocatedIpRange = allocatedIpRange;
    return this;
  }

  /**
   * The name of the allocated ip range for the private ip Cloud SQL instance. For example: \&quot;google-managed-services-default\&quot;. If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression &#x60;[a-z]([-a-z0-9]*[a-z0-9])?.&#x60;
   * @return allocatedIpRange
   */
  @javax.annotation.Nullable
  public String getAllocatedIpRange() {
    return allocatedIpRange;
  }

  public void setAllocatedIpRange(String allocatedIpRange) {
    this.allocatedIpRange = allocatedIpRange;
  }


  public IpConfiguration authorizedNetworks(List<AclEntry> authorizedNetworks) {
    this.authorizedNetworks = authorizedNetworks;
    return this;
  }

  public IpConfiguration addAuthorizedNetworksItem(AclEntry authorizedNetworksItem) {
    if (this.authorizedNetworks == null) {
      this.authorizedNetworks = new ArrayList<>();
    }
    this.authorizedNetworks.add(authorizedNetworksItem);
    return this;
  }

  /**
   * The list of external networks that are allowed to connect to the instance using the IP. In &#39;CIDR&#39; notation, also known as &#39;slash&#39; notation (for example: &#x60;157.197.200.0/24&#x60;).
   * @return authorizedNetworks
   */
  @javax.annotation.Nullable
  public List<AclEntry> getAuthorizedNetworks() {
    return authorizedNetworks;
  }

  public void setAuthorizedNetworks(List<AclEntry> authorizedNetworks) {
    this.authorizedNetworks = authorizedNetworks;
  }


  public IpConfiguration enablePrivatePathForGoogleCloudServices(Boolean enablePrivatePathForGoogleCloudServices) {
    this.enablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
    return this;
  }

  /**
   * Controls connectivity to private IP instances from Google services, such as BigQuery.
   * @return enablePrivatePathForGoogleCloudServices
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrivatePathForGoogleCloudServices() {
    return enablePrivatePathForGoogleCloudServices;
  }

  public void setEnablePrivatePathForGoogleCloudServices(Boolean enablePrivatePathForGoogleCloudServices) {
    this.enablePrivatePathForGoogleCloudServices = enablePrivatePathForGoogleCloudServices;
  }


  public IpConfiguration ipv4Enabled(Boolean ipv4Enabled) {
    this.ipv4Enabled = ipv4Enabled;
    return this;
  }

  /**
   * Whether the instance is assigned a public IP address or not.
   * @return ipv4Enabled
   */
  @javax.annotation.Nullable
  public Boolean getIpv4Enabled() {
    return ipv4Enabled;
  }

  public void setIpv4Enabled(Boolean ipv4Enabled) {
    this.ipv4Enabled = ipv4Enabled;
  }


  public IpConfiguration privateNetwork(String privateNetwork) {
    this.privateNetwork = privateNetwork;
    return this;
  }

  /**
   * The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, &#x60;/projects/myProject/global/networks/default&#x60;. This setting can be updated, but it cannot be removed after it is set.
   * @return privateNetwork
   */
  @javax.annotation.Nullable
  public String getPrivateNetwork() {
    return privateNetwork;
  }

  public void setPrivateNetwork(String privateNetwork) {
    this.privateNetwork = privateNetwork;
  }


  public IpConfiguration pscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
    return this;
  }

  /**
   * Get pscConfig
   * @return pscConfig
   */
  @javax.annotation.Nullable
  public PscConfig getPscConfig() {
    return pscConfig;
  }

  public void setPscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
  }


  public IpConfiguration requireSsl(Boolean requireSsl) {
    this.requireSsl = requireSsl;
    return this;
  }

  /**
   * Use &#x60;ssl_mode&#x60; instead for MySQL and PostgreSQL. SQL Server uses this flag. Whether SSL/TLS connections over IP are enforced. If set to false, then allow both non-SSL/non-TLS and SSL/TLS connections. For SSL/TLS connections, the client certificate won&#39;t be verified. If set to true, then only allow connections encrypted with SSL/TLS and with valid client certificates. If you want to enforce SSL/TLS without enforcing the requirement for valid client certificates, then use the &#x60;ssl_mode&#x60; flag instead of the legacy &#x60;require_ssl&#x60; flag.
   * @return requireSsl
   */
  @javax.annotation.Nullable
  public Boolean getRequireSsl() {
    return requireSsl;
  }

  public void setRequireSsl(Boolean requireSsl) {
    this.requireSsl = requireSsl;
  }


  public IpConfiguration sslMode(SslModeEnum sslMode) {
    this.sslMode = sslMode;
    return this;
  }

  /**
   * Specify how SSL/TLS is enforced in database connections. MySQL and PostgreSQL use the &#x60;ssl_mode&#x60; flag. If you must use the &#x60;require_ssl&#x60; flag for backward compatibility, then only the following value pairs are valid: * &#x60;ssl_mode&#x3D;ALLOW_UNENCRYPTED_AND_ENCRYPTED&#x60; and &#x60;require_ssl&#x3D;false&#x60; * &#x60;ssl_mode&#x3D;ENCRYPTED_ONLY&#x60; and &#x60;require_ssl&#x3D;false&#x60; * &#x60;ssl_mode&#x3D;TRUSTED_CLIENT_CERTIFICATE_REQUIRED&#x60; and &#x60;require_ssl&#x3D;true&#x60; The value of &#x60;ssl_mode&#x60; gets priority over the value of &#x60;require_ssl&#x60;. For example, for the pair &#x60;ssl_mode&#x3D;ENCRYPTED_ONLY&#x60; and &#x60;require_ssl&#x3D;false&#x60;, the &#x60;ssl_mode&#x3D;ENCRYPTED_ONLY&#x60; means only accept SSL connections, while the &#x60;require_ssl&#x3D;false&#x60; means accept both non-SSL and SSL connections. MySQL and PostgreSQL databases respect &#x60;ssl_mode&#x60; in this case and accept only SSL connections. SQL Server uses the &#x60;require_ssl&#x60; flag. You can set the value for this flag to &#x60;true&#x60; or &#x60;false&#x60;.
   * @return sslMode
   */
  @javax.annotation.Nullable
  public SslModeEnum getSslMode() {
    return sslMode;
  }

  public void setSslMode(SslModeEnum sslMode) {
    this.sslMode = sslMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IpConfiguration ipConfiguration = (IpConfiguration) o;
    return Objects.equals(this.allocatedIpRange, ipConfiguration.allocatedIpRange) &&
        Objects.equals(this.authorizedNetworks, ipConfiguration.authorizedNetworks) &&
        Objects.equals(this.enablePrivatePathForGoogleCloudServices, ipConfiguration.enablePrivatePathForGoogleCloudServices) &&
        Objects.equals(this.ipv4Enabled, ipConfiguration.ipv4Enabled) &&
        Objects.equals(this.privateNetwork, ipConfiguration.privateNetwork) &&
        Objects.equals(this.pscConfig, ipConfiguration.pscConfig) &&
        Objects.equals(this.requireSsl, ipConfiguration.requireSsl) &&
        Objects.equals(this.sslMode, ipConfiguration.sslMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocatedIpRange, authorizedNetworks, enablePrivatePathForGoogleCloudServices, ipv4Enabled, privateNetwork, pscConfig, requireSsl, sslMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IpConfiguration {\n");
    sb.append("    allocatedIpRange: ").append(toIndentedString(allocatedIpRange)).append("\n");
    sb.append("    authorizedNetworks: ").append(toIndentedString(authorizedNetworks)).append("\n");
    sb.append("    enablePrivatePathForGoogleCloudServices: ").append(toIndentedString(enablePrivatePathForGoogleCloudServices)).append("\n");
    sb.append("    ipv4Enabled: ").append(toIndentedString(ipv4Enabled)).append("\n");
    sb.append("    privateNetwork: ").append(toIndentedString(privateNetwork)).append("\n");
    sb.append("    pscConfig: ").append(toIndentedString(pscConfig)).append("\n");
    sb.append("    requireSsl: ").append(toIndentedString(requireSsl)).append("\n");
    sb.append("    sslMode: ").append(toIndentedString(sslMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocatedIpRange");
    openapiFields.add("authorizedNetworks");
    openapiFields.add("enablePrivatePathForGoogleCloudServices");
    openapiFields.add("ipv4Enabled");
    openapiFields.add("privateNetwork");
    openapiFields.add("pscConfig");
    openapiFields.add("requireSsl");
    openapiFields.add("sslMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IpConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IpConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IpConfiguration is not found in the empty JSON string", IpConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IpConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IpConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocatedIpRange") != null && !jsonObj.get("allocatedIpRange").isJsonNull()) && !jsonObj.get("allocatedIpRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocatedIpRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocatedIpRange").toString()));
      }
      if (jsonObj.get("authorizedNetworks") != null && !jsonObj.get("authorizedNetworks").isJsonNull()) {
        JsonArray jsonArrayauthorizedNetworks = jsonObj.getAsJsonArray("authorizedNetworks");
        if (jsonArrayauthorizedNetworks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizedNetworks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizedNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("authorizedNetworks").toString()));
          }

          // validate the optional field `authorizedNetworks` (array)
          for (int i = 0; i < jsonArrayauthorizedNetworks.size(); i++) {
            AclEntry.validateJsonElement(jsonArrayauthorizedNetworks.get(i));
          };
        }
      }
      if ((jsonObj.get("privateNetwork") != null && !jsonObj.get("privateNetwork").isJsonNull()) && !jsonObj.get("privateNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateNetwork").toString()));
      }
      // validate the optional field `pscConfig`
      if (jsonObj.get("pscConfig") != null && !jsonObj.get("pscConfig").isJsonNull()) {
        PscConfig.validateJsonElement(jsonObj.get("pscConfig"));
      }
      if ((jsonObj.get("sslMode") != null && !jsonObj.get("sslMode").isJsonNull()) && !jsonObj.get("sslMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslMode").toString()));
      }
      // validate the optional field `sslMode`
      if (jsonObj.get("sslMode") != null && !jsonObj.get("sslMode").isJsonNull()) {
        SslModeEnum.validateJsonElement(jsonObj.get("sslMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IpConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IpConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IpConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IpConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<IpConfiguration>() {
           @Override
           public void write(JsonWriter out, IpConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IpConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IpConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IpConfiguration
   * @throws IOException if the JSON string is invalid with respect to IpConfiguration
   */
  public static IpConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IpConfiguration.class);
  }

  /**
   * Convert an instance of IpConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

