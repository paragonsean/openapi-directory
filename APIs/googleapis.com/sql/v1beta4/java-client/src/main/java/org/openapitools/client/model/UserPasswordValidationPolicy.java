/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.PasswordStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User level password validation policy.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserPasswordValidationPolicy {
  public static final String SERIALIZED_NAME_ALLOWED_FAILED_ATTEMPTS = "allowedFailedAttempts";
  @SerializedName(SERIALIZED_NAME_ALLOWED_FAILED_ATTEMPTS)
  private Integer allowedFailedAttempts;

  public static final String SERIALIZED_NAME_ENABLE_FAILED_ATTEMPTS_CHECK = "enableFailedAttemptsCheck";
  @SerializedName(SERIALIZED_NAME_ENABLE_FAILED_ATTEMPTS_CHECK)
  private Boolean enableFailedAttemptsCheck;

  public static final String SERIALIZED_NAME_ENABLE_PASSWORD_VERIFICATION = "enablePasswordVerification";
  @SerializedName(SERIALIZED_NAME_ENABLE_PASSWORD_VERIFICATION)
  private Boolean enablePasswordVerification;

  public static final String SERIALIZED_NAME_PASSWORD_EXPIRATION_DURATION = "passwordExpirationDuration";
  @SerializedName(SERIALIZED_NAME_PASSWORD_EXPIRATION_DURATION)
  private String passwordExpirationDuration;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private PasswordStatus status;

  public UserPasswordValidationPolicy() {
  }

  public UserPasswordValidationPolicy allowedFailedAttempts(Integer allowedFailedAttempts) {
    this.allowedFailedAttempts = allowedFailedAttempts;
    return this;
  }

  /**
   * Number of failed login attempts allowed before user get locked.
   * @return allowedFailedAttempts
   */
  @javax.annotation.Nullable
  public Integer getAllowedFailedAttempts() {
    return allowedFailedAttempts;
  }

  public void setAllowedFailedAttempts(Integer allowedFailedAttempts) {
    this.allowedFailedAttempts = allowedFailedAttempts;
  }


  public UserPasswordValidationPolicy enableFailedAttemptsCheck(Boolean enableFailedAttemptsCheck) {
    this.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
    return this;
  }

  /**
   * If true, failed login attempts check will be enabled.
   * @return enableFailedAttemptsCheck
   */
  @javax.annotation.Nullable
  public Boolean getEnableFailedAttemptsCheck() {
    return enableFailedAttemptsCheck;
  }

  public void setEnableFailedAttemptsCheck(Boolean enableFailedAttemptsCheck) {
    this.enableFailedAttemptsCheck = enableFailedAttemptsCheck;
  }


  public UserPasswordValidationPolicy enablePasswordVerification(Boolean enablePasswordVerification) {
    this.enablePasswordVerification = enablePasswordVerification;
    return this;
  }

  /**
   * If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
   * @return enablePasswordVerification
   */
  @javax.annotation.Nullable
  public Boolean getEnablePasswordVerification() {
    return enablePasswordVerification;
  }

  public void setEnablePasswordVerification(Boolean enablePasswordVerification) {
    this.enablePasswordVerification = enablePasswordVerification;
  }


  public UserPasswordValidationPolicy passwordExpirationDuration(String passwordExpirationDuration) {
    this.passwordExpirationDuration = passwordExpirationDuration;
    return this;
  }

  /**
   * Expiration duration after password is updated.
   * @return passwordExpirationDuration
   */
  @javax.annotation.Nullable
  public String getPasswordExpirationDuration() {
    return passwordExpirationDuration;
  }

  public void setPasswordExpirationDuration(String passwordExpirationDuration) {
    this.passwordExpirationDuration = passwordExpirationDuration;
  }


  public UserPasswordValidationPolicy status(PasswordStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public PasswordStatus getStatus() {
    return status;
  }

  public void setStatus(PasswordStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserPasswordValidationPolicy userPasswordValidationPolicy = (UserPasswordValidationPolicy) o;
    return Objects.equals(this.allowedFailedAttempts, userPasswordValidationPolicy.allowedFailedAttempts) &&
        Objects.equals(this.enableFailedAttemptsCheck, userPasswordValidationPolicy.enableFailedAttemptsCheck) &&
        Objects.equals(this.enablePasswordVerification, userPasswordValidationPolicy.enablePasswordVerification) &&
        Objects.equals(this.passwordExpirationDuration, userPasswordValidationPolicy.passwordExpirationDuration) &&
        Objects.equals(this.status, userPasswordValidationPolicy.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedFailedAttempts, enableFailedAttemptsCheck, enablePasswordVerification, passwordExpirationDuration, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserPasswordValidationPolicy {\n");
    sb.append("    allowedFailedAttempts: ").append(toIndentedString(allowedFailedAttempts)).append("\n");
    sb.append("    enableFailedAttemptsCheck: ").append(toIndentedString(enableFailedAttemptsCheck)).append("\n");
    sb.append("    enablePasswordVerification: ").append(toIndentedString(enablePasswordVerification)).append("\n");
    sb.append("    passwordExpirationDuration: ").append(toIndentedString(passwordExpirationDuration)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedFailedAttempts");
    openapiFields.add("enableFailedAttemptsCheck");
    openapiFields.add("enablePasswordVerification");
    openapiFields.add("passwordExpirationDuration");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserPasswordValidationPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserPasswordValidationPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserPasswordValidationPolicy is not found in the empty JSON string", UserPasswordValidationPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserPasswordValidationPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserPasswordValidationPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("passwordExpirationDuration") != null && !jsonObj.get("passwordExpirationDuration").isJsonNull()) && !jsonObj.get("passwordExpirationDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `passwordExpirationDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("passwordExpirationDuration").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        PasswordStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserPasswordValidationPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserPasswordValidationPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserPasswordValidationPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserPasswordValidationPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<UserPasswordValidationPolicy>() {
           @Override
           public void write(JsonWriter out, UserPasswordValidationPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserPasswordValidationPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserPasswordValidationPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserPasswordValidationPolicy
   * @throws IOException if the JSON string is invalid with respect to UserPasswordValidationPolicy
   */
  public static UserPasswordValidationPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserPasswordValidationPolicy.class);
  }

  /**
   * Convert an instance of UserPasswordValidationPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

