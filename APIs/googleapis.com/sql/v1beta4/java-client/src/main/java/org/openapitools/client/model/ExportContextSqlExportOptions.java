/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportContextSqlExportOptionsMysqlExportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Options for exporting data as SQL statements.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportContextSqlExportOptions {
  public static final String SERIALIZED_NAME_MYSQL_EXPORT_OPTIONS = "mysqlExportOptions";
  @SerializedName(SERIALIZED_NAME_MYSQL_EXPORT_OPTIONS)
  private ExportContextSqlExportOptionsMysqlExportOptions mysqlExportOptions;

  public static final String SERIALIZED_NAME_PARALLEL = "parallel";
  @SerializedName(SERIALIZED_NAME_PARALLEL)
  private Boolean parallel;

  public static final String SERIALIZED_NAME_SCHEMA_ONLY = "schemaOnly";
  @SerializedName(SERIALIZED_NAME_SCHEMA_ONLY)
  private Boolean schemaOnly;

  public static final String SERIALIZED_NAME_TABLES = "tables";
  @SerializedName(SERIALIZED_NAME_TABLES)
  private List<String> tables = new ArrayList<>();

  public static final String SERIALIZED_NAME_THREADS = "threads";
  @SerializedName(SERIALIZED_NAME_THREADS)
  private Integer threads;

  public ExportContextSqlExportOptions() {
  }

  public ExportContextSqlExportOptions mysqlExportOptions(ExportContextSqlExportOptionsMysqlExportOptions mysqlExportOptions) {
    this.mysqlExportOptions = mysqlExportOptions;
    return this;
  }

  /**
   * Get mysqlExportOptions
   * @return mysqlExportOptions
   */
  @javax.annotation.Nullable
  public ExportContextSqlExportOptionsMysqlExportOptions getMysqlExportOptions() {
    return mysqlExportOptions;
  }

  public void setMysqlExportOptions(ExportContextSqlExportOptionsMysqlExportOptions mysqlExportOptions) {
    this.mysqlExportOptions = mysqlExportOptions;
  }


  public ExportContextSqlExportOptions parallel(Boolean parallel) {
    this.parallel = parallel;
    return this;
  }

  /**
   * Optional. Whether or not the export should be parallel.
   * @return parallel
   */
  @javax.annotation.Nullable
  public Boolean getParallel() {
    return parallel;
  }

  public void setParallel(Boolean parallel) {
    this.parallel = parallel;
  }


  public ExportContextSqlExportOptions schemaOnly(Boolean schemaOnly) {
    this.schemaOnly = schemaOnly;
    return this;
  }

  /**
   * Export only schemas.
   * @return schemaOnly
   */
  @javax.annotation.Nullable
  public Boolean getSchemaOnly() {
    return schemaOnly;
  }

  public void setSchemaOnly(Boolean schemaOnly) {
    this.schemaOnly = schemaOnly;
  }


  public ExportContextSqlExportOptions tables(List<String> tables) {
    this.tables = tables;
    return this;
  }

  public ExportContextSqlExportOptions addTablesItem(String tablesItem) {
    if (this.tables == null) {
      this.tables = new ArrayList<>();
    }
    this.tables.add(tablesItem);
    return this;
  }

  /**
   * Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.
   * @return tables
   */
  @javax.annotation.Nullable
  public List<String> getTables() {
    return tables;
  }

  public void setTables(List<String> tables) {
    this.tables = tables;
  }


  public ExportContextSqlExportOptions threads(Integer threads) {
    this.threads = threads;
    return this;
  }

  /**
   * Optional. The number of threads to use for parallel export.
   * @return threads
   */
  @javax.annotation.Nullable
  public Integer getThreads() {
    return threads;
  }

  public void setThreads(Integer threads) {
    this.threads = threads;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportContextSqlExportOptions exportContextSqlExportOptions = (ExportContextSqlExportOptions) o;
    return Objects.equals(this.mysqlExportOptions, exportContextSqlExportOptions.mysqlExportOptions) &&
        Objects.equals(this.parallel, exportContextSqlExportOptions.parallel) &&
        Objects.equals(this.schemaOnly, exportContextSqlExportOptions.schemaOnly) &&
        Objects.equals(this.tables, exportContextSqlExportOptions.tables) &&
        Objects.equals(this.threads, exportContextSqlExportOptions.threads);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mysqlExportOptions, parallel, schemaOnly, tables, threads);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportContextSqlExportOptions {\n");
    sb.append("    mysqlExportOptions: ").append(toIndentedString(mysqlExportOptions)).append("\n");
    sb.append("    parallel: ").append(toIndentedString(parallel)).append("\n");
    sb.append("    schemaOnly: ").append(toIndentedString(schemaOnly)).append("\n");
    sb.append("    tables: ").append(toIndentedString(tables)).append("\n");
    sb.append("    threads: ").append(toIndentedString(threads)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mysqlExportOptions");
    openapiFields.add("parallel");
    openapiFields.add("schemaOnly");
    openapiFields.add("tables");
    openapiFields.add("threads");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportContextSqlExportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportContextSqlExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportContextSqlExportOptions is not found in the empty JSON string", ExportContextSqlExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportContextSqlExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportContextSqlExportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mysqlExportOptions`
      if (jsonObj.get("mysqlExportOptions") != null && !jsonObj.get("mysqlExportOptions").isJsonNull()) {
        ExportContextSqlExportOptionsMysqlExportOptions.validateJsonElement(jsonObj.get("mysqlExportOptions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tables") != null && !jsonObj.get("tables").isJsonNull() && !jsonObj.get("tables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tables` to be an array in the JSON string but got `%s`", jsonObj.get("tables").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportContextSqlExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportContextSqlExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportContextSqlExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportContextSqlExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportContextSqlExportOptions>() {
           @Override
           public void write(JsonWriter out, ExportContextSqlExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportContextSqlExportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportContextSqlExportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportContextSqlExportOptions
   * @throws IOException if the JSON string is invalid with respect to ExportContextSqlExportOptions
   */
  public static ExportContextSqlExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportContextSqlExportOptions.class);
  }

  /**
   * Convert an instance of ExportContextSqlExportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

