/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExportContextBakExportOptions;
import org.openapitools.client.model.ExportContextCsvExportOptions;
import org.openapitools.client.model.ExportContextSqlExportOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database instance export context.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExportContext {
  public static final String SERIALIZED_NAME_BAK_EXPORT_OPTIONS = "bakExportOptions";
  @SerializedName(SERIALIZED_NAME_BAK_EXPORT_OPTIONS)
  private ExportContextBakExportOptions bakExportOptions;

  public static final String SERIALIZED_NAME_CSV_EXPORT_OPTIONS = "csvExportOptions";
  @SerializedName(SERIALIZED_NAME_CSV_EXPORT_OPTIONS)
  private ExportContextCsvExportOptions csvExportOptions;

  public static final String SERIALIZED_NAME_DATABASES = "databases";
  @SerializedName(SERIALIZED_NAME_DATABASES)
  private List<String> databases = new ArrayList<>();

  /**
   * The file type for the specified uri.
   */
  @JsonAdapter(FileTypeEnum.Adapter.class)
  public enum FileTypeEnum {
    SQL_FILE_TYPE_UNSPECIFIED("SQL_FILE_TYPE_UNSPECIFIED"),
    
    SQL("SQL"),
    
    CSV("CSV"),
    
    BAK("BAK");

    private String value;

    FileTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FileTypeEnum fromValue(String value) {
      for (FileTypeEnum b : FileTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FileTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FileTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FileTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FileTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FileTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FILE_TYPE = "fileType";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private FileTypeEnum fileType;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_OFFLOAD = "offload";
  @SerializedName(SERIALIZED_NAME_OFFLOAD)
  private Boolean offload;

  public static final String SERIALIZED_NAME_SQL_EXPORT_OPTIONS = "sqlExportOptions";
  @SerializedName(SERIALIZED_NAME_SQL_EXPORT_OPTIONS)
  private ExportContextSqlExportOptions sqlExportOptions;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public ExportContext() {
  }

  public ExportContext bakExportOptions(ExportContextBakExportOptions bakExportOptions) {
    this.bakExportOptions = bakExportOptions;
    return this;
  }

  /**
   * Get bakExportOptions
   * @return bakExportOptions
   */
  @javax.annotation.Nullable
  public ExportContextBakExportOptions getBakExportOptions() {
    return bakExportOptions;
  }

  public void setBakExportOptions(ExportContextBakExportOptions bakExportOptions) {
    this.bakExportOptions = bakExportOptions;
  }


  public ExportContext csvExportOptions(ExportContextCsvExportOptions csvExportOptions) {
    this.csvExportOptions = csvExportOptions;
    return this;
  }

  /**
   * Get csvExportOptions
   * @return csvExportOptions
   */
  @javax.annotation.Nullable
  public ExportContextCsvExportOptions getCsvExportOptions() {
    return csvExportOptions;
  }

  public void setCsvExportOptions(ExportContextCsvExportOptions csvExportOptions) {
    this.csvExportOptions = csvExportOptions;
  }


  public ExportContext databases(List<String> databases) {
    this.databases = databases;
    return this;
  }

  public ExportContext addDatabasesItem(String databasesItem) {
    if (this.databases == null) {
      this.databases = new ArrayList<>();
    }
    this.databases.add(databasesItem);
    return this;
  }

  /**
   * Databases to be exported. &#x60;MySQL instances:&#x60; If &#x60;fileType&#x60; is &#x60;SQL&#x60; and no database is specified, all databases are exported, except for the &#x60;mysql&#x60; system database. If &#x60;fileType&#x60; is &#x60;CSV&#x60;, you can specify one database, either by using this property or by using the &#x60;csvExportOptions.selectQuery&#x60; property, which takes precedence over this property. &#x60;PostgreSQL instances:&#x60; You must specify one database to be exported. If &#x60;fileType&#x60; is &#x60;CSV&#x60;, this database must match the one specified in the &#x60;csvExportOptions.selectQuery&#x60; property. &#x60;SQL Server instances:&#x60; You must specify one database to be exported, and the &#x60;fileType&#x60; must be &#x60;BAK&#x60;.
   * @return databases
   */
  @javax.annotation.Nullable
  public List<String> getDatabases() {
    return databases;
  }

  public void setDatabases(List<String> databases) {
    this.databases = databases;
  }


  public ExportContext fileType(FileTypeEnum fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * The file type for the specified uri.
   * @return fileType
   */
  @javax.annotation.Nullable
  public FileTypeEnum getFileType() {
    return fileType;
  }

  public void setFileType(FileTypeEnum fileType) {
    this.fileType = fileType;
  }


  public ExportContext kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#exportContext&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public ExportContext offload(Boolean offload) {
    this.offload = offload;
    return this;
  }

  /**
   * Option for export offload.
   * @return offload
   */
  @javax.annotation.Nullable
  public Boolean getOffload() {
    return offload;
  }

  public void setOffload(Boolean offload) {
    this.offload = offload;
  }


  public ExportContext sqlExportOptions(ExportContextSqlExportOptions sqlExportOptions) {
    this.sqlExportOptions = sqlExportOptions;
    return this;
  }

  /**
   * Get sqlExportOptions
   * @return sqlExportOptions
   */
  @javax.annotation.Nullable
  public ExportContextSqlExportOptions getSqlExportOptions() {
    return sqlExportOptions;
  }

  public void setSqlExportOptions(ExportContextSqlExportOptions sqlExportOptions) {
    this.sqlExportOptions = sqlExportOptions;
  }


  public ExportContext uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form &#x60;gs://bucketName/fileName&#x60;. If the file already exists, the request succeeds, but the operation fails. If &#x60;fileType&#x60; is &#x60;SQL&#x60; and the filename ends with .gz, the contents are compressed.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportContext exportContext = (ExportContext) o;
    return Objects.equals(this.bakExportOptions, exportContext.bakExportOptions) &&
        Objects.equals(this.csvExportOptions, exportContext.csvExportOptions) &&
        Objects.equals(this.databases, exportContext.databases) &&
        Objects.equals(this.fileType, exportContext.fileType) &&
        Objects.equals(this.kind, exportContext.kind) &&
        Objects.equals(this.offload, exportContext.offload) &&
        Objects.equals(this.sqlExportOptions, exportContext.sqlExportOptions) &&
        Objects.equals(this.uri, exportContext.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bakExportOptions, csvExportOptions, databases, fileType, kind, offload, sqlExportOptions, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportContext {\n");
    sb.append("    bakExportOptions: ").append(toIndentedString(bakExportOptions)).append("\n");
    sb.append("    csvExportOptions: ").append(toIndentedString(csvExportOptions)).append("\n");
    sb.append("    databases: ").append(toIndentedString(databases)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    offload: ").append(toIndentedString(offload)).append("\n");
    sb.append("    sqlExportOptions: ").append(toIndentedString(sqlExportOptions)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bakExportOptions");
    openapiFields.add("csvExportOptions");
    openapiFields.add("databases");
    openapiFields.add("fileType");
    openapiFields.add("kind");
    openapiFields.add("offload");
    openapiFields.add("sqlExportOptions");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportContext
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExportContext.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportContext is not found in the empty JSON string", ExportContext.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportContext` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `bakExportOptions`
      if (jsonObj.get("bakExportOptions") != null && !jsonObj.get("bakExportOptions").isJsonNull()) {
        ExportContextBakExportOptions.validateJsonElement(jsonObj.get("bakExportOptions"));
      }
      // validate the optional field `csvExportOptions`
      if (jsonObj.get("csvExportOptions") != null && !jsonObj.get("csvExportOptions").isJsonNull()) {
        ExportContextCsvExportOptions.validateJsonElement(jsonObj.get("csvExportOptions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("databases") != null && !jsonObj.get("databases").isJsonNull() && !jsonObj.get("databases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `databases` to be an array in the JSON string but got `%s`", jsonObj.get("databases").toString()));
      }
      if ((jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) && !jsonObj.get("fileType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileType").toString()));
      }
      // validate the optional field `fileType`
      if (jsonObj.get("fileType") != null && !jsonObj.get("fileType").isJsonNull()) {
        FileTypeEnum.validateJsonElement(jsonObj.get("fileType"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      // validate the optional field `sqlExportOptions`
      if (jsonObj.get("sqlExportOptions") != null && !jsonObj.get("sqlExportOptions").isJsonNull()) {
        ExportContextSqlExportOptions.validateJsonElement(jsonObj.get("sqlExportOptions"));
      }
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportContext>() {
           @Override
           public void write(JsonWriter out, ExportContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportContext read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportContext given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportContext
   * @throws IOException if the JSON string is invalid with respect to ExportContext
   */
  public static ExportContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportContext.class);
  }

  /**
   * Convert an instance of ExportContext to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

