/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DiskEncryptionConfiguration;
import org.openapitools.client.model.DiskEncryptionStatus;
import org.openapitools.client.model.OperationError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A BackupRun resource.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupRun {
  /**
   * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
   */
  @JsonAdapter(BackupKindEnum.Adapter.class)
  public enum BackupKindEnum {
    SQL_BACKUP_KIND_UNSPECIFIED("SQL_BACKUP_KIND_UNSPECIFIED"),
    
    SNAPSHOT("SNAPSHOT"),
    
    PHYSICAL("PHYSICAL");

    private String value;

    BackupKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BackupKindEnum fromValue(String value) {
      for (BackupKindEnum b : BackupKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BackupKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BackupKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BackupKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BackupKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BackupKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BACKUP_KIND = "backupKind";
  @SerializedName(SERIALIZED_NAME_BACKUP_KIND)
  private BackupKindEnum backupKind;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISK_ENCRYPTION_CONFIGURATION = "diskEncryptionConfiguration";
  @SerializedName(SERIALIZED_NAME_DISK_ENCRYPTION_CONFIGURATION)
  private DiskEncryptionConfiguration diskEncryptionConfiguration;

  public static final String SERIALIZED_NAME_DISK_ENCRYPTION_STATUS = "diskEncryptionStatus";
  @SerializedName(SERIALIZED_NAME_DISK_ENCRYPTION_STATUS)
  private DiskEncryptionStatus diskEncryptionStatus;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_ENQUEUED_TIME = "enqueuedTime";
  @SerializedName(SERIALIZED_NAME_ENQUEUED_TIME)
  private String enqueuedTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private OperationError error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTANCE = "instance";
  @SerializedName(SERIALIZED_NAME_INSTANCE)
  private String instance;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  /**
   * The status of this run.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    SQL_BACKUP_RUN_STATUS_UNSPECIFIED("SQL_BACKUP_RUN_STATUS_UNSPECIFIED"),
    
    ENQUEUED("ENQUEUED"),
    
    OVERDUE("OVERDUE"),
    
    RUNNING("RUNNING"),
    
    FAILED("FAILED"),
    
    SUCCESSFUL("SUCCESSFUL"),
    
    SKIPPED("SKIPPED"),
    
    DELETION_PENDING("DELETION_PENDING"),
    
    DELETION_FAILED("DELETION_FAILED"),
    
    DELETED("DELETED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TIME_ZONE = "timeZone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  /**
   * The type of this run; can be either \&quot;AUTOMATED\&quot; or \&quot;ON_DEMAND\&quot; or \&quot;FINAL\&quot;. This field defaults to \&quot;ON_DEMAND\&quot; and is ignored, when specified for insert requests.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    SQL_BACKUP_RUN_TYPE_UNSPECIFIED("SQL_BACKUP_RUN_TYPE_UNSPECIFIED"),
    
    AUTOMATED("AUTOMATED"),
    
    ON_DEMAND("ON_DEMAND");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_WINDOW_START_TIME = "windowStartTime";
  @SerializedName(SERIALIZED_NAME_WINDOW_START_TIME)
  private String windowStartTime;

  public BackupRun() {
  }

  public BackupRun backupKind(BackupKindEnum backupKind) {
    this.backupKind = backupKind;
    return this;
  }

  /**
   * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
   * @return backupKind
   */
  @javax.annotation.Nullable
  public BackupKindEnum getBackupKind() {
    return backupKind;
  }

  public void setBackupKind(BackupKindEnum backupKind) {
    this.backupKind = backupKind;
  }


  public BackupRun description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of this run, only applicable to on-demand backups.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public BackupRun diskEncryptionConfiguration(DiskEncryptionConfiguration diskEncryptionConfiguration) {
    this.diskEncryptionConfiguration = diskEncryptionConfiguration;
    return this;
  }

  /**
   * Get diskEncryptionConfiguration
   * @return diskEncryptionConfiguration
   */
  @javax.annotation.Nullable
  public DiskEncryptionConfiguration getDiskEncryptionConfiguration() {
    return diskEncryptionConfiguration;
  }

  public void setDiskEncryptionConfiguration(DiskEncryptionConfiguration diskEncryptionConfiguration) {
    this.diskEncryptionConfiguration = diskEncryptionConfiguration;
  }


  public BackupRun diskEncryptionStatus(DiskEncryptionStatus diskEncryptionStatus) {
    this.diskEncryptionStatus = diskEncryptionStatus;
    return this;
  }

  /**
   * Get diskEncryptionStatus
   * @return diskEncryptionStatus
   */
  @javax.annotation.Nullable
  public DiskEncryptionStatus getDiskEncryptionStatus() {
    return diskEncryptionStatus;
  }

  public void setDiskEncryptionStatus(DiskEncryptionStatus diskEncryptionStatus) {
    this.diskEncryptionStatus = diskEncryptionStatus;
  }


  public BackupRun endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public BackupRun enqueuedTime(String enqueuedTime) {
    this.enqueuedTime = enqueuedTime;
    return this;
  }

  /**
   * The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return enqueuedTime
   */
  @javax.annotation.Nullable
  public String getEnqueuedTime() {
    return enqueuedTime;
  }

  public void setEnqueuedTime(String enqueuedTime) {
    this.enqueuedTime = enqueuedTime;
  }


  public BackupRun error(OperationError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public OperationError getError() {
    return error;
  }

  public void setError(OperationError error) {
    this.error = error;
  }


  public BackupRun id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The identifier for this backup run. Unique only for a specific Cloud SQL instance.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public BackupRun instance(String instance) {
    this.instance = instance;
    return this;
  }

  /**
   * Name of the database instance.
   * @return instance
   */
  @javax.annotation.Nullable
  public String getInstance() {
    return instance;
  }

  public void setInstance(String instance) {
    this.instance = instance;
  }


  public BackupRun kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#backupRun&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public BackupRun location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the backups.
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public BackupRun selfLink(String selfLink) {
    this.selfLink = selfLink;
    return this;
  }

  /**
   * The URI of this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }

  public void setSelfLink(String selfLink) {
    this.selfLink = selfLink;
  }


  public BackupRun startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public BackupRun status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of this run.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public BackupRun timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public BackupRun type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * The type of this run; can be either \&quot;AUTOMATED\&quot; or \&quot;ON_DEMAND\&quot; or \&quot;FINAL\&quot;. This field defaults to \&quot;ON_DEMAND\&quot; and is ignored, when specified for insert requests.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public BackupRun windowStartTime(String windowStartTime) {
    this.windowStartTime = windowStartTime;
    return this;
  }

  /**
   * The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example &#x60;2012-11-15T16:19:00.094Z&#x60;.
   * @return windowStartTime
   */
  @javax.annotation.Nullable
  public String getWindowStartTime() {
    return windowStartTime;
  }

  public void setWindowStartTime(String windowStartTime) {
    this.windowStartTime = windowStartTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupRun backupRun = (BackupRun) o;
    return Objects.equals(this.backupKind, backupRun.backupKind) &&
        Objects.equals(this.description, backupRun.description) &&
        Objects.equals(this.diskEncryptionConfiguration, backupRun.diskEncryptionConfiguration) &&
        Objects.equals(this.diskEncryptionStatus, backupRun.diskEncryptionStatus) &&
        Objects.equals(this.endTime, backupRun.endTime) &&
        Objects.equals(this.enqueuedTime, backupRun.enqueuedTime) &&
        Objects.equals(this.error, backupRun.error) &&
        Objects.equals(this.id, backupRun.id) &&
        Objects.equals(this.instance, backupRun.instance) &&
        Objects.equals(this.kind, backupRun.kind) &&
        Objects.equals(this.location, backupRun.location) &&
        Objects.equals(this.selfLink, backupRun.selfLink) &&
        Objects.equals(this.startTime, backupRun.startTime) &&
        Objects.equals(this.status, backupRun.status) &&
        Objects.equals(this.timeZone, backupRun.timeZone) &&
        Objects.equals(this.type, backupRun.type) &&
        Objects.equals(this.windowStartTime, backupRun.windowStartTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupKind, description, diskEncryptionConfiguration, diskEncryptionStatus, endTime, enqueuedTime, error, id, instance, kind, location, selfLink, startTime, status, timeZone, type, windowStartTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupRun {\n");
    sb.append("    backupKind: ").append(toIndentedString(backupKind)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    diskEncryptionConfiguration: ").append(toIndentedString(diskEncryptionConfiguration)).append("\n");
    sb.append("    diskEncryptionStatus: ").append(toIndentedString(diskEncryptionStatus)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    enqueuedTime: ").append(toIndentedString(enqueuedTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    windowStartTime: ").append(toIndentedString(windowStartTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupKind");
    openapiFields.add("description");
    openapiFields.add("diskEncryptionConfiguration");
    openapiFields.add("diskEncryptionStatus");
    openapiFields.add("endTime");
    openapiFields.add("enqueuedTime");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("instance");
    openapiFields.add("kind");
    openapiFields.add("location");
    openapiFields.add("selfLink");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("timeZone");
    openapiFields.add("type");
    openapiFields.add("windowStartTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupRun
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupRun.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupRun is not found in the empty JSON string", BackupRun.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupRun.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupRun` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("backupKind") != null && !jsonObj.get("backupKind").isJsonNull()) && !jsonObj.get("backupKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `backupKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("backupKind").toString()));
      }
      // validate the optional field `backupKind`
      if (jsonObj.get("backupKind") != null && !jsonObj.get("backupKind").isJsonNull()) {
        BackupKindEnum.validateJsonElement(jsonObj.get("backupKind"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `diskEncryptionConfiguration`
      if (jsonObj.get("diskEncryptionConfiguration") != null && !jsonObj.get("diskEncryptionConfiguration").isJsonNull()) {
        DiskEncryptionConfiguration.validateJsonElement(jsonObj.get("diskEncryptionConfiguration"));
      }
      // validate the optional field `diskEncryptionStatus`
      if (jsonObj.get("diskEncryptionStatus") != null && !jsonObj.get("diskEncryptionStatus").isJsonNull()) {
        DiskEncryptionStatus.validateJsonElement(jsonObj.get("diskEncryptionStatus"));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      if ((jsonObj.get("enqueuedTime") != null && !jsonObj.get("enqueuedTime").isJsonNull()) && !jsonObj.get("enqueuedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enqueuedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enqueuedTime").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        OperationError.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("instance") != null && !jsonObj.get("instance").isJsonNull()) && !jsonObj.get("instance").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instance` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instance").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("timeZone") != null && !jsonObj.get("timeZone").isJsonNull()) && !jsonObj.get("timeZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeZone").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("windowStartTime") != null && !jsonObj.get("windowStartTime").isJsonNull()) && !jsonObj.get("windowStartTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `windowStartTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("windowStartTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupRun.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupRun' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupRun> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupRun.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupRun>() {
           @Override
           public void write(JsonWriter out, BackupRun value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupRun read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupRun given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupRun
   * @throws IOException if the JSON string is invalid with respect to BackupRun
   */
  public static BackupRun fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupRun.class);
  }

  /**
   * Convert an instance of BackupRun to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

