/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LocationPreference {
  public static final String SERIALIZED_NAME_FOLLOW_GAE_APPLICATION = "followGaeApplication";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_FOLLOW_GAE_APPLICATION)
  private String followGaeApplication;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_SECONDARY_ZONE = "secondaryZone";
  @SerializedName(SERIALIZED_NAME_SECONDARY_ZONE)
  private String secondaryZone;

  public static final String SERIALIZED_NAME_ZONE = "zone";
  @SerializedName(SERIALIZED_NAME_ZONE)
  private String zone;

  public LocationPreference() {
  }

  @Deprecated
  public LocationPreference followGaeApplication(String followGaeApplication) {
    this.followGaeApplication = followGaeApplication;
    return this;
  }

  /**
   * The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
   * @return followGaeApplication
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getFollowGaeApplication() {
    return followGaeApplication;
  }

  @Deprecated
  public void setFollowGaeApplication(String followGaeApplication) {
    this.followGaeApplication = followGaeApplication;
  }


  public LocationPreference kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#locationPreference&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public LocationPreference secondaryZone(String secondaryZone) {
    this.secondaryZone = secondaryZone;
    return this;
  }

  /**
   * The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). To disable this field, set it to &#39;no_secondary_zone&#39;.
   * @return secondaryZone
   */
  @javax.annotation.Nullable
  public String getSecondaryZone() {
    return secondaryZone;
  }

  public void setSecondaryZone(String secondaryZone) {
    this.secondaryZone = secondaryZone;
  }


  public LocationPreference zone(String zone) {
    this.zone = zone;
    return this;
  }

  /**
   * The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
   * @return zone
   */
  @javax.annotation.Nullable
  public String getZone() {
    return zone;
  }

  public void setZone(String zone) {
    this.zone = zone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LocationPreference locationPreference = (LocationPreference) o;
    return Objects.equals(this.followGaeApplication, locationPreference.followGaeApplication) &&
        Objects.equals(this.kind, locationPreference.kind) &&
        Objects.equals(this.secondaryZone, locationPreference.secondaryZone) &&
        Objects.equals(this.zone, locationPreference.zone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(followGaeApplication, kind, secondaryZone, zone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LocationPreference {\n");
    sb.append("    followGaeApplication: ").append(toIndentedString(followGaeApplication)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    secondaryZone: ").append(toIndentedString(secondaryZone)).append("\n");
    sb.append("    zone: ").append(toIndentedString(zone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("followGaeApplication");
    openapiFields.add("kind");
    openapiFields.add("secondaryZone");
    openapiFields.add("zone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LocationPreference
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LocationPreference.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LocationPreference is not found in the empty JSON string", LocationPreference.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LocationPreference.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LocationPreference` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("followGaeApplication") != null && !jsonObj.get("followGaeApplication").isJsonNull()) && !jsonObj.get("followGaeApplication").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `followGaeApplication` to be a primitive type in the JSON string but got `%s`", jsonObj.get("followGaeApplication").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("secondaryZone") != null && !jsonObj.get("secondaryZone").isJsonNull()) && !jsonObj.get("secondaryZone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryZone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryZone").toString()));
      }
      if ((jsonObj.get("zone") != null && !jsonObj.get("zone").isJsonNull()) && !jsonObj.get("zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LocationPreference.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LocationPreference' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LocationPreference> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LocationPreference.class));

       return (TypeAdapter<T>) new TypeAdapter<LocationPreference>() {
           @Override
           public void write(JsonWriter out, LocationPreference value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LocationPreference read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LocationPreference given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LocationPreference
   * @throws IOException if the JSON string is invalid with respect to LocationPreference
   */
  public static LocationPreference fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LocationPreference.class);
  }

  /**
   * Convert an instance of LocationPreference to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

