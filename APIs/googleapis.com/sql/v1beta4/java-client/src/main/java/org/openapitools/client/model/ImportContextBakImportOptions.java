/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImportContextBakImportOptionsEncryptionOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Import parameters specific to SQL Server .BAK files
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImportContextBakImportOptions {
  /**
   * Type of the bak content, FULL or DIFF.
   */
  @JsonAdapter(BakTypeEnum.Adapter.class)
  public enum BakTypeEnum {
    BAK_TYPE_UNSPECIFIED("BAK_TYPE_UNSPECIFIED"),
    
    FULL("FULL"),
    
    DIFF("DIFF"),
    
    TLOG("TLOG");

    private String value;

    BakTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BakTypeEnum fromValue(String value) {
      for (BakTypeEnum b : BakTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BakTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BakTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BakTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BakTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BakTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BAK_TYPE = "bakType";
  @SerializedName(SERIALIZED_NAME_BAK_TYPE)
  private BakTypeEnum bakType;

  public static final String SERIALIZED_NAME_ENCRYPTION_OPTIONS = "encryptionOptions";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_OPTIONS)
  private ImportContextBakImportOptionsEncryptionOptions encryptionOptions;

  public static final String SERIALIZED_NAME_NO_RECOVERY = "noRecovery";
  @SerializedName(SERIALIZED_NAME_NO_RECOVERY)
  private Boolean noRecovery;

  public static final String SERIALIZED_NAME_RECOVERY_ONLY = "recoveryOnly";
  @SerializedName(SERIALIZED_NAME_RECOVERY_ONLY)
  private Boolean recoveryOnly;

  public static final String SERIALIZED_NAME_STOP_AT = "stopAt";
  @SerializedName(SERIALIZED_NAME_STOP_AT)
  private String stopAt;

  public static final String SERIALIZED_NAME_STOP_AT_MARK = "stopAtMark";
  @SerializedName(SERIALIZED_NAME_STOP_AT_MARK)
  private String stopAtMark;

  public static final String SERIALIZED_NAME_STRIPED = "striped";
  @SerializedName(SERIALIZED_NAME_STRIPED)
  private Boolean striped;

  public ImportContextBakImportOptions() {
  }

  public ImportContextBakImportOptions bakType(BakTypeEnum bakType) {
    this.bakType = bakType;
    return this;
  }

  /**
   * Type of the bak content, FULL or DIFF.
   * @return bakType
   */
  @javax.annotation.Nullable
  public BakTypeEnum getBakType() {
    return bakType;
  }

  public void setBakType(BakTypeEnum bakType) {
    this.bakType = bakType;
  }


  public ImportContextBakImportOptions encryptionOptions(ImportContextBakImportOptionsEncryptionOptions encryptionOptions) {
    this.encryptionOptions = encryptionOptions;
    return this;
  }

  /**
   * Get encryptionOptions
   * @return encryptionOptions
   */
  @javax.annotation.Nullable
  public ImportContextBakImportOptionsEncryptionOptions getEncryptionOptions() {
    return encryptionOptions;
  }

  public void setEncryptionOptions(ImportContextBakImportOptionsEncryptionOptions encryptionOptions) {
    this.encryptionOptions = encryptionOptions;
  }


  public ImportContextBakImportOptions noRecovery(Boolean noRecovery) {
    this.noRecovery = noRecovery;
    return this;
  }

  /**
   * Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.
   * @return noRecovery
   */
  @javax.annotation.Nullable
  public Boolean getNoRecovery() {
    return noRecovery;
  }

  public void setNoRecovery(Boolean noRecovery) {
    this.noRecovery = noRecovery;
  }


  public ImportContextBakImportOptions recoveryOnly(Boolean recoveryOnly) {
    this.recoveryOnly = recoveryOnly;
    return this;
  }

  /**
   * Whether or not the backup importing request will just bring database online without downloading Bak content only one of \&quot;no_recovery\&quot; and \&quot;recovery_only\&quot; can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.
   * @return recoveryOnly
   */
  @javax.annotation.Nullable
  public Boolean getRecoveryOnly() {
    return recoveryOnly;
  }

  public void setRecoveryOnly(Boolean recoveryOnly) {
    this.recoveryOnly = recoveryOnly;
  }


  public ImportContextBakImportOptions stopAt(String stopAt) {
    this.stopAt = stopAt;
    return this;
  }

  /**
   * Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, &#x60;2023-10-01T16:19:00.094&#x60;). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.
   * @return stopAt
   */
  @javax.annotation.Nullable
  public String getStopAt() {
    return stopAt;
  }

  public void setStopAt(String stopAt) {
    this.stopAt = stopAt;
  }


  public ImportContextBakImportOptions stopAtMark(String stopAtMark) {
    this.stopAtMark = stopAtMark;
    return this;
  }

  /**
   * Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.
   * @return stopAtMark
   */
  @javax.annotation.Nullable
  public String getStopAtMark() {
    return stopAtMark;
  }

  public void setStopAtMark(String stopAtMark) {
    this.stopAtMark = stopAtMark;
  }


  public ImportContextBakImportOptions striped(Boolean striped) {
    this.striped = striped;
    return this;
  }

  /**
   * Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server.
   * @return striped
   */
  @javax.annotation.Nullable
  public Boolean getStriped() {
    return striped;
  }

  public void setStriped(Boolean striped) {
    this.striped = striped;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImportContextBakImportOptions importContextBakImportOptions = (ImportContextBakImportOptions) o;
    return Objects.equals(this.bakType, importContextBakImportOptions.bakType) &&
        Objects.equals(this.encryptionOptions, importContextBakImportOptions.encryptionOptions) &&
        Objects.equals(this.noRecovery, importContextBakImportOptions.noRecovery) &&
        Objects.equals(this.recoveryOnly, importContextBakImportOptions.recoveryOnly) &&
        Objects.equals(this.stopAt, importContextBakImportOptions.stopAt) &&
        Objects.equals(this.stopAtMark, importContextBakImportOptions.stopAtMark) &&
        Objects.equals(this.striped, importContextBakImportOptions.striped);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bakType, encryptionOptions, noRecovery, recoveryOnly, stopAt, stopAtMark, striped);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImportContextBakImportOptions {\n");
    sb.append("    bakType: ").append(toIndentedString(bakType)).append("\n");
    sb.append("    encryptionOptions: ").append(toIndentedString(encryptionOptions)).append("\n");
    sb.append("    noRecovery: ").append(toIndentedString(noRecovery)).append("\n");
    sb.append("    recoveryOnly: ").append(toIndentedString(recoveryOnly)).append("\n");
    sb.append("    stopAt: ").append(toIndentedString(stopAt)).append("\n");
    sb.append("    stopAtMark: ").append(toIndentedString(stopAtMark)).append("\n");
    sb.append("    striped: ").append(toIndentedString(striped)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bakType");
    openapiFields.add("encryptionOptions");
    openapiFields.add("noRecovery");
    openapiFields.add("recoveryOnly");
    openapiFields.add("stopAt");
    openapiFields.add("stopAtMark");
    openapiFields.add("striped");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImportContextBakImportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImportContextBakImportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImportContextBakImportOptions is not found in the empty JSON string", ImportContextBakImportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImportContextBakImportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImportContextBakImportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bakType") != null && !jsonObj.get("bakType").isJsonNull()) && !jsonObj.get("bakType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bakType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bakType").toString()));
      }
      // validate the optional field `bakType`
      if (jsonObj.get("bakType") != null && !jsonObj.get("bakType").isJsonNull()) {
        BakTypeEnum.validateJsonElement(jsonObj.get("bakType"));
      }
      // validate the optional field `encryptionOptions`
      if (jsonObj.get("encryptionOptions") != null && !jsonObj.get("encryptionOptions").isJsonNull()) {
        ImportContextBakImportOptionsEncryptionOptions.validateJsonElement(jsonObj.get("encryptionOptions"));
      }
      if ((jsonObj.get("stopAt") != null && !jsonObj.get("stopAt").isJsonNull()) && !jsonObj.get("stopAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopAt").toString()));
      }
      if ((jsonObj.get("stopAtMark") != null && !jsonObj.get("stopAtMark").isJsonNull()) && !jsonObj.get("stopAtMark").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stopAtMark` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stopAtMark").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImportContextBakImportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImportContextBakImportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImportContextBakImportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImportContextBakImportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ImportContextBakImportOptions>() {
           @Override
           public void write(JsonWriter out, ImportContextBakImportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImportContextBakImportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImportContextBakImportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImportContextBakImportOptions
   * @throws IOException if the JSON string is invalid with respect to ImportContextBakImportOptions
   */
  public static ImportContextBakImportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImportContextBakImportOptions.class);
  }

  /**
   * Convert an instance of ImportContextBakImportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

