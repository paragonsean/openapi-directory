/*
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BackupRetentionSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Database instance backup configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:44.282326-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BackupConfiguration {
  public static final String SERIALIZED_NAME_BACKUP_RETENTION_SETTINGS = "backupRetentionSettings";
  @SerializedName(SERIALIZED_NAME_BACKUP_RETENTION_SETTINGS)
  private BackupRetentionSettings backupRetentionSettings;

  public static final String SERIALIZED_NAME_BINARY_LOG_ENABLED = "binaryLogEnabled";
  @SerializedName(SERIALIZED_NAME_BINARY_LOG_ENABLED)
  private Boolean binaryLogEnabled;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_ENABLED = "pointInTimeRecoveryEnabled";
  @SerializedName(SERIALIZED_NAME_POINT_IN_TIME_RECOVERY_ENABLED)
  private Boolean pointInTimeRecoveryEnabled;

  public static final String SERIALIZED_NAME_REPLICATION_LOG_ARCHIVING_ENABLED = "replicationLogArchivingEnabled";
  @SerializedName(SERIALIZED_NAME_REPLICATION_LOG_ARCHIVING_ENABLED)
  private Boolean replicationLogArchivingEnabled;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public static final String SERIALIZED_NAME_TRANSACTION_LOG_RETENTION_DAYS = "transactionLogRetentionDays";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LOG_RETENTION_DAYS)
  private Integer transactionLogRetentionDays;

  public BackupConfiguration() {
  }

  public BackupConfiguration backupRetentionSettings(BackupRetentionSettings backupRetentionSettings) {
    this.backupRetentionSettings = backupRetentionSettings;
    return this;
  }

  /**
   * Get backupRetentionSettings
   * @return backupRetentionSettings
   */
  @javax.annotation.Nullable
  public BackupRetentionSettings getBackupRetentionSettings() {
    return backupRetentionSettings;
  }

  public void setBackupRetentionSettings(BackupRetentionSettings backupRetentionSettings) {
    this.backupRetentionSettings = backupRetentionSettings;
  }


  public BackupConfiguration binaryLogEnabled(Boolean binaryLogEnabled) {
    this.binaryLogEnabled = binaryLogEnabled;
    return this;
  }

  /**
   * (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.
   * @return binaryLogEnabled
   */
  @javax.annotation.Nullable
  public Boolean getBinaryLogEnabled() {
    return binaryLogEnabled;
  }

  public void setBinaryLogEnabled(Boolean binaryLogEnabled) {
    this.binaryLogEnabled = binaryLogEnabled;
  }


  public BackupConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether this configuration is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public BackupConfiguration kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * This is always &#x60;sql#backupConfiguration&#x60;.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public BackupConfiguration location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Location of the backup
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public BackupConfiguration pointInTimeRecoveryEnabled(Boolean pointInTimeRecoveryEnabled) {
    this.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
    return this;
  }

  /**
   * Whether point in time recovery is enabled.
   * @return pointInTimeRecoveryEnabled
   */
  @javax.annotation.Nullable
  public Boolean getPointInTimeRecoveryEnabled() {
    return pointInTimeRecoveryEnabled;
  }

  public void setPointInTimeRecoveryEnabled(Boolean pointInTimeRecoveryEnabled) {
    this.pointInTimeRecoveryEnabled = pointInTimeRecoveryEnabled;
  }


  public BackupConfiguration replicationLogArchivingEnabled(Boolean replicationLogArchivingEnabled) {
    this.replicationLogArchivingEnabled = replicationLogArchivingEnabled;
    return this;
  }

  /**
   * Reserved for future use.
   * @return replicationLogArchivingEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReplicationLogArchivingEnabled() {
    return replicationLogArchivingEnabled;
  }

  public void setReplicationLogArchivingEnabled(Boolean replicationLogArchivingEnabled) {
    this.replicationLogArchivingEnabled = replicationLogArchivingEnabled;
  }


  public BackupConfiguration startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time for the daily backup configuration in UTC timezone in the 24 hour format - &#x60;HH:MM&#x60;.
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }


  public BackupConfiguration transactionLogRetentionDays(Integer transactionLogRetentionDays) {
    this.transactionLogRetentionDays = transactionLogRetentionDays;
    return this;
  }

  /**
   * The number of days of transaction logs we retain for point in time restore, from 1-7.
   * @return transactionLogRetentionDays
   */
  @javax.annotation.Nullable
  public Integer getTransactionLogRetentionDays() {
    return transactionLogRetentionDays;
  }

  public void setTransactionLogRetentionDays(Integer transactionLogRetentionDays) {
    this.transactionLogRetentionDays = transactionLogRetentionDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BackupConfiguration backupConfiguration = (BackupConfiguration) o;
    return Objects.equals(this.backupRetentionSettings, backupConfiguration.backupRetentionSettings) &&
        Objects.equals(this.binaryLogEnabled, backupConfiguration.binaryLogEnabled) &&
        Objects.equals(this.enabled, backupConfiguration.enabled) &&
        Objects.equals(this.kind, backupConfiguration.kind) &&
        Objects.equals(this.location, backupConfiguration.location) &&
        Objects.equals(this.pointInTimeRecoveryEnabled, backupConfiguration.pointInTimeRecoveryEnabled) &&
        Objects.equals(this.replicationLogArchivingEnabled, backupConfiguration.replicationLogArchivingEnabled) &&
        Objects.equals(this.startTime, backupConfiguration.startTime) &&
        Objects.equals(this.transactionLogRetentionDays, backupConfiguration.transactionLogRetentionDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backupRetentionSettings, binaryLogEnabled, enabled, kind, location, pointInTimeRecoveryEnabled, replicationLogArchivingEnabled, startTime, transactionLogRetentionDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BackupConfiguration {\n");
    sb.append("    backupRetentionSettings: ").append(toIndentedString(backupRetentionSettings)).append("\n");
    sb.append("    binaryLogEnabled: ").append(toIndentedString(binaryLogEnabled)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    pointInTimeRecoveryEnabled: ").append(toIndentedString(pointInTimeRecoveryEnabled)).append("\n");
    sb.append("    replicationLogArchivingEnabled: ").append(toIndentedString(replicationLogArchivingEnabled)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    transactionLogRetentionDays: ").append(toIndentedString(transactionLogRetentionDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("backupRetentionSettings");
    openapiFields.add("binaryLogEnabled");
    openapiFields.add("enabled");
    openapiFields.add("kind");
    openapiFields.add("location");
    openapiFields.add("pointInTimeRecoveryEnabled");
    openapiFields.add("replicationLogArchivingEnabled");
    openapiFields.add("startTime");
    openapiFields.add("transactionLogRetentionDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BackupConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BackupConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BackupConfiguration is not found in the empty JSON string", BackupConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BackupConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BackupConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `backupRetentionSettings`
      if (jsonObj.get("backupRetentionSettings") != null && !jsonObj.get("backupRetentionSettings").isJsonNull()) {
        BackupRetentionSettings.validateJsonElement(jsonObj.get("backupRetentionSettings"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BackupConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BackupConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BackupConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BackupConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<BackupConfiguration>() {
           @Override
           public void write(JsonWriter out, BackupConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BackupConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BackupConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BackupConfiguration
   * @throws IOException if the JSON string is invalid with respect to BackupConfiguration
   */
  public static BackupConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BackupConfiguration.class);
  }

  /**
   * Convert an instance of BackupConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

