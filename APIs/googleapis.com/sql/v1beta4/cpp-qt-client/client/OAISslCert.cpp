/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslCert.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslCert::OAISslCert(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslCert::OAISslCert() {
    this->initializeModel();
}

OAISslCert::~OAISslCert() {}

void OAISslCert::initializeModel() {

    m_cert_isSet = false;
    m_cert_isValid = false;

    m_cert_serial_number_isSet = false;
    m_cert_serial_number_isValid = false;

    m_common_name_isSet = false;
    m_common_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_sha1_fingerprint_isSet = false;
    m_sha1_fingerprint_isValid = false;
}

void OAISslCert::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslCert::fromJsonObject(QJsonObject json) {

    m_cert_isValid = ::OpenAPI::fromJsonValue(m_cert, json[QString("cert")]);
    m_cert_isSet = !json[QString("cert")].isNull() && m_cert_isValid;

    m_cert_serial_number_isValid = ::OpenAPI::fromJsonValue(m_cert_serial_number, json[QString("certSerialNumber")]);
    m_cert_serial_number_isSet = !json[QString("certSerialNumber")].isNull() && m_cert_serial_number_isValid;

    m_common_name_isValid = ::OpenAPI::fromJsonValue(m_common_name, json[QString("commonName")]);
    m_common_name_isSet = !json[QString("commonName")].isNull() && m_common_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expirationTime")]);
    m_expiration_time_isSet = !json[QString("expirationTime")].isNull() && m_expiration_time_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_sha1_fingerprint_isValid = ::OpenAPI::fromJsonValue(m_sha1_fingerprint, json[QString("sha1Fingerprint")]);
    m_sha1_fingerprint_isSet = !json[QString("sha1Fingerprint")].isNull() && m_sha1_fingerprint_isValid;
}

QString OAISslCert::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslCert::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_isSet) {
        obj.insert(QString("cert"), ::OpenAPI::toJsonValue(m_cert));
    }
    if (m_cert_serial_number_isSet) {
        obj.insert(QString("certSerialNumber"), ::OpenAPI::toJsonValue(m_cert_serial_number));
    }
    if (m_common_name_isSet) {
        obj.insert(QString("commonName"), ::OpenAPI::toJsonValue(m_common_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expirationTime"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_sha1_fingerprint_isSet) {
        obj.insert(QString("sha1Fingerprint"), ::OpenAPI::toJsonValue(m_sha1_fingerprint));
    }
    return obj;
}

QString OAISslCert::getCert() const {
    return m_cert;
}
void OAISslCert::setCert(const QString &cert) {
    m_cert = cert;
    m_cert_isSet = true;
}

bool OAISslCert::is_cert_Set() const{
    return m_cert_isSet;
}

bool OAISslCert::is_cert_Valid() const{
    return m_cert_isValid;
}

QString OAISslCert::getCertSerialNumber() const {
    return m_cert_serial_number;
}
void OAISslCert::setCertSerialNumber(const QString &cert_serial_number) {
    m_cert_serial_number = cert_serial_number;
    m_cert_serial_number_isSet = true;
}

bool OAISslCert::is_cert_serial_number_Set() const{
    return m_cert_serial_number_isSet;
}

bool OAISslCert::is_cert_serial_number_Valid() const{
    return m_cert_serial_number_isValid;
}

QString OAISslCert::getCommonName() const {
    return m_common_name;
}
void OAISslCert::setCommonName(const QString &common_name) {
    m_common_name = common_name;
    m_common_name_isSet = true;
}

bool OAISslCert::is_common_name_Set() const{
    return m_common_name_isSet;
}

bool OAISslCert::is_common_name_Valid() const{
    return m_common_name_isValid;
}

QString OAISslCert::getCreateTime() const {
    return m_create_time;
}
void OAISslCert::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISslCert::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISslCert::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISslCert::getExpirationTime() const {
    return m_expiration_time;
}
void OAISslCert::setExpirationTime(const QString &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAISslCert::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAISslCert::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QString OAISslCert::getInstance() const {
    return m_instance;
}
void OAISslCert::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAISslCert::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAISslCert::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAISslCert::getKind() const {
    return m_kind;
}
void OAISslCert::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISslCert::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISslCert::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAISslCert::getSelfLink() const {
    return m_self_link;
}
void OAISslCert::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAISslCert::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAISslCert::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAISslCert::getSha1Fingerprint() const {
    return m_sha1_fingerprint;
}
void OAISslCert::setSha1Fingerprint(const QString &sha1_fingerprint) {
    m_sha1_fingerprint = sha1_fingerprint;
    m_sha1_fingerprint_isSet = true;
}

bool OAISslCert::is_sha1_fingerprint_Set() const{
    return m_sha1_fingerprint_isSet;
}

bool OAISslCert::is_sha1_fingerprint_Valid() const{
    return m_sha1_fingerprint_isValid;
}

bool OAISslCert::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_serial_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha1_fingerprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslCert::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
