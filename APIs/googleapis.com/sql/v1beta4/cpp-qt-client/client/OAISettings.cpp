/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettings::OAISettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettings::OAISettings() {
    this->initializeModel();
}

OAISettings::~OAISettings() {}

void OAISettings::initializeModel() {

    m_activation_policy_isSet = false;
    m_activation_policy_isValid = false;

    m_active_directory_config_isSet = false;
    m_active_directory_config_isValid = false;

    m_advanced_machine_features_isSet = false;
    m_advanced_machine_features_isValid = false;

    m_authorized_gae_applications_isSet = false;
    m_authorized_gae_applications_isValid = false;

    m_availability_type_isSet = false;
    m_availability_type_isValid = false;

    m_backup_configuration_isSet = false;
    m_backup_configuration_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_connector_enforcement_isSet = false;
    m_connector_enforcement_isValid = false;

    m_crash_safe_replication_enabled_isSet = false;
    m_crash_safe_replication_enabled_isValid = false;

    m_data_cache_config_isSet = false;
    m_data_cache_config_isValid = false;

    m_data_disk_size_gb_isSet = false;
    m_data_disk_size_gb_isValid = false;

    m_data_disk_type_isSet = false;
    m_data_disk_type_isValid = false;

    m_database_flags_isSet = false;
    m_database_flags_isValid = false;

    m_database_replication_enabled_isSet = false;
    m_database_replication_enabled_isValid = false;

    m_deletion_protection_enabled_isSet = false;
    m_deletion_protection_enabled_isValid = false;

    m_deny_maintenance_periods_isSet = false;
    m_deny_maintenance_periods_isValid = false;

    m_edition_isSet = false;
    m_edition_isValid = false;

    m_insights_config_isSet = false;
    m_insights_config_isValid = false;

    m_ip_configuration_isSet = false;
    m_ip_configuration_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_preference_isSet = false;
    m_location_preference_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_password_validation_policy_isSet = false;
    m_password_validation_policy_isValid = false;

    m_pricing_plan_isSet = false;
    m_pricing_plan_isValid = false;

    m_replication_type_isSet = false;
    m_replication_type_isValid = false;

    m_settings_version_isSet = false;
    m_settings_version_isValid = false;

    m_sql_server_audit_config_isSet = false;
    m_sql_server_audit_config_isValid = false;

    m_storage_auto_resize_isSet = false;
    m_storage_auto_resize_isValid = false;

    m_storage_auto_resize_limit_isSet = false;
    m_storage_auto_resize_limit_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_user_labels_isSet = false;
    m_user_labels_isValid = false;
}

void OAISettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettings::fromJsonObject(QJsonObject json) {

    m_activation_policy_isValid = ::OpenAPI::fromJsonValue(m_activation_policy, json[QString("activationPolicy")]);
    m_activation_policy_isSet = !json[QString("activationPolicy")].isNull() && m_activation_policy_isValid;

    m_active_directory_config_isValid = ::OpenAPI::fromJsonValue(m_active_directory_config, json[QString("activeDirectoryConfig")]);
    m_active_directory_config_isSet = !json[QString("activeDirectoryConfig")].isNull() && m_active_directory_config_isValid;

    m_advanced_machine_features_isValid = ::OpenAPI::fromJsonValue(m_advanced_machine_features, json[QString("advancedMachineFeatures")]);
    m_advanced_machine_features_isSet = !json[QString("advancedMachineFeatures")].isNull() && m_advanced_machine_features_isValid;

    m_authorized_gae_applications_isValid = ::OpenAPI::fromJsonValue(m_authorized_gae_applications, json[QString("authorizedGaeApplications")]);
    m_authorized_gae_applications_isSet = !json[QString("authorizedGaeApplications")].isNull() && m_authorized_gae_applications_isValid;

    m_availability_type_isValid = ::OpenAPI::fromJsonValue(m_availability_type, json[QString("availabilityType")]);
    m_availability_type_isSet = !json[QString("availabilityType")].isNull() && m_availability_type_isValid;

    m_backup_configuration_isValid = ::OpenAPI::fromJsonValue(m_backup_configuration, json[QString("backupConfiguration")]);
    m_backup_configuration_isSet = !json[QString("backupConfiguration")].isNull() && m_backup_configuration_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_connector_enforcement_isValid = ::OpenAPI::fromJsonValue(m_connector_enforcement, json[QString("connectorEnforcement")]);
    m_connector_enforcement_isSet = !json[QString("connectorEnforcement")].isNull() && m_connector_enforcement_isValid;

    m_crash_safe_replication_enabled_isValid = ::OpenAPI::fromJsonValue(m_crash_safe_replication_enabled, json[QString("crashSafeReplicationEnabled")]);
    m_crash_safe_replication_enabled_isSet = !json[QString("crashSafeReplicationEnabled")].isNull() && m_crash_safe_replication_enabled_isValid;

    m_data_cache_config_isValid = ::OpenAPI::fromJsonValue(m_data_cache_config, json[QString("dataCacheConfig")]);
    m_data_cache_config_isSet = !json[QString("dataCacheConfig")].isNull() && m_data_cache_config_isValid;

    m_data_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_data_disk_size_gb, json[QString("dataDiskSizeGb")]);
    m_data_disk_size_gb_isSet = !json[QString("dataDiskSizeGb")].isNull() && m_data_disk_size_gb_isValid;

    m_data_disk_type_isValid = ::OpenAPI::fromJsonValue(m_data_disk_type, json[QString("dataDiskType")]);
    m_data_disk_type_isSet = !json[QString("dataDiskType")].isNull() && m_data_disk_type_isValid;

    m_database_flags_isValid = ::OpenAPI::fromJsonValue(m_database_flags, json[QString("databaseFlags")]);
    m_database_flags_isSet = !json[QString("databaseFlags")].isNull() && m_database_flags_isValid;

    m_database_replication_enabled_isValid = ::OpenAPI::fromJsonValue(m_database_replication_enabled, json[QString("databaseReplicationEnabled")]);
    m_database_replication_enabled_isSet = !json[QString("databaseReplicationEnabled")].isNull() && m_database_replication_enabled_isValid;

    m_deletion_protection_enabled_isValid = ::OpenAPI::fromJsonValue(m_deletion_protection_enabled, json[QString("deletionProtectionEnabled")]);
    m_deletion_protection_enabled_isSet = !json[QString("deletionProtectionEnabled")].isNull() && m_deletion_protection_enabled_isValid;

    m_deny_maintenance_periods_isValid = ::OpenAPI::fromJsonValue(m_deny_maintenance_periods, json[QString("denyMaintenancePeriods")]);
    m_deny_maintenance_periods_isSet = !json[QString("denyMaintenancePeriods")].isNull() && m_deny_maintenance_periods_isValid;

    m_edition_isValid = ::OpenAPI::fromJsonValue(m_edition, json[QString("edition")]);
    m_edition_isSet = !json[QString("edition")].isNull() && m_edition_isValid;

    m_insights_config_isValid = ::OpenAPI::fromJsonValue(m_insights_config, json[QString("insightsConfig")]);
    m_insights_config_isSet = !json[QString("insightsConfig")].isNull() && m_insights_config_isValid;

    m_ip_configuration_isValid = ::OpenAPI::fromJsonValue(m_ip_configuration, json[QString("ipConfiguration")]);
    m_ip_configuration_isSet = !json[QString("ipConfiguration")].isNull() && m_ip_configuration_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_preference_isValid = ::OpenAPI::fromJsonValue(m_location_preference, json[QString("locationPreference")]);
    m_location_preference_isSet = !json[QString("locationPreference")].isNull() && m_location_preference_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("maintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("maintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_password_validation_policy_isValid = ::OpenAPI::fromJsonValue(m_password_validation_policy, json[QString("passwordValidationPolicy")]);
    m_password_validation_policy_isSet = !json[QString("passwordValidationPolicy")].isNull() && m_password_validation_policy_isValid;

    m_pricing_plan_isValid = ::OpenAPI::fromJsonValue(m_pricing_plan, json[QString("pricingPlan")]);
    m_pricing_plan_isSet = !json[QString("pricingPlan")].isNull() && m_pricing_plan_isValid;

    m_replication_type_isValid = ::OpenAPI::fromJsonValue(m_replication_type, json[QString("replicationType")]);
    m_replication_type_isSet = !json[QString("replicationType")].isNull() && m_replication_type_isValid;

    m_settings_version_isValid = ::OpenAPI::fromJsonValue(m_settings_version, json[QString("settingsVersion")]);
    m_settings_version_isSet = !json[QString("settingsVersion")].isNull() && m_settings_version_isValid;

    m_sql_server_audit_config_isValid = ::OpenAPI::fromJsonValue(m_sql_server_audit_config, json[QString("sqlServerAuditConfig")]);
    m_sql_server_audit_config_isSet = !json[QString("sqlServerAuditConfig")].isNull() && m_sql_server_audit_config_isValid;

    m_storage_auto_resize_isValid = ::OpenAPI::fromJsonValue(m_storage_auto_resize, json[QString("storageAutoResize")]);
    m_storage_auto_resize_isSet = !json[QString("storageAutoResize")].isNull() && m_storage_auto_resize_isValid;

    m_storage_auto_resize_limit_isValid = ::OpenAPI::fromJsonValue(m_storage_auto_resize_limit, json[QString("storageAutoResizeLimit")]);
    m_storage_auto_resize_limit_isSet = !json[QString("storageAutoResizeLimit")].isNull() && m_storage_auto_resize_limit_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_user_labels_isValid = ::OpenAPI::fromJsonValue(m_user_labels, json[QString("userLabels")]);
    m_user_labels_isSet = !json[QString("userLabels")].isNull() && m_user_labels_isValid;
}

QString OAISettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettings::asJsonObject() const {
    QJsonObject obj;
    if (m_activation_policy_isSet) {
        obj.insert(QString("activationPolicy"), ::OpenAPI::toJsonValue(m_activation_policy));
    }
    if (m_active_directory_config.isSet()) {
        obj.insert(QString("activeDirectoryConfig"), ::OpenAPI::toJsonValue(m_active_directory_config));
    }
    if (m_advanced_machine_features.isSet()) {
        obj.insert(QString("advancedMachineFeatures"), ::OpenAPI::toJsonValue(m_advanced_machine_features));
    }
    if (m_authorized_gae_applications.size() > 0) {
        obj.insert(QString("authorizedGaeApplications"), ::OpenAPI::toJsonValue(m_authorized_gae_applications));
    }
    if (m_availability_type_isSet) {
        obj.insert(QString("availabilityType"), ::OpenAPI::toJsonValue(m_availability_type));
    }
    if (m_backup_configuration.isSet()) {
        obj.insert(QString("backupConfiguration"), ::OpenAPI::toJsonValue(m_backup_configuration));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_connector_enforcement_isSet) {
        obj.insert(QString("connectorEnforcement"), ::OpenAPI::toJsonValue(m_connector_enforcement));
    }
    if (m_crash_safe_replication_enabled_isSet) {
        obj.insert(QString("crashSafeReplicationEnabled"), ::OpenAPI::toJsonValue(m_crash_safe_replication_enabled));
    }
    if (m_data_cache_config.isSet()) {
        obj.insert(QString("dataCacheConfig"), ::OpenAPI::toJsonValue(m_data_cache_config));
    }
    if (m_data_disk_size_gb_isSet) {
        obj.insert(QString("dataDiskSizeGb"), ::OpenAPI::toJsonValue(m_data_disk_size_gb));
    }
    if (m_data_disk_type_isSet) {
        obj.insert(QString("dataDiskType"), ::OpenAPI::toJsonValue(m_data_disk_type));
    }
    if (m_database_flags.size() > 0) {
        obj.insert(QString("databaseFlags"), ::OpenAPI::toJsonValue(m_database_flags));
    }
    if (m_database_replication_enabled_isSet) {
        obj.insert(QString("databaseReplicationEnabled"), ::OpenAPI::toJsonValue(m_database_replication_enabled));
    }
    if (m_deletion_protection_enabled_isSet) {
        obj.insert(QString("deletionProtectionEnabled"), ::OpenAPI::toJsonValue(m_deletion_protection_enabled));
    }
    if (m_deny_maintenance_periods.size() > 0) {
        obj.insert(QString("denyMaintenancePeriods"), ::OpenAPI::toJsonValue(m_deny_maintenance_periods));
    }
    if (m_edition_isSet) {
        obj.insert(QString("edition"), ::OpenAPI::toJsonValue(m_edition));
    }
    if (m_insights_config.isSet()) {
        obj.insert(QString("insightsConfig"), ::OpenAPI::toJsonValue(m_insights_config));
    }
    if (m_ip_configuration.isSet()) {
        obj.insert(QString("ipConfiguration"), ::OpenAPI::toJsonValue(m_ip_configuration));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_preference.isSet()) {
        obj.insert(QString("locationPreference"), ::OpenAPI::toJsonValue(m_location_preference));
    }
    if (m_maintenance_window.isSet()) {
        obj.insert(QString("maintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_password_validation_policy.isSet()) {
        obj.insert(QString("passwordValidationPolicy"), ::OpenAPI::toJsonValue(m_password_validation_policy));
    }
    if (m_pricing_plan_isSet) {
        obj.insert(QString("pricingPlan"), ::OpenAPI::toJsonValue(m_pricing_plan));
    }
    if (m_replication_type_isSet) {
        obj.insert(QString("replicationType"), ::OpenAPI::toJsonValue(m_replication_type));
    }
    if (m_settings_version_isSet) {
        obj.insert(QString("settingsVersion"), ::OpenAPI::toJsonValue(m_settings_version));
    }
    if (m_sql_server_audit_config.isSet()) {
        obj.insert(QString("sqlServerAuditConfig"), ::OpenAPI::toJsonValue(m_sql_server_audit_config));
    }
    if (m_storage_auto_resize_isSet) {
        obj.insert(QString("storageAutoResize"), ::OpenAPI::toJsonValue(m_storage_auto_resize));
    }
    if (m_storage_auto_resize_limit_isSet) {
        obj.insert(QString("storageAutoResizeLimit"), ::OpenAPI::toJsonValue(m_storage_auto_resize_limit));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_user_labels.size() > 0) {
        obj.insert(QString("userLabels"), ::OpenAPI::toJsonValue(m_user_labels));
    }
    return obj;
}

QString OAISettings::getActivationPolicy() const {
    return m_activation_policy;
}
void OAISettings::setActivationPolicy(const QString &activation_policy) {
    m_activation_policy = activation_policy;
    m_activation_policy_isSet = true;
}

bool OAISettings::is_activation_policy_Set() const{
    return m_activation_policy_isSet;
}

bool OAISettings::is_activation_policy_Valid() const{
    return m_activation_policy_isValid;
}

OAISqlActiveDirectoryConfig OAISettings::getActiveDirectoryConfig() const {
    return m_active_directory_config;
}
void OAISettings::setActiveDirectoryConfig(const OAISqlActiveDirectoryConfig &active_directory_config) {
    m_active_directory_config = active_directory_config;
    m_active_directory_config_isSet = true;
}

bool OAISettings::is_active_directory_config_Set() const{
    return m_active_directory_config_isSet;
}

bool OAISettings::is_active_directory_config_Valid() const{
    return m_active_directory_config_isValid;
}

OAIAdvancedMachineFeatures OAISettings::getAdvancedMachineFeatures() const {
    return m_advanced_machine_features;
}
void OAISettings::setAdvancedMachineFeatures(const OAIAdvancedMachineFeatures &advanced_machine_features) {
    m_advanced_machine_features = advanced_machine_features;
    m_advanced_machine_features_isSet = true;
}

bool OAISettings::is_advanced_machine_features_Set() const{
    return m_advanced_machine_features_isSet;
}

bool OAISettings::is_advanced_machine_features_Valid() const{
    return m_advanced_machine_features_isValid;
}

QList<QString> OAISettings::getAuthorizedGaeApplications() const {
    return m_authorized_gae_applications;
}
void OAISettings::setAuthorizedGaeApplications(const QList<QString> &authorized_gae_applications) {
    m_authorized_gae_applications = authorized_gae_applications;
    m_authorized_gae_applications_isSet = true;
}

bool OAISettings::is_authorized_gae_applications_Set() const{
    return m_authorized_gae_applications_isSet;
}

bool OAISettings::is_authorized_gae_applications_Valid() const{
    return m_authorized_gae_applications_isValid;
}

QString OAISettings::getAvailabilityType() const {
    return m_availability_type;
}
void OAISettings::setAvailabilityType(const QString &availability_type) {
    m_availability_type = availability_type;
    m_availability_type_isSet = true;
}

bool OAISettings::is_availability_type_Set() const{
    return m_availability_type_isSet;
}

bool OAISettings::is_availability_type_Valid() const{
    return m_availability_type_isValid;
}

OAIBackupConfiguration OAISettings::getBackupConfiguration() const {
    return m_backup_configuration;
}
void OAISettings::setBackupConfiguration(const OAIBackupConfiguration &backup_configuration) {
    m_backup_configuration = backup_configuration;
    m_backup_configuration_isSet = true;
}

bool OAISettings::is_backup_configuration_Set() const{
    return m_backup_configuration_isSet;
}

bool OAISettings::is_backup_configuration_Valid() const{
    return m_backup_configuration_isValid;
}

QString OAISettings::getCollation() const {
    return m_collation;
}
void OAISettings::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAISettings::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAISettings::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAISettings::getConnectorEnforcement() const {
    return m_connector_enforcement;
}
void OAISettings::setConnectorEnforcement(const QString &connector_enforcement) {
    m_connector_enforcement = connector_enforcement;
    m_connector_enforcement_isSet = true;
}

bool OAISettings::is_connector_enforcement_Set() const{
    return m_connector_enforcement_isSet;
}

bool OAISettings::is_connector_enforcement_Valid() const{
    return m_connector_enforcement_isValid;
}

bool OAISettings::isCrashSafeReplicationEnabled() const {
    return m_crash_safe_replication_enabled;
}
void OAISettings::setCrashSafeReplicationEnabled(const bool &crash_safe_replication_enabled) {
    m_crash_safe_replication_enabled = crash_safe_replication_enabled;
    m_crash_safe_replication_enabled_isSet = true;
}

bool OAISettings::is_crash_safe_replication_enabled_Set() const{
    return m_crash_safe_replication_enabled_isSet;
}

bool OAISettings::is_crash_safe_replication_enabled_Valid() const{
    return m_crash_safe_replication_enabled_isValid;
}

OAIDataCacheConfig OAISettings::getDataCacheConfig() const {
    return m_data_cache_config;
}
void OAISettings::setDataCacheConfig(const OAIDataCacheConfig &data_cache_config) {
    m_data_cache_config = data_cache_config;
    m_data_cache_config_isSet = true;
}

bool OAISettings::is_data_cache_config_Set() const{
    return m_data_cache_config_isSet;
}

bool OAISettings::is_data_cache_config_Valid() const{
    return m_data_cache_config_isValid;
}

QString OAISettings::getDataDiskSizeGb() const {
    return m_data_disk_size_gb;
}
void OAISettings::setDataDiskSizeGb(const QString &data_disk_size_gb) {
    m_data_disk_size_gb = data_disk_size_gb;
    m_data_disk_size_gb_isSet = true;
}

bool OAISettings::is_data_disk_size_gb_Set() const{
    return m_data_disk_size_gb_isSet;
}

bool OAISettings::is_data_disk_size_gb_Valid() const{
    return m_data_disk_size_gb_isValid;
}

QString OAISettings::getDataDiskType() const {
    return m_data_disk_type;
}
void OAISettings::setDataDiskType(const QString &data_disk_type) {
    m_data_disk_type = data_disk_type;
    m_data_disk_type_isSet = true;
}

bool OAISettings::is_data_disk_type_Set() const{
    return m_data_disk_type_isSet;
}

bool OAISettings::is_data_disk_type_Valid() const{
    return m_data_disk_type_isValid;
}

QList<OAIDatabaseFlags> OAISettings::getDatabaseFlags() const {
    return m_database_flags;
}
void OAISettings::setDatabaseFlags(const QList<OAIDatabaseFlags> &database_flags) {
    m_database_flags = database_flags;
    m_database_flags_isSet = true;
}

bool OAISettings::is_database_flags_Set() const{
    return m_database_flags_isSet;
}

bool OAISettings::is_database_flags_Valid() const{
    return m_database_flags_isValid;
}

bool OAISettings::isDatabaseReplicationEnabled() const {
    return m_database_replication_enabled;
}
void OAISettings::setDatabaseReplicationEnabled(const bool &database_replication_enabled) {
    m_database_replication_enabled = database_replication_enabled;
    m_database_replication_enabled_isSet = true;
}

bool OAISettings::is_database_replication_enabled_Set() const{
    return m_database_replication_enabled_isSet;
}

bool OAISettings::is_database_replication_enabled_Valid() const{
    return m_database_replication_enabled_isValid;
}

bool OAISettings::isDeletionProtectionEnabled() const {
    return m_deletion_protection_enabled;
}
void OAISettings::setDeletionProtectionEnabled(const bool &deletion_protection_enabled) {
    m_deletion_protection_enabled = deletion_protection_enabled;
    m_deletion_protection_enabled_isSet = true;
}

bool OAISettings::is_deletion_protection_enabled_Set() const{
    return m_deletion_protection_enabled_isSet;
}

bool OAISettings::is_deletion_protection_enabled_Valid() const{
    return m_deletion_protection_enabled_isValid;
}

QList<OAIDenyMaintenancePeriod> OAISettings::getDenyMaintenancePeriods() const {
    return m_deny_maintenance_periods;
}
void OAISettings::setDenyMaintenancePeriods(const QList<OAIDenyMaintenancePeriod> &deny_maintenance_periods) {
    m_deny_maintenance_periods = deny_maintenance_periods;
    m_deny_maintenance_periods_isSet = true;
}

bool OAISettings::is_deny_maintenance_periods_Set() const{
    return m_deny_maintenance_periods_isSet;
}

bool OAISettings::is_deny_maintenance_periods_Valid() const{
    return m_deny_maintenance_periods_isValid;
}

QString OAISettings::getEdition() const {
    return m_edition;
}
void OAISettings::setEdition(const QString &edition) {
    m_edition = edition;
    m_edition_isSet = true;
}

bool OAISettings::is_edition_Set() const{
    return m_edition_isSet;
}

bool OAISettings::is_edition_Valid() const{
    return m_edition_isValid;
}

OAIInsightsConfig OAISettings::getInsightsConfig() const {
    return m_insights_config;
}
void OAISettings::setInsightsConfig(const OAIInsightsConfig &insights_config) {
    m_insights_config = insights_config;
    m_insights_config_isSet = true;
}

bool OAISettings::is_insights_config_Set() const{
    return m_insights_config_isSet;
}

bool OAISettings::is_insights_config_Valid() const{
    return m_insights_config_isValid;
}

OAIIpConfiguration OAISettings::getIpConfiguration() const {
    return m_ip_configuration;
}
void OAISettings::setIpConfiguration(const OAIIpConfiguration &ip_configuration) {
    m_ip_configuration = ip_configuration;
    m_ip_configuration_isSet = true;
}

bool OAISettings::is_ip_configuration_Set() const{
    return m_ip_configuration_isSet;
}

bool OAISettings::is_ip_configuration_Valid() const{
    return m_ip_configuration_isValid;
}

QString OAISettings::getKind() const {
    return m_kind;
}
void OAISettings::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISettings::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISettings::is_kind_Valid() const{
    return m_kind_isValid;
}

OAILocationPreference OAISettings::getLocationPreference() const {
    return m_location_preference;
}
void OAISettings::setLocationPreference(const OAILocationPreference &location_preference) {
    m_location_preference = location_preference;
    m_location_preference_isSet = true;
}

bool OAISettings::is_location_preference_Set() const{
    return m_location_preference_isSet;
}

bool OAISettings::is_location_preference_Valid() const{
    return m_location_preference_isValid;
}

OAIMaintenanceWindow OAISettings::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAISettings::setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAISettings::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAISettings::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

OAIPasswordValidationPolicy OAISettings::getPasswordValidationPolicy() const {
    return m_password_validation_policy;
}
void OAISettings::setPasswordValidationPolicy(const OAIPasswordValidationPolicy &password_validation_policy) {
    m_password_validation_policy = password_validation_policy;
    m_password_validation_policy_isSet = true;
}

bool OAISettings::is_password_validation_policy_Set() const{
    return m_password_validation_policy_isSet;
}

bool OAISettings::is_password_validation_policy_Valid() const{
    return m_password_validation_policy_isValid;
}

QString OAISettings::getPricingPlan() const {
    return m_pricing_plan;
}
void OAISettings::setPricingPlan(const QString &pricing_plan) {
    m_pricing_plan = pricing_plan;
    m_pricing_plan_isSet = true;
}

bool OAISettings::is_pricing_plan_Set() const{
    return m_pricing_plan_isSet;
}

bool OAISettings::is_pricing_plan_Valid() const{
    return m_pricing_plan_isValid;
}

QString OAISettings::getReplicationType() const {
    return m_replication_type;
}
void OAISettings::setReplicationType(const QString &replication_type) {
    m_replication_type = replication_type;
    m_replication_type_isSet = true;
}

bool OAISettings::is_replication_type_Set() const{
    return m_replication_type_isSet;
}

bool OAISettings::is_replication_type_Valid() const{
    return m_replication_type_isValid;
}

QString OAISettings::getSettingsVersion() const {
    return m_settings_version;
}
void OAISettings::setSettingsVersion(const QString &settings_version) {
    m_settings_version = settings_version;
    m_settings_version_isSet = true;
}

bool OAISettings::is_settings_version_Set() const{
    return m_settings_version_isSet;
}

bool OAISettings::is_settings_version_Valid() const{
    return m_settings_version_isValid;
}

OAISqlServerAuditConfig OAISettings::getSqlServerAuditConfig() const {
    return m_sql_server_audit_config;
}
void OAISettings::setSqlServerAuditConfig(const OAISqlServerAuditConfig &sql_server_audit_config) {
    m_sql_server_audit_config = sql_server_audit_config;
    m_sql_server_audit_config_isSet = true;
}

bool OAISettings::is_sql_server_audit_config_Set() const{
    return m_sql_server_audit_config_isSet;
}

bool OAISettings::is_sql_server_audit_config_Valid() const{
    return m_sql_server_audit_config_isValid;
}

bool OAISettings::isStorageAutoResize() const {
    return m_storage_auto_resize;
}
void OAISettings::setStorageAutoResize(const bool &storage_auto_resize) {
    m_storage_auto_resize = storage_auto_resize;
    m_storage_auto_resize_isSet = true;
}

bool OAISettings::is_storage_auto_resize_Set() const{
    return m_storage_auto_resize_isSet;
}

bool OAISettings::is_storage_auto_resize_Valid() const{
    return m_storage_auto_resize_isValid;
}

QString OAISettings::getStorageAutoResizeLimit() const {
    return m_storage_auto_resize_limit;
}
void OAISettings::setStorageAutoResizeLimit(const QString &storage_auto_resize_limit) {
    m_storage_auto_resize_limit = storage_auto_resize_limit;
    m_storage_auto_resize_limit_isSet = true;
}

bool OAISettings::is_storage_auto_resize_limit_Set() const{
    return m_storage_auto_resize_limit_isSet;
}

bool OAISettings::is_storage_auto_resize_limit_Valid() const{
    return m_storage_auto_resize_limit_isValid;
}

QString OAISettings::getTier() const {
    return m_tier;
}
void OAISettings::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAISettings::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAISettings::is_tier_Valid() const{
    return m_tier_isValid;
}

QString OAISettings::getTimeZone() const {
    return m_time_zone;
}
void OAISettings::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAISettings::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAISettings::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QMap<QString, QString> OAISettings::getUserLabels() const {
    return m_user_labels;
}
void OAISettings::setUserLabels(const QMap<QString, QString> &user_labels) {
    m_user_labels = user_labels;
    m_user_labels_isSet = true;
}

bool OAISettings::is_user_labels_Set() const{
    return m_user_labels_isSet;
}

bool OAISettings::is_user_labels_Valid() const{
    return m_user_labels_isValid;
}

bool OAISettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activation_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_active_directory_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_machine_features.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_gae_applications.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_enforcement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crash_safe_replication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_cache_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_disk_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_flags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_replication_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deletion_protection_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deny_maintenance_periods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_edition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_insights_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_preference.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_validation_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_server_audit_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_auto_resize_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_auto_resize_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
