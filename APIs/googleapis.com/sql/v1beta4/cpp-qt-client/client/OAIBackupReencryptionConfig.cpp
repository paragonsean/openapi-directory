/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupReencryptionConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupReencryptionConfig::OAIBackupReencryptionConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupReencryptionConfig::OAIBackupReencryptionConfig() {
    this->initializeModel();
}

OAIBackupReencryptionConfig::~OAIBackupReencryptionConfig() {}

void OAIBackupReencryptionConfig::initializeModel() {

    m_backup_limit_isSet = false;
    m_backup_limit_isValid = false;

    m_backup_type_isSet = false;
    m_backup_type_isValid = false;
}

void OAIBackupReencryptionConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupReencryptionConfig::fromJsonObject(QJsonObject json) {

    m_backup_limit_isValid = ::OpenAPI::fromJsonValue(m_backup_limit, json[QString("backupLimit")]);
    m_backup_limit_isSet = !json[QString("backupLimit")].isNull() && m_backup_limit_isValid;

    m_backup_type_isValid = ::OpenAPI::fromJsonValue(m_backup_type, json[QString("backupType")]);
    m_backup_type_isSet = !json[QString("backupType")].isNull() && m_backup_type_isValid;
}

QString OAIBackupReencryptionConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupReencryptionConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_limit_isSet) {
        obj.insert(QString("backupLimit"), ::OpenAPI::toJsonValue(m_backup_limit));
    }
    if (m_backup_type_isSet) {
        obj.insert(QString("backupType"), ::OpenAPI::toJsonValue(m_backup_type));
    }
    return obj;
}

qint32 OAIBackupReencryptionConfig::getBackupLimit() const {
    return m_backup_limit;
}
void OAIBackupReencryptionConfig::setBackupLimit(const qint32 &backup_limit) {
    m_backup_limit = backup_limit;
    m_backup_limit_isSet = true;
}

bool OAIBackupReencryptionConfig::is_backup_limit_Set() const{
    return m_backup_limit_isSet;
}

bool OAIBackupReencryptionConfig::is_backup_limit_Valid() const{
    return m_backup_limit_isValid;
}

QString OAIBackupReencryptionConfig::getBackupType() const {
    return m_backup_type;
}
void OAIBackupReencryptionConfig::setBackupType(const QString &backup_type) {
    m_backup_type = backup_type;
    m_backup_type_isSet = true;
}

bool OAIBackupReencryptionConfig::is_backup_type_Set() const{
    return m_backup_type_isSet;
}

bool OAIBackupReencryptionConfig::is_backup_type_Valid() const{
    return m_backup_type_isValid;
}

bool OAIBackupReencryptionConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupReencryptionConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
