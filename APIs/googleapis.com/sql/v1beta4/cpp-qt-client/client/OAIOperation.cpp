/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperation::OAIOperation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperation::OAIOperation() {
    this->initializeModel();
}

OAIOperation::~OAIOperation() {}

void OAIOperation::initializeModel() {

    m_api_warning_isSet = false;
    m_api_warning_isValid = false;

    m_backup_context_isSet = false;
    m_backup_context_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_export_context_isSet = false;
    m_export_context_isValid = false;

    m_import_context_isSet = false;
    m_import_context_isValid = false;

    m_insert_time_isSet = false;
    m_insert_time_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_operation_type_isSet = false;
    m_operation_type_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_target_id_isSet = false;
    m_target_id_isValid = false;

    m_target_link_isSet = false;
    m_target_link_isValid = false;

    m_target_project_isSet = false;
    m_target_project_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIOperation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperation::fromJsonObject(QJsonObject json) {

    m_api_warning_isValid = ::OpenAPI::fromJsonValue(m_api_warning, json[QString("apiWarning")]);
    m_api_warning_isSet = !json[QString("apiWarning")].isNull() && m_api_warning_isValid;

    m_backup_context_isValid = ::OpenAPI::fromJsonValue(m_backup_context, json[QString("backupContext")]);
    m_backup_context_isSet = !json[QString("backupContext")].isNull() && m_backup_context_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_export_context_isValid = ::OpenAPI::fromJsonValue(m_export_context, json[QString("exportContext")]);
    m_export_context_isSet = !json[QString("exportContext")].isNull() && m_export_context_isValid;

    m_import_context_isValid = ::OpenAPI::fromJsonValue(m_import_context, json[QString("importContext")]);
    m_import_context_isSet = !json[QString("importContext")].isNull() && m_import_context_isValid;

    m_insert_time_isValid = ::OpenAPI::fromJsonValue(m_insert_time, json[QString("insertTime")]);
    m_insert_time_isSet = !json[QString("insertTime")].isNull() && m_insert_time_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_operation_type_isValid = ::OpenAPI::fromJsonValue(m_operation_type, json[QString("operationType")]);
    m_operation_type_isSet = !json[QString("operationType")].isNull() && m_operation_type_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_target_id_isValid = ::OpenAPI::fromJsonValue(m_target_id, json[QString("targetId")]);
    m_target_id_isSet = !json[QString("targetId")].isNull() && m_target_id_isValid;

    m_target_link_isValid = ::OpenAPI::fromJsonValue(m_target_link, json[QString("targetLink")]);
    m_target_link_isSet = !json[QString("targetLink")].isNull() && m_target_link_isValid;

    m_target_project_isValid = ::OpenAPI::fromJsonValue(m_target_project, json[QString("targetProject")]);
    m_target_project_isSet = !json[QString("targetProject")].isNull() && m_target_project_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIOperation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperation::asJsonObject() const {
    QJsonObject obj;
    if (m_api_warning.isSet()) {
        obj.insert(QString("apiWarning"), ::OpenAPI::toJsonValue(m_api_warning));
    }
    if (m_backup_context.isSet()) {
        obj.insert(QString("backupContext"), ::OpenAPI::toJsonValue(m_backup_context));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_export_context.isSet()) {
        obj.insert(QString("exportContext"), ::OpenAPI::toJsonValue(m_export_context));
    }
    if (m_import_context.isSet()) {
        obj.insert(QString("importContext"), ::OpenAPI::toJsonValue(m_import_context));
    }
    if (m_insert_time_isSet) {
        obj.insert(QString("insertTime"), ::OpenAPI::toJsonValue(m_insert_time));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_operation_type_isSet) {
        obj.insert(QString("operationType"), ::OpenAPI::toJsonValue(m_operation_type));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_target_id_isSet) {
        obj.insert(QString("targetId"), ::OpenAPI::toJsonValue(m_target_id));
    }
    if (m_target_link_isSet) {
        obj.insert(QString("targetLink"), ::OpenAPI::toJsonValue(m_target_link));
    }
    if (m_target_project_isSet) {
        obj.insert(QString("targetProject"), ::OpenAPI::toJsonValue(m_target_project));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

OAIApiWarning OAIOperation::getApiWarning() const {
    return m_api_warning;
}
void OAIOperation::setApiWarning(const OAIApiWarning &api_warning) {
    m_api_warning = api_warning;
    m_api_warning_isSet = true;
}

bool OAIOperation::is_api_warning_Set() const{
    return m_api_warning_isSet;
}

bool OAIOperation::is_api_warning_Valid() const{
    return m_api_warning_isValid;
}

OAIBackupContext OAIOperation::getBackupContext() const {
    return m_backup_context;
}
void OAIOperation::setBackupContext(const OAIBackupContext &backup_context) {
    m_backup_context = backup_context;
    m_backup_context_isSet = true;
}

bool OAIOperation::is_backup_context_Set() const{
    return m_backup_context_isSet;
}

bool OAIOperation::is_backup_context_Valid() const{
    return m_backup_context_isValid;
}

QString OAIOperation::getEndTime() const {
    return m_end_time;
}
void OAIOperation::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIOperation::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIOperation::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIOperationErrors OAIOperation::getError() const {
    return m_error;
}
void OAIOperation::setError(const OAIOperationErrors &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIOperation::is_error_Set() const{
    return m_error_isSet;
}

bool OAIOperation::is_error_Valid() const{
    return m_error_isValid;
}

OAIExportContext OAIOperation::getExportContext() const {
    return m_export_context;
}
void OAIOperation::setExportContext(const OAIExportContext &export_context) {
    m_export_context = export_context;
    m_export_context_isSet = true;
}

bool OAIOperation::is_export_context_Set() const{
    return m_export_context_isSet;
}

bool OAIOperation::is_export_context_Valid() const{
    return m_export_context_isValid;
}

OAIImportContext OAIOperation::getImportContext() const {
    return m_import_context;
}
void OAIOperation::setImportContext(const OAIImportContext &import_context) {
    m_import_context = import_context;
    m_import_context_isSet = true;
}

bool OAIOperation::is_import_context_Set() const{
    return m_import_context_isSet;
}

bool OAIOperation::is_import_context_Valid() const{
    return m_import_context_isValid;
}

QString OAIOperation::getInsertTime() const {
    return m_insert_time;
}
void OAIOperation::setInsertTime(const QString &insert_time) {
    m_insert_time = insert_time;
    m_insert_time_isSet = true;
}

bool OAIOperation::is_insert_time_Set() const{
    return m_insert_time_isSet;
}

bool OAIOperation::is_insert_time_Valid() const{
    return m_insert_time_isValid;
}

QString OAIOperation::getKind() const {
    return m_kind;
}
void OAIOperation::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOperation::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOperation::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOperation::getName() const {
    return m_name;
}
void OAIOperation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOperation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOperation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIOperation::getOperationType() const {
    return m_operation_type;
}
void OAIOperation::setOperationType(const QString &operation_type) {
    m_operation_type = operation_type;
    m_operation_type_isSet = true;
}

bool OAIOperation::is_operation_type_Set() const{
    return m_operation_type_isSet;
}

bool OAIOperation::is_operation_type_Valid() const{
    return m_operation_type_isValid;
}

QString OAIOperation::getSelfLink() const {
    return m_self_link;
}
void OAIOperation::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIOperation::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIOperation::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIOperation::getStartTime() const {
    return m_start_time;
}
void OAIOperation::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIOperation::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIOperation::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIOperation::getStatus() const {
    return m_status;
}
void OAIOperation::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperation::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperation::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOperation::getTargetId() const {
    return m_target_id;
}
void OAIOperation::setTargetId(const QString &target_id) {
    m_target_id = target_id;
    m_target_id_isSet = true;
}

bool OAIOperation::is_target_id_Set() const{
    return m_target_id_isSet;
}

bool OAIOperation::is_target_id_Valid() const{
    return m_target_id_isValid;
}

QString OAIOperation::getTargetLink() const {
    return m_target_link;
}
void OAIOperation::setTargetLink(const QString &target_link) {
    m_target_link = target_link;
    m_target_link_isSet = true;
}

bool OAIOperation::is_target_link_Set() const{
    return m_target_link_isSet;
}

bool OAIOperation::is_target_link_Valid() const{
    return m_target_link_isValid;
}

QString OAIOperation::getTargetProject() const {
    return m_target_project;
}
void OAIOperation::setTargetProject(const QString &target_project) {
    m_target_project = target_project;
    m_target_project_isSet = true;
}

bool OAIOperation::is_target_project_Set() const{
    return m_target_project_isSet;
}

bool OAIOperation::is_target_project_Valid() const{
    return m_target_project_isValid;
}

QString OAIOperation::getUser() const {
    return m_user;
}
void OAIOperation::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIOperation::is_user_Set() const{
    return m_user_isSet;
}

bool OAIOperation::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIOperation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_warning.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_backup_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_export_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_insert_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
