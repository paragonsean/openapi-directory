/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportContext::OAIExportContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportContext::OAIExportContext() {
    this->initializeModel();
}

OAIExportContext::~OAIExportContext() {}

void OAIExportContext::initializeModel() {

    m_bak_export_options_isSet = false;
    m_bak_export_options_isValid = false;

    m_csv_export_options_isSet = false;
    m_csv_export_options_isValid = false;

    m_databases_isSet = false;
    m_databases_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_offload_isSet = false;
    m_offload_isValid = false;

    m_sql_export_options_isSet = false;
    m_sql_export_options_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIExportContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportContext::fromJsonObject(QJsonObject json) {

    m_bak_export_options_isValid = ::OpenAPI::fromJsonValue(m_bak_export_options, json[QString("bakExportOptions")]);
    m_bak_export_options_isSet = !json[QString("bakExportOptions")].isNull() && m_bak_export_options_isValid;

    m_csv_export_options_isValid = ::OpenAPI::fromJsonValue(m_csv_export_options, json[QString("csvExportOptions")]);
    m_csv_export_options_isSet = !json[QString("csvExportOptions")].isNull() && m_csv_export_options_isValid;

    m_databases_isValid = ::OpenAPI::fromJsonValue(m_databases, json[QString("databases")]);
    m_databases_isSet = !json[QString("databases")].isNull() && m_databases_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_offload_isValid = ::OpenAPI::fromJsonValue(m_offload, json[QString("offload")]);
    m_offload_isSet = !json[QString("offload")].isNull() && m_offload_isValid;

    m_sql_export_options_isValid = ::OpenAPI::fromJsonValue(m_sql_export_options, json[QString("sqlExportOptions")]);
    m_sql_export_options_isSet = !json[QString("sqlExportOptions")].isNull() && m_sql_export_options_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIExportContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportContext::asJsonObject() const {
    QJsonObject obj;
    if (m_bak_export_options.isSet()) {
        obj.insert(QString("bakExportOptions"), ::OpenAPI::toJsonValue(m_bak_export_options));
    }
    if (m_csv_export_options.isSet()) {
        obj.insert(QString("csvExportOptions"), ::OpenAPI::toJsonValue(m_csv_export_options));
    }
    if (m_databases.size() > 0) {
        obj.insert(QString("databases"), ::OpenAPI::toJsonValue(m_databases));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_offload_isSet) {
        obj.insert(QString("offload"), ::OpenAPI::toJsonValue(m_offload));
    }
    if (m_sql_export_options.isSet()) {
        obj.insert(QString("sqlExportOptions"), ::OpenAPI::toJsonValue(m_sql_export_options));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIExportContext_bakExportOptions OAIExportContext::getBakExportOptions() const {
    return m_bak_export_options;
}
void OAIExportContext::setBakExportOptions(const OAIExportContext_bakExportOptions &bak_export_options) {
    m_bak_export_options = bak_export_options;
    m_bak_export_options_isSet = true;
}

bool OAIExportContext::is_bak_export_options_Set() const{
    return m_bak_export_options_isSet;
}

bool OAIExportContext::is_bak_export_options_Valid() const{
    return m_bak_export_options_isValid;
}

OAIExportContext_csvExportOptions OAIExportContext::getCsvExportOptions() const {
    return m_csv_export_options;
}
void OAIExportContext::setCsvExportOptions(const OAIExportContext_csvExportOptions &csv_export_options) {
    m_csv_export_options = csv_export_options;
    m_csv_export_options_isSet = true;
}

bool OAIExportContext::is_csv_export_options_Set() const{
    return m_csv_export_options_isSet;
}

bool OAIExportContext::is_csv_export_options_Valid() const{
    return m_csv_export_options_isValid;
}

QList<QString> OAIExportContext::getDatabases() const {
    return m_databases;
}
void OAIExportContext::setDatabases(const QList<QString> &databases) {
    m_databases = databases;
    m_databases_isSet = true;
}

bool OAIExportContext::is_databases_Set() const{
    return m_databases_isSet;
}

bool OAIExportContext::is_databases_Valid() const{
    return m_databases_isValid;
}

QString OAIExportContext::getFileType() const {
    return m_file_type;
}
void OAIExportContext::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIExportContext::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIExportContext::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QString OAIExportContext::getKind() const {
    return m_kind;
}
void OAIExportContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIExportContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIExportContext::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIExportContext::isOffload() const {
    return m_offload;
}
void OAIExportContext::setOffload(const bool &offload) {
    m_offload = offload;
    m_offload_isSet = true;
}

bool OAIExportContext::is_offload_Set() const{
    return m_offload_isSet;
}

bool OAIExportContext::is_offload_Valid() const{
    return m_offload_isValid;
}

OAIExportContext_sqlExportOptions OAIExportContext::getSqlExportOptions() const {
    return m_sql_export_options;
}
void OAIExportContext::setSqlExportOptions(const OAIExportContext_sqlExportOptions &sql_export_options) {
    m_sql_export_options = sql_export_options;
    m_sql_export_options_isSet = true;
}

bool OAIExportContext::is_sql_export_options_Set() const{
    return m_sql_export_options_isSet;
}

bool OAIExportContext::is_sql_export_options_Valid() const{
    return m_sql_export_options_isValid;
}

QString OAIExportContext::getUri() const {
    return m_uri;
}
void OAIExportContext::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIExportContext::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIExportContext::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIExportContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bak_export_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_export_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_databases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offload_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_export_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
