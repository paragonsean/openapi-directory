/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConnectSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConnectSettings::OAIConnectSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConnectSettings::OAIConnectSettings() {
    this->initializeModel();
}

OAIConnectSettings::~OAIConnectSettings() {}

void OAIConnectSettings::initializeModel() {

    m_backend_type_isSet = false;
    m_backend_type_isValid = false;

    m_database_version_isSet = false;
    m_database_version_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_psc_enabled_isSet = false;
    m_psc_enabled_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_server_ca_cert_isSet = false;
    m_server_ca_cert_isValid = false;
}

void OAIConnectSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConnectSettings::fromJsonObject(QJsonObject json) {

    m_backend_type_isValid = ::OpenAPI::fromJsonValue(m_backend_type, json[QString("backendType")]);
    m_backend_type_isSet = !json[QString("backendType")].isNull() && m_backend_type_isValid;

    m_database_version_isValid = ::OpenAPI::fromJsonValue(m_database_version, json[QString("databaseVersion")]);
    m_database_version_isSet = !json[QString("databaseVersion")].isNull() && m_database_version_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dnsName")]);
    m_dns_name_isSet = !json[QString("dnsName")].isNull() && m_dns_name_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_psc_enabled_isValid = ::OpenAPI::fromJsonValue(m_psc_enabled, json[QString("pscEnabled")]);
    m_psc_enabled_isSet = !json[QString("pscEnabled")].isNull() && m_psc_enabled_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_server_ca_cert_isValid = ::OpenAPI::fromJsonValue(m_server_ca_cert, json[QString("serverCaCert")]);
    m_server_ca_cert_isSet = !json[QString("serverCaCert")].isNull() && m_server_ca_cert_isValid;
}

QString OAIConnectSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConnectSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_backend_type_isSet) {
        obj.insert(QString("backendType"), ::OpenAPI::toJsonValue(m_backend_type));
    }
    if (m_database_version_isSet) {
        obj.insert(QString("databaseVersion"), ::OpenAPI::toJsonValue(m_database_version));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("dnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_psc_enabled_isSet) {
        obj.insert(QString("pscEnabled"), ::OpenAPI::toJsonValue(m_psc_enabled));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_server_ca_cert.isSet()) {
        obj.insert(QString("serverCaCert"), ::OpenAPI::toJsonValue(m_server_ca_cert));
    }
    return obj;
}

QString OAIConnectSettings::getBackendType() const {
    return m_backend_type;
}
void OAIConnectSettings::setBackendType(const QString &backend_type) {
    m_backend_type = backend_type;
    m_backend_type_isSet = true;
}

bool OAIConnectSettings::is_backend_type_Set() const{
    return m_backend_type_isSet;
}

bool OAIConnectSettings::is_backend_type_Valid() const{
    return m_backend_type_isValid;
}

QString OAIConnectSettings::getDatabaseVersion() const {
    return m_database_version;
}
void OAIConnectSettings::setDatabaseVersion(const QString &database_version) {
    m_database_version = database_version;
    m_database_version_isSet = true;
}

bool OAIConnectSettings::is_database_version_Set() const{
    return m_database_version_isSet;
}

bool OAIConnectSettings::is_database_version_Valid() const{
    return m_database_version_isValid;
}

QString OAIConnectSettings::getDnsName() const {
    return m_dns_name;
}
void OAIConnectSettings::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIConnectSettings::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIConnectSettings::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QList<OAIIpMapping> OAIConnectSettings::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIConnectSettings::setIpAddresses(const QList<OAIIpMapping> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIConnectSettings::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIConnectSettings::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QString OAIConnectSettings::getKind() const {
    return m_kind;
}
void OAIConnectSettings::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIConnectSettings::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIConnectSettings::is_kind_Valid() const{
    return m_kind_isValid;
}

bool OAIConnectSettings::isPscEnabled() const {
    return m_psc_enabled;
}
void OAIConnectSettings::setPscEnabled(const bool &psc_enabled) {
    m_psc_enabled = psc_enabled;
    m_psc_enabled_isSet = true;
}

bool OAIConnectSettings::is_psc_enabled_Set() const{
    return m_psc_enabled_isSet;
}

bool OAIConnectSettings::is_psc_enabled_Valid() const{
    return m_psc_enabled_isValid;
}

QString OAIConnectSettings::getRegion() const {
    return m_region;
}
void OAIConnectSettings::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIConnectSettings::is_region_Set() const{
    return m_region_isSet;
}

bool OAIConnectSettings::is_region_Valid() const{
    return m_region_isValid;
}

OAISslCert OAIConnectSettings::getServerCaCert() const {
    return m_server_ca_cert;
}
void OAIConnectSettings::setServerCaCert(const OAISslCert &server_ca_cert) {
    m_server_ca_cert = server_ca_cert;
    m_server_ca_cert_isSet = true;
}

bool OAIConnectSettings::is_server_ca_cert_Set() const{
    return m_server_ca_cert_isSet;
}

bool OAIConnectSettings::is_server_ca_cert_Valid() const{
    return m_server_ca_cert_isValid;
}

bool OAIConnectSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backend_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ca_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConnectSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
