/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITier.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITier::OAITier(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITier::OAITier() {
    this->initializeModel();
}

OAITier::~OAITier() {}

void OAITier::initializeModel() {

    m_disk_quota_isSet = false;
    m_disk_quota_isValid = false;

    m_ram_isSet = false;
    m_ram_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAITier::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITier::fromJsonObject(QJsonObject json) {

    m_disk_quota_isValid = ::OpenAPI::fromJsonValue(m_disk_quota, json[QString("DiskQuota")]);
    m_disk_quota_isSet = !json[QString("DiskQuota")].isNull() && m_disk_quota_isValid;

    m_ram_isValid = ::OpenAPI::fromJsonValue(m_ram, json[QString("RAM")]);
    m_ram_isSet = !json[QString("RAM")].isNull() && m_ram_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAITier::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITier::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_quota_isSet) {
        obj.insert(QString("DiskQuota"), ::OpenAPI::toJsonValue(m_disk_quota));
    }
    if (m_ram_isSet) {
        obj.insert(QString("RAM"), ::OpenAPI::toJsonValue(m_ram));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_region.size() > 0) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAITier::getDiskQuota() const {
    return m_disk_quota;
}
void OAITier::setDiskQuota(const QString &disk_quota) {
    m_disk_quota = disk_quota;
    m_disk_quota_isSet = true;
}

bool OAITier::is_disk_quota_Set() const{
    return m_disk_quota_isSet;
}

bool OAITier::is_disk_quota_Valid() const{
    return m_disk_quota_isValid;
}

QString OAITier::getRam() const {
    return m_ram;
}
void OAITier::setRam(const QString &ram) {
    m_ram = ram;
    m_ram_isSet = true;
}

bool OAITier::is_ram_Set() const{
    return m_ram_isSet;
}

bool OAITier::is_ram_Valid() const{
    return m_ram_isValid;
}

QString OAITier::getKind() const {
    return m_kind;
}
void OAITier::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAITier::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAITier::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAITier::getRegion() const {
    return m_region;
}
void OAITier::setRegion(const QList<QString> &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAITier::is_region_Set() const{
    return m_region_isSet;
}

bool OAITier::is_region_Valid() const{
    return m_region_isValid;
}

QString OAITier::getTier() const {
    return m_tier;
}
void OAITier::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAITier::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAITier::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAITier::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITier::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
