/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportContext::OAIImportContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportContext::OAIImportContext() {
    this->initializeModel();
}

OAIImportContext::~OAIImportContext() {}

void OAIImportContext::initializeModel() {

    m_bak_import_options_isSet = false;
    m_bak_import_options_isValid = false;

    m_csv_import_options_isSet = false;
    m_csv_import_options_isValid = false;

    m_database_isSet = false;
    m_database_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_import_user_isSet = false;
    m_import_user_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIImportContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportContext::fromJsonObject(QJsonObject json) {

    m_bak_import_options_isValid = ::OpenAPI::fromJsonValue(m_bak_import_options, json[QString("bakImportOptions")]);
    m_bak_import_options_isSet = !json[QString("bakImportOptions")].isNull() && m_bak_import_options_isValid;

    m_csv_import_options_isValid = ::OpenAPI::fromJsonValue(m_csv_import_options, json[QString("csvImportOptions")]);
    m_csv_import_options_isSet = !json[QString("csvImportOptions")].isNull() && m_csv_import_options_isValid;

    m_database_isValid = ::OpenAPI::fromJsonValue(m_database, json[QString("database")]);
    m_database_isSet = !json[QString("database")].isNull() && m_database_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("fileType")]);
    m_file_type_isSet = !json[QString("fileType")].isNull() && m_file_type_isValid;

    m_import_user_isValid = ::OpenAPI::fromJsonValue(m_import_user, json[QString("importUser")]);
    m_import_user_isSet = !json[QString("importUser")].isNull() && m_import_user_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIImportContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportContext::asJsonObject() const {
    QJsonObject obj;
    if (m_bak_import_options.isSet()) {
        obj.insert(QString("bakImportOptions"), ::OpenAPI::toJsonValue(m_bak_import_options));
    }
    if (m_csv_import_options.isSet()) {
        obj.insert(QString("csvImportOptions"), ::OpenAPI::toJsonValue(m_csv_import_options));
    }
    if (m_database_isSet) {
        obj.insert(QString("database"), ::OpenAPI::toJsonValue(m_database));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("fileType"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_import_user_isSet) {
        obj.insert(QString("importUser"), ::OpenAPI::toJsonValue(m_import_user));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

OAIImportContext_bakImportOptions OAIImportContext::getBakImportOptions() const {
    return m_bak_import_options;
}
void OAIImportContext::setBakImportOptions(const OAIImportContext_bakImportOptions &bak_import_options) {
    m_bak_import_options = bak_import_options;
    m_bak_import_options_isSet = true;
}

bool OAIImportContext::is_bak_import_options_Set() const{
    return m_bak_import_options_isSet;
}

bool OAIImportContext::is_bak_import_options_Valid() const{
    return m_bak_import_options_isValid;
}

OAIImportContext_csvImportOptions OAIImportContext::getCsvImportOptions() const {
    return m_csv_import_options;
}
void OAIImportContext::setCsvImportOptions(const OAIImportContext_csvImportOptions &csv_import_options) {
    m_csv_import_options = csv_import_options;
    m_csv_import_options_isSet = true;
}

bool OAIImportContext::is_csv_import_options_Set() const{
    return m_csv_import_options_isSet;
}

bool OAIImportContext::is_csv_import_options_Valid() const{
    return m_csv_import_options_isValid;
}

QString OAIImportContext::getDatabase() const {
    return m_database;
}
void OAIImportContext::setDatabase(const QString &database) {
    m_database = database;
    m_database_isSet = true;
}

bool OAIImportContext::is_database_Set() const{
    return m_database_isSet;
}

bool OAIImportContext::is_database_Valid() const{
    return m_database_isValid;
}

QString OAIImportContext::getFileType() const {
    return m_file_type;
}
void OAIImportContext::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIImportContext::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIImportContext::is_file_type_Valid() const{
    return m_file_type_isValid;
}

QString OAIImportContext::getImportUser() const {
    return m_import_user;
}
void OAIImportContext::setImportUser(const QString &import_user) {
    m_import_user = import_user;
    m_import_user_isSet = true;
}

bool OAIImportContext::is_import_user_Set() const{
    return m_import_user_isSet;
}

bool OAIImportContext::is_import_user_Valid() const{
    return m_import_user_isValid;
}

QString OAIImportContext::getKind() const {
    return m_kind;
}
void OAIImportContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIImportContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIImportContext::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIImportContext::getUri() const {
    return m_uri;
}
void OAIImportContext::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIImportContext::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIImportContext::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIImportContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bak_import_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_csv_import_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
