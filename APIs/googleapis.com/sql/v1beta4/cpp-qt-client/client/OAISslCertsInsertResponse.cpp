/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslCertsInsertResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslCertsInsertResponse::OAISslCertsInsertResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslCertsInsertResponse::OAISslCertsInsertResponse() {
    this->initializeModel();
}

OAISslCertsInsertResponse::~OAISslCertsInsertResponse() {}

void OAISslCertsInsertResponse::initializeModel() {

    m_client_cert_isSet = false;
    m_client_cert_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_server_ca_cert_isSet = false;
    m_server_ca_cert_isValid = false;
}

void OAISslCertsInsertResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslCertsInsertResponse::fromJsonObject(QJsonObject json) {

    m_client_cert_isValid = ::OpenAPI::fromJsonValue(m_client_cert, json[QString("clientCert")]);
    m_client_cert_isSet = !json[QString("clientCert")].isNull() && m_client_cert_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_server_ca_cert_isValid = ::OpenAPI::fromJsonValue(m_server_ca_cert, json[QString("serverCaCert")]);
    m_server_ca_cert_isSet = !json[QString("serverCaCert")].isNull() && m_server_ca_cert_isValid;
}

QString OAISslCertsInsertResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslCertsInsertResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_client_cert.isSet()) {
        obj.insert(QString("clientCert"), ::OpenAPI::toJsonValue(m_client_cert));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_operation.isSet()) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_server_ca_cert.isSet()) {
        obj.insert(QString("serverCaCert"), ::OpenAPI::toJsonValue(m_server_ca_cert));
    }
    return obj;
}

OAISslCertDetail OAISslCertsInsertResponse::getClientCert() const {
    return m_client_cert;
}
void OAISslCertsInsertResponse::setClientCert(const OAISslCertDetail &client_cert) {
    m_client_cert = client_cert;
    m_client_cert_isSet = true;
}

bool OAISslCertsInsertResponse::is_client_cert_Set() const{
    return m_client_cert_isSet;
}

bool OAISslCertsInsertResponse::is_client_cert_Valid() const{
    return m_client_cert_isValid;
}

QString OAISslCertsInsertResponse::getKind() const {
    return m_kind;
}
void OAISslCertsInsertResponse::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAISslCertsInsertResponse::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAISslCertsInsertResponse::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIOperation OAISslCertsInsertResponse::getOperation() const {
    return m_operation;
}
void OAISslCertsInsertResponse::setOperation(const OAIOperation &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAISslCertsInsertResponse::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAISslCertsInsertResponse::is_operation_Valid() const{
    return m_operation_isValid;
}

OAISslCert OAISslCertsInsertResponse::getServerCaCert() const {
    return m_server_ca_cert;
}
void OAISslCertsInsertResponse::setServerCaCert(const OAISslCert &server_ca_cert) {
    m_server_ca_cert = server_ca_cert;
    m_server_ca_cert_isSet = true;
}

bool OAISslCertsInsertResponse::is_server_ca_cert_Set() const{
    return m_server_ca_cert_isSet;
}

bool OAISslCertsInsertResponse::is_server_ca_cert_Valid() const{
    return m_server_ca_cert_isValid;
}

bool OAISslCertsInsertResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ca_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslCertsInsertResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
