/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPasswordValidationPolicy.h
 *
 * Database instance local user password validation policy
 */

#ifndef OAIPasswordValidationPolicy_H
#define OAIPasswordValidationPolicy_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPasswordValidationPolicy : public OAIObject {
public:
    OAIPasswordValidationPolicy();
    OAIPasswordValidationPolicy(QString json);
    ~OAIPasswordValidationPolicy() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComplexity() const;
    void setComplexity(const QString &complexity);
    bool is_complexity_Set() const;
    bool is_complexity_Valid() const;

    Q_DECL_DEPRECATED bool isDisallowCompromisedCredentials() const;
    Q_DECL_DEPRECATED void setDisallowCompromisedCredentials(const bool &disallow_compromised_credentials);
    Q_DECL_DEPRECATED bool is_disallow_compromised_credentials_Set() const;
    Q_DECL_DEPRECATED bool is_disallow_compromised_credentials_Valid() const;

    bool isDisallowUsernameSubstring() const;
    void setDisallowUsernameSubstring(const bool &disallow_username_substring);
    bool is_disallow_username_substring_Set() const;
    bool is_disallow_username_substring_Valid() const;

    bool isEnablePasswordPolicy() const;
    void setEnablePasswordPolicy(const bool &enable_password_policy);
    bool is_enable_password_policy_Set() const;
    bool is_enable_password_policy_Valid() const;

    qint32 getMinLength() const;
    void setMinLength(const qint32 &min_length);
    bool is_min_length_Set() const;
    bool is_min_length_Valid() const;

    QString getPasswordChangeInterval() const;
    void setPasswordChangeInterval(const QString &password_change_interval);
    bool is_password_change_interval_Set() const;
    bool is_password_change_interval_Valid() const;

    qint32 getReuseInterval() const;
    void setReuseInterval(const qint32 &reuse_interval);
    bool is_reuse_interval_Set() const;
    bool is_reuse_interval_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_complexity;
    bool m_complexity_isSet;
    bool m_complexity_isValid;

    bool m_disallow_compromised_credentials;
    bool m_disallow_compromised_credentials_isSet;
    bool m_disallow_compromised_credentials_isValid;

    bool m_disallow_username_substring;
    bool m_disallow_username_substring_isSet;
    bool m_disallow_username_substring_isValid;

    bool m_enable_password_policy;
    bool m_enable_password_policy_isSet;
    bool m_enable_password_policy_isValid;

    qint32 m_min_length;
    bool m_min_length_isSet;
    bool m_min_length_isValid;

    QString m_password_change_interval;
    bool m_password_change_interval_isSet;
    bool m_password_change_interval_isValid;

    qint32 m_reuse_interval;
    bool m_reuse_interval_isSet;
    bool m_reuse_interval_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPasswordValidationPolicy)

#endif // OAIPasswordValidationPolicy_H
