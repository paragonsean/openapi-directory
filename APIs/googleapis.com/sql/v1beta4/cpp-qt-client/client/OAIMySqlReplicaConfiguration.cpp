/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMySqlReplicaConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMySqlReplicaConfiguration::OAIMySqlReplicaConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMySqlReplicaConfiguration::OAIMySqlReplicaConfiguration() {
    this->initializeModel();
}

OAIMySqlReplicaConfiguration::~OAIMySqlReplicaConfiguration() {}

void OAIMySqlReplicaConfiguration::initializeModel() {

    m_ca_certificate_isSet = false;
    m_ca_certificate_isValid = false;

    m_client_certificate_isSet = false;
    m_client_certificate_isValid = false;

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_connect_retry_interval_isSet = false;
    m_connect_retry_interval_isValid = false;

    m_dump_file_path_isSet = false;
    m_dump_file_path_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_master_heartbeat_period_isSet = false;
    m_master_heartbeat_period_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_ssl_cipher_isSet = false;
    m_ssl_cipher_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_verify_server_certificate_isSet = false;
    m_verify_server_certificate_isValid = false;
}

void OAIMySqlReplicaConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMySqlReplicaConfiguration::fromJsonObject(QJsonObject json) {

    m_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate, json[QString("caCertificate")]);
    m_ca_certificate_isSet = !json[QString("caCertificate")].isNull() && m_ca_certificate_isValid;

    m_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_client_certificate, json[QString("clientCertificate")]);
    m_client_certificate_isSet = !json[QString("clientCertificate")].isNull() && m_client_certificate_isValid;

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("clientKey")]);
    m_client_key_isSet = !json[QString("clientKey")].isNull() && m_client_key_isValid;

    m_connect_retry_interval_isValid = ::OpenAPI::fromJsonValue(m_connect_retry_interval, json[QString("connectRetryInterval")]);
    m_connect_retry_interval_isSet = !json[QString("connectRetryInterval")].isNull() && m_connect_retry_interval_isValid;

    m_dump_file_path_isValid = ::OpenAPI::fromJsonValue(m_dump_file_path, json[QString("dumpFilePath")]);
    m_dump_file_path_isSet = !json[QString("dumpFilePath")].isNull() && m_dump_file_path_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_master_heartbeat_period_isValid = ::OpenAPI::fromJsonValue(m_master_heartbeat_period, json[QString("masterHeartbeatPeriod")]);
    m_master_heartbeat_period_isSet = !json[QString("masterHeartbeatPeriod")].isNull() && m_master_heartbeat_period_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_ssl_cipher_isValid = ::OpenAPI::fromJsonValue(m_ssl_cipher, json[QString("sslCipher")]);
    m_ssl_cipher_isSet = !json[QString("sslCipher")].isNull() && m_ssl_cipher_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_verify_server_certificate_isValid = ::OpenAPI::fromJsonValue(m_verify_server_certificate, json[QString("verifyServerCertificate")]);
    m_verify_server_certificate_isSet = !json[QString("verifyServerCertificate")].isNull() && m_verify_server_certificate_isValid;
}

QString OAIMySqlReplicaConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMySqlReplicaConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_isSet) {
        obj.insert(QString("caCertificate"), ::OpenAPI::toJsonValue(m_ca_certificate));
    }
    if (m_client_certificate_isSet) {
        obj.insert(QString("clientCertificate"), ::OpenAPI::toJsonValue(m_client_certificate));
    }
    if (m_client_key_isSet) {
        obj.insert(QString("clientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_connect_retry_interval_isSet) {
        obj.insert(QString("connectRetryInterval"), ::OpenAPI::toJsonValue(m_connect_retry_interval));
    }
    if (m_dump_file_path_isSet) {
        obj.insert(QString("dumpFilePath"), ::OpenAPI::toJsonValue(m_dump_file_path));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_master_heartbeat_period_isSet) {
        obj.insert(QString("masterHeartbeatPeriod"), ::OpenAPI::toJsonValue(m_master_heartbeat_period));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_ssl_cipher_isSet) {
        obj.insert(QString("sslCipher"), ::OpenAPI::toJsonValue(m_ssl_cipher));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_verify_server_certificate_isSet) {
        obj.insert(QString("verifyServerCertificate"), ::OpenAPI::toJsonValue(m_verify_server_certificate));
    }
    return obj;
}

QString OAIMySqlReplicaConfiguration::getCaCertificate() const {
    return m_ca_certificate;
}
void OAIMySqlReplicaConfiguration::setCaCertificate(const QString &ca_certificate) {
    m_ca_certificate = ca_certificate;
    m_ca_certificate_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_ca_certificate_Set() const{
    return m_ca_certificate_isSet;
}

bool OAIMySqlReplicaConfiguration::is_ca_certificate_Valid() const{
    return m_ca_certificate_isValid;
}

QString OAIMySqlReplicaConfiguration::getClientCertificate() const {
    return m_client_certificate;
}
void OAIMySqlReplicaConfiguration::setClientCertificate(const QString &client_certificate) {
    m_client_certificate = client_certificate;
    m_client_certificate_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_client_certificate_Set() const{
    return m_client_certificate_isSet;
}

bool OAIMySqlReplicaConfiguration::is_client_certificate_Valid() const{
    return m_client_certificate_isValid;
}

QString OAIMySqlReplicaConfiguration::getClientKey() const {
    return m_client_key;
}
void OAIMySqlReplicaConfiguration::setClientKey(const QString &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAIMySqlReplicaConfiguration::is_client_key_Valid() const{
    return m_client_key_isValid;
}

qint32 OAIMySqlReplicaConfiguration::getConnectRetryInterval() const {
    return m_connect_retry_interval;
}
void OAIMySqlReplicaConfiguration::setConnectRetryInterval(const qint32 &connect_retry_interval) {
    m_connect_retry_interval = connect_retry_interval;
    m_connect_retry_interval_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_connect_retry_interval_Set() const{
    return m_connect_retry_interval_isSet;
}

bool OAIMySqlReplicaConfiguration::is_connect_retry_interval_Valid() const{
    return m_connect_retry_interval_isValid;
}

QString OAIMySqlReplicaConfiguration::getDumpFilePath() const {
    return m_dump_file_path;
}
void OAIMySqlReplicaConfiguration::setDumpFilePath(const QString &dump_file_path) {
    m_dump_file_path = dump_file_path;
    m_dump_file_path_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_dump_file_path_Set() const{
    return m_dump_file_path_isSet;
}

bool OAIMySqlReplicaConfiguration::is_dump_file_path_Valid() const{
    return m_dump_file_path_isValid;
}

QString OAIMySqlReplicaConfiguration::getKind() const {
    return m_kind;
}
void OAIMySqlReplicaConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIMySqlReplicaConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIMySqlReplicaConfiguration::getMasterHeartbeatPeriod() const {
    return m_master_heartbeat_period;
}
void OAIMySqlReplicaConfiguration::setMasterHeartbeatPeriod(const QString &master_heartbeat_period) {
    m_master_heartbeat_period = master_heartbeat_period;
    m_master_heartbeat_period_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_master_heartbeat_period_Set() const{
    return m_master_heartbeat_period_isSet;
}

bool OAIMySqlReplicaConfiguration::is_master_heartbeat_period_Valid() const{
    return m_master_heartbeat_period_isValid;
}

QString OAIMySqlReplicaConfiguration::getPassword() const {
    return m_password;
}
void OAIMySqlReplicaConfiguration::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_password_Set() const{
    return m_password_isSet;
}

bool OAIMySqlReplicaConfiguration::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIMySqlReplicaConfiguration::getSslCipher() const {
    return m_ssl_cipher;
}
void OAIMySqlReplicaConfiguration::setSslCipher(const QString &ssl_cipher) {
    m_ssl_cipher = ssl_cipher;
    m_ssl_cipher_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_ssl_cipher_Set() const{
    return m_ssl_cipher_isSet;
}

bool OAIMySqlReplicaConfiguration::is_ssl_cipher_Valid() const{
    return m_ssl_cipher_isValid;
}

QString OAIMySqlReplicaConfiguration::getUsername() const {
    return m_username;
}
void OAIMySqlReplicaConfiguration::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_username_Set() const{
    return m_username_isSet;
}

bool OAIMySqlReplicaConfiguration::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIMySqlReplicaConfiguration::isVerifyServerCertificate() const {
    return m_verify_server_certificate;
}
void OAIMySqlReplicaConfiguration::setVerifyServerCertificate(const bool &verify_server_certificate) {
    m_verify_server_certificate = verify_server_certificate;
    m_verify_server_certificate_isSet = true;
}

bool OAIMySqlReplicaConfiguration::is_verify_server_certificate_Set() const{
    return m_verify_server_certificate_isSet;
}

bool OAIMySqlReplicaConfiguration::is_verify_server_certificate_Valid() const{
    return m_verify_server_certificate_isValid;
}

bool OAIMySqlReplicaConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connect_retry_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_heartbeat_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_cipher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_server_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMySqlReplicaConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
