/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlInstancesStartExternalSyncRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlInstancesStartExternalSyncRequest::OAISqlInstancesStartExternalSyncRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlInstancesStartExternalSyncRequest::OAISqlInstancesStartExternalSyncRequest() {
    this->initializeModel();
}

OAISqlInstancesStartExternalSyncRequest::~OAISqlInstancesStartExternalSyncRequest() {}

void OAISqlInstancesStartExternalSyncRequest::initializeModel() {

    m_mysql_sync_config_isSet = false;
    m_mysql_sync_config_isValid = false;

    m_skip_verification_isSet = false;
    m_skip_verification_isValid = false;

    m_sync_mode_isSet = false;
    m_sync_mode_isValid = false;

    m_sync_parallel_level_isSet = false;
    m_sync_parallel_level_isValid = false;
}

void OAISqlInstancesStartExternalSyncRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlInstancesStartExternalSyncRequest::fromJsonObject(QJsonObject json) {

    m_mysql_sync_config_isValid = ::OpenAPI::fromJsonValue(m_mysql_sync_config, json[QString("mysqlSyncConfig")]);
    m_mysql_sync_config_isSet = !json[QString("mysqlSyncConfig")].isNull() && m_mysql_sync_config_isValid;

    m_skip_verification_isValid = ::OpenAPI::fromJsonValue(m_skip_verification, json[QString("skipVerification")]);
    m_skip_verification_isSet = !json[QString("skipVerification")].isNull() && m_skip_verification_isValid;

    m_sync_mode_isValid = ::OpenAPI::fromJsonValue(m_sync_mode, json[QString("syncMode")]);
    m_sync_mode_isSet = !json[QString("syncMode")].isNull() && m_sync_mode_isValid;

    m_sync_parallel_level_isValid = ::OpenAPI::fromJsonValue(m_sync_parallel_level, json[QString("syncParallelLevel")]);
    m_sync_parallel_level_isSet = !json[QString("syncParallelLevel")].isNull() && m_sync_parallel_level_isValid;
}

QString OAISqlInstancesStartExternalSyncRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlInstancesStartExternalSyncRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_sync_config.isSet()) {
        obj.insert(QString("mysqlSyncConfig"), ::OpenAPI::toJsonValue(m_mysql_sync_config));
    }
    if (m_skip_verification_isSet) {
        obj.insert(QString("skipVerification"), ::OpenAPI::toJsonValue(m_skip_verification));
    }
    if (m_sync_mode_isSet) {
        obj.insert(QString("syncMode"), ::OpenAPI::toJsonValue(m_sync_mode));
    }
    if (m_sync_parallel_level_isSet) {
        obj.insert(QString("syncParallelLevel"), ::OpenAPI::toJsonValue(m_sync_parallel_level));
    }
    return obj;
}

OAIMySqlSyncConfig OAISqlInstancesStartExternalSyncRequest::getMysqlSyncConfig() const {
    return m_mysql_sync_config;
}
void OAISqlInstancesStartExternalSyncRequest::setMysqlSyncConfig(const OAIMySqlSyncConfig &mysql_sync_config) {
    m_mysql_sync_config = mysql_sync_config;
    m_mysql_sync_config_isSet = true;
}

bool OAISqlInstancesStartExternalSyncRequest::is_mysql_sync_config_Set() const{
    return m_mysql_sync_config_isSet;
}

bool OAISqlInstancesStartExternalSyncRequest::is_mysql_sync_config_Valid() const{
    return m_mysql_sync_config_isValid;
}

bool OAISqlInstancesStartExternalSyncRequest::isSkipVerification() const {
    return m_skip_verification;
}
void OAISqlInstancesStartExternalSyncRequest::setSkipVerification(const bool &skip_verification) {
    m_skip_verification = skip_verification;
    m_skip_verification_isSet = true;
}

bool OAISqlInstancesStartExternalSyncRequest::is_skip_verification_Set() const{
    return m_skip_verification_isSet;
}

bool OAISqlInstancesStartExternalSyncRequest::is_skip_verification_Valid() const{
    return m_skip_verification_isValid;
}

QString OAISqlInstancesStartExternalSyncRequest::getSyncMode() const {
    return m_sync_mode;
}
void OAISqlInstancesStartExternalSyncRequest::setSyncMode(const QString &sync_mode) {
    m_sync_mode = sync_mode;
    m_sync_mode_isSet = true;
}

bool OAISqlInstancesStartExternalSyncRequest::is_sync_mode_Set() const{
    return m_sync_mode_isSet;
}

bool OAISqlInstancesStartExternalSyncRequest::is_sync_mode_Valid() const{
    return m_sync_mode_isValid;
}

QString OAISqlInstancesStartExternalSyncRequest::getSyncParallelLevel() const {
    return m_sync_parallel_level;
}
void OAISqlInstancesStartExternalSyncRequest::setSyncParallelLevel(const QString &sync_parallel_level) {
    m_sync_parallel_level = sync_parallel_level;
    m_sync_parallel_level_isSet = true;
}

bool OAISqlInstancesStartExternalSyncRequest::is_sync_parallel_level_Set() const{
    return m_sync_parallel_level_isSet;
}

bool OAISqlInstancesStartExternalSyncRequest::is_sync_parallel_level_Valid() const{
    return m_sync_parallel_level_isValid;
}

bool OAISqlInstancesStartExternalSyncRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_sync_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_parallel_level_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlInstancesStartExternalSyncRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
