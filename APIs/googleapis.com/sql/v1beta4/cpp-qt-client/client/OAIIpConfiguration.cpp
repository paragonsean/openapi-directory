/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIpConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIpConfiguration::OAIIpConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIpConfiguration::OAIIpConfiguration() {
    this->initializeModel();
}

OAIIpConfiguration::~OAIIpConfiguration() {}

void OAIIpConfiguration::initializeModel() {

    m_allocated_ip_range_isSet = false;
    m_allocated_ip_range_isValid = false;

    m_authorized_networks_isSet = false;
    m_authorized_networks_isValid = false;

    m_enable_private_path_for_google_cloud_services_isSet = false;
    m_enable_private_path_for_google_cloud_services_isValid = false;

    m_ipv4_enabled_isSet = false;
    m_ipv4_enabled_isValid = false;

    m_private_network_isSet = false;
    m_private_network_isValid = false;

    m_psc_config_isSet = false;
    m_psc_config_isValid = false;

    m_require_ssl_isSet = false;
    m_require_ssl_isValid = false;

    m_ssl_mode_isSet = false;
    m_ssl_mode_isValid = false;
}

void OAIIpConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIpConfiguration::fromJsonObject(QJsonObject json) {

    m_allocated_ip_range_isValid = ::OpenAPI::fromJsonValue(m_allocated_ip_range, json[QString("allocatedIpRange")]);
    m_allocated_ip_range_isSet = !json[QString("allocatedIpRange")].isNull() && m_allocated_ip_range_isValid;

    m_authorized_networks_isValid = ::OpenAPI::fromJsonValue(m_authorized_networks, json[QString("authorizedNetworks")]);
    m_authorized_networks_isSet = !json[QString("authorizedNetworks")].isNull() && m_authorized_networks_isValid;

    m_enable_private_path_for_google_cloud_services_isValid = ::OpenAPI::fromJsonValue(m_enable_private_path_for_google_cloud_services, json[QString("enablePrivatePathForGoogleCloudServices")]);
    m_enable_private_path_for_google_cloud_services_isSet = !json[QString("enablePrivatePathForGoogleCloudServices")].isNull() && m_enable_private_path_for_google_cloud_services_isValid;

    m_ipv4_enabled_isValid = ::OpenAPI::fromJsonValue(m_ipv4_enabled, json[QString("ipv4Enabled")]);
    m_ipv4_enabled_isSet = !json[QString("ipv4Enabled")].isNull() && m_ipv4_enabled_isValid;

    m_private_network_isValid = ::OpenAPI::fromJsonValue(m_private_network, json[QString("privateNetwork")]);
    m_private_network_isSet = !json[QString("privateNetwork")].isNull() && m_private_network_isValid;

    m_psc_config_isValid = ::OpenAPI::fromJsonValue(m_psc_config, json[QString("pscConfig")]);
    m_psc_config_isSet = !json[QString("pscConfig")].isNull() && m_psc_config_isValid;

    m_require_ssl_isValid = ::OpenAPI::fromJsonValue(m_require_ssl, json[QString("requireSsl")]);
    m_require_ssl_isSet = !json[QString("requireSsl")].isNull() && m_require_ssl_isValid;

    m_ssl_mode_isValid = ::OpenAPI::fromJsonValue(m_ssl_mode, json[QString("sslMode")]);
    m_ssl_mode_isSet = !json[QString("sslMode")].isNull() && m_ssl_mode_isValid;
}

QString OAIIpConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIpConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_ip_range_isSet) {
        obj.insert(QString("allocatedIpRange"), ::OpenAPI::toJsonValue(m_allocated_ip_range));
    }
    if (m_authorized_networks.size() > 0) {
        obj.insert(QString("authorizedNetworks"), ::OpenAPI::toJsonValue(m_authorized_networks));
    }
    if (m_enable_private_path_for_google_cloud_services_isSet) {
        obj.insert(QString("enablePrivatePathForGoogleCloudServices"), ::OpenAPI::toJsonValue(m_enable_private_path_for_google_cloud_services));
    }
    if (m_ipv4_enabled_isSet) {
        obj.insert(QString("ipv4Enabled"), ::OpenAPI::toJsonValue(m_ipv4_enabled));
    }
    if (m_private_network_isSet) {
        obj.insert(QString("privateNetwork"), ::OpenAPI::toJsonValue(m_private_network));
    }
    if (m_psc_config.isSet()) {
        obj.insert(QString("pscConfig"), ::OpenAPI::toJsonValue(m_psc_config));
    }
    if (m_require_ssl_isSet) {
        obj.insert(QString("requireSsl"), ::OpenAPI::toJsonValue(m_require_ssl));
    }
    if (m_ssl_mode_isSet) {
        obj.insert(QString("sslMode"), ::OpenAPI::toJsonValue(m_ssl_mode));
    }
    return obj;
}

QString OAIIpConfiguration::getAllocatedIpRange() const {
    return m_allocated_ip_range;
}
void OAIIpConfiguration::setAllocatedIpRange(const QString &allocated_ip_range) {
    m_allocated_ip_range = allocated_ip_range;
    m_allocated_ip_range_isSet = true;
}

bool OAIIpConfiguration::is_allocated_ip_range_Set() const{
    return m_allocated_ip_range_isSet;
}

bool OAIIpConfiguration::is_allocated_ip_range_Valid() const{
    return m_allocated_ip_range_isValid;
}

QList<OAIAclEntry> OAIIpConfiguration::getAuthorizedNetworks() const {
    return m_authorized_networks;
}
void OAIIpConfiguration::setAuthorizedNetworks(const QList<OAIAclEntry> &authorized_networks) {
    m_authorized_networks = authorized_networks;
    m_authorized_networks_isSet = true;
}

bool OAIIpConfiguration::is_authorized_networks_Set() const{
    return m_authorized_networks_isSet;
}

bool OAIIpConfiguration::is_authorized_networks_Valid() const{
    return m_authorized_networks_isValid;
}

bool OAIIpConfiguration::isEnablePrivatePathForGoogleCloudServices() const {
    return m_enable_private_path_for_google_cloud_services;
}
void OAIIpConfiguration::setEnablePrivatePathForGoogleCloudServices(const bool &enable_private_path_for_google_cloud_services) {
    m_enable_private_path_for_google_cloud_services = enable_private_path_for_google_cloud_services;
    m_enable_private_path_for_google_cloud_services_isSet = true;
}

bool OAIIpConfiguration::is_enable_private_path_for_google_cloud_services_Set() const{
    return m_enable_private_path_for_google_cloud_services_isSet;
}

bool OAIIpConfiguration::is_enable_private_path_for_google_cloud_services_Valid() const{
    return m_enable_private_path_for_google_cloud_services_isValid;
}

bool OAIIpConfiguration::isIpv4Enabled() const {
    return m_ipv4_enabled;
}
void OAIIpConfiguration::setIpv4Enabled(const bool &ipv4_enabled) {
    m_ipv4_enabled = ipv4_enabled;
    m_ipv4_enabled_isSet = true;
}

bool OAIIpConfiguration::is_ipv4_enabled_Set() const{
    return m_ipv4_enabled_isSet;
}

bool OAIIpConfiguration::is_ipv4_enabled_Valid() const{
    return m_ipv4_enabled_isValid;
}

QString OAIIpConfiguration::getPrivateNetwork() const {
    return m_private_network;
}
void OAIIpConfiguration::setPrivateNetwork(const QString &private_network) {
    m_private_network = private_network;
    m_private_network_isSet = true;
}

bool OAIIpConfiguration::is_private_network_Set() const{
    return m_private_network_isSet;
}

bool OAIIpConfiguration::is_private_network_Valid() const{
    return m_private_network_isValid;
}

OAIPscConfig OAIIpConfiguration::getPscConfig() const {
    return m_psc_config;
}
void OAIIpConfiguration::setPscConfig(const OAIPscConfig &psc_config) {
    m_psc_config = psc_config;
    m_psc_config_isSet = true;
}

bool OAIIpConfiguration::is_psc_config_Set() const{
    return m_psc_config_isSet;
}

bool OAIIpConfiguration::is_psc_config_Valid() const{
    return m_psc_config_isValid;
}

bool OAIIpConfiguration::isRequireSsl() const {
    return m_require_ssl;
}
void OAIIpConfiguration::setRequireSsl(const bool &require_ssl) {
    m_require_ssl = require_ssl;
    m_require_ssl_isSet = true;
}

bool OAIIpConfiguration::is_require_ssl_Set() const{
    return m_require_ssl_isSet;
}

bool OAIIpConfiguration::is_require_ssl_Valid() const{
    return m_require_ssl_isValid;
}

QString OAIIpConfiguration::getSslMode() const {
    return m_ssl_mode;
}
void OAIIpConfiguration::setSslMode(const QString &ssl_mode) {
    m_ssl_mode = ssl_mode;
    m_ssl_mode_isSet = true;
}

bool OAIIpConfiguration::is_ssl_mode_Set() const{
    return m_ssl_mode_isSet;
}

bool OAIIpConfiguration::is_ssl_mode_Valid() const{
    return m_ssl_mode_isValid;
}

bool OAIIpConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_ip_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorized_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_private_path_for_google_cloud_services_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv4_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_require_ssl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIpConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
