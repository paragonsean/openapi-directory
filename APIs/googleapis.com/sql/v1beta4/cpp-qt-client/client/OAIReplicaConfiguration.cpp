/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReplicaConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReplicaConfiguration::OAIReplicaConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReplicaConfiguration::OAIReplicaConfiguration() {
    this->initializeModel();
}

OAIReplicaConfiguration::~OAIReplicaConfiguration() {}

void OAIReplicaConfiguration::initializeModel() {

    m_cascadable_replica_isSet = false;
    m_cascadable_replica_isValid = false;

    m_failover_target_isSet = false;
    m_failover_target_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_mysql_replica_configuration_isSet = false;
    m_mysql_replica_configuration_isValid = false;
}

void OAIReplicaConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReplicaConfiguration::fromJsonObject(QJsonObject json) {

    m_cascadable_replica_isValid = ::OpenAPI::fromJsonValue(m_cascadable_replica, json[QString("cascadableReplica")]);
    m_cascadable_replica_isSet = !json[QString("cascadableReplica")].isNull() && m_cascadable_replica_isValid;

    m_failover_target_isValid = ::OpenAPI::fromJsonValue(m_failover_target, json[QString("failoverTarget")]);
    m_failover_target_isSet = !json[QString("failoverTarget")].isNull() && m_failover_target_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_mysql_replica_configuration_isValid = ::OpenAPI::fromJsonValue(m_mysql_replica_configuration, json[QString("mysqlReplicaConfiguration")]);
    m_mysql_replica_configuration_isSet = !json[QString("mysqlReplicaConfiguration")].isNull() && m_mysql_replica_configuration_isValid;
}

QString OAIReplicaConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReplicaConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_cascadable_replica_isSet) {
        obj.insert(QString("cascadableReplica"), ::OpenAPI::toJsonValue(m_cascadable_replica));
    }
    if (m_failover_target_isSet) {
        obj.insert(QString("failoverTarget"), ::OpenAPI::toJsonValue(m_failover_target));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_mysql_replica_configuration.isSet()) {
        obj.insert(QString("mysqlReplicaConfiguration"), ::OpenAPI::toJsonValue(m_mysql_replica_configuration));
    }
    return obj;
}

bool OAIReplicaConfiguration::isCascadableReplica() const {
    return m_cascadable_replica;
}
void OAIReplicaConfiguration::setCascadableReplica(const bool &cascadable_replica) {
    m_cascadable_replica = cascadable_replica;
    m_cascadable_replica_isSet = true;
}

bool OAIReplicaConfiguration::is_cascadable_replica_Set() const{
    return m_cascadable_replica_isSet;
}

bool OAIReplicaConfiguration::is_cascadable_replica_Valid() const{
    return m_cascadable_replica_isValid;
}

bool OAIReplicaConfiguration::isFailoverTarget() const {
    return m_failover_target;
}
void OAIReplicaConfiguration::setFailoverTarget(const bool &failover_target) {
    m_failover_target = failover_target;
    m_failover_target_isSet = true;
}

bool OAIReplicaConfiguration::is_failover_target_Set() const{
    return m_failover_target_isSet;
}

bool OAIReplicaConfiguration::is_failover_target_Valid() const{
    return m_failover_target_isValid;
}

QString OAIReplicaConfiguration::getKind() const {
    return m_kind;
}
void OAIReplicaConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIReplicaConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIReplicaConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

OAIMySqlReplicaConfiguration OAIReplicaConfiguration::getMysqlReplicaConfiguration() const {
    return m_mysql_replica_configuration;
}
void OAIReplicaConfiguration::setMysqlReplicaConfiguration(const OAIMySqlReplicaConfiguration &mysql_replica_configuration) {
    m_mysql_replica_configuration = mysql_replica_configuration;
    m_mysql_replica_configuration_isSet = true;
}

bool OAIReplicaConfiguration::is_mysql_replica_configuration_Set() const{
    return m_mysql_replica_configuration_isSet;
}

bool OAIReplicaConfiguration::is_mysql_replica_configuration_Valid() const{
    return m_mysql_replica_configuration_isValid;
}

bool OAIReplicaConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cascadable_replica_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mysql_replica_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReplicaConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
