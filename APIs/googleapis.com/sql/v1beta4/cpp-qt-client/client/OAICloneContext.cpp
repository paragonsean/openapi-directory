/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICloneContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICloneContext::OAICloneContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICloneContext::OAICloneContext() {
    this->initializeModel();
}

OAICloneContext::~OAICloneContext() {}

void OAICloneContext::initializeModel() {

    m_allocated_ip_range_isSet = false;
    m_allocated_ip_range_isValid = false;

    m_bin_log_coordinates_isSet = false;
    m_bin_log_coordinates_isValid = false;

    m_database_names_isSet = false;
    m_database_names_isValid = false;

    m_destination_instance_name_isSet = false;
    m_destination_instance_name_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_pitr_timestamp_ms_isSet = false;
    m_pitr_timestamp_ms_isValid = false;

    m_point_in_time_isSet = false;
    m_point_in_time_isValid = false;

    m_preferred_zone_isSet = false;
    m_preferred_zone_isValid = false;
}

void OAICloneContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICloneContext::fromJsonObject(QJsonObject json) {

    m_allocated_ip_range_isValid = ::OpenAPI::fromJsonValue(m_allocated_ip_range, json[QString("allocatedIpRange")]);
    m_allocated_ip_range_isSet = !json[QString("allocatedIpRange")].isNull() && m_allocated_ip_range_isValid;

    m_bin_log_coordinates_isValid = ::OpenAPI::fromJsonValue(m_bin_log_coordinates, json[QString("binLogCoordinates")]);
    m_bin_log_coordinates_isSet = !json[QString("binLogCoordinates")].isNull() && m_bin_log_coordinates_isValid;

    m_database_names_isValid = ::OpenAPI::fromJsonValue(m_database_names, json[QString("databaseNames")]);
    m_database_names_isSet = !json[QString("databaseNames")].isNull() && m_database_names_isValid;

    m_destination_instance_name_isValid = ::OpenAPI::fromJsonValue(m_destination_instance_name, json[QString("destinationInstanceName")]);
    m_destination_instance_name_isSet = !json[QString("destinationInstanceName")].isNull() && m_destination_instance_name_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_pitr_timestamp_ms_isValid = ::OpenAPI::fromJsonValue(m_pitr_timestamp_ms, json[QString("pitrTimestampMs")]);
    m_pitr_timestamp_ms_isSet = !json[QString("pitrTimestampMs")].isNull() && m_pitr_timestamp_ms_isValid;

    m_point_in_time_isValid = ::OpenAPI::fromJsonValue(m_point_in_time, json[QString("pointInTime")]);
    m_point_in_time_isSet = !json[QString("pointInTime")].isNull() && m_point_in_time_isValid;

    m_preferred_zone_isValid = ::OpenAPI::fromJsonValue(m_preferred_zone, json[QString("preferredZone")]);
    m_preferred_zone_isSet = !json[QString("preferredZone")].isNull() && m_preferred_zone_isValid;
}

QString OAICloneContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICloneContext::asJsonObject() const {
    QJsonObject obj;
    if (m_allocated_ip_range_isSet) {
        obj.insert(QString("allocatedIpRange"), ::OpenAPI::toJsonValue(m_allocated_ip_range));
    }
    if (m_bin_log_coordinates.isSet()) {
        obj.insert(QString("binLogCoordinates"), ::OpenAPI::toJsonValue(m_bin_log_coordinates));
    }
    if (m_database_names.size() > 0) {
        obj.insert(QString("databaseNames"), ::OpenAPI::toJsonValue(m_database_names));
    }
    if (m_destination_instance_name_isSet) {
        obj.insert(QString("destinationInstanceName"), ::OpenAPI::toJsonValue(m_destination_instance_name));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_pitr_timestamp_ms_isSet) {
        obj.insert(QString("pitrTimestampMs"), ::OpenAPI::toJsonValue(m_pitr_timestamp_ms));
    }
    if (m_point_in_time_isSet) {
        obj.insert(QString("pointInTime"), ::OpenAPI::toJsonValue(m_point_in_time));
    }
    if (m_preferred_zone_isSet) {
        obj.insert(QString("preferredZone"), ::OpenAPI::toJsonValue(m_preferred_zone));
    }
    return obj;
}

QString OAICloneContext::getAllocatedIpRange() const {
    return m_allocated_ip_range;
}
void OAICloneContext::setAllocatedIpRange(const QString &allocated_ip_range) {
    m_allocated_ip_range = allocated_ip_range;
    m_allocated_ip_range_isSet = true;
}

bool OAICloneContext::is_allocated_ip_range_Set() const{
    return m_allocated_ip_range_isSet;
}

bool OAICloneContext::is_allocated_ip_range_Valid() const{
    return m_allocated_ip_range_isValid;
}

OAIBinLogCoordinates OAICloneContext::getBinLogCoordinates() const {
    return m_bin_log_coordinates;
}
void OAICloneContext::setBinLogCoordinates(const OAIBinLogCoordinates &bin_log_coordinates) {
    m_bin_log_coordinates = bin_log_coordinates;
    m_bin_log_coordinates_isSet = true;
}

bool OAICloneContext::is_bin_log_coordinates_Set() const{
    return m_bin_log_coordinates_isSet;
}

bool OAICloneContext::is_bin_log_coordinates_Valid() const{
    return m_bin_log_coordinates_isValid;
}

QList<QString> OAICloneContext::getDatabaseNames() const {
    return m_database_names;
}
void OAICloneContext::setDatabaseNames(const QList<QString> &database_names) {
    m_database_names = database_names;
    m_database_names_isSet = true;
}

bool OAICloneContext::is_database_names_Set() const{
    return m_database_names_isSet;
}

bool OAICloneContext::is_database_names_Valid() const{
    return m_database_names_isValid;
}

QString OAICloneContext::getDestinationInstanceName() const {
    return m_destination_instance_name;
}
void OAICloneContext::setDestinationInstanceName(const QString &destination_instance_name) {
    m_destination_instance_name = destination_instance_name;
    m_destination_instance_name_isSet = true;
}

bool OAICloneContext::is_destination_instance_name_Set() const{
    return m_destination_instance_name_isSet;
}

bool OAICloneContext::is_destination_instance_name_Valid() const{
    return m_destination_instance_name_isValid;
}

QString OAICloneContext::getKind() const {
    return m_kind;
}
void OAICloneContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAICloneContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAICloneContext::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAICloneContext::getPitrTimestampMs() const {
    return m_pitr_timestamp_ms;
}
void OAICloneContext::setPitrTimestampMs(const QString &pitr_timestamp_ms) {
    m_pitr_timestamp_ms = pitr_timestamp_ms;
    m_pitr_timestamp_ms_isSet = true;
}

bool OAICloneContext::is_pitr_timestamp_ms_Set() const{
    return m_pitr_timestamp_ms_isSet;
}

bool OAICloneContext::is_pitr_timestamp_ms_Valid() const{
    return m_pitr_timestamp_ms_isValid;
}

QString OAICloneContext::getPointInTime() const {
    return m_point_in_time;
}
void OAICloneContext::setPointInTime(const QString &point_in_time) {
    m_point_in_time = point_in_time;
    m_point_in_time_isSet = true;
}

bool OAICloneContext::is_point_in_time_Set() const{
    return m_point_in_time_isSet;
}

bool OAICloneContext::is_point_in_time_Valid() const{
    return m_point_in_time_isValid;
}

QString OAICloneContext::getPreferredZone() const {
    return m_preferred_zone;
}
void OAICloneContext::setPreferredZone(const QString &preferred_zone) {
    m_preferred_zone = preferred_zone;
    m_preferred_zone_isSet = true;
}

bool OAICloneContext::is_preferred_zone_Set() const{
    return m_preferred_zone_isSet;
}

bool OAICloneContext::is_preferred_zone_Valid() const{
    return m_preferred_zone_isValid;
}

bool OAICloneContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocated_ip_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bin_log_coordinates.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pitr_timestamp_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICloneContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
