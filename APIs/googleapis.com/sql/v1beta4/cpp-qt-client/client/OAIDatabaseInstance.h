/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDatabaseInstance.h
 *
 * A Cloud SQL instance resource.
 */

#ifndef OAIDatabaseInstance_H
#define OAIDatabaseInstance_H

#include <QJsonObject>

#include "OAIDatabaseInstance_failoverReplica.h"
#include "OAIDiskEncryptionConfiguration.h"
#include "OAIDiskEncryptionStatus.h"
#include "OAIIpMapping.h"
#include "OAIOnPremisesConfiguration.h"
#include "OAIReplicaConfiguration.h"
#include "OAISettings.h"
#include "OAISqlOutOfDiskReport.h"
#include "OAISqlScheduledMaintenance.h"
#include "OAISslCert.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDiskEncryptionConfiguration;
class OAIDiskEncryptionStatus;
class OAIDatabaseInstance_failoverReplica;
class OAIIpMapping;
class OAIOnPremisesConfiguration;
class OAISqlOutOfDiskReport;
class OAIReplicaConfiguration;
class OAISqlScheduledMaintenance;
class OAISslCert;
class OAISettings;

class OAIDatabaseInstance : public OAIObject {
public:
    OAIDatabaseInstance();
    OAIDatabaseInstance(QString json);
    ~OAIDatabaseInstance() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAvailableMaintenanceVersions() const;
    void setAvailableMaintenanceVersions(const QList<QString> &available_maintenance_versions);
    bool is_available_maintenance_versions_Set() const;
    bool is_available_maintenance_versions_Valid() const;

    QString getBackendType() const;
    void setBackendType(const QString &backend_type);
    bool is_backend_type_Set() const;
    bool is_backend_type_Valid() const;

    QString getConnectionName() const;
    void setConnectionName(const QString &connection_name);
    bool is_connection_name_Set() const;
    bool is_connection_name_Valid() const;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    Q_DECL_DEPRECATED QString getCurrentDiskSize() const;
    Q_DECL_DEPRECATED void setCurrentDiskSize(const QString &current_disk_size);
    Q_DECL_DEPRECATED bool is_current_disk_size_Set() const;
    Q_DECL_DEPRECATED bool is_current_disk_size_Valid() const;

    QString getDatabaseInstalledVersion() const;
    void setDatabaseInstalledVersion(const QString &database_installed_version);
    bool is_database_installed_version_Set() const;
    bool is_database_installed_version_Valid() const;

    QString getDatabaseVersion() const;
    void setDatabaseVersion(const QString &database_version);
    bool is_database_version_Set() const;
    bool is_database_version_Valid() const;

    OAIDiskEncryptionConfiguration getDiskEncryptionConfiguration() const;
    void setDiskEncryptionConfiguration(const OAIDiskEncryptionConfiguration &disk_encryption_configuration);
    bool is_disk_encryption_configuration_Set() const;
    bool is_disk_encryption_configuration_Valid() const;

    OAIDiskEncryptionStatus getDiskEncryptionStatus() const;
    void setDiskEncryptionStatus(const OAIDiskEncryptionStatus &disk_encryption_status);
    bool is_disk_encryption_status_Set() const;
    bool is_disk_encryption_status_Valid() const;

    QString getDnsName() const;
    void setDnsName(const QString &dns_name);
    bool is_dns_name_Set() const;
    bool is_dns_name_Valid() const;

    QString getEtag() const;
    void setEtag(const QString &etag);
    bool is_etag_Set() const;
    bool is_etag_Valid() const;

    OAIDatabaseInstance_failoverReplica getFailoverReplica() const;
    void setFailoverReplica(const OAIDatabaseInstance_failoverReplica &failover_replica);
    bool is_failover_replica_Set() const;
    bool is_failover_replica_Valid() const;

    QString getGceZone() const;
    void setGceZone(const QString &gce_zone);
    bool is_gce_zone_Set() const;
    bool is_gce_zone_Valid() const;

    QString getInstanceType() const;
    void setInstanceType(const QString &instance_type);
    bool is_instance_type_Set() const;
    bool is_instance_type_Valid() const;

    QList<OAIIpMapping> getIpAddresses() const;
    void setIpAddresses(const QList<OAIIpMapping> &ip_addresses);
    bool is_ip_addresses_Set() const;
    bool is_ip_addresses_Valid() const;

    Q_DECL_DEPRECATED QString getIpv6Address() const;
    Q_DECL_DEPRECATED void setIpv6Address(const QString &ipv6_address);
    Q_DECL_DEPRECATED bool is_ipv6_address_Set() const;
    Q_DECL_DEPRECATED bool is_ipv6_address_Valid() const;

    QString getKind() const;
    void setKind(const QString &kind);
    bool is_kind_Set() const;
    bool is_kind_Valid() const;

    QString getMaintenanceVersion() const;
    void setMaintenanceVersion(const QString &maintenance_version);
    bool is_maintenance_version_Set() const;
    bool is_maintenance_version_Valid() const;

    QString getMasterInstanceName() const;
    void setMasterInstanceName(const QString &master_instance_name);
    bool is_master_instance_name_Set() const;
    bool is_master_instance_name_Valid() const;

    Q_DECL_DEPRECATED QString getMaxDiskSize() const;
    Q_DECL_DEPRECATED void setMaxDiskSize(const QString &max_disk_size);
    Q_DECL_DEPRECATED bool is_max_disk_size_Set() const;
    Q_DECL_DEPRECATED bool is_max_disk_size_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAIOnPremisesConfiguration getOnPremisesConfiguration() const;
    void setOnPremisesConfiguration(const OAIOnPremisesConfiguration &on_premises_configuration);
    bool is_on_premises_configuration_Set() const;
    bool is_on_premises_configuration_Valid() const;

    OAISqlOutOfDiskReport getOutOfDiskReport() const;
    void setOutOfDiskReport(const OAISqlOutOfDiskReport &out_of_disk_report);
    bool is_out_of_disk_report_Set() const;
    bool is_out_of_disk_report_Valid() const;

    Q_DECL_DEPRECATED QString getPrimaryDnsName() const;
    Q_DECL_DEPRECATED void setPrimaryDnsName(const QString &primary_dns_name);
    Q_DECL_DEPRECATED bool is_primary_dns_name_Set() const;
    Q_DECL_DEPRECATED bool is_primary_dns_name_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    QString getPscServiceAttachmentLink() const;
    void setPscServiceAttachmentLink(const QString &psc_service_attachment_link);
    bool is_psc_service_attachment_link_Set() const;
    bool is_psc_service_attachment_link_Valid() const;

    QString getRegion() const;
    void setRegion(const QString &region);
    bool is_region_Set() const;
    bool is_region_Valid() const;

    OAIReplicaConfiguration getReplicaConfiguration() const;
    void setReplicaConfiguration(const OAIReplicaConfiguration &replica_configuration);
    bool is_replica_configuration_Set() const;
    bool is_replica_configuration_Valid() const;

    QList<QString> getReplicaNames() const;
    void setReplicaNames(const QList<QString> &replica_names);
    bool is_replica_names_Set() const;
    bool is_replica_names_Valid() const;

    QString getRootPassword() const;
    void setRootPassword(const QString &root_password);
    bool is_root_password_Set() const;
    bool is_root_password_Valid() const;

    bool isSatisfiesPzs() const;
    void setSatisfiesPzs(const bool &satisfies_pzs);
    bool is_satisfies_pzs_Set() const;
    bool is_satisfies_pzs_Valid() const;

    OAISqlScheduledMaintenance getScheduledMaintenance() const;
    void setScheduledMaintenance(const OAISqlScheduledMaintenance &scheduled_maintenance);
    bool is_scheduled_maintenance_Set() const;
    bool is_scheduled_maintenance_Valid() const;

    QString getSecondaryGceZone() const;
    void setSecondaryGceZone(const QString &secondary_gce_zone);
    bool is_secondary_gce_zone_Set() const;
    bool is_secondary_gce_zone_Valid() const;

    QString getSelfLink() const;
    void setSelfLink(const QString &self_link);
    bool is_self_link_Set() const;
    bool is_self_link_Valid() const;

    OAISslCert getServerCaCert() const;
    void setServerCaCert(const OAISslCert &server_ca_cert);
    bool is_server_ca_cert_Set() const;
    bool is_server_ca_cert_Valid() const;

    QString getServiceAccountEmailAddress() const;
    void setServiceAccountEmailAddress(const QString &service_account_email_address);
    bool is_service_account_email_address_Set() const;
    bool is_service_account_email_address_Valid() const;

    OAISettings getSettings() const;
    void setSettings(const OAISettings &settings);
    bool is_settings_Set() const;
    bool is_settings_Valid() const;

    QString getSqlNetworkArchitecture() const;
    void setSqlNetworkArchitecture(const QString &sql_network_architecture);
    bool is_sql_network_architecture_Set() const;
    bool is_sql_network_architecture_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QList<QString> getSuspensionReason() const;
    void setSuspensionReason(const QList<QString> &suspension_reason);
    bool is_suspension_reason_Set() const;
    bool is_suspension_reason_Valid() const;

    QString getWriteEndpoint() const;
    void setWriteEndpoint(const QString &write_endpoint);
    bool is_write_endpoint_Set() const;
    bool is_write_endpoint_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_available_maintenance_versions;
    bool m_available_maintenance_versions_isSet;
    bool m_available_maintenance_versions_isValid;

    QString m_backend_type;
    bool m_backend_type_isSet;
    bool m_backend_type_isValid;

    QString m_connection_name;
    bool m_connection_name_isSet;
    bool m_connection_name_isValid;

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_current_disk_size;
    bool m_current_disk_size_isSet;
    bool m_current_disk_size_isValid;

    QString m_database_installed_version;
    bool m_database_installed_version_isSet;
    bool m_database_installed_version_isValid;

    QString m_database_version;
    bool m_database_version_isSet;
    bool m_database_version_isValid;

    OAIDiskEncryptionConfiguration m_disk_encryption_configuration;
    bool m_disk_encryption_configuration_isSet;
    bool m_disk_encryption_configuration_isValid;

    OAIDiskEncryptionStatus m_disk_encryption_status;
    bool m_disk_encryption_status_isSet;
    bool m_disk_encryption_status_isValid;

    QString m_dns_name;
    bool m_dns_name_isSet;
    bool m_dns_name_isValid;

    QString m_etag;
    bool m_etag_isSet;
    bool m_etag_isValid;

    OAIDatabaseInstance_failoverReplica m_failover_replica;
    bool m_failover_replica_isSet;
    bool m_failover_replica_isValid;

    QString m_gce_zone;
    bool m_gce_zone_isSet;
    bool m_gce_zone_isValid;

    QString m_instance_type;
    bool m_instance_type_isSet;
    bool m_instance_type_isValid;

    QList<OAIIpMapping> m_ip_addresses;
    bool m_ip_addresses_isSet;
    bool m_ip_addresses_isValid;

    QString m_ipv6_address;
    bool m_ipv6_address_isSet;
    bool m_ipv6_address_isValid;

    QString m_kind;
    bool m_kind_isSet;
    bool m_kind_isValid;

    QString m_maintenance_version;
    bool m_maintenance_version_isSet;
    bool m_maintenance_version_isValid;

    QString m_master_instance_name;
    bool m_master_instance_name_isSet;
    bool m_master_instance_name_isValid;

    QString m_max_disk_size;
    bool m_max_disk_size_isSet;
    bool m_max_disk_size_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAIOnPremisesConfiguration m_on_premises_configuration;
    bool m_on_premises_configuration_isSet;
    bool m_on_premises_configuration_isValid;

    OAISqlOutOfDiskReport m_out_of_disk_report;
    bool m_out_of_disk_report_isSet;
    bool m_out_of_disk_report_isValid;

    QString m_primary_dns_name;
    bool m_primary_dns_name_isSet;
    bool m_primary_dns_name_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    QString m_psc_service_attachment_link;
    bool m_psc_service_attachment_link_isSet;
    bool m_psc_service_attachment_link_isValid;

    QString m_region;
    bool m_region_isSet;
    bool m_region_isValid;

    OAIReplicaConfiguration m_replica_configuration;
    bool m_replica_configuration_isSet;
    bool m_replica_configuration_isValid;

    QList<QString> m_replica_names;
    bool m_replica_names_isSet;
    bool m_replica_names_isValid;

    QString m_root_password;
    bool m_root_password_isSet;
    bool m_root_password_isValid;

    bool m_satisfies_pzs;
    bool m_satisfies_pzs_isSet;
    bool m_satisfies_pzs_isValid;

    OAISqlScheduledMaintenance m_scheduled_maintenance;
    bool m_scheduled_maintenance_isSet;
    bool m_scheduled_maintenance_isValid;

    QString m_secondary_gce_zone;
    bool m_secondary_gce_zone_isSet;
    bool m_secondary_gce_zone_isValid;

    QString m_self_link;
    bool m_self_link_isSet;
    bool m_self_link_isValid;

    OAISslCert m_server_ca_cert;
    bool m_server_ca_cert_isSet;
    bool m_server_ca_cert_isValid;

    QString m_service_account_email_address;
    bool m_service_account_email_address_isSet;
    bool m_service_account_email_address_isValid;

    OAISettings m_settings;
    bool m_settings_isSet;
    bool m_settings_isValid;

    QString m_sql_network_architecture;
    bool m_sql_network_architecture_isSet;
    bool m_sql_network_architecture_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QList<QString> m_suspension_reason;
    bool m_suspension_reason_isSet;
    bool m_suspension_reason_isValid;

    QString m_write_endpoint;
    bool m_write_endpoint_isSet;
    bool m_write_endpoint_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDatabaseInstance)

#endif // OAIDatabaseInstance_H
