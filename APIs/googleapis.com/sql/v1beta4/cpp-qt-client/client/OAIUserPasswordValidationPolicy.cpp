/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPasswordValidationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPasswordValidationPolicy::OAIUserPasswordValidationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPasswordValidationPolicy::OAIUserPasswordValidationPolicy() {
    this->initializeModel();
}

OAIUserPasswordValidationPolicy::~OAIUserPasswordValidationPolicy() {}

void OAIUserPasswordValidationPolicy::initializeModel() {

    m_allowed_failed_attempts_isSet = false;
    m_allowed_failed_attempts_isValid = false;

    m_enable_failed_attempts_check_isSet = false;
    m_enable_failed_attempts_check_isValid = false;

    m_enable_password_verification_isSet = false;
    m_enable_password_verification_isValid = false;

    m_password_expiration_duration_isSet = false;
    m_password_expiration_duration_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIUserPasswordValidationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPasswordValidationPolicy::fromJsonObject(QJsonObject json) {

    m_allowed_failed_attempts_isValid = ::OpenAPI::fromJsonValue(m_allowed_failed_attempts, json[QString("allowedFailedAttempts")]);
    m_allowed_failed_attempts_isSet = !json[QString("allowedFailedAttempts")].isNull() && m_allowed_failed_attempts_isValid;

    m_enable_failed_attempts_check_isValid = ::OpenAPI::fromJsonValue(m_enable_failed_attempts_check, json[QString("enableFailedAttemptsCheck")]);
    m_enable_failed_attempts_check_isSet = !json[QString("enableFailedAttemptsCheck")].isNull() && m_enable_failed_attempts_check_isValid;

    m_enable_password_verification_isValid = ::OpenAPI::fromJsonValue(m_enable_password_verification, json[QString("enablePasswordVerification")]);
    m_enable_password_verification_isSet = !json[QString("enablePasswordVerification")].isNull() && m_enable_password_verification_isValid;

    m_password_expiration_duration_isValid = ::OpenAPI::fromJsonValue(m_password_expiration_duration, json[QString("passwordExpirationDuration")]);
    m_password_expiration_duration_isSet = !json[QString("passwordExpirationDuration")].isNull() && m_password_expiration_duration_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIUserPasswordValidationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPasswordValidationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_failed_attempts_isSet) {
        obj.insert(QString("allowedFailedAttempts"), ::OpenAPI::toJsonValue(m_allowed_failed_attempts));
    }
    if (m_enable_failed_attempts_check_isSet) {
        obj.insert(QString("enableFailedAttemptsCheck"), ::OpenAPI::toJsonValue(m_enable_failed_attempts_check));
    }
    if (m_enable_password_verification_isSet) {
        obj.insert(QString("enablePasswordVerification"), ::OpenAPI::toJsonValue(m_enable_password_verification));
    }
    if (m_password_expiration_duration_isSet) {
        obj.insert(QString("passwordExpirationDuration"), ::OpenAPI::toJsonValue(m_password_expiration_duration));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

qint32 OAIUserPasswordValidationPolicy::getAllowedFailedAttempts() const {
    return m_allowed_failed_attempts;
}
void OAIUserPasswordValidationPolicy::setAllowedFailedAttempts(const qint32 &allowed_failed_attempts) {
    m_allowed_failed_attempts = allowed_failed_attempts;
    m_allowed_failed_attempts_isSet = true;
}

bool OAIUserPasswordValidationPolicy::is_allowed_failed_attempts_Set() const{
    return m_allowed_failed_attempts_isSet;
}

bool OAIUserPasswordValidationPolicy::is_allowed_failed_attempts_Valid() const{
    return m_allowed_failed_attempts_isValid;
}

bool OAIUserPasswordValidationPolicy::isEnableFailedAttemptsCheck() const {
    return m_enable_failed_attempts_check;
}
void OAIUserPasswordValidationPolicy::setEnableFailedAttemptsCheck(const bool &enable_failed_attempts_check) {
    m_enable_failed_attempts_check = enable_failed_attempts_check;
    m_enable_failed_attempts_check_isSet = true;
}

bool OAIUserPasswordValidationPolicy::is_enable_failed_attempts_check_Set() const{
    return m_enable_failed_attempts_check_isSet;
}

bool OAIUserPasswordValidationPolicy::is_enable_failed_attempts_check_Valid() const{
    return m_enable_failed_attempts_check_isValid;
}

bool OAIUserPasswordValidationPolicy::isEnablePasswordVerification() const {
    return m_enable_password_verification;
}
void OAIUserPasswordValidationPolicy::setEnablePasswordVerification(const bool &enable_password_verification) {
    m_enable_password_verification = enable_password_verification;
    m_enable_password_verification_isSet = true;
}

bool OAIUserPasswordValidationPolicy::is_enable_password_verification_Set() const{
    return m_enable_password_verification_isSet;
}

bool OAIUserPasswordValidationPolicy::is_enable_password_verification_Valid() const{
    return m_enable_password_verification_isValid;
}

QString OAIUserPasswordValidationPolicy::getPasswordExpirationDuration() const {
    return m_password_expiration_duration;
}
void OAIUserPasswordValidationPolicy::setPasswordExpirationDuration(const QString &password_expiration_duration) {
    m_password_expiration_duration = password_expiration_duration;
    m_password_expiration_duration_isSet = true;
}

bool OAIUserPasswordValidationPolicy::is_password_expiration_duration_Set() const{
    return m_password_expiration_duration_isSet;
}

bool OAIUserPasswordValidationPolicy::is_password_expiration_duration_Valid() const{
    return m_password_expiration_duration_isValid;
}

OAIPasswordStatus OAIUserPasswordValidationPolicy::getStatus() const {
    return m_status;
}
void OAIUserPasswordValidationPolicy::setStatus(const OAIPasswordStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserPasswordValidationPolicy::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserPasswordValidationPolicy::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIUserPasswordValidationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_failed_attempts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_failed_attempts_check_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_password_verification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_expiration_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPasswordValidationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
