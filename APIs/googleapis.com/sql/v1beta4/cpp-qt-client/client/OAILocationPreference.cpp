/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationPreference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationPreference::OAILocationPreference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationPreference::OAILocationPreference() {
    this->initializeModel();
}

OAILocationPreference::~OAILocationPreference() {}

void OAILocationPreference::initializeModel() {

    m_follow_gae_application_isSet = false;
    m_follow_gae_application_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_secondary_zone_isSet = false;
    m_secondary_zone_isValid = false;

    m_zone_isSet = false;
    m_zone_isValid = false;
}

void OAILocationPreference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocationPreference::fromJsonObject(QJsonObject json) {

    m_follow_gae_application_isValid = ::OpenAPI::fromJsonValue(m_follow_gae_application, json[QString("followGaeApplication")]);
    m_follow_gae_application_isSet = !json[QString("followGaeApplication")].isNull() && m_follow_gae_application_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_secondary_zone_isValid = ::OpenAPI::fromJsonValue(m_secondary_zone, json[QString("secondaryZone")]);
    m_secondary_zone_isSet = !json[QString("secondaryZone")].isNull() && m_secondary_zone_isValid;

    m_zone_isValid = ::OpenAPI::fromJsonValue(m_zone, json[QString("zone")]);
    m_zone_isSet = !json[QString("zone")].isNull() && m_zone_isValid;
}

QString OAILocationPreference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocationPreference::asJsonObject() const {
    QJsonObject obj;
    if (m_follow_gae_application_isSet) {
        obj.insert(QString("followGaeApplication"), ::OpenAPI::toJsonValue(m_follow_gae_application));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_secondary_zone_isSet) {
        obj.insert(QString("secondaryZone"), ::OpenAPI::toJsonValue(m_secondary_zone));
    }
    if (m_zone_isSet) {
        obj.insert(QString("zone"), ::OpenAPI::toJsonValue(m_zone));
    }
    return obj;
}

QString OAILocationPreference::getFollowGaeApplication() const {
    return m_follow_gae_application;
}
void OAILocationPreference::setFollowGaeApplication(const QString &follow_gae_application) {
    m_follow_gae_application = follow_gae_application;
    m_follow_gae_application_isSet = true;
}

bool OAILocationPreference::is_follow_gae_application_Set() const{
    return m_follow_gae_application_isSet;
}

bool OAILocationPreference::is_follow_gae_application_Valid() const{
    return m_follow_gae_application_isValid;
}

QString OAILocationPreference::getKind() const {
    return m_kind;
}
void OAILocationPreference::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAILocationPreference::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAILocationPreference::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAILocationPreference::getSecondaryZone() const {
    return m_secondary_zone;
}
void OAILocationPreference::setSecondaryZone(const QString &secondary_zone) {
    m_secondary_zone = secondary_zone;
    m_secondary_zone_isSet = true;
}

bool OAILocationPreference::is_secondary_zone_Set() const{
    return m_secondary_zone_isSet;
}

bool OAILocationPreference::is_secondary_zone_Valid() const{
    return m_secondary_zone_isValid;
}

QString OAILocationPreference::getZone() const {
    return m_zone;
}
void OAILocationPreference::setZone(const QString &zone) {
    m_zone = zone;
    m_zone_isSet = true;
}

bool OAILocationPreference::is_zone_Set() const{
    return m_zone_isSet;
}

bool OAILocationPreference::is_zone_Valid() const{
    return m_zone_isValid;
}

bool OAILocationPreference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_follow_gae_application_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocationPreference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
