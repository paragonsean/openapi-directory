/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsightsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsightsConfig::OAIInsightsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsightsConfig::OAIInsightsConfig() {
    this->initializeModel();
}

OAIInsightsConfig::~OAIInsightsConfig() {}

void OAIInsightsConfig::initializeModel() {

    m_query_insights_enabled_isSet = false;
    m_query_insights_enabled_isValid = false;

    m_query_plans_per_minute_isSet = false;
    m_query_plans_per_minute_isValid = false;

    m_query_string_length_isSet = false;
    m_query_string_length_isValid = false;

    m_record_application_tags_isSet = false;
    m_record_application_tags_isValid = false;

    m_record_client_address_isSet = false;
    m_record_client_address_isValid = false;
}

void OAIInsightsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsightsConfig::fromJsonObject(QJsonObject json) {

    m_query_insights_enabled_isValid = ::OpenAPI::fromJsonValue(m_query_insights_enabled, json[QString("queryInsightsEnabled")]);
    m_query_insights_enabled_isSet = !json[QString("queryInsightsEnabled")].isNull() && m_query_insights_enabled_isValid;

    m_query_plans_per_minute_isValid = ::OpenAPI::fromJsonValue(m_query_plans_per_minute, json[QString("queryPlansPerMinute")]);
    m_query_plans_per_minute_isSet = !json[QString("queryPlansPerMinute")].isNull() && m_query_plans_per_minute_isValid;

    m_query_string_length_isValid = ::OpenAPI::fromJsonValue(m_query_string_length, json[QString("queryStringLength")]);
    m_query_string_length_isSet = !json[QString("queryStringLength")].isNull() && m_query_string_length_isValid;

    m_record_application_tags_isValid = ::OpenAPI::fromJsonValue(m_record_application_tags, json[QString("recordApplicationTags")]);
    m_record_application_tags_isSet = !json[QString("recordApplicationTags")].isNull() && m_record_application_tags_isValid;

    m_record_client_address_isValid = ::OpenAPI::fromJsonValue(m_record_client_address, json[QString("recordClientAddress")]);
    m_record_client_address_isSet = !json[QString("recordClientAddress")].isNull() && m_record_client_address_isValid;
}

QString OAIInsightsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsightsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_query_insights_enabled_isSet) {
        obj.insert(QString("queryInsightsEnabled"), ::OpenAPI::toJsonValue(m_query_insights_enabled));
    }
    if (m_query_plans_per_minute_isSet) {
        obj.insert(QString("queryPlansPerMinute"), ::OpenAPI::toJsonValue(m_query_plans_per_minute));
    }
    if (m_query_string_length_isSet) {
        obj.insert(QString("queryStringLength"), ::OpenAPI::toJsonValue(m_query_string_length));
    }
    if (m_record_application_tags_isSet) {
        obj.insert(QString("recordApplicationTags"), ::OpenAPI::toJsonValue(m_record_application_tags));
    }
    if (m_record_client_address_isSet) {
        obj.insert(QString("recordClientAddress"), ::OpenAPI::toJsonValue(m_record_client_address));
    }
    return obj;
}

bool OAIInsightsConfig::isQueryInsightsEnabled() const {
    return m_query_insights_enabled;
}
void OAIInsightsConfig::setQueryInsightsEnabled(const bool &query_insights_enabled) {
    m_query_insights_enabled = query_insights_enabled;
    m_query_insights_enabled_isSet = true;
}

bool OAIInsightsConfig::is_query_insights_enabled_Set() const{
    return m_query_insights_enabled_isSet;
}

bool OAIInsightsConfig::is_query_insights_enabled_Valid() const{
    return m_query_insights_enabled_isValid;
}

qint32 OAIInsightsConfig::getQueryPlansPerMinute() const {
    return m_query_plans_per_minute;
}
void OAIInsightsConfig::setQueryPlansPerMinute(const qint32 &query_plans_per_minute) {
    m_query_plans_per_minute = query_plans_per_minute;
    m_query_plans_per_minute_isSet = true;
}

bool OAIInsightsConfig::is_query_plans_per_minute_Set() const{
    return m_query_plans_per_minute_isSet;
}

bool OAIInsightsConfig::is_query_plans_per_minute_Valid() const{
    return m_query_plans_per_minute_isValid;
}

qint32 OAIInsightsConfig::getQueryStringLength() const {
    return m_query_string_length;
}
void OAIInsightsConfig::setQueryStringLength(const qint32 &query_string_length) {
    m_query_string_length = query_string_length;
    m_query_string_length_isSet = true;
}

bool OAIInsightsConfig::is_query_string_length_Set() const{
    return m_query_string_length_isSet;
}

bool OAIInsightsConfig::is_query_string_length_Valid() const{
    return m_query_string_length_isValid;
}

bool OAIInsightsConfig::isRecordApplicationTags() const {
    return m_record_application_tags;
}
void OAIInsightsConfig::setRecordApplicationTags(const bool &record_application_tags) {
    m_record_application_tags = record_application_tags;
    m_record_application_tags_isSet = true;
}

bool OAIInsightsConfig::is_record_application_tags_Set() const{
    return m_record_application_tags_isSet;
}

bool OAIInsightsConfig::is_record_application_tags_Valid() const{
    return m_record_application_tags_isValid;
}

bool OAIInsightsConfig::isRecordClientAddress() const {
    return m_record_client_address;
}
void OAIInsightsConfig::setRecordClientAddress(const bool &record_client_address) {
    m_record_client_address = record_client_address;
    m_record_client_address_isSet = true;
}

bool OAIInsightsConfig::is_record_client_address_Set() const{
    return m_record_client_address_isSet;
}

bool OAIInsightsConfig::is_record_client_address_Valid() const{
    return m_record_client_address_isValid;
}

bool OAIInsightsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_query_insights_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_plans_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_string_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_application_tags_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_client_address_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsightsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
