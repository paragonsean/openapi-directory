/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailoverContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailoverContext::OAIFailoverContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailoverContext::OAIFailoverContext() {
    this->initializeModel();
}

OAIFailoverContext::~OAIFailoverContext() {}

void OAIFailoverContext::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_settings_version_isSet = false;
    m_settings_version_isValid = false;
}

void OAIFailoverContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailoverContext::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_settings_version_isValid = ::OpenAPI::fromJsonValue(m_settings_version, json[QString("settingsVersion")]);
    m_settings_version_isSet = !json[QString("settingsVersion")].isNull() && m_settings_version_isValid;
}

QString OAIFailoverContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailoverContext::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_settings_version_isSet) {
        obj.insert(QString("settingsVersion"), ::OpenAPI::toJsonValue(m_settings_version));
    }
    return obj;
}

QString OAIFailoverContext::getKind() const {
    return m_kind;
}
void OAIFailoverContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFailoverContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFailoverContext::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIFailoverContext::getSettingsVersion() const {
    return m_settings_version;
}
void OAIFailoverContext::setSettingsVersion(const QString &settings_version) {
    m_settings_version = settings_version;
    m_settings_version_isSet = true;
}

bool OAIFailoverContext::is_settings_version_Set() const{
    return m_settings_version_isSet;
}

bool OAIFailoverContext::is_settings_version_Valid() const{
    return m_settings_version_isValid;
}

bool OAIFailoverContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailoverContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
