/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabaseInstance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabaseInstance::OAIDatabaseInstance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabaseInstance::OAIDatabaseInstance() {
    this->initializeModel();
}

OAIDatabaseInstance::~OAIDatabaseInstance() {}

void OAIDatabaseInstance::initializeModel() {

    m_available_maintenance_versions_isSet = false;
    m_available_maintenance_versions_isValid = false;

    m_backend_type_isSet = false;
    m_backend_type_isValid = false;

    m_connection_name_isSet = false;
    m_connection_name_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_current_disk_size_isSet = false;
    m_current_disk_size_isValid = false;

    m_database_installed_version_isSet = false;
    m_database_installed_version_isValid = false;

    m_database_version_isSet = false;
    m_database_version_isValid = false;

    m_disk_encryption_configuration_isSet = false;
    m_disk_encryption_configuration_isValid = false;

    m_disk_encryption_status_isSet = false;
    m_disk_encryption_status_isValid = false;

    m_dns_name_isSet = false;
    m_dns_name_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_failover_replica_isSet = false;
    m_failover_replica_isValid = false;

    m_gce_zone_isSet = false;
    m_gce_zone_isValid = false;

    m_instance_type_isSet = false;
    m_instance_type_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_ipv6_address_isSet = false;
    m_ipv6_address_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_maintenance_version_isSet = false;
    m_maintenance_version_isValid = false;

    m_master_instance_name_isSet = false;
    m_master_instance_name_isValid = false;

    m_max_disk_size_isSet = false;
    m_max_disk_size_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_on_premises_configuration_isSet = false;
    m_on_premises_configuration_isValid = false;

    m_out_of_disk_report_isSet = false;
    m_out_of_disk_report_isValid = false;

    m_primary_dns_name_isSet = false;
    m_primary_dns_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_psc_service_attachment_link_isSet = false;
    m_psc_service_attachment_link_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_replica_configuration_isSet = false;
    m_replica_configuration_isValid = false;

    m_replica_names_isSet = false;
    m_replica_names_isValid = false;

    m_root_password_isSet = false;
    m_root_password_isValid = false;

    m_satisfies_pzs_isSet = false;
    m_satisfies_pzs_isValid = false;

    m_scheduled_maintenance_isSet = false;
    m_scheduled_maintenance_isValid = false;

    m_secondary_gce_zone_isSet = false;
    m_secondary_gce_zone_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_server_ca_cert_isSet = false;
    m_server_ca_cert_isValid = false;

    m_service_account_email_address_isSet = false;
    m_service_account_email_address_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;

    m_sql_network_architecture_isSet = false;
    m_sql_network_architecture_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_suspension_reason_isSet = false;
    m_suspension_reason_isValid = false;

    m_write_endpoint_isSet = false;
    m_write_endpoint_isValid = false;
}

void OAIDatabaseInstance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabaseInstance::fromJsonObject(QJsonObject json) {

    m_available_maintenance_versions_isValid = ::OpenAPI::fromJsonValue(m_available_maintenance_versions, json[QString("availableMaintenanceVersions")]);
    m_available_maintenance_versions_isSet = !json[QString("availableMaintenanceVersions")].isNull() && m_available_maintenance_versions_isValid;

    m_backend_type_isValid = ::OpenAPI::fromJsonValue(m_backend_type, json[QString("backendType")]);
    m_backend_type_isSet = !json[QString("backendType")].isNull() && m_backend_type_isValid;

    m_connection_name_isValid = ::OpenAPI::fromJsonValue(m_connection_name, json[QString("connectionName")]);
    m_connection_name_isSet = !json[QString("connectionName")].isNull() && m_connection_name_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_current_disk_size_isValid = ::OpenAPI::fromJsonValue(m_current_disk_size, json[QString("currentDiskSize")]);
    m_current_disk_size_isSet = !json[QString("currentDiskSize")].isNull() && m_current_disk_size_isValid;

    m_database_installed_version_isValid = ::OpenAPI::fromJsonValue(m_database_installed_version, json[QString("databaseInstalledVersion")]);
    m_database_installed_version_isSet = !json[QString("databaseInstalledVersion")].isNull() && m_database_installed_version_isValid;

    m_database_version_isValid = ::OpenAPI::fromJsonValue(m_database_version, json[QString("databaseVersion")]);
    m_database_version_isSet = !json[QString("databaseVersion")].isNull() && m_database_version_isValid;

    m_disk_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_configuration, json[QString("diskEncryptionConfiguration")]);
    m_disk_encryption_configuration_isSet = !json[QString("diskEncryptionConfiguration")].isNull() && m_disk_encryption_configuration_isValid;

    m_disk_encryption_status_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_status, json[QString("diskEncryptionStatus")]);
    m_disk_encryption_status_isSet = !json[QString("diskEncryptionStatus")].isNull() && m_disk_encryption_status_isValid;

    m_dns_name_isValid = ::OpenAPI::fromJsonValue(m_dns_name, json[QString("dnsName")]);
    m_dns_name_isSet = !json[QString("dnsName")].isNull() && m_dns_name_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_failover_replica_isValid = ::OpenAPI::fromJsonValue(m_failover_replica, json[QString("failoverReplica")]);
    m_failover_replica_isSet = !json[QString("failoverReplica")].isNull() && m_failover_replica_isValid;

    m_gce_zone_isValid = ::OpenAPI::fromJsonValue(m_gce_zone, json[QString("gceZone")]);
    m_gce_zone_isSet = !json[QString("gceZone")].isNull() && m_gce_zone_isValid;

    m_instance_type_isValid = ::OpenAPI::fromJsonValue(m_instance_type, json[QString("instanceType")]);
    m_instance_type_isSet = !json[QString("instanceType")].isNull() && m_instance_type_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_ipv6_address_isValid = ::OpenAPI::fromJsonValue(m_ipv6_address, json[QString("ipv6Address")]);
    m_ipv6_address_isSet = !json[QString("ipv6Address")].isNull() && m_ipv6_address_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_maintenance_version_isValid = ::OpenAPI::fromJsonValue(m_maintenance_version, json[QString("maintenanceVersion")]);
    m_maintenance_version_isSet = !json[QString("maintenanceVersion")].isNull() && m_maintenance_version_isValid;

    m_master_instance_name_isValid = ::OpenAPI::fromJsonValue(m_master_instance_name, json[QString("masterInstanceName")]);
    m_master_instance_name_isSet = !json[QString("masterInstanceName")].isNull() && m_master_instance_name_isValid;

    m_max_disk_size_isValid = ::OpenAPI::fromJsonValue(m_max_disk_size, json[QString("maxDiskSize")]);
    m_max_disk_size_isSet = !json[QString("maxDiskSize")].isNull() && m_max_disk_size_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_on_premises_configuration_isValid = ::OpenAPI::fromJsonValue(m_on_premises_configuration, json[QString("onPremisesConfiguration")]);
    m_on_premises_configuration_isSet = !json[QString("onPremisesConfiguration")].isNull() && m_on_premises_configuration_isValid;

    m_out_of_disk_report_isValid = ::OpenAPI::fromJsonValue(m_out_of_disk_report, json[QString("outOfDiskReport")]);
    m_out_of_disk_report_isSet = !json[QString("outOfDiskReport")].isNull() && m_out_of_disk_report_isValid;

    m_primary_dns_name_isValid = ::OpenAPI::fromJsonValue(m_primary_dns_name, json[QString("primaryDnsName")]);
    m_primary_dns_name_isSet = !json[QString("primaryDnsName")].isNull() && m_primary_dns_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_psc_service_attachment_link_isValid = ::OpenAPI::fromJsonValue(m_psc_service_attachment_link, json[QString("pscServiceAttachmentLink")]);
    m_psc_service_attachment_link_isSet = !json[QString("pscServiceAttachmentLink")].isNull() && m_psc_service_attachment_link_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_replica_configuration_isValid = ::OpenAPI::fromJsonValue(m_replica_configuration, json[QString("replicaConfiguration")]);
    m_replica_configuration_isSet = !json[QString("replicaConfiguration")].isNull() && m_replica_configuration_isValid;

    m_replica_names_isValid = ::OpenAPI::fromJsonValue(m_replica_names, json[QString("replicaNames")]);
    m_replica_names_isSet = !json[QString("replicaNames")].isNull() && m_replica_names_isValid;

    m_root_password_isValid = ::OpenAPI::fromJsonValue(m_root_password, json[QString("rootPassword")]);
    m_root_password_isSet = !json[QString("rootPassword")].isNull() && m_root_password_isValid;

    m_satisfies_pzs_isValid = ::OpenAPI::fromJsonValue(m_satisfies_pzs, json[QString("satisfiesPzs")]);
    m_satisfies_pzs_isSet = !json[QString("satisfiesPzs")].isNull() && m_satisfies_pzs_isValid;

    m_scheduled_maintenance_isValid = ::OpenAPI::fromJsonValue(m_scheduled_maintenance, json[QString("scheduledMaintenance")]);
    m_scheduled_maintenance_isSet = !json[QString("scheduledMaintenance")].isNull() && m_scheduled_maintenance_isValid;

    m_secondary_gce_zone_isValid = ::OpenAPI::fromJsonValue(m_secondary_gce_zone, json[QString("secondaryGceZone")]);
    m_secondary_gce_zone_isSet = !json[QString("secondaryGceZone")].isNull() && m_secondary_gce_zone_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_server_ca_cert_isValid = ::OpenAPI::fromJsonValue(m_server_ca_cert, json[QString("serverCaCert")]);
    m_server_ca_cert_isSet = !json[QString("serverCaCert")].isNull() && m_server_ca_cert_isValid;

    m_service_account_email_address_isValid = ::OpenAPI::fromJsonValue(m_service_account_email_address, json[QString("serviceAccountEmailAddress")]);
    m_service_account_email_address_isSet = !json[QString("serviceAccountEmailAddress")].isNull() && m_service_account_email_address_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;

    m_sql_network_architecture_isValid = ::OpenAPI::fromJsonValue(m_sql_network_architecture, json[QString("sqlNetworkArchitecture")]);
    m_sql_network_architecture_isSet = !json[QString("sqlNetworkArchitecture")].isNull() && m_sql_network_architecture_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_suspension_reason_isValid = ::OpenAPI::fromJsonValue(m_suspension_reason, json[QString("suspensionReason")]);
    m_suspension_reason_isSet = !json[QString("suspensionReason")].isNull() && m_suspension_reason_isValid;

    m_write_endpoint_isValid = ::OpenAPI::fromJsonValue(m_write_endpoint, json[QString("writeEndpoint")]);
    m_write_endpoint_isSet = !json[QString("writeEndpoint")].isNull() && m_write_endpoint_isValid;
}

QString OAIDatabaseInstance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabaseInstance::asJsonObject() const {
    QJsonObject obj;
    if (m_available_maintenance_versions.size() > 0) {
        obj.insert(QString("availableMaintenanceVersions"), ::OpenAPI::toJsonValue(m_available_maintenance_versions));
    }
    if (m_backend_type_isSet) {
        obj.insert(QString("backendType"), ::OpenAPI::toJsonValue(m_backend_type));
    }
    if (m_connection_name_isSet) {
        obj.insert(QString("connectionName"), ::OpenAPI::toJsonValue(m_connection_name));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_current_disk_size_isSet) {
        obj.insert(QString("currentDiskSize"), ::OpenAPI::toJsonValue(m_current_disk_size));
    }
    if (m_database_installed_version_isSet) {
        obj.insert(QString("databaseInstalledVersion"), ::OpenAPI::toJsonValue(m_database_installed_version));
    }
    if (m_database_version_isSet) {
        obj.insert(QString("databaseVersion"), ::OpenAPI::toJsonValue(m_database_version));
    }
    if (m_disk_encryption_configuration.isSet()) {
        obj.insert(QString("diskEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_disk_encryption_configuration));
    }
    if (m_disk_encryption_status.isSet()) {
        obj.insert(QString("diskEncryptionStatus"), ::OpenAPI::toJsonValue(m_disk_encryption_status));
    }
    if (m_dns_name_isSet) {
        obj.insert(QString("dnsName"), ::OpenAPI::toJsonValue(m_dns_name));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_failover_replica.isSet()) {
        obj.insert(QString("failoverReplica"), ::OpenAPI::toJsonValue(m_failover_replica));
    }
    if (m_gce_zone_isSet) {
        obj.insert(QString("gceZone"), ::OpenAPI::toJsonValue(m_gce_zone));
    }
    if (m_instance_type_isSet) {
        obj.insert(QString("instanceType"), ::OpenAPI::toJsonValue(m_instance_type));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_ipv6_address_isSet) {
        obj.insert(QString("ipv6Address"), ::OpenAPI::toJsonValue(m_ipv6_address));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_maintenance_version_isSet) {
        obj.insert(QString("maintenanceVersion"), ::OpenAPI::toJsonValue(m_maintenance_version));
    }
    if (m_master_instance_name_isSet) {
        obj.insert(QString("masterInstanceName"), ::OpenAPI::toJsonValue(m_master_instance_name));
    }
    if (m_max_disk_size_isSet) {
        obj.insert(QString("maxDiskSize"), ::OpenAPI::toJsonValue(m_max_disk_size));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_on_premises_configuration.isSet()) {
        obj.insert(QString("onPremisesConfiguration"), ::OpenAPI::toJsonValue(m_on_premises_configuration));
    }
    if (m_out_of_disk_report.isSet()) {
        obj.insert(QString("outOfDiskReport"), ::OpenAPI::toJsonValue(m_out_of_disk_report));
    }
    if (m_primary_dns_name_isSet) {
        obj.insert(QString("primaryDnsName"), ::OpenAPI::toJsonValue(m_primary_dns_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_psc_service_attachment_link_isSet) {
        obj.insert(QString("pscServiceAttachmentLink"), ::OpenAPI::toJsonValue(m_psc_service_attachment_link));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_replica_configuration.isSet()) {
        obj.insert(QString("replicaConfiguration"), ::OpenAPI::toJsonValue(m_replica_configuration));
    }
    if (m_replica_names.size() > 0) {
        obj.insert(QString("replicaNames"), ::OpenAPI::toJsonValue(m_replica_names));
    }
    if (m_root_password_isSet) {
        obj.insert(QString("rootPassword"), ::OpenAPI::toJsonValue(m_root_password));
    }
    if (m_satisfies_pzs_isSet) {
        obj.insert(QString("satisfiesPzs"), ::OpenAPI::toJsonValue(m_satisfies_pzs));
    }
    if (m_scheduled_maintenance.isSet()) {
        obj.insert(QString("scheduledMaintenance"), ::OpenAPI::toJsonValue(m_scheduled_maintenance));
    }
    if (m_secondary_gce_zone_isSet) {
        obj.insert(QString("secondaryGceZone"), ::OpenAPI::toJsonValue(m_secondary_gce_zone));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_server_ca_cert.isSet()) {
        obj.insert(QString("serverCaCert"), ::OpenAPI::toJsonValue(m_server_ca_cert));
    }
    if (m_service_account_email_address_isSet) {
        obj.insert(QString("serviceAccountEmailAddress"), ::OpenAPI::toJsonValue(m_service_account_email_address));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    if (m_sql_network_architecture_isSet) {
        obj.insert(QString("sqlNetworkArchitecture"), ::OpenAPI::toJsonValue(m_sql_network_architecture));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_suspension_reason.size() > 0) {
        obj.insert(QString("suspensionReason"), ::OpenAPI::toJsonValue(m_suspension_reason));
    }
    if (m_write_endpoint_isSet) {
        obj.insert(QString("writeEndpoint"), ::OpenAPI::toJsonValue(m_write_endpoint));
    }
    return obj;
}

QList<QString> OAIDatabaseInstance::getAvailableMaintenanceVersions() const {
    return m_available_maintenance_versions;
}
void OAIDatabaseInstance::setAvailableMaintenanceVersions(const QList<QString> &available_maintenance_versions) {
    m_available_maintenance_versions = available_maintenance_versions;
    m_available_maintenance_versions_isSet = true;
}

bool OAIDatabaseInstance::is_available_maintenance_versions_Set() const{
    return m_available_maintenance_versions_isSet;
}

bool OAIDatabaseInstance::is_available_maintenance_versions_Valid() const{
    return m_available_maintenance_versions_isValid;
}

QString OAIDatabaseInstance::getBackendType() const {
    return m_backend_type;
}
void OAIDatabaseInstance::setBackendType(const QString &backend_type) {
    m_backend_type = backend_type;
    m_backend_type_isSet = true;
}

bool OAIDatabaseInstance::is_backend_type_Set() const{
    return m_backend_type_isSet;
}

bool OAIDatabaseInstance::is_backend_type_Valid() const{
    return m_backend_type_isValid;
}

QString OAIDatabaseInstance::getConnectionName() const {
    return m_connection_name;
}
void OAIDatabaseInstance::setConnectionName(const QString &connection_name) {
    m_connection_name = connection_name;
    m_connection_name_isSet = true;
}

bool OAIDatabaseInstance::is_connection_name_Set() const{
    return m_connection_name_isSet;
}

bool OAIDatabaseInstance::is_connection_name_Valid() const{
    return m_connection_name_isValid;
}

QString OAIDatabaseInstance::getCreateTime() const {
    return m_create_time;
}
void OAIDatabaseInstance::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIDatabaseInstance::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIDatabaseInstance::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIDatabaseInstance::getCurrentDiskSize() const {
    return m_current_disk_size;
}
void OAIDatabaseInstance::setCurrentDiskSize(const QString &current_disk_size) {
    m_current_disk_size = current_disk_size;
    m_current_disk_size_isSet = true;
}

bool OAIDatabaseInstance::is_current_disk_size_Set() const{
    return m_current_disk_size_isSet;
}

bool OAIDatabaseInstance::is_current_disk_size_Valid() const{
    return m_current_disk_size_isValid;
}

QString OAIDatabaseInstance::getDatabaseInstalledVersion() const {
    return m_database_installed_version;
}
void OAIDatabaseInstance::setDatabaseInstalledVersion(const QString &database_installed_version) {
    m_database_installed_version = database_installed_version;
    m_database_installed_version_isSet = true;
}

bool OAIDatabaseInstance::is_database_installed_version_Set() const{
    return m_database_installed_version_isSet;
}

bool OAIDatabaseInstance::is_database_installed_version_Valid() const{
    return m_database_installed_version_isValid;
}

QString OAIDatabaseInstance::getDatabaseVersion() const {
    return m_database_version;
}
void OAIDatabaseInstance::setDatabaseVersion(const QString &database_version) {
    m_database_version = database_version;
    m_database_version_isSet = true;
}

bool OAIDatabaseInstance::is_database_version_Set() const{
    return m_database_version_isSet;
}

bool OAIDatabaseInstance::is_database_version_Valid() const{
    return m_database_version_isValid;
}

OAIDiskEncryptionConfiguration OAIDatabaseInstance::getDiskEncryptionConfiguration() const {
    return m_disk_encryption_configuration;
}
void OAIDatabaseInstance::setDiskEncryptionConfiguration(const OAIDiskEncryptionConfiguration &disk_encryption_configuration) {
    m_disk_encryption_configuration = disk_encryption_configuration;
    m_disk_encryption_configuration_isSet = true;
}

bool OAIDatabaseInstance::is_disk_encryption_configuration_Set() const{
    return m_disk_encryption_configuration_isSet;
}

bool OAIDatabaseInstance::is_disk_encryption_configuration_Valid() const{
    return m_disk_encryption_configuration_isValid;
}

OAIDiskEncryptionStatus OAIDatabaseInstance::getDiskEncryptionStatus() const {
    return m_disk_encryption_status;
}
void OAIDatabaseInstance::setDiskEncryptionStatus(const OAIDiskEncryptionStatus &disk_encryption_status) {
    m_disk_encryption_status = disk_encryption_status;
    m_disk_encryption_status_isSet = true;
}

bool OAIDatabaseInstance::is_disk_encryption_status_Set() const{
    return m_disk_encryption_status_isSet;
}

bool OAIDatabaseInstance::is_disk_encryption_status_Valid() const{
    return m_disk_encryption_status_isValid;
}

QString OAIDatabaseInstance::getDnsName() const {
    return m_dns_name;
}
void OAIDatabaseInstance::setDnsName(const QString &dns_name) {
    m_dns_name = dns_name;
    m_dns_name_isSet = true;
}

bool OAIDatabaseInstance::is_dns_name_Set() const{
    return m_dns_name_isSet;
}

bool OAIDatabaseInstance::is_dns_name_Valid() const{
    return m_dns_name_isValid;
}

QString OAIDatabaseInstance::getEtag() const {
    return m_etag;
}
void OAIDatabaseInstance::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDatabaseInstance::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDatabaseInstance::is_etag_Valid() const{
    return m_etag_isValid;
}

OAIDatabaseInstance_failoverReplica OAIDatabaseInstance::getFailoverReplica() const {
    return m_failover_replica;
}
void OAIDatabaseInstance::setFailoverReplica(const OAIDatabaseInstance_failoverReplica &failover_replica) {
    m_failover_replica = failover_replica;
    m_failover_replica_isSet = true;
}

bool OAIDatabaseInstance::is_failover_replica_Set() const{
    return m_failover_replica_isSet;
}

bool OAIDatabaseInstance::is_failover_replica_Valid() const{
    return m_failover_replica_isValid;
}

QString OAIDatabaseInstance::getGceZone() const {
    return m_gce_zone;
}
void OAIDatabaseInstance::setGceZone(const QString &gce_zone) {
    m_gce_zone = gce_zone;
    m_gce_zone_isSet = true;
}

bool OAIDatabaseInstance::is_gce_zone_Set() const{
    return m_gce_zone_isSet;
}

bool OAIDatabaseInstance::is_gce_zone_Valid() const{
    return m_gce_zone_isValid;
}

QString OAIDatabaseInstance::getInstanceType() const {
    return m_instance_type;
}
void OAIDatabaseInstance::setInstanceType(const QString &instance_type) {
    m_instance_type = instance_type;
    m_instance_type_isSet = true;
}

bool OAIDatabaseInstance::is_instance_type_Set() const{
    return m_instance_type_isSet;
}

bool OAIDatabaseInstance::is_instance_type_Valid() const{
    return m_instance_type_isValid;
}

QList<OAIIpMapping> OAIDatabaseInstance::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIDatabaseInstance::setIpAddresses(const QList<OAIIpMapping> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIDatabaseInstance::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIDatabaseInstance::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QString OAIDatabaseInstance::getIpv6Address() const {
    return m_ipv6_address;
}
void OAIDatabaseInstance::setIpv6Address(const QString &ipv6_address) {
    m_ipv6_address = ipv6_address;
    m_ipv6_address_isSet = true;
}

bool OAIDatabaseInstance::is_ipv6_address_Set() const{
    return m_ipv6_address_isSet;
}

bool OAIDatabaseInstance::is_ipv6_address_Valid() const{
    return m_ipv6_address_isValid;
}

QString OAIDatabaseInstance::getKind() const {
    return m_kind;
}
void OAIDatabaseInstance::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatabaseInstance::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatabaseInstance::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDatabaseInstance::getMaintenanceVersion() const {
    return m_maintenance_version;
}
void OAIDatabaseInstance::setMaintenanceVersion(const QString &maintenance_version) {
    m_maintenance_version = maintenance_version;
    m_maintenance_version_isSet = true;
}

bool OAIDatabaseInstance::is_maintenance_version_Set() const{
    return m_maintenance_version_isSet;
}

bool OAIDatabaseInstance::is_maintenance_version_Valid() const{
    return m_maintenance_version_isValid;
}

QString OAIDatabaseInstance::getMasterInstanceName() const {
    return m_master_instance_name;
}
void OAIDatabaseInstance::setMasterInstanceName(const QString &master_instance_name) {
    m_master_instance_name = master_instance_name;
    m_master_instance_name_isSet = true;
}

bool OAIDatabaseInstance::is_master_instance_name_Set() const{
    return m_master_instance_name_isSet;
}

bool OAIDatabaseInstance::is_master_instance_name_Valid() const{
    return m_master_instance_name_isValid;
}

QString OAIDatabaseInstance::getMaxDiskSize() const {
    return m_max_disk_size;
}
void OAIDatabaseInstance::setMaxDiskSize(const QString &max_disk_size) {
    m_max_disk_size = max_disk_size;
    m_max_disk_size_isSet = true;
}

bool OAIDatabaseInstance::is_max_disk_size_Set() const{
    return m_max_disk_size_isSet;
}

bool OAIDatabaseInstance::is_max_disk_size_Valid() const{
    return m_max_disk_size_isValid;
}

QString OAIDatabaseInstance::getName() const {
    return m_name;
}
void OAIDatabaseInstance::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabaseInstance::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabaseInstance::is_name_Valid() const{
    return m_name_isValid;
}

OAIOnPremisesConfiguration OAIDatabaseInstance::getOnPremisesConfiguration() const {
    return m_on_premises_configuration;
}
void OAIDatabaseInstance::setOnPremisesConfiguration(const OAIOnPremisesConfiguration &on_premises_configuration) {
    m_on_premises_configuration = on_premises_configuration;
    m_on_premises_configuration_isSet = true;
}

bool OAIDatabaseInstance::is_on_premises_configuration_Set() const{
    return m_on_premises_configuration_isSet;
}

bool OAIDatabaseInstance::is_on_premises_configuration_Valid() const{
    return m_on_premises_configuration_isValid;
}

OAISqlOutOfDiskReport OAIDatabaseInstance::getOutOfDiskReport() const {
    return m_out_of_disk_report;
}
void OAIDatabaseInstance::setOutOfDiskReport(const OAISqlOutOfDiskReport &out_of_disk_report) {
    m_out_of_disk_report = out_of_disk_report;
    m_out_of_disk_report_isSet = true;
}

bool OAIDatabaseInstance::is_out_of_disk_report_Set() const{
    return m_out_of_disk_report_isSet;
}

bool OAIDatabaseInstance::is_out_of_disk_report_Valid() const{
    return m_out_of_disk_report_isValid;
}

QString OAIDatabaseInstance::getPrimaryDnsName() const {
    return m_primary_dns_name;
}
void OAIDatabaseInstance::setPrimaryDnsName(const QString &primary_dns_name) {
    m_primary_dns_name = primary_dns_name;
    m_primary_dns_name_isSet = true;
}

bool OAIDatabaseInstance::is_primary_dns_name_Set() const{
    return m_primary_dns_name_isSet;
}

bool OAIDatabaseInstance::is_primary_dns_name_Valid() const{
    return m_primary_dns_name_isValid;
}

QString OAIDatabaseInstance::getProject() const {
    return m_project;
}
void OAIDatabaseInstance::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIDatabaseInstance::is_project_Set() const{
    return m_project_isSet;
}

bool OAIDatabaseInstance::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIDatabaseInstance::getPscServiceAttachmentLink() const {
    return m_psc_service_attachment_link;
}
void OAIDatabaseInstance::setPscServiceAttachmentLink(const QString &psc_service_attachment_link) {
    m_psc_service_attachment_link = psc_service_attachment_link;
    m_psc_service_attachment_link_isSet = true;
}

bool OAIDatabaseInstance::is_psc_service_attachment_link_Set() const{
    return m_psc_service_attachment_link_isSet;
}

bool OAIDatabaseInstance::is_psc_service_attachment_link_Valid() const{
    return m_psc_service_attachment_link_isValid;
}

QString OAIDatabaseInstance::getRegion() const {
    return m_region;
}
void OAIDatabaseInstance::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIDatabaseInstance::is_region_Set() const{
    return m_region_isSet;
}

bool OAIDatabaseInstance::is_region_Valid() const{
    return m_region_isValid;
}

OAIReplicaConfiguration OAIDatabaseInstance::getReplicaConfiguration() const {
    return m_replica_configuration;
}
void OAIDatabaseInstance::setReplicaConfiguration(const OAIReplicaConfiguration &replica_configuration) {
    m_replica_configuration = replica_configuration;
    m_replica_configuration_isSet = true;
}

bool OAIDatabaseInstance::is_replica_configuration_Set() const{
    return m_replica_configuration_isSet;
}

bool OAIDatabaseInstance::is_replica_configuration_Valid() const{
    return m_replica_configuration_isValid;
}

QList<QString> OAIDatabaseInstance::getReplicaNames() const {
    return m_replica_names;
}
void OAIDatabaseInstance::setReplicaNames(const QList<QString> &replica_names) {
    m_replica_names = replica_names;
    m_replica_names_isSet = true;
}

bool OAIDatabaseInstance::is_replica_names_Set() const{
    return m_replica_names_isSet;
}

bool OAIDatabaseInstance::is_replica_names_Valid() const{
    return m_replica_names_isValid;
}

QString OAIDatabaseInstance::getRootPassword() const {
    return m_root_password;
}
void OAIDatabaseInstance::setRootPassword(const QString &root_password) {
    m_root_password = root_password;
    m_root_password_isSet = true;
}

bool OAIDatabaseInstance::is_root_password_Set() const{
    return m_root_password_isSet;
}

bool OAIDatabaseInstance::is_root_password_Valid() const{
    return m_root_password_isValid;
}

bool OAIDatabaseInstance::isSatisfiesPzs() const {
    return m_satisfies_pzs;
}
void OAIDatabaseInstance::setSatisfiesPzs(const bool &satisfies_pzs) {
    m_satisfies_pzs = satisfies_pzs;
    m_satisfies_pzs_isSet = true;
}

bool OAIDatabaseInstance::is_satisfies_pzs_Set() const{
    return m_satisfies_pzs_isSet;
}

bool OAIDatabaseInstance::is_satisfies_pzs_Valid() const{
    return m_satisfies_pzs_isValid;
}

OAISqlScheduledMaintenance OAIDatabaseInstance::getScheduledMaintenance() const {
    return m_scheduled_maintenance;
}
void OAIDatabaseInstance::setScheduledMaintenance(const OAISqlScheduledMaintenance &scheduled_maintenance) {
    m_scheduled_maintenance = scheduled_maintenance;
    m_scheduled_maintenance_isSet = true;
}

bool OAIDatabaseInstance::is_scheduled_maintenance_Set() const{
    return m_scheduled_maintenance_isSet;
}

bool OAIDatabaseInstance::is_scheduled_maintenance_Valid() const{
    return m_scheduled_maintenance_isValid;
}

QString OAIDatabaseInstance::getSecondaryGceZone() const {
    return m_secondary_gce_zone;
}
void OAIDatabaseInstance::setSecondaryGceZone(const QString &secondary_gce_zone) {
    m_secondary_gce_zone = secondary_gce_zone;
    m_secondary_gce_zone_isSet = true;
}

bool OAIDatabaseInstance::is_secondary_gce_zone_Set() const{
    return m_secondary_gce_zone_isSet;
}

bool OAIDatabaseInstance::is_secondary_gce_zone_Valid() const{
    return m_secondary_gce_zone_isValid;
}

QString OAIDatabaseInstance::getSelfLink() const {
    return m_self_link;
}
void OAIDatabaseInstance::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIDatabaseInstance::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIDatabaseInstance::is_self_link_Valid() const{
    return m_self_link_isValid;
}

OAISslCert OAIDatabaseInstance::getServerCaCert() const {
    return m_server_ca_cert;
}
void OAIDatabaseInstance::setServerCaCert(const OAISslCert &server_ca_cert) {
    m_server_ca_cert = server_ca_cert;
    m_server_ca_cert_isSet = true;
}

bool OAIDatabaseInstance::is_server_ca_cert_Set() const{
    return m_server_ca_cert_isSet;
}

bool OAIDatabaseInstance::is_server_ca_cert_Valid() const{
    return m_server_ca_cert_isValid;
}

QString OAIDatabaseInstance::getServiceAccountEmailAddress() const {
    return m_service_account_email_address;
}
void OAIDatabaseInstance::setServiceAccountEmailAddress(const QString &service_account_email_address) {
    m_service_account_email_address = service_account_email_address;
    m_service_account_email_address_isSet = true;
}

bool OAIDatabaseInstance::is_service_account_email_address_Set() const{
    return m_service_account_email_address_isSet;
}

bool OAIDatabaseInstance::is_service_account_email_address_Valid() const{
    return m_service_account_email_address_isValid;
}

OAISettings OAIDatabaseInstance::getSettings() const {
    return m_settings;
}
void OAIDatabaseInstance::setSettings(const OAISettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAIDatabaseInstance::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAIDatabaseInstance::is_settings_Valid() const{
    return m_settings_isValid;
}

QString OAIDatabaseInstance::getSqlNetworkArchitecture() const {
    return m_sql_network_architecture;
}
void OAIDatabaseInstance::setSqlNetworkArchitecture(const QString &sql_network_architecture) {
    m_sql_network_architecture = sql_network_architecture;
    m_sql_network_architecture_isSet = true;
}

bool OAIDatabaseInstance::is_sql_network_architecture_Set() const{
    return m_sql_network_architecture_isSet;
}

bool OAIDatabaseInstance::is_sql_network_architecture_Valid() const{
    return m_sql_network_architecture_isValid;
}

QString OAIDatabaseInstance::getState() const {
    return m_state;
}
void OAIDatabaseInstance::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDatabaseInstance::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDatabaseInstance::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIDatabaseInstance::getSuspensionReason() const {
    return m_suspension_reason;
}
void OAIDatabaseInstance::setSuspensionReason(const QList<QString> &suspension_reason) {
    m_suspension_reason = suspension_reason;
    m_suspension_reason_isSet = true;
}

bool OAIDatabaseInstance::is_suspension_reason_Set() const{
    return m_suspension_reason_isSet;
}

bool OAIDatabaseInstance::is_suspension_reason_Valid() const{
    return m_suspension_reason_isValid;
}

QString OAIDatabaseInstance::getWriteEndpoint() const {
    return m_write_endpoint;
}
void OAIDatabaseInstance::setWriteEndpoint(const QString &write_endpoint) {
    m_write_endpoint = write_endpoint;
    m_write_endpoint_isSet = true;
}

bool OAIDatabaseInstance::is_write_endpoint_Set() const{
    return m_write_endpoint_isSet;
}

bool OAIDatabaseInstance::is_write_endpoint_Valid() const{
    return m_write_endpoint_isValid;
}

bool OAIDatabaseInstance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_available_maintenance_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_backend_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connection_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_disk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_installed_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_encryption_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_replica.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gce_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipv6_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_disk_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_premises_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_out_of_disk_report.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_dns_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_service_attachment_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_satisfies_pzs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_maintenance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_gce_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_ca_cert.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_account_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_network_architecture_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_reason.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_write_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabaseInstance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
