/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportContext_sqlExportOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportContext_sqlExportOptions::OAIExportContext_sqlExportOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportContext_sqlExportOptions::OAIExportContext_sqlExportOptions() {
    this->initializeModel();
}

OAIExportContext_sqlExportOptions::~OAIExportContext_sqlExportOptions() {}

void OAIExportContext_sqlExportOptions::initializeModel() {

    m_mysql_export_options_isSet = false;
    m_mysql_export_options_isValid = false;

    m_parallel_isSet = false;
    m_parallel_isValid = false;

    m_schema_only_isSet = false;
    m_schema_only_isValid = false;

    m_tables_isSet = false;
    m_tables_isValid = false;

    m_threads_isSet = false;
    m_threads_isValid = false;
}

void OAIExportContext_sqlExportOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportContext_sqlExportOptions::fromJsonObject(QJsonObject json) {

    m_mysql_export_options_isValid = ::OpenAPI::fromJsonValue(m_mysql_export_options, json[QString("mysqlExportOptions")]);
    m_mysql_export_options_isSet = !json[QString("mysqlExportOptions")].isNull() && m_mysql_export_options_isValid;

    m_parallel_isValid = ::OpenAPI::fromJsonValue(m_parallel, json[QString("parallel")]);
    m_parallel_isSet = !json[QString("parallel")].isNull() && m_parallel_isValid;

    m_schema_only_isValid = ::OpenAPI::fromJsonValue(m_schema_only, json[QString("schemaOnly")]);
    m_schema_only_isSet = !json[QString("schemaOnly")].isNull() && m_schema_only_isValid;

    m_tables_isValid = ::OpenAPI::fromJsonValue(m_tables, json[QString("tables")]);
    m_tables_isSet = !json[QString("tables")].isNull() && m_tables_isValid;

    m_threads_isValid = ::OpenAPI::fromJsonValue(m_threads, json[QString("threads")]);
    m_threads_isSet = !json[QString("threads")].isNull() && m_threads_isValid;
}

QString OAIExportContext_sqlExportOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportContext_sqlExportOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_mysql_export_options.isSet()) {
        obj.insert(QString("mysqlExportOptions"), ::OpenAPI::toJsonValue(m_mysql_export_options));
    }
    if (m_parallel_isSet) {
        obj.insert(QString("parallel"), ::OpenAPI::toJsonValue(m_parallel));
    }
    if (m_schema_only_isSet) {
        obj.insert(QString("schemaOnly"), ::OpenAPI::toJsonValue(m_schema_only));
    }
    if (m_tables.size() > 0) {
        obj.insert(QString("tables"), ::OpenAPI::toJsonValue(m_tables));
    }
    if (m_threads_isSet) {
        obj.insert(QString("threads"), ::OpenAPI::toJsonValue(m_threads));
    }
    return obj;
}

OAIExportContext_sqlExportOptions_mysqlExportOptions OAIExportContext_sqlExportOptions::getMysqlExportOptions() const {
    return m_mysql_export_options;
}
void OAIExportContext_sqlExportOptions::setMysqlExportOptions(const OAIExportContext_sqlExportOptions_mysqlExportOptions &mysql_export_options) {
    m_mysql_export_options = mysql_export_options;
    m_mysql_export_options_isSet = true;
}

bool OAIExportContext_sqlExportOptions::is_mysql_export_options_Set() const{
    return m_mysql_export_options_isSet;
}

bool OAIExportContext_sqlExportOptions::is_mysql_export_options_Valid() const{
    return m_mysql_export_options_isValid;
}

bool OAIExportContext_sqlExportOptions::isParallel() const {
    return m_parallel;
}
void OAIExportContext_sqlExportOptions::setParallel(const bool &parallel) {
    m_parallel = parallel;
    m_parallel_isSet = true;
}

bool OAIExportContext_sqlExportOptions::is_parallel_Set() const{
    return m_parallel_isSet;
}

bool OAIExportContext_sqlExportOptions::is_parallel_Valid() const{
    return m_parallel_isValid;
}

bool OAIExportContext_sqlExportOptions::isSchemaOnly() const {
    return m_schema_only;
}
void OAIExportContext_sqlExportOptions::setSchemaOnly(const bool &schema_only) {
    m_schema_only = schema_only;
    m_schema_only_isSet = true;
}

bool OAIExportContext_sqlExportOptions::is_schema_only_Set() const{
    return m_schema_only_isSet;
}

bool OAIExportContext_sqlExportOptions::is_schema_only_Valid() const{
    return m_schema_only_isValid;
}

QList<QString> OAIExportContext_sqlExportOptions::getTables() const {
    return m_tables;
}
void OAIExportContext_sqlExportOptions::setTables(const QList<QString> &tables) {
    m_tables = tables;
    m_tables_isSet = true;
}

bool OAIExportContext_sqlExportOptions::is_tables_Set() const{
    return m_tables_isSet;
}

bool OAIExportContext_sqlExportOptions::is_tables_Valid() const{
    return m_tables_isValid;
}

qint32 OAIExportContext_sqlExportOptions::getThreads() const {
    return m_threads;
}
void OAIExportContext_sqlExportOptions::setThreads(const qint32 &threads) {
    m_threads = threads;
    m_threads_isSet = true;
}

bool OAIExportContext_sqlExportOptions::is_threads_Set() const{
    return m_threads_isSet;
}

bool OAIExportContext_sqlExportOptions::is_threads_Valid() const{
    return m_threads_isValid;
}

bool OAIExportContext_sqlExportOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mysql_export_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parallel_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_threads_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportContext_sqlExportOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
