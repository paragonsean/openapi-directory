/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportContext_bakExportOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportContext_bakExportOptions::OAIExportContext_bakExportOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportContext_bakExportOptions::OAIExportContext_bakExportOptions() {
    this->initializeModel();
}

OAIExportContext_bakExportOptions::~OAIExportContext_bakExportOptions() {}

void OAIExportContext_bakExportOptions::initializeModel() {

    m_bak_type_isSet = false;
    m_bak_type_isValid = false;

    m_copy_only_isSet = false;
    m_copy_only_isValid = false;

    m_differential_base_isSet = false;
    m_differential_base_isValid = false;

    m_stripe_count_isSet = false;
    m_stripe_count_isValid = false;

    m_striped_isSet = false;
    m_striped_isValid = false;
}

void OAIExportContext_bakExportOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportContext_bakExportOptions::fromJsonObject(QJsonObject json) {

    m_bak_type_isValid = ::OpenAPI::fromJsonValue(m_bak_type, json[QString("bakType")]);
    m_bak_type_isSet = !json[QString("bakType")].isNull() && m_bak_type_isValid;

    m_copy_only_isValid = ::OpenAPI::fromJsonValue(m_copy_only, json[QString("copyOnly")]);
    m_copy_only_isSet = !json[QString("copyOnly")].isNull() && m_copy_only_isValid;

    m_differential_base_isValid = ::OpenAPI::fromJsonValue(m_differential_base, json[QString("differentialBase")]);
    m_differential_base_isSet = !json[QString("differentialBase")].isNull() && m_differential_base_isValid;

    m_stripe_count_isValid = ::OpenAPI::fromJsonValue(m_stripe_count, json[QString("stripeCount")]);
    m_stripe_count_isSet = !json[QString("stripeCount")].isNull() && m_stripe_count_isValid;

    m_striped_isValid = ::OpenAPI::fromJsonValue(m_striped, json[QString("striped")]);
    m_striped_isSet = !json[QString("striped")].isNull() && m_striped_isValid;
}

QString OAIExportContext_bakExportOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportContext_bakExportOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_bak_type_isSet) {
        obj.insert(QString("bakType"), ::OpenAPI::toJsonValue(m_bak_type));
    }
    if (m_copy_only_isSet) {
        obj.insert(QString("copyOnly"), ::OpenAPI::toJsonValue(m_copy_only));
    }
    if (m_differential_base_isSet) {
        obj.insert(QString("differentialBase"), ::OpenAPI::toJsonValue(m_differential_base));
    }
    if (m_stripe_count_isSet) {
        obj.insert(QString("stripeCount"), ::OpenAPI::toJsonValue(m_stripe_count));
    }
    if (m_striped_isSet) {
        obj.insert(QString("striped"), ::OpenAPI::toJsonValue(m_striped));
    }
    return obj;
}

QString OAIExportContext_bakExportOptions::getBakType() const {
    return m_bak_type;
}
void OAIExportContext_bakExportOptions::setBakType(const QString &bak_type) {
    m_bak_type = bak_type;
    m_bak_type_isSet = true;
}

bool OAIExportContext_bakExportOptions::is_bak_type_Set() const{
    return m_bak_type_isSet;
}

bool OAIExportContext_bakExportOptions::is_bak_type_Valid() const{
    return m_bak_type_isValid;
}

bool OAIExportContext_bakExportOptions::isCopyOnly() const {
    return m_copy_only;
}
void OAIExportContext_bakExportOptions::setCopyOnly(const bool &copy_only) {
    m_copy_only = copy_only;
    m_copy_only_isSet = true;
}

bool OAIExportContext_bakExportOptions::is_copy_only_Set() const{
    return m_copy_only_isSet;
}

bool OAIExportContext_bakExportOptions::is_copy_only_Valid() const{
    return m_copy_only_isValid;
}

bool OAIExportContext_bakExportOptions::isDifferentialBase() const {
    return m_differential_base;
}
void OAIExportContext_bakExportOptions::setDifferentialBase(const bool &differential_base) {
    m_differential_base = differential_base;
    m_differential_base_isSet = true;
}

bool OAIExportContext_bakExportOptions::is_differential_base_Set() const{
    return m_differential_base_isSet;
}

bool OAIExportContext_bakExportOptions::is_differential_base_Valid() const{
    return m_differential_base_isValid;
}

qint32 OAIExportContext_bakExportOptions::getStripeCount() const {
    return m_stripe_count;
}
void OAIExportContext_bakExportOptions::setStripeCount(const qint32 &stripe_count) {
    m_stripe_count = stripe_count;
    m_stripe_count_isSet = true;
}

bool OAIExportContext_bakExportOptions::is_stripe_count_Set() const{
    return m_stripe_count_isSet;
}

bool OAIExportContext_bakExportOptions::is_stripe_count_Valid() const{
    return m_stripe_count_isValid;
}

bool OAIExportContext_bakExportOptions::isStriped() const {
    return m_striped;
}
void OAIExportContext_bakExportOptions::setStriped(const bool &striped) {
    m_striped = striped;
    m_striped_isSet = true;
}

bool OAIExportContext_bakExportOptions::is_striped_Set() const{
    return m_striped_isSet;
}

bool OAIExportContext_bakExportOptions::is_striped_Valid() const{
    return m_striped_isValid;
}

bool OAIExportContext_bakExportOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bak_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_copy_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_differential_base_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stripe_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_striped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportContext_bakExportOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
