/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupRetentionSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupRetentionSettings::OAIBackupRetentionSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupRetentionSettings::OAIBackupRetentionSettings() {
    this->initializeModel();
}

OAIBackupRetentionSettings::~OAIBackupRetentionSettings() {}

void OAIBackupRetentionSettings::initializeModel() {

    m_retained_backups_isSet = false;
    m_retained_backups_isValid = false;

    m_retention_unit_isSet = false;
    m_retention_unit_isValid = false;
}

void OAIBackupRetentionSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupRetentionSettings::fromJsonObject(QJsonObject json) {

    m_retained_backups_isValid = ::OpenAPI::fromJsonValue(m_retained_backups, json[QString("retainedBackups")]);
    m_retained_backups_isSet = !json[QString("retainedBackups")].isNull() && m_retained_backups_isValid;

    m_retention_unit_isValid = ::OpenAPI::fromJsonValue(m_retention_unit, json[QString("retentionUnit")]);
    m_retention_unit_isSet = !json[QString("retentionUnit")].isNull() && m_retention_unit_isValid;
}

QString OAIBackupRetentionSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupRetentionSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_retained_backups_isSet) {
        obj.insert(QString("retainedBackups"), ::OpenAPI::toJsonValue(m_retained_backups));
    }
    if (m_retention_unit_isSet) {
        obj.insert(QString("retentionUnit"), ::OpenAPI::toJsonValue(m_retention_unit));
    }
    return obj;
}

qint32 OAIBackupRetentionSettings::getRetainedBackups() const {
    return m_retained_backups;
}
void OAIBackupRetentionSettings::setRetainedBackups(const qint32 &retained_backups) {
    m_retained_backups = retained_backups;
    m_retained_backups_isSet = true;
}

bool OAIBackupRetentionSettings::is_retained_backups_Set() const{
    return m_retained_backups_isSet;
}

bool OAIBackupRetentionSettings::is_retained_backups_Valid() const{
    return m_retained_backups_isValid;
}

QString OAIBackupRetentionSettings::getRetentionUnit() const {
    return m_retention_unit;
}
void OAIBackupRetentionSettings::setRetentionUnit(const QString &retention_unit) {
    m_retention_unit = retention_unit;
    m_retention_unit_isSet = true;
}

bool OAIBackupRetentionSettings::is_retention_unit_Set() const{
    return m_retention_unit_isSet;
}

bool OAIBackupRetentionSettings::is_retention_unit_Valid() const{
    return m_retention_unit_isValid;
}

bool OAIBackupRetentionSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_retained_backups_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retention_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupRetentionSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
