/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDemoteMasterContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDemoteMasterContext::OAIDemoteMasterContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDemoteMasterContext::OAIDemoteMasterContext() {
    this->initializeModel();
}

OAIDemoteMasterContext::~OAIDemoteMasterContext() {}

void OAIDemoteMasterContext::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_master_instance_name_isSet = false;
    m_master_instance_name_isValid = false;

    m_replica_configuration_isSet = false;
    m_replica_configuration_isValid = false;

    m_skip_replication_setup_isSet = false;
    m_skip_replication_setup_isValid = false;

    m_verify_gtid_consistency_isSet = false;
    m_verify_gtid_consistency_isValid = false;
}

void OAIDemoteMasterContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDemoteMasterContext::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_master_instance_name_isValid = ::OpenAPI::fromJsonValue(m_master_instance_name, json[QString("masterInstanceName")]);
    m_master_instance_name_isSet = !json[QString("masterInstanceName")].isNull() && m_master_instance_name_isValid;

    m_replica_configuration_isValid = ::OpenAPI::fromJsonValue(m_replica_configuration, json[QString("replicaConfiguration")]);
    m_replica_configuration_isSet = !json[QString("replicaConfiguration")].isNull() && m_replica_configuration_isValid;

    m_skip_replication_setup_isValid = ::OpenAPI::fromJsonValue(m_skip_replication_setup, json[QString("skipReplicationSetup")]);
    m_skip_replication_setup_isSet = !json[QString("skipReplicationSetup")].isNull() && m_skip_replication_setup_isValid;

    m_verify_gtid_consistency_isValid = ::OpenAPI::fromJsonValue(m_verify_gtid_consistency, json[QString("verifyGtidConsistency")]);
    m_verify_gtid_consistency_isSet = !json[QString("verifyGtidConsistency")].isNull() && m_verify_gtid_consistency_isValid;
}

QString OAIDemoteMasterContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDemoteMasterContext::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_master_instance_name_isSet) {
        obj.insert(QString("masterInstanceName"), ::OpenAPI::toJsonValue(m_master_instance_name));
    }
    if (m_replica_configuration.isSet()) {
        obj.insert(QString("replicaConfiguration"), ::OpenAPI::toJsonValue(m_replica_configuration));
    }
    if (m_skip_replication_setup_isSet) {
        obj.insert(QString("skipReplicationSetup"), ::OpenAPI::toJsonValue(m_skip_replication_setup));
    }
    if (m_verify_gtid_consistency_isSet) {
        obj.insert(QString("verifyGtidConsistency"), ::OpenAPI::toJsonValue(m_verify_gtid_consistency));
    }
    return obj;
}

QString OAIDemoteMasterContext::getKind() const {
    return m_kind;
}
void OAIDemoteMasterContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDemoteMasterContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDemoteMasterContext::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDemoteMasterContext::getMasterInstanceName() const {
    return m_master_instance_name;
}
void OAIDemoteMasterContext::setMasterInstanceName(const QString &master_instance_name) {
    m_master_instance_name = master_instance_name;
    m_master_instance_name_isSet = true;
}

bool OAIDemoteMasterContext::is_master_instance_name_Set() const{
    return m_master_instance_name_isSet;
}

bool OAIDemoteMasterContext::is_master_instance_name_Valid() const{
    return m_master_instance_name_isValid;
}

OAIDemoteMasterConfiguration OAIDemoteMasterContext::getReplicaConfiguration() const {
    return m_replica_configuration;
}
void OAIDemoteMasterContext::setReplicaConfiguration(const OAIDemoteMasterConfiguration &replica_configuration) {
    m_replica_configuration = replica_configuration;
    m_replica_configuration_isSet = true;
}

bool OAIDemoteMasterContext::is_replica_configuration_Set() const{
    return m_replica_configuration_isSet;
}

bool OAIDemoteMasterContext::is_replica_configuration_Valid() const{
    return m_replica_configuration_isValid;
}

bool OAIDemoteMasterContext::isSkipReplicationSetup() const {
    return m_skip_replication_setup;
}
void OAIDemoteMasterContext::setSkipReplicationSetup(const bool &skip_replication_setup) {
    m_skip_replication_setup = skip_replication_setup;
    m_skip_replication_setup_isSet = true;
}

bool OAIDemoteMasterContext::is_skip_replication_setup_Set() const{
    return m_skip_replication_setup_isSet;
}

bool OAIDemoteMasterContext::is_skip_replication_setup_Valid() const{
    return m_skip_replication_setup_isValid;
}

bool OAIDemoteMasterContext::isVerifyGtidConsistency() const {
    return m_verify_gtid_consistency;
}
void OAIDemoteMasterContext::setVerifyGtidConsistency(const bool &verify_gtid_consistency) {
    m_verify_gtid_consistency = verify_gtid_consistency;
    m_verify_gtid_consistency_isSet = true;
}

bool OAIDemoteMasterContext::is_verify_gtid_consistency_Set() const{
    return m_verify_gtid_consistency_isSet;
}

bool OAIDemoteMasterContext::is_verify_gtid_consistency_Valid() const{
    return m_verify_gtid_consistency_isValid;
}

bool OAIDemoteMasterContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_replication_setup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verify_gtid_consistency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDemoteMasterContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
