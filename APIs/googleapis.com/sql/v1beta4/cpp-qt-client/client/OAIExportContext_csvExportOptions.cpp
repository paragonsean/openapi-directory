/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExportContext_csvExportOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExportContext_csvExportOptions::OAIExportContext_csvExportOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExportContext_csvExportOptions::OAIExportContext_csvExportOptions() {
    this->initializeModel();
}

OAIExportContext_csvExportOptions::~OAIExportContext_csvExportOptions() {}

void OAIExportContext_csvExportOptions::initializeModel() {

    m_escape_character_isSet = false;
    m_escape_character_isValid = false;

    m_fields_terminated_by_isSet = false;
    m_fields_terminated_by_isValid = false;

    m_lines_terminated_by_isSet = false;
    m_lines_terminated_by_isValid = false;

    m_quote_character_isSet = false;
    m_quote_character_isValid = false;

    m_select_query_isSet = false;
    m_select_query_isValid = false;
}

void OAIExportContext_csvExportOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExportContext_csvExportOptions::fromJsonObject(QJsonObject json) {

    m_escape_character_isValid = ::OpenAPI::fromJsonValue(m_escape_character, json[QString("escapeCharacter")]);
    m_escape_character_isSet = !json[QString("escapeCharacter")].isNull() && m_escape_character_isValid;

    m_fields_terminated_by_isValid = ::OpenAPI::fromJsonValue(m_fields_terminated_by, json[QString("fieldsTerminatedBy")]);
    m_fields_terminated_by_isSet = !json[QString("fieldsTerminatedBy")].isNull() && m_fields_terminated_by_isValid;

    m_lines_terminated_by_isValid = ::OpenAPI::fromJsonValue(m_lines_terminated_by, json[QString("linesTerminatedBy")]);
    m_lines_terminated_by_isSet = !json[QString("linesTerminatedBy")].isNull() && m_lines_terminated_by_isValid;

    m_quote_character_isValid = ::OpenAPI::fromJsonValue(m_quote_character, json[QString("quoteCharacter")]);
    m_quote_character_isSet = !json[QString("quoteCharacter")].isNull() && m_quote_character_isValid;

    m_select_query_isValid = ::OpenAPI::fromJsonValue(m_select_query, json[QString("selectQuery")]);
    m_select_query_isSet = !json[QString("selectQuery")].isNull() && m_select_query_isValid;
}

QString OAIExportContext_csvExportOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExportContext_csvExportOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_escape_character_isSet) {
        obj.insert(QString("escapeCharacter"), ::OpenAPI::toJsonValue(m_escape_character));
    }
    if (m_fields_terminated_by_isSet) {
        obj.insert(QString("fieldsTerminatedBy"), ::OpenAPI::toJsonValue(m_fields_terminated_by));
    }
    if (m_lines_terminated_by_isSet) {
        obj.insert(QString("linesTerminatedBy"), ::OpenAPI::toJsonValue(m_lines_terminated_by));
    }
    if (m_quote_character_isSet) {
        obj.insert(QString("quoteCharacter"), ::OpenAPI::toJsonValue(m_quote_character));
    }
    if (m_select_query_isSet) {
        obj.insert(QString("selectQuery"), ::OpenAPI::toJsonValue(m_select_query));
    }
    return obj;
}

QString OAIExportContext_csvExportOptions::getEscapeCharacter() const {
    return m_escape_character;
}
void OAIExportContext_csvExportOptions::setEscapeCharacter(const QString &escape_character) {
    m_escape_character = escape_character;
    m_escape_character_isSet = true;
}

bool OAIExportContext_csvExportOptions::is_escape_character_Set() const{
    return m_escape_character_isSet;
}

bool OAIExportContext_csvExportOptions::is_escape_character_Valid() const{
    return m_escape_character_isValid;
}

QString OAIExportContext_csvExportOptions::getFieldsTerminatedBy() const {
    return m_fields_terminated_by;
}
void OAIExportContext_csvExportOptions::setFieldsTerminatedBy(const QString &fields_terminated_by) {
    m_fields_terminated_by = fields_terminated_by;
    m_fields_terminated_by_isSet = true;
}

bool OAIExportContext_csvExportOptions::is_fields_terminated_by_Set() const{
    return m_fields_terminated_by_isSet;
}

bool OAIExportContext_csvExportOptions::is_fields_terminated_by_Valid() const{
    return m_fields_terminated_by_isValid;
}

QString OAIExportContext_csvExportOptions::getLinesTerminatedBy() const {
    return m_lines_terminated_by;
}
void OAIExportContext_csvExportOptions::setLinesTerminatedBy(const QString &lines_terminated_by) {
    m_lines_terminated_by = lines_terminated_by;
    m_lines_terminated_by_isSet = true;
}

bool OAIExportContext_csvExportOptions::is_lines_terminated_by_Set() const{
    return m_lines_terminated_by_isSet;
}

bool OAIExportContext_csvExportOptions::is_lines_terminated_by_Valid() const{
    return m_lines_terminated_by_isValid;
}

QString OAIExportContext_csvExportOptions::getQuoteCharacter() const {
    return m_quote_character;
}
void OAIExportContext_csvExportOptions::setQuoteCharacter(const QString &quote_character) {
    m_quote_character = quote_character;
    m_quote_character_isSet = true;
}

bool OAIExportContext_csvExportOptions::is_quote_character_Set() const{
    return m_quote_character_isSet;
}

bool OAIExportContext_csvExportOptions::is_quote_character_Valid() const{
    return m_quote_character_isValid;
}

QString OAIExportContext_csvExportOptions::getSelectQuery() const {
    return m_select_query;
}
void OAIExportContext_csvExportOptions::setSelectQuery(const QString &select_query) {
    m_select_query = select_query;
    m_select_query_isSet = true;
}

bool OAIExportContext_csvExportOptions::is_select_query_Set() const{
    return m_select_query_isSet;
}

bool OAIExportContext_csvExportOptions::is_select_query_Valid() const{
    return m_select_query_isValid;
}

bool OAIExportContext_csvExportOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_escape_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_terminated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lines_terminated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_character_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExportContext_csvExportOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
