/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlServerDatabaseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlServerDatabaseDetails::OAISqlServerDatabaseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlServerDatabaseDetails::OAISqlServerDatabaseDetails() {
    this->initializeModel();
}

OAISqlServerDatabaseDetails::~OAISqlServerDatabaseDetails() {}

void OAISqlServerDatabaseDetails::initializeModel() {

    m_compatibility_level_isSet = false;
    m_compatibility_level_isValid = false;

    m_recovery_model_isSet = false;
    m_recovery_model_isValid = false;
}

void OAISqlServerDatabaseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlServerDatabaseDetails::fromJsonObject(QJsonObject json) {

    m_compatibility_level_isValid = ::OpenAPI::fromJsonValue(m_compatibility_level, json[QString("compatibilityLevel")]);
    m_compatibility_level_isSet = !json[QString("compatibilityLevel")].isNull() && m_compatibility_level_isValid;

    m_recovery_model_isValid = ::OpenAPI::fromJsonValue(m_recovery_model, json[QString("recoveryModel")]);
    m_recovery_model_isSet = !json[QString("recoveryModel")].isNull() && m_recovery_model_isValid;
}

QString OAISqlServerDatabaseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlServerDatabaseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_compatibility_level_isSet) {
        obj.insert(QString("compatibilityLevel"), ::OpenAPI::toJsonValue(m_compatibility_level));
    }
    if (m_recovery_model_isSet) {
        obj.insert(QString("recoveryModel"), ::OpenAPI::toJsonValue(m_recovery_model));
    }
    return obj;
}

qint32 OAISqlServerDatabaseDetails::getCompatibilityLevel() const {
    return m_compatibility_level;
}
void OAISqlServerDatabaseDetails::setCompatibilityLevel(const qint32 &compatibility_level) {
    m_compatibility_level = compatibility_level;
    m_compatibility_level_isSet = true;
}

bool OAISqlServerDatabaseDetails::is_compatibility_level_Set() const{
    return m_compatibility_level_isSet;
}

bool OAISqlServerDatabaseDetails::is_compatibility_level_Valid() const{
    return m_compatibility_level_isValid;
}

QString OAISqlServerDatabaseDetails::getRecoveryModel() const {
    return m_recovery_model;
}
void OAISqlServerDatabaseDetails::setRecoveryModel(const QString &recovery_model) {
    m_recovery_model = recovery_model;
    m_recovery_model_isSet = true;
}

bool OAISqlServerDatabaseDetails::is_recovery_model_Set() const{
    return m_recovery_model_isSet;
}

bool OAISqlServerDatabaseDetails::is_recovery_model_Valid() const{
    return m_recovery_model_isValid;
}

bool OAISqlServerDatabaseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_compatibility_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_model_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlServerDatabaseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
