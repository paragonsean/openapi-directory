/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlag.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlag::OAIFlag(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlag::OAIFlag() {
    this->initializeModel();
}

OAIFlag::~OAIFlag() {}

void OAIFlag::initializeModel() {

    m_allowed_int_values_isSet = false;
    m_allowed_int_values_isValid = false;

    m_allowed_string_values_isSet = false;
    m_allowed_string_values_isValid = false;

    m_applies_to_isSet = false;
    m_applies_to_isValid = false;

    m_in_beta_isSet = false;
    m_in_beta_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_max_value_isSet = false;
    m_max_value_isValid = false;

    m_min_value_isSet = false;
    m_min_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_requires_restart_isSet = false;
    m_requires_restart_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIFlag::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlag::fromJsonObject(QJsonObject json) {

    m_allowed_int_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_int_values, json[QString("allowedIntValues")]);
    m_allowed_int_values_isSet = !json[QString("allowedIntValues")].isNull() && m_allowed_int_values_isValid;

    m_allowed_string_values_isValid = ::OpenAPI::fromJsonValue(m_allowed_string_values, json[QString("allowedStringValues")]);
    m_allowed_string_values_isSet = !json[QString("allowedStringValues")].isNull() && m_allowed_string_values_isValid;

    m_applies_to_isValid = ::OpenAPI::fromJsonValue(m_applies_to, json[QString("appliesTo")]);
    m_applies_to_isSet = !json[QString("appliesTo")].isNull() && m_applies_to_isValid;

    m_in_beta_isValid = ::OpenAPI::fromJsonValue(m_in_beta, json[QString("inBeta")]);
    m_in_beta_isSet = !json[QString("inBeta")].isNull() && m_in_beta_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_max_value_isValid = ::OpenAPI::fromJsonValue(m_max_value, json[QString("maxValue")]);
    m_max_value_isSet = !json[QString("maxValue")].isNull() && m_max_value_isValid;

    m_min_value_isValid = ::OpenAPI::fromJsonValue(m_min_value, json[QString("minValue")]);
    m_min_value_isSet = !json[QString("minValue")].isNull() && m_min_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_requires_restart_isValid = ::OpenAPI::fromJsonValue(m_requires_restart, json[QString("requiresRestart")]);
    m_requires_restart_isSet = !json[QString("requiresRestart")].isNull() && m_requires_restart_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIFlag::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlag::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_int_values.size() > 0) {
        obj.insert(QString("allowedIntValues"), ::OpenAPI::toJsonValue(m_allowed_int_values));
    }
    if (m_allowed_string_values.size() > 0) {
        obj.insert(QString("allowedStringValues"), ::OpenAPI::toJsonValue(m_allowed_string_values));
    }
    if (m_applies_to.size() > 0) {
        obj.insert(QString("appliesTo"), ::OpenAPI::toJsonValue(m_applies_to));
    }
    if (m_in_beta_isSet) {
        obj.insert(QString("inBeta"), ::OpenAPI::toJsonValue(m_in_beta));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_max_value_isSet) {
        obj.insert(QString("maxValue"), ::OpenAPI::toJsonValue(m_max_value));
    }
    if (m_min_value_isSet) {
        obj.insert(QString("minValue"), ::OpenAPI::toJsonValue(m_min_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_requires_restart_isSet) {
        obj.insert(QString("requiresRestart"), ::OpenAPI::toJsonValue(m_requires_restart));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAIFlag::getAllowedIntValues() const {
    return m_allowed_int_values;
}
void OAIFlag::setAllowedIntValues(const QList<QString> &allowed_int_values) {
    m_allowed_int_values = allowed_int_values;
    m_allowed_int_values_isSet = true;
}

bool OAIFlag::is_allowed_int_values_Set() const{
    return m_allowed_int_values_isSet;
}

bool OAIFlag::is_allowed_int_values_Valid() const{
    return m_allowed_int_values_isValid;
}

QList<QString> OAIFlag::getAllowedStringValues() const {
    return m_allowed_string_values;
}
void OAIFlag::setAllowedStringValues(const QList<QString> &allowed_string_values) {
    m_allowed_string_values = allowed_string_values;
    m_allowed_string_values_isSet = true;
}

bool OAIFlag::is_allowed_string_values_Set() const{
    return m_allowed_string_values_isSet;
}

bool OAIFlag::is_allowed_string_values_Valid() const{
    return m_allowed_string_values_isValid;
}

QList<QString> OAIFlag::getAppliesTo() const {
    return m_applies_to;
}
void OAIFlag::setAppliesTo(const QList<QString> &applies_to) {
    m_applies_to = applies_to;
    m_applies_to_isSet = true;
}

bool OAIFlag::is_applies_to_Set() const{
    return m_applies_to_isSet;
}

bool OAIFlag::is_applies_to_Valid() const{
    return m_applies_to_isValid;
}

bool OAIFlag::isInBeta() const {
    return m_in_beta;
}
void OAIFlag::setInBeta(const bool &in_beta) {
    m_in_beta = in_beta;
    m_in_beta_isSet = true;
}

bool OAIFlag::is_in_beta_Set() const{
    return m_in_beta_isSet;
}

bool OAIFlag::is_in_beta_Valid() const{
    return m_in_beta_isValid;
}

QString OAIFlag::getKind() const {
    return m_kind;
}
void OAIFlag::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIFlag::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIFlag::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIFlag::getMaxValue() const {
    return m_max_value;
}
void OAIFlag::setMaxValue(const QString &max_value) {
    m_max_value = max_value;
    m_max_value_isSet = true;
}

bool OAIFlag::is_max_value_Set() const{
    return m_max_value_isSet;
}

bool OAIFlag::is_max_value_Valid() const{
    return m_max_value_isValid;
}

QString OAIFlag::getMinValue() const {
    return m_min_value;
}
void OAIFlag::setMinValue(const QString &min_value) {
    m_min_value = min_value;
    m_min_value_isSet = true;
}

bool OAIFlag::is_min_value_Set() const{
    return m_min_value_isSet;
}

bool OAIFlag::is_min_value_Valid() const{
    return m_min_value_isValid;
}

QString OAIFlag::getName() const {
    return m_name;
}
void OAIFlag::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFlag::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFlag::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIFlag::isRequiresRestart() const {
    return m_requires_restart;
}
void OAIFlag::setRequiresRestart(const bool &requires_restart) {
    m_requires_restart = requires_restart;
    m_requires_restart_isSet = true;
}

bool OAIFlag::is_requires_restart_Set() const{
    return m_requires_restart_isSet;
}

bool OAIFlag::is_requires_restart_Valid() const{
    return m_requires_restart_isValid;
}

QString OAIFlag::getType() const {
    return m_type;
}
void OAIFlag::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIFlag::is_type_Set() const{
    return m_type_isSet;
}

bool OAIFlag::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIFlag::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_int_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_string_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_applies_to.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_beta_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requires_restart_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlag::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
