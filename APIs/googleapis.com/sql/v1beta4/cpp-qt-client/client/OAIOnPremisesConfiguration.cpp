/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnPremisesConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnPremisesConfiguration::OAIOnPremisesConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnPremisesConfiguration::OAIOnPremisesConfiguration() {
    this->initializeModel();
}

OAIOnPremisesConfiguration::~OAIOnPremisesConfiguration() {}

void OAIOnPremisesConfiguration::initializeModel() {

    m_ca_certificate_isSet = false;
    m_ca_certificate_isValid = false;

    m_client_certificate_isSet = false;
    m_client_certificate_isValid = false;

    m_client_key_isSet = false;
    m_client_key_isValid = false;

    m_dump_file_path_isSet = false;
    m_dump_file_path_isValid = false;

    m_host_port_isSet = false;
    m_host_port_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_source_instance_isSet = false;
    m_source_instance_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIOnPremisesConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnPremisesConfiguration::fromJsonObject(QJsonObject json) {

    m_ca_certificate_isValid = ::OpenAPI::fromJsonValue(m_ca_certificate, json[QString("caCertificate")]);
    m_ca_certificate_isSet = !json[QString("caCertificate")].isNull() && m_ca_certificate_isValid;

    m_client_certificate_isValid = ::OpenAPI::fromJsonValue(m_client_certificate, json[QString("clientCertificate")]);
    m_client_certificate_isSet = !json[QString("clientCertificate")].isNull() && m_client_certificate_isValid;

    m_client_key_isValid = ::OpenAPI::fromJsonValue(m_client_key, json[QString("clientKey")]);
    m_client_key_isSet = !json[QString("clientKey")].isNull() && m_client_key_isValid;

    m_dump_file_path_isValid = ::OpenAPI::fromJsonValue(m_dump_file_path, json[QString("dumpFilePath")]);
    m_dump_file_path_isSet = !json[QString("dumpFilePath")].isNull() && m_dump_file_path_isValid;

    m_host_port_isValid = ::OpenAPI::fromJsonValue(m_host_port, json[QString("hostPort")]);
    m_host_port_isSet = !json[QString("hostPort")].isNull() && m_host_port_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_source_instance_isValid = ::OpenAPI::fromJsonValue(m_source_instance, json[QString("sourceInstance")]);
    m_source_instance_isSet = !json[QString("sourceInstance")].isNull() && m_source_instance_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIOnPremisesConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnPremisesConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_ca_certificate_isSet) {
        obj.insert(QString("caCertificate"), ::OpenAPI::toJsonValue(m_ca_certificate));
    }
    if (m_client_certificate_isSet) {
        obj.insert(QString("clientCertificate"), ::OpenAPI::toJsonValue(m_client_certificate));
    }
    if (m_client_key_isSet) {
        obj.insert(QString("clientKey"), ::OpenAPI::toJsonValue(m_client_key));
    }
    if (m_dump_file_path_isSet) {
        obj.insert(QString("dumpFilePath"), ::OpenAPI::toJsonValue(m_dump_file_path));
    }
    if (m_host_port_isSet) {
        obj.insert(QString("hostPort"), ::OpenAPI::toJsonValue(m_host_port));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_source_instance.isSet()) {
        obj.insert(QString("sourceInstance"), ::OpenAPI::toJsonValue(m_source_instance));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIOnPremisesConfiguration::getCaCertificate() const {
    return m_ca_certificate;
}
void OAIOnPremisesConfiguration::setCaCertificate(const QString &ca_certificate) {
    m_ca_certificate = ca_certificate;
    m_ca_certificate_isSet = true;
}

bool OAIOnPremisesConfiguration::is_ca_certificate_Set() const{
    return m_ca_certificate_isSet;
}

bool OAIOnPremisesConfiguration::is_ca_certificate_Valid() const{
    return m_ca_certificate_isValid;
}

QString OAIOnPremisesConfiguration::getClientCertificate() const {
    return m_client_certificate;
}
void OAIOnPremisesConfiguration::setClientCertificate(const QString &client_certificate) {
    m_client_certificate = client_certificate;
    m_client_certificate_isSet = true;
}

bool OAIOnPremisesConfiguration::is_client_certificate_Set() const{
    return m_client_certificate_isSet;
}

bool OAIOnPremisesConfiguration::is_client_certificate_Valid() const{
    return m_client_certificate_isValid;
}

QString OAIOnPremisesConfiguration::getClientKey() const {
    return m_client_key;
}
void OAIOnPremisesConfiguration::setClientKey(const QString &client_key) {
    m_client_key = client_key;
    m_client_key_isSet = true;
}

bool OAIOnPremisesConfiguration::is_client_key_Set() const{
    return m_client_key_isSet;
}

bool OAIOnPremisesConfiguration::is_client_key_Valid() const{
    return m_client_key_isValid;
}

QString OAIOnPremisesConfiguration::getDumpFilePath() const {
    return m_dump_file_path;
}
void OAIOnPremisesConfiguration::setDumpFilePath(const QString &dump_file_path) {
    m_dump_file_path = dump_file_path;
    m_dump_file_path_isSet = true;
}

bool OAIOnPremisesConfiguration::is_dump_file_path_Set() const{
    return m_dump_file_path_isSet;
}

bool OAIOnPremisesConfiguration::is_dump_file_path_Valid() const{
    return m_dump_file_path_isValid;
}

QString OAIOnPremisesConfiguration::getHostPort() const {
    return m_host_port;
}
void OAIOnPremisesConfiguration::setHostPort(const QString &host_port) {
    m_host_port = host_port;
    m_host_port_isSet = true;
}

bool OAIOnPremisesConfiguration::is_host_port_Set() const{
    return m_host_port_isSet;
}

bool OAIOnPremisesConfiguration::is_host_port_Valid() const{
    return m_host_port_isValid;
}

QString OAIOnPremisesConfiguration::getKind() const {
    return m_kind;
}
void OAIOnPremisesConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIOnPremisesConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIOnPremisesConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIOnPremisesConfiguration::getPassword() const {
    return m_password;
}
void OAIOnPremisesConfiguration::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIOnPremisesConfiguration::is_password_Set() const{
    return m_password_isSet;
}

bool OAIOnPremisesConfiguration::is_password_Valid() const{
    return m_password_isValid;
}

OAIInstanceReference OAIOnPremisesConfiguration::getSourceInstance() const {
    return m_source_instance;
}
void OAIOnPremisesConfiguration::setSourceInstance(const OAIInstanceReference &source_instance) {
    m_source_instance = source_instance;
    m_source_instance_isSet = true;
}

bool OAIOnPremisesConfiguration::is_source_instance_Set() const{
    return m_source_instance_isSet;
}

bool OAIOnPremisesConfiguration::is_source_instance_Valid() const{
    return m_source_instance_isValid;
}

QString OAIOnPremisesConfiguration::getUsername() const {
    return m_username;
}
void OAIOnPremisesConfiguration::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIOnPremisesConfiguration::is_username_Set() const{
    return m_username_isSet;
}

bool OAIOnPremisesConfiguration::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIOnPremisesConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ca_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dump_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_instance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnPremisesConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
