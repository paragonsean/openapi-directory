/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_dual_password_type_isSet = false;
    m_dual_password_type_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_host_isSet = false;
    m_host_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_password_policy_isSet = false;
    m_password_policy_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_sqlserver_user_details_isSet = false;
    m_sqlserver_user_details_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_dual_password_type_isValid = ::OpenAPI::fromJsonValue(m_dual_password_type, json[QString("dualPasswordType")]);
    m_dual_password_type_isSet = !json[QString("dualPasswordType")].isNull() && m_dual_password_type_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_host_isValid = ::OpenAPI::fromJsonValue(m_host, json[QString("host")]);
    m_host_isSet = !json[QString("host")].isNull() && m_host_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_password_policy_isValid = ::OpenAPI::fromJsonValue(m_password_policy, json[QString("passwordPolicy")]);
    m_password_policy_isSet = !json[QString("passwordPolicy")].isNull() && m_password_policy_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_sqlserver_user_details_isValid = ::OpenAPI::fromJsonValue(m_sqlserver_user_details, json[QString("sqlserverUserDetails")]);
    m_sqlserver_user_details_isSet = !json[QString("sqlserverUserDetails")].isNull() && m_sqlserver_user_details_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_dual_password_type_isSet) {
        obj.insert(QString("dualPasswordType"), ::OpenAPI::toJsonValue(m_dual_password_type));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_host_isSet) {
        obj.insert(QString("host"), ::OpenAPI::toJsonValue(m_host));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_password_policy.isSet()) {
        obj.insert(QString("passwordPolicy"), ::OpenAPI::toJsonValue(m_password_policy));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_sqlserver_user_details.isSet()) {
        obj.insert(QString("sqlserverUserDetails"), ::OpenAPI::toJsonValue(m_sqlserver_user_details));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIUser::getDualPasswordType() const {
    return m_dual_password_type;
}
void OAIUser::setDualPasswordType(const QString &dual_password_type) {
    m_dual_password_type = dual_password_type;
    m_dual_password_type_isSet = true;
}

bool OAIUser::is_dual_password_type_Set() const{
    return m_dual_password_type_isSet;
}

bool OAIUser::is_dual_password_type_Valid() const{
    return m_dual_password_type_isValid;
}

QString OAIUser::getEtag() const {
    return m_etag;
}
void OAIUser::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIUser::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIUser::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIUser::getHost() const {
    return m_host;
}
void OAIUser::setHost(const QString &host) {
    m_host = host;
    m_host_isSet = true;
}

bool OAIUser::is_host_Set() const{
    return m_host_isSet;
}

bool OAIUser::is_host_Valid() const{
    return m_host_isValid;
}

QString OAIUser::getInstance() const {
    return m_instance;
}
void OAIUser::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIUser::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIUser::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIUser::getKind() const {
    return m_kind;
}
void OAIUser::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIUser::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIUser::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getPassword() const {
    return m_password;
}
void OAIUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUser::is_password_Valid() const{
    return m_password_isValid;
}

OAIUserPasswordValidationPolicy OAIUser::getPasswordPolicy() const {
    return m_password_policy;
}
void OAIUser::setPasswordPolicy(const OAIUserPasswordValidationPolicy &password_policy) {
    m_password_policy = password_policy;
    m_password_policy_isSet = true;
}

bool OAIUser::is_password_policy_Set() const{
    return m_password_policy_isSet;
}

bool OAIUser::is_password_policy_Valid() const{
    return m_password_policy_isValid;
}

QString OAIUser::getProject() const {
    return m_project;
}
void OAIUser::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIUser::is_project_Set() const{
    return m_project_isSet;
}

bool OAIUser::is_project_Valid() const{
    return m_project_isValid;
}

OAISqlServerUserDetails OAIUser::getSqlserverUserDetails() const {
    return m_sqlserver_user_details;
}
void OAIUser::setSqlserverUserDetails(const OAISqlServerUserDetails &sqlserver_user_details) {
    m_sqlserver_user_details = sqlserver_user_details;
    m_sqlserver_user_details_isSet = true;
}

bool OAIUser::is_sqlserver_user_details_Set() const{
    return m_sqlserver_user_details_isSet;
}

bool OAIUser::is_sqlserver_user_details_Valid() const{
    return m_sqlserver_user_details_isValid;
}

QString OAIUser::getType() const {
    return m_type;
}
void OAIUser::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUser::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUser::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dual_password_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqlserver_user_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
