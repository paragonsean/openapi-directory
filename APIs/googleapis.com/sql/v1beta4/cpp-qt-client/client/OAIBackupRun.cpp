/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupRun.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupRun::OAIBackupRun(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupRun::OAIBackupRun() {
    this->initializeModel();
}

OAIBackupRun::~OAIBackupRun() {}

void OAIBackupRun::initializeModel() {

    m_backup_kind_isSet = false;
    m_backup_kind_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disk_encryption_configuration_isSet = false;
    m_disk_encryption_configuration_isValid = false;

    m_disk_encryption_status_isSet = false;
    m_disk_encryption_status_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_enqueued_time_isSet = false;
    m_enqueued_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_window_start_time_isSet = false;
    m_window_start_time_isValid = false;
}

void OAIBackupRun::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupRun::fromJsonObject(QJsonObject json) {

    m_backup_kind_isValid = ::OpenAPI::fromJsonValue(m_backup_kind, json[QString("backupKind")]);
    m_backup_kind_isSet = !json[QString("backupKind")].isNull() && m_backup_kind_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disk_encryption_configuration_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_configuration, json[QString("diskEncryptionConfiguration")]);
    m_disk_encryption_configuration_isSet = !json[QString("diskEncryptionConfiguration")].isNull() && m_disk_encryption_configuration_isValid;

    m_disk_encryption_status_isValid = ::OpenAPI::fromJsonValue(m_disk_encryption_status, json[QString("diskEncryptionStatus")]);
    m_disk_encryption_status_isSet = !json[QString("diskEncryptionStatus")].isNull() && m_disk_encryption_status_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_enqueued_time_isValid = ::OpenAPI::fromJsonValue(m_enqueued_time, json[QString("enqueuedTime")]);
    m_enqueued_time_isSet = !json[QString("enqueuedTime")].isNull() && m_enqueued_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_window_start_time_isValid = ::OpenAPI::fromJsonValue(m_window_start_time, json[QString("windowStartTime")]);
    m_window_start_time_isSet = !json[QString("windowStartTime")].isNull() && m_window_start_time_isValid;
}

QString OAIBackupRun::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupRun::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_kind_isSet) {
        obj.insert(QString("backupKind"), ::OpenAPI::toJsonValue(m_backup_kind));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disk_encryption_configuration.isSet()) {
        obj.insert(QString("diskEncryptionConfiguration"), ::OpenAPI::toJsonValue(m_disk_encryption_configuration));
    }
    if (m_disk_encryption_status.isSet()) {
        obj.insert(QString("diskEncryptionStatus"), ::OpenAPI::toJsonValue(m_disk_encryption_status));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_enqueued_time_isSet) {
        obj.insert(QString("enqueuedTime"), ::OpenAPI::toJsonValue(m_enqueued_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_window_start_time_isSet) {
        obj.insert(QString("windowStartTime"), ::OpenAPI::toJsonValue(m_window_start_time));
    }
    return obj;
}

QString OAIBackupRun::getBackupKind() const {
    return m_backup_kind;
}
void OAIBackupRun::setBackupKind(const QString &backup_kind) {
    m_backup_kind = backup_kind;
    m_backup_kind_isSet = true;
}

bool OAIBackupRun::is_backup_kind_Set() const{
    return m_backup_kind_isSet;
}

bool OAIBackupRun::is_backup_kind_Valid() const{
    return m_backup_kind_isValid;
}

QString OAIBackupRun::getDescription() const {
    return m_description;
}
void OAIBackupRun::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBackupRun::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBackupRun::is_description_Valid() const{
    return m_description_isValid;
}

OAIDiskEncryptionConfiguration OAIBackupRun::getDiskEncryptionConfiguration() const {
    return m_disk_encryption_configuration;
}
void OAIBackupRun::setDiskEncryptionConfiguration(const OAIDiskEncryptionConfiguration &disk_encryption_configuration) {
    m_disk_encryption_configuration = disk_encryption_configuration;
    m_disk_encryption_configuration_isSet = true;
}

bool OAIBackupRun::is_disk_encryption_configuration_Set() const{
    return m_disk_encryption_configuration_isSet;
}

bool OAIBackupRun::is_disk_encryption_configuration_Valid() const{
    return m_disk_encryption_configuration_isValid;
}

OAIDiskEncryptionStatus OAIBackupRun::getDiskEncryptionStatus() const {
    return m_disk_encryption_status;
}
void OAIBackupRun::setDiskEncryptionStatus(const OAIDiskEncryptionStatus &disk_encryption_status) {
    m_disk_encryption_status = disk_encryption_status;
    m_disk_encryption_status_isSet = true;
}

bool OAIBackupRun::is_disk_encryption_status_Set() const{
    return m_disk_encryption_status_isSet;
}

bool OAIBackupRun::is_disk_encryption_status_Valid() const{
    return m_disk_encryption_status_isValid;
}

QString OAIBackupRun::getEndTime() const {
    return m_end_time;
}
void OAIBackupRun::setEndTime(const QString &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIBackupRun::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIBackupRun::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIBackupRun::getEnqueuedTime() const {
    return m_enqueued_time;
}
void OAIBackupRun::setEnqueuedTime(const QString &enqueued_time) {
    m_enqueued_time = enqueued_time;
    m_enqueued_time_isSet = true;
}

bool OAIBackupRun::is_enqueued_time_Set() const{
    return m_enqueued_time_isSet;
}

bool OAIBackupRun::is_enqueued_time_Valid() const{
    return m_enqueued_time_isValid;
}

OAIOperationError OAIBackupRun::getError() const {
    return m_error;
}
void OAIBackupRun::setError(const OAIOperationError &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIBackupRun::is_error_Set() const{
    return m_error_isSet;
}

bool OAIBackupRun::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIBackupRun::getId() const {
    return m_id;
}
void OAIBackupRun::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIBackupRun::is_id_Set() const{
    return m_id_isSet;
}

bool OAIBackupRun::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIBackupRun::getInstance() const {
    return m_instance;
}
void OAIBackupRun::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIBackupRun::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIBackupRun::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIBackupRun::getKind() const {
    return m_kind;
}
void OAIBackupRun::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBackupRun::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBackupRun::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIBackupRun::getLocation() const {
    return m_location;
}
void OAIBackupRun::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBackupRun::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBackupRun::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIBackupRun::getSelfLink() const {
    return m_self_link;
}
void OAIBackupRun::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIBackupRun::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIBackupRun::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIBackupRun::getStartTime() const {
    return m_start_time;
}
void OAIBackupRun::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBackupRun::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBackupRun::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIBackupRun::getStatus() const {
    return m_status;
}
void OAIBackupRun::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIBackupRun::is_status_Set() const{
    return m_status_isSet;
}

bool OAIBackupRun::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIBackupRun::getTimeZone() const {
    return m_time_zone;
}
void OAIBackupRun::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIBackupRun::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIBackupRun::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QString OAIBackupRun::getType() const {
    return m_type;
}
void OAIBackupRun::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBackupRun::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBackupRun::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIBackupRun::getWindowStartTime() const {
    return m_window_start_time;
}
void OAIBackupRun::setWindowStartTime(const QString &window_start_time) {
    m_window_start_time = window_start_time;
    m_window_start_time_isSet = true;
}

bool OAIBackupRun::is_window_start_time_Set() const{
    return m_window_start_time_isSet;
}

bool OAIBackupRun::is_window_start_time_Valid() const{
    return m_window_start_time_isValid;
}

bool OAIBackupRun::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_encryption_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disk_encryption_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enqueued_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_window_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupRun::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
