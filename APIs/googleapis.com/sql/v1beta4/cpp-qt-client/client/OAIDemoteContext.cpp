/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDemoteContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDemoteContext::OAIDemoteContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDemoteContext::OAIDemoteContext() {
    this->initializeModel();
}

OAIDemoteContext::~OAIDemoteContext() {}

void OAIDemoteContext::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_source_representative_instance_name_isSet = false;
    m_source_representative_instance_name_isValid = false;
}

void OAIDemoteContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDemoteContext::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_source_representative_instance_name_isValid = ::OpenAPI::fromJsonValue(m_source_representative_instance_name, json[QString("sourceRepresentativeInstanceName")]);
    m_source_representative_instance_name_isSet = !json[QString("sourceRepresentativeInstanceName")].isNull() && m_source_representative_instance_name_isValid;
}

QString OAIDemoteContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDemoteContext::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_source_representative_instance_name_isSet) {
        obj.insert(QString("sourceRepresentativeInstanceName"), ::OpenAPI::toJsonValue(m_source_representative_instance_name));
    }
    return obj;
}

QString OAIDemoteContext::getKind() const {
    return m_kind;
}
void OAIDemoteContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDemoteContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDemoteContext::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDemoteContext::getSourceRepresentativeInstanceName() const {
    return m_source_representative_instance_name;
}
void OAIDemoteContext::setSourceRepresentativeInstanceName(const QString &source_representative_instance_name) {
    m_source_representative_instance_name = source_representative_instance_name;
    m_source_representative_instance_name_isSet = true;
}

bool OAIDemoteContext::is_source_representative_instance_name_Set() const{
    return m_source_representative_instance_name_isSet;
}

bool OAIDemoteContext::is_source_representative_instance_name_Valid() const{
    return m_source_representative_instance_name_isValid;
}

bool OAIDemoteContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_representative_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDemoteContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
