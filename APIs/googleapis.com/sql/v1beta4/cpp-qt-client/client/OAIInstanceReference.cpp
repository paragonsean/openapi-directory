/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstanceReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstanceReference::OAIInstanceReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstanceReference::OAIInstanceReference() {
    this->initializeModel();
}

OAIInstanceReference::~OAIInstanceReference() {}

void OAIInstanceReference::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIInstanceReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstanceReference::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIInstanceReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstanceReference::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

QString OAIInstanceReference::getName() const {
    return m_name;
}
void OAIInstanceReference::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstanceReference::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstanceReference::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInstanceReference::getProject() const {
    return m_project;
}
void OAIInstanceReference::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIInstanceReference::is_project_Set() const{
    return m_project_isSet;
}

bool OAIInstanceReference::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIInstanceReference::getRegion() const {
    return m_region;
}
void OAIInstanceReference::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIInstanceReference::is_region_Set() const{
    return m_region_isSet;
}

bool OAIInstanceReference::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIInstanceReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstanceReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
