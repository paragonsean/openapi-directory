/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRestoreBackupContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRestoreBackupContext::OAIRestoreBackupContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRestoreBackupContext::OAIRestoreBackupContext() {
    this->initializeModel();
}

OAIRestoreBackupContext::~OAIRestoreBackupContext() {}

void OAIRestoreBackupContext::initializeModel() {

    m_backup_run_id_isSet = false;
    m_backup_run_id_isValid = false;

    m_instance_id_isSet = false;
    m_instance_id_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;
}

void OAIRestoreBackupContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRestoreBackupContext::fromJsonObject(QJsonObject json) {

    m_backup_run_id_isValid = ::OpenAPI::fromJsonValue(m_backup_run_id, json[QString("backupRunId")]);
    m_backup_run_id_isSet = !json[QString("backupRunId")].isNull() && m_backup_run_id_isValid;

    m_instance_id_isValid = ::OpenAPI::fromJsonValue(m_instance_id, json[QString("instanceId")]);
    m_instance_id_isSet = !json[QString("instanceId")].isNull() && m_instance_id_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;
}

QString OAIRestoreBackupContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRestoreBackupContext::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_run_id_isSet) {
        obj.insert(QString("backupRunId"), ::OpenAPI::toJsonValue(m_backup_run_id));
    }
    if (m_instance_id_isSet) {
        obj.insert(QString("instanceId"), ::OpenAPI::toJsonValue(m_instance_id));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    return obj;
}

QString OAIRestoreBackupContext::getBackupRunId() const {
    return m_backup_run_id;
}
void OAIRestoreBackupContext::setBackupRunId(const QString &backup_run_id) {
    m_backup_run_id = backup_run_id;
    m_backup_run_id_isSet = true;
}

bool OAIRestoreBackupContext::is_backup_run_id_Set() const{
    return m_backup_run_id_isSet;
}

bool OAIRestoreBackupContext::is_backup_run_id_Valid() const{
    return m_backup_run_id_isValid;
}

QString OAIRestoreBackupContext::getInstanceId() const {
    return m_instance_id;
}
void OAIRestoreBackupContext::setInstanceId(const QString &instance_id) {
    m_instance_id = instance_id;
    m_instance_id_isSet = true;
}

bool OAIRestoreBackupContext::is_instance_id_Set() const{
    return m_instance_id_isSet;
}

bool OAIRestoreBackupContext::is_instance_id_Valid() const{
    return m_instance_id_isValid;
}

QString OAIRestoreBackupContext::getKind() const {
    return m_kind;
}
void OAIRestoreBackupContext::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIRestoreBackupContext::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIRestoreBackupContext::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIRestoreBackupContext::getProject() const {
    return m_project;
}
void OAIRestoreBackupContext::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIRestoreBackupContext::is_project_Set() const{
    return m_project_isSet;
}

bool OAIRestoreBackupContext::is_project_Valid() const{
    return m_project_isValid;
}

bool OAIRestoreBackupContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_run_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRestoreBackupContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
