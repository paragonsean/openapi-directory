/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupConfiguration::OAIBackupConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupConfiguration::OAIBackupConfiguration() {
    this->initializeModel();
}

OAIBackupConfiguration::~OAIBackupConfiguration() {}

void OAIBackupConfiguration::initializeModel() {

    m_backup_retention_settings_isSet = false;
    m_backup_retention_settings_isValid = false;

    m_binary_log_enabled_isSet = false;
    m_binary_log_enabled_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_point_in_time_recovery_enabled_isSet = false;
    m_point_in_time_recovery_enabled_isValid = false;

    m_replication_log_archiving_enabled_isSet = false;
    m_replication_log_archiving_enabled_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_transaction_log_retention_days_isSet = false;
    m_transaction_log_retention_days_isValid = false;
}

void OAIBackupConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupConfiguration::fromJsonObject(QJsonObject json) {

    m_backup_retention_settings_isValid = ::OpenAPI::fromJsonValue(m_backup_retention_settings, json[QString("backupRetentionSettings")]);
    m_backup_retention_settings_isSet = !json[QString("backupRetentionSettings")].isNull() && m_backup_retention_settings_isValid;

    m_binary_log_enabled_isValid = ::OpenAPI::fromJsonValue(m_binary_log_enabled, json[QString("binaryLogEnabled")]);
    m_binary_log_enabled_isSet = !json[QString("binaryLogEnabled")].isNull() && m_binary_log_enabled_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_point_in_time_recovery_enabled_isValid = ::OpenAPI::fromJsonValue(m_point_in_time_recovery_enabled, json[QString("pointInTimeRecoveryEnabled")]);
    m_point_in_time_recovery_enabled_isSet = !json[QString("pointInTimeRecoveryEnabled")].isNull() && m_point_in_time_recovery_enabled_isValid;

    m_replication_log_archiving_enabled_isValid = ::OpenAPI::fromJsonValue(m_replication_log_archiving_enabled, json[QString("replicationLogArchivingEnabled")]);
    m_replication_log_archiving_enabled_isSet = !json[QString("replicationLogArchivingEnabled")].isNull() && m_replication_log_archiving_enabled_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_transaction_log_retention_days_isValid = ::OpenAPI::fromJsonValue(m_transaction_log_retention_days, json[QString("transactionLogRetentionDays")]);
    m_transaction_log_retention_days_isSet = !json[QString("transactionLogRetentionDays")].isNull() && m_transaction_log_retention_days_isValid;
}

QString OAIBackupConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_backup_retention_settings.isSet()) {
        obj.insert(QString("backupRetentionSettings"), ::OpenAPI::toJsonValue(m_backup_retention_settings));
    }
    if (m_binary_log_enabled_isSet) {
        obj.insert(QString("binaryLogEnabled"), ::OpenAPI::toJsonValue(m_binary_log_enabled));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_point_in_time_recovery_enabled_isSet) {
        obj.insert(QString("pointInTimeRecoveryEnabled"), ::OpenAPI::toJsonValue(m_point_in_time_recovery_enabled));
    }
    if (m_replication_log_archiving_enabled_isSet) {
        obj.insert(QString("replicationLogArchivingEnabled"), ::OpenAPI::toJsonValue(m_replication_log_archiving_enabled));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_transaction_log_retention_days_isSet) {
        obj.insert(QString("transactionLogRetentionDays"), ::OpenAPI::toJsonValue(m_transaction_log_retention_days));
    }
    return obj;
}

OAIBackupRetentionSettings OAIBackupConfiguration::getBackupRetentionSettings() const {
    return m_backup_retention_settings;
}
void OAIBackupConfiguration::setBackupRetentionSettings(const OAIBackupRetentionSettings &backup_retention_settings) {
    m_backup_retention_settings = backup_retention_settings;
    m_backup_retention_settings_isSet = true;
}

bool OAIBackupConfiguration::is_backup_retention_settings_Set() const{
    return m_backup_retention_settings_isSet;
}

bool OAIBackupConfiguration::is_backup_retention_settings_Valid() const{
    return m_backup_retention_settings_isValid;
}

bool OAIBackupConfiguration::isBinaryLogEnabled() const {
    return m_binary_log_enabled;
}
void OAIBackupConfiguration::setBinaryLogEnabled(const bool &binary_log_enabled) {
    m_binary_log_enabled = binary_log_enabled;
    m_binary_log_enabled_isSet = true;
}

bool OAIBackupConfiguration::is_binary_log_enabled_Set() const{
    return m_binary_log_enabled_isSet;
}

bool OAIBackupConfiguration::is_binary_log_enabled_Valid() const{
    return m_binary_log_enabled_isValid;
}

bool OAIBackupConfiguration::isEnabled() const {
    return m_enabled;
}
void OAIBackupConfiguration::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIBackupConfiguration::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIBackupConfiguration::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIBackupConfiguration::getKind() const {
    return m_kind;
}
void OAIBackupConfiguration::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIBackupConfiguration::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIBackupConfiguration::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIBackupConfiguration::getLocation() const {
    return m_location;
}
void OAIBackupConfiguration::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIBackupConfiguration::is_location_Set() const{
    return m_location_isSet;
}

bool OAIBackupConfiguration::is_location_Valid() const{
    return m_location_isValid;
}

bool OAIBackupConfiguration::isPointInTimeRecoveryEnabled() const {
    return m_point_in_time_recovery_enabled;
}
void OAIBackupConfiguration::setPointInTimeRecoveryEnabled(const bool &point_in_time_recovery_enabled) {
    m_point_in_time_recovery_enabled = point_in_time_recovery_enabled;
    m_point_in_time_recovery_enabled_isSet = true;
}

bool OAIBackupConfiguration::is_point_in_time_recovery_enabled_Set() const{
    return m_point_in_time_recovery_enabled_isSet;
}

bool OAIBackupConfiguration::is_point_in_time_recovery_enabled_Valid() const{
    return m_point_in_time_recovery_enabled_isValid;
}

bool OAIBackupConfiguration::isReplicationLogArchivingEnabled() const {
    return m_replication_log_archiving_enabled;
}
void OAIBackupConfiguration::setReplicationLogArchivingEnabled(const bool &replication_log_archiving_enabled) {
    m_replication_log_archiving_enabled = replication_log_archiving_enabled;
    m_replication_log_archiving_enabled_isSet = true;
}

bool OAIBackupConfiguration::is_replication_log_archiving_enabled_Set() const{
    return m_replication_log_archiving_enabled_isSet;
}

bool OAIBackupConfiguration::is_replication_log_archiving_enabled_Valid() const{
    return m_replication_log_archiving_enabled_isValid;
}

QString OAIBackupConfiguration::getStartTime() const {
    return m_start_time;
}
void OAIBackupConfiguration::setStartTime(const QString &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIBackupConfiguration::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIBackupConfiguration::is_start_time_Valid() const{
    return m_start_time_isValid;
}

qint32 OAIBackupConfiguration::getTransactionLogRetentionDays() const {
    return m_transaction_log_retention_days;
}
void OAIBackupConfiguration::setTransactionLogRetentionDays(const qint32 &transaction_log_retention_days) {
    m_transaction_log_retention_days = transaction_log_retention_days;
    m_transaction_log_retention_days_isSet = true;
}

bool OAIBackupConfiguration::is_transaction_log_retention_days_Set() const{
    return m_transaction_log_retention_days_isSet;
}

bool OAIBackupConfiguration::is_transaction_log_retention_days_Valid() const{
    return m_transaction_log_retention_days_isValid;
}

bool OAIBackupConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_backup_retention_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_binary_log_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_in_time_recovery_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_replication_log_archiving_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_log_retention_days_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
