/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISslCertDetail.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISslCertDetail::OAISslCertDetail(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISslCertDetail::OAISslCertDetail() {
    this->initializeModel();
}

OAISslCertDetail::~OAISslCertDetail() {}

void OAISslCertDetail::initializeModel() {

    m_cert_info_isSet = false;
    m_cert_info_isValid = false;

    m_cert_private_key_isSet = false;
    m_cert_private_key_isValid = false;
}

void OAISslCertDetail::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISslCertDetail::fromJsonObject(QJsonObject json) {

    m_cert_info_isValid = ::OpenAPI::fromJsonValue(m_cert_info, json[QString("certInfo")]);
    m_cert_info_isSet = !json[QString("certInfo")].isNull() && m_cert_info_isValid;

    m_cert_private_key_isValid = ::OpenAPI::fromJsonValue(m_cert_private_key, json[QString("certPrivateKey")]);
    m_cert_private_key_isSet = !json[QString("certPrivateKey")].isNull() && m_cert_private_key_isValid;
}

QString OAISslCertDetail::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISslCertDetail::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_info.isSet()) {
        obj.insert(QString("certInfo"), ::OpenAPI::toJsonValue(m_cert_info));
    }
    if (m_cert_private_key_isSet) {
        obj.insert(QString("certPrivateKey"), ::OpenAPI::toJsonValue(m_cert_private_key));
    }
    return obj;
}

OAISslCert OAISslCertDetail::getCertInfo() const {
    return m_cert_info;
}
void OAISslCertDetail::setCertInfo(const OAISslCert &cert_info) {
    m_cert_info = cert_info;
    m_cert_info_isSet = true;
}

bool OAISslCertDetail::is_cert_info_Set() const{
    return m_cert_info_isSet;
}

bool OAISslCertDetail::is_cert_info_Valid() const{
    return m_cert_info_isValid;
}

QString OAISslCertDetail::getCertPrivateKey() const {
    return m_cert_private_key;
}
void OAISslCertDetail::setCertPrivateKey(const QString &cert_private_key) {
    m_cert_private_key = cert_private_key;
    m_cert_private_key_isSet = true;
}

bool OAISslCertDetail::is_cert_private_key_Set() const{
    return m_cert_private_key_isSet;
}

bool OAISslCertDetail::is_cert_private_key_Valid() const{
    return m_cert_private_key_isValid;
}

bool OAISslCertDetail::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cert_private_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISslCertDetail::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
