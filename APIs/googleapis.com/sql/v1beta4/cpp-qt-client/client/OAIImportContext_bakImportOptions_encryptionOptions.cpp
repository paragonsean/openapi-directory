/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportContext_bakImportOptions_encryptionOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportContext_bakImportOptions_encryptionOptions::OAIImportContext_bakImportOptions_encryptionOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportContext_bakImportOptions_encryptionOptions::OAIImportContext_bakImportOptions_encryptionOptions() {
    this->initializeModel();
}

OAIImportContext_bakImportOptions_encryptionOptions::~OAIImportContext_bakImportOptions_encryptionOptions() {}

void OAIImportContext_bakImportOptions_encryptionOptions::initializeModel() {

    m_cert_path_isSet = false;
    m_cert_path_isValid = false;

    m_pvk_password_isSet = false;
    m_pvk_password_isValid = false;

    m_pvk_path_isSet = false;
    m_pvk_path_isValid = false;
}

void OAIImportContext_bakImportOptions_encryptionOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportContext_bakImportOptions_encryptionOptions::fromJsonObject(QJsonObject json) {

    m_cert_path_isValid = ::OpenAPI::fromJsonValue(m_cert_path, json[QString("certPath")]);
    m_cert_path_isSet = !json[QString("certPath")].isNull() && m_cert_path_isValid;

    m_pvk_password_isValid = ::OpenAPI::fromJsonValue(m_pvk_password, json[QString("pvkPassword")]);
    m_pvk_password_isSet = !json[QString("pvkPassword")].isNull() && m_pvk_password_isValid;

    m_pvk_path_isValid = ::OpenAPI::fromJsonValue(m_pvk_path, json[QString("pvkPath")]);
    m_pvk_path_isSet = !json[QString("pvkPath")].isNull() && m_pvk_path_isValid;
}

QString OAIImportContext_bakImportOptions_encryptionOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportContext_bakImportOptions_encryptionOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_cert_path_isSet) {
        obj.insert(QString("certPath"), ::OpenAPI::toJsonValue(m_cert_path));
    }
    if (m_pvk_password_isSet) {
        obj.insert(QString("pvkPassword"), ::OpenAPI::toJsonValue(m_pvk_password));
    }
    if (m_pvk_path_isSet) {
        obj.insert(QString("pvkPath"), ::OpenAPI::toJsonValue(m_pvk_path));
    }
    return obj;
}

QString OAIImportContext_bakImportOptions_encryptionOptions::getCertPath() const {
    return m_cert_path;
}
void OAIImportContext_bakImportOptions_encryptionOptions::setCertPath(const QString &cert_path) {
    m_cert_path = cert_path;
    m_cert_path_isSet = true;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::is_cert_path_Set() const{
    return m_cert_path_isSet;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::is_cert_path_Valid() const{
    return m_cert_path_isValid;
}

QString OAIImportContext_bakImportOptions_encryptionOptions::getPvkPassword() const {
    return m_pvk_password;
}
void OAIImportContext_bakImportOptions_encryptionOptions::setPvkPassword(const QString &pvk_password) {
    m_pvk_password = pvk_password;
    m_pvk_password_isSet = true;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::is_pvk_password_Set() const{
    return m_pvk_password_isSet;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::is_pvk_password_Valid() const{
    return m_pvk_password_isValid;
}

QString OAIImportContext_bakImportOptions_encryptionOptions::getPvkPath() const {
    return m_pvk_path;
}
void OAIImportContext_bakImportOptions_encryptionOptions::setPvkPath(const QString &pvk_path) {
    m_pvk_path = pvk_path;
    m_pvk_path_isSet = true;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::is_pvk_path_Set() const{
    return m_pvk_path_isSet;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::is_pvk_path_Valid() const{
    return m_pvk_path_isValid;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cert_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvk_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pvk_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportContext_bakImportOptions_encryptionOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
