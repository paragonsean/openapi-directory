/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDatabase.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDatabase::OAIDatabase(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDatabase::OAIDatabase() {
    this->initializeModel();
}

OAIDatabase::~OAIDatabase() {}

void OAIDatabase::initializeModel() {

    m_charset_isSet = false;
    m_charset_isValid = false;

    m_collation_isSet = false;
    m_collation_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_instance_isSet = false;
    m_instance_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_sqlserver_database_details_isSet = false;
    m_sqlserver_database_details_isValid = false;
}

void OAIDatabase::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDatabase::fromJsonObject(QJsonObject json) {

    m_charset_isValid = ::OpenAPI::fromJsonValue(m_charset, json[QString("charset")]);
    m_charset_isSet = !json[QString("charset")].isNull() && m_charset_isValid;

    m_collation_isValid = ::OpenAPI::fromJsonValue(m_collation, json[QString("collation")]);
    m_collation_isSet = !json[QString("collation")].isNull() && m_collation_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_instance_isValid = ::OpenAPI::fromJsonValue(m_instance, json[QString("instance")]);
    m_instance_isSet = !json[QString("instance")].isNull() && m_instance_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_sqlserver_database_details_isValid = ::OpenAPI::fromJsonValue(m_sqlserver_database_details, json[QString("sqlserverDatabaseDetails")]);
    m_sqlserver_database_details_isSet = !json[QString("sqlserverDatabaseDetails")].isNull() && m_sqlserver_database_details_isValid;
}

QString OAIDatabase::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDatabase::asJsonObject() const {
    QJsonObject obj;
    if (m_charset_isSet) {
        obj.insert(QString("charset"), ::OpenAPI::toJsonValue(m_charset));
    }
    if (m_collation_isSet) {
        obj.insert(QString("collation"), ::OpenAPI::toJsonValue(m_collation));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_instance_isSet) {
        obj.insert(QString("instance"), ::OpenAPI::toJsonValue(m_instance));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_sqlserver_database_details.isSet()) {
        obj.insert(QString("sqlserverDatabaseDetails"), ::OpenAPI::toJsonValue(m_sqlserver_database_details));
    }
    return obj;
}

QString OAIDatabase::getCharset() const {
    return m_charset;
}
void OAIDatabase::setCharset(const QString &charset) {
    m_charset = charset;
    m_charset_isSet = true;
}

bool OAIDatabase::is_charset_Set() const{
    return m_charset_isSet;
}

bool OAIDatabase::is_charset_Valid() const{
    return m_charset_isValid;
}

QString OAIDatabase::getCollation() const {
    return m_collation;
}
void OAIDatabase::setCollation(const QString &collation) {
    m_collation = collation;
    m_collation_isSet = true;
}

bool OAIDatabase::is_collation_Set() const{
    return m_collation_isSet;
}

bool OAIDatabase::is_collation_Valid() const{
    return m_collation_isValid;
}

QString OAIDatabase::getEtag() const {
    return m_etag;
}
void OAIDatabase::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIDatabase::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIDatabase::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIDatabase::getInstance() const {
    return m_instance;
}
void OAIDatabase::setInstance(const QString &instance) {
    m_instance = instance;
    m_instance_isSet = true;
}

bool OAIDatabase::is_instance_Set() const{
    return m_instance_isSet;
}

bool OAIDatabase::is_instance_Valid() const{
    return m_instance_isValid;
}

QString OAIDatabase::getKind() const {
    return m_kind;
}
void OAIDatabase::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDatabase::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDatabase::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDatabase::getName() const {
    return m_name;
}
void OAIDatabase::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDatabase::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDatabase::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIDatabase::getProject() const {
    return m_project;
}
void OAIDatabase::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIDatabase::is_project_Set() const{
    return m_project_isSet;
}

bool OAIDatabase::is_project_Valid() const{
    return m_project_isValid;
}

QString OAIDatabase::getSelfLink() const {
    return m_self_link;
}
void OAIDatabase::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIDatabase::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIDatabase::is_self_link_Valid() const{
    return m_self_link_isValid;
}

OAISqlServerDatabaseDetails OAIDatabase::getSqlserverDatabaseDetails() const {
    return m_sqlserver_database_details;
}
void OAIDatabase::setSqlserverDatabaseDetails(const OAISqlServerDatabaseDetails &sqlserver_database_details) {
    m_sqlserver_database_details = sqlserver_database_details;
    m_sqlserver_database_details_isSet = true;
}

bool OAIDatabase::is_sqlserver_database_details_Set() const{
    return m_sqlserver_database_details_isSet;
}

bool OAIDatabase::is_sqlserver_database_details_Valid() const{
    return m_sqlserver_database_details_isValid;
}

bool OAIDatabase::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_charset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_collation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sqlserver_database_details.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDatabase::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
