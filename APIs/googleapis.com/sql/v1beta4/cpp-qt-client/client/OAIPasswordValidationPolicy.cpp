/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPasswordValidationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPasswordValidationPolicy::OAIPasswordValidationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPasswordValidationPolicy::OAIPasswordValidationPolicy() {
    this->initializeModel();
}

OAIPasswordValidationPolicy::~OAIPasswordValidationPolicy() {}

void OAIPasswordValidationPolicy::initializeModel() {

    m_complexity_isSet = false;
    m_complexity_isValid = false;

    m_disallow_compromised_credentials_isSet = false;
    m_disallow_compromised_credentials_isValid = false;

    m_disallow_username_substring_isSet = false;
    m_disallow_username_substring_isValid = false;

    m_enable_password_policy_isSet = false;
    m_enable_password_policy_isValid = false;

    m_min_length_isSet = false;
    m_min_length_isValid = false;

    m_password_change_interval_isSet = false;
    m_password_change_interval_isValid = false;

    m_reuse_interval_isSet = false;
    m_reuse_interval_isValid = false;
}

void OAIPasswordValidationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPasswordValidationPolicy::fromJsonObject(QJsonObject json) {

    m_complexity_isValid = ::OpenAPI::fromJsonValue(m_complexity, json[QString("complexity")]);
    m_complexity_isSet = !json[QString("complexity")].isNull() && m_complexity_isValid;

    m_disallow_compromised_credentials_isValid = ::OpenAPI::fromJsonValue(m_disallow_compromised_credentials, json[QString("disallowCompromisedCredentials")]);
    m_disallow_compromised_credentials_isSet = !json[QString("disallowCompromisedCredentials")].isNull() && m_disallow_compromised_credentials_isValid;

    m_disallow_username_substring_isValid = ::OpenAPI::fromJsonValue(m_disallow_username_substring, json[QString("disallowUsernameSubstring")]);
    m_disallow_username_substring_isSet = !json[QString("disallowUsernameSubstring")].isNull() && m_disallow_username_substring_isValid;

    m_enable_password_policy_isValid = ::OpenAPI::fromJsonValue(m_enable_password_policy, json[QString("enablePasswordPolicy")]);
    m_enable_password_policy_isSet = !json[QString("enablePasswordPolicy")].isNull() && m_enable_password_policy_isValid;

    m_min_length_isValid = ::OpenAPI::fromJsonValue(m_min_length, json[QString("minLength")]);
    m_min_length_isSet = !json[QString("minLength")].isNull() && m_min_length_isValid;

    m_password_change_interval_isValid = ::OpenAPI::fromJsonValue(m_password_change_interval, json[QString("passwordChangeInterval")]);
    m_password_change_interval_isSet = !json[QString("passwordChangeInterval")].isNull() && m_password_change_interval_isValid;

    m_reuse_interval_isValid = ::OpenAPI::fromJsonValue(m_reuse_interval, json[QString("reuseInterval")]);
    m_reuse_interval_isSet = !json[QString("reuseInterval")].isNull() && m_reuse_interval_isValid;
}

QString OAIPasswordValidationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPasswordValidationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_complexity_isSet) {
        obj.insert(QString("complexity"), ::OpenAPI::toJsonValue(m_complexity));
    }
    if (m_disallow_compromised_credentials_isSet) {
        obj.insert(QString("disallowCompromisedCredentials"), ::OpenAPI::toJsonValue(m_disallow_compromised_credentials));
    }
    if (m_disallow_username_substring_isSet) {
        obj.insert(QString("disallowUsernameSubstring"), ::OpenAPI::toJsonValue(m_disallow_username_substring));
    }
    if (m_enable_password_policy_isSet) {
        obj.insert(QString("enablePasswordPolicy"), ::OpenAPI::toJsonValue(m_enable_password_policy));
    }
    if (m_min_length_isSet) {
        obj.insert(QString("minLength"), ::OpenAPI::toJsonValue(m_min_length));
    }
    if (m_password_change_interval_isSet) {
        obj.insert(QString("passwordChangeInterval"), ::OpenAPI::toJsonValue(m_password_change_interval));
    }
    if (m_reuse_interval_isSet) {
        obj.insert(QString("reuseInterval"), ::OpenAPI::toJsonValue(m_reuse_interval));
    }
    return obj;
}

QString OAIPasswordValidationPolicy::getComplexity() const {
    return m_complexity;
}
void OAIPasswordValidationPolicy::setComplexity(const QString &complexity) {
    m_complexity = complexity;
    m_complexity_isSet = true;
}

bool OAIPasswordValidationPolicy::is_complexity_Set() const{
    return m_complexity_isSet;
}

bool OAIPasswordValidationPolicy::is_complexity_Valid() const{
    return m_complexity_isValid;
}

bool OAIPasswordValidationPolicy::isDisallowCompromisedCredentials() const {
    return m_disallow_compromised_credentials;
}
void OAIPasswordValidationPolicy::setDisallowCompromisedCredentials(const bool &disallow_compromised_credentials) {
    m_disallow_compromised_credentials = disallow_compromised_credentials;
    m_disallow_compromised_credentials_isSet = true;
}

bool OAIPasswordValidationPolicy::is_disallow_compromised_credentials_Set() const{
    return m_disallow_compromised_credentials_isSet;
}

bool OAIPasswordValidationPolicy::is_disallow_compromised_credentials_Valid() const{
    return m_disallow_compromised_credentials_isValid;
}

bool OAIPasswordValidationPolicy::isDisallowUsernameSubstring() const {
    return m_disallow_username_substring;
}
void OAIPasswordValidationPolicy::setDisallowUsernameSubstring(const bool &disallow_username_substring) {
    m_disallow_username_substring = disallow_username_substring;
    m_disallow_username_substring_isSet = true;
}

bool OAIPasswordValidationPolicy::is_disallow_username_substring_Set() const{
    return m_disallow_username_substring_isSet;
}

bool OAIPasswordValidationPolicy::is_disallow_username_substring_Valid() const{
    return m_disallow_username_substring_isValid;
}

bool OAIPasswordValidationPolicy::isEnablePasswordPolicy() const {
    return m_enable_password_policy;
}
void OAIPasswordValidationPolicy::setEnablePasswordPolicy(const bool &enable_password_policy) {
    m_enable_password_policy = enable_password_policy;
    m_enable_password_policy_isSet = true;
}

bool OAIPasswordValidationPolicy::is_enable_password_policy_Set() const{
    return m_enable_password_policy_isSet;
}

bool OAIPasswordValidationPolicy::is_enable_password_policy_Valid() const{
    return m_enable_password_policy_isValid;
}

qint32 OAIPasswordValidationPolicy::getMinLength() const {
    return m_min_length;
}
void OAIPasswordValidationPolicy::setMinLength(const qint32 &min_length) {
    m_min_length = min_length;
    m_min_length_isSet = true;
}

bool OAIPasswordValidationPolicy::is_min_length_Set() const{
    return m_min_length_isSet;
}

bool OAIPasswordValidationPolicy::is_min_length_Valid() const{
    return m_min_length_isValid;
}

QString OAIPasswordValidationPolicy::getPasswordChangeInterval() const {
    return m_password_change_interval;
}
void OAIPasswordValidationPolicy::setPasswordChangeInterval(const QString &password_change_interval) {
    m_password_change_interval = password_change_interval;
    m_password_change_interval_isSet = true;
}

bool OAIPasswordValidationPolicy::is_password_change_interval_Set() const{
    return m_password_change_interval_isSet;
}

bool OAIPasswordValidationPolicy::is_password_change_interval_Valid() const{
    return m_password_change_interval_isValid;
}

qint32 OAIPasswordValidationPolicy::getReuseInterval() const {
    return m_reuse_interval;
}
void OAIPasswordValidationPolicy::setReuseInterval(const qint32 &reuse_interval) {
    m_reuse_interval = reuse_interval;
    m_reuse_interval_isSet = true;
}

bool OAIPasswordValidationPolicy::is_reuse_interval_Set() const{
    return m_reuse_interval_isSet;
}

bool OAIPasswordValidationPolicy::is_reuse_interval_Valid() const{
    return m_reuse_interval_isValid;
}

bool OAIPasswordValidationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complexity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallow_compromised_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disallow_username_substring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_password_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_change_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reuse_interval_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPasswordValidationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
