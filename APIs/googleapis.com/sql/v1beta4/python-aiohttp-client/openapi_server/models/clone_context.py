# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bin_log_coordinates import BinLogCoordinates
from openapi_server import util


class CloneContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocated_ip_range: str=None, bin_log_coordinates: BinLogCoordinates=None, database_names: List[str]=None, destination_instance_name: str=None, kind: str=None, pitr_timestamp_ms: str=None, point_in_time: str=None, preferred_zone: str=None):
        """CloneContext - a model defined in OpenAPI

        :param allocated_ip_range: The allocated_ip_range of this CloneContext.
        :param bin_log_coordinates: The bin_log_coordinates of this CloneContext.
        :param database_names: The database_names of this CloneContext.
        :param destination_instance_name: The destination_instance_name of this CloneContext.
        :param kind: The kind of this CloneContext.
        :param pitr_timestamp_ms: The pitr_timestamp_ms of this CloneContext.
        :param point_in_time: The point_in_time of this CloneContext.
        :param preferred_zone: The preferred_zone of this CloneContext.
        """
        self.openapi_types = {
            'allocated_ip_range': str,
            'bin_log_coordinates': BinLogCoordinates,
            'database_names': List[str],
            'destination_instance_name': str,
            'kind': str,
            'pitr_timestamp_ms': str,
            'point_in_time': str,
            'preferred_zone': str
        }

        self.attribute_map = {
            'allocated_ip_range': 'allocatedIpRange',
            'bin_log_coordinates': 'binLogCoordinates',
            'database_names': 'databaseNames',
            'destination_instance_name': 'destinationInstanceName',
            'kind': 'kind',
            'pitr_timestamp_ms': 'pitrTimestampMs',
            'point_in_time': 'pointInTime',
            'preferred_zone': 'preferredZone'
        }

        self._allocated_ip_range = allocated_ip_range
        self._bin_log_coordinates = bin_log_coordinates
        self._database_names = database_names
        self._destination_instance_name = destination_instance_name
        self._kind = kind
        self._pitr_timestamp_ms = pitr_timestamp_ms
        self._point_in_time = point_in_time
        self._preferred_zone = preferred_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CloneContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CloneContext of this CloneContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocated_ip_range(self):
        """Gets the allocated_ip_range of this CloneContext.

        The name of the allocated ip range for the private ip Cloud SQL instance. For example: \"google-managed-services-default\". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.

        :return: The allocated_ip_range of this CloneContext.
        :rtype: str
        """
        return self._allocated_ip_range

    @allocated_ip_range.setter
    def allocated_ip_range(self, allocated_ip_range):
        """Sets the allocated_ip_range of this CloneContext.

        The name of the allocated ip range for the private ip Cloud SQL instance. For example: \"google-managed-services-default\". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.

        :param allocated_ip_range: The allocated_ip_range of this CloneContext.
        :type allocated_ip_range: str
        """

        self._allocated_ip_range = allocated_ip_range

    @property
    def bin_log_coordinates(self):
        """Gets the bin_log_coordinates of this CloneContext.


        :return: The bin_log_coordinates of this CloneContext.
        :rtype: BinLogCoordinates
        """
        return self._bin_log_coordinates

    @bin_log_coordinates.setter
    def bin_log_coordinates(self, bin_log_coordinates):
        """Sets the bin_log_coordinates of this CloneContext.


        :param bin_log_coordinates: The bin_log_coordinates of this CloneContext.
        :type bin_log_coordinates: BinLogCoordinates
        """

        self._bin_log_coordinates = bin_log_coordinates

    @property
    def database_names(self):
        """Gets the database_names of this CloneContext.

        (SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.

        :return: The database_names of this CloneContext.
        :rtype: List[str]
        """
        return self._database_names

    @database_names.setter
    def database_names(self, database_names):
        """Sets the database_names of this CloneContext.

        (SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.

        :param database_names: The database_names of this CloneContext.
        :type database_names: List[str]
        """

        self._database_names = database_names

    @property
    def destination_instance_name(self):
        """Gets the destination_instance_name of this CloneContext.

        Name of the Cloud SQL instance to be created as a clone.

        :return: The destination_instance_name of this CloneContext.
        :rtype: str
        """
        return self._destination_instance_name

    @destination_instance_name.setter
    def destination_instance_name(self, destination_instance_name):
        """Sets the destination_instance_name of this CloneContext.

        Name of the Cloud SQL instance to be created as a clone.

        :param destination_instance_name: The destination_instance_name of this CloneContext.
        :type destination_instance_name: str
        """

        self._destination_instance_name = destination_instance_name

    @property
    def kind(self):
        """Gets the kind of this CloneContext.

        This is always `sql#cloneContext`.

        :return: The kind of this CloneContext.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this CloneContext.

        This is always `sql#cloneContext`.

        :param kind: The kind of this CloneContext.
        :type kind: str
        """

        self._kind = kind

    @property
    def pitr_timestamp_ms(self):
        """Gets the pitr_timestamp_ms of this CloneContext.

        Reserved for future use.

        :return: The pitr_timestamp_ms of this CloneContext.
        :rtype: str
        """
        return self._pitr_timestamp_ms

    @pitr_timestamp_ms.setter
    def pitr_timestamp_ms(self, pitr_timestamp_ms):
        """Sets the pitr_timestamp_ms of this CloneContext.

        Reserved for future use.

        :param pitr_timestamp_ms: The pitr_timestamp_ms of this CloneContext.
        :type pitr_timestamp_ms: str
        """

        self._pitr_timestamp_ms = pitr_timestamp_ms

    @property
    def point_in_time(self):
        """Gets the point_in_time of this CloneContext.

        Timestamp, if specified, identifies the time to which the source instance is cloned.

        :return: The point_in_time of this CloneContext.
        :rtype: str
        """
        return self._point_in_time

    @point_in_time.setter
    def point_in_time(self, point_in_time):
        """Sets the point_in_time of this CloneContext.

        Timestamp, if specified, identifies the time to which the source instance is cloned.

        :param point_in_time: The point_in_time of this CloneContext.
        :type point_in_time: str
        """

        self._point_in_time = point_in_time

    @property
    def preferred_zone(self):
        """Gets the preferred_zone of this CloneContext.

        Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.

        :return: The preferred_zone of this CloneContext.
        :rtype: str
        """
        return self._preferred_zone

    @preferred_zone.setter
    def preferred_zone(self, preferred_zone):
        """Sets the preferred_zone of this CloneContext.

        Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.

        :param preferred_zone: The preferred_zone of this CloneContext.
        :type preferred_zone: str
        """

        self._preferred_zone = preferred_zone
