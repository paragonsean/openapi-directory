# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_context_bak_import_options_encryption_options import ImportContextBakImportOptionsEncryptionOptions
from openapi_server import util


class ImportContextBakImportOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bak_type: str=None, encryption_options: ImportContextBakImportOptionsEncryptionOptions=None, no_recovery: bool=None, recovery_only: bool=None, stop_at: str=None, stop_at_mark: str=None, striped: bool=None):
        """ImportContextBakImportOptions - a model defined in OpenAPI

        :param bak_type: The bak_type of this ImportContextBakImportOptions.
        :param encryption_options: The encryption_options of this ImportContextBakImportOptions.
        :param no_recovery: The no_recovery of this ImportContextBakImportOptions.
        :param recovery_only: The recovery_only of this ImportContextBakImportOptions.
        :param stop_at: The stop_at of this ImportContextBakImportOptions.
        :param stop_at_mark: The stop_at_mark of this ImportContextBakImportOptions.
        :param striped: The striped of this ImportContextBakImportOptions.
        """
        self.openapi_types = {
            'bak_type': str,
            'encryption_options': ImportContextBakImportOptionsEncryptionOptions,
            'no_recovery': bool,
            'recovery_only': bool,
            'stop_at': str,
            'stop_at_mark': str,
            'striped': bool
        }

        self.attribute_map = {
            'bak_type': 'bakType',
            'encryption_options': 'encryptionOptions',
            'no_recovery': 'noRecovery',
            'recovery_only': 'recoveryOnly',
            'stop_at': 'stopAt',
            'stop_at_mark': 'stopAtMark',
            'striped': 'striped'
        }

        self._bak_type = bak_type
        self._encryption_options = encryption_options
        self._no_recovery = no_recovery
        self._recovery_only = recovery_only
        self._stop_at = stop_at
        self._stop_at_mark = stop_at_mark
        self._striped = striped

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportContextBakImportOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportContext_bakImportOptions of this ImportContextBakImportOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bak_type(self):
        """Gets the bak_type of this ImportContextBakImportOptions.

        Type of the bak content, FULL or DIFF.

        :return: The bak_type of this ImportContextBakImportOptions.
        :rtype: str
        """
        return self._bak_type

    @bak_type.setter
    def bak_type(self, bak_type):
        """Sets the bak_type of this ImportContextBakImportOptions.

        Type of the bak content, FULL or DIFF.

        :param bak_type: The bak_type of this ImportContextBakImportOptions.
        :type bak_type: str
        """
        allowed_values = ["BAK_TYPE_UNSPECIFIED", "FULL", "DIFF", "TLOG"]  # noqa: E501
        if bak_type not in allowed_values:
            raise ValueError(
                "Invalid value for `bak_type` ({0}), must be one of {1}"
                .format(bak_type, allowed_values)
            )

        self._bak_type = bak_type

    @property
    def encryption_options(self):
        """Gets the encryption_options of this ImportContextBakImportOptions.


        :return: The encryption_options of this ImportContextBakImportOptions.
        :rtype: ImportContextBakImportOptionsEncryptionOptions
        """
        return self._encryption_options

    @encryption_options.setter
    def encryption_options(self, encryption_options):
        """Sets the encryption_options of this ImportContextBakImportOptions.


        :param encryption_options: The encryption_options of this ImportContextBakImportOptions.
        :type encryption_options: ImportContextBakImportOptionsEncryptionOptions
        """

        self._encryption_options = encryption_options

    @property
    def no_recovery(self):
        """Gets the no_recovery of this ImportContextBakImportOptions.

        Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.

        :return: The no_recovery of this ImportContextBakImportOptions.
        :rtype: bool
        """
        return self._no_recovery

    @no_recovery.setter
    def no_recovery(self, no_recovery):
        """Sets the no_recovery of this ImportContextBakImportOptions.

        Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.

        :param no_recovery: The no_recovery of this ImportContextBakImportOptions.
        :type no_recovery: bool
        """

        self._no_recovery = no_recovery

    @property
    def recovery_only(self):
        """Gets the recovery_only of this ImportContextBakImportOptions.

        Whether or not the backup importing request will just bring database online without downloading Bak content only one of \"no_recovery\" and \"recovery_only\" can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.

        :return: The recovery_only of this ImportContextBakImportOptions.
        :rtype: bool
        """
        return self._recovery_only

    @recovery_only.setter
    def recovery_only(self, recovery_only):
        """Sets the recovery_only of this ImportContextBakImportOptions.

        Whether or not the backup importing request will just bring database online without downloading Bak content only one of \"no_recovery\" and \"recovery_only\" can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.

        :param recovery_only: The recovery_only of this ImportContextBakImportOptions.
        :type recovery_only: bool
        """

        self._recovery_only = recovery_only

    @property
    def stop_at(self):
        """Gets the stop_at of this ImportContextBakImportOptions.

        Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.

        :return: The stop_at of this ImportContextBakImportOptions.
        :rtype: str
        """
        return self._stop_at

    @stop_at.setter
    def stop_at(self, stop_at):
        """Sets the stop_at of this ImportContextBakImportOptions.

        Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.

        :param stop_at: The stop_at of this ImportContextBakImportOptions.
        :type stop_at: str
        """

        self._stop_at = stop_at

    @property
    def stop_at_mark(self):
        """Gets the stop_at_mark of this ImportContextBakImportOptions.

        Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.

        :return: The stop_at_mark of this ImportContextBakImportOptions.
        :rtype: str
        """
        return self._stop_at_mark

    @stop_at_mark.setter
    def stop_at_mark(self, stop_at_mark):
        """Sets the stop_at_mark of this ImportContextBakImportOptions.

        Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.

        :param stop_at_mark: The stop_at_mark of this ImportContextBakImportOptions.
        :type stop_at_mark: str
        """

        self._stop_at_mark = stop_at_mark

    @property
    def striped(self):
        """Gets the striped of this ImportContextBakImportOptions.

        Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server.

        :return: The striped of this ImportContextBakImportOptions.
        :rtype: bool
        """
        return self._striped

    @striped.setter
    def striped(self, striped):
        """Sets the striped of this ImportContextBakImportOptions.

        Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server.

        :param striped: The striped of this ImportContextBakImportOptions.
        :type striped: bool
        """

        self._striped = striped
