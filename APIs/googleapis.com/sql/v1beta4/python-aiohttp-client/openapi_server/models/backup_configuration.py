# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.backup_retention_settings import BackupRetentionSettings
from openapi_server import util


class BackupConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backup_retention_settings: BackupRetentionSettings=None, binary_log_enabled: bool=None, enabled: bool=None, kind: str=None, location: str=None, point_in_time_recovery_enabled: bool=None, replication_log_archiving_enabled: bool=None, start_time: str=None, transaction_log_retention_days: int=None):
        """BackupConfiguration - a model defined in OpenAPI

        :param backup_retention_settings: The backup_retention_settings of this BackupConfiguration.
        :param binary_log_enabled: The binary_log_enabled of this BackupConfiguration.
        :param enabled: The enabled of this BackupConfiguration.
        :param kind: The kind of this BackupConfiguration.
        :param location: The location of this BackupConfiguration.
        :param point_in_time_recovery_enabled: The point_in_time_recovery_enabled of this BackupConfiguration.
        :param replication_log_archiving_enabled: The replication_log_archiving_enabled of this BackupConfiguration.
        :param start_time: The start_time of this BackupConfiguration.
        :param transaction_log_retention_days: The transaction_log_retention_days of this BackupConfiguration.
        """
        self.openapi_types = {
            'backup_retention_settings': BackupRetentionSettings,
            'binary_log_enabled': bool,
            'enabled': bool,
            'kind': str,
            'location': str,
            'point_in_time_recovery_enabled': bool,
            'replication_log_archiving_enabled': bool,
            'start_time': str,
            'transaction_log_retention_days': int
        }

        self.attribute_map = {
            'backup_retention_settings': 'backupRetentionSettings',
            'binary_log_enabled': 'binaryLogEnabled',
            'enabled': 'enabled',
            'kind': 'kind',
            'location': 'location',
            'point_in_time_recovery_enabled': 'pointInTimeRecoveryEnabled',
            'replication_log_archiving_enabled': 'replicationLogArchivingEnabled',
            'start_time': 'startTime',
            'transaction_log_retention_days': 'transactionLogRetentionDays'
        }

        self._backup_retention_settings = backup_retention_settings
        self._binary_log_enabled = binary_log_enabled
        self._enabled = enabled
        self._kind = kind
        self._location = location
        self._point_in_time_recovery_enabled = point_in_time_recovery_enabled
        self._replication_log_archiving_enabled = replication_log_archiving_enabled
        self._start_time = start_time
        self._transaction_log_retention_days = transaction_log_retention_days

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupConfiguration of this BackupConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backup_retention_settings(self):
        """Gets the backup_retention_settings of this BackupConfiguration.


        :return: The backup_retention_settings of this BackupConfiguration.
        :rtype: BackupRetentionSettings
        """
        return self._backup_retention_settings

    @backup_retention_settings.setter
    def backup_retention_settings(self, backup_retention_settings):
        """Sets the backup_retention_settings of this BackupConfiguration.


        :param backup_retention_settings: The backup_retention_settings of this BackupConfiguration.
        :type backup_retention_settings: BackupRetentionSettings
        """

        self._backup_retention_settings = backup_retention_settings

    @property
    def binary_log_enabled(self):
        """Gets the binary_log_enabled of this BackupConfiguration.

        (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.

        :return: The binary_log_enabled of this BackupConfiguration.
        :rtype: bool
        """
        return self._binary_log_enabled

    @binary_log_enabled.setter
    def binary_log_enabled(self, binary_log_enabled):
        """Sets the binary_log_enabled of this BackupConfiguration.

        (MySQL only) Whether binary log is enabled. If backup configuration is disabled, binarylog must be disabled as well.

        :param binary_log_enabled: The binary_log_enabled of this BackupConfiguration.
        :type binary_log_enabled: bool
        """

        self._binary_log_enabled = binary_log_enabled

    @property
    def enabled(self):
        """Gets the enabled of this BackupConfiguration.

        Whether this configuration is enabled.

        :return: The enabled of this BackupConfiguration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this BackupConfiguration.

        Whether this configuration is enabled.

        :param enabled: The enabled of this BackupConfiguration.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def kind(self):
        """Gets the kind of this BackupConfiguration.

        This is always `sql#backupConfiguration`.

        :return: The kind of this BackupConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this BackupConfiguration.

        This is always `sql#backupConfiguration`.

        :param kind: The kind of this BackupConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this BackupConfiguration.

        Location of the backup

        :return: The location of this BackupConfiguration.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this BackupConfiguration.

        Location of the backup

        :param location: The location of this BackupConfiguration.
        :type location: str
        """

        self._location = location

    @property
    def point_in_time_recovery_enabled(self):
        """Gets the point_in_time_recovery_enabled of this BackupConfiguration.

        Whether point in time recovery is enabled.

        :return: The point_in_time_recovery_enabled of this BackupConfiguration.
        :rtype: bool
        """
        return self._point_in_time_recovery_enabled

    @point_in_time_recovery_enabled.setter
    def point_in_time_recovery_enabled(self, point_in_time_recovery_enabled):
        """Sets the point_in_time_recovery_enabled of this BackupConfiguration.

        Whether point in time recovery is enabled.

        :param point_in_time_recovery_enabled: The point_in_time_recovery_enabled of this BackupConfiguration.
        :type point_in_time_recovery_enabled: bool
        """

        self._point_in_time_recovery_enabled = point_in_time_recovery_enabled

    @property
    def replication_log_archiving_enabled(self):
        """Gets the replication_log_archiving_enabled of this BackupConfiguration.

        Reserved for future use.

        :return: The replication_log_archiving_enabled of this BackupConfiguration.
        :rtype: bool
        """
        return self._replication_log_archiving_enabled

    @replication_log_archiving_enabled.setter
    def replication_log_archiving_enabled(self, replication_log_archiving_enabled):
        """Sets the replication_log_archiving_enabled of this BackupConfiguration.

        Reserved for future use.

        :param replication_log_archiving_enabled: The replication_log_archiving_enabled of this BackupConfiguration.
        :type replication_log_archiving_enabled: bool
        """

        self._replication_log_archiving_enabled = replication_log_archiving_enabled

    @property
    def start_time(self):
        """Gets the start_time of this BackupConfiguration.

        Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.

        :return: The start_time of this BackupConfiguration.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this BackupConfiguration.

        Start time for the daily backup configuration in UTC timezone in the 24 hour format - `HH:MM`.

        :param start_time: The start_time of this BackupConfiguration.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def transaction_log_retention_days(self):
        """Gets the transaction_log_retention_days of this BackupConfiguration.

        The number of days of transaction logs we retain for point in time restore, from 1-7.

        :return: The transaction_log_retention_days of this BackupConfiguration.
        :rtype: int
        """
        return self._transaction_log_retention_days

    @transaction_log_retention_days.setter
    def transaction_log_retention_days(self, transaction_log_retention_days):
        """Sets the transaction_log_retention_days of this BackupConfiguration.

        The number of days of transaction logs we retain for point in time restore, from 1-7.

        :param transaction_log_retention_days: The transaction_log_retention_days of this BackupConfiguration.
        :type transaction_log_retention_days: int
        """

        self._transaction_log_retention_days = transaction_log_retention_days
