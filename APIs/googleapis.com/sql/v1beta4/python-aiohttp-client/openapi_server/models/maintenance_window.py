# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaintenanceWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, day: int=None, hour: int=None, kind: str=None, update_track: str=None):
        """MaintenanceWindow - a model defined in OpenAPI

        :param day: The day of this MaintenanceWindow.
        :param hour: The hour of this MaintenanceWindow.
        :param kind: The kind of this MaintenanceWindow.
        :param update_track: The update_track of this MaintenanceWindow.
        """
        self.openapi_types = {
            'day': int,
            'hour': int,
            'kind': str,
            'update_track': str
        }

        self.attribute_map = {
            'day': 'day',
            'hour': 'hour',
            'kind': 'kind',
            'update_track': 'updateTrack'
        }

        self._day = day
        self._hour = hour
        self._kind = kind
        self._update_track = update_track

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceWindow of this MaintenanceWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def day(self):
        """Gets the day of this MaintenanceWindow.

        day of week (1-7), starting on Monday.

        :return: The day of this MaintenanceWindow.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this MaintenanceWindow.

        day of week (1-7), starting on Monday.

        :param day: The day of this MaintenanceWindow.
        :type day: int
        """

        self._day = day

    @property
    def hour(self):
        """Gets the hour of this MaintenanceWindow.

        hour of day - 0 to 23.

        :return: The hour of this MaintenanceWindow.
        :rtype: int
        """
        return self._hour

    @hour.setter
    def hour(self, hour):
        """Sets the hour of this MaintenanceWindow.

        hour of day - 0 to 23.

        :param hour: The hour of this MaintenanceWindow.
        :type hour: int
        """

        self._hour = hour

    @property
    def kind(self):
        """Gets the kind of this MaintenanceWindow.

        This is always `sql#maintenanceWindow`.

        :return: The kind of this MaintenanceWindow.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MaintenanceWindow.

        This is always `sql#maintenanceWindow`.

        :param kind: The kind of this MaintenanceWindow.
        :type kind: str
        """

        self._kind = kind

    @property
    def update_track(self):
        """Gets the update_track of this MaintenanceWindow.

        Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).

        :return: The update_track of this MaintenanceWindow.
        :rtype: str
        """
        return self._update_track

    @update_track.setter
    def update_track(self, update_track):
        """Sets the update_track of this MaintenanceWindow.

        Maintenance timing setting: `canary` (Earlier) or `stable` (Later). [Learn more](https://cloud.google.com/sql/docs/mysql/instance-settings#maintenance-timing-2ndgen).

        :param update_track: The update_track of this MaintenanceWindow.
        :type update_track: str
        """
        allowed_values = ["SQL_UPDATE_TRACK_UNSPECIFIED", "canary", "stable", "week5"]  # noqa: E501
        if update_track not in allowed_values:
            raise ValueError(
                "Invalid value for `update_track` ({0}), must be one of {1}"
                .format(update_track, allowed_values)
            )

        self._update_track = update_track
