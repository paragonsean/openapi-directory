# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_context_bak_export_options import ExportContextBakExportOptions
from openapi_server.models.export_context_csv_export_options import ExportContextCsvExportOptions
from openapi_server.models.export_context_sql_export_options import ExportContextSqlExportOptions
from openapi_server import util


class ExportContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bak_export_options: ExportContextBakExportOptions=None, csv_export_options: ExportContextCsvExportOptions=None, databases: List[str]=None, file_type: str=None, kind: str=None, offload: bool=None, sql_export_options: ExportContextSqlExportOptions=None, uri: str=None):
        """ExportContext - a model defined in OpenAPI

        :param bak_export_options: The bak_export_options of this ExportContext.
        :param csv_export_options: The csv_export_options of this ExportContext.
        :param databases: The databases of this ExportContext.
        :param file_type: The file_type of this ExportContext.
        :param kind: The kind of this ExportContext.
        :param offload: The offload of this ExportContext.
        :param sql_export_options: The sql_export_options of this ExportContext.
        :param uri: The uri of this ExportContext.
        """
        self.openapi_types = {
            'bak_export_options': ExportContextBakExportOptions,
            'csv_export_options': ExportContextCsvExportOptions,
            'databases': List[str],
            'file_type': str,
            'kind': str,
            'offload': bool,
            'sql_export_options': ExportContextSqlExportOptions,
            'uri': str
        }

        self.attribute_map = {
            'bak_export_options': 'bakExportOptions',
            'csv_export_options': 'csvExportOptions',
            'databases': 'databases',
            'file_type': 'fileType',
            'kind': 'kind',
            'offload': 'offload',
            'sql_export_options': 'sqlExportOptions',
            'uri': 'uri'
        }

        self._bak_export_options = bak_export_options
        self._csv_export_options = csv_export_options
        self._databases = databases
        self._file_type = file_type
        self._kind = kind
        self._offload = offload
        self._sql_export_options = sql_export_options
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportContext of this ExportContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bak_export_options(self):
        """Gets the bak_export_options of this ExportContext.


        :return: The bak_export_options of this ExportContext.
        :rtype: ExportContextBakExportOptions
        """
        return self._bak_export_options

    @bak_export_options.setter
    def bak_export_options(self, bak_export_options):
        """Sets the bak_export_options of this ExportContext.


        :param bak_export_options: The bak_export_options of this ExportContext.
        :type bak_export_options: ExportContextBakExportOptions
        """

        self._bak_export_options = bak_export_options

    @property
    def csv_export_options(self):
        """Gets the csv_export_options of this ExportContext.


        :return: The csv_export_options of this ExportContext.
        :rtype: ExportContextCsvExportOptions
        """
        return self._csv_export_options

    @csv_export_options.setter
    def csv_export_options(self, csv_export_options):
        """Sets the csv_export_options of this ExportContext.


        :param csv_export_options: The csv_export_options of this ExportContext.
        :type csv_export_options: ExportContextCsvExportOptions
        """

        self._csv_export_options = csv_export_options

    @property
    def databases(self):
        """Gets the databases of this ExportContext.

        Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.

        :return: The databases of this ExportContext.
        :rtype: List[str]
        """
        return self._databases

    @databases.setter
    def databases(self, databases):
        """Sets the databases of this ExportContext.

        Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.

        :param databases: The databases of this ExportContext.
        :type databases: List[str]
        """

        self._databases = databases

    @property
    def file_type(self):
        """Gets the file_type of this ExportContext.

        The file type for the specified uri.

        :return: The file_type of this ExportContext.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ExportContext.

        The file type for the specified uri.

        :param file_type: The file_type of this ExportContext.
        :type file_type: str
        """
        allowed_values = ["SQL_FILE_TYPE_UNSPECIFIED", "SQL", "CSV", "BAK"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def kind(self):
        """Gets the kind of this ExportContext.

        This is always `sql#exportContext`.

        :return: The kind of this ExportContext.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ExportContext.

        This is always `sql#exportContext`.

        :param kind: The kind of this ExportContext.
        :type kind: str
        """

        self._kind = kind

    @property
    def offload(self):
        """Gets the offload of this ExportContext.

        Option for export offload.

        :return: The offload of this ExportContext.
        :rtype: bool
        """
        return self._offload

    @offload.setter
    def offload(self, offload):
        """Sets the offload of this ExportContext.

        Option for export offload.

        :param offload: The offload of this ExportContext.
        :type offload: bool
        """

        self._offload = offload

    @property
    def sql_export_options(self):
        """Gets the sql_export_options of this ExportContext.


        :return: The sql_export_options of this ExportContext.
        :rtype: ExportContextSqlExportOptions
        """
        return self._sql_export_options

    @sql_export_options.setter
    def sql_export_options(self, sql_export_options):
        """Sets the sql_export_options of this ExportContext.


        :param sql_export_options: The sql_export_options of this ExportContext.
        :type sql_export_options: ExportContextSqlExportOptions
        """

        self._sql_export_options = sql_export_options

    @property
    def uri(self):
        """Gets the uri of this ExportContext.

        The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.

        :return: The uri of this ExportContext.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ExportContext.

        The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.

        :param uri: The uri of this ExportContext.
        :type uri: str
        """

        self._uri = uri
