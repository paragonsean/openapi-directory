# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.my_sql_sync_config import MySqlSyncConfig
from openapi_server import util


class SqlInstancesVerifyExternalSyncSettingsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mysql_sync_config: MySqlSyncConfig=None, sync_mode: str=None, verify_connection_only: bool=None, verify_replication_only: bool=None):
        """SqlInstancesVerifyExternalSyncSettingsRequest - a model defined in OpenAPI

        :param mysql_sync_config: The mysql_sync_config of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :param sync_mode: The sync_mode of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :param verify_connection_only: The verify_connection_only of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :param verify_replication_only: The verify_replication_only of this SqlInstancesVerifyExternalSyncSettingsRequest.
        """
        self.openapi_types = {
            'mysql_sync_config': MySqlSyncConfig,
            'sync_mode': str,
            'verify_connection_only': bool,
            'verify_replication_only': bool
        }

        self.attribute_map = {
            'mysql_sync_config': 'mysqlSyncConfig',
            'sync_mode': 'syncMode',
            'verify_connection_only': 'verifyConnectionOnly',
            'verify_replication_only': 'verifyReplicationOnly'
        }

        self._mysql_sync_config = mysql_sync_config
        self._sync_mode = sync_mode
        self._verify_connection_only = verify_connection_only
        self._verify_replication_only = verify_replication_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlInstancesVerifyExternalSyncSettingsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlInstancesVerifyExternalSyncSettingsRequest of this SqlInstancesVerifyExternalSyncSettingsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mysql_sync_config(self):
        """Gets the mysql_sync_config of this SqlInstancesVerifyExternalSyncSettingsRequest.


        :return: The mysql_sync_config of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :rtype: MySqlSyncConfig
        """
        return self._mysql_sync_config

    @mysql_sync_config.setter
    def mysql_sync_config(self, mysql_sync_config):
        """Sets the mysql_sync_config of this SqlInstancesVerifyExternalSyncSettingsRequest.


        :param mysql_sync_config: The mysql_sync_config of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :type mysql_sync_config: MySqlSyncConfig
        """

        self._mysql_sync_config = mysql_sync_config

    @property
    def sync_mode(self):
        """Gets the sync_mode of this SqlInstancesVerifyExternalSyncSettingsRequest.

        External sync mode

        :return: The sync_mode of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :rtype: str
        """
        return self._sync_mode

    @sync_mode.setter
    def sync_mode(self, sync_mode):
        """Sets the sync_mode of this SqlInstancesVerifyExternalSyncSettingsRequest.

        External sync mode

        :param sync_mode: The sync_mode of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :type sync_mode: str
        """
        allowed_values = ["EXTERNAL_SYNC_MODE_UNSPECIFIED", "ONLINE", "OFFLINE"]  # noqa: E501
        if sync_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `sync_mode` ({0}), must be one of {1}"
                .format(sync_mode, allowed_values)
            )

        self._sync_mode = sync_mode

    @property
    def verify_connection_only(self):
        """Gets the verify_connection_only of this SqlInstancesVerifyExternalSyncSettingsRequest.

        Flag to enable verifying connection only

        :return: The verify_connection_only of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :rtype: bool
        """
        return self._verify_connection_only

    @verify_connection_only.setter
    def verify_connection_only(self, verify_connection_only):
        """Sets the verify_connection_only of this SqlInstancesVerifyExternalSyncSettingsRequest.

        Flag to enable verifying connection only

        :param verify_connection_only: The verify_connection_only of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :type verify_connection_only: bool
        """

        self._verify_connection_only = verify_connection_only

    @property
    def verify_replication_only(self):
        """Gets the verify_replication_only of this SqlInstancesVerifyExternalSyncSettingsRequest.

        Optional. Flag to verify settings required by replication setup only

        :return: The verify_replication_only of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :rtype: bool
        """
        return self._verify_replication_only

    @verify_replication_only.setter
    def verify_replication_only(self, verify_replication_only):
        """Sets the verify_replication_only of this SqlInstancesVerifyExternalSyncSettingsRequest.

        Optional. Flag to verify settings required by replication setup only

        :param verify_replication_only: The verify_replication_only of this SqlInstancesVerifyExternalSyncSettingsRequest.
        :type verify_replication_only: bool
        """

        self._verify_replication_only = verify_replication_only
