# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_mapping import IpMapping
from openapi_server.models.ssl_cert import SslCert
from openapi_server import util


class ConnectSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backend_type: str=None, database_version: str=None, dns_name: str=None, ip_addresses: List[IpMapping]=None, kind: str=None, psc_enabled: bool=None, region: str=None, server_ca_cert: SslCert=None):
        """ConnectSettings - a model defined in OpenAPI

        :param backend_type: The backend_type of this ConnectSettings.
        :param database_version: The database_version of this ConnectSettings.
        :param dns_name: The dns_name of this ConnectSettings.
        :param ip_addresses: The ip_addresses of this ConnectSettings.
        :param kind: The kind of this ConnectSettings.
        :param psc_enabled: The psc_enabled of this ConnectSettings.
        :param region: The region of this ConnectSettings.
        :param server_ca_cert: The server_ca_cert of this ConnectSettings.
        """
        self.openapi_types = {
            'backend_type': str,
            'database_version': str,
            'dns_name': str,
            'ip_addresses': List[IpMapping],
            'kind': str,
            'psc_enabled': bool,
            'region': str,
            'server_ca_cert': SslCert
        }

        self.attribute_map = {
            'backend_type': 'backendType',
            'database_version': 'databaseVersion',
            'dns_name': 'dnsName',
            'ip_addresses': 'ipAddresses',
            'kind': 'kind',
            'psc_enabled': 'pscEnabled',
            'region': 'region',
            'server_ca_cert': 'serverCaCert'
        }

        self._backend_type = backend_type
        self._database_version = database_version
        self._dns_name = dns_name
        self._ip_addresses = ip_addresses
        self._kind = kind
        self._psc_enabled = psc_enabled
        self._region = region
        self._server_ca_cert = server_ca_cert

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConnectSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConnectSettings of this ConnectSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backend_type(self):
        """Gets the backend_type of this ConnectSettings.

        `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.

        :return: The backend_type of this ConnectSettings.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """Sets the backend_type of this ConnectSettings.

        `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.

        :param backend_type: The backend_type of this ConnectSettings.
        :type backend_type: str
        """
        allowed_values = ["SQL_BACKEND_TYPE_UNSPECIFIED", "FIRST_GEN", "SECOND_GEN", "EXTERNAL"]  # noqa: E501
        if backend_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backend_type` ({0}), must be one of {1}"
                .format(backend_type, allowed_values)
            )

        self._backend_type = backend_type

    @property
    def database_version(self):
        """Gets the database_version of this ConnectSettings.

        The database engine type and version. The `databaseVersion` field cannot be changed after instance creation. MySQL instances: `MYSQL_8_0`, `MYSQL_5_7` (default), or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12` (default), `POSTGRES_13`, or `POSTGRES_14`. SQL Server instances: `SQLSERVER_2017_STANDARD` (default), `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`.

        :return: The database_version of this ConnectSettings.
        :rtype: str
        """
        return self._database_version

    @database_version.setter
    def database_version(self, database_version):
        """Sets the database_version of this ConnectSettings.

        The database engine type and version. The `databaseVersion` field cannot be changed after instance creation. MySQL instances: `MYSQL_8_0`, `MYSQL_5_7` (default), or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12` (default), `POSTGRES_13`, or `POSTGRES_14`. SQL Server instances: `SQLSERVER_2017_STANDARD` (default), `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`.

        :param database_version: The database_version of this ConnectSettings.
        :type database_version: str
        """
        allowed_values = ["SQL_DATABASE_VERSION_UNSPECIFIED", "MYSQL_5_1", "MYSQL_5_5", "MYSQL_5_6", "MYSQL_5_7", "SQLSERVER_2017_STANDARD", "SQLSERVER_2017_ENTERPRISE", "SQLSERVER_2017_EXPRESS", "SQLSERVER_2017_WEB", "POSTGRES_9_6", "POSTGRES_10", "POSTGRES_11", "POSTGRES_12", "POSTGRES_13", "POSTGRES_14", "POSTGRES_15", "MYSQL_8_0", "MYSQL_8_0_18", "MYSQL_8_0_26", "MYSQL_8_0_27", "MYSQL_8_0_28", "MYSQL_8_0_29", "MYSQL_8_0_30", "MYSQL_8_0_31", "MYSQL_8_0_32", "MYSQL_8_0_33", "MYSQL_8_0_34", "MYSQL_8_0_35", "MYSQL_8_0_36", "SQLSERVER_2019_STANDARD", "SQLSERVER_2019_ENTERPRISE", "SQLSERVER_2019_EXPRESS", "SQLSERVER_2019_WEB", "SQLSERVER_2022_STANDARD", "SQLSERVER_2022_ENTERPRISE", "SQLSERVER_2022_EXPRESS", "SQLSERVER_2022_WEB"]  # noqa: E501
        if database_version not in allowed_values:
            raise ValueError(
                "Invalid value for `database_version` ({0}), must be one of {1}"
                .format(database_version, allowed_values)
            )

        self._database_version = database_version

    @property
    def dns_name(self):
        """Gets the dns_name of this ConnectSettings.

        The dns name of the instance.

        :return: The dns_name of this ConnectSettings.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this ConnectSettings.

        The dns name of the instance.

        :param dns_name: The dns_name of this ConnectSettings.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this ConnectSettings.

        The assigned IP addresses for the instance.

        :return: The ip_addresses of this ConnectSettings.
        :rtype: List[IpMapping]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this ConnectSettings.

        The assigned IP addresses for the instance.

        :param ip_addresses: The ip_addresses of this ConnectSettings.
        :type ip_addresses: List[IpMapping]
        """

        self._ip_addresses = ip_addresses

    @property
    def kind(self):
        """Gets the kind of this ConnectSettings.

        This is always `sql#connectSettings`.

        :return: The kind of this ConnectSettings.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ConnectSettings.

        This is always `sql#connectSettings`.

        :param kind: The kind of this ConnectSettings.
        :type kind: str
        """

        self._kind = kind

    @property
    def psc_enabled(self):
        """Gets the psc_enabled of this ConnectSettings.

        Whether PSC connectivity is enabled for this instance.

        :return: The psc_enabled of this ConnectSettings.
        :rtype: bool
        """
        return self._psc_enabled

    @psc_enabled.setter
    def psc_enabled(self, psc_enabled):
        """Sets the psc_enabled of this ConnectSettings.

        Whether PSC connectivity is enabled for this instance.

        :param psc_enabled: The psc_enabled of this ConnectSettings.
        :type psc_enabled: bool
        """

        self._psc_enabled = psc_enabled

    @property
    def region(self):
        """Gets the region of this ConnectSettings.

        The cloud region for the instance. e.g. `us-central1`, `europe-west1`. The region cannot be changed after instance creation.

        :return: The region of this ConnectSettings.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ConnectSettings.

        The cloud region for the instance. e.g. `us-central1`, `europe-west1`. The region cannot be changed after instance creation.

        :param region: The region of this ConnectSettings.
        :type region: str
        """

        self._region = region

    @property
    def server_ca_cert(self):
        """Gets the server_ca_cert of this ConnectSettings.


        :return: The server_ca_cert of this ConnectSettings.
        :rtype: SslCert
        """
        return self._server_ca_cert

    @server_ca_cert.setter
    def server_ca_cert(self, server_ca_cert):
        """Sets the server_ca_cert of this ConnectSettings.


        :param server_ca_cert: The server_ca_cert of this ConnectSettings.
        :type server_ca_cert: SslCert
        """

        self._server_ca_cert = server_ca_cert
