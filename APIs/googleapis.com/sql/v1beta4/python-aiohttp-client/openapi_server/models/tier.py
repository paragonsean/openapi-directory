# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Tier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disk_quota: str=None, ram: str=None, kind: str=None, region: List[str]=None, tier: str=None):
        """Tier - a model defined in OpenAPI

        :param disk_quota: The disk_quota of this Tier.
        :param ram: The ram of this Tier.
        :param kind: The kind of this Tier.
        :param region: The region of this Tier.
        :param tier: The tier of this Tier.
        """
        self.openapi_types = {
            'disk_quota': str,
            'ram': str,
            'kind': str,
            'region': List[str],
            'tier': str
        }

        self.attribute_map = {
            'disk_quota': 'DiskQuota',
            'ram': 'RAM',
            'kind': 'kind',
            'region': 'region',
            'tier': 'tier'
        }

        self._disk_quota = disk_quota
        self._ram = ram
        self._kind = kind
        self._region = region
        self._tier = tier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Tier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tier of this Tier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disk_quota(self):
        """Gets the disk_quota of this Tier.

        The maximum disk size of this tier in bytes.

        :return: The disk_quota of this Tier.
        :rtype: str
        """
        return self._disk_quota

    @disk_quota.setter
    def disk_quota(self, disk_quota):
        """Sets the disk_quota of this Tier.

        The maximum disk size of this tier in bytes.

        :param disk_quota: The disk_quota of this Tier.
        :type disk_quota: str
        """

        self._disk_quota = disk_quota

    @property
    def ram(self):
        """Gets the ram of this Tier.

        The maximum RAM usage of this tier in bytes.

        :return: The ram of this Tier.
        :rtype: str
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this Tier.

        The maximum RAM usage of this tier in bytes.

        :param ram: The ram of this Tier.
        :type ram: str
        """

        self._ram = ram

    @property
    def kind(self):
        """Gets the kind of this Tier.

        This is always `sql#tier`.

        :return: The kind of this Tier.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Tier.

        This is always `sql#tier`.

        :param kind: The kind of this Tier.
        :type kind: str
        """

        self._kind = kind

    @property
    def region(self):
        """Gets the region of this Tier.

        The applicable regions for this tier.

        :return: The region of this Tier.
        :rtype: List[str]
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Tier.

        The applicable regions for this tier.

        :param region: The region of this Tier.
        :type region: List[str]
        """

        self._region = region

    @property
    def tier(self):
        """Gets the tier of this Tier.

        An identifier for the machine type, for example, `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).

        :return: The tier of this Tier.
        :rtype: str
        """
        return self._tier

    @tier.setter
    def tier(self, tier):
        """Sets the tier of this Tier.

        An identifier for the machine type, for example, `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).

        :param tier: The tier of this Tier.
        :type tier: str
        """

        self._tier = tier
