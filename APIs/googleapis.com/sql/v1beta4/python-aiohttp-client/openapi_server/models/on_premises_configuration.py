# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.instance_reference import InstanceReference
from openapi_server import util


class OnPremisesConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certificate: str=None, client_certificate: str=None, client_key: str=None, dump_file_path: str=None, host_port: str=None, kind: str=None, password: str=None, source_instance: InstanceReference=None, username: str=None):
        """OnPremisesConfiguration - a model defined in OpenAPI

        :param ca_certificate: The ca_certificate of this OnPremisesConfiguration.
        :param client_certificate: The client_certificate of this OnPremisesConfiguration.
        :param client_key: The client_key of this OnPremisesConfiguration.
        :param dump_file_path: The dump_file_path of this OnPremisesConfiguration.
        :param host_port: The host_port of this OnPremisesConfiguration.
        :param kind: The kind of this OnPremisesConfiguration.
        :param password: The password of this OnPremisesConfiguration.
        :param source_instance: The source_instance of this OnPremisesConfiguration.
        :param username: The username of this OnPremisesConfiguration.
        """
        self.openapi_types = {
            'ca_certificate': str,
            'client_certificate': str,
            'client_key': str,
            'dump_file_path': str,
            'host_port': str,
            'kind': str,
            'password': str,
            'source_instance': InstanceReference,
            'username': str
        }

        self.attribute_map = {
            'ca_certificate': 'caCertificate',
            'client_certificate': 'clientCertificate',
            'client_key': 'clientKey',
            'dump_file_path': 'dumpFilePath',
            'host_port': 'hostPort',
            'kind': 'kind',
            'password': 'password',
            'source_instance': 'sourceInstance',
            'username': 'username'
        }

        self._ca_certificate = ca_certificate
        self._client_certificate = client_certificate
        self._client_key = client_key
        self._dump_file_path = dump_file_path
        self._host_port = host_port
        self._kind = kind
        self._password = password
        self._source_instance = source_instance
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OnPremisesConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OnPremisesConfiguration of this OnPremisesConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this OnPremisesConfiguration.

        PEM representation of the trusted CA's x509 certificate.

        :return: The ca_certificate of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this OnPremisesConfiguration.

        PEM representation of the trusted CA's x509 certificate.

        :param ca_certificate: The ca_certificate of this OnPremisesConfiguration.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def client_certificate(self):
        """Gets the client_certificate of this OnPremisesConfiguration.

        PEM representation of the replica's x509 certificate.

        :return: The client_certificate of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this OnPremisesConfiguration.

        PEM representation of the replica's x509 certificate.

        :param client_certificate: The client_certificate of this OnPremisesConfiguration.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def client_key(self):
        """Gets the client_key of this OnPremisesConfiguration.

        PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.

        :return: The client_key of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this OnPremisesConfiguration.

        PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.

        :param client_key: The client_key of this OnPremisesConfiguration.
        :type client_key: str
        """

        self._client_key = client_key

    @property
    def dump_file_path(self):
        """Gets the dump_file_path of this OnPremisesConfiguration.

        The dump file to create the Cloud SQL replica.

        :return: The dump_file_path of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._dump_file_path

    @dump_file_path.setter
    def dump_file_path(self, dump_file_path):
        """Sets the dump_file_path of this OnPremisesConfiguration.

        The dump file to create the Cloud SQL replica.

        :param dump_file_path: The dump_file_path of this OnPremisesConfiguration.
        :type dump_file_path: str
        """

        self._dump_file_path = dump_file_path

    @property
    def host_port(self):
        """Gets the host_port of this OnPremisesConfiguration.

        The host and port of the on-premises instance in host:port format

        :return: The host_port of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._host_port

    @host_port.setter
    def host_port(self, host_port):
        """Sets the host_port of this OnPremisesConfiguration.

        The host and port of the on-premises instance in host:port format

        :param host_port: The host_port of this OnPremisesConfiguration.
        :type host_port: str
        """

        self._host_port = host_port

    @property
    def kind(self):
        """Gets the kind of this OnPremisesConfiguration.

        This is always `sql#onPremisesConfiguration`.

        :return: The kind of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this OnPremisesConfiguration.

        This is always `sql#onPremisesConfiguration`.

        :param kind: The kind of this OnPremisesConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def password(self):
        """Gets the password of this OnPremisesConfiguration.

        The password for connecting to on-premises instance.

        :return: The password of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this OnPremisesConfiguration.

        The password for connecting to on-premises instance.

        :param password: The password of this OnPremisesConfiguration.
        :type password: str
        """

        self._password = password

    @property
    def source_instance(self):
        """Gets the source_instance of this OnPremisesConfiguration.


        :return: The source_instance of this OnPremisesConfiguration.
        :rtype: InstanceReference
        """
        return self._source_instance

    @source_instance.setter
    def source_instance(self, source_instance):
        """Sets the source_instance of this OnPremisesConfiguration.


        :param source_instance: The source_instance of this OnPremisesConfiguration.
        :type source_instance: InstanceReference
        """

        self._source_instance = source_instance

    @property
    def username(self):
        """Gets the username of this OnPremisesConfiguration.

        The username for connecting to on-premises instance.

        :return: The username of this OnPremisesConfiguration.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this OnPremisesConfiguration.

        The username for connecting to on-premises instance.

        :param username: The username of this OnPremisesConfiguration.
        :type username: str
        """

        self._username = username
