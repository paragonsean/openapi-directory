# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_warning import ApiWarning
from openapi_server.models.backup_context import BackupContext
from openapi_server.models.export_context import ExportContext
from openapi_server.models.import_context import ImportContext
from openapi_server.models.operation_errors import OperationErrors
from openapi_server import util


class Operation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_warning: ApiWarning=None, backup_context: BackupContext=None, end_time: str=None, error: OperationErrors=None, export_context: ExportContext=None, import_context: ImportContext=None, insert_time: str=None, kind: str=None, name: str=None, operation_type: str=None, self_link: str=None, start_time: str=None, status: str=None, target_id: str=None, target_link: str=None, target_project: str=None, user: str=None):
        """Operation - a model defined in OpenAPI

        :param api_warning: The api_warning of this Operation.
        :param backup_context: The backup_context of this Operation.
        :param end_time: The end_time of this Operation.
        :param error: The error of this Operation.
        :param export_context: The export_context of this Operation.
        :param import_context: The import_context of this Operation.
        :param insert_time: The insert_time of this Operation.
        :param kind: The kind of this Operation.
        :param name: The name of this Operation.
        :param operation_type: The operation_type of this Operation.
        :param self_link: The self_link of this Operation.
        :param start_time: The start_time of this Operation.
        :param status: The status of this Operation.
        :param target_id: The target_id of this Operation.
        :param target_link: The target_link of this Operation.
        :param target_project: The target_project of this Operation.
        :param user: The user of this Operation.
        """
        self.openapi_types = {
            'api_warning': ApiWarning,
            'backup_context': BackupContext,
            'end_time': str,
            'error': OperationErrors,
            'export_context': ExportContext,
            'import_context': ImportContext,
            'insert_time': str,
            'kind': str,
            'name': str,
            'operation_type': str,
            'self_link': str,
            'start_time': str,
            'status': str,
            'target_id': str,
            'target_link': str,
            'target_project': str,
            'user': str
        }

        self.attribute_map = {
            'api_warning': 'apiWarning',
            'backup_context': 'backupContext',
            'end_time': 'endTime',
            'error': 'error',
            'export_context': 'exportContext',
            'import_context': 'importContext',
            'insert_time': 'insertTime',
            'kind': 'kind',
            'name': 'name',
            'operation_type': 'operationType',
            'self_link': 'selfLink',
            'start_time': 'startTime',
            'status': 'status',
            'target_id': 'targetId',
            'target_link': 'targetLink',
            'target_project': 'targetProject',
            'user': 'user'
        }

        self._api_warning = api_warning
        self._backup_context = backup_context
        self._end_time = end_time
        self._error = error
        self._export_context = export_context
        self._import_context = import_context
        self._insert_time = insert_time
        self._kind = kind
        self._name = name
        self._operation_type = operation_type
        self._self_link = self_link
        self._start_time = start_time
        self._status = status
        self._target_id = target_id
        self._target_link = target_link
        self._target_project = target_project
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Operation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Operation of this Operation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_warning(self):
        """Gets the api_warning of this Operation.


        :return: The api_warning of this Operation.
        :rtype: ApiWarning
        """
        return self._api_warning

    @api_warning.setter
    def api_warning(self, api_warning):
        """Sets the api_warning of this Operation.


        :param api_warning: The api_warning of this Operation.
        :type api_warning: ApiWarning
        """

        self._api_warning = api_warning

    @property
    def backup_context(self):
        """Gets the backup_context of this Operation.


        :return: The backup_context of this Operation.
        :rtype: BackupContext
        """
        return self._backup_context

    @backup_context.setter
    def backup_context(self, backup_context):
        """Sets the backup_context of this Operation.


        :param backup_context: The backup_context of this Operation.
        :type backup_context: BackupContext
        """

        self._backup_context = backup_context

    @property
    def end_time(self):
        """Gets the end_time of this Operation.

        The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The end_time of this Operation.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Operation.

        The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param end_time: The end_time of this Operation.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def error(self):
        """Gets the error of this Operation.


        :return: The error of this Operation.
        :rtype: OperationErrors
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Operation.


        :param error: The error of this Operation.
        :type error: OperationErrors
        """

        self._error = error

    @property
    def export_context(self):
        """Gets the export_context of this Operation.


        :return: The export_context of this Operation.
        :rtype: ExportContext
        """
        return self._export_context

    @export_context.setter
    def export_context(self, export_context):
        """Sets the export_context of this Operation.


        :param export_context: The export_context of this Operation.
        :type export_context: ExportContext
        """

        self._export_context = export_context

    @property
    def import_context(self):
        """Gets the import_context of this Operation.


        :return: The import_context of this Operation.
        :rtype: ImportContext
        """
        return self._import_context

    @import_context.setter
    def import_context(self, import_context):
        """Sets the import_context of this Operation.


        :param import_context: The import_context of this Operation.
        :type import_context: ImportContext
        """

        self._import_context = import_context

    @property
    def insert_time(self):
        """Gets the insert_time of this Operation.

        The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The insert_time of this Operation.
        :rtype: str
        """
        return self._insert_time

    @insert_time.setter
    def insert_time(self, insert_time):
        """Sets the insert_time of this Operation.

        The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param insert_time: The insert_time of this Operation.
        :type insert_time: str
        """

        self._insert_time = insert_time

    @property
    def kind(self):
        """Gets the kind of this Operation.

        This is always `sql#operation`.

        :return: The kind of this Operation.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Operation.

        This is always `sql#operation`.

        :param kind: The kind of this Operation.
        :type kind: str
        """

        self._kind = kind

    @property
    def name(self):
        """Gets the name of this Operation.

        An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.

        :return: The name of this Operation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Operation.

        An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.

        :param name: The name of this Operation.
        :type name: str
        """

        self._name = name

    @property
    def operation_type(self):
        """Gets the operation_type of this Operation.

        The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`

        :return: The operation_type of this Operation.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this Operation.

        The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`

        :param operation_type: The operation_type of this Operation.
        :type operation_type: str
        """
        allowed_values = ["SQL_OPERATION_TYPE_UNSPECIFIED", "IMPORT", "EXPORT", "CREATE", "UPDATE", "DELETE", "RESTART", "BACKUP", "SNAPSHOT", "BACKUP_VOLUME", "DELETE_VOLUME", "RESTORE_VOLUME", "INJECT_USER", "CLONE", "STOP_REPLICA", "START_REPLICA", "PROMOTE_REPLICA", "CREATE_REPLICA", "CREATE_USER", "DELETE_USER", "UPDATE_USER", "CREATE_DATABASE", "DELETE_DATABASE", "UPDATE_DATABASE", "FAILOVER", "DELETE_BACKUP", "RECREATE_REPLICA", "TRUNCATE_LOG", "DEMOTE_MASTER", "MAINTENANCE", "ENABLE_PRIVATE_IP", "DEFER_MAINTENANCE", "CREATE_CLONE", "RESCHEDULE_MAINTENANCE", "START_EXTERNAL_SYNC", "LOG_CLEANUP", "AUTO_RESTART", "REENCRYPT", "SWITCHOVER"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def self_link(self):
        """Gets the self_link of this Operation.

        The URI of this resource.

        :return: The self_link of this Operation.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this Operation.

        The URI of this resource.

        :param self_link: The self_link of this Operation.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def start_time(self):
        """Gets the start_time of this Operation.

        The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The start_time of this Operation.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Operation.

        The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param start_time: The start_time of this Operation.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this Operation.

        The status of an operation.

        :return: The status of this Operation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Operation.

        The status of an operation.

        :param status: The status of this Operation.
        :type status: str
        """
        allowed_values = ["SQL_OPERATION_STATUS_UNSPECIFIED", "PENDING", "RUNNING", "DONE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def target_id(self):
        """Gets the target_id of this Operation.

        Name of the database instance related to this operation.

        :return: The target_id of this Operation.
        :rtype: str
        """
        return self._target_id

    @target_id.setter
    def target_id(self, target_id):
        """Sets the target_id of this Operation.

        Name of the database instance related to this operation.

        :param target_id: The target_id of this Operation.
        :type target_id: str
        """

        self._target_id = target_id

    @property
    def target_link(self):
        """Gets the target_link of this Operation.


        :return: The target_link of this Operation.
        :rtype: str
        """
        return self._target_link

    @target_link.setter
    def target_link(self, target_link):
        """Sets the target_link of this Operation.


        :param target_link: The target_link of this Operation.
        :type target_link: str
        """

        self._target_link = target_link

    @property
    def target_project(self):
        """Gets the target_project of this Operation.

        The project ID of the target instance related to this operation.

        :return: The target_project of this Operation.
        :rtype: str
        """
        return self._target_project

    @target_project.setter
    def target_project(self, target_project):
        """Sets the target_project of this Operation.

        The project ID of the target instance related to this operation.

        :param target_project: The target_project of this Operation.
        :type target_project: str
        """

        self._target_project = target_project

    @property
    def user(self):
        """Gets the user of this Operation.

        The email address of the user who initiated this operation.

        :return: The user of this Operation.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Operation.

        The email address of the user who initiated this operation.

        :param user: The user of this Operation.
        :type user: str
        """

        self._user = user
