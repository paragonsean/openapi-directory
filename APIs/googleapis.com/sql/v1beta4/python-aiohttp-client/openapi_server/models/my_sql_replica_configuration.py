# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MySqlReplicaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certificate: str=None, client_certificate: str=None, client_key: str=None, connect_retry_interval: int=None, dump_file_path: str=None, kind: str=None, master_heartbeat_period: str=None, password: str=None, ssl_cipher: str=None, username: str=None, verify_server_certificate: bool=None):
        """MySqlReplicaConfiguration - a model defined in OpenAPI

        :param ca_certificate: The ca_certificate of this MySqlReplicaConfiguration.
        :param client_certificate: The client_certificate of this MySqlReplicaConfiguration.
        :param client_key: The client_key of this MySqlReplicaConfiguration.
        :param connect_retry_interval: The connect_retry_interval of this MySqlReplicaConfiguration.
        :param dump_file_path: The dump_file_path of this MySqlReplicaConfiguration.
        :param kind: The kind of this MySqlReplicaConfiguration.
        :param master_heartbeat_period: The master_heartbeat_period of this MySqlReplicaConfiguration.
        :param password: The password of this MySqlReplicaConfiguration.
        :param ssl_cipher: The ssl_cipher of this MySqlReplicaConfiguration.
        :param username: The username of this MySqlReplicaConfiguration.
        :param verify_server_certificate: The verify_server_certificate of this MySqlReplicaConfiguration.
        """
        self.openapi_types = {
            'ca_certificate': str,
            'client_certificate': str,
            'client_key': str,
            'connect_retry_interval': int,
            'dump_file_path': str,
            'kind': str,
            'master_heartbeat_period': str,
            'password': str,
            'ssl_cipher': str,
            'username': str,
            'verify_server_certificate': bool
        }

        self.attribute_map = {
            'ca_certificate': 'caCertificate',
            'client_certificate': 'clientCertificate',
            'client_key': 'clientKey',
            'connect_retry_interval': 'connectRetryInterval',
            'dump_file_path': 'dumpFilePath',
            'kind': 'kind',
            'master_heartbeat_period': 'masterHeartbeatPeriod',
            'password': 'password',
            'ssl_cipher': 'sslCipher',
            'username': 'username',
            'verify_server_certificate': 'verifyServerCertificate'
        }

        self._ca_certificate = ca_certificate
        self._client_certificate = client_certificate
        self._client_key = client_key
        self._connect_retry_interval = connect_retry_interval
        self._dump_file_path = dump_file_path
        self._kind = kind
        self._master_heartbeat_period = master_heartbeat_period
        self._password = password
        self._ssl_cipher = ssl_cipher
        self._username = username
        self._verify_server_certificate = verify_server_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MySqlReplicaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MySqlReplicaConfiguration of this MySqlReplicaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this MySqlReplicaConfiguration.

        PEM representation of the trusted CA's x509 certificate.

        :return: The ca_certificate of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this MySqlReplicaConfiguration.

        PEM representation of the trusted CA's x509 certificate.

        :param ca_certificate: The ca_certificate of this MySqlReplicaConfiguration.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def client_certificate(self):
        """Gets the client_certificate of this MySqlReplicaConfiguration.

        PEM representation of the replica's x509 certificate.

        :return: The client_certificate of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this MySqlReplicaConfiguration.

        PEM representation of the replica's x509 certificate.

        :param client_certificate: The client_certificate of this MySqlReplicaConfiguration.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def client_key(self):
        """Gets the client_key of this MySqlReplicaConfiguration.

        PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.

        :return: The client_key of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this MySqlReplicaConfiguration.

        PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.

        :param client_key: The client_key of this MySqlReplicaConfiguration.
        :type client_key: str
        """

        self._client_key = client_key

    @property
    def connect_retry_interval(self):
        """Gets the connect_retry_interval of this MySqlReplicaConfiguration.

        Seconds to wait between connect retries. MySQL's default is 60 seconds.

        :return: The connect_retry_interval of this MySqlReplicaConfiguration.
        :rtype: int
        """
        return self._connect_retry_interval

    @connect_retry_interval.setter
    def connect_retry_interval(self, connect_retry_interval):
        """Sets the connect_retry_interval of this MySqlReplicaConfiguration.

        Seconds to wait between connect retries. MySQL's default is 60 seconds.

        :param connect_retry_interval: The connect_retry_interval of this MySqlReplicaConfiguration.
        :type connect_retry_interval: int
        """

        self._connect_retry_interval = connect_retry_interval

    @property
    def dump_file_path(self):
        """Gets the dump_file_path of this MySqlReplicaConfiguration.

        Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.

        :return: The dump_file_path of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._dump_file_path

    @dump_file_path.setter
    def dump_file_path(self, dump_file_path):
        """Sets the dump_file_path of this MySqlReplicaConfiguration.

        Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.

        :param dump_file_path: The dump_file_path of this MySqlReplicaConfiguration.
        :type dump_file_path: str
        """

        self._dump_file_path = dump_file_path

    @property
    def kind(self):
        """Gets the kind of this MySqlReplicaConfiguration.

        This is always `sql#mysqlReplicaConfiguration`.

        :return: The kind of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this MySqlReplicaConfiguration.

        This is always `sql#mysqlReplicaConfiguration`.

        :param kind: The kind of this MySqlReplicaConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def master_heartbeat_period(self):
        """Gets the master_heartbeat_period of this MySqlReplicaConfiguration.

        Interval in milliseconds between replication heartbeats.

        :return: The master_heartbeat_period of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._master_heartbeat_period

    @master_heartbeat_period.setter
    def master_heartbeat_period(self, master_heartbeat_period):
        """Sets the master_heartbeat_period of this MySqlReplicaConfiguration.

        Interval in milliseconds between replication heartbeats.

        :param master_heartbeat_period: The master_heartbeat_period of this MySqlReplicaConfiguration.
        :type master_heartbeat_period: str
        """

        self._master_heartbeat_period = master_heartbeat_period

    @property
    def password(self):
        """Gets the password of this MySqlReplicaConfiguration.

        The password for the replication connection.

        :return: The password of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this MySqlReplicaConfiguration.

        The password for the replication connection.

        :param password: The password of this MySqlReplicaConfiguration.
        :type password: str
        """

        self._password = password

    @property
    def ssl_cipher(self):
        """Gets the ssl_cipher of this MySqlReplicaConfiguration.

        A list of permissible ciphers to use for SSL encryption.

        :return: The ssl_cipher of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._ssl_cipher

    @ssl_cipher.setter
    def ssl_cipher(self, ssl_cipher):
        """Sets the ssl_cipher of this MySqlReplicaConfiguration.

        A list of permissible ciphers to use for SSL encryption.

        :param ssl_cipher: The ssl_cipher of this MySqlReplicaConfiguration.
        :type ssl_cipher: str
        """

        self._ssl_cipher = ssl_cipher

    @property
    def username(self):
        """Gets the username of this MySqlReplicaConfiguration.

        The username for the replication connection.

        :return: The username of this MySqlReplicaConfiguration.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this MySqlReplicaConfiguration.

        The username for the replication connection.

        :param username: The username of this MySqlReplicaConfiguration.
        :type username: str
        """

        self._username = username

    @property
    def verify_server_certificate(self):
        """Gets the verify_server_certificate of this MySqlReplicaConfiguration.

        Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.

        :return: The verify_server_certificate of this MySqlReplicaConfiguration.
        :rtype: bool
        """
        return self._verify_server_certificate

    @verify_server_certificate.setter
    def verify_server_certificate(self, verify_server_certificate):
        """Sets the verify_server_certificate of this MySqlReplicaConfiguration.

        Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.

        :param verify_server_certificate: The verify_server_certificate of this MySqlReplicaConfiguration.
        :type verify_server_certificate: bool
        """

        self._verify_server_certificate = verify_server_certificate
