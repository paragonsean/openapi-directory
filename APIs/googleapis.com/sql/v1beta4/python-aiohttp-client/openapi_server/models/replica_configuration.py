# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.my_sql_replica_configuration import MySqlReplicaConfiguration
from openapi_server import util


class ReplicaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cascadable_replica: bool=None, failover_target: bool=None, kind: str=None, mysql_replica_configuration: MySqlReplicaConfiguration=None):
        """ReplicaConfiguration - a model defined in OpenAPI

        :param cascadable_replica: The cascadable_replica of this ReplicaConfiguration.
        :param failover_target: The failover_target of this ReplicaConfiguration.
        :param kind: The kind of this ReplicaConfiguration.
        :param mysql_replica_configuration: The mysql_replica_configuration of this ReplicaConfiguration.
        """
        self.openapi_types = {
            'cascadable_replica': bool,
            'failover_target': bool,
            'kind': str,
            'mysql_replica_configuration': MySqlReplicaConfiguration
        }

        self.attribute_map = {
            'cascadable_replica': 'cascadableReplica',
            'failover_target': 'failoverTarget',
            'kind': 'kind',
            'mysql_replica_configuration': 'mysqlReplicaConfiguration'
        }

        self._cascadable_replica = cascadable_replica
        self._failover_target = failover_target
        self._kind = kind
        self._mysql_replica_configuration = mysql_replica_configuration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReplicaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReplicaConfiguration of this ReplicaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cascadable_replica(self):
        """Gets the cascadable_replica of this ReplicaConfiguration.

        Optional. Specifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.

        :return: The cascadable_replica of this ReplicaConfiguration.
        :rtype: bool
        """
        return self._cascadable_replica

    @cascadable_replica.setter
    def cascadable_replica(self, cascadable_replica):
        """Sets the cascadable_replica of this ReplicaConfiguration.

        Optional. Specifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.

        :param cascadable_replica: The cascadable_replica of this ReplicaConfiguration.
        :type cascadable_replica: bool
        """

        self._cascadable_replica = cascadable_replica

    @property
    def failover_target(self):
        """Gets the failover_target of this ReplicaConfiguration.

        Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.

        :return: The failover_target of this ReplicaConfiguration.
        :rtype: bool
        """
        return self._failover_target

    @failover_target.setter
    def failover_target(self, failover_target):
        """Sets the failover_target of this ReplicaConfiguration.

        Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.

        :param failover_target: The failover_target of this ReplicaConfiguration.
        :type failover_target: bool
        """

        self._failover_target = failover_target

    @property
    def kind(self):
        """Gets the kind of this ReplicaConfiguration.

        This is always `sql#replicaConfiguration`.

        :return: The kind of this ReplicaConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ReplicaConfiguration.

        This is always `sql#replicaConfiguration`.

        :param kind: The kind of this ReplicaConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def mysql_replica_configuration(self):
        """Gets the mysql_replica_configuration of this ReplicaConfiguration.


        :return: The mysql_replica_configuration of this ReplicaConfiguration.
        :rtype: MySqlReplicaConfiguration
        """
        return self._mysql_replica_configuration

    @mysql_replica_configuration.setter
    def mysql_replica_configuration(self, mysql_replica_configuration):
        """Sets the mysql_replica_configuration of this ReplicaConfiguration.


        :param mysql_replica_configuration: The mysql_replica_configuration of this ReplicaConfiguration.
        :type mysql_replica_configuration: MySqlReplicaConfiguration
        """

        self._mysql_replica_configuration = mysql_replica_configuration
