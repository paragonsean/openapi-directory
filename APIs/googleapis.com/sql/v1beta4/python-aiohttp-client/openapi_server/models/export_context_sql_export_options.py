# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.export_context_sql_export_options_mysql_export_options import ExportContextSqlExportOptionsMysqlExportOptions
from openapi_server import util


class ExportContextSqlExportOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mysql_export_options: ExportContextSqlExportOptionsMysqlExportOptions=None, parallel: bool=None, schema_only: bool=None, tables: List[str]=None, threads: int=None):
        """ExportContextSqlExportOptions - a model defined in OpenAPI

        :param mysql_export_options: The mysql_export_options of this ExportContextSqlExportOptions.
        :param parallel: The parallel of this ExportContextSqlExportOptions.
        :param schema_only: The schema_only of this ExportContextSqlExportOptions.
        :param tables: The tables of this ExportContextSqlExportOptions.
        :param threads: The threads of this ExportContextSqlExportOptions.
        """
        self.openapi_types = {
            'mysql_export_options': ExportContextSqlExportOptionsMysqlExportOptions,
            'parallel': bool,
            'schema_only': bool,
            'tables': List[str],
            'threads': int
        }

        self.attribute_map = {
            'mysql_export_options': 'mysqlExportOptions',
            'parallel': 'parallel',
            'schema_only': 'schemaOnly',
            'tables': 'tables',
            'threads': 'threads'
        }

        self._mysql_export_options = mysql_export_options
        self._parallel = parallel
        self._schema_only = schema_only
        self._tables = tables
        self._threads = threads

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExportContextSqlExportOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExportContext_sqlExportOptions of this ExportContextSqlExportOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mysql_export_options(self):
        """Gets the mysql_export_options of this ExportContextSqlExportOptions.


        :return: The mysql_export_options of this ExportContextSqlExportOptions.
        :rtype: ExportContextSqlExportOptionsMysqlExportOptions
        """
        return self._mysql_export_options

    @mysql_export_options.setter
    def mysql_export_options(self, mysql_export_options):
        """Sets the mysql_export_options of this ExportContextSqlExportOptions.


        :param mysql_export_options: The mysql_export_options of this ExportContextSqlExportOptions.
        :type mysql_export_options: ExportContextSqlExportOptionsMysqlExportOptions
        """

        self._mysql_export_options = mysql_export_options

    @property
    def parallel(self):
        """Gets the parallel of this ExportContextSqlExportOptions.

        Optional. Whether or not the export should be parallel.

        :return: The parallel of this ExportContextSqlExportOptions.
        :rtype: bool
        """
        return self._parallel

    @parallel.setter
    def parallel(self, parallel):
        """Sets the parallel of this ExportContextSqlExportOptions.

        Optional. Whether or not the export should be parallel.

        :param parallel: The parallel of this ExportContextSqlExportOptions.
        :type parallel: bool
        """

        self._parallel = parallel

    @property
    def schema_only(self):
        """Gets the schema_only of this ExportContextSqlExportOptions.

        Export only schemas.

        :return: The schema_only of this ExportContextSqlExportOptions.
        :rtype: bool
        """
        return self._schema_only

    @schema_only.setter
    def schema_only(self, schema_only):
        """Sets the schema_only of this ExportContextSqlExportOptions.

        Export only schemas.

        :param schema_only: The schema_only of this ExportContextSqlExportOptions.
        :type schema_only: bool
        """

        self._schema_only = schema_only

    @property
    def tables(self):
        """Gets the tables of this ExportContextSqlExportOptions.

        Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.

        :return: The tables of this ExportContextSqlExportOptions.
        :rtype: List[str]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this ExportContextSqlExportOptions.

        Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.

        :param tables: The tables of this ExportContextSqlExportOptions.
        :type tables: List[str]
        """

        self._tables = tables

    @property
    def threads(self):
        """Gets the threads of this ExportContextSqlExportOptions.

        Optional. The number of threads to use for parallel export.

        :return: The threads of this ExportContextSqlExportOptions.
        :rtype: int
        """
        return self._threads

    @threads.setter
    def threads(self, threads):
        """Sets the threads of this ExportContextSqlExportOptions.

        Optional. The number of threads to use for parallel export.

        :param threads: The threads of this ExportContextSqlExportOptions.
        :type threads: int
        """

        self._threads = threads
