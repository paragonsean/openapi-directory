# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RotateServerCaContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, next_version: str=None):
        """RotateServerCaContext - a model defined in OpenAPI

        :param kind: The kind of this RotateServerCaContext.
        :param next_version: The next_version of this RotateServerCaContext.
        """
        self.openapi_types = {
            'kind': str,
            'next_version': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'next_version': 'nextVersion'
        }

        self._kind = kind
        self._next_version = next_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RotateServerCaContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RotateServerCaContext of this RotateServerCaContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this RotateServerCaContext.

        This is always `sql#rotateServerCaContext`.

        :return: The kind of this RotateServerCaContext.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this RotateServerCaContext.

        This is always `sql#rotateServerCaContext`.

        :param kind: The kind of this RotateServerCaContext.
        :type kind: str
        """

        self._kind = kind

    @property
    def next_version(self):
        """Gets the next_version of this RotateServerCaContext.

        The fingerprint of the next version to be rotated to. If left unspecified, will be rotated to the most recently added server CA version.

        :return: The next_version of this RotateServerCaContext.
        :rtype: str
        """
        return self._next_version

    @next_version.setter
    def next_version(self, next_version):
        """Sets the next_version of this RotateServerCaContext.

        The fingerprint of the next version to be rotated to. If left unspecified, will be rotated to the most recently added server CA version.

        :param next_version: The next_version of this RotateServerCaContext.
        :type next_version: str
        """

        self._next_version = next_version
