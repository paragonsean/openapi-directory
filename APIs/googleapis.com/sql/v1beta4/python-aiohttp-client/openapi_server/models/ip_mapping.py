# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip_address: str=None, time_to_retire: str=None, type: str=None):
        """IpMapping - a model defined in OpenAPI

        :param ip_address: The ip_address of this IpMapping.
        :param time_to_retire: The time_to_retire of this IpMapping.
        :param type: The type of this IpMapping.
        """
        self.openapi_types = {
            'ip_address': str,
            'time_to_retire': str,
            'type': str
        }

        self.attribute_map = {
            'ip_address': 'ipAddress',
            'time_to_retire': 'timeToRetire',
            'type': 'type'
        }

        self._ip_address = ip_address
        self._time_to_retire = time_to_retire
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpMapping of this IpMapping.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip_address(self):
        """Gets the ip_address of this IpMapping.

        The IP address assigned.

        :return: The ip_address of this IpMapping.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this IpMapping.

        The IP address assigned.

        :param ip_address: The ip_address of this IpMapping.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def time_to_retire(self):
        """Gets the time_to_retire of this IpMapping.

        The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.

        :return: The time_to_retire of this IpMapping.
        :rtype: str
        """
        return self._time_to_retire

    @time_to_retire.setter
    def time_to_retire(self, time_to_retire):
        """Sets the time_to_retire of this IpMapping.

        The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.

        :param time_to_retire: The time_to_retire of this IpMapping.
        :type time_to_retire: str
        """

        self._time_to_retire = time_to_retire

    @property
    def type(self):
        """Gets the type of this IpMapping.

        The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.

        :return: The type of this IpMapping.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IpMapping.

        The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.

        :param type: The type of this IpMapping.
        :type type: str
        """
        allowed_values = ["SQL_IP_ADDRESS_TYPE_UNSPECIFIED", "PRIMARY", "OUTGOING", "PRIVATE", "MIGRATED_1ST_GEN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
