# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseFlags(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, value: str=None):
        """DatabaseFlags - a model defined in OpenAPI

        :param name: The name of this DatabaseFlags.
        :param value: The value of this DatabaseFlags.
        """
        self.openapi_types = {
            'name': str,
            'value': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value'
        }

        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseFlags':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseFlags of this DatabaseFlags.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this DatabaseFlags.

        The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.

        :return: The name of this DatabaseFlags.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseFlags.

        The name of the flag. These flags are passed at instance startup, so include both server options and system variables. Flags are specified with underscores, not hyphens. For more information, see [Configuring Database Flags](https://cloud.google.com/sql/docs/mysql/flags) in the Cloud SQL documentation.

        :param name: The name of this DatabaseFlags.
        :type name: str
        """

        self._name = name

    @property
    def value(self):
        """Gets the value of this DatabaseFlags.

        The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.

        :return: The value of this DatabaseFlags.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DatabaseFlags.

        The value of the flag. Boolean flags are set to `on` for true and `off` for false. This field must be omitted if the flag doesn't take a value.

        :param value: The value of this DatabaseFlags.
        :type value: str
        """

        self._value = value
