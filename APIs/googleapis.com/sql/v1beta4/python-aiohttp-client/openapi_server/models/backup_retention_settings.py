# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupRetentionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, retained_backups: int=None, retention_unit: str=None):
        """BackupRetentionSettings - a model defined in OpenAPI

        :param retained_backups: The retained_backups of this BackupRetentionSettings.
        :param retention_unit: The retention_unit of this BackupRetentionSettings.
        """
        self.openapi_types = {
            'retained_backups': int,
            'retention_unit': str
        }

        self.attribute_map = {
            'retained_backups': 'retainedBackups',
            'retention_unit': 'retentionUnit'
        }

        self._retained_backups = retained_backups
        self._retention_unit = retention_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupRetentionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupRetentionSettings of this BackupRetentionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def retained_backups(self):
        """Gets the retained_backups of this BackupRetentionSettings.

        Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.

        :return: The retained_backups of this BackupRetentionSettings.
        :rtype: int
        """
        return self._retained_backups

    @retained_backups.setter
    def retained_backups(self, retained_backups):
        """Sets the retained_backups of this BackupRetentionSettings.

        Depending on the value of retention_unit, this is used to determine if a backup needs to be deleted. If retention_unit is 'COUNT', we will retain this many backups.

        :param retained_backups: The retained_backups of this BackupRetentionSettings.
        :type retained_backups: int
        """

        self._retained_backups = retained_backups

    @property
    def retention_unit(self):
        """Gets the retention_unit of this BackupRetentionSettings.

        The unit that 'retained_backups' represents.

        :return: The retention_unit of this BackupRetentionSettings.
        :rtype: str
        """
        return self._retention_unit

    @retention_unit.setter
    def retention_unit(self, retention_unit):
        """Sets the retention_unit of this BackupRetentionSettings.

        The unit that 'retained_backups' represents.

        :param retention_unit: The retention_unit of this BackupRetentionSettings.
        :type retention_unit: str
        """
        allowed_values = ["RETENTION_UNIT_UNSPECIFIED", "COUNT"]  # noqa: E501
        if retention_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `retention_unit` ({0}), must be one of {1}"
                .format(retention_unit, allowed_values)
            )

        self._retention_unit = retention_unit
