# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DemoteMasterMySqlReplicaConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_certificate: str=None, client_certificate: str=None, client_key: str=None, kind: str=None, password: str=None, username: str=None):
        """DemoteMasterMySqlReplicaConfiguration - a model defined in OpenAPI

        :param ca_certificate: The ca_certificate of this DemoteMasterMySqlReplicaConfiguration.
        :param client_certificate: The client_certificate of this DemoteMasterMySqlReplicaConfiguration.
        :param client_key: The client_key of this DemoteMasterMySqlReplicaConfiguration.
        :param kind: The kind of this DemoteMasterMySqlReplicaConfiguration.
        :param password: The password of this DemoteMasterMySqlReplicaConfiguration.
        :param username: The username of this DemoteMasterMySqlReplicaConfiguration.
        """
        self.openapi_types = {
            'ca_certificate': str,
            'client_certificate': str,
            'client_key': str,
            'kind': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'ca_certificate': 'caCertificate',
            'client_certificate': 'clientCertificate',
            'client_key': 'clientKey',
            'kind': 'kind',
            'password': 'password',
            'username': 'username'
        }

        self._ca_certificate = ca_certificate
        self._client_certificate = client_certificate
        self._client_key = client_key
        self._kind = kind
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DemoteMasterMySqlReplicaConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DemoteMasterMySqlReplicaConfiguration of this DemoteMasterMySqlReplicaConfiguration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_certificate(self):
        """Gets the ca_certificate of this DemoteMasterMySqlReplicaConfiguration.

        PEM representation of the trusted CA's x509 certificate.

        :return: The ca_certificate of this DemoteMasterMySqlReplicaConfiguration.
        :rtype: str
        """
        return self._ca_certificate

    @ca_certificate.setter
    def ca_certificate(self, ca_certificate):
        """Sets the ca_certificate of this DemoteMasterMySqlReplicaConfiguration.

        PEM representation of the trusted CA's x509 certificate.

        :param ca_certificate: The ca_certificate of this DemoteMasterMySqlReplicaConfiguration.
        :type ca_certificate: str
        """

        self._ca_certificate = ca_certificate

    @property
    def client_certificate(self):
        """Gets the client_certificate of this DemoteMasterMySqlReplicaConfiguration.

        PEM representation of the replica's x509 certificate.

        :return: The client_certificate of this DemoteMasterMySqlReplicaConfiguration.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this DemoteMasterMySqlReplicaConfiguration.

        PEM representation of the replica's x509 certificate.

        :param client_certificate: The client_certificate of this DemoteMasterMySqlReplicaConfiguration.
        :type client_certificate: str
        """

        self._client_certificate = client_certificate

    @property
    def client_key(self):
        """Gets the client_key of this DemoteMasterMySqlReplicaConfiguration.

        PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate. The format of the replica's private key can be either PKCS #1 or PKCS #8.

        :return: The client_key of this DemoteMasterMySqlReplicaConfiguration.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this DemoteMasterMySqlReplicaConfiguration.

        PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate. The format of the replica's private key can be either PKCS #1 or PKCS #8.

        :param client_key: The client_key of this DemoteMasterMySqlReplicaConfiguration.
        :type client_key: str
        """

        self._client_key = client_key

    @property
    def kind(self):
        """Gets the kind of this DemoteMasterMySqlReplicaConfiguration.

        This is always `sql#demoteMasterMysqlReplicaConfiguration`.

        :return: The kind of this DemoteMasterMySqlReplicaConfiguration.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DemoteMasterMySqlReplicaConfiguration.

        This is always `sql#demoteMasterMysqlReplicaConfiguration`.

        :param kind: The kind of this DemoteMasterMySqlReplicaConfiguration.
        :type kind: str
        """

        self._kind = kind

    @property
    def password(self):
        """Gets the password of this DemoteMasterMySqlReplicaConfiguration.

        The password for the replication connection.

        :return: The password of this DemoteMasterMySqlReplicaConfiguration.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DemoteMasterMySqlReplicaConfiguration.

        The password for the replication connection.

        :param password: The password of this DemoteMasterMySqlReplicaConfiguration.
        :type password: str
        """

        self._password = password

    @property
    def username(self):
        """Gets the username of this DemoteMasterMySqlReplicaConfiguration.

        The username for the replication connection.

        :return: The username of this DemoteMasterMySqlReplicaConfiguration.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this DemoteMasterMySqlReplicaConfiguration.

        The username for the replication connection.

        :param username: The username of this DemoteMasterMySqlReplicaConfiguration.
        :type username: str
        """

        self._username = username
