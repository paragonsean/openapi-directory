# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.import_context_bak_import_options import ImportContextBakImportOptions
from openapi_server.models.import_context_csv_import_options import ImportContextCsvImportOptions
from openapi_server import util


class ImportContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bak_import_options: ImportContextBakImportOptions=None, csv_import_options: ImportContextCsvImportOptions=None, database: str=None, file_type: str=None, import_user: str=None, kind: str=None, uri: str=None):
        """ImportContext - a model defined in OpenAPI

        :param bak_import_options: The bak_import_options of this ImportContext.
        :param csv_import_options: The csv_import_options of this ImportContext.
        :param database: The database of this ImportContext.
        :param file_type: The file_type of this ImportContext.
        :param import_user: The import_user of this ImportContext.
        :param kind: The kind of this ImportContext.
        :param uri: The uri of this ImportContext.
        """
        self.openapi_types = {
            'bak_import_options': ImportContextBakImportOptions,
            'csv_import_options': ImportContextCsvImportOptions,
            'database': str,
            'file_type': str,
            'import_user': str,
            'kind': str,
            'uri': str
        }

        self.attribute_map = {
            'bak_import_options': 'bakImportOptions',
            'csv_import_options': 'csvImportOptions',
            'database': 'database',
            'file_type': 'fileType',
            'import_user': 'importUser',
            'kind': 'kind',
            'uri': 'uri'
        }

        self._bak_import_options = bak_import_options
        self._csv_import_options = csv_import_options
        self._database = database
        self._file_type = file_type
        self._import_user = import_user
        self._kind = kind
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportContext of this ImportContext.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bak_import_options(self):
        """Gets the bak_import_options of this ImportContext.


        :return: The bak_import_options of this ImportContext.
        :rtype: ImportContextBakImportOptions
        """
        return self._bak_import_options

    @bak_import_options.setter
    def bak_import_options(self, bak_import_options):
        """Sets the bak_import_options of this ImportContext.


        :param bak_import_options: The bak_import_options of this ImportContext.
        :type bak_import_options: ImportContextBakImportOptions
        """

        self._bak_import_options = bak_import_options

    @property
    def csv_import_options(self):
        """Gets the csv_import_options of this ImportContext.


        :return: The csv_import_options of this ImportContext.
        :rtype: ImportContextCsvImportOptions
        """
        return self._csv_import_options

    @csv_import_options.setter
    def csv_import_options(self, csv_import_options):
        """Sets the csv_import_options of this ImportContext.


        :param csv_import_options: The csv_import_options of this ImportContext.
        :type csv_import_options: ImportContextCsvImportOptions
        """

        self._csv_import_options = csv_import_options

    @property
    def database(self):
        """Gets the database of this ImportContext.

        The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.

        :return: The database of this ImportContext.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database):
        """Sets the database of this ImportContext.

        The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.

        :param database: The database of this ImportContext.
        :type database: str
        """

        self._database = database

    @property
    def file_type(self):
        """Gets the file_type of this ImportContext.

        The file type for the specified uri. * `SQL`: The file contains SQL statements. * `CSV`: The file contains CSV data. * `BAK`: The file contains backup data for a SQL Server instance.

        :return: The file_type of this ImportContext.
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ImportContext.

        The file type for the specified uri. * `SQL`: The file contains SQL statements. * `CSV`: The file contains CSV data. * `BAK`: The file contains backup data for a SQL Server instance.

        :param file_type: The file_type of this ImportContext.
        :type file_type: str
        """
        allowed_values = ["SQL_FILE_TYPE_UNSPECIFIED", "SQL", "CSV", "BAK"]  # noqa: E501
        if file_type not in allowed_values:
            raise ValueError(
                "Invalid value for `file_type` ({0}), must be one of {1}"
                .format(file_type, allowed_values)
            )

        self._file_type = file_type

    @property
    def import_user(self):
        """Gets the import_user of this ImportContext.

        The PostgreSQL user for this import operation. PostgreSQL instances only.

        :return: The import_user of this ImportContext.
        :rtype: str
        """
        return self._import_user

    @import_user.setter
    def import_user(self, import_user):
        """Sets the import_user of this ImportContext.

        The PostgreSQL user for this import operation. PostgreSQL instances only.

        :param import_user: The import_user of this ImportContext.
        :type import_user: str
        """

        self._import_user = import_user

    @property
    def kind(self):
        """Gets the kind of this ImportContext.

        This is always `sql#importContext`.

        :return: The kind of this ImportContext.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ImportContext.

        This is always `sql#importContext`.

        :param kind: The kind of this ImportContext.
        :type kind: str
        """

        self._kind = kind

    @property
    def uri(self):
        """Gets the uri of this ImportContext.

        Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file.

        :return: The uri of this ImportContext.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this ImportContext.

        Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file.

        :param uri: The uri of this ImportContext.
        :type uri: str
        """

        self._uri = uri
