# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportContextCsvImportOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, columns: List[str]=None, escape_character: str=None, fields_terminated_by: str=None, lines_terminated_by: str=None, quote_character: str=None, table: str=None):
        """ImportContextCsvImportOptions - a model defined in OpenAPI

        :param columns: The columns of this ImportContextCsvImportOptions.
        :param escape_character: The escape_character of this ImportContextCsvImportOptions.
        :param fields_terminated_by: The fields_terminated_by of this ImportContextCsvImportOptions.
        :param lines_terminated_by: The lines_terminated_by of this ImportContextCsvImportOptions.
        :param quote_character: The quote_character of this ImportContextCsvImportOptions.
        :param table: The table of this ImportContextCsvImportOptions.
        """
        self.openapi_types = {
            'columns': List[str],
            'escape_character': str,
            'fields_terminated_by': str,
            'lines_terminated_by': str,
            'quote_character': str,
            'table': str
        }

        self.attribute_map = {
            'columns': 'columns',
            'escape_character': 'escapeCharacter',
            'fields_terminated_by': 'fieldsTerminatedBy',
            'lines_terminated_by': 'linesTerminatedBy',
            'quote_character': 'quoteCharacter',
            'table': 'table'
        }

        self._columns = columns
        self._escape_character = escape_character
        self._fields_terminated_by = fields_terminated_by
        self._lines_terminated_by = lines_terminated_by
        self._quote_character = quote_character
        self._table = table

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportContextCsvImportOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImportContext_csvImportOptions of this ImportContextCsvImportOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def columns(self):
        """Gets the columns of this ImportContextCsvImportOptions.

        The columns to which CSV data is imported. If not specified, all columns of the database table are loaded with CSV data.

        :return: The columns of this ImportContextCsvImportOptions.
        :rtype: List[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this ImportContextCsvImportOptions.

        The columns to which CSV data is imported. If not specified, all columns of the database table are loaded with CSV data.

        :param columns: The columns of this ImportContextCsvImportOptions.
        :type columns: List[str]
        """

        self._columns = columns

    @property
    def escape_character(self):
        """Gets the escape_character of this ImportContextCsvImportOptions.

        Specifies the character that should appear before a data character that needs to be escaped.

        :return: The escape_character of this ImportContextCsvImportOptions.
        :rtype: str
        """
        return self._escape_character

    @escape_character.setter
    def escape_character(self, escape_character):
        """Sets the escape_character of this ImportContextCsvImportOptions.

        Specifies the character that should appear before a data character that needs to be escaped.

        :param escape_character: The escape_character of this ImportContextCsvImportOptions.
        :type escape_character: str
        """

        self._escape_character = escape_character

    @property
    def fields_terminated_by(self):
        """Gets the fields_terminated_by of this ImportContextCsvImportOptions.

        Specifies the character that separates columns within each row (line) of the file.

        :return: The fields_terminated_by of this ImportContextCsvImportOptions.
        :rtype: str
        """
        return self._fields_terminated_by

    @fields_terminated_by.setter
    def fields_terminated_by(self, fields_terminated_by):
        """Sets the fields_terminated_by of this ImportContextCsvImportOptions.

        Specifies the character that separates columns within each row (line) of the file.

        :param fields_terminated_by: The fields_terminated_by of this ImportContextCsvImportOptions.
        :type fields_terminated_by: str
        """

        self._fields_terminated_by = fields_terminated_by

    @property
    def lines_terminated_by(self):
        """Gets the lines_terminated_by of this ImportContextCsvImportOptions.

        This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.

        :return: The lines_terminated_by of this ImportContextCsvImportOptions.
        :rtype: str
        """
        return self._lines_terminated_by

    @lines_terminated_by.setter
    def lines_terminated_by(self, lines_terminated_by):
        """Sets the lines_terminated_by of this ImportContextCsvImportOptions.

        This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.

        :param lines_terminated_by: The lines_terminated_by of this ImportContextCsvImportOptions.
        :type lines_terminated_by: str
        """

        self._lines_terminated_by = lines_terminated_by

    @property
    def quote_character(self):
        """Gets the quote_character of this ImportContextCsvImportOptions.

        Specifies the quoting character to be used when a data value is quoted.

        :return: The quote_character of this ImportContextCsvImportOptions.
        :rtype: str
        """
        return self._quote_character

    @quote_character.setter
    def quote_character(self, quote_character):
        """Sets the quote_character of this ImportContextCsvImportOptions.

        Specifies the quoting character to be used when a data value is quoted.

        :param quote_character: The quote_character of this ImportContextCsvImportOptions.
        :type quote_character: str
        """

        self._quote_character = quote_character

    @property
    def table(self):
        """Gets the table of this ImportContextCsvImportOptions.

        The table to which CSV data is imported.

        :return: The table of this ImportContextCsvImportOptions.
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this ImportContextCsvImportOptions.

        The table to which CSV data is imported.

        :param table: The table of this ImportContextCsvImportOptions.
        :type table: str
        """

        self._table = table
