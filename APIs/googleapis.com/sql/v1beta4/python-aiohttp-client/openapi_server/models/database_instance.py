# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.database_instance_failover_replica import DatabaseInstanceFailoverReplica
from openapi_server.models.disk_encryption_configuration import DiskEncryptionConfiguration
from openapi_server.models.disk_encryption_status import DiskEncryptionStatus
from openapi_server.models.ip_mapping import IpMapping
from openapi_server.models.on_premises_configuration import OnPremisesConfiguration
from openapi_server.models.replica_configuration import ReplicaConfiguration
from openapi_server.models.settings import Settings
from openapi_server.models.sql_out_of_disk_report import SqlOutOfDiskReport
from openapi_server.models.sql_scheduled_maintenance import SqlScheduledMaintenance
from openapi_server.models.ssl_cert import SslCert
from openapi_server import util


class DatabaseInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available_maintenance_versions: List[str]=None, backend_type: str=None, connection_name: str=None, create_time: str=None, current_disk_size: str=None, database_installed_version: str=None, database_version: str=None, disk_encryption_configuration: DiskEncryptionConfiguration=None, disk_encryption_status: DiskEncryptionStatus=None, dns_name: str=None, etag: str=None, failover_replica: DatabaseInstanceFailoverReplica=None, gce_zone: str=None, instance_type: str=None, ip_addresses: List[IpMapping]=None, ipv6_address: str=None, kind: str=None, maintenance_version: str=None, master_instance_name: str=None, max_disk_size: str=None, name: str=None, on_premises_configuration: OnPremisesConfiguration=None, out_of_disk_report: SqlOutOfDiskReport=None, primary_dns_name: str=None, project: str=None, psc_service_attachment_link: str=None, region: str=None, replica_configuration: ReplicaConfiguration=None, replica_names: List[str]=None, root_password: str=None, satisfies_pzs: bool=None, scheduled_maintenance: SqlScheduledMaintenance=None, secondary_gce_zone: str=None, self_link: str=None, server_ca_cert: SslCert=None, service_account_email_address: str=None, settings: Settings=None, sql_network_architecture: str=None, state: str=None, suspension_reason: List[str]=None, write_endpoint: str=None):
        """DatabaseInstance - a model defined in OpenAPI

        :param available_maintenance_versions: The available_maintenance_versions of this DatabaseInstance.
        :param backend_type: The backend_type of this DatabaseInstance.
        :param connection_name: The connection_name of this DatabaseInstance.
        :param create_time: The create_time of this DatabaseInstance.
        :param current_disk_size: The current_disk_size of this DatabaseInstance.
        :param database_installed_version: The database_installed_version of this DatabaseInstance.
        :param database_version: The database_version of this DatabaseInstance.
        :param disk_encryption_configuration: The disk_encryption_configuration of this DatabaseInstance.
        :param disk_encryption_status: The disk_encryption_status of this DatabaseInstance.
        :param dns_name: The dns_name of this DatabaseInstance.
        :param etag: The etag of this DatabaseInstance.
        :param failover_replica: The failover_replica of this DatabaseInstance.
        :param gce_zone: The gce_zone of this DatabaseInstance.
        :param instance_type: The instance_type of this DatabaseInstance.
        :param ip_addresses: The ip_addresses of this DatabaseInstance.
        :param ipv6_address: The ipv6_address of this DatabaseInstance.
        :param kind: The kind of this DatabaseInstance.
        :param maintenance_version: The maintenance_version of this DatabaseInstance.
        :param master_instance_name: The master_instance_name of this DatabaseInstance.
        :param max_disk_size: The max_disk_size of this DatabaseInstance.
        :param name: The name of this DatabaseInstance.
        :param on_premises_configuration: The on_premises_configuration of this DatabaseInstance.
        :param out_of_disk_report: The out_of_disk_report of this DatabaseInstance.
        :param primary_dns_name: The primary_dns_name of this DatabaseInstance.
        :param project: The project of this DatabaseInstance.
        :param psc_service_attachment_link: The psc_service_attachment_link of this DatabaseInstance.
        :param region: The region of this DatabaseInstance.
        :param replica_configuration: The replica_configuration of this DatabaseInstance.
        :param replica_names: The replica_names of this DatabaseInstance.
        :param root_password: The root_password of this DatabaseInstance.
        :param satisfies_pzs: The satisfies_pzs of this DatabaseInstance.
        :param scheduled_maintenance: The scheduled_maintenance of this DatabaseInstance.
        :param secondary_gce_zone: The secondary_gce_zone of this DatabaseInstance.
        :param self_link: The self_link of this DatabaseInstance.
        :param server_ca_cert: The server_ca_cert of this DatabaseInstance.
        :param service_account_email_address: The service_account_email_address of this DatabaseInstance.
        :param settings: The settings of this DatabaseInstance.
        :param sql_network_architecture: The sql_network_architecture of this DatabaseInstance.
        :param state: The state of this DatabaseInstance.
        :param suspension_reason: The suspension_reason of this DatabaseInstance.
        :param write_endpoint: The write_endpoint of this DatabaseInstance.
        """
        self.openapi_types = {
            'available_maintenance_versions': List[str],
            'backend_type': str,
            'connection_name': str,
            'create_time': str,
            'current_disk_size': str,
            'database_installed_version': str,
            'database_version': str,
            'disk_encryption_configuration': DiskEncryptionConfiguration,
            'disk_encryption_status': DiskEncryptionStatus,
            'dns_name': str,
            'etag': str,
            'failover_replica': DatabaseInstanceFailoverReplica,
            'gce_zone': str,
            'instance_type': str,
            'ip_addresses': List[IpMapping],
            'ipv6_address': str,
            'kind': str,
            'maintenance_version': str,
            'master_instance_name': str,
            'max_disk_size': str,
            'name': str,
            'on_premises_configuration': OnPremisesConfiguration,
            'out_of_disk_report': SqlOutOfDiskReport,
            'primary_dns_name': str,
            'project': str,
            'psc_service_attachment_link': str,
            'region': str,
            'replica_configuration': ReplicaConfiguration,
            'replica_names': List[str],
            'root_password': str,
            'satisfies_pzs': bool,
            'scheduled_maintenance': SqlScheduledMaintenance,
            'secondary_gce_zone': str,
            'self_link': str,
            'server_ca_cert': SslCert,
            'service_account_email_address': str,
            'settings': Settings,
            'sql_network_architecture': str,
            'state': str,
            'suspension_reason': List[str],
            'write_endpoint': str
        }

        self.attribute_map = {
            'available_maintenance_versions': 'availableMaintenanceVersions',
            'backend_type': 'backendType',
            'connection_name': 'connectionName',
            'create_time': 'createTime',
            'current_disk_size': 'currentDiskSize',
            'database_installed_version': 'databaseInstalledVersion',
            'database_version': 'databaseVersion',
            'disk_encryption_configuration': 'diskEncryptionConfiguration',
            'disk_encryption_status': 'diskEncryptionStatus',
            'dns_name': 'dnsName',
            'etag': 'etag',
            'failover_replica': 'failoverReplica',
            'gce_zone': 'gceZone',
            'instance_type': 'instanceType',
            'ip_addresses': 'ipAddresses',
            'ipv6_address': 'ipv6Address',
            'kind': 'kind',
            'maintenance_version': 'maintenanceVersion',
            'master_instance_name': 'masterInstanceName',
            'max_disk_size': 'maxDiskSize',
            'name': 'name',
            'on_premises_configuration': 'onPremisesConfiguration',
            'out_of_disk_report': 'outOfDiskReport',
            'primary_dns_name': 'primaryDnsName',
            'project': 'project',
            'psc_service_attachment_link': 'pscServiceAttachmentLink',
            'region': 'region',
            'replica_configuration': 'replicaConfiguration',
            'replica_names': 'replicaNames',
            'root_password': 'rootPassword',
            'satisfies_pzs': 'satisfiesPzs',
            'scheduled_maintenance': 'scheduledMaintenance',
            'secondary_gce_zone': 'secondaryGceZone',
            'self_link': 'selfLink',
            'server_ca_cert': 'serverCaCert',
            'service_account_email_address': 'serviceAccountEmailAddress',
            'settings': 'settings',
            'sql_network_architecture': 'sqlNetworkArchitecture',
            'state': 'state',
            'suspension_reason': 'suspensionReason',
            'write_endpoint': 'writeEndpoint'
        }

        self._available_maintenance_versions = available_maintenance_versions
        self._backend_type = backend_type
        self._connection_name = connection_name
        self._create_time = create_time
        self._current_disk_size = current_disk_size
        self._database_installed_version = database_installed_version
        self._database_version = database_version
        self._disk_encryption_configuration = disk_encryption_configuration
        self._disk_encryption_status = disk_encryption_status
        self._dns_name = dns_name
        self._etag = etag
        self._failover_replica = failover_replica
        self._gce_zone = gce_zone
        self._instance_type = instance_type
        self._ip_addresses = ip_addresses
        self._ipv6_address = ipv6_address
        self._kind = kind
        self._maintenance_version = maintenance_version
        self._master_instance_name = master_instance_name
        self._max_disk_size = max_disk_size
        self._name = name
        self._on_premises_configuration = on_premises_configuration
        self._out_of_disk_report = out_of_disk_report
        self._primary_dns_name = primary_dns_name
        self._project = project
        self._psc_service_attachment_link = psc_service_attachment_link
        self._region = region
        self._replica_configuration = replica_configuration
        self._replica_names = replica_names
        self._root_password = root_password
        self._satisfies_pzs = satisfies_pzs
        self._scheduled_maintenance = scheduled_maintenance
        self._secondary_gce_zone = secondary_gce_zone
        self._self_link = self_link
        self._server_ca_cert = server_ca_cert
        self._service_account_email_address = service_account_email_address
        self._settings = settings
        self._sql_network_architecture = sql_network_architecture
        self._state = state
        self._suspension_reason = suspension_reason
        self._write_endpoint = write_endpoint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseInstance of this DatabaseInstance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available_maintenance_versions(self):
        """Gets the available_maintenance_versions of this DatabaseInstance.

        Output only. List all maintenance versions applicable on the instance

        :return: The available_maintenance_versions of this DatabaseInstance.
        :rtype: List[str]
        """
        return self._available_maintenance_versions

    @available_maintenance_versions.setter
    def available_maintenance_versions(self, available_maintenance_versions):
        """Sets the available_maintenance_versions of this DatabaseInstance.

        Output only. List all maintenance versions applicable on the instance

        :param available_maintenance_versions: The available_maintenance_versions of this DatabaseInstance.
        :type available_maintenance_versions: List[str]
        """

        self._available_maintenance_versions = available_maintenance_versions

    @property
    def backend_type(self):
        """Gets the backend_type of this DatabaseInstance.

        The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.

        :return: The backend_type of this DatabaseInstance.
        :rtype: str
        """
        return self._backend_type

    @backend_type.setter
    def backend_type(self, backend_type):
        """Sets the backend_type of this DatabaseInstance.

        The backend type. `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.

        :param backend_type: The backend_type of this DatabaseInstance.
        :type backend_type: str
        """
        allowed_values = ["SQL_BACKEND_TYPE_UNSPECIFIED", "FIRST_GEN", "SECOND_GEN", "EXTERNAL"]  # noqa: E501
        if backend_type not in allowed_values:
            raise ValueError(
                "Invalid value for `backend_type` ({0}), must be one of {1}"
                .format(backend_type, allowed_values)
            )

        self._backend_type = backend_type

    @property
    def connection_name(self):
        """Gets the connection_name of this DatabaseInstance.

        Connection name of the Cloud SQL instance used in connection strings.

        :return: The connection_name of this DatabaseInstance.
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """Sets the connection_name of this DatabaseInstance.

        Connection name of the Cloud SQL instance used in connection strings.

        :param connection_name: The connection_name of this DatabaseInstance.
        :type connection_name: str
        """

        self._connection_name = connection_name

    @property
    def create_time(self):
        """Gets the create_time of this DatabaseInstance.

        Output only. The time when the instance was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :return: The create_time of this DatabaseInstance.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this DatabaseInstance.

        Output only. The time when the instance was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.

        :param create_time: The create_time of this DatabaseInstance.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def current_disk_size(self):
        """Gets the current_disk_size of this DatabaseInstance.

        The current disk usage of the instance in bytes. This property has been deprecated. Use the \"cloudsql.googleapis.com/database/disk/bytes_used\" metric in Cloud Monitoring API instead. Please see [this announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ) for details.

        :return: The current_disk_size of this DatabaseInstance.
        :rtype: str
        """
        return self._current_disk_size

    @current_disk_size.setter
    def current_disk_size(self, current_disk_size):
        """Sets the current_disk_size of this DatabaseInstance.

        The current disk usage of the instance in bytes. This property has been deprecated. Use the \"cloudsql.googleapis.com/database/disk/bytes_used\" metric in Cloud Monitoring API instead. Please see [this announcement](https://groups.google.com/d/msg/google-cloud-sql-announce/I_7-F9EBhT0/BtvFtdFeAgAJ) for details.

        :param current_disk_size: The current_disk_size of this DatabaseInstance.
        :type current_disk_size: str
        """

        self._current_disk_size = current_disk_size

    @property
    def database_installed_version(self):
        """Gets the database_installed_version of this DatabaseInstance.

        Output only. Stores the current database version running on the instance including minor version such as `MYSQL_8_0_18`.

        :return: The database_installed_version of this DatabaseInstance.
        :rtype: str
        """
        return self._database_installed_version

    @database_installed_version.setter
    def database_installed_version(self, database_installed_version):
        """Sets the database_installed_version of this DatabaseInstance.

        Output only. Stores the current database version running on the instance including minor version such as `MYSQL_8_0_18`.

        :param database_installed_version: The database_installed_version of this DatabaseInstance.
        :type database_installed_version: str
        """

        self._database_installed_version = database_installed_version

    @property
    def database_version(self):
        """Gets the database_version of this DatabaseInstance.

        The database engine type and version. The `databaseVersion` field cannot be changed after instance creation.

        :return: The database_version of this DatabaseInstance.
        :rtype: str
        """
        return self._database_version

    @database_version.setter
    def database_version(self, database_version):
        """Sets the database_version of this DatabaseInstance.

        The database engine type and version. The `databaseVersion` field cannot be changed after instance creation.

        :param database_version: The database_version of this DatabaseInstance.
        :type database_version: str
        """
        allowed_values = ["SQL_DATABASE_VERSION_UNSPECIFIED", "MYSQL_5_1", "MYSQL_5_5", "MYSQL_5_6", "MYSQL_5_7", "SQLSERVER_2017_STANDARD", "SQLSERVER_2017_ENTERPRISE", "SQLSERVER_2017_EXPRESS", "SQLSERVER_2017_WEB", "POSTGRES_9_6", "POSTGRES_10", "POSTGRES_11", "POSTGRES_12", "POSTGRES_13", "POSTGRES_14", "POSTGRES_15", "MYSQL_8_0", "MYSQL_8_0_18", "MYSQL_8_0_26", "MYSQL_8_0_27", "MYSQL_8_0_28", "MYSQL_8_0_29", "MYSQL_8_0_30", "MYSQL_8_0_31", "MYSQL_8_0_32", "MYSQL_8_0_33", "MYSQL_8_0_34", "MYSQL_8_0_35", "MYSQL_8_0_36", "SQLSERVER_2019_STANDARD", "SQLSERVER_2019_ENTERPRISE", "SQLSERVER_2019_EXPRESS", "SQLSERVER_2019_WEB", "SQLSERVER_2022_STANDARD", "SQLSERVER_2022_ENTERPRISE", "SQLSERVER_2022_EXPRESS", "SQLSERVER_2022_WEB"]  # noqa: E501
        if database_version not in allowed_values:
            raise ValueError(
                "Invalid value for `database_version` ({0}), must be one of {1}"
                .format(database_version, allowed_values)
            )

        self._database_version = database_version

    @property
    def disk_encryption_configuration(self):
        """Gets the disk_encryption_configuration of this DatabaseInstance.


        :return: The disk_encryption_configuration of this DatabaseInstance.
        :rtype: DiskEncryptionConfiguration
        """
        return self._disk_encryption_configuration

    @disk_encryption_configuration.setter
    def disk_encryption_configuration(self, disk_encryption_configuration):
        """Sets the disk_encryption_configuration of this DatabaseInstance.


        :param disk_encryption_configuration: The disk_encryption_configuration of this DatabaseInstance.
        :type disk_encryption_configuration: DiskEncryptionConfiguration
        """

        self._disk_encryption_configuration = disk_encryption_configuration

    @property
    def disk_encryption_status(self):
        """Gets the disk_encryption_status of this DatabaseInstance.


        :return: The disk_encryption_status of this DatabaseInstance.
        :rtype: DiskEncryptionStatus
        """
        return self._disk_encryption_status

    @disk_encryption_status.setter
    def disk_encryption_status(self, disk_encryption_status):
        """Sets the disk_encryption_status of this DatabaseInstance.


        :param disk_encryption_status: The disk_encryption_status of this DatabaseInstance.
        :type disk_encryption_status: DiskEncryptionStatus
        """

        self._disk_encryption_status = disk_encryption_status

    @property
    def dns_name(self):
        """Gets the dns_name of this DatabaseInstance.

        Output only. The dns name of the instance.

        :return: The dns_name of this DatabaseInstance.
        :rtype: str
        """
        return self._dns_name

    @dns_name.setter
    def dns_name(self, dns_name):
        """Sets the dns_name of this DatabaseInstance.

        Output only. The dns name of the instance.

        :param dns_name: The dns_name of this DatabaseInstance.
        :type dns_name: str
        """

        self._dns_name = dns_name

    @property
    def etag(self):
        """Gets the etag of this DatabaseInstance.

        This field is deprecated and will be removed from a future version of the API. Use the `settings.settingsVersion` field instead.

        :return: The etag of this DatabaseInstance.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DatabaseInstance.

        This field is deprecated and will be removed from a future version of the API. Use the `settings.settingsVersion` field instead.

        :param etag: The etag of this DatabaseInstance.
        :type etag: str
        """

        self._etag = etag

    @property
    def failover_replica(self):
        """Gets the failover_replica of this DatabaseInstance.


        :return: The failover_replica of this DatabaseInstance.
        :rtype: DatabaseInstanceFailoverReplica
        """
        return self._failover_replica

    @failover_replica.setter
    def failover_replica(self, failover_replica):
        """Sets the failover_replica of this DatabaseInstance.


        :param failover_replica: The failover_replica of this DatabaseInstance.
        :type failover_replica: DatabaseInstanceFailoverReplica
        """

        self._failover_replica = failover_replica

    @property
    def gce_zone(self):
        """Gets the gce_zone of this DatabaseInstance.

        The Compute Engine zone that the instance is currently serving from. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary zone. WARNING: Changing this might restart the instance.

        :return: The gce_zone of this DatabaseInstance.
        :rtype: str
        """
        return self._gce_zone

    @gce_zone.setter
    def gce_zone(self, gce_zone):
        """Sets the gce_zone of this DatabaseInstance.

        The Compute Engine zone that the instance is currently serving from. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary zone. WARNING: Changing this might restart the instance.

        :param gce_zone: The gce_zone of this DatabaseInstance.
        :type gce_zone: str
        """

        self._gce_zone = gce_zone

    @property
    def instance_type(self):
        """Gets the instance_type of this DatabaseInstance.

        The instance type.

        :return: The instance_type of this DatabaseInstance.
        :rtype: str
        """
        return self._instance_type

    @instance_type.setter
    def instance_type(self, instance_type):
        """Sets the instance_type of this DatabaseInstance.

        The instance type.

        :param instance_type: The instance_type of this DatabaseInstance.
        :type instance_type: str
        """
        allowed_values = ["SQL_INSTANCE_TYPE_UNSPECIFIED", "CLOUD_SQL_INSTANCE", "ON_PREMISES_INSTANCE", "READ_REPLICA_INSTANCE"]  # noqa: E501
        if instance_type not in allowed_values:
            raise ValueError(
                "Invalid value for `instance_type` ({0}), must be one of {1}"
                .format(instance_type, allowed_values)
            )

        self._instance_type = instance_type

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this DatabaseInstance.

        The assigned IP addresses for the instance.

        :return: The ip_addresses of this DatabaseInstance.
        :rtype: List[IpMapping]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this DatabaseInstance.

        The assigned IP addresses for the instance.

        :param ip_addresses: The ip_addresses of this DatabaseInstance.
        :type ip_addresses: List[IpMapping]
        """

        self._ip_addresses = ip_addresses

    @property
    def ipv6_address(self):
        """Gets the ipv6_address of this DatabaseInstance.

        The IPv6 address assigned to the instance. (Deprecated) This property was applicable only to First Generation instances.

        :return: The ipv6_address of this DatabaseInstance.
        :rtype: str
        """
        return self._ipv6_address

    @ipv6_address.setter
    def ipv6_address(self, ipv6_address):
        """Sets the ipv6_address of this DatabaseInstance.

        The IPv6 address assigned to the instance. (Deprecated) This property was applicable only to First Generation instances.

        :param ipv6_address: The ipv6_address of this DatabaseInstance.
        :type ipv6_address: str
        """

        self._ipv6_address = ipv6_address

    @property
    def kind(self):
        """Gets the kind of this DatabaseInstance.

        This is always `sql#instance`.

        :return: The kind of this DatabaseInstance.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this DatabaseInstance.

        This is always `sql#instance`.

        :param kind: The kind of this DatabaseInstance.
        :type kind: str
        """

        self._kind = kind

    @property
    def maintenance_version(self):
        """Gets the maintenance_version of this DatabaseInstance.

        The current software version on the instance.

        :return: The maintenance_version of this DatabaseInstance.
        :rtype: str
        """
        return self._maintenance_version

    @maintenance_version.setter
    def maintenance_version(self, maintenance_version):
        """Sets the maintenance_version of this DatabaseInstance.

        The current software version on the instance.

        :param maintenance_version: The maintenance_version of this DatabaseInstance.
        :type maintenance_version: str
        """

        self._maintenance_version = maintenance_version

    @property
    def master_instance_name(self):
        """Gets the master_instance_name of this DatabaseInstance.

        The name of the instance which will act as primary in the replication setup.

        :return: The master_instance_name of this DatabaseInstance.
        :rtype: str
        """
        return self._master_instance_name

    @master_instance_name.setter
    def master_instance_name(self, master_instance_name):
        """Sets the master_instance_name of this DatabaseInstance.

        The name of the instance which will act as primary in the replication setup.

        :param master_instance_name: The master_instance_name of this DatabaseInstance.
        :type master_instance_name: str
        """

        self._master_instance_name = master_instance_name

    @property
    def max_disk_size(self):
        """Gets the max_disk_size of this DatabaseInstance.

        The maximum disk size of the instance in bytes.

        :return: The max_disk_size of this DatabaseInstance.
        :rtype: str
        """
        return self._max_disk_size

    @max_disk_size.setter
    def max_disk_size(self, max_disk_size):
        """Sets the max_disk_size of this DatabaseInstance.

        The maximum disk size of the instance in bytes.

        :param max_disk_size: The max_disk_size of this DatabaseInstance.
        :type max_disk_size: str
        """

        self._max_disk_size = max_disk_size

    @property
    def name(self):
        """Gets the name of this DatabaseInstance.

        Name of the Cloud SQL instance. This does not include the project ID.

        :return: The name of this DatabaseInstance.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DatabaseInstance.

        Name of the Cloud SQL instance. This does not include the project ID.

        :param name: The name of this DatabaseInstance.
        :type name: str
        """

        self._name = name

    @property
    def on_premises_configuration(self):
        """Gets the on_premises_configuration of this DatabaseInstance.


        :return: The on_premises_configuration of this DatabaseInstance.
        :rtype: OnPremisesConfiguration
        """
        return self._on_premises_configuration

    @on_premises_configuration.setter
    def on_premises_configuration(self, on_premises_configuration):
        """Sets the on_premises_configuration of this DatabaseInstance.


        :param on_premises_configuration: The on_premises_configuration of this DatabaseInstance.
        :type on_premises_configuration: OnPremisesConfiguration
        """

        self._on_premises_configuration = on_premises_configuration

    @property
    def out_of_disk_report(self):
        """Gets the out_of_disk_report of this DatabaseInstance.


        :return: The out_of_disk_report of this DatabaseInstance.
        :rtype: SqlOutOfDiskReport
        """
        return self._out_of_disk_report

    @out_of_disk_report.setter
    def out_of_disk_report(self, out_of_disk_report):
        """Sets the out_of_disk_report of this DatabaseInstance.


        :param out_of_disk_report: The out_of_disk_report of this DatabaseInstance.
        :type out_of_disk_report: SqlOutOfDiskReport
        """

        self._out_of_disk_report = out_of_disk_report

    @property
    def primary_dns_name(self):
        """Gets the primary_dns_name of this DatabaseInstance.

        Output only. DEPRECATED: please use write_endpoint instead.

        :return: The primary_dns_name of this DatabaseInstance.
        :rtype: str
        """
        return self._primary_dns_name

    @primary_dns_name.setter
    def primary_dns_name(self, primary_dns_name):
        """Sets the primary_dns_name of this DatabaseInstance.

        Output only. DEPRECATED: please use write_endpoint instead.

        :param primary_dns_name: The primary_dns_name of this DatabaseInstance.
        :type primary_dns_name: str
        """

        self._primary_dns_name = primary_dns_name

    @property
    def project(self):
        """Gets the project of this DatabaseInstance.

        The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.

        :return: The project of this DatabaseInstance.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DatabaseInstance.

        The project ID of the project containing the Cloud SQL instance. The Google apps domain is prefixed if applicable.

        :param project: The project of this DatabaseInstance.
        :type project: str
        """

        self._project = project

    @property
    def psc_service_attachment_link(self):
        """Gets the psc_service_attachment_link of this DatabaseInstance.

        Output only. The link to service attachment of PSC instance.

        :return: The psc_service_attachment_link of this DatabaseInstance.
        :rtype: str
        """
        return self._psc_service_attachment_link

    @psc_service_attachment_link.setter
    def psc_service_attachment_link(self, psc_service_attachment_link):
        """Sets the psc_service_attachment_link of this DatabaseInstance.

        Output only. The link to service attachment of PSC instance.

        :param psc_service_attachment_link: The psc_service_attachment_link of this DatabaseInstance.
        :type psc_service_attachment_link: str
        """

        self._psc_service_attachment_link = psc_service_attachment_link

    @property
    def region(self):
        """Gets the region of this DatabaseInstance.

        The geographical region of the Cloud SQL instance. It can be one of the [regions](https://cloud.google.com/sql/docs/mysql/locations#location-r) where Cloud SQL operates: For example, `asia-east1`, `europe-west1`, and `us-central1`. The default value is `us-central1`.

        :return: The region of this DatabaseInstance.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this DatabaseInstance.

        The geographical region of the Cloud SQL instance. It can be one of the [regions](https://cloud.google.com/sql/docs/mysql/locations#location-r) where Cloud SQL operates: For example, `asia-east1`, `europe-west1`, and `us-central1`. The default value is `us-central1`.

        :param region: The region of this DatabaseInstance.
        :type region: str
        """

        self._region = region

    @property
    def replica_configuration(self):
        """Gets the replica_configuration of this DatabaseInstance.


        :return: The replica_configuration of this DatabaseInstance.
        :rtype: ReplicaConfiguration
        """
        return self._replica_configuration

    @replica_configuration.setter
    def replica_configuration(self, replica_configuration):
        """Sets the replica_configuration of this DatabaseInstance.


        :param replica_configuration: The replica_configuration of this DatabaseInstance.
        :type replica_configuration: ReplicaConfiguration
        """

        self._replica_configuration = replica_configuration

    @property
    def replica_names(self):
        """Gets the replica_names of this DatabaseInstance.

        The replicas of the instance.

        :return: The replica_names of this DatabaseInstance.
        :rtype: List[str]
        """
        return self._replica_names

    @replica_names.setter
    def replica_names(self, replica_names):
        """Sets the replica_names of this DatabaseInstance.

        The replicas of the instance.

        :param replica_names: The replica_names of this DatabaseInstance.
        :type replica_names: List[str]
        """

        self._replica_names = replica_names

    @property
    def root_password(self):
        """Gets the root_password of this DatabaseInstance.

        Initial root password. Use only on creation. You must set root passwords before you can connect to PostgreSQL instances.

        :return: The root_password of this DatabaseInstance.
        :rtype: str
        """
        return self._root_password

    @root_password.setter
    def root_password(self, root_password):
        """Sets the root_password of this DatabaseInstance.

        Initial root password. Use only on creation. You must set root passwords before you can connect to PostgreSQL instances.

        :param root_password: The root_password of this DatabaseInstance.
        :type root_password: str
        """

        self._root_password = root_password

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this DatabaseInstance.

        The status indicating if instance satisfiesPzs. Reserved for future use.

        :return: The satisfies_pzs of this DatabaseInstance.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this DatabaseInstance.

        The status indicating if instance satisfiesPzs. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this DatabaseInstance.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def scheduled_maintenance(self):
        """Gets the scheduled_maintenance of this DatabaseInstance.


        :return: The scheduled_maintenance of this DatabaseInstance.
        :rtype: SqlScheduledMaintenance
        """
        return self._scheduled_maintenance

    @scheduled_maintenance.setter
    def scheduled_maintenance(self, scheduled_maintenance):
        """Sets the scheduled_maintenance of this DatabaseInstance.


        :param scheduled_maintenance: The scheduled_maintenance of this DatabaseInstance.
        :type scheduled_maintenance: SqlScheduledMaintenance
        """

        self._scheduled_maintenance = scheduled_maintenance

    @property
    def secondary_gce_zone(self):
        """Gets the secondary_gce_zone of this DatabaseInstance.

        The Compute Engine zone that the failover instance is currently serving from for a regional instance. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary/failover zone.

        :return: The secondary_gce_zone of this DatabaseInstance.
        :rtype: str
        """
        return self._secondary_gce_zone

    @secondary_gce_zone.setter
    def secondary_gce_zone(self, secondary_gce_zone):
        """Sets the secondary_gce_zone of this DatabaseInstance.

        The Compute Engine zone that the failover instance is currently serving from for a regional instance. This value could be different from the zone that was specified when the instance was created if the instance has failed over to its secondary/failover zone.

        :param secondary_gce_zone: The secondary_gce_zone of this DatabaseInstance.
        :type secondary_gce_zone: str
        """

        self._secondary_gce_zone = secondary_gce_zone

    @property
    def self_link(self):
        """Gets the self_link of this DatabaseInstance.

        The URI of this resource.

        :return: The self_link of this DatabaseInstance.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this DatabaseInstance.

        The URI of this resource.

        :param self_link: The self_link of this DatabaseInstance.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def server_ca_cert(self):
        """Gets the server_ca_cert of this DatabaseInstance.


        :return: The server_ca_cert of this DatabaseInstance.
        :rtype: SslCert
        """
        return self._server_ca_cert

    @server_ca_cert.setter
    def server_ca_cert(self, server_ca_cert):
        """Sets the server_ca_cert of this DatabaseInstance.


        :param server_ca_cert: The server_ca_cert of this DatabaseInstance.
        :type server_ca_cert: SslCert
        """

        self._server_ca_cert = server_ca_cert

    @property
    def service_account_email_address(self):
        """Gets the service_account_email_address of this DatabaseInstance.

        The service account email address assigned to the instance. \\This property is read-only.

        :return: The service_account_email_address of this DatabaseInstance.
        :rtype: str
        """
        return self._service_account_email_address

    @service_account_email_address.setter
    def service_account_email_address(self, service_account_email_address):
        """Sets the service_account_email_address of this DatabaseInstance.

        The service account email address assigned to the instance. \\This property is read-only.

        :param service_account_email_address: The service_account_email_address of this DatabaseInstance.
        :type service_account_email_address: str
        """

        self._service_account_email_address = service_account_email_address

    @property
    def settings(self):
        """Gets the settings of this DatabaseInstance.


        :return: The settings of this DatabaseInstance.
        :rtype: Settings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this DatabaseInstance.


        :param settings: The settings of this DatabaseInstance.
        :type settings: Settings
        """

        self._settings = settings

    @property
    def sql_network_architecture(self):
        """Gets the sql_network_architecture of this DatabaseInstance.

        The SQL network architecture for the instance.

        :return: The sql_network_architecture of this DatabaseInstance.
        :rtype: str
        """
        return self._sql_network_architecture

    @sql_network_architecture.setter
    def sql_network_architecture(self, sql_network_architecture):
        """Sets the sql_network_architecture of this DatabaseInstance.

        The SQL network architecture for the instance.

        :param sql_network_architecture: The sql_network_architecture of this DatabaseInstance.
        :type sql_network_architecture: str
        """
        allowed_values = ["SQL_NETWORK_ARCHITECTURE_UNSPECIFIED", "NEW_NETWORK_ARCHITECTURE", "OLD_NETWORK_ARCHITECTURE"]  # noqa: E501
        if sql_network_architecture not in allowed_values:
            raise ValueError(
                "Invalid value for `sql_network_architecture` ({0}), must be one of {1}"
                .format(sql_network_architecture, allowed_values)
            )

        self._sql_network_architecture = sql_network_architecture

    @property
    def state(self):
        """Gets the state of this DatabaseInstance.

        The current serving state of the Cloud SQL instance.

        :return: The state of this DatabaseInstance.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DatabaseInstance.

        The current serving state of the Cloud SQL instance.

        :param state: The state of this DatabaseInstance.
        :type state: str
        """
        allowed_values = ["SQL_INSTANCE_STATE_UNSPECIFIED", "RUNNABLE", "SUSPENDED", "PENDING_DELETE", "PENDING_CREATE", "MAINTENANCE", "FAILED", "ONLINE_MAINTENANCE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def suspension_reason(self):
        """Gets the suspension_reason of this DatabaseInstance.

        If the instance state is SUSPENDED, the reason for the suspension.

        :return: The suspension_reason of this DatabaseInstance.
        :rtype: List[str]
        """
        return self._suspension_reason

    @suspension_reason.setter
    def suspension_reason(self, suspension_reason):
        """Sets the suspension_reason of this DatabaseInstance.

        If the instance state is SUSPENDED, the reason for the suspension.

        :param suspension_reason: The suspension_reason of this DatabaseInstance.
        :type suspension_reason: List[str]
        """
        allowed_values = ["SQL_SUSPENSION_REASON_UNSPECIFIED", "BILLING_ISSUE", "LEGAL_ISSUE", "OPERATIONAL_ISSUE", "KMS_KEY_ISSUE"]  # noqa: E501
        if not set(suspension_reason).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `suspension_reason` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(suspension_reason) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._suspension_reason = suspension_reason

    @property
    def write_endpoint(self):
        """Gets the write_endpoint of this DatabaseInstance.

        Output only. The dns name of the primary instance in a replication group.

        :return: The write_endpoint of this DatabaseInstance.
        :rtype: str
        """
        return self._write_endpoint

    @write_endpoint.setter
    def write_endpoint(self, write_endpoint):
        """Sets the write_endpoint of this DatabaseInstance.

        Output only. The dns name of the primary instance in a replication group.

        :param write_endpoint: The write_endpoint of this DatabaseInstance.
        :type write_endpoint: str
        """

        self._write_endpoint = write_endpoint
