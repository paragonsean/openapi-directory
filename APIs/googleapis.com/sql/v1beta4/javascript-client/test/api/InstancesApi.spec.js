/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudSqlAdminApi);
  }
}(this, function(expect, CloudSqlAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudSqlAdminApi.InstancesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('InstancesApi', function() {
    describe('sqlInstancesAddServerCa', function() {
      it('should call sqlInstancesAddServerCa successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesAddServerCa
        //instance.sqlInstancesAddServerCa(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesClone', function() {
      it('should call sqlInstancesClone successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesClone
        //instance.sqlInstancesClone(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesDelete', function() {
      it('should call sqlInstancesDelete successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesDelete
        //instance.sqlInstancesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesDemote', function() {
      it('should call sqlInstancesDemote successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesDemote
        //instance.sqlInstancesDemote(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesDemoteMaster', function() {
      it('should call sqlInstancesDemoteMaster successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesDemoteMaster
        //instance.sqlInstancesDemoteMaster(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesExport', function() {
      it('should call sqlInstancesExport successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesExport
        //instance.sqlInstancesExport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesFailover', function() {
      it('should call sqlInstancesFailover successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesFailover
        //instance.sqlInstancesFailover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesGet', function() {
      it('should call sqlInstancesGet successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesGet
        //instance.sqlInstancesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesImport', function() {
      it('should call sqlInstancesImport successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesImport
        //instance.sqlInstancesImport(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesInsert', function() {
      it('should call sqlInstancesInsert successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesInsert
        //instance.sqlInstancesInsert(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesList', function() {
      it('should call sqlInstancesList successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesList
        //instance.sqlInstancesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesListServerCas', function() {
      it('should call sqlInstancesListServerCas successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesListServerCas
        //instance.sqlInstancesListServerCas(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesPatch', function() {
      it('should call sqlInstancesPatch successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesPatch
        //instance.sqlInstancesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesPromoteReplica', function() {
      it('should call sqlInstancesPromoteReplica successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesPromoteReplica
        //instance.sqlInstancesPromoteReplica(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesReencrypt', function() {
      it('should call sqlInstancesReencrypt successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesReencrypt
        //instance.sqlInstancesReencrypt(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesResetSslConfig', function() {
      it('should call sqlInstancesResetSslConfig successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesResetSslConfig
        //instance.sqlInstancesResetSslConfig(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesRestart', function() {
      it('should call sqlInstancesRestart successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesRestart
        //instance.sqlInstancesRestart(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesRestoreBackup', function() {
      it('should call sqlInstancesRestoreBackup successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesRestoreBackup
        //instance.sqlInstancesRestoreBackup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesRotateServerCa', function() {
      it('should call sqlInstancesRotateServerCa successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesRotateServerCa
        //instance.sqlInstancesRotateServerCa(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesStartReplica', function() {
      it('should call sqlInstancesStartReplica successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesStartReplica
        //instance.sqlInstancesStartReplica(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesStopReplica', function() {
      it('should call sqlInstancesStopReplica successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesStopReplica
        //instance.sqlInstancesStopReplica(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesSwitchover', function() {
      it('should call sqlInstancesSwitchover successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesSwitchover
        //instance.sqlInstancesSwitchover(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesTruncateLog', function() {
      it('should call sqlInstancesTruncateLog successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesTruncateLog
        //instance.sqlInstancesTruncateLog(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('sqlInstancesUpdate', function() {
      it('should call sqlInstancesUpdate successfully', function(done) {
        //uncomment below and update the code to test sqlInstancesUpdate
        //instance.sqlInstancesUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
