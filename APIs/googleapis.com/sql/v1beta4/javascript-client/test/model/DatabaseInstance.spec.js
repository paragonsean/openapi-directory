/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudSqlAdminApi);
  }
}(this, function(expect, CloudSqlAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudSqlAdminApi.DatabaseInstance();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DatabaseInstance', function() {
    it('should create an instance of DatabaseInstance', function() {
      // uncomment below and update the code to test DatabaseInstance
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be.a(CloudSqlAdminApi.DatabaseInstance);
    });

    it('should have the property availableMaintenanceVersions (base name: "availableMaintenanceVersions")', function() {
      // uncomment below and update the code to test the property availableMaintenanceVersions
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property backendType (base name: "backendType")', function() {
      // uncomment below and update the code to test the property backendType
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property connectionName (base name: "connectionName")', function() {
      // uncomment below and update the code to test the property connectionName
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property createTime (base name: "createTime")', function() {
      // uncomment below and update the code to test the property createTime
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property currentDiskSize (base name: "currentDiskSize")', function() {
      // uncomment below and update the code to test the property currentDiskSize
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property databaseInstalledVersion (base name: "databaseInstalledVersion")', function() {
      // uncomment below and update the code to test the property databaseInstalledVersion
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property databaseVersion (base name: "databaseVersion")', function() {
      // uncomment below and update the code to test the property databaseVersion
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property diskEncryptionConfiguration (base name: "diskEncryptionConfiguration")', function() {
      // uncomment below and update the code to test the property diskEncryptionConfiguration
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property diskEncryptionStatus (base name: "diskEncryptionStatus")', function() {
      // uncomment below and update the code to test the property diskEncryptionStatus
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property dnsName (base name: "dnsName")', function() {
      // uncomment below and update the code to test the property dnsName
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property etag (base name: "etag")', function() {
      // uncomment below and update the code to test the property etag
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property failoverReplica (base name: "failoverReplica")', function() {
      // uncomment below and update the code to test the property failoverReplica
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property gceZone (base name: "gceZone")', function() {
      // uncomment below and update the code to test the property gceZone
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property instanceType (base name: "instanceType")', function() {
      // uncomment below and update the code to test the property instanceType
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property ipAddresses (base name: "ipAddresses")', function() {
      // uncomment below and update the code to test the property ipAddresses
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property ipv6Address (base name: "ipv6Address")', function() {
      // uncomment below and update the code to test the property ipv6Address
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceVersion (base name: "maintenanceVersion")', function() {
      // uncomment below and update the code to test the property maintenanceVersion
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property masterInstanceName (base name: "masterInstanceName")', function() {
      // uncomment below and update the code to test the property masterInstanceName
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property maxDiskSize (base name: "maxDiskSize")', function() {
      // uncomment below and update the code to test the property maxDiskSize
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property onPremisesConfiguration (base name: "onPremisesConfiguration")', function() {
      // uncomment below and update the code to test the property onPremisesConfiguration
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property outOfDiskReport (base name: "outOfDiskReport")', function() {
      // uncomment below and update the code to test the property outOfDiskReport
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property primaryDnsName (base name: "primaryDnsName")', function() {
      // uncomment below and update the code to test the property primaryDnsName
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property project (base name: "project")', function() {
      // uncomment below and update the code to test the property project
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property pscServiceAttachmentLink (base name: "pscServiceAttachmentLink")', function() {
      // uncomment below and update the code to test the property pscServiceAttachmentLink
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property replicaConfiguration (base name: "replicaConfiguration")', function() {
      // uncomment below and update the code to test the property replicaConfiguration
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property replicaNames (base name: "replicaNames")', function() {
      // uncomment below and update the code to test the property replicaNames
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property rootPassword (base name: "rootPassword")', function() {
      // uncomment below and update the code to test the property rootPassword
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property satisfiesPzs (base name: "satisfiesPzs")', function() {
      // uncomment below and update the code to test the property satisfiesPzs
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property scheduledMaintenance (base name: "scheduledMaintenance")', function() {
      // uncomment below and update the code to test the property scheduledMaintenance
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property secondaryGceZone (base name: "secondaryGceZone")', function() {
      // uncomment below and update the code to test the property secondaryGceZone
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property selfLink (base name: "selfLink")', function() {
      // uncomment below and update the code to test the property selfLink
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property serverCaCert (base name: "serverCaCert")', function() {
      // uncomment below and update the code to test the property serverCaCert
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property serviceAccountEmailAddress (base name: "serviceAccountEmailAddress")', function() {
      // uncomment below and update the code to test the property serviceAccountEmailAddress
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property settings (base name: "settings")', function() {
      // uncomment below and update the code to test the property settings
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property sqlNetworkArchitecture (base name: "sqlNetworkArchitecture")', function() {
      // uncomment below and update the code to test the property sqlNetworkArchitecture
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property suspensionReason (base name: "suspensionReason")', function() {
      // uncomment below and update the code to test the property suspensionReason
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

    it('should have the property writeEndpoint (base name: "writeEndpoint")', function() {
      // uncomment below and update the code to test the property writeEndpoint
      //var instance = new CloudSqlAdminApi.DatabaseInstance();
      //expect(instance).to.be();
    });

  });

}));
