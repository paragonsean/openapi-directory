/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudSqlAdminApi);
  }
}(this, function(expect, CloudSqlAdminApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudSqlAdminApi.Settings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Settings', function() {
    it('should create an instance of Settings', function() {
      // uncomment below and update the code to test Settings
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be.a(CloudSqlAdminApi.Settings);
    });

    it('should have the property activationPolicy (base name: "activationPolicy")', function() {
      // uncomment below and update the code to test the property activationPolicy
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property activeDirectoryConfig (base name: "activeDirectoryConfig")', function() {
      // uncomment below and update the code to test the property activeDirectoryConfig
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property advancedMachineFeatures (base name: "advancedMachineFeatures")', function() {
      // uncomment below and update the code to test the property advancedMachineFeatures
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property authorizedGaeApplications (base name: "authorizedGaeApplications")', function() {
      // uncomment below and update the code to test the property authorizedGaeApplications
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property availabilityType (base name: "availabilityType")', function() {
      // uncomment below and update the code to test the property availabilityType
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property backupConfiguration (base name: "backupConfiguration")', function() {
      // uncomment below and update the code to test the property backupConfiguration
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property collation (base name: "collation")', function() {
      // uncomment below and update the code to test the property collation
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property connectorEnforcement (base name: "connectorEnforcement")', function() {
      // uncomment below and update the code to test the property connectorEnforcement
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property crashSafeReplicationEnabled (base name: "crashSafeReplicationEnabled")', function() {
      // uncomment below and update the code to test the property crashSafeReplicationEnabled
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property dataCacheConfig (base name: "dataCacheConfig")', function() {
      // uncomment below and update the code to test the property dataCacheConfig
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property dataDiskSizeGb (base name: "dataDiskSizeGb")', function() {
      // uncomment below and update the code to test the property dataDiskSizeGb
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property dataDiskType (base name: "dataDiskType")', function() {
      // uncomment below and update the code to test the property dataDiskType
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property databaseFlags (base name: "databaseFlags")', function() {
      // uncomment below and update the code to test the property databaseFlags
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property databaseReplicationEnabled (base name: "databaseReplicationEnabled")', function() {
      // uncomment below and update the code to test the property databaseReplicationEnabled
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property deletionProtectionEnabled (base name: "deletionProtectionEnabled")', function() {
      // uncomment below and update the code to test the property deletionProtectionEnabled
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property denyMaintenancePeriods (base name: "denyMaintenancePeriods")', function() {
      // uncomment below and update the code to test the property denyMaintenancePeriods
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property edition (base name: "edition")', function() {
      // uncomment below and update the code to test the property edition
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property insightsConfig (base name: "insightsConfig")', function() {
      // uncomment below and update the code to test the property insightsConfig
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property ipConfiguration (base name: "ipConfiguration")', function() {
      // uncomment below and update the code to test the property ipConfiguration
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property kind (base name: "kind")', function() {
      // uncomment below and update the code to test the property kind
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property locationPreference (base name: "locationPreference")', function() {
      // uncomment below and update the code to test the property locationPreference
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceWindow (base name: "maintenanceWindow")', function() {
      // uncomment below and update the code to test the property maintenanceWindow
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property passwordValidationPolicy (base name: "passwordValidationPolicy")', function() {
      // uncomment below and update the code to test the property passwordValidationPolicy
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property pricingPlan (base name: "pricingPlan")', function() {
      // uncomment below and update the code to test the property pricingPlan
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property replicationType (base name: "replicationType")', function() {
      // uncomment below and update the code to test the property replicationType
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property settingsVersion (base name: "settingsVersion")', function() {
      // uncomment below and update the code to test the property settingsVersion
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property sqlServerAuditConfig (base name: "sqlServerAuditConfig")', function() {
      // uncomment below and update the code to test the property sqlServerAuditConfig
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property storageAutoResize (base name: "storageAutoResize")', function() {
      // uncomment below and update the code to test the property storageAutoResize
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property storageAutoResizeLimit (base name: "storageAutoResizeLimit")', function() {
      // uncomment below and update the code to test the property storageAutoResizeLimit
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property tier (base name: "tier")', function() {
      // uncomment below and update the code to test the property tier
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property timeZone (base name: "timeZone")', function() {
      // uncomment below and update the code to test the property timeZone
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

    it('should have the property userLabels (base name: "userLabels")', function() {
      // uncomment below and update the code to test the property userLabels
      //var instance = new CloudSqlAdminApi.Settings();
      //expect(instance).to.be();
    });

  });

}));
