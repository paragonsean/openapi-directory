/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Operation from '../model/Operation';
import SslCert from '../model/SslCert';
import SslCertsCreateEphemeralRequest from '../model/SslCertsCreateEphemeralRequest';
import SslCertsInsertRequest from '../model/SslCertsInsertRequest';
import SslCertsInsertResponse from '../model/SslCertsInsertResponse';
import SslCertsListResponse from '../model/SslCertsListResponse';

/**
* SslCerts service.
* @module api/SslCertsApi
* @version v1beta4
*/
export default class SslCertsApi {

    /**
    * Constructs a new SslCertsApi. 
    * @alias module:api/SslCertsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the sqlSslCertsCreateEphemeral operation.
     * @callback module:api/SslCertsApi~sqlSslCertsCreateEphemeralCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SslCert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generates a short-lived X509 certificate containing the provided public key and signed by a private key specific to the target instance. Users may use the certificate to authenticate as themselves when connecting to the database.
     * @param {String} project Project ID of the Cloud SQL project.
     * @param {String} instance Cloud SQL instance ID. This does not include the project ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/SslCertsCreateEphemeralRequest} [sslCertsCreateEphemeralRequest] 
     * @param {module:api/SslCertsApi~sqlSslCertsCreateEphemeralCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SslCert}
     */
    sqlSslCertsCreateEphemeral(project, instance, opts, callback) {
      opts = opts || {};
      let postBody = opts['sslCertsCreateEphemeralRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling sqlSslCertsCreateEphemeral");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling sqlSslCertsCreateEphemeral");
      }

      let pathParams = {
        'project': project,
        'instance': instance
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SslCert;
      return this.apiClient.callApi(
        '/sql/v1beta4/projects/{project}/instances/{instance}/createEphemeral', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlSslCertsDelete operation.
     * @callback module:api/SslCertsApi~sqlSslCertsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the SSL certificate. For First Generation instances, the certificate remains valid until the instance is restarted.
     * @param {String} project Project ID of the project that contains the instance.
     * @param {String} instance Cloud SQL instance ID. This does not include the project ID.
     * @param {String} sha1Fingerprint Sha1 FingerPrint.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/SslCertsApi~sqlSslCertsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    sqlSslCertsDelete(project, instance, sha1Fingerprint, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling sqlSslCertsDelete");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling sqlSslCertsDelete");
      }
      // verify the required parameter 'sha1Fingerprint' is set
      if (sha1Fingerprint === undefined || sha1Fingerprint === null) {
        throw new Error("Missing the required parameter 'sha1Fingerprint' when calling sqlSslCertsDelete");
      }

      let pathParams = {
        'project': project,
        'instance': instance,
        'sha1Fingerprint': sha1Fingerprint
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Operation;
      return this.apiClient.callApi(
        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlSslCertsGet operation.
     * @callback module:api/SslCertsApi~sqlSslCertsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SslCert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a particular SSL certificate. Does not include the private key (required for usage). The private key must be saved from the response to initial creation.
     * @param {String} project Project ID of the project that contains the instance.
     * @param {String} instance Cloud SQL instance ID. This does not include the project ID.
     * @param {String} sha1Fingerprint Sha1 FingerPrint.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/SslCertsApi~sqlSslCertsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SslCert}
     */
    sqlSslCertsGet(project, instance, sha1Fingerprint, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling sqlSslCertsGet");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling sqlSslCertsGet");
      }
      // verify the required parameter 'sha1Fingerprint' is set
      if (sha1Fingerprint === undefined || sha1Fingerprint === null) {
        throw new Error("Missing the required parameter 'sha1Fingerprint' when calling sqlSslCertsGet");
      }

      let pathParams = {
        'project': project,
        'instance': instance,
        'sha1Fingerprint': sha1Fingerprint
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SslCert;
      return this.apiClient.callApi(
        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts/{sha1Fingerprint}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlSslCertsInsert operation.
     * @callback module:api/SslCertsApi~sqlSslCertsInsertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SslCertsInsertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an SSL certificate and returns it along with the private key and server certificate authority. The new certificate will not be usable until the instance is restarted.
     * @param {String} project Project ID of the project that contains the instance.
     * @param {String} instance Cloud SQL instance ID. This does not include the project ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/SslCertsInsertRequest} [sslCertsInsertRequest] 
     * @param {module:api/SslCertsApi~sqlSslCertsInsertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SslCertsInsertResponse}
     */
    sqlSslCertsInsert(project, instance, opts, callback) {
      opts = opts || {};
      let postBody = opts['sslCertsInsertRequest'];
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling sqlSslCertsInsert");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling sqlSslCertsInsert");
      }

      let pathParams = {
        'project': project,
        'instance': instance
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SslCertsInsertResponse;
      return this.apiClient.callApi(
        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sqlSslCertsList operation.
     * @callback module:api/SslCertsApi~sqlSslCertsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SslCertsListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all of the current SSL certificates for the instance.
     * @param {String} project Project ID of the project that contains the instance.
     * @param {String} instance Cloud SQL instance ID. This does not include the project ID.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/SslCertsApi~sqlSslCertsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SslCertsListResponse}
     */
    sqlSslCertsList(project, instance, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'project' is set
      if (project === undefined || project === null) {
        throw new Error("Missing the required parameter 'project' when calling sqlSslCertsList");
      }
      // verify the required parameter 'instance' is set
      if (instance === undefined || instance === null) {
        throw new Error("Missing the required parameter 'instance' when calling sqlSslCertsList");
      }

      let pathParams = {
        'project': project,
        'instance': instance
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SslCertsListResponse;
      return this.apiClient.callApi(
        '/sql/v1beta4/projects/{project}/instances/{instance}/sslCerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
