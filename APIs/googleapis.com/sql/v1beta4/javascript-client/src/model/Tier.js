/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Tier model module.
 * @module model/Tier
 * @version v1beta4
 */
class Tier {
    /**
     * Constructs a new <code>Tier</code>.
     * A Google Cloud SQL service tier resource.
     * @alias module:model/Tier
     */
    constructor() { 
        
        Tier.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Tier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Tier} obj Optional instance to populate.
     * @return {module:model/Tier} The populated <code>Tier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Tier();

            if (data.hasOwnProperty('DiskQuota')) {
                obj['DiskQuota'] = ApiClient.convertToType(data['DiskQuota'], 'String');
            }
            if (data.hasOwnProperty('RAM')) {
                obj['RAM'] = ApiClient.convertToType(data['RAM'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], ['String']);
            }
            if (data.hasOwnProperty('tier')) {
                obj['tier'] = ApiClient.convertToType(data['tier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Tier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Tier</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['DiskQuota'] && !(typeof data['DiskQuota'] === 'string' || data['DiskQuota'] instanceof String)) {
            throw new Error("Expected the field `DiskQuota` to be a primitive type in the JSON string but got " + data['DiskQuota']);
        }
        // ensure the json data is a string
        if (data['RAM'] && !(typeof data['RAM'] === 'string' || data['RAM'] instanceof String)) {
            throw new Error("Expected the field `RAM` to be a primitive type in the JSON string but got " + data['RAM']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['region'])) {
            throw new Error("Expected the field `region` to be an array in the JSON data but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['tier'] && !(typeof data['tier'] === 'string' || data['tier'] instanceof String)) {
            throw new Error("Expected the field `tier` to be a primitive type in the JSON string but got " + data['tier']);
        }

        return true;
    }


}



/**
 * The maximum disk size of this tier in bytes.
 * @member {String} DiskQuota
 */
Tier.prototype['DiskQuota'] = undefined;

/**
 * The maximum RAM usage of this tier in bytes.
 * @member {String} RAM
 */
Tier.prototype['RAM'] = undefined;

/**
 * This is always `sql#tier`.
 * @member {String} kind
 */
Tier.prototype['kind'] = undefined;

/**
 * The applicable regions for this tier.
 * @member {Array.<String>} region
 */
Tier.prototype['region'] = undefined;

/**
 * An identifier for the machine type, for example, `db-custom-1-3840`. For related information, see [Pricing](/sql/pricing).
 * @member {String} tier
 */
Tier.prototype['tier'] = undefined;






export default Tier;

