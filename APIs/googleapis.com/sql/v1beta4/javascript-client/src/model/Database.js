/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SqlServerDatabaseDetails from './SqlServerDatabaseDetails';

/**
 * The Database model module.
 * @module model/Database
 * @version v1beta4
 */
class Database {
    /**
     * Constructs a new <code>Database</code>.
     * Represents a SQL database on the Cloud SQL instance.
     * @alias module:model/Database
     */
    constructor() { 
        
        Database.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Database</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Database} obj Optional instance to populate.
     * @return {module:model/Database} The populated <code>Database</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Database();

            if (data.hasOwnProperty('charset')) {
                obj['charset'] = ApiClient.convertToType(data['charset'], 'String');
            }
            if (data.hasOwnProperty('collation')) {
                obj['collation'] = ApiClient.convertToType(data['collation'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('sqlserverDatabaseDetails')) {
                obj['sqlserverDatabaseDetails'] = SqlServerDatabaseDetails.constructFromObject(data['sqlserverDatabaseDetails']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Database</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Database</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['charset'] && !(typeof data['charset'] === 'string' || data['charset'] instanceof String)) {
            throw new Error("Expected the field `charset` to be a primitive type in the JSON string but got " + data['charset']);
        }
        // ensure the json data is a string
        if (data['collation'] && !(typeof data['collation'] === 'string' || data['collation'] instanceof String)) {
            throw new Error("Expected the field `collation` to be a primitive type in the JSON string but got " + data['collation']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // validate the optional field `sqlserverDatabaseDetails`
        if (data['sqlserverDatabaseDetails']) { // data not null
          SqlServerDatabaseDetails.validateJSON(data['sqlserverDatabaseDetails']);
        }

        return true;
    }


}



/**
 * The Cloud SQL charset value.
 * @member {String} charset
 */
Database.prototype['charset'] = undefined;

/**
 * The Cloud SQL collation value.
 * @member {String} collation
 */
Database.prototype['collation'] = undefined;

/**
 * This field is deprecated and will be removed from a future version of the API.
 * @member {String} etag
 */
Database.prototype['etag'] = undefined;

/**
 * The name of the Cloud SQL instance. This does not include the project ID.
 * @member {String} instance
 */
Database.prototype['instance'] = undefined;

/**
 * This is always `sql#database`.
 * @member {String} kind
 */
Database.prototype['kind'] = undefined;

/**
 * The name of the database in the Cloud SQL instance. This does not include the project ID or instance name.
 * @member {String} name
 */
Database.prototype['name'] = undefined;

/**
 * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable.
 * @member {String} project
 */
Database.prototype['project'] = undefined;

/**
 * The URI of this resource.
 * @member {String} selfLink
 */
Database.prototype['selfLink'] = undefined;

/**
 * @member {module:model/SqlServerDatabaseDetails} sqlserverDatabaseDetails
 */
Database.prototype['sqlserverDatabaseDetails'] = undefined;






export default Database;

