/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SqlExternalSyncSettingError model module.
 * @module model/SqlExternalSyncSettingError
 * @version v1beta4
 */
class SqlExternalSyncSettingError {
    /**
     * Constructs a new <code>SqlExternalSyncSettingError</code>.
     * External primary instance migration setting error/warning.
     * @alias module:model/SqlExternalSyncSettingError
     */
    constructor() { 
        
        SqlExternalSyncSettingError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlExternalSyncSettingError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlExternalSyncSettingError} obj Optional instance to populate.
     * @return {module:model/SqlExternalSyncSettingError} The populated <code>SqlExternalSyncSettingError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlExternalSyncSettingError();

            if (data.hasOwnProperty('detail')) {
                obj['detail'] = ApiClient.convertToType(data['detail'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlExternalSyncSettingError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlExternalSyncSettingError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['detail'] && !(typeof data['detail'] === 'string' || data['detail'] instanceof String)) {
            throw new Error("Expected the field `detail` to be a primitive type in the JSON string but got " + data['detail']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Additional information about the error encountered.
 * @member {String} detail
 */
SqlExternalSyncSettingError.prototype['detail'] = undefined;

/**
 * Can be `sql#externalSyncSettingError` or `sql#externalSyncSettingWarning`.
 * @member {String} kind
 */
SqlExternalSyncSettingError.prototype['kind'] = undefined;

/**
 * Identifies the specific error that occurred.
 * @member {module:model/SqlExternalSyncSettingError.TypeEnum} type
 */
SqlExternalSyncSettingError.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
SqlExternalSyncSettingError['TypeEnum'] = {

    /**
     * value: "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED": "SQL_EXTERNAL_SYNC_SETTING_ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "CONNECTION_FAILURE"
     * @const
     */
    "CONNECTION_FAILURE": "CONNECTION_FAILURE",

    /**
     * value: "BINLOG_NOT_ENABLED"
     * @const
     */
    "BINLOG_NOT_ENABLED": "BINLOG_NOT_ENABLED",

    /**
     * value: "INCOMPATIBLE_DATABASE_VERSION"
     * @const
     */
    "INCOMPATIBLE_DATABASE_VERSION": "INCOMPATIBLE_DATABASE_VERSION",

    /**
     * value: "REPLICA_ALREADY_SETUP"
     * @const
     */
    "REPLICA_ALREADY_SETUP": "REPLICA_ALREADY_SETUP",

    /**
     * value: "INSUFFICIENT_PRIVILEGE"
     * @const
     */
    "INSUFFICIENT_PRIVILEGE": "INSUFFICIENT_PRIVILEGE",

    /**
     * value: "UNSUPPORTED_MIGRATION_TYPE"
     * @const
     */
    "UNSUPPORTED_MIGRATION_TYPE": "UNSUPPORTED_MIGRATION_TYPE",

    /**
     * value: "NO_PGLOGICAL_INSTALLED"
     * @const
     */
    "NO_PGLOGICAL_INSTALLED": "NO_PGLOGICAL_INSTALLED",

    /**
     * value: "PGLOGICAL_NODE_ALREADY_EXISTS"
     * @const
     */
    "PGLOGICAL_NODE_ALREADY_EXISTS": "PGLOGICAL_NODE_ALREADY_EXISTS",

    /**
     * value: "INVALID_WAL_LEVEL"
     * @const
     */
    "INVALID_WAL_LEVEL": "INVALID_WAL_LEVEL",

    /**
     * value: "INVALID_SHARED_PRELOAD_LIBRARY"
     * @const
     */
    "INVALID_SHARED_PRELOAD_LIBRARY": "INVALID_SHARED_PRELOAD_LIBRARY",

    /**
     * value: "INSUFFICIENT_MAX_REPLICATION_SLOTS"
     * @const
     */
    "INSUFFICIENT_MAX_REPLICATION_SLOTS": "INSUFFICIENT_MAX_REPLICATION_SLOTS",

    /**
     * value: "INSUFFICIENT_MAX_WAL_SENDERS"
     * @const
     */
    "INSUFFICIENT_MAX_WAL_SENDERS": "INSUFFICIENT_MAX_WAL_SENDERS",

    /**
     * value: "INSUFFICIENT_MAX_WORKER_PROCESSES"
     * @const
     */
    "INSUFFICIENT_MAX_WORKER_PROCESSES": "INSUFFICIENT_MAX_WORKER_PROCESSES",

    /**
     * value: "UNSUPPORTED_EXTENSIONS"
     * @const
     */
    "UNSUPPORTED_EXTENSIONS": "UNSUPPORTED_EXTENSIONS",

    /**
     * value: "INVALID_RDS_LOGICAL_REPLICATION"
     * @const
     */
    "INVALID_RDS_LOGICAL_REPLICATION": "INVALID_RDS_LOGICAL_REPLICATION",

    /**
     * value: "INVALID_LOGGING_SETUP"
     * @const
     */
    "INVALID_LOGGING_SETUP": "INVALID_LOGGING_SETUP",

    /**
     * value: "INVALID_DB_PARAM"
     * @const
     */
    "INVALID_DB_PARAM": "INVALID_DB_PARAM",

    /**
     * value: "UNSUPPORTED_GTID_MODE"
     * @const
     */
    "UNSUPPORTED_GTID_MODE": "UNSUPPORTED_GTID_MODE",

    /**
     * value: "SQLSERVER_AGENT_NOT_RUNNING"
     * @const
     */
    "SQLSERVER_AGENT_NOT_RUNNING": "SQLSERVER_AGENT_NOT_RUNNING",

    /**
     * value: "UNSUPPORTED_TABLE_DEFINITION"
     * @const
     */
    "UNSUPPORTED_TABLE_DEFINITION": "UNSUPPORTED_TABLE_DEFINITION",

    /**
     * value: "UNSUPPORTED_DEFINER"
     * @const
     */
    "UNSUPPORTED_DEFINER": "UNSUPPORTED_DEFINER",

    /**
     * value: "SQLSERVER_SERVERNAME_MISMATCH"
     * @const
     */
    "SQLSERVER_SERVERNAME_MISMATCH": "SQLSERVER_SERVERNAME_MISMATCH",

    /**
     * value: "PRIMARY_ALREADY_SETUP"
     * @const
     */
    "PRIMARY_ALREADY_SETUP": "PRIMARY_ALREADY_SETUP",

    /**
     * value: "UNSUPPORTED_BINLOG_FORMAT"
     * @const
     */
    "UNSUPPORTED_BINLOG_FORMAT": "UNSUPPORTED_BINLOG_FORMAT",

    /**
     * value: "BINLOG_RETENTION_SETTING"
     * @const
     */
    "BINLOG_RETENTION_SETTING": "BINLOG_RETENTION_SETTING",

    /**
     * value: "UNSUPPORTED_STORAGE_ENGINE"
     * @const
     */
    "UNSUPPORTED_STORAGE_ENGINE": "UNSUPPORTED_STORAGE_ENGINE",

    /**
     * value: "LIMITED_SUPPORT_TABLES"
     * @const
     */
    "LIMITED_SUPPORT_TABLES": "LIMITED_SUPPORT_TABLES",

    /**
     * value: "EXISTING_DATA_IN_REPLICA"
     * @const
     */
    "EXISTING_DATA_IN_REPLICA": "EXISTING_DATA_IN_REPLICA",

    /**
     * value: "MISSING_OPTIONAL_PRIVILEGES"
     * @const
     */
    "MISSING_OPTIONAL_PRIVILEGES": "MISSING_OPTIONAL_PRIVILEGES",

    /**
     * value: "RISKY_BACKUP_ADMIN_PRIVILEGE"
     * @const
     */
    "RISKY_BACKUP_ADMIN_PRIVILEGE": "RISKY_BACKUP_ADMIN_PRIVILEGE",

    /**
     * value: "INSUFFICIENT_GCS_PERMISSIONS"
     * @const
     */
    "INSUFFICIENT_GCS_PERMISSIONS": "INSUFFICIENT_GCS_PERMISSIONS",

    /**
     * value: "INVALID_FILE_INFO"
     * @const
     */
    "INVALID_FILE_INFO": "INVALID_FILE_INFO",

    /**
     * value: "UNSUPPORTED_DATABASE_SETTINGS"
     * @const
     */
    "UNSUPPORTED_DATABASE_SETTINGS": "UNSUPPORTED_DATABASE_SETTINGS",

    /**
     * value: "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE"
     * @const
     */
    "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE": "MYSQL_PARALLEL_IMPORT_INSUFFICIENT_PRIVILEGE",

    /**
     * value: "LOCAL_INFILE_OFF"
     * @const
     */
    "LOCAL_INFILE_OFF": "LOCAL_INFILE_OFF",

    /**
     * value: "TURN_ON_PITR_AFTER_PROMOTE"
     * @const
     */
    "TURN_ON_PITR_AFTER_PROMOTE": "TURN_ON_PITR_AFTER_PROMOTE",

    /**
     * value: "INCOMPATIBLE_DATABASE_MINOR_VERSION"
     * @const
     */
    "INCOMPATIBLE_DATABASE_MINOR_VERSION": "INCOMPATIBLE_DATABASE_MINOR_VERSION",

    /**
     * value: "SOURCE_MAX_SUBSCRIPTIONS"
     * @const
     */
    "SOURCE_MAX_SUBSCRIPTIONS": "SOURCE_MAX_SUBSCRIPTIONS",

    /**
     * value: "UNABLE_TO_VERIFY_DEFINERS"
     * @const
     */
    "UNABLE_TO_VERIFY_DEFINERS": "UNABLE_TO_VERIFY_DEFINERS",

    /**
     * value: "SUBSCRIPTION_CALCULATION_STATUS"
     * @const
     */
    "SUBSCRIPTION_CALCULATION_STATUS": "SUBSCRIPTION_CALCULATION_STATUS",

    /**
     * value: "PG_SUBSCRIPTION_COUNT"
     * @const
     */
    "PG_SUBSCRIPTION_COUNT": "PG_SUBSCRIPTION_COUNT",

    /**
     * value: "PG_SYNC_PARALLEL_LEVEL"
     * @const
     */
    "PG_SYNC_PARALLEL_LEVEL": "PG_SYNC_PARALLEL_LEVEL",

    /**
     * value: "INSUFFICIENT_DISK_SIZE"
     * @const
     */
    "INSUFFICIENT_DISK_SIZE": "INSUFFICIENT_DISK_SIZE",

    /**
     * value: "INSUFFICIENT_MACHINE_TIER"
     * @const
     */
    "INSUFFICIENT_MACHINE_TIER": "INSUFFICIENT_MACHINE_TIER"
};



export default SqlExternalSyncSettingError;

