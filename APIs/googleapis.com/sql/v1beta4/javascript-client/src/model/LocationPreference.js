/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LocationPreference model module.
 * @module model/LocationPreference
 * @version v1beta4
 */
class LocationPreference {
    /**
     * Constructs a new <code>LocationPreference</code>.
     * Preferred location. This specifies where a Cloud SQL instance is located. Note that if the preferred location is not available, the instance will be located as close as possible within the region. Only one location may be specified.
     * @alias module:model/LocationPreference
     */
    constructor() { 
        
        LocationPreference.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LocationPreference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LocationPreference} obj Optional instance to populate.
     * @return {module:model/LocationPreference} The populated <code>LocationPreference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LocationPreference();

            if (data.hasOwnProperty('followGaeApplication')) {
                obj['followGaeApplication'] = ApiClient.convertToType(data['followGaeApplication'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('secondaryZone')) {
                obj['secondaryZone'] = ApiClient.convertToType(data['secondaryZone'], 'String');
            }
            if (data.hasOwnProperty('zone')) {
                obj['zone'] = ApiClient.convertToType(data['zone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LocationPreference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LocationPreference</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['followGaeApplication'] && !(typeof data['followGaeApplication'] === 'string' || data['followGaeApplication'] instanceof String)) {
            throw new Error("Expected the field `followGaeApplication` to be a primitive type in the JSON string but got " + data['followGaeApplication']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['secondaryZone'] && !(typeof data['secondaryZone'] === 'string' || data['secondaryZone'] instanceof String)) {
            throw new Error("Expected the field `secondaryZone` to be a primitive type in the JSON string but got " + data['secondaryZone']);
        }
        // ensure the json data is a string
        if (data['zone'] && !(typeof data['zone'] === 'string' || data['zone'] instanceof String)) {
            throw new Error("Expected the field `zone` to be a primitive type in the JSON string but got " + data['zone']);
        }

        return true;
    }


}



/**
 * The App Engine application to follow, it must be in the same region as the Cloud SQL instance. WARNING: Changing this might restart the instance.
 * @member {String} followGaeApplication
 */
LocationPreference.prototype['followGaeApplication'] = undefined;

/**
 * This is always `sql#locationPreference`.
 * @member {String} kind
 */
LocationPreference.prototype['kind'] = undefined;

/**
 * The preferred Compute Engine zone for the secondary/failover (for example: us-central1-a, us-central1-b, etc.). To disable this field, set it to 'no_secondary_zone'.
 * @member {String} secondaryZone
 */
LocationPreference.prototype['secondaryZone'] = undefined;

/**
 * The preferred Compute Engine zone (for example: us-central1-a, us-central1-b, etc.). WARNING: Changing this might restart the instance.
 * @member {String} zone
 */
LocationPreference.prototype['zone'] = undefined;






export default LocationPreference;

