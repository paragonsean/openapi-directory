/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportContextBakImportOptions from './ImportContextBakImportOptions';
import ImportContextCsvImportOptions from './ImportContextCsvImportOptions';

/**
 * The ImportContext model module.
 * @module model/ImportContext
 * @version v1beta4
 */
class ImportContext {
    /**
     * Constructs a new <code>ImportContext</code>.
     * Database instance import context.
     * @alias module:model/ImportContext
     */
    constructor() { 
        
        ImportContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportContext} obj Optional instance to populate.
     * @return {module:model/ImportContext} The populated <code>ImportContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportContext();

            if (data.hasOwnProperty('bakImportOptions')) {
                obj['bakImportOptions'] = ImportContextBakImportOptions.constructFromObject(data['bakImportOptions']);
            }
            if (data.hasOwnProperty('csvImportOptions')) {
                obj['csvImportOptions'] = ImportContextCsvImportOptions.constructFromObject(data['csvImportOptions']);
            }
            if (data.hasOwnProperty('database')) {
                obj['database'] = ApiClient.convertToType(data['database'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('importUser')) {
                obj['importUser'] = ApiClient.convertToType(data['importUser'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bakImportOptions`
        if (data['bakImportOptions']) { // data not null
          ImportContextBakImportOptions.validateJSON(data['bakImportOptions']);
        }
        // validate the optional field `csvImportOptions`
        if (data['csvImportOptions']) { // data not null
          ImportContextCsvImportOptions.validateJSON(data['csvImportOptions']);
        }
        // ensure the json data is a string
        if (data['database'] && !(typeof data['database'] === 'string' || data['database'] instanceof String)) {
            throw new Error("Expected the field `database` to be a primitive type in the JSON string but got " + data['database']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        // ensure the json data is a string
        if (data['importUser'] && !(typeof data['importUser'] === 'string' || data['importUser'] instanceof String)) {
            throw new Error("Expected the field `importUser` to be a primitive type in the JSON string but got " + data['importUser']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {module:model/ImportContextBakImportOptions} bakImportOptions
 */
ImportContext.prototype['bakImportOptions'] = undefined;

/**
 * @member {module:model/ImportContextCsvImportOptions} csvImportOptions
 */
ImportContext.prototype['csvImportOptions'] = undefined;

/**
 * The target database for the import. If `fileType` is `SQL`, this field is required only if the import file does not specify a database, and is overridden by any database specification in the import file. If `fileType` is `CSV`, one database must be specified.
 * @member {String} database
 */
ImportContext.prototype['database'] = undefined;

/**
 * The file type for the specified uri. * `SQL`: The file contains SQL statements. * `CSV`: The file contains CSV data. * `BAK`: The file contains backup data for a SQL Server instance.
 * @member {module:model/ImportContext.FileTypeEnum} fileType
 */
ImportContext.prototype['fileType'] = undefined;

/**
 * The PostgreSQL user for this import operation. PostgreSQL instances only.
 * @member {String} importUser
 */
ImportContext.prototype['importUser'] = undefined;

/**
 * This is always `sql#importContext`.
 * @member {String} kind
 */
ImportContext.prototype['kind'] = undefined;

/**
 * Path to the import file in Cloud Storage, in the form `gs://bucketName/fileName`. Compressed gzip files (.gz) are supported when `fileType` is `SQL`. The instance must have write permissions to the bucket and read access to the file.
 * @member {String} uri
 */
ImportContext.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
ImportContext['FileTypeEnum'] = {

    /**
     * value: "SQL_FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_FILE_TYPE_UNSPECIFIED": "SQL_FILE_TYPE_UNSPECIFIED",

    /**
     * value: "SQL"
     * @const
     */
    "SQL": "SQL",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "BAK"
     * @const
     */
    "BAK": "BAK"
};



export default ImportContext;

