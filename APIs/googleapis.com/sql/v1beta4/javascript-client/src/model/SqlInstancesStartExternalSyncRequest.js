/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MySqlSyncConfig from './MySqlSyncConfig';

/**
 * The SqlInstancesStartExternalSyncRequest model module.
 * @module model/SqlInstancesStartExternalSyncRequest
 * @version v1beta4
 */
class SqlInstancesStartExternalSyncRequest {
    /**
     * Constructs a new <code>SqlInstancesStartExternalSyncRequest</code>.
     * @alias module:model/SqlInstancesStartExternalSyncRequest
     */
    constructor() { 
        
        SqlInstancesStartExternalSyncRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SqlInstancesStartExternalSyncRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlInstancesStartExternalSyncRequest} obj Optional instance to populate.
     * @return {module:model/SqlInstancesStartExternalSyncRequest} The populated <code>SqlInstancesStartExternalSyncRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlInstancesStartExternalSyncRequest();

            if (data.hasOwnProperty('mysqlSyncConfig')) {
                obj['mysqlSyncConfig'] = MySqlSyncConfig.constructFromObject(data['mysqlSyncConfig']);
            }
            if (data.hasOwnProperty('skipVerification')) {
                obj['skipVerification'] = ApiClient.convertToType(data['skipVerification'], 'Boolean');
            }
            if (data.hasOwnProperty('syncMode')) {
                obj['syncMode'] = ApiClient.convertToType(data['syncMode'], 'String');
            }
            if (data.hasOwnProperty('syncParallelLevel')) {
                obj['syncParallelLevel'] = ApiClient.convertToType(data['syncParallelLevel'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlInstancesStartExternalSyncRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlInstancesStartExternalSyncRequest</code>.
     */
    static validateJSON(data) {
        // validate the optional field `mysqlSyncConfig`
        if (data['mysqlSyncConfig']) { // data not null
          MySqlSyncConfig.validateJSON(data['mysqlSyncConfig']);
        }
        // ensure the json data is a string
        if (data['syncMode'] && !(typeof data['syncMode'] === 'string' || data['syncMode'] instanceof String)) {
            throw new Error("Expected the field `syncMode` to be a primitive type in the JSON string but got " + data['syncMode']);
        }
        // ensure the json data is a string
        if (data['syncParallelLevel'] && !(typeof data['syncParallelLevel'] === 'string' || data['syncParallelLevel'] instanceof String)) {
            throw new Error("Expected the field `syncParallelLevel` to be a primitive type in the JSON string but got " + data['syncParallelLevel']);
        }

        return true;
    }


}



/**
 * @member {module:model/MySqlSyncConfig} mysqlSyncConfig
 */
SqlInstancesStartExternalSyncRequest.prototype['mysqlSyncConfig'] = undefined;

/**
 * Whether to skip the verification step (VESS).
 * @member {Boolean} skipVerification
 */
SqlInstancesStartExternalSyncRequest.prototype['skipVerification'] = undefined;

/**
 * External sync mode.
 * @member {module:model/SqlInstancesStartExternalSyncRequest.SyncModeEnum} syncMode
 */
SqlInstancesStartExternalSyncRequest.prototype['syncMode'] = undefined;

/**
 * Optional. Parallel level for initial data sync. Currently only applicable for MySQL.
 * @member {module:model/SqlInstancesStartExternalSyncRequest.SyncParallelLevelEnum} syncParallelLevel
 */
SqlInstancesStartExternalSyncRequest.prototype['syncParallelLevel'] = undefined;





/**
 * Allowed values for the <code>syncMode</code> property.
 * @enum {String}
 * @readonly
 */
SqlInstancesStartExternalSyncRequest['SyncModeEnum'] = {

    /**
     * value: "EXTERNAL_SYNC_MODE_UNSPECIFIED"
     * @const
     */
    "EXTERNAL_SYNC_MODE_UNSPECIFIED": "EXTERNAL_SYNC_MODE_UNSPECIFIED",

    /**
     * value: "ONLINE"
     * @const
     */
    "ONLINE": "ONLINE",

    /**
     * value: "OFFLINE"
     * @const
     */
    "OFFLINE": "OFFLINE"
};


/**
 * Allowed values for the <code>syncParallelLevel</code> property.
 * @enum {String}
 * @readonly
 */
SqlInstancesStartExternalSyncRequest['SyncParallelLevelEnum'] = {

    /**
     * value: "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED"
     * @const
     */
    "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED": "EXTERNAL_SYNC_PARALLEL_LEVEL_UNSPECIFIED",

    /**
     * value: "MIN"
     * @const
     */
    "MIN": "MIN",

    /**
     * value: "OPTIMAL"
     * @const
     */
    "OPTIMAL": "OPTIMAL",

    /**
     * value: "MAX"
     * @const
     */
    "MAX": "MAX"
};



export default SqlInstancesStartExternalSyncRequest;

