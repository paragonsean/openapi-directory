/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Reschedule model module.
 * @module model/Reschedule
 * @version v1beta4
 */
class Reschedule {
    /**
     * Constructs a new <code>Reschedule</code>.
     * @alias module:model/Reschedule
     */
    constructor() { 
        
        Reschedule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Reschedule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Reschedule} obj Optional instance to populate.
     * @return {module:model/Reschedule} The populated <code>Reschedule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Reschedule();

            if (data.hasOwnProperty('rescheduleType')) {
                obj['rescheduleType'] = ApiClient.convertToType(data['rescheduleType'], 'String');
            }
            if (data.hasOwnProperty('scheduleTime')) {
                obj['scheduleTime'] = ApiClient.convertToType(data['scheduleTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Reschedule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Reschedule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['rescheduleType'] && !(typeof data['rescheduleType'] === 'string' || data['rescheduleType'] instanceof String)) {
            throw new Error("Expected the field `rescheduleType` to be a primitive type in the JSON string but got " + data['rescheduleType']);
        }
        // ensure the json data is a string
        if (data['scheduleTime'] && !(typeof data['scheduleTime'] === 'string' || data['scheduleTime'] instanceof String)) {
            throw new Error("Expected the field `scheduleTime` to be a primitive type in the JSON string but got " + data['scheduleTime']);
        }

        return true;
    }


}



/**
 * Required. The type of the reschedule.
 * @member {module:model/Reschedule.RescheduleTypeEnum} rescheduleType
 */
Reschedule.prototype['rescheduleType'] = undefined;

/**
 * Optional. Timestamp when the maintenance shall be rescheduled to if reschedule_type=SPECIFIC_TIME, in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} scheduleTime
 */
Reschedule.prototype['scheduleTime'] = undefined;





/**
 * Allowed values for the <code>rescheduleType</code> property.
 * @enum {String}
 * @readonly
 */
Reschedule['RescheduleTypeEnum'] = {

    /**
     * value: "RESCHEDULE_TYPE_UNSPECIFIED"
     * @const
     */
    "RESCHEDULE_TYPE_UNSPECIFIED": "RESCHEDULE_TYPE_UNSPECIFIED",

    /**
     * value: "IMMEDIATE"
     * @const
     */
    "IMMEDIATE": "IMMEDIATE",

    /**
     * value: "NEXT_AVAILABLE_WINDOW"
     * @const
     */
    "NEXT_AVAILABLE_WINDOW": "NEXT_AVAILABLE_WINDOW",

    /**
     * value: "SPECIFIC_TIME"
     * @const
     */
    "SPECIFIC_TIME": "SPECIFIC_TIME"
};



export default Reschedule;

