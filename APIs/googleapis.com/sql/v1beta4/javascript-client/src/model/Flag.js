/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Flag model module.
 * @module model/Flag
 * @version v1beta4
 */
class Flag {
    /**
     * Constructs a new <code>Flag</code>.
     * A flag resource.
     * @alias module:model/Flag
     */
    constructor() { 
        
        Flag.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Flag</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Flag} obj Optional instance to populate.
     * @return {module:model/Flag} The populated <code>Flag</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Flag();

            if (data.hasOwnProperty('allowedIntValues')) {
                obj['allowedIntValues'] = ApiClient.convertToType(data['allowedIntValues'], ['String']);
            }
            if (data.hasOwnProperty('allowedStringValues')) {
                obj['allowedStringValues'] = ApiClient.convertToType(data['allowedStringValues'], ['String']);
            }
            if (data.hasOwnProperty('appliesTo')) {
                obj['appliesTo'] = ApiClient.convertToType(data['appliesTo'], ['String']);
            }
            if (data.hasOwnProperty('inBeta')) {
                obj['inBeta'] = ApiClient.convertToType(data['inBeta'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('maxValue')) {
                obj['maxValue'] = ApiClient.convertToType(data['maxValue'], 'String');
            }
            if (data.hasOwnProperty('minValue')) {
                obj['minValue'] = ApiClient.convertToType(data['minValue'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('requiresRestart')) {
                obj['requiresRestart'] = ApiClient.convertToType(data['requiresRestart'], 'Boolean');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Flag</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Flag</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedIntValues'])) {
            throw new Error("Expected the field `allowedIntValues` to be an array in the JSON data but got " + data['allowedIntValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedStringValues'])) {
            throw new Error("Expected the field `allowedStringValues` to be an array in the JSON data but got " + data['allowedStringValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['appliesTo'])) {
            throw new Error("Expected the field `appliesTo` to be an array in the JSON data but got " + data['appliesTo']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['maxValue'] && !(typeof data['maxValue'] === 'string' || data['maxValue'] instanceof String)) {
            throw new Error("Expected the field `maxValue` to be a primitive type in the JSON string but got " + data['maxValue']);
        }
        // ensure the json data is a string
        if (data['minValue'] && !(typeof data['minValue'] === 'string' || data['minValue'] instanceof String)) {
            throw new Error("Expected the field `minValue` to be a primitive type in the JSON string but got " + data['minValue']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Use this field if only certain integers are accepted. Can be combined with min_value and max_value to add additional values.
 * @member {Array.<String>} allowedIntValues
 */
Flag.prototype['allowedIntValues'] = undefined;

/**
 * For `STRING` flags, a list of strings that the value can be set to.
 * @member {Array.<String>} allowedStringValues
 */
Flag.prototype['allowedStringValues'] = undefined;

/**
 * The database version this flag applies to. Can be MySQL instances: `MYSQL_8_0`, `MYSQL_8_0_18`, `MYSQL_8_0_26`, `MYSQL_5_7`, or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12`. SQL Server instances: `SQLSERVER_2017_STANDARD`, `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`. See [the complete list](/sql/docs/mysql/admin-api/rest/v1/SqlDatabaseVersion).
 * @member {Array.<module:model/Flag.AppliesToEnum>} appliesTo
 */
Flag.prototype['appliesTo'] = undefined;

/**
 * Whether or not the flag is considered in beta.
 * @member {Boolean} inBeta
 */
Flag.prototype['inBeta'] = undefined;

/**
 * This is always `sql#flag`.
 * @member {String} kind
 */
Flag.prototype['kind'] = undefined;

/**
 * For `INTEGER` flags, the maximum allowed value.
 * @member {String} maxValue
 */
Flag.prototype['maxValue'] = undefined;

/**
 * For `INTEGER` flags, the minimum allowed value.
 * @member {String} minValue
 */
Flag.prototype['minValue'] = undefined;

/**
 * This is the name of the flag. Flag names always use underscores, not hyphens, for example: `max_allowed_packet`
 * @member {String} name
 */
Flag.prototype['name'] = undefined;

/**
 * Indicates whether changing this flag will trigger a database restart. Only applicable to Second Generation instances.
 * @member {Boolean} requiresRestart
 */
Flag.prototype['requiresRestart'] = undefined;

/**
 * The type of the flag. Flags are typed to being `BOOLEAN`, `STRING`, `INTEGER` or `NONE`. `NONE` is used for flags which do not take a value, such as `skip_grant_tables`.
 * @member {module:model/Flag.TypeEnum} type
 */
Flag.prototype['type'] = undefined;





/**
 * Allowed values for the <code>appliesTo</code> property.
 * @enum {String}
 * @readonly
 */
Flag['AppliesToEnum'] = {

    /**
     * value: "SQL_DATABASE_VERSION_UNSPECIFIED"
     * @const
     */
    "SQL_DATABASE_VERSION_UNSPECIFIED": "SQL_DATABASE_VERSION_UNSPECIFIED",

    /**
     * value: "MYSQL_5_1"
     * @const
     */
    "MYSQL_5_1": "MYSQL_5_1",

    /**
     * value: "MYSQL_5_5"
     * @const
     */
    "MYSQL_5_5": "MYSQL_5_5",

    /**
     * value: "MYSQL_5_6"
     * @const
     */
    "MYSQL_5_6": "MYSQL_5_6",

    /**
     * value: "MYSQL_5_7"
     * @const
     */
    "MYSQL_5_7": "MYSQL_5_7",

    /**
     * value: "SQLSERVER_2017_STANDARD"
     * @const
     */
    "SQLSERVER_2017_STANDARD": "SQLSERVER_2017_STANDARD",

    /**
     * value: "SQLSERVER_2017_ENTERPRISE"
     * @const
     */
    "SQLSERVER_2017_ENTERPRISE": "SQLSERVER_2017_ENTERPRISE",

    /**
     * value: "SQLSERVER_2017_EXPRESS"
     * @const
     */
    "SQLSERVER_2017_EXPRESS": "SQLSERVER_2017_EXPRESS",

    /**
     * value: "SQLSERVER_2017_WEB"
     * @const
     */
    "SQLSERVER_2017_WEB": "SQLSERVER_2017_WEB",

    /**
     * value: "POSTGRES_9_6"
     * @const
     */
    "POSTGRES_9_6": "POSTGRES_9_6",

    /**
     * value: "POSTGRES_10"
     * @const
     */
    "POSTGRES_10": "POSTGRES_10",

    /**
     * value: "POSTGRES_11"
     * @const
     */
    "POSTGRES_11": "POSTGRES_11",

    /**
     * value: "POSTGRES_12"
     * @const
     */
    "POSTGRES_12": "POSTGRES_12",

    /**
     * value: "POSTGRES_13"
     * @const
     */
    "POSTGRES_13": "POSTGRES_13",

    /**
     * value: "POSTGRES_14"
     * @const
     */
    "POSTGRES_14": "POSTGRES_14",

    /**
     * value: "POSTGRES_15"
     * @const
     */
    "POSTGRES_15": "POSTGRES_15",

    /**
     * value: "MYSQL_8_0"
     * @const
     */
    "MYSQL_8_0": "MYSQL_8_0",

    /**
     * value: "MYSQL_8_0_18"
     * @const
     */
    "MYSQL_8_0_18": "MYSQL_8_0_18",

    /**
     * value: "MYSQL_8_0_26"
     * @const
     */
    "MYSQL_8_0_26": "MYSQL_8_0_26",

    /**
     * value: "MYSQL_8_0_27"
     * @const
     */
    "MYSQL_8_0_27": "MYSQL_8_0_27",

    /**
     * value: "MYSQL_8_0_28"
     * @const
     */
    "MYSQL_8_0_28": "MYSQL_8_0_28",

    /**
     * value: "MYSQL_8_0_29"
     * @const
     */
    "MYSQL_8_0_29": "MYSQL_8_0_29",

    /**
     * value: "MYSQL_8_0_30"
     * @const
     */
    "MYSQL_8_0_30": "MYSQL_8_0_30",

    /**
     * value: "MYSQL_8_0_31"
     * @const
     */
    "MYSQL_8_0_31": "MYSQL_8_0_31",

    /**
     * value: "MYSQL_8_0_32"
     * @const
     */
    "MYSQL_8_0_32": "MYSQL_8_0_32",

    /**
     * value: "MYSQL_8_0_33"
     * @const
     */
    "MYSQL_8_0_33": "MYSQL_8_0_33",

    /**
     * value: "MYSQL_8_0_34"
     * @const
     */
    "MYSQL_8_0_34": "MYSQL_8_0_34",

    /**
     * value: "MYSQL_8_0_35"
     * @const
     */
    "MYSQL_8_0_35": "MYSQL_8_0_35",

    /**
     * value: "MYSQL_8_0_36"
     * @const
     */
    "MYSQL_8_0_36": "MYSQL_8_0_36",

    /**
     * value: "SQLSERVER_2019_STANDARD"
     * @const
     */
    "SQLSERVER_2019_STANDARD": "SQLSERVER_2019_STANDARD",

    /**
     * value: "SQLSERVER_2019_ENTERPRISE"
     * @const
     */
    "SQLSERVER_2019_ENTERPRISE": "SQLSERVER_2019_ENTERPRISE",

    /**
     * value: "SQLSERVER_2019_EXPRESS"
     * @const
     */
    "SQLSERVER_2019_EXPRESS": "SQLSERVER_2019_EXPRESS",

    /**
     * value: "SQLSERVER_2019_WEB"
     * @const
     */
    "SQLSERVER_2019_WEB": "SQLSERVER_2019_WEB",

    /**
     * value: "SQLSERVER_2022_STANDARD"
     * @const
     */
    "SQLSERVER_2022_STANDARD": "SQLSERVER_2022_STANDARD",

    /**
     * value: "SQLSERVER_2022_ENTERPRISE"
     * @const
     */
    "SQLSERVER_2022_ENTERPRISE": "SQLSERVER_2022_ENTERPRISE",

    /**
     * value: "SQLSERVER_2022_EXPRESS"
     * @const
     */
    "SQLSERVER_2022_EXPRESS": "SQLSERVER_2022_EXPRESS",

    /**
     * value: "SQLSERVER_2022_WEB"
     * @const
     */
    "SQLSERVER_2022_WEB": "SQLSERVER_2022_WEB"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Flag['TypeEnum'] = {

    /**
     * value: "SQL_FLAG_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_FLAG_TYPE_UNSPECIFIED": "SQL_FLAG_TYPE_UNSPECIFIED",

    /**
     * value: "BOOLEAN"
     * @const
     */
    "BOOLEAN": "BOOLEAN",

    /**
     * value: "STRING"
     * @const
     */
    "STRING": "STRING",

    /**
     * value: "INTEGER"
     * @const
     */
    "INTEGER": "INTEGER",

    /**
     * value: "NONE"
     * @const
     */
    "NONE": "NONE",

    /**
     * value: "MYSQL_TIMEZONE_OFFSET"
     * @const
     */
    "MYSQL_TIMEZONE_OFFSET": "MYSQL_TIMEZONE_OFFSET",

    /**
     * value: "FLOAT"
     * @const
     */
    "FLOAT": "FLOAT",

    /**
     * value: "REPEATED_STRING"
     * @const
     */
    "REPEATED_STRING": "REPEATED_STRING"
};



export default Flag;

