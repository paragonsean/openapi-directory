/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SslCert model module.
 * @module model/SslCert
 * @version v1beta4
 */
class SslCert {
    /**
     * Constructs a new <code>SslCert</code>.
     * SslCerts Resource
     * @alias module:model/SslCert
     */
    constructor() { 
        
        SslCert.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SslCert</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SslCert} obj Optional instance to populate.
     * @return {module:model/SslCert} The populated <code>SslCert</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SslCert();

            if (data.hasOwnProperty('cert')) {
                obj['cert'] = ApiClient.convertToType(data['cert'], 'String');
            }
            if (data.hasOwnProperty('certSerialNumber')) {
                obj['certSerialNumber'] = ApiClient.convertToType(data['certSerialNumber'], 'String');
            }
            if (data.hasOwnProperty('commonName')) {
                obj['commonName'] = ApiClient.convertToType(data['commonName'], 'String');
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('expirationTime')) {
                obj['expirationTime'] = ApiClient.convertToType(data['expirationTime'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('sha1Fingerprint')) {
                obj['sha1Fingerprint'] = ApiClient.convertToType(data['sha1Fingerprint'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SslCert</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SslCert</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cert'] && !(typeof data['cert'] === 'string' || data['cert'] instanceof String)) {
            throw new Error("Expected the field `cert` to be a primitive type in the JSON string but got " + data['cert']);
        }
        // ensure the json data is a string
        if (data['certSerialNumber'] && !(typeof data['certSerialNumber'] === 'string' || data['certSerialNumber'] instanceof String)) {
            throw new Error("Expected the field `certSerialNumber` to be a primitive type in the JSON string but got " + data['certSerialNumber']);
        }
        // ensure the json data is a string
        if (data['commonName'] && !(typeof data['commonName'] === 'string' || data['commonName'] instanceof String)) {
            throw new Error("Expected the field `commonName` to be a primitive type in the JSON string but got " + data['commonName']);
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['expirationTime'] && !(typeof data['expirationTime'] === 'string' || data['expirationTime'] instanceof String)) {
            throw new Error("Expected the field `expirationTime` to be a primitive type in the JSON string but got " + data['expirationTime']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['sha1Fingerprint'] && !(typeof data['sha1Fingerprint'] === 'string' || data['sha1Fingerprint'] instanceof String)) {
            throw new Error("Expected the field `sha1Fingerprint` to be a primitive type in the JSON string but got " + data['sha1Fingerprint']);
        }

        return true;
    }


}



/**
 * PEM representation.
 * @member {String} cert
 */
SslCert.prototype['cert'] = undefined;

/**
 * Serial number, as extracted from the certificate.
 * @member {String} certSerialNumber
 */
SslCert.prototype['certSerialNumber'] = undefined;

/**
 * User supplied name. Constrained to [a-zA-Z.-_ ]+.
 * @member {String} commonName
 */
SslCert.prototype['commonName'] = undefined;

/**
 * The time when the certificate was created in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} createTime
 */
SslCert.prototype['createTime'] = undefined;

/**
 * The time when the certificate expires in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} expirationTime
 */
SslCert.prototype['expirationTime'] = undefined;

/**
 * Name of the database instance.
 * @member {String} instance
 */
SslCert.prototype['instance'] = undefined;

/**
 * This is always `sql#sslCert`.
 * @member {String} kind
 */
SslCert.prototype['kind'] = undefined;

/**
 * The URI of this resource.
 * @member {String} selfLink
 */
SslCert.prototype['selfLink'] = undefined;

/**
 * Sha1 Fingerprint.
 * @member {String} sha1Fingerprint
 */
SslCert.prototype['sha1Fingerprint'] = undefined;






export default SslCert;

