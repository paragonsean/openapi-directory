/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MySqlReplicaConfiguration from './MySqlReplicaConfiguration';

/**
 * The ReplicaConfiguration model module.
 * @module model/ReplicaConfiguration
 * @version v1beta4
 */
class ReplicaConfiguration {
    /**
     * Constructs a new <code>ReplicaConfiguration</code>.
     * Read-replica configuration for connecting to the primary instance.
     * @alias module:model/ReplicaConfiguration
     */
    constructor() { 
        
        ReplicaConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ReplicaConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ReplicaConfiguration} obj Optional instance to populate.
     * @return {module:model/ReplicaConfiguration} The populated <code>ReplicaConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ReplicaConfiguration();

            if (data.hasOwnProperty('cascadableReplica')) {
                obj['cascadableReplica'] = ApiClient.convertToType(data['cascadableReplica'], 'Boolean');
            }
            if (data.hasOwnProperty('failoverTarget')) {
                obj['failoverTarget'] = ApiClient.convertToType(data['failoverTarget'], 'Boolean');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('mysqlReplicaConfiguration')) {
                obj['mysqlReplicaConfiguration'] = MySqlReplicaConfiguration.constructFromObject(data['mysqlReplicaConfiguration']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ReplicaConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ReplicaConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `mysqlReplicaConfiguration`
        if (data['mysqlReplicaConfiguration']) { // data not null
          MySqlReplicaConfiguration.validateJSON(data['mysqlReplicaConfiguration']);
        }

        return true;
    }


}



/**
 * Optional. Specifies if a SQL Server replica is a cascadable replica. A cascadable replica is a SQL Server cross region replica that supports replica(s) under it.
 * @member {Boolean} cascadableReplica
 */
ReplicaConfiguration.prototype['cascadableReplica'] = undefined;

/**
 * Specifies if the replica is the failover target. If the field is set to `true` the replica will be designated as a failover replica. In case the primary instance fails, the replica instance will be promoted as the new primary instance. Only one replica can be specified as failover target, and the replica has to be in different zone with the primary instance.
 * @member {Boolean} failoverTarget
 */
ReplicaConfiguration.prototype['failoverTarget'] = undefined;

/**
 * This is always `sql#replicaConfiguration`.
 * @member {String} kind
 */
ReplicaConfiguration.prototype['kind'] = undefined;

/**
 * @member {module:model/MySqlReplicaConfiguration} mysqlReplicaConfiguration
 */
ReplicaConfiguration.prototype['mysqlReplicaConfiguration'] = undefined;






export default ReplicaConfiguration;

