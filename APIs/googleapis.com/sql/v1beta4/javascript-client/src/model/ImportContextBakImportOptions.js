/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImportContextBakImportOptionsEncryptionOptions from './ImportContextBakImportOptionsEncryptionOptions';

/**
 * The ImportContextBakImportOptions model module.
 * @module model/ImportContextBakImportOptions
 * @version v1beta4
 */
class ImportContextBakImportOptions {
    /**
     * Constructs a new <code>ImportContextBakImportOptions</code>.
     * Import parameters specific to SQL Server .BAK files
     * @alias module:model/ImportContextBakImportOptions
     */
    constructor() { 
        
        ImportContextBakImportOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportContextBakImportOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportContextBakImportOptions} obj Optional instance to populate.
     * @return {module:model/ImportContextBakImportOptions} The populated <code>ImportContextBakImportOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportContextBakImportOptions();

            if (data.hasOwnProperty('bakType')) {
                obj['bakType'] = ApiClient.convertToType(data['bakType'], 'String');
            }
            if (data.hasOwnProperty('encryptionOptions')) {
                obj['encryptionOptions'] = ImportContextBakImportOptionsEncryptionOptions.constructFromObject(data['encryptionOptions']);
            }
            if (data.hasOwnProperty('noRecovery')) {
                obj['noRecovery'] = ApiClient.convertToType(data['noRecovery'], 'Boolean');
            }
            if (data.hasOwnProperty('recoveryOnly')) {
                obj['recoveryOnly'] = ApiClient.convertToType(data['recoveryOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('stopAt')) {
                obj['stopAt'] = ApiClient.convertToType(data['stopAt'], 'String');
            }
            if (data.hasOwnProperty('stopAtMark')) {
                obj['stopAtMark'] = ApiClient.convertToType(data['stopAtMark'], 'String');
            }
            if (data.hasOwnProperty('striped')) {
                obj['striped'] = ApiClient.convertToType(data['striped'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportContextBakImportOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportContextBakImportOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bakType'] && !(typeof data['bakType'] === 'string' || data['bakType'] instanceof String)) {
            throw new Error("Expected the field `bakType` to be a primitive type in the JSON string but got " + data['bakType']);
        }
        // validate the optional field `encryptionOptions`
        if (data['encryptionOptions']) { // data not null
          ImportContextBakImportOptionsEncryptionOptions.validateJSON(data['encryptionOptions']);
        }
        // ensure the json data is a string
        if (data['stopAt'] && !(typeof data['stopAt'] === 'string' || data['stopAt'] instanceof String)) {
            throw new Error("Expected the field `stopAt` to be a primitive type in the JSON string but got " + data['stopAt']);
        }
        // ensure the json data is a string
        if (data['stopAtMark'] && !(typeof data['stopAtMark'] === 'string' || data['stopAtMark'] instanceof String)) {
            throw new Error("Expected the field `stopAtMark` to be a primitive type in the JSON string but got " + data['stopAtMark']);
        }

        return true;
    }


}



/**
 * Type of the bak content, FULL or DIFF.
 * @member {module:model/ImportContextBakImportOptions.BakTypeEnum} bakType
 */
ImportContextBakImportOptions.prototype['bakType'] = undefined;

/**
 * @member {module:model/ImportContextBakImportOptionsEncryptionOptions} encryptionOptions
 */
ImportContextBakImportOptions.prototype['encryptionOptions'] = undefined;

/**
 * Whether or not the backup importing will restore database with NORECOVERY option Applies only to Cloud SQL for SQL Server.
 * @member {Boolean} noRecovery
 */
ImportContextBakImportOptions.prototype['noRecovery'] = undefined;

/**
 * Whether or not the backup importing request will just bring database online without downloading Bak content only one of \"no_recovery\" and \"recovery_only\" can be true otherwise error will return. Applies only to Cloud SQL for SQL Server.
 * @member {Boolean} recoveryOnly
 */
ImportContextBakImportOptions.prototype['recoveryOnly'] = undefined;

/**
 * Optional. The timestamp when the import should stop. This timestamp is in the [RFC 3339](https://tools.ietf.org/html/rfc3339) format (for example, `2023-10-01T16:19:00.094`). This field is equivalent to the STOPAT keyword and applies to Cloud SQL for SQL Server only.
 * @member {String} stopAt
 */
ImportContextBakImportOptions.prototype['stopAt'] = undefined;

/**
 * Optional. The marked transaction where the import should stop. This field is equivalent to the STOPATMARK keyword and applies to Cloud SQL for SQL Server only.
 * @member {String} stopAtMark
 */
ImportContextBakImportOptions.prototype['stopAtMark'] = undefined;

/**
 * Whether or not the backup set being restored is striped. Applies only to Cloud SQL for SQL Server.
 * @member {Boolean} striped
 */
ImportContextBakImportOptions.prototype['striped'] = undefined;





/**
 * Allowed values for the <code>bakType</code> property.
 * @enum {String}
 * @readonly
 */
ImportContextBakImportOptions['BakTypeEnum'] = {

    /**
     * value: "BAK_TYPE_UNSPECIFIED"
     * @const
     */
    "BAK_TYPE_UNSPECIFIED": "BAK_TYPE_UNSPECIFIED",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL",

    /**
     * value: "DIFF"
     * @const
     */
    "DIFF": "DIFF",

    /**
     * value: "TLOG"
     * @const
     */
    "TLOG": "TLOG"
};



export default ImportContextBakImportOptions;

