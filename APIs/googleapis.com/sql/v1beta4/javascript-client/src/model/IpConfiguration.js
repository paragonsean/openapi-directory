/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AclEntry from './AclEntry';
import PscConfig from './PscConfig';

/**
 * The IpConfiguration model module.
 * @module model/IpConfiguration
 * @version v1beta4
 */
class IpConfiguration {
    /**
     * Constructs a new <code>IpConfiguration</code>.
     * IP Management configuration.
     * @alias module:model/IpConfiguration
     */
    constructor() { 
        
        IpConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IpConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpConfiguration} obj Optional instance to populate.
     * @return {module:model/IpConfiguration} The populated <code>IpConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpConfiguration();

            if (data.hasOwnProperty('allocatedIpRange')) {
                obj['allocatedIpRange'] = ApiClient.convertToType(data['allocatedIpRange'], 'String');
            }
            if (data.hasOwnProperty('authorizedNetworks')) {
                obj['authorizedNetworks'] = ApiClient.convertToType(data['authorizedNetworks'], [AclEntry]);
            }
            if (data.hasOwnProperty('enablePrivatePathForGoogleCloudServices')) {
                obj['enablePrivatePathForGoogleCloudServices'] = ApiClient.convertToType(data['enablePrivatePathForGoogleCloudServices'], 'Boolean');
            }
            if (data.hasOwnProperty('ipv4Enabled')) {
                obj['ipv4Enabled'] = ApiClient.convertToType(data['ipv4Enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('privateNetwork')) {
                obj['privateNetwork'] = ApiClient.convertToType(data['privateNetwork'], 'String');
            }
            if (data.hasOwnProperty('pscConfig')) {
                obj['pscConfig'] = PscConfig.constructFromObject(data['pscConfig']);
            }
            if (data.hasOwnProperty('requireSsl')) {
                obj['requireSsl'] = ApiClient.convertToType(data['requireSsl'], 'Boolean');
            }
            if (data.hasOwnProperty('sslMode')) {
                obj['sslMode'] = ApiClient.convertToType(data['sslMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocatedIpRange'] && !(typeof data['allocatedIpRange'] === 'string' || data['allocatedIpRange'] instanceof String)) {
            throw new Error("Expected the field `allocatedIpRange` to be a primitive type in the JSON string but got " + data['allocatedIpRange']);
        }
        if (data['authorizedNetworks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['authorizedNetworks'])) {
                throw new Error("Expected the field `authorizedNetworks` to be an array in the JSON data but got " + data['authorizedNetworks']);
            }
            // validate the optional field `authorizedNetworks` (array)
            for (const item of data['authorizedNetworks']) {
                AclEntry.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['privateNetwork'] && !(typeof data['privateNetwork'] === 'string' || data['privateNetwork'] instanceof String)) {
            throw new Error("Expected the field `privateNetwork` to be a primitive type in the JSON string but got " + data['privateNetwork']);
        }
        // validate the optional field `pscConfig`
        if (data['pscConfig']) { // data not null
          PscConfig.validateJSON(data['pscConfig']);
        }
        // ensure the json data is a string
        if (data['sslMode'] && !(typeof data['sslMode'] === 'string' || data['sslMode'] instanceof String)) {
            throw new Error("Expected the field `sslMode` to be a primitive type in the JSON string but got " + data['sslMode']);
        }

        return true;
    }


}



/**
 * The name of the allocated ip range for the private ip Cloud SQL instance. For example: \"google-managed-services-default\". If set, the instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression `[a-z]([-a-z0-9]*[a-z0-9])?.`
 * @member {String} allocatedIpRange
 */
IpConfiguration.prototype['allocatedIpRange'] = undefined;

/**
 * The list of external networks that are allowed to connect to the instance using the IP. In 'CIDR' notation, also known as 'slash' notation (for example: `157.197.200.0/24`).
 * @member {Array.<module:model/AclEntry>} authorizedNetworks
 */
IpConfiguration.prototype['authorizedNetworks'] = undefined;

/**
 * Controls connectivity to private IP instances from Google services, such as BigQuery.
 * @member {Boolean} enablePrivatePathForGoogleCloudServices
 */
IpConfiguration.prototype['enablePrivatePathForGoogleCloudServices'] = undefined;

/**
 * Whether the instance is assigned a public IP address or not.
 * @member {Boolean} ipv4Enabled
 */
IpConfiguration.prototype['ipv4Enabled'] = undefined;

/**
 * The resource link for the VPC network from which the Cloud SQL instance is accessible for private IP. For example, `/projects/myProject/global/networks/default`. This setting can be updated, but it cannot be removed after it is set.
 * @member {String} privateNetwork
 */
IpConfiguration.prototype['privateNetwork'] = undefined;

/**
 * @member {module:model/PscConfig} pscConfig
 */
IpConfiguration.prototype['pscConfig'] = undefined;

/**
 * Use `ssl_mode` instead for MySQL and PostgreSQL. SQL Server uses this flag. Whether SSL/TLS connections over IP are enforced. If set to false, then allow both non-SSL/non-TLS and SSL/TLS connections. For SSL/TLS connections, the client certificate won't be verified. If set to true, then only allow connections encrypted with SSL/TLS and with valid client certificates. If you want to enforce SSL/TLS without enforcing the requirement for valid client certificates, then use the `ssl_mode` flag instead of the legacy `require_ssl` flag.
 * @member {Boolean} requireSsl
 */
IpConfiguration.prototype['requireSsl'] = undefined;

/**
 * Specify how SSL/TLS is enforced in database connections. MySQL and PostgreSQL use the `ssl_mode` flag. If you must use the `require_ssl` flag for backward compatibility, then only the following value pairs are valid: * `ssl_mode=ALLOW_UNENCRYPTED_AND_ENCRYPTED` and `require_ssl=false` * `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false` * `ssl_mode=TRUSTED_CLIENT_CERTIFICATE_REQUIRED` and `require_ssl=true` The value of `ssl_mode` gets priority over the value of `require_ssl`. For example, for the pair `ssl_mode=ENCRYPTED_ONLY` and `require_ssl=false`, the `ssl_mode=ENCRYPTED_ONLY` means only accept SSL connections, while the `require_ssl=false` means accept both non-SSL and SSL connections. MySQL and PostgreSQL databases respect `ssl_mode` in this case and accept only SSL connections. SQL Server uses the `require_ssl` flag. You can set the value for this flag to `true` or `false`.
 * @member {module:model/IpConfiguration.SslModeEnum} sslMode
 */
IpConfiguration.prototype['sslMode'] = undefined;





/**
 * Allowed values for the <code>sslMode</code> property.
 * @enum {String}
 * @readonly
 */
IpConfiguration['SslModeEnum'] = {

    /**
     * value: "SSL_MODE_UNSPECIFIED"
     * @const
     */
    "SSL_MODE_UNSPECIFIED": "SSL_MODE_UNSPECIFIED",

    /**
     * value: "ALLOW_UNENCRYPTED_AND_ENCRYPTED"
     * @const
     */
    "ALLOW_UNENCRYPTED_AND_ENCRYPTED": "ALLOW_UNENCRYPTED_AND_ENCRYPTED",

    /**
     * value: "ENCRYPTED_ONLY"
     * @const
     */
    "ENCRYPTED_ONLY": "ENCRYPTED_ONLY",

    /**
     * value: "TRUSTED_CLIENT_CERTIFICATE_REQUIRED"
     * @const
     */
    "TRUSTED_CLIENT_CERTIFICATE_REQUIRED": "TRUSTED_CLIENT_CERTIFICATE_REQUIRED"
};



export default IpConfiguration;

