/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PasswordValidationPolicy model module.
 * @module model/PasswordValidationPolicy
 * @version v1beta4
 */
class PasswordValidationPolicy {
    /**
     * Constructs a new <code>PasswordValidationPolicy</code>.
     * Database instance local user password validation policy
     * @alias module:model/PasswordValidationPolicy
     */
    constructor() { 
        
        PasswordValidationPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PasswordValidationPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PasswordValidationPolicy} obj Optional instance to populate.
     * @return {module:model/PasswordValidationPolicy} The populated <code>PasswordValidationPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PasswordValidationPolicy();

            if (data.hasOwnProperty('complexity')) {
                obj['complexity'] = ApiClient.convertToType(data['complexity'], 'String');
            }
            if (data.hasOwnProperty('disallowCompromisedCredentials')) {
                obj['disallowCompromisedCredentials'] = ApiClient.convertToType(data['disallowCompromisedCredentials'], 'Boolean');
            }
            if (data.hasOwnProperty('disallowUsernameSubstring')) {
                obj['disallowUsernameSubstring'] = ApiClient.convertToType(data['disallowUsernameSubstring'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePasswordPolicy')) {
                obj['enablePasswordPolicy'] = ApiClient.convertToType(data['enablePasswordPolicy'], 'Boolean');
            }
            if (data.hasOwnProperty('minLength')) {
                obj['minLength'] = ApiClient.convertToType(data['minLength'], 'Number');
            }
            if (data.hasOwnProperty('passwordChangeInterval')) {
                obj['passwordChangeInterval'] = ApiClient.convertToType(data['passwordChangeInterval'], 'String');
            }
            if (data.hasOwnProperty('reuseInterval')) {
                obj['reuseInterval'] = ApiClient.convertToType(data['reuseInterval'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PasswordValidationPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PasswordValidationPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['complexity'] && !(typeof data['complexity'] === 'string' || data['complexity'] instanceof String)) {
            throw new Error("Expected the field `complexity` to be a primitive type in the JSON string but got " + data['complexity']);
        }
        // ensure the json data is a string
        if (data['passwordChangeInterval'] && !(typeof data['passwordChangeInterval'] === 'string' || data['passwordChangeInterval'] instanceof String)) {
            throw new Error("Expected the field `passwordChangeInterval` to be a primitive type in the JSON string but got " + data['passwordChangeInterval']);
        }

        return true;
    }


}



/**
 * The complexity of the password.
 * @member {module:model/PasswordValidationPolicy.ComplexityEnum} complexity
 */
PasswordValidationPolicy.prototype['complexity'] = undefined;

/**
 * This field is deprecated and will be removed in a future version of the API.
 * @member {Boolean} disallowCompromisedCredentials
 */
PasswordValidationPolicy.prototype['disallowCompromisedCredentials'] = undefined;

/**
 * Disallow username as a part of the password.
 * @member {Boolean} disallowUsernameSubstring
 */
PasswordValidationPolicy.prototype['disallowUsernameSubstring'] = undefined;

/**
 * Whether the password policy is enabled or not.
 * @member {Boolean} enablePasswordPolicy
 */
PasswordValidationPolicy.prototype['enablePasswordPolicy'] = undefined;

/**
 * Minimum number of characters allowed.
 * @member {Number} minLength
 */
PasswordValidationPolicy.prototype['minLength'] = undefined;

/**
 * Minimum interval after which the password can be changed. This flag is only supported for PostgreSQL.
 * @member {String} passwordChangeInterval
 */
PasswordValidationPolicy.prototype['passwordChangeInterval'] = undefined;

/**
 * Number of previous passwords that cannot be reused.
 * @member {Number} reuseInterval
 */
PasswordValidationPolicy.prototype['reuseInterval'] = undefined;





/**
 * Allowed values for the <code>complexity</code> property.
 * @enum {String}
 * @readonly
 */
PasswordValidationPolicy['ComplexityEnum'] = {

    /**
     * value: "COMPLEXITY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "COMPLEXITY_UNSPECIFIED",

    /**
     * value: "COMPLEXITY_DEFAULT"
     * @const
     */
    "DEFAULT": "COMPLEXITY_DEFAULT"
};



export default PasswordValidationPolicy;

