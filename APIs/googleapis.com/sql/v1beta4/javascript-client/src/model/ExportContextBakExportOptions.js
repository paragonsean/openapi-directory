/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportContextBakExportOptions model module.
 * @module model/ExportContextBakExportOptions
 * @version v1beta4
 */
class ExportContextBakExportOptions {
    /**
     * Constructs a new <code>ExportContextBakExportOptions</code>.
     * Options for exporting BAK files (SQL Server-only)
     * @alias module:model/ExportContextBakExportOptions
     */
    constructor() { 
        
        ExportContextBakExportOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportContextBakExportOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportContextBakExportOptions} obj Optional instance to populate.
     * @return {module:model/ExportContextBakExportOptions} The populated <code>ExportContextBakExportOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportContextBakExportOptions();

            if (data.hasOwnProperty('bakType')) {
                obj['bakType'] = ApiClient.convertToType(data['bakType'], 'String');
            }
            if (data.hasOwnProperty('copyOnly')) {
                obj['copyOnly'] = ApiClient.convertToType(data['copyOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('differentialBase')) {
                obj['differentialBase'] = ApiClient.convertToType(data['differentialBase'], 'Boolean');
            }
            if (data.hasOwnProperty('stripeCount')) {
                obj['stripeCount'] = ApiClient.convertToType(data['stripeCount'], 'Number');
            }
            if (data.hasOwnProperty('striped')) {
                obj['striped'] = ApiClient.convertToType(data['striped'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportContextBakExportOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportContextBakExportOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bakType'] && !(typeof data['bakType'] === 'string' || data['bakType'] instanceof String)) {
            throw new Error("Expected the field `bakType` to be a primitive type in the JSON string but got " + data['bakType']);
        }

        return true;
    }


}



/**
 * Type of this bak file will be export, FULL or DIFF, SQL Server only
 * @member {module:model/ExportContextBakExportOptions.BakTypeEnum} bakType
 */
ExportContextBakExportOptions.prototype['bakType'] = undefined;

/**
 * Deprecated: copy_only is deprecated. Use differential_base instead
 * @member {Boolean} copyOnly
 */
ExportContextBakExportOptions.prototype['copyOnly'] = undefined;

/**
 * Whether or not the backup can be used as a differential base copy_only backup can not be served as differential base
 * @member {Boolean} differentialBase
 */
ExportContextBakExportOptions.prototype['differentialBase'] = undefined;

/**
 * Option for specifying how many stripes to use for the export. If blank, and the value of the striped field is true, the number of stripes is automatically chosen.
 * @member {Number} stripeCount
 */
ExportContextBakExportOptions.prototype['stripeCount'] = undefined;

/**
 * Whether or not the export should be striped.
 * @member {Boolean} striped
 */
ExportContextBakExportOptions.prototype['striped'] = undefined;





/**
 * Allowed values for the <code>bakType</code> property.
 * @enum {String}
 * @readonly
 */
ExportContextBakExportOptions['BakTypeEnum'] = {

    /**
     * value: "BAK_TYPE_UNSPECIFIED"
     * @const
     */
    "BAK_TYPE_UNSPECIFIED": "BAK_TYPE_UNSPECIFIED",

    /**
     * value: "FULL"
     * @const
     */
    "FULL": "FULL",

    /**
     * value: "DIFF"
     * @const
     */
    "DIFF": "DIFF",

    /**
     * value: "TLOG"
     * @const
     */
    "TLOG": "TLOG"
};



export default ExportContextBakExportOptions;

