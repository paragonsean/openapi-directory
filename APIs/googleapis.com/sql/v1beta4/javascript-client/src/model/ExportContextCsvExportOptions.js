/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExportContextCsvExportOptions model module.
 * @module model/ExportContextCsvExportOptions
 * @version v1beta4
 */
class ExportContextCsvExportOptions {
    /**
     * Constructs a new <code>ExportContextCsvExportOptions</code>.
     * Options for exporting data as CSV. &#x60;MySQL&#x60; and &#x60;PostgreSQL&#x60; instances only.
     * @alias module:model/ExportContextCsvExportOptions
     */
    constructor() { 
        
        ExportContextCsvExportOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportContextCsvExportOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportContextCsvExportOptions} obj Optional instance to populate.
     * @return {module:model/ExportContextCsvExportOptions} The populated <code>ExportContextCsvExportOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportContextCsvExportOptions();

            if (data.hasOwnProperty('escapeCharacter')) {
                obj['escapeCharacter'] = ApiClient.convertToType(data['escapeCharacter'], 'String');
            }
            if (data.hasOwnProperty('fieldsTerminatedBy')) {
                obj['fieldsTerminatedBy'] = ApiClient.convertToType(data['fieldsTerminatedBy'], 'String');
            }
            if (data.hasOwnProperty('linesTerminatedBy')) {
                obj['linesTerminatedBy'] = ApiClient.convertToType(data['linesTerminatedBy'], 'String');
            }
            if (data.hasOwnProperty('quoteCharacter')) {
                obj['quoteCharacter'] = ApiClient.convertToType(data['quoteCharacter'], 'String');
            }
            if (data.hasOwnProperty('selectQuery')) {
                obj['selectQuery'] = ApiClient.convertToType(data['selectQuery'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportContextCsvExportOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportContextCsvExportOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['escapeCharacter'] && !(typeof data['escapeCharacter'] === 'string' || data['escapeCharacter'] instanceof String)) {
            throw new Error("Expected the field `escapeCharacter` to be a primitive type in the JSON string but got " + data['escapeCharacter']);
        }
        // ensure the json data is a string
        if (data['fieldsTerminatedBy'] && !(typeof data['fieldsTerminatedBy'] === 'string' || data['fieldsTerminatedBy'] instanceof String)) {
            throw new Error("Expected the field `fieldsTerminatedBy` to be a primitive type in the JSON string but got " + data['fieldsTerminatedBy']);
        }
        // ensure the json data is a string
        if (data['linesTerminatedBy'] && !(typeof data['linesTerminatedBy'] === 'string' || data['linesTerminatedBy'] instanceof String)) {
            throw new Error("Expected the field `linesTerminatedBy` to be a primitive type in the JSON string but got " + data['linesTerminatedBy']);
        }
        // ensure the json data is a string
        if (data['quoteCharacter'] && !(typeof data['quoteCharacter'] === 'string' || data['quoteCharacter'] instanceof String)) {
            throw new Error("Expected the field `quoteCharacter` to be a primitive type in the JSON string but got " + data['quoteCharacter']);
        }
        // ensure the json data is a string
        if (data['selectQuery'] && !(typeof data['selectQuery'] === 'string' || data['selectQuery'] instanceof String)) {
            throw new Error("Expected the field `selectQuery` to be a primitive type in the JSON string but got " + data['selectQuery']);
        }

        return true;
    }


}



/**
 * Specifies the character that should appear before a data character that needs to be escaped.
 * @member {String} escapeCharacter
 */
ExportContextCsvExportOptions.prototype['escapeCharacter'] = undefined;

/**
 * Specifies the character that separates columns within each row (line) of the file.
 * @member {String} fieldsTerminatedBy
 */
ExportContextCsvExportOptions.prototype['fieldsTerminatedBy'] = undefined;

/**
 * This is used to separate lines. If a line does not contain all fields, the rest of the columns are set to their default values.
 * @member {String} linesTerminatedBy
 */
ExportContextCsvExportOptions.prototype['linesTerminatedBy'] = undefined;

/**
 * Specifies the quoting character to be used when a data value is quoted.
 * @member {String} quoteCharacter
 */
ExportContextCsvExportOptions.prototype['quoteCharacter'] = undefined;

/**
 * The select query used to extract the data.
 * @member {String} selectQuery
 */
ExportContextCsvExportOptions.prototype['selectQuery'] = undefined;






export default ExportContextCsvExportOptions;

