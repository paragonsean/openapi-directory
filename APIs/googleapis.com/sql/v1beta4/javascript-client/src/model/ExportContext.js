/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportContextBakExportOptions from './ExportContextBakExportOptions';
import ExportContextCsvExportOptions from './ExportContextCsvExportOptions';
import ExportContextSqlExportOptions from './ExportContextSqlExportOptions';

/**
 * The ExportContext model module.
 * @module model/ExportContext
 * @version v1beta4
 */
class ExportContext {
    /**
     * Constructs a new <code>ExportContext</code>.
     * Database instance export context.
     * @alias module:model/ExportContext
     */
    constructor() { 
        
        ExportContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportContext} obj Optional instance to populate.
     * @return {module:model/ExportContext} The populated <code>ExportContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportContext();

            if (data.hasOwnProperty('bakExportOptions')) {
                obj['bakExportOptions'] = ExportContextBakExportOptions.constructFromObject(data['bakExportOptions']);
            }
            if (data.hasOwnProperty('csvExportOptions')) {
                obj['csvExportOptions'] = ExportContextCsvExportOptions.constructFromObject(data['csvExportOptions']);
            }
            if (data.hasOwnProperty('databases')) {
                obj['databases'] = ApiClient.convertToType(data['databases'], ['String']);
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('offload')) {
                obj['offload'] = ApiClient.convertToType(data['offload'], 'Boolean');
            }
            if (data.hasOwnProperty('sqlExportOptions')) {
                obj['sqlExportOptions'] = ExportContextSqlExportOptions.constructFromObject(data['sqlExportOptions']);
            }
            if (data.hasOwnProperty('uri')) {
                obj['uri'] = ApiClient.convertToType(data['uri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportContext</code>.
     */
    static validateJSON(data) {
        // validate the optional field `bakExportOptions`
        if (data['bakExportOptions']) { // data not null
          ExportContextBakExportOptions.validateJSON(data['bakExportOptions']);
        }
        // validate the optional field `csvExportOptions`
        if (data['csvExportOptions']) { // data not null
          ExportContextCsvExportOptions.validateJSON(data['csvExportOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['databases'])) {
            throw new Error("Expected the field `databases` to be an array in the JSON data but got " + data['databases']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // validate the optional field `sqlExportOptions`
        if (data['sqlExportOptions']) { // data not null
          ExportContextSqlExportOptions.validateJSON(data['sqlExportOptions']);
        }
        // ensure the json data is a string
        if (data['uri'] && !(typeof data['uri'] === 'string' || data['uri'] instanceof String)) {
            throw new Error("Expected the field `uri` to be a primitive type in the JSON string but got " + data['uri']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExportContextBakExportOptions} bakExportOptions
 */
ExportContext.prototype['bakExportOptions'] = undefined;

/**
 * @member {module:model/ExportContextCsvExportOptions} csvExportOptions
 */
ExportContext.prototype['csvExportOptions'] = undefined;

/**
 * Databases to be exported. `MySQL instances:` If `fileType` is `SQL` and no database is specified, all databases are exported, except for the `mysql` system database. If `fileType` is `CSV`, you can specify one database, either by using this property or by using the `csvExportOptions.selectQuery` property, which takes precedence over this property. `PostgreSQL instances:` You must specify one database to be exported. If `fileType` is `CSV`, this database must match the one specified in the `csvExportOptions.selectQuery` property. `SQL Server instances:` You must specify one database to be exported, and the `fileType` must be `BAK`.
 * @member {Array.<String>} databases
 */
ExportContext.prototype['databases'] = undefined;

/**
 * The file type for the specified uri.
 * @member {module:model/ExportContext.FileTypeEnum} fileType
 */
ExportContext.prototype['fileType'] = undefined;

/**
 * This is always `sql#exportContext`.
 * @member {String} kind
 */
ExportContext.prototype['kind'] = undefined;

/**
 * Option for export offload.
 * @member {Boolean} offload
 */
ExportContext.prototype['offload'] = undefined;

/**
 * @member {module:model/ExportContextSqlExportOptions} sqlExportOptions
 */
ExportContext.prototype['sqlExportOptions'] = undefined;

/**
 * The path to the file in Google Cloud Storage where the export will be stored. The URI is in the form `gs://bucketName/fileName`. If the file already exists, the request succeeds, but the operation fails. If `fileType` is `SQL` and the filename ends with .gz, the contents are compressed.
 * @member {String} uri
 */
ExportContext.prototype['uri'] = undefined;





/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
ExportContext['FileTypeEnum'] = {

    /**
     * value: "SQL_FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_FILE_TYPE_UNSPECIFIED": "SQL_FILE_TYPE_UNSPECIFIED",

    /**
     * value: "SQL"
     * @const
     */
    "SQL": "SQL",

    /**
     * value: "CSV"
     * @const
     */
    "CSV": "CSV",

    /**
     * value: "BAK"
     * @const
     */
    "BAK": "BAK"
};



export default ExportContext;

