/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BinLogCoordinates from './BinLogCoordinates';

/**
 * The CloneContext model module.
 * @module model/CloneContext
 * @version v1beta4
 */
class CloneContext {
    /**
     * Constructs a new <code>CloneContext</code>.
     * Database instance clone context.
     * @alias module:model/CloneContext
     */
    constructor() { 
        
        CloneContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CloneContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CloneContext} obj Optional instance to populate.
     * @return {module:model/CloneContext} The populated <code>CloneContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CloneContext();

            if (data.hasOwnProperty('allocatedIpRange')) {
                obj['allocatedIpRange'] = ApiClient.convertToType(data['allocatedIpRange'], 'String');
            }
            if (data.hasOwnProperty('binLogCoordinates')) {
                obj['binLogCoordinates'] = BinLogCoordinates.constructFromObject(data['binLogCoordinates']);
            }
            if (data.hasOwnProperty('databaseNames')) {
                obj['databaseNames'] = ApiClient.convertToType(data['databaseNames'], ['String']);
            }
            if (data.hasOwnProperty('destinationInstanceName')) {
                obj['destinationInstanceName'] = ApiClient.convertToType(data['destinationInstanceName'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('pitrTimestampMs')) {
                obj['pitrTimestampMs'] = ApiClient.convertToType(data['pitrTimestampMs'], 'String');
            }
            if (data.hasOwnProperty('pointInTime')) {
                obj['pointInTime'] = ApiClient.convertToType(data['pointInTime'], 'String');
            }
            if (data.hasOwnProperty('preferredZone')) {
                obj['preferredZone'] = ApiClient.convertToType(data['preferredZone'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CloneContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CloneContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocatedIpRange'] && !(typeof data['allocatedIpRange'] === 'string' || data['allocatedIpRange'] instanceof String)) {
            throw new Error("Expected the field `allocatedIpRange` to be a primitive type in the JSON string but got " + data['allocatedIpRange']);
        }
        // validate the optional field `binLogCoordinates`
        if (data['binLogCoordinates']) { // data not null
          BinLogCoordinates.validateJSON(data['binLogCoordinates']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['databaseNames'])) {
            throw new Error("Expected the field `databaseNames` to be an array in the JSON data but got " + data['databaseNames']);
        }
        // ensure the json data is a string
        if (data['destinationInstanceName'] && !(typeof data['destinationInstanceName'] === 'string' || data['destinationInstanceName'] instanceof String)) {
            throw new Error("Expected the field `destinationInstanceName` to be a primitive type in the JSON string but got " + data['destinationInstanceName']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['pitrTimestampMs'] && !(typeof data['pitrTimestampMs'] === 'string' || data['pitrTimestampMs'] instanceof String)) {
            throw new Error("Expected the field `pitrTimestampMs` to be a primitive type in the JSON string but got " + data['pitrTimestampMs']);
        }
        // ensure the json data is a string
        if (data['pointInTime'] && !(typeof data['pointInTime'] === 'string' || data['pointInTime'] instanceof String)) {
            throw new Error("Expected the field `pointInTime` to be a primitive type in the JSON string but got " + data['pointInTime']);
        }
        // ensure the json data is a string
        if (data['preferredZone'] && !(typeof data['preferredZone'] === 'string' || data['preferredZone'] instanceof String)) {
            throw new Error("Expected the field `preferredZone` to be a primitive type in the JSON string but got " + data['preferredZone']);
        }

        return true;
    }


}



/**
 * The name of the allocated ip range for the private ip Cloud SQL instance. For example: \"google-managed-services-default\". If set, the cloned instance ip will be created in the allocated range. The range name must comply with [RFC 1035](https://tools.ietf.org/html/rfc1035). Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])?. Reserved for future use.
 * @member {String} allocatedIpRange
 */
CloneContext.prototype['allocatedIpRange'] = undefined;

/**
 * @member {module:model/BinLogCoordinates} binLogCoordinates
 */
CloneContext.prototype['binLogCoordinates'] = undefined;

/**
 * (SQL Server only) Clone only the specified databases from the source instance. Clone all databases if empty.
 * @member {Array.<String>} databaseNames
 */
CloneContext.prototype['databaseNames'] = undefined;

/**
 * Name of the Cloud SQL instance to be created as a clone.
 * @member {String} destinationInstanceName
 */
CloneContext.prototype['destinationInstanceName'] = undefined;

/**
 * This is always `sql#cloneContext`.
 * @member {String} kind
 */
CloneContext.prototype['kind'] = undefined;

/**
 * Reserved for future use.
 * @member {String} pitrTimestampMs
 */
CloneContext.prototype['pitrTimestampMs'] = undefined;

/**
 * Timestamp, if specified, identifies the time to which the source instance is cloned.
 * @member {String} pointInTime
 */
CloneContext.prototype['pointInTime'] = undefined;

/**
 * Optional. (Point-in-time recovery for PostgreSQL only) Clone to an instance in the specified zone. If no zone is specified, clone to the same zone as the source instance.
 * @member {String} preferredZone
 */
CloneContext.prototype['preferredZone'] = undefined;






export default CloneContext;

