/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExportContextSqlExportOptionsMysqlExportOptions from './ExportContextSqlExportOptionsMysqlExportOptions';

/**
 * The ExportContextSqlExportOptions model module.
 * @module model/ExportContextSqlExportOptions
 * @version v1beta4
 */
class ExportContextSqlExportOptions {
    /**
     * Constructs a new <code>ExportContextSqlExportOptions</code>.
     * Options for exporting data as SQL statements.
     * @alias module:model/ExportContextSqlExportOptions
     */
    constructor() { 
        
        ExportContextSqlExportOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExportContextSqlExportOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExportContextSqlExportOptions} obj Optional instance to populate.
     * @return {module:model/ExportContextSqlExportOptions} The populated <code>ExportContextSqlExportOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExportContextSqlExportOptions();

            if (data.hasOwnProperty('mysqlExportOptions')) {
                obj['mysqlExportOptions'] = ExportContextSqlExportOptionsMysqlExportOptions.constructFromObject(data['mysqlExportOptions']);
            }
            if (data.hasOwnProperty('parallel')) {
                obj['parallel'] = ApiClient.convertToType(data['parallel'], 'Boolean');
            }
            if (data.hasOwnProperty('schemaOnly')) {
                obj['schemaOnly'] = ApiClient.convertToType(data['schemaOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('tables')) {
                obj['tables'] = ApiClient.convertToType(data['tables'], ['String']);
            }
            if (data.hasOwnProperty('threads')) {
                obj['threads'] = ApiClient.convertToType(data['threads'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExportContextSqlExportOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExportContextSqlExportOptions</code>.
     */
    static validateJSON(data) {
        // validate the optional field `mysqlExportOptions`
        if (data['mysqlExportOptions']) { // data not null
          ExportContextSqlExportOptionsMysqlExportOptions.validateJSON(data['mysqlExportOptions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tables'])) {
            throw new Error("Expected the field `tables` to be an array in the JSON data but got " + data['tables']);
        }

        return true;
    }


}



/**
 * @member {module:model/ExportContextSqlExportOptionsMysqlExportOptions} mysqlExportOptions
 */
ExportContextSqlExportOptions.prototype['mysqlExportOptions'] = undefined;

/**
 * Optional. Whether or not the export should be parallel.
 * @member {Boolean} parallel
 */
ExportContextSqlExportOptions.prototype['parallel'] = undefined;

/**
 * Export only schemas.
 * @member {Boolean} schemaOnly
 */
ExportContextSqlExportOptions.prototype['schemaOnly'] = undefined;

/**
 * Tables to export, or that were exported, from the specified database. If you specify tables, specify one and only one database. For PostgreSQL instances, you can specify only one table.
 * @member {Array.<String>} tables
 */
ExportContextSqlExportOptions.prototype['tables'] = undefined;

/**
 * Optional. The number of threads to use for parallel export.
 * @member {Number} threads
 */
ExportContextSqlExportOptions.prototype['threads'] = undefined;






export default ExportContextSqlExportOptions;

