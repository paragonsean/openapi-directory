/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DemoteMasterConfiguration from './DemoteMasterConfiguration';

/**
 * The DemoteMasterContext model module.
 * @module model/DemoteMasterContext
 * @version v1beta4
 */
class DemoteMasterContext {
    /**
     * Constructs a new <code>DemoteMasterContext</code>.
     * Database instance demote primary instance context.
     * @alias module:model/DemoteMasterContext
     */
    constructor() { 
        
        DemoteMasterContext.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>DemoteMasterContext</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DemoteMasterContext} obj Optional instance to populate.
     * @return {module:model/DemoteMasterContext} The populated <code>DemoteMasterContext</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DemoteMasterContext();

            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('masterInstanceName')) {
                obj['masterInstanceName'] = ApiClient.convertToType(data['masterInstanceName'], 'String');
            }
            if (data.hasOwnProperty('replicaConfiguration')) {
                obj['replicaConfiguration'] = DemoteMasterConfiguration.constructFromObject(data['replicaConfiguration']);
            }
            if (data.hasOwnProperty('skipReplicationSetup')) {
                obj['skipReplicationSetup'] = ApiClient.convertToType(data['skipReplicationSetup'], 'Boolean');
            }
            if (data.hasOwnProperty('verifyGtidConsistency')) {
                obj['verifyGtidConsistency'] = ApiClient.convertToType(data['verifyGtidConsistency'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DemoteMasterContext</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DemoteMasterContext</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['masterInstanceName'] && !(typeof data['masterInstanceName'] === 'string' || data['masterInstanceName'] instanceof String)) {
            throw new Error("Expected the field `masterInstanceName` to be a primitive type in the JSON string but got " + data['masterInstanceName']);
        }
        // validate the optional field `replicaConfiguration`
        if (data['replicaConfiguration']) { // data not null
          DemoteMasterConfiguration.validateJSON(data['replicaConfiguration']);
        }

        return true;
    }


}



/**
 * This is always `sql#demoteMasterContext`.
 * @member {String} kind
 */
DemoteMasterContext.prototype['kind'] = undefined;

/**
 * The name of the instance which will act as on-premises primary instance in the replication setup.
 * @member {String} masterInstanceName
 */
DemoteMasterContext.prototype['masterInstanceName'] = undefined;

/**
 * @member {module:model/DemoteMasterConfiguration} replicaConfiguration
 */
DemoteMasterContext.prototype['replicaConfiguration'] = undefined;

/**
 * Flag to skip replication setup on the instance.
 * @member {Boolean} skipReplicationSetup
 */
DemoteMasterContext.prototype['skipReplicationSetup'] = undefined;

/**
 * Verify the GTID consistency for demote operation. Default value: `True`. Setting this flag to `false` enables you to bypass the GTID consistency check between on-premises primary instance and Cloud SQL instance during the demotion operation but also exposes you to the risk of future replication failures. Change the value only if you know the reason for the GTID divergence and are confident that doing so will not cause any replication issues.
 * @member {Boolean} verifyGtidConsistency
 */
DemoteMasterContext.prototype['verifyGtidConsistency'] = undefined;






export default DemoteMasterContext;

