/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ApiWarning from './ApiWarning';
import BackupContext from './BackupContext';
import ExportContext from './ExportContext';
import ImportContext from './ImportContext';
import OperationErrors from './OperationErrors';

/**
 * The Operation model module.
 * @module model/Operation
 * @version v1beta4
 */
class Operation {
    /**
     * Constructs a new <code>Operation</code>.
     * An Operation resource. For successful operations that return an Operation resource, only the fields relevant to the operation are populated in the resource.
     * @alias module:model/Operation
     */
    constructor() { 
        
        Operation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Operation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Operation} obj Optional instance to populate.
     * @return {module:model/Operation} The populated <code>Operation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Operation();

            if (data.hasOwnProperty('apiWarning')) {
                obj['apiWarning'] = ApiWarning.constructFromObject(data['apiWarning']);
            }
            if (data.hasOwnProperty('backupContext')) {
                obj['backupContext'] = BackupContext.constructFromObject(data['backupContext']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = OperationErrors.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('exportContext')) {
                obj['exportContext'] = ExportContext.constructFromObject(data['exportContext']);
            }
            if (data.hasOwnProperty('importContext')) {
                obj['importContext'] = ImportContext.constructFromObject(data['importContext']);
            }
            if (data.hasOwnProperty('insertTime')) {
                obj['insertTime'] = ApiClient.convertToType(data['insertTime'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('targetId')) {
                obj['targetId'] = ApiClient.convertToType(data['targetId'], 'String');
            }
            if (data.hasOwnProperty('targetLink')) {
                obj['targetLink'] = ApiClient.convertToType(data['targetLink'], 'String');
            }
            if (data.hasOwnProperty('targetProject')) {
                obj['targetProject'] = ApiClient.convertToType(data['targetProject'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = ApiClient.convertToType(data['user'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Operation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Operation</code>.
     */
    static validateJSON(data) {
        // validate the optional field `apiWarning`
        if (data['apiWarning']) { // data not null
          ApiWarning.validateJSON(data['apiWarning']);
        }
        // validate the optional field `backupContext`
        if (data['backupContext']) { // data not null
          BackupContext.validateJSON(data['backupContext']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          OperationErrors.validateJSON(data['error']);
        }
        // validate the optional field `exportContext`
        if (data['exportContext']) { // data not null
          ExportContext.validateJSON(data['exportContext']);
        }
        // validate the optional field `importContext`
        if (data['importContext']) { // data not null
          ImportContext.validateJSON(data['importContext']);
        }
        // ensure the json data is a string
        if (data['insertTime'] && !(typeof data['insertTime'] === 'string' || data['insertTime'] instanceof String)) {
            throw new Error("Expected the field `insertTime` to be a primitive type in the JSON string but got " + data['insertTime']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['targetId'] && !(typeof data['targetId'] === 'string' || data['targetId'] instanceof String)) {
            throw new Error("Expected the field `targetId` to be a primitive type in the JSON string but got " + data['targetId']);
        }
        // ensure the json data is a string
        if (data['targetLink'] && !(typeof data['targetLink'] === 'string' || data['targetLink'] instanceof String)) {
            throw new Error("Expected the field `targetLink` to be a primitive type in the JSON string but got " + data['targetLink']);
        }
        // ensure the json data is a string
        if (data['targetProject'] && !(typeof data['targetProject'] === 'string' || data['targetProject'] instanceof String)) {
            throw new Error("Expected the field `targetProject` to be a primitive type in the JSON string but got " + data['targetProject']);
        }
        // ensure the json data is a string
        if (data['user'] && !(typeof data['user'] === 'string' || data['user'] instanceof String)) {
            throw new Error("Expected the field `user` to be a primitive type in the JSON string but got " + data['user']);
        }

        return true;
    }


}



/**
 * @member {module:model/ApiWarning} apiWarning
 */
Operation.prototype['apiWarning'] = undefined;

/**
 * @member {module:model/BackupContext} backupContext
 */
Operation.prototype['backupContext'] = undefined;

/**
 * The time this operation finished in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} endTime
 */
Operation.prototype['endTime'] = undefined;

/**
 * @member {module:model/OperationErrors} error
 */
Operation.prototype['error'] = undefined;

/**
 * @member {module:model/ExportContext} exportContext
 */
Operation.prototype['exportContext'] = undefined;

/**
 * @member {module:model/ImportContext} importContext
 */
Operation.prototype['importContext'] = undefined;

/**
 * The time this operation was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} insertTime
 */
Operation.prototype['insertTime'] = undefined;

/**
 * This is always `sql#operation`.
 * @member {String} kind
 */
Operation.prototype['kind'] = undefined;

/**
 * An identifier that uniquely identifies the operation. You can use this identifier to retrieve the Operations resource that has information about the operation.
 * @member {String} name
 */
Operation.prototype['name'] = undefined;

/**
 * The type of the operation. Valid values are: * `CREATE` * `DELETE` * `UPDATE` * `RESTART` * `IMPORT` * `EXPORT` * `BACKUP_VOLUME` * `RESTORE_VOLUME` * `CREATE_USER` * `DELETE_USER` * `CREATE_DATABASE` * `DELETE_DATABASE`
 * @member {module:model/Operation.OperationTypeEnum} operationType
 */
Operation.prototype['operationType'] = undefined;

/**
 * The URI of this resource.
 * @member {String} selfLink
 */
Operation.prototype['selfLink'] = undefined;

/**
 * The time this operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} startTime
 */
Operation.prototype['startTime'] = undefined;

/**
 * The status of an operation.
 * @member {module:model/Operation.StatusEnum} status
 */
Operation.prototype['status'] = undefined;

/**
 * Name of the database instance related to this operation.
 * @member {String} targetId
 */
Operation.prototype['targetId'] = undefined;

/**
 * @member {String} targetLink
 */
Operation.prototype['targetLink'] = undefined;

/**
 * The project ID of the target instance related to this operation.
 * @member {String} targetProject
 */
Operation.prototype['targetProject'] = undefined;

/**
 * The email address of the user who initiated this operation.
 * @member {String} user
 */
Operation.prototype['user'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
Operation['OperationTypeEnum'] = {

    /**
     * value: "SQL_OPERATION_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_OPERATION_TYPE_UNSPECIFIED": "SQL_OPERATION_TYPE_UNSPECIFIED",

    /**
     * value: "IMPORT"
     * @const
     */
    "IMPORT": "IMPORT",

    /**
     * value: "EXPORT"
     * @const
     */
    "EXPORT": "EXPORT",

    /**
     * value: "CREATE"
     * @const
     */
    "CREATE": "CREATE",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "RESTART"
     * @const
     */
    "RESTART": "RESTART",

    /**
     * value: "BACKUP"
     * @const
     */
    "BACKUP": "BACKUP",

    /**
     * value: "SNAPSHOT"
     * @const
     */
    "SNAPSHOT": "SNAPSHOT",

    /**
     * value: "BACKUP_VOLUME"
     * @const
     */
    "BACKUP_VOLUME": "BACKUP_VOLUME",

    /**
     * value: "DELETE_VOLUME"
     * @const
     */
    "DELETE_VOLUME": "DELETE_VOLUME",

    /**
     * value: "RESTORE_VOLUME"
     * @const
     */
    "RESTORE_VOLUME": "RESTORE_VOLUME",

    /**
     * value: "INJECT_USER"
     * @const
     */
    "INJECT_USER": "INJECT_USER",

    /**
     * value: "CLONE"
     * @const
     */
    "CLONE": "CLONE",

    /**
     * value: "STOP_REPLICA"
     * @const
     */
    "STOP_REPLICA": "STOP_REPLICA",

    /**
     * value: "START_REPLICA"
     * @const
     */
    "START_REPLICA": "START_REPLICA",

    /**
     * value: "PROMOTE_REPLICA"
     * @const
     */
    "PROMOTE_REPLICA": "PROMOTE_REPLICA",

    /**
     * value: "CREATE_REPLICA"
     * @const
     */
    "CREATE_REPLICA": "CREATE_REPLICA",

    /**
     * value: "CREATE_USER"
     * @const
     */
    "CREATE_USER": "CREATE_USER",

    /**
     * value: "DELETE_USER"
     * @const
     */
    "DELETE_USER": "DELETE_USER",

    /**
     * value: "UPDATE_USER"
     * @const
     */
    "UPDATE_USER": "UPDATE_USER",

    /**
     * value: "CREATE_DATABASE"
     * @const
     */
    "CREATE_DATABASE": "CREATE_DATABASE",

    /**
     * value: "DELETE_DATABASE"
     * @const
     */
    "DELETE_DATABASE": "DELETE_DATABASE",

    /**
     * value: "UPDATE_DATABASE"
     * @const
     */
    "UPDATE_DATABASE": "UPDATE_DATABASE",

    /**
     * value: "FAILOVER"
     * @const
     */
    "FAILOVER": "FAILOVER",

    /**
     * value: "DELETE_BACKUP"
     * @const
     */
    "DELETE_BACKUP": "DELETE_BACKUP",

    /**
     * value: "RECREATE_REPLICA"
     * @const
     */
    "RECREATE_REPLICA": "RECREATE_REPLICA",

    /**
     * value: "TRUNCATE_LOG"
     * @const
     */
    "TRUNCATE_LOG": "TRUNCATE_LOG",

    /**
     * value: "DEMOTE_MASTER"
     * @const
     */
    "DEMOTE_MASTER": "DEMOTE_MASTER",

    /**
     * value: "MAINTENANCE"
     * @const
     */
    "MAINTENANCE": "MAINTENANCE",

    /**
     * value: "ENABLE_PRIVATE_IP"
     * @const
     */
    "ENABLE_PRIVATE_IP": "ENABLE_PRIVATE_IP",

    /**
     * value: "DEFER_MAINTENANCE"
     * @const
     */
    "DEFER_MAINTENANCE": "DEFER_MAINTENANCE",

    /**
     * value: "CREATE_CLONE"
     * @const
     */
    "CREATE_CLONE": "CREATE_CLONE",

    /**
     * value: "RESCHEDULE_MAINTENANCE"
     * @const
     */
    "RESCHEDULE_MAINTENANCE": "RESCHEDULE_MAINTENANCE",

    /**
     * value: "START_EXTERNAL_SYNC"
     * @const
     */
    "START_EXTERNAL_SYNC": "START_EXTERNAL_SYNC",

    /**
     * value: "LOG_CLEANUP"
     * @const
     */
    "LOG_CLEANUP": "LOG_CLEANUP",

    /**
     * value: "AUTO_RESTART"
     * @const
     */
    "AUTO_RESTART": "AUTO_RESTART",

    /**
     * value: "REENCRYPT"
     * @const
     */
    "REENCRYPT": "REENCRYPT",

    /**
     * value: "SWITCHOVER"
     * @const
     */
    "SWITCHOVER": "SWITCHOVER"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Operation['StatusEnum'] = {

    /**
     * value: "SQL_OPERATION_STATUS_UNSPECIFIED"
     * @const
     */
    "SQL_OPERATION_STATUS_UNSPECIFIED": "SQL_OPERATION_STATUS_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "DONE"
     * @const
     */
    "DONE": "DONE"
};



export default Operation;

