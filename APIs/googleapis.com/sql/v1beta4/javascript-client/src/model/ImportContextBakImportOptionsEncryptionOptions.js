/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportContextBakImportOptionsEncryptionOptions model module.
 * @module model/ImportContextBakImportOptionsEncryptionOptions
 * @version v1beta4
 */
class ImportContextBakImportOptionsEncryptionOptions {
    /**
     * Constructs a new <code>ImportContextBakImportOptionsEncryptionOptions</code>.
     * @alias module:model/ImportContextBakImportOptionsEncryptionOptions
     */
    constructor() { 
        
        ImportContextBakImportOptionsEncryptionOptions.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImportContextBakImportOptionsEncryptionOptions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportContextBakImportOptionsEncryptionOptions} obj Optional instance to populate.
     * @return {module:model/ImportContextBakImportOptionsEncryptionOptions} The populated <code>ImportContextBakImportOptionsEncryptionOptions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportContextBakImportOptionsEncryptionOptions();

            if (data.hasOwnProperty('certPath')) {
                obj['certPath'] = ApiClient.convertToType(data['certPath'], 'String');
            }
            if (data.hasOwnProperty('pvkPassword')) {
                obj['pvkPassword'] = ApiClient.convertToType(data['pvkPassword'], 'String');
            }
            if (data.hasOwnProperty('pvkPath')) {
                obj['pvkPath'] = ApiClient.convertToType(data['pvkPath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportContextBakImportOptionsEncryptionOptions</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportContextBakImportOptionsEncryptionOptions</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certPath'] && !(typeof data['certPath'] === 'string' || data['certPath'] instanceof String)) {
            throw new Error("Expected the field `certPath` to be a primitive type in the JSON string but got " + data['certPath']);
        }
        // ensure the json data is a string
        if (data['pvkPassword'] && !(typeof data['pvkPassword'] === 'string' || data['pvkPassword'] instanceof String)) {
            throw new Error("Expected the field `pvkPassword` to be a primitive type in the JSON string but got " + data['pvkPassword']);
        }
        // ensure the json data is a string
        if (data['pvkPath'] && !(typeof data['pvkPath'] === 'string' || data['pvkPath'] instanceof String)) {
            throw new Error("Expected the field `pvkPath` to be a primitive type in the JSON string but got " + data['pvkPath']);
        }

        return true;
    }


}



/**
 * Path to the Certificate (.cer) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.
 * @member {String} certPath
 */
ImportContextBakImportOptionsEncryptionOptions.prototype['certPath'] = undefined;

/**
 * Password that encrypts the private key
 * @member {String} pvkPassword
 */
ImportContextBakImportOptionsEncryptionOptions.prototype['pvkPassword'] = undefined;

/**
 * Path to the Certificate Private Key (.pvk) in Cloud Storage, in the form `gs://bucketName/fileName`. The instance must have write permissions to the bucket and read access to the file.
 * @member {String} pvkPath
 */
ImportContextBakImportOptionsEncryptionOptions.prototype['pvkPath'] = undefined;






export default ImportContextBakImportOptionsEncryptionOptions;

