/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IpMapping model module.
 * @module model/IpMapping
 * @version v1beta4
 */
class IpMapping {
    /**
     * Constructs a new <code>IpMapping</code>.
     * Database instance IP mapping
     * @alias module:model/IpMapping
     */
    constructor() { 
        
        IpMapping.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IpMapping</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IpMapping} obj Optional instance to populate.
     * @return {module:model/IpMapping} The populated <code>IpMapping</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IpMapping();

            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('timeToRetire')) {
                obj['timeToRetire'] = ApiClient.convertToType(data['timeToRetire'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IpMapping</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IpMapping</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['timeToRetire'] && !(typeof data['timeToRetire'] === 'string' || data['timeToRetire'] instanceof String)) {
            throw new Error("Expected the field `timeToRetire` to be a primitive type in the JSON string but got " + data['timeToRetire']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The IP address assigned.
 * @member {String} ipAddress
 */
IpMapping.prototype['ipAddress'] = undefined;

/**
 * The due time for this IP to be retired in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`. This field is only available when the IP is scheduled to be retired.
 * @member {String} timeToRetire
 */
IpMapping.prototype['timeToRetire'] = undefined;

/**
 * The type of this IP address. A `PRIMARY` address is a public address that can accept incoming connections. A `PRIVATE` address is a private address that can accept incoming connections. An `OUTGOING` address is the source address of connections originating from the instance, if supported.
 * @member {module:model/IpMapping.TypeEnum} type
 */
IpMapping.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
IpMapping['TypeEnum'] = {

    /**
     * value: "SQL_IP_ADDRESS_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_IP_ADDRESS_TYPE_UNSPECIFIED": "SQL_IP_ADDRESS_TYPE_UNSPECIFIED",

    /**
     * value: "PRIMARY"
     * @const
     */
    "PRIMARY": "PRIMARY",

    /**
     * value: "OUTGOING"
     * @const
     */
    "OUTGOING": "OUTGOING",

    /**
     * value: "PRIVATE"
     * @const
     */
    "PRIVATE": "PRIVATE",

    /**
     * value: "MIGRATED_1ST_GEN"
     * @const
     */
    "MIGRATED_1ST_GEN": "MIGRATED_1ST_GEN"
};



export default IpMapping;

