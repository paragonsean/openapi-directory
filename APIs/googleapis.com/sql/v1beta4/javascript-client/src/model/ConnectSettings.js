/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IpMapping from './IpMapping';
import SslCert from './SslCert';

/**
 * The ConnectSettings model module.
 * @module model/ConnectSettings
 * @version v1beta4
 */
class ConnectSettings {
    /**
     * Constructs a new <code>ConnectSettings</code>.
     * Connect settings retrieval response.
     * @alias module:model/ConnectSettings
     */
    constructor() { 
        
        ConnectSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConnectSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConnectSettings} obj Optional instance to populate.
     * @return {module:model/ConnectSettings} The populated <code>ConnectSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConnectSettings();

            if (data.hasOwnProperty('backendType')) {
                obj['backendType'] = ApiClient.convertToType(data['backendType'], 'String');
            }
            if (data.hasOwnProperty('databaseVersion')) {
                obj['databaseVersion'] = ApiClient.convertToType(data['databaseVersion'], 'String');
            }
            if (data.hasOwnProperty('dnsName')) {
                obj['dnsName'] = ApiClient.convertToType(data['dnsName'], 'String');
            }
            if (data.hasOwnProperty('ipAddresses')) {
                obj['ipAddresses'] = ApiClient.convertToType(data['ipAddresses'], [IpMapping]);
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('pscEnabled')) {
                obj['pscEnabled'] = ApiClient.convertToType(data['pscEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('serverCaCert')) {
                obj['serverCaCert'] = SslCert.constructFromObject(data['serverCaCert']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConnectSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConnectSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backendType'] && !(typeof data['backendType'] === 'string' || data['backendType'] instanceof String)) {
            throw new Error("Expected the field `backendType` to be a primitive type in the JSON string but got " + data['backendType']);
        }
        // ensure the json data is a string
        if (data['databaseVersion'] && !(typeof data['databaseVersion'] === 'string' || data['databaseVersion'] instanceof String)) {
            throw new Error("Expected the field `databaseVersion` to be a primitive type in the JSON string but got " + data['databaseVersion']);
        }
        // ensure the json data is a string
        if (data['dnsName'] && !(typeof data['dnsName'] === 'string' || data['dnsName'] instanceof String)) {
            throw new Error("Expected the field `dnsName` to be a primitive type in the JSON string but got " + data['dnsName']);
        }
        if (data['ipAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ipAddresses'])) {
                throw new Error("Expected the field `ipAddresses` to be an array in the JSON data but got " + data['ipAddresses']);
            }
            // validate the optional field `ipAddresses` (array)
            for (const item of data['ipAddresses']) {
                IpMapping.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // validate the optional field `serverCaCert`
        if (data['serverCaCert']) { // data not null
          SslCert.validateJSON(data['serverCaCert']);
        }

        return true;
    }


}



/**
 * `SECOND_GEN`: Cloud SQL database instance. `EXTERNAL`: A database server that is not managed by Google. This property is read-only; use the `tier` property in the `settings` object to determine the database type.
 * @member {module:model/ConnectSettings.BackendTypeEnum} backendType
 */
ConnectSettings.prototype['backendType'] = undefined;

/**
 * The database engine type and version. The `databaseVersion` field cannot be changed after instance creation. MySQL instances: `MYSQL_8_0`, `MYSQL_5_7` (default), or `MYSQL_5_6`. PostgreSQL instances: `POSTGRES_9_6`, `POSTGRES_10`, `POSTGRES_11` or `POSTGRES_12` (default), `POSTGRES_13`, or `POSTGRES_14`. SQL Server instances: `SQLSERVER_2017_STANDARD` (default), `SQLSERVER_2017_ENTERPRISE`, `SQLSERVER_2017_EXPRESS`, `SQLSERVER_2017_WEB`, `SQLSERVER_2019_STANDARD`, `SQLSERVER_2019_ENTERPRISE`, `SQLSERVER_2019_EXPRESS`, or `SQLSERVER_2019_WEB`.
 * @member {module:model/ConnectSettings.DatabaseVersionEnum} databaseVersion
 */
ConnectSettings.prototype['databaseVersion'] = undefined;

/**
 * The dns name of the instance.
 * @member {String} dnsName
 */
ConnectSettings.prototype['dnsName'] = undefined;

/**
 * The assigned IP addresses for the instance.
 * @member {Array.<module:model/IpMapping>} ipAddresses
 */
ConnectSettings.prototype['ipAddresses'] = undefined;

/**
 * This is always `sql#connectSettings`.
 * @member {String} kind
 */
ConnectSettings.prototype['kind'] = undefined;

/**
 * Whether PSC connectivity is enabled for this instance.
 * @member {Boolean} pscEnabled
 */
ConnectSettings.prototype['pscEnabled'] = undefined;

/**
 * The cloud region for the instance. e.g. `us-central1`, `europe-west1`. The region cannot be changed after instance creation.
 * @member {String} region
 */
ConnectSettings.prototype['region'] = undefined;

/**
 * @member {module:model/SslCert} serverCaCert
 */
ConnectSettings.prototype['serverCaCert'] = undefined;





/**
 * Allowed values for the <code>backendType</code> property.
 * @enum {String}
 * @readonly
 */
ConnectSettings['BackendTypeEnum'] = {

    /**
     * value: "SQL_BACKEND_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_BACKEND_TYPE_UNSPECIFIED": "SQL_BACKEND_TYPE_UNSPECIFIED",

    /**
     * value: "FIRST_GEN"
     * @const
     */
    "FIRST_GEN": "FIRST_GEN",

    /**
     * value: "SECOND_GEN"
     * @const
     */
    "SECOND_GEN": "SECOND_GEN",

    /**
     * value: "EXTERNAL"
     * @const
     */
    "EXTERNAL": "EXTERNAL"
};


/**
 * Allowed values for the <code>databaseVersion</code> property.
 * @enum {String}
 * @readonly
 */
ConnectSettings['DatabaseVersionEnum'] = {

    /**
     * value: "SQL_DATABASE_VERSION_UNSPECIFIED"
     * @const
     */
    "SQL_DATABASE_VERSION_UNSPECIFIED": "SQL_DATABASE_VERSION_UNSPECIFIED",

    /**
     * value: "MYSQL_5_1"
     * @const
     */
    "MYSQL_5_1": "MYSQL_5_1",

    /**
     * value: "MYSQL_5_5"
     * @const
     */
    "MYSQL_5_5": "MYSQL_5_5",

    /**
     * value: "MYSQL_5_6"
     * @const
     */
    "MYSQL_5_6": "MYSQL_5_6",

    /**
     * value: "MYSQL_5_7"
     * @const
     */
    "MYSQL_5_7": "MYSQL_5_7",

    /**
     * value: "SQLSERVER_2017_STANDARD"
     * @const
     */
    "SQLSERVER_2017_STANDARD": "SQLSERVER_2017_STANDARD",

    /**
     * value: "SQLSERVER_2017_ENTERPRISE"
     * @const
     */
    "SQLSERVER_2017_ENTERPRISE": "SQLSERVER_2017_ENTERPRISE",

    /**
     * value: "SQLSERVER_2017_EXPRESS"
     * @const
     */
    "SQLSERVER_2017_EXPRESS": "SQLSERVER_2017_EXPRESS",

    /**
     * value: "SQLSERVER_2017_WEB"
     * @const
     */
    "SQLSERVER_2017_WEB": "SQLSERVER_2017_WEB",

    /**
     * value: "POSTGRES_9_6"
     * @const
     */
    "POSTGRES_9_6": "POSTGRES_9_6",

    /**
     * value: "POSTGRES_10"
     * @const
     */
    "POSTGRES_10": "POSTGRES_10",

    /**
     * value: "POSTGRES_11"
     * @const
     */
    "POSTGRES_11": "POSTGRES_11",

    /**
     * value: "POSTGRES_12"
     * @const
     */
    "POSTGRES_12": "POSTGRES_12",

    /**
     * value: "POSTGRES_13"
     * @const
     */
    "POSTGRES_13": "POSTGRES_13",

    /**
     * value: "POSTGRES_14"
     * @const
     */
    "POSTGRES_14": "POSTGRES_14",

    /**
     * value: "POSTGRES_15"
     * @const
     */
    "POSTGRES_15": "POSTGRES_15",

    /**
     * value: "MYSQL_8_0"
     * @const
     */
    "MYSQL_8_0": "MYSQL_8_0",

    /**
     * value: "MYSQL_8_0_18"
     * @const
     */
    "MYSQL_8_0_18": "MYSQL_8_0_18",

    /**
     * value: "MYSQL_8_0_26"
     * @const
     */
    "MYSQL_8_0_26": "MYSQL_8_0_26",

    /**
     * value: "MYSQL_8_0_27"
     * @const
     */
    "MYSQL_8_0_27": "MYSQL_8_0_27",

    /**
     * value: "MYSQL_8_0_28"
     * @const
     */
    "MYSQL_8_0_28": "MYSQL_8_0_28",

    /**
     * value: "MYSQL_8_0_29"
     * @const
     */
    "MYSQL_8_0_29": "MYSQL_8_0_29",

    /**
     * value: "MYSQL_8_0_30"
     * @const
     */
    "MYSQL_8_0_30": "MYSQL_8_0_30",

    /**
     * value: "MYSQL_8_0_31"
     * @const
     */
    "MYSQL_8_0_31": "MYSQL_8_0_31",

    /**
     * value: "MYSQL_8_0_32"
     * @const
     */
    "MYSQL_8_0_32": "MYSQL_8_0_32",

    /**
     * value: "MYSQL_8_0_33"
     * @const
     */
    "MYSQL_8_0_33": "MYSQL_8_0_33",

    /**
     * value: "MYSQL_8_0_34"
     * @const
     */
    "MYSQL_8_0_34": "MYSQL_8_0_34",

    /**
     * value: "MYSQL_8_0_35"
     * @const
     */
    "MYSQL_8_0_35": "MYSQL_8_0_35",

    /**
     * value: "MYSQL_8_0_36"
     * @const
     */
    "MYSQL_8_0_36": "MYSQL_8_0_36",

    /**
     * value: "SQLSERVER_2019_STANDARD"
     * @const
     */
    "SQLSERVER_2019_STANDARD": "SQLSERVER_2019_STANDARD",

    /**
     * value: "SQLSERVER_2019_ENTERPRISE"
     * @const
     */
    "SQLSERVER_2019_ENTERPRISE": "SQLSERVER_2019_ENTERPRISE",

    /**
     * value: "SQLSERVER_2019_EXPRESS"
     * @const
     */
    "SQLSERVER_2019_EXPRESS": "SQLSERVER_2019_EXPRESS",

    /**
     * value: "SQLSERVER_2019_WEB"
     * @const
     */
    "SQLSERVER_2019_WEB": "SQLSERVER_2019_WEB",

    /**
     * value: "SQLSERVER_2022_STANDARD"
     * @const
     */
    "SQLSERVER_2022_STANDARD": "SQLSERVER_2022_STANDARD",

    /**
     * value: "SQLSERVER_2022_ENTERPRISE"
     * @const
     */
    "SQLSERVER_2022_ENTERPRISE": "SQLSERVER_2022_ENTERPRISE",

    /**
     * value: "SQLSERVER_2022_EXPRESS"
     * @const
     */
    "SQLSERVER_2022_EXPRESS": "SQLSERVER_2022_EXPRESS",

    /**
     * value: "SQLSERVER_2022_WEB"
     * @const
     */
    "SQLSERVER_2022_WEB": "SQLSERVER_2022_WEB"
};



export default ConnectSettings;

