/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PasswordStatus from './PasswordStatus';

/**
 * The UserPasswordValidationPolicy model module.
 * @module model/UserPasswordValidationPolicy
 * @version v1beta4
 */
class UserPasswordValidationPolicy {
    /**
     * Constructs a new <code>UserPasswordValidationPolicy</code>.
     * User level password validation policy.
     * @alias module:model/UserPasswordValidationPolicy
     */
    constructor() { 
        
        UserPasswordValidationPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserPasswordValidationPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserPasswordValidationPolicy} obj Optional instance to populate.
     * @return {module:model/UserPasswordValidationPolicy} The populated <code>UserPasswordValidationPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPasswordValidationPolicy();

            if (data.hasOwnProperty('allowedFailedAttempts')) {
                obj['allowedFailedAttempts'] = ApiClient.convertToType(data['allowedFailedAttempts'], 'Number');
            }
            if (data.hasOwnProperty('enableFailedAttemptsCheck')) {
                obj['enableFailedAttemptsCheck'] = ApiClient.convertToType(data['enableFailedAttemptsCheck'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePasswordVerification')) {
                obj['enablePasswordVerification'] = ApiClient.convertToType(data['enablePasswordVerification'], 'Boolean');
            }
            if (data.hasOwnProperty('passwordExpirationDuration')) {
                obj['passwordExpirationDuration'] = ApiClient.convertToType(data['passwordExpirationDuration'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = PasswordStatus.constructFromObject(data['status']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserPasswordValidationPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPasswordValidationPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['passwordExpirationDuration'] && !(typeof data['passwordExpirationDuration'] === 'string' || data['passwordExpirationDuration'] instanceof String)) {
            throw new Error("Expected the field `passwordExpirationDuration` to be a primitive type in the JSON string but got " + data['passwordExpirationDuration']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          PasswordStatus.validateJSON(data['status']);
        }

        return true;
    }


}



/**
 * Number of failed login attempts allowed before user get locked.
 * @member {Number} allowedFailedAttempts
 */
UserPasswordValidationPolicy.prototype['allowedFailedAttempts'] = undefined;

/**
 * If true, failed login attempts check will be enabled.
 * @member {Boolean} enableFailedAttemptsCheck
 */
UserPasswordValidationPolicy.prototype['enableFailedAttemptsCheck'] = undefined;

/**
 * If true, the user must specify the current password before changing the password. This flag is supported only for MySQL.
 * @member {Boolean} enablePasswordVerification
 */
UserPasswordValidationPolicy.prototype['enablePasswordVerification'] = undefined;

/**
 * Expiration duration after password is updated.
 * @member {String} passwordExpirationDuration
 */
UserPasswordValidationPolicy.prototype['passwordExpirationDuration'] = undefined;

/**
 * @member {module:model/PasswordStatus} status
 */
UserPasswordValidationPolicy.prototype['status'] = undefined;






export default UserPasswordValidationPolicy;

