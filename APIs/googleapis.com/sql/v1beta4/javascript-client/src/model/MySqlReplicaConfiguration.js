/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MySqlReplicaConfiguration model module.
 * @module model/MySqlReplicaConfiguration
 * @version v1beta4
 */
class MySqlReplicaConfiguration {
    /**
     * Constructs a new <code>MySqlReplicaConfiguration</code>.
     * Read-replica configuration specific to MySQL databases.
     * @alias module:model/MySqlReplicaConfiguration
     */
    constructor() { 
        
        MySqlReplicaConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MySqlReplicaConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MySqlReplicaConfiguration} obj Optional instance to populate.
     * @return {module:model/MySqlReplicaConfiguration} The populated <code>MySqlReplicaConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MySqlReplicaConfiguration();

            if (data.hasOwnProperty('caCertificate')) {
                obj['caCertificate'] = ApiClient.convertToType(data['caCertificate'], 'String');
            }
            if (data.hasOwnProperty('clientCertificate')) {
                obj['clientCertificate'] = ApiClient.convertToType(data['clientCertificate'], 'String');
            }
            if (data.hasOwnProperty('clientKey')) {
                obj['clientKey'] = ApiClient.convertToType(data['clientKey'], 'String');
            }
            if (data.hasOwnProperty('connectRetryInterval')) {
                obj['connectRetryInterval'] = ApiClient.convertToType(data['connectRetryInterval'], 'Number');
            }
            if (data.hasOwnProperty('dumpFilePath')) {
                obj['dumpFilePath'] = ApiClient.convertToType(data['dumpFilePath'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('masterHeartbeatPeriod')) {
                obj['masterHeartbeatPeriod'] = ApiClient.convertToType(data['masterHeartbeatPeriod'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('sslCipher')) {
                obj['sslCipher'] = ApiClient.convertToType(data['sslCipher'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('verifyServerCertificate')) {
                obj['verifyServerCertificate'] = ApiClient.convertToType(data['verifyServerCertificate'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MySqlReplicaConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MySqlReplicaConfiguration</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['caCertificate'] && !(typeof data['caCertificate'] === 'string' || data['caCertificate'] instanceof String)) {
            throw new Error("Expected the field `caCertificate` to be a primitive type in the JSON string but got " + data['caCertificate']);
        }
        // ensure the json data is a string
        if (data['clientCertificate'] && !(typeof data['clientCertificate'] === 'string' || data['clientCertificate'] instanceof String)) {
            throw new Error("Expected the field `clientCertificate` to be a primitive type in the JSON string but got " + data['clientCertificate']);
        }
        // ensure the json data is a string
        if (data['clientKey'] && !(typeof data['clientKey'] === 'string' || data['clientKey'] instanceof String)) {
            throw new Error("Expected the field `clientKey` to be a primitive type in the JSON string but got " + data['clientKey']);
        }
        // ensure the json data is a string
        if (data['dumpFilePath'] && !(typeof data['dumpFilePath'] === 'string' || data['dumpFilePath'] instanceof String)) {
            throw new Error("Expected the field `dumpFilePath` to be a primitive type in the JSON string but got " + data['dumpFilePath']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['masterHeartbeatPeriod'] && !(typeof data['masterHeartbeatPeriod'] === 'string' || data['masterHeartbeatPeriod'] instanceof String)) {
            throw new Error("Expected the field `masterHeartbeatPeriod` to be a primitive type in the JSON string but got " + data['masterHeartbeatPeriod']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['sslCipher'] && !(typeof data['sslCipher'] === 'string' || data['sslCipher'] instanceof String)) {
            throw new Error("Expected the field `sslCipher` to be a primitive type in the JSON string but got " + data['sslCipher']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * PEM representation of the trusted CA's x509 certificate.
 * @member {String} caCertificate
 */
MySqlReplicaConfiguration.prototype['caCertificate'] = undefined;

/**
 * PEM representation of the replica's x509 certificate.
 * @member {String} clientCertificate
 */
MySqlReplicaConfiguration.prototype['clientCertificate'] = undefined;

/**
 * PEM representation of the replica's private key. The corresponsing public key is encoded in the client's certificate.
 * @member {String} clientKey
 */
MySqlReplicaConfiguration.prototype['clientKey'] = undefined;

/**
 * Seconds to wait between connect retries. MySQL's default is 60 seconds.
 * @member {Number} connectRetryInterval
 */
MySqlReplicaConfiguration.prototype['connectRetryInterval'] = undefined;

/**
 * Path to a SQL dump file in Google Cloud Storage from which the replica instance is to be created. The URI is in the form gs://bucketName/fileName. Compressed gzip files (.gz) are also supported. Dumps have the binlog co-ordinates from which replication begins. This can be accomplished by setting --master-data to 1 when using mysqldump.
 * @member {String} dumpFilePath
 */
MySqlReplicaConfiguration.prototype['dumpFilePath'] = undefined;

/**
 * This is always `sql#mysqlReplicaConfiguration`.
 * @member {String} kind
 */
MySqlReplicaConfiguration.prototype['kind'] = undefined;

/**
 * Interval in milliseconds between replication heartbeats.
 * @member {String} masterHeartbeatPeriod
 */
MySqlReplicaConfiguration.prototype['masterHeartbeatPeriod'] = undefined;

/**
 * The password for the replication connection.
 * @member {String} password
 */
MySqlReplicaConfiguration.prototype['password'] = undefined;

/**
 * A list of permissible ciphers to use for SSL encryption.
 * @member {String} sslCipher
 */
MySqlReplicaConfiguration.prototype['sslCipher'] = undefined;

/**
 * The username for the replication connection.
 * @member {String} username
 */
MySqlReplicaConfiguration.prototype['username'] = undefined;

/**
 * Whether or not to check the primary instance's Common Name value in the certificate that it sends during the SSL handshake.
 * @member {Boolean} verifyServerCertificate
 */
MySqlReplicaConfiguration.prototype['verifyServerCertificate'] = undefined;






export default MySqlReplicaConfiguration;

