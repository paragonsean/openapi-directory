/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DiskEncryptionConfiguration from './DiskEncryptionConfiguration';
import DiskEncryptionStatus from './DiskEncryptionStatus';
import OperationError from './OperationError';

/**
 * The BackupRun model module.
 * @module model/BackupRun
 * @version v1beta4
 */
class BackupRun {
    /**
     * Constructs a new <code>BackupRun</code>.
     * A BackupRun resource.
     * @alias module:model/BackupRun
     */
    constructor() { 
        
        BackupRun.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BackupRun</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackupRun} obj Optional instance to populate.
     * @return {module:model/BackupRun} The populated <code>BackupRun</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackupRun();

            if (data.hasOwnProperty('backupKind')) {
                obj['backupKind'] = ApiClient.convertToType(data['backupKind'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('diskEncryptionConfiguration')) {
                obj['diskEncryptionConfiguration'] = DiskEncryptionConfiguration.constructFromObject(data['diskEncryptionConfiguration']);
            }
            if (data.hasOwnProperty('diskEncryptionStatus')) {
                obj['diskEncryptionStatus'] = DiskEncryptionStatus.constructFromObject(data['diskEncryptionStatus']);
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('enqueuedTime')) {
                obj['enqueuedTime'] = ApiClient.convertToType(data['enqueuedTime'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = OperationError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('selfLink')) {
                obj['selfLink'] = ApiClient.convertToType(data['selfLink'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeZone')) {
                obj['timeZone'] = ApiClient.convertToType(data['timeZone'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('windowStartTime')) {
                obj['windowStartTime'] = ApiClient.convertToType(data['windowStartTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackupRun</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackupRun</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['backupKind'] && !(typeof data['backupKind'] === 'string' || data['backupKind'] instanceof String)) {
            throw new Error("Expected the field `backupKind` to be a primitive type in the JSON string but got " + data['backupKind']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `diskEncryptionConfiguration`
        if (data['diskEncryptionConfiguration']) { // data not null
          DiskEncryptionConfiguration.validateJSON(data['diskEncryptionConfiguration']);
        }
        // validate the optional field `diskEncryptionStatus`
        if (data['diskEncryptionStatus']) { // data not null
          DiskEncryptionStatus.validateJSON(data['diskEncryptionStatus']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['enqueuedTime'] && !(typeof data['enqueuedTime'] === 'string' || data['enqueuedTime'] instanceof String)) {
            throw new Error("Expected the field `enqueuedTime` to be a primitive type in the JSON string but got " + data['enqueuedTime']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          OperationError.validateJSON(data['error']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['selfLink'] && !(typeof data['selfLink'] === 'string' || data['selfLink'] instanceof String)) {
            throw new Error("Expected the field `selfLink` to be a primitive type in the JSON string but got " + data['selfLink']);
        }
        // ensure the json data is a string
        if (data['startTime'] && !(typeof data['startTime'] === 'string' || data['startTime'] instanceof String)) {
            throw new Error("Expected the field `startTime` to be a primitive type in the JSON string but got " + data['startTime']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['timeZone'] && !(typeof data['timeZone'] === 'string' || data['timeZone'] instanceof String)) {
            throw new Error("Expected the field `timeZone` to be a primitive type in the JSON string but got " + data['timeZone']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['windowStartTime'] && !(typeof data['windowStartTime'] === 'string' || data['windowStartTime'] instanceof String)) {
            throw new Error("Expected the field `windowStartTime` to be a primitive type in the JSON string but got " + data['windowStartTime']);
        }

        return true;
    }


}



/**
 * Specifies the kind of backup, PHYSICAL or DEFAULT_SNAPSHOT.
 * @member {module:model/BackupRun.BackupKindEnum} backupKind
 */
BackupRun.prototype['backupKind'] = undefined;

/**
 * The description of this run, only applicable to on-demand backups.
 * @member {String} description
 */
BackupRun.prototype['description'] = undefined;

/**
 * @member {module:model/DiskEncryptionConfiguration} diskEncryptionConfiguration
 */
BackupRun.prototype['diskEncryptionConfiguration'] = undefined;

/**
 * @member {module:model/DiskEncryptionStatus} diskEncryptionStatus
 */
BackupRun.prototype['diskEncryptionStatus'] = undefined;

/**
 * The time the backup operation completed in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} endTime
 */
BackupRun.prototype['endTime'] = undefined;

/**
 * The time the run was enqueued in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} enqueuedTime
 */
BackupRun.prototype['enqueuedTime'] = undefined;

/**
 * @member {module:model/OperationError} error
 */
BackupRun.prototype['error'] = undefined;

/**
 * The identifier for this backup run. Unique only for a specific Cloud SQL instance.
 * @member {String} id
 */
BackupRun.prototype['id'] = undefined;

/**
 * Name of the database instance.
 * @member {String} instance
 */
BackupRun.prototype['instance'] = undefined;

/**
 * This is always `sql#backupRun`.
 * @member {String} kind
 */
BackupRun.prototype['kind'] = undefined;

/**
 * Location of the backups.
 * @member {String} location
 */
BackupRun.prototype['location'] = undefined;

/**
 * The URI of this resource.
 * @member {String} selfLink
 */
BackupRun.prototype['selfLink'] = undefined;

/**
 * The time the backup operation actually started in UTC timezone in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} startTime
 */
BackupRun.prototype['startTime'] = undefined;

/**
 * The status of this run.
 * @member {module:model/BackupRun.StatusEnum} status
 */
BackupRun.prototype['status'] = undefined;

/**
 * Backup time zone to prevent restores to an instance with a different time zone. Now relevant only for SQL Server.
 * @member {String} timeZone
 */
BackupRun.prototype['timeZone'] = undefined;

/**
 * The type of this run; can be either \"AUTOMATED\" or \"ON_DEMAND\" or \"FINAL\". This field defaults to \"ON_DEMAND\" and is ignored, when specified for insert requests.
 * @member {module:model/BackupRun.TypeEnum} type
 */
BackupRun.prototype['type'] = undefined;

/**
 * The start time of the backup window during which this the backup was attempted in [RFC 3339](https://tools.ietf.org/html/rfc3339) format, for example `2012-11-15T16:19:00.094Z`.
 * @member {String} windowStartTime
 */
BackupRun.prototype['windowStartTime'] = undefined;





/**
 * Allowed values for the <code>backupKind</code> property.
 * @enum {String}
 * @readonly
 */
BackupRun['BackupKindEnum'] = {

    /**
     * value: "SQL_BACKUP_KIND_UNSPECIFIED"
     * @const
     */
    "SQL_BACKUP_KIND_UNSPECIFIED": "SQL_BACKUP_KIND_UNSPECIFIED",

    /**
     * value: "SNAPSHOT"
     * @const
     */
    "SNAPSHOT": "SNAPSHOT",

    /**
     * value: "PHYSICAL"
     * @const
     */
    "PHYSICAL": "PHYSICAL"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
BackupRun['StatusEnum'] = {

    /**
     * value: "SQL_BACKUP_RUN_STATUS_UNSPECIFIED"
     * @const
     */
    "SQL_BACKUP_RUN_STATUS_UNSPECIFIED": "SQL_BACKUP_RUN_STATUS_UNSPECIFIED",

    /**
     * value: "ENQUEUED"
     * @const
     */
    "ENQUEUED": "ENQUEUED",

    /**
     * value: "OVERDUE"
     * @const
     */
    "OVERDUE": "OVERDUE",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "SUCCESSFUL"
     * @const
     */
    "SUCCESSFUL": "SUCCESSFUL",

    /**
     * value: "SKIPPED"
     * @const
     */
    "SKIPPED": "SKIPPED",

    /**
     * value: "DELETION_PENDING"
     * @const
     */
    "DELETION_PENDING": "DELETION_PENDING",

    /**
     * value: "DELETION_FAILED"
     * @const
     */
    "DELETION_FAILED": "DELETION_FAILED",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BackupRun['TypeEnum'] = {

    /**
     * value: "SQL_BACKUP_RUN_TYPE_UNSPECIFIED"
     * @const
     */
    "SQL_BACKUP_RUN_TYPE_UNSPECIFIED": "SQL_BACKUP_RUN_TYPE_UNSPECIFIED",

    /**
     * value: "AUTOMATED"
     * @const
     */
    "AUTOMATED": "AUTOMATED",

    /**
     * value: "ON_DEMAND"
     * @const
     */
    "ON_DEMAND": "ON_DEMAND"
};



export default BackupRun;

