/**
 * Cloud SQL Admin API
 * API for Cloud SQL database instance management
 *
 * The version of the OpenAPI document: v1beta4
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SqlServerUserDetails from './SqlServerUserDetails';
import UserPasswordValidationPolicy from './UserPasswordValidationPolicy';

/**
 * The User model module.
 * @module model/User
 * @version v1beta4
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * A Cloud SQL user resource.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('dualPasswordType')) {
                obj['dualPasswordType'] = ApiClient.convertToType(data['dualPasswordType'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('host')) {
                obj['host'] = ApiClient.convertToType(data['host'], 'String');
            }
            if (data.hasOwnProperty('instance')) {
                obj['instance'] = ApiClient.convertToType(data['instance'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('passwordPolicy')) {
                obj['passwordPolicy'] = UserPasswordValidationPolicy.constructFromObject(data['passwordPolicy']);
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('sqlserverUserDetails')) {
                obj['sqlserverUserDetails'] = SqlServerUserDetails.constructFromObject(data['sqlserverUserDetails']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dualPasswordType'] && !(typeof data['dualPasswordType'] === 'string' || data['dualPasswordType'] instanceof String)) {
            throw new Error("Expected the field `dualPasswordType` to be a primitive type in the JSON string but got " + data['dualPasswordType']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['host'] && !(typeof data['host'] === 'string' || data['host'] instanceof String)) {
            throw new Error("Expected the field `host` to be a primitive type in the JSON string but got " + data['host']);
        }
        // ensure the json data is a string
        if (data['instance'] && !(typeof data['instance'] === 'string' || data['instance'] instanceof String)) {
            throw new Error("Expected the field `instance` to be a primitive type in the JSON string but got " + data['instance']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // validate the optional field `passwordPolicy`
        if (data['passwordPolicy']) { // data not null
          UserPasswordValidationPolicy.validateJSON(data['passwordPolicy']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // validate the optional field `sqlserverUserDetails`
        if (data['sqlserverUserDetails']) { // data not null
          SqlServerUserDetails.validateJSON(data['sqlserverUserDetails']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Dual password status for the user.
 * @member {module:model/User.DualPasswordTypeEnum} dualPasswordType
 */
User.prototype['dualPasswordType'] = undefined;

/**
 * This field is deprecated and will be removed from a future version of the API.
 * @member {String} etag
 */
User.prototype['etag'] = undefined;

/**
 * Optional. The host from which the user can connect. For `insert` operations, host defaults to an empty string. For `update` operations, host is specified as part of the request URL. The host name cannot be updated after insertion. For a MySQL instance, it's required; for a PostgreSQL or SQL Server instance, it's optional.
 * @member {String} host
 */
User.prototype['host'] = undefined;

/**
 * The name of the Cloud SQL instance. This does not include the project ID. Can be omitted for *update* because it is already specified on the URL.
 * @member {String} instance
 */
User.prototype['instance'] = undefined;

/**
 * This is always `sql#user`.
 * @member {String} kind
 */
User.prototype['kind'] = undefined;

/**
 * The name of the user in the Cloud SQL instance. Can be omitted for `update` because it is already specified in the URL.
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * The password for the user.
 * @member {String} password
 */
User.prototype['password'] = undefined;

/**
 * @member {module:model/UserPasswordValidationPolicy} passwordPolicy
 */
User.prototype['passwordPolicy'] = undefined;

/**
 * The project ID of the project containing the Cloud SQL database. The Google apps domain is prefixed if applicable. Can be omitted for *update* because it is already specified on the URL.
 * @member {String} project
 */
User.prototype['project'] = undefined;

/**
 * @member {module:model/SqlServerUserDetails} sqlserverUserDetails
 */
User.prototype['sqlserverUserDetails'] = undefined;

/**
 * The user type. It determines the method to authenticate the user during login. The default is the database's built-in user type.
 * @member {module:model/User.TypeEnum} type
 */
User.prototype['type'] = undefined;





/**
 * Allowed values for the <code>dualPasswordType</code> property.
 * @enum {String}
 * @readonly
 */
User['DualPasswordTypeEnum'] = {

    /**
     * value: "DUAL_PASSWORD_TYPE_UNSPECIFIED"
     * @const
     */
    "DUAL_PASSWORD_TYPE_UNSPECIFIED": "DUAL_PASSWORD_TYPE_UNSPECIFIED",

    /**
     * value: "NO_MODIFY_DUAL_PASSWORD"
     * @const
     */
    "NO_MODIFY_DUAL_PASSWORD": "NO_MODIFY_DUAL_PASSWORD",

    /**
     * value: "NO_DUAL_PASSWORD"
     * @const
     */
    "NO_DUAL_PASSWORD": "NO_DUAL_PASSWORD",

    /**
     * value: "DUAL_PASSWORD"
     * @const
     */
    "DUAL_PASSWORD": "DUAL_PASSWORD"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
User['TypeEnum'] = {

    /**
     * value: "BUILT_IN"
     * @const
     */
    "BUILT_IN": "BUILT_IN",

    /**
     * value: "CLOUD_IAM_USER"
     * @const
     */
    "CLOUD_IAM_USER": "CLOUD_IAM_USER",

    /**
     * value: "CLOUD_IAM_SERVICE_ACCOUNT"
     * @const
     */
    "CLOUD_IAM_SERVICE_ACCOUNT": "CLOUD_IAM_SERVICE_ACCOUNT",

    /**
     * value: "CLOUD_IAM_GROUP"
     * @const
     */
    "CLOUD_IAM_GROUP": "CLOUD_IAM_GROUP",

    /**
     * value: "CLOUD_IAM_GROUP_USER"
     * @const
     */
    "CLOUD_IAM_GROUP_USER": "CLOUD_IAM_GROUP_USER",

    /**
     * value: "CLOUD_IAM_GROUP_SERVICE_ACCOUNT"
     * @const
     */
    "CLOUD_IAM_GROUP_SERVICE_ACCOUNT": "CLOUD_IAM_GROUP_SERVICE_ACCOUNT"
};



export default User;

