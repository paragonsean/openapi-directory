# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_channel_v1_conditional_override import GoogleCloudChannelV1ConditionalOverride
from openapi_server.models.google_cloud_channel_v1_repricing_adjustment import GoogleCloudChannelV1RepricingAdjustment
from openapi_server.models.google_cloud_channel_v1_repricing_config_entitlement_granularity import GoogleCloudChannelV1RepricingConfigEntitlementGranularity
from openapi_server.models.google_type_date import GoogleTypeDate
from openapi_server import util


class GoogleCloudChannelV1RepricingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: GoogleCloudChannelV1RepricingAdjustment=None, channel_partner_granularity: object=None, conditional_overrides: List[GoogleCloudChannelV1ConditionalOverride]=None, effective_invoice_month: GoogleTypeDate=None, entitlement_granularity: GoogleCloudChannelV1RepricingConfigEntitlementGranularity=None, rebilling_basis: str=None):
        """GoogleCloudChannelV1RepricingConfig - a model defined in OpenAPI

        :param adjustment: The adjustment of this GoogleCloudChannelV1RepricingConfig.
        :param channel_partner_granularity: The channel_partner_granularity of this GoogleCloudChannelV1RepricingConfig.
        :param conditional_overrides: The conditional_overrides of this GoogleCloudChannelV1RepricingConfig.
        :param effective_invoice_month: The effective_invoice_month of this GoogleCloudChannelV1RepricingConfig.
        :param entitlement_granularity: The entitlement_granularity of this GoogleCloudChannelV1RepricingConfig.
        :param rebilling_basis: The rebilling_basis of this GoogleCloudChannelV1RepricingConfig.
        """
        self.openapi_types = {
            'adjustment': GoogleCloudChannelV1RepricingAdjustment,
            'channel_partner_granularity': object,
            'conditional_overrides': List[GoogleCloudChannelV1ConditionalOverride],
            'effective_invoice_month': GoogleTypeDate,
            'entitlement_granularity': GoogleCloudChannelV1RepricingConfigEntitlementGranularity,
            'rebilling_basis': str
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'channel_partner_granularity': 'channelPartnerGranularity',
            'conditional_overrides': 'conditionalOverrides',
            'effective_invoice_month': 'effectiveInvoiceMonth',
            'entitlement_granularity': 'entitlementGranularity',
            'rebilling_basis': 'rebillingBasis'
        }

        self._adjustment = adjustment
        self._channel_partner_granularity = channel_partner_granularity
        self._conditional_overrides = conditional_overrides
        self._effective_invoice_month = effective_invoice_month
        self._entitlement_granularity = entitlement_granularity
        self._rebilling_basis = rebilling_basis

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1RepricingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1RepricingConfig of this GoogleCloudChannelV1RepricingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this GoogleCloudChannelV1RepricingConfig.


        :return: The adjustment of this GoogleCloudChannelV1RepricingConfig.
        :rtype: GoogleCloudChannelV1RepricingAdjustment
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this GoogleCloudChannelV1RepricingConfig.


        :param adjustment: The adjustment of this GoogleCloudChannelV1RepricingConfig.
        :type adjustment: GoogleCloudChannelV1RepricingAdjustment
        """

        self._adjustment = adjustment

    @property
    def channel_partner_granularity(self):
        """Gets the channel_partner_granularity of this GoogleCloudChannelV1RepricingConfig.

        Applies the repricing configuration at the channel partner level. The channel partner value is derived from the resource name. Takes an empty json object. Deprecated: This is no longer supported. Use RepricingConfig.EntitlementGranularity instead.

        :return: The channel_partner_granularity of this GoogleCloudChannelV1RepricingConfig.
        :rtype: object
        """
        return self._channel_partner_granularity

    @channel_partner_granularity.setter
    def channel_partner_granularity(self, channel_partner_granularity):
        """Sets the channel_partner_granularity of this GoogleCloudChannelV1RepricingConfig.

        Applies the repricing configuration at the channel partner level. The channel partner value is derived from the resource name. Takes an empty json object. Deprecated: This is no longer supported. Use RepricingConfig.EntitlementGranularity instead.

        :param channel_partner_granularity: The channel_partner_granularity of this GoogleCloudChannelV1RepricingConfig.
        :type channel_partner_granularity: object
        """

        self._channel_partner_granularity = channel_partner_granularity

    @property
    def conditional_overrides(self):
        """Gets the conditional_overrides of this GoogleCloudChannelV1RepricingConfig.

        The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don't list any overrides, the API uses the normal adjustment and rebilling basis.

        :return: The conditional_overrides of this GoogleCloudChannelV1RepricingConfig.
        :rtype: List[GoogleCloudChannelV1ConditionalOverride]
        """
        return self._conditional_overrides

    @conditional_overrides.setter
    def conditional_overrides(self, conditional_overrides):
        """Sets the conditional_overrides of this GoogleCloudChannelV1RepricingConfig.

        The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don't list any overrides, the API uses the normal adjustment and rebilling basis.

        :param conditional_overrides: The conditional_overrides of this GoogleCloudChannelV1RepricingConfig.
        :type conditional_overrides: List[GoogleCloudChannelV1ConditionalOverride]
        """

        self._conditional_overrides = conditional_overrides

    @property
    def effective_invoice_month(self):
        """Gets the effective_invoice_month of this GoogleCloudChannelV1RepricingConfig.


        :return: The effective_invoice_month of this GoogleCloudChannelV1RepricingConfig.
        :rtype: GoogleTypeDate
        """
        return self._effective_invoice_month

    @effective_invoice_month.setter
    def effective_invoice_month(self, effective_invoice_month):
        """Sets the effective_invoice_month of this GoogleCloudChannelV1RepricingConfig.


        :param effective_invoice_month: The effective_invoice_month of this GoogleCloudChannelV1RepricingConfig.
        :type effective_invoice_month: GoogleTypeDate
        """

        self._effective_invoice_month = effective_invoice_month

    @property
    def entitlement_granularity(self):
        """Gets the entitlement_granularity of this GoogleCloudChannelV1RepricingConfig.


        :return: The entitlement_granularity of this GoogleCloudChannelV1RepricingConfig.
        :rtype: GoogleCloudChannelV1RepricingConfigEntitlementGranularity
        """
        return self._entitlement_granularity

    @entitlement_granularity.setter
    def entitlement_granularity(self, entitlement_granularity):
        """Sets the entitlement_granularity of this GoogleCloudChannelV1RepricingConfig.


        :param entitlement_granularity: The entitlement_granularity of this GoogleCloudChannelV1RepricingConfig.
        :type entitlement_granularity: GoogleCloudChannelV1RepricingConfigEntitlementGranularity
        """

        self._entitlement_granularity = entitlement_granularity

    @property
    def rebilling_basis(self):
        """Gets the rebilling_basis of this GoogleCloudChannelV1RepricingConfig.

        Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.

        :return: The rebilling_basis of this GoogleCloudChannelV1RepricingConfig.
        :rtype: str
        """
        return self._rebilling_basis

    @rebilling_basis.setter
    def rebilling_basis(self, rebilling_basis):
        """Sets the rebilling_basis of this GoogleCloudChannelV1RepricingConfig.

        Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.

        :param rebilling_basis: The rebilling_basis of this GoogleCloudChannelV1RepricingConfig.
        :type rebilling_basis: str
        """
        allowed_values = ["REBILLING_BASIS_UNSPECIFIED", "COST_AT_LIST", "DIRECT_CUSTOMER_COST"]  # noqa: E501
        if rebilling_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `rebilling_basis` ({0}), must be one of {1}"
                .format(rebilling_basis, allowed_values)
            )

        self._rebilling_basis = rebilling_basis
