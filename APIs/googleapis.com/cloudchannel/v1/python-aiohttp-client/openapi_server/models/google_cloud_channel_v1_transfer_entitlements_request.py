# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_channel_v1_entitlement import GoogleCloudChannelV1Entitlement
from openapi_server import util


class GoogleCloudChannelV1TransferEntitlementsRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_token: str=None, entitlements: List[GoogleCloudChannelV1Entitlement]=None, request_id: str=None):
        """GoogleCloudChannelV1TransferEntitlementsRequest - a model defined in OpenAPI

        :param auth_token: The auth_token of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :param entitlements: The entitlements of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :param request_id: The request_id of this GoogleCloudChannelV1TransferEntitlementsRequest.
        """
        self.openapi_types = {
            'auth_token': str,
            'entitlements': List[GoogleCloudChannelV1Entitlement],
            'request_id': str
        }

        self.attribute_map = {
            'auth_token': 'authToken',
            'entitlements': 'entitlements',
            'request_id': 'requestId'
        }

        self._auth_token = auth_token
        self._entitlements = entitlements
        self._request_id = request_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1TransferEntitlementsRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1TransferEntitlementsRequest of this GoogleCloudChannelV1TransferEntitlementsRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_token(self):
        """Gets the auth_token of this GoogleCloudChannelV1TransferEntitlementsRequest.

        The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.

        :return: The auth_token of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this GoogleCloudChannelV1TransferEntitlementsRequest.

        The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.

        :param auth_token: The auth_token of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def entitlements(self):
        """Gets the entitlements of this GoogleCloudChannelV1TransferEntitlementsRequest.

        Required. The new entitlements to create or transfer.

        :return: The entitlements of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :rtype: List[GoogleCloudChannelV1Entitlement]
        """
        return self._entitlements

    @entitlements.setter
    def entitlements(self, entitlements):
        """Sets the entitlements of this GoogleCloudChannelV1TransferEntitlementsRequest.

        Required. The new entitlements to create or transfer.

        :param entitlements: The entitlements of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :type entitlements: List[GoogleCloudChannelV1Entitlement]
        """

        self._entitlements = entitlements

    @property
    def request_id(self):
        """Gets the request_id of this GoogleCloudChannelV1TransferEntitlementsRequest.

        Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).

        :return: The request_id of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this GoogleCloudChannelV1TransferEntitlementsRequest.

        Optional. You can specify an optional unique request ID, and if you need to retry your request, the server will know to ignore the request if it's complete. For example, you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if it received the original operation with the same request ID. If it did, it will ignore the second request. The request ID must be a valid [UUID](https://tools.ietf.org/html/rfc4122) with the exception that zero UUID is not supported (`00000000-0000-0000-0000-000000000000`).

        :param request_id: The request_id of this GoogleCloudChannelV1TransferEntitlementsRequest.
        :type request_id: str
        """

        self._request_id = request_id
