# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudChannelV1ImportCustomerRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_token: str=None, channel_partner_id: str=None, cloud_identity_id: str=None, customer: str=None, domain: str=None, overwrite_if_exists: bool=None):
        """GoogleCloudChannelV1ImportCustomerRequest - a model defined in OpenAPI

        :param auth_token: The auth_token of this GoogleCloudChannelV1ImportCustomerRequest.
        :param channel_partner_id: The channel_partner_id of this GoogleCloudChannelV1ImportCustomerRequest.
        :param cloud_identity_id: The cloud_identity_id of this GoogleCloudChannelV1ImportCustomerRequest.
        :param customer: The customer of this GoogleCloudChannelV1ImportCustomerRequest.
        :param domain: The domain of this GoogleCloudChannelV1ImportCustomerRequest.
        :param overwrite_if_exists: The overwrite_if_exists of this GoogleCloudChannelV1ImportCustomerRequest.
        """
        self.openapi_types = {
            'auth_token': str,
            'channel_partner_id': str,
            'cloud_identity_id': str,
            'customer': str,
            'domain': str,
            'overwrite_if_exists': bool
        }

        self.attribute_map = {
            'auth_token': 'authToken',
            'channel_partner_id': 'channelPartnerId',
            'cloud_identity_id': 'cloudIdentityId',
            'customer': 'customer',
            'domain': 'domain',
            'overwrite_if_exists': 'overwriteIfExists'
        }

        self._auth_token = auth_token
        self._channel_partner_id = channel_partner_id
        self._cloud_identity_id = cloud_identity_id
        self._customer = customer
        self._domain = domain
        self._overwrite_if_exists = overwrite_if_exists

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1ImportCustomerRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1ImportCustomerRequest of this GoogleCloudChannelV1ImportCustomerRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_token(self):
        """Gets the auth_token of this GoogleCloudChannelV1ImportCustomerRequest.

        Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.

        :return: The auth_token of this GoogleCloudChannelV1ImportCustomerRequest.
        :rtype: str
        """
        return self._auth_token

    @auth_token.setter
    def auth_token(self, auth_token):
        """Sets the auth_token of this GoogleCloudChannelV1ImportCustomerRequest.

        Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.

        :param auth_token: The auth_token of this GoogleCloudChannelV1ImportCustomerRequest.
        :type auth_token: str
        """

        self._auth_token = auth_token

    @property
    def channel_partner_id(self):
        """Gets the channel_partner_id of this GoogleCloudChannelV1ImportCustomerRequest.

        Optional. Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is required for 2-tier transfer scenarios and can be provided via the request Parent binding as well.

        :return: The channel_partner_id of this GoogleCloudChannelV1ImportCustomerRequest.
        :rtype: str
        """
        return self._channel_partner_id

    @channel_partner_id.setter
    def channel_partner_id(self, channel_partner_id):
        """Sets the channel_partner_id of this GoogleCloudChannelV1ImportCustomerRequest.

        Optional. Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is required for 2-tier transfer scenarios and can be provided via the request Parent binding as well.

        :param channel_partner_id: The channel_partner_id of this GoogleCloudChannelV1ImportCustomerRequest.
        :type channel_partner_id: str
        """

        self._channel_partner_id = channel_partner_id

    @property
    def cloud_identity_id(self):
        """Gets the cloud_identity_id of this GoogleCloudChannelV1ImportCustomerRequest.

        Required. Customer's Cloud Identity ID

        :return: The cloud_identity_id of this GoogleCloudChannelV1ImportCustomerRequest.
        :rtype: str
        """
        return self._cloud_identity_id

    @cloud_identity_id.setter
    def cloud_identity_id(self, cloud_identity_id):
        """Sets the cloud_identity_id of this GoogleCloudChannelV1ImportCustomerRequest.

        Required. Customer's Cloud Identity ID

        :param cloud_identity_id: The cloud_identity_id of this GoogleCloudChannelV1ImportCustomerRequest.
        :type cloud_identity_id: str
        """

        self._cloud_identity_id = cloud_identity_id

    @property
    def customer(self):
        """Gets the customer of this GoogleCloudChannelV1ImportCustomerRequest.

        Optional. Specifies the customer that will receive imported Cloud Identity information. Format: accounts/{account_id}/customers/{customer_id}

        :return: The customer of this GoogleCloudChannelV1ImportCustomerRequest.
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this GoogleCloudChannelV1ImportCustomerRequest.

        Optional. Specifies the customer that will receive imported Cloud Identity information. Format: accounts/{account_id}/customers/{customer_id}

        :param customer: The customer of this GoogleCloudChannelV1ImportCustomerRequest.
        :type customer: str
        """

        self._customer = customer

    @property
    def domain(self):
        """Gets the domain of this GoogleCloudChannelV1ImportCustomerRequest.

        Required. Customer domain.

        :return: The domain of this GoogleCloudChannelV1ImportCustomerRequest.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this GoogleCloudChannelV1ImportCustomerRequest.

        Required. Customer domain.

        :param domain: The domain of this GoogleCloudChannelV1ImportCustomerRequest.
        :type domain: str
        """

        self._domain = domain

    @property
    def overwrite_if_exists(self):
        """Gets the overwrite_if_exists of this GoogleCloudChannelV1ImportCustomerRequest.

        Required. Choose to overwrite an existing customer if found. This must be set to true if there is an existing customer with a conflicting region code or domain.

        :return: The overwrite_if_exists of this GoogleCloudChannelV1ImportCustomerRequest.
        :rtype: bool
        """
        return self._overwrite_if_exists

    @overwrite_if_exists.setter
    def overwrite_if_exists(self, overwrite_if_exists):
        """Sets the overwrite_if_exists of this GoogleCloudChannelV1ImportCustomerRequest.

        Required. Choose to overwrite an existing customer if found. This must be set to true if there is an existing customer with a conflicting region code or domain.

        :param overwrite_if_exists: The overwrite_if_exists of this GoogleCloudChannelV1ImportCustomerRequest.
        :type overwrite_if_exists: bool
        """

        self._overwrite_if_exists = overwrite_if_exists
