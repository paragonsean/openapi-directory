# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_channel_v1_repricing_adjustment import GoogleCloudChannelV1RepricingAdjustment
from openapi_server.models.google_cloud_channel_v1_repricing_condition import GoogleCloudChannelV1RepricingCondition
from openapi_server import util


class GoogleCloudChannelV1ConditionalOverride(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adjustment: GoogleCloudChannelV1RepricingAdjustment=None, rebilling_basis: str=None, repricing_condition: GoogleCloudChannelV1RepricingCondition=None):
        """GoogleCloudChannelV1ConditionalOverride - a model defined in OpenAPI

        :param adjustment: The adjustment of this GoogleCloudChannelV1ConditionalOverride.
        :param rebilling_basis: The rebilling_basis of this GoogleCloudChannelV1ConditionalOverride.
        :param repricing_condition: The repricing_condition of this GoogleCloudChannelV1ConditionalOverride.
        """
        self.openapi_types = {
            'adjustment': GoogleCloudChannelV1RepricingAdjustment,
            'rebilling_basis': str,
            'repricing_condition': GoogleCloudChannelV1RepricingCondition
        }

        self.attribute_map = {
            'adjustment': 'adjustment',
            'rebilling_basis': 'rebillingBasis',
            'repricing_condition': 'repricingCondition'
        }

        self._adjustment = adjustment
        self._rebilling_basis = rebilling_basis
        self._repricing_condition = repricing_condition

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1ConditionalOverride':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1ConditionalOverride of this GoogleCloudChannelV1ConditionalOverride.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adjustment(self):
        """Gets the adjustment of this GoogleCloudChannelV1ConditionalOverride.


        :return: The adjustment of this GoogleCloudChannelV1ConditionalOverride.
        :rtype: GoogleCloudChannelV1RepricingAdjustment
        """
        return self._adjustment

    @adjustment.setter
    def adjustment(self, adjustment):
        """Sets the adjustment of this GoogleCloudChannelV1ConditionalOverride.


        :param adjustment: The adjustment of this GoogleCloudChannelV1ConditionalOverride.
        :type adjustment: GoogleCloudChannelV1RepricingAdjustment
        """

        self._adjustment = adjustment

    @property
    def rebilling_basis(self):
        """Gets the rebilling_basis of this GoogleCloudChannelV1ConditionalOverride.

        Required. The RebillingBasis to use for the applied override. Shows the relative cost based on your repricing costs.

        :return: The rebilling_basis of this GoogleCloudChannelV1ConditionalOverride.
        :rtype: str
        """
        return self._rebilling_basis

    @rebilling_basis.setter
    def rebilling_basis(self, rebilling_basis):
        """Sets the rebilling_basis of this GoogleCloudChannelV1ConditionalOverride.

        Required. The RebillingBasis to use for the applied override. Shows the relative cost based on your repricing costs.

        :param rebilling_basis: The rebilling_basis of this GoogleCloudChannelV1ConditionalOverride.
        :type rebilling_basis: str
        """
        allowed_values = ["REBILLING_BASIS_UNSPECIFIED", "COST_AT_LIST", "DIRECT_CUSTOMER_COST"]  # noqa: E501
        if rebilling_basis not in allowed_values:
            raise ValueError(
                "Invalid value for `rebilling_basis` ({0}), must be one of {1}"
                .format(rebilling_basis, allowed_values)
            )

        self._rebilling_basis = rebilling_basis

    @property
    def repricing_condition(self):
        """Gets the repricing_condition of this GoogleCloudChannelV1ConditionalOverride.


        :return: The repricing_condition of this GoogleCloudChannelV1ConditionalOverride.
        :rtype: GoogleCloudChannelV1RepricingCondition
        """
        return self._repricing_condition

    @repricing_condition.setter
    def repricing_condition(self, repricing_condition):
        """Sets the repricing_condition of this GoogleCloudChannelV1ConditionalOverride.


        :param repricing_condition: The repricing_condition of this GoogleCloudChannelV1ConditionalOverride.
        :type repricing_condition: GoogleCloudChannelV1RepricingCondition
        """

        self._repricing_condition = repricing_condition
