# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_channel_v1_period import GoogleCloudChannelV1Period
from openapi_server import util


class GoogleCloudChannelV1RenewalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_renewal: bool=None, payment_cycle: GoogleCloudChannelV1Period=None, payment_plan: str=None, resize_unit_count: bool=None):
        """GoogleCloudChannelV1RenewalSettings - a model defined in OpenAPI

        :param enable_renewal: The enable_renewal of this GoogleCloudChannelV1RenewalSettings.
        :param payment_cycle: The payment_cycle of this GoogleCloudChannelV1RenewalSettings.
        :param payment_plan: The payment_plan of this GoogleCloudChannelV1RenewalSettings.
        :param resize_unit_count: The resize_unit_count of this GoogleCloudChannelV1RenewalSettings.
        """
        self.openapi_types = {
            'enable_renewal': bool,
            'payment_cycle': GoogleCloudChannelV1Period,
            'payment_plan': str,
            'resize_unit_count': bool
        }

        self.attribute_map = {
            'enable_renewal': 'enableRenewal',
            'payment_cycle': 'paymentCycle',
            'payment_plan': 'paymentPlan',
            'resize_unit_count': 'resizeUnitCount'
        }

        self._enable_renewal = enable_renewal
        self._payment_cycle = payment_cycle
        self._payment_plan = payment_plan
        self._resize_unit_count = resize_unit_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1RenewalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1RenewalSettings of this GoogleCloudChannelV1RenewalSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_renewal(self):
        """Gets the enable_renewal of this GoogleCloudChannelV1RenewalSettings.

        If false, the plan will be completed at the end date.

        :return: The enable_renewal of this GoogleCloudChannelV1RenewalSettings.
        :rtype: bool
        """
        return self._enable_renewal

    @enable_renewal.setter
    def enable_renewal(self, enable_renewal):
        """Sets the enable_renewal of this GoogleCloudChannelV1RenewalSettings.

        If false, the plan will be completed at the end date.

        :param enable_renewal: The enable_renewal of this GoogleCloudChannelV1RenewalSettings.
        :type enable_renewal: bool
        """

        self._enable_renewal = enable_renewal

    @property
    def payment_cycle(self):
        """Gets the payment_cycle of this GoogleCloudChannelV1RenewalSettings.


        :return: The payment_cycle of this GoogleCloudChannelV1RenewalSettings.
        :rtype: GoogleCloudChannelV1Period
        """
        return self._payment_cycle

    @payment_cycle.setter
    def payment_cycle(self, payment_cycle):
        """Sets the payment_cycle of this GoogleCloudChannelV1RenewalSettings.


        :param payment_cycle: The payment_cycle of this GoogleCloudChannelV1RenewalSettings.
        :type payment_cycle: GoogleCloudChannelV1Period
        """

        self._payment_cycle = payment_cycle

    @property
    def payment_plan(self):
        """Gets the payment_plan of this GoogleCloudChannelV1RenewalSettings.

        Describes how a reseller will be billed.

        :return: The payment_plan of this GoogleCloudChannelV1RenewalSettings.
        :rtype: str
        """
        return self._payment_plan

    @payment_plan.setter
    def payment_plan(self, payment_plan):
        """Sets the payment_plan of this GoogleCloudChannelV1RenewalSettings.

        Describes how a reseller will be billed.

        :param payment_plan: The payment_plan of this GoogleCloudChannelV1RenewalSettings.
        :type payment_plan: str
        """
        allowed_values = ["PAYMENT_PLAN_UNSPECIFIED", "COMMITMENT", "FLEXIBLE", "FREE", "TRIAL", "OFFLINE"]  # noqa: E501
        if payment_plan not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_plan` ({0}), must be one of {1}"
                .format(payment_plan, allowed_values)
            )

        self._payment_plan = payment_plan

    @property
    def resize_unit_count(self):
        """Gets the resize_unit_count of this GoogleCloudChannelV1RenewalSettings.

        If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.

        :return: The resize_unit_count of this GoogleCloudChannelV1RenewalSettings.
        :rtype: bool
        """
        return self._resize_unit_count

    @resize_unit_count.setter
    def resize_unit_count(self, resize_unit_count):
        """Sets the resize_unit_count of this GoogleCloudChannelV1RenewalSettings.

        If true and enable_renewal = true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.

        :param resize_unit_count: The resize_unit_count of this GoogleCloudChannelV1RenewalSettings.
        :type resize_unit_count: bool
        """

        self._resize_unit_count = resize_unit_count
