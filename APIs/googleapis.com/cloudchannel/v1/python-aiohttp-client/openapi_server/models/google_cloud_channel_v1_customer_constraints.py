# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudChannelV1CustomerConstraints(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_customer_types: List[str]=None, allowed_regions: List[str]=None, promotional_order_types: List[str]=None):
        """GoogleCloudChannelV1CustomerConstraints - a model defined in OpenAPI

        :param allowed_customer_types: The allowed_customer_types of this GoogleCloudChannelV1CustomerConstraints.
        :param allowed_regions: The allowed_regions of this GoogleCloudChannelV1CustomerConstraints.
        :param promotional_order_types: The promotional_order_types of this GoogleCloudChannelV1CustomerConstraints.
        """
        self.openapi_types = {
            'allowed_customer_types': List[str],
            'allowed_regions': List[str],
            'promotional_order_types': List[str]
        }

        self.attribute_map = {
            'allowed_customer_types': 'allowedCustomerTypes',
            'allowed_regions': 'allowedRegions',
            'promotional_order_types': 'promotionalOrderTypes'
        }

        self._allowed_customer_types = allowed_customer_types
        self._allowed_regions = allowed_regions
        self._promotional_order_types = promotional_order_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1CustomerConstraints':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1CustomerConstraints of this GoogleCloudChannelV1CustomerConstraints.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_customer_types(self):
        """Gets the allowed_customer_types of this GoogleCloudChannelV1CustomerConstraints.

        Allowed Customer Type.

        :return: The allowed_customer_types of this GoogleCloudChannelV1CustomerConstraints.
        :rtype: List[str]
        """
        return self._allowed_customer_types

    @allowed_customer_types.setter
    def allowed_customer_types(self, allowed_customer_types):
        """Sets the allowed_customer_types of this GoogleCloudChannelV1CustomerConstraints.

        Allowed Customer Type.

        :param allowed_customer_types: The allowed_customer_types of this GoogleCloudChannelV1CustomerConstraints.
        :type allowed_customer_types: List[str]
        """
        allowed_values = ["CUSTOMER_TYPE_UNSPECIFIED", "DOMAIN", "TEAM"]  # noqa: E501
        if not set(allowed_customer_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_customer_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_customer_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_customer_types = allowed_customer_types

    @property
    def allowed_regions(self):
        """Gets the allowed_regions of this GoogleCloudChannelV1CustomerConstraints.

        Allowed geographical regions of the customer.

        :return: The allowed_regions of this GoogleCloudChannelV1CustomerConstraints.
        :rtype: List[str]
        """
        return self._allowed_regions

    @allowed_regions.setter
    def allowed_regions(self, allowed_regions):
        """Sets the allowed_regions of this GoogleCloudChannelV1CustomerConstraints.

        Allowed geographical regions of the customer.

        :param allowed_regions: The allowed_regions of this GoogleCloudChannelV1CustomerConstraints.
        :type allowed_regions: List[str]
        """

        self._allowed_regions = allowed_regions

    @property
    def promotional_order_types(self):
        """Gets the promotional_order_types of this GoogleCloudChannelV1CustomerConstraints.

        Allowed Promotional Order Type. Present for Promotional offers.

        :return: The promotional_order_types of this GoogleCloudChannelV1CustomerConstraints.
        :rtype: List[str]
        """
        return self._promotional_order_types

    @promotional_order_types.setter
    def promotional_order_types(self, promotional_order_types):
        """Sets the promotional_order_types of this GoogleCloudChannelV1CustomerConstraints.

        Allowed Promotional Order Type. Present for Promotional offers.

        :param promotional_order_types: The promotional_order_types of this GoogleCloudChannelV1CustomerConstraints.
        :type promotional_order_types: List[str]
        """
        allowed_values = ["PROMOTIONAL_TYPE_UNSPECIFIED", "NEW_UPGRADE", "TRANSFER", "PROMOTION_SWITCH"]  # noqa: E501
        if not set(promotional_order_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `promotional_order_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(promotional_order_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._promotional_order_types = promotional_order_types
