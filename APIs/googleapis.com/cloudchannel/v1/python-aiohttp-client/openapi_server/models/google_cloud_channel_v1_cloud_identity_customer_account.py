# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GoogleCloudChannelV1CloudIdentityCustomerAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_cloud_identity_id: str=None, customer_name: str=None, existing: bool=None, owned: bool=None):
        """GoogleCloudChannelV1CloudIdentityCustomerAccount - a model defined in OpenAPI

        :param customer_cloud_identity_id: The customer_cloud_identity_id of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :param customer_name: The customer_name of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :param existing: The existing of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :param owned: The owned of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        """
        self.openapi_types = {
            'customer_cloud_identity_id': str,
            'customer_name': str,
            'existing': bool,
            'owned': bool
        }

        self.attribute_map = {
            'customer_cloud_identity_id': 'customerCloudIdentityId',
            'customer_name': 'customerName',
            'existing': 'existing',
            'owned': 'owned'
        }

        self._customer_cloud_identity_id = customer_cloud_identity_id
        self._customer_name = customer_name
        self._existing = existing
        self._owned = owned

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1CloudIdentityCustomerAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1CloudIdentityCustomerAccount of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_cloud_identity_id(self):
        """Gets the customer_cloud_identity_id of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        If existing = true, the Cloud Identity ID of the customer.

        :return: The customer_cloud_identity_id of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :rtype: str
        """
        return self._customer_cloud_identity_id

    @customer_cloud_identity_id.setter
    def customer_cloud_identity_id(self, customer_cloud_identity_id):
        """Sets the customer_cloud_identity_id of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        If existing = true, the Cloud Identity ID of the customer.

        :param customer_cloud_identity_id: The customer_cloud_identity_id of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :type customer_cloud_identity_id: str
        """

        self._customer_cloud_identity_id = customer_cloud_identity_id

    @property
    def customer_name(self):
        """Gets the customer_name of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        If owned = true, the name of the customer that owns the Cloud Identity account. Customer_name uses the format: accounts/{account_id}/customers/{customer_id}

        :return: The customer_name of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :rtype: str
        """
        return self._customer_name

    @customer_name.setter
    def customer_name(self, customer_name):
        """Sets the customer_name of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        If owned = true, the name of the customer that owns the Cloud Identity account. Customer_name uses the format: accounts/{account_id}/customers/{customer_id}

        :param customer_name: The customer_name of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :type customer_name: str
        """

        self._customer_name = customer_name

    @property
    def existing(self):
        """Gets the existing of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        Returns true if a Cloud Identity account exists for a specific domain.

        :return: The existing of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :rtype: bool
        """
        return self._existing

    @existing.setter
    def existing(self, existing):
        """Sets the existing of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        Returns true if a Cloud Identity account exists for a specific domain.

        :param existing: The existing of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :type existing: bool
        """

        self._existing = existing

    @property
    def owned(self):
        """Gets the owned of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        Returns true if the Cloud Identity account is associated with a customer of the Channel Services partner.

        :return: The owned of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :rtype: bool
        """
        return self._owned

    @owned.setter
    def owned(self, owned):
        """Sets the owned of this GoogleCloudChannelV1CloudIdentityCustomerAccount.

        Returns true if the Cloud Identity account is associated with a customer of the Channel Services partner.

        :param owned: The owned of this GoogleCloudChannelV1CloudIdentityCustomerAccount.
        :type owned: bool
        """

        self._owned = owned
