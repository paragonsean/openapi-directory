# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_channel_v1_price import GoogleCloudChannelV1Price
from openapi_server.models.google_cloud_channel_v1_price_phase import GoogleCloudChannelV1PricePhase
from openapi_server import util


class GoogleCloudChannelV1PriceByResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, price: GoogleCloudChannelV1Price=None, price_phases: List[GoogleCloudChannelV1PricePhase]=None, resource_type: str=None):
        """GoogleCloudChannelV1PriceByResource - a model defined in OpenAPI

        :param price: The price of this GoogleCloudChannelV1PriceByResource.
        :param price_phases: The price_phases of this GoogleCloudChannelV1PriceByResource.
        :param resource_type: The resource_type of this GoogleCloudChannelV1PriceByResource.
        """
        self.openapi_types = {
            'price': GoogleCloudChannelV1Price,
            'price_phases': List[GoogleCloudChannelV1PricePhase],
            'resource_type': str
        }

        self.attribute_map = {
            'price': 'price',
            'price_phases': 'pricePhases',
            'resource_type': 'resourceType'
        }

        self._price = price
        self._price_phases = price_phases
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudChannelV1PriceByResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudChannelV1PriceByResource of this GoogleCloudChannelV1PriceByResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def price(self):
        """Gets the price of this GoogleCloudChannelV1PriceByResource.


        :return: The price of this GoogleCloudChannelV1PriceByResource.
        :rtype: GoogleCloudChannelV1Price
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GoogleCloudChannelV1PriceByResource.


        :param price: The price of this GoogleCloudChannelV1PriceByResource.
        :type price: GoogleCloudChannelV1Price
        """

        self._price = price

    @property
    def price_phases(self):
        """Gets the price_phases of this GoogleCloudChannelV1PriceByResource.

        Specifies the price by time range.

        :return: The price_phases of this GoogleCloudChannelV1PriceByResource.
        :rtype: List[GoogleCloudChannelV1PricePhase]
        """
        return self._price_phases

    @price_phases.setter
    def price_phases(self, price_phases):
        """Sets the price_phases of this GoogleCloudChannelV1PriceByResource.

        Specifies the price by time range.

        :param price_phases: The price_phases of this GoogleCloudChannelV1PriceByResource.
        :type price_phases: List[GoogleCloudChannelV1PricePhase]
        """

        self._price_phases = price_phases

    @property
    def resource_type(self):
        """Gets the resource_type of this GoogleCloudChannelV1PriceByResource.

        Resource Type. Example: SEAT

        :return: The resource_type of this GoogleCloudChannelV1PriceByResource.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this GoogleCloudChannelV1PriceByResource.

        Resource Type. Example: SEAT

        :param resource_type: The resource_type of this GoogleCloudChannelV1PriceByResource.
        :type resource_type: str
        """
        allowed_values = ["RESOURCE_TYPE_UNSPECIFIED", "SEAT", "MAU", "GB", "LICENSED_USER", "MINUTES", "IAAS_USAGE", "SUBSCRIPTION"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type
