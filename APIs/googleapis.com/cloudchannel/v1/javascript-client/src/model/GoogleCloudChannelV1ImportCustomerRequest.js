/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleCloudChannelV1ImportCustomerRequest model module.
 * @module model/GoogleCloudChannelV1ImportCustomerRequest
 * @version v1
 */
class GoogleCloudChannelV1ImportCustomerRequest {
    /**
     * Constructs a new <code>GoogleCloudChannelV1ImportCustomerRequest</code>.
     * Request message for CloudChannelService.ImportCustomer
     * @alias module:model/GoogleCloudChannelV1ImportCustomerRequest
     */
    constructor() { 
        
        GoogleCloudChannelV1ImportCustomerRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleCloudChannelV1ImportCustomerRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleCloudChannelV1ImportCustomerRequest} obj Optional instance to populate.
     * @return {module:model/GoogleCloudChannelV1ImportCustomerRequest} The populated <code>GoogleCloudChannelV1ImportCustomerRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleCloudChannelV1ImportCustomerRequest();

            if (data.hasOwnProperty('authToken')) {
                obj['authToken'] = ApiClient.convertToType(data['authToken'], 'String');
            }
            if (data.hasOwnProperty('channelPartnerId')) {
                obj['channelPartnerId'] = ApiClient.convertToType(data['channelPartnerId'], 'String');
            }
            if (data.hasOwnProperty('cloudIdentityId')) {
                obj['cloudIdentityId'] = ApiClient.convertToType(data['cloudIdentityId'], 'String');
            }
            if (data.hasOwnProperty('customer')) {
                obj['customer'] = ApiClient.convertToType(data['customer'], 'String');
            }
            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('overwriteIfExists')) {
                obj['overwriteIfExists'] = ApiClient.convertToType(data['overwriteIfExists'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleCloudChannelV1ImportCustomerRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleCloudChannelV1ImportCustomerRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['authToken'] && !(typeof data['authToken'] === 'string' || data['authToken'] instanceof String)) {
            throw new Error("Expected the field `authToken` to be a primitive type in the JSON string but got " + data['authToken']);
        }
        // ensure the json data is a string
        if (data['channelPartnerId'] && !(typeof data['channelPartnerId'] === 'string' || data['channelPartnerId'] instanceof String)) {
            throw new Error("Expected the field `channelPartnerId` to be a primitive type in the JSON string but got " + data['channelPartnerId']);
        }
        // ensure the json data is a string
        if (data['cloudIdentityId'] && !(typeof data['cloudIdentityId'] === 'string' || data['cloudIdentityId'] instanceof String)) {
            throw new Error("Expected the field `cloudIdentityId` to be a primitive type in the JSON string but got " + data['cloudIdentityId']);
        }
        // ensure the json data is a string
        if (data['customer'] && !(typeof data['customer'] === 'string' || data['customer'] instanceof String)) {
            throw new Error("Expected the field `customer` to be a primitive type in the JSON string but got " + data['customer']);
        }
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }

        return true;
    }


}



/**
 * Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.
 * @member {String} authToken
 */
GoogleCloudChannelV1ImportCustomerRequest.prototype['authToken'] = undefined;

/**
 * Optional. Cloud Identity ID of a channel partner who will be the direct reseller for the customer's order. This field is required for 2-tier transfer scenarios and can be provided via the request Parent binding as well.
 * @member {String} channelPartnerId
 */
GoogleCloudChannelV1ImportCustomerRequest.prototype['channelPartnerId'] = undefined;

/**
 * Required. Customer's Cloud Identity ID
 * @member {String} cloudIdentityId
 */
GoogleCloudChannelV1ImportCustomerRequest.prototype['cloudIdentityId'] = undefined;

/**
 * Optional. Specifies the customer that will receive imported Cloud Identity information. Format: accounts/{account_id}/customers/{customer_id}
 * @member {String} customer
 */
GoogleCloudChannelV1ImportCustomerRequest.prototype['customer'] = undefined;

/**
 * Required. Customer domain.
 * @member {String} domain
 */
GoogleCloudChannelV1ImportCustomerRequest.prototype['domain'] = undefined;

/**
 * Required. Choose to overwrite an existing customer if found. This must be set to true if there is an existing customer with a conflicting region code or domain.
 * @member {Boolean} overwriteIfExists
 */
GoogleCloudChannelV1ImportCustomerRequest.prototype['overwriteIfExists'] = undefined;






export default GoogleCloudChannelV1ImportCustomerRequest;

