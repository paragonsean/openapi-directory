/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGoogleTypeDateTime.h
 *
 * Represents civil time (or occasionally physical time). This type can represent a civil time in one of a few possible ways: * When utc_offset is set and time_zone is unset: a civil time on a calendar day with a particular offset from UTC. * When time_zone is set and utc_offset is unset: a civil time on a calendar day in a particular time zone. * When neither time_zone nor utc_offset is set: a civil time on a calendar day in local time. The date is relative to the Proleptic Gregorian Calendar. If year, month, or day are 0, the DateTime is considered not to have a specific year, month, or day respectively. This type may also be used to represent a physical time if all the date and time fields are set and either case of the &#x60;time_offset&#x60; oneof is set. Consider using &#x60;Timestamp&#x60; message for physical time instead. If your use case also would like to store the user&#39;s timezone, that can be done in another field. This type is more flexible than some applications may want. Make sure to document and validate your application&#39;s limitations.
 */

#ifndef OAIGoogleTypeDateTime_H
#define OAIGoogleTypeDateTime_H

#include <QJsonObject>

#include "OAIGoogleTypeTimeZone.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIGoogleTypeTimeZone;

class OAIGoogleTypeDateTime : public OAIObject {
public:
    OAIGoogleTypeDateTime();
    OAIGoogleTypeDateTime(QString json);
    ~OAIGoogleTypeDateTime() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getDay() const;
    void setDay(const qint32 &day);
    bool is_day_Set() const;
    bool is_day_Valid() const;

    qint32 getHours() const;
    void setHours(const qint32 &hours);
    bool is_hours_Set() const;
    bool is_hours_Valid() const;

    qint32 getMinutes() const;
    void setMinutes(const qint32 &minutes);
    bool is_minutes_Set() const;
    bool is_minutes_Valid() const;

    qint32 getMonth() const;
    void setMonth(const qint32 &month);
    bool is_month_Set() const;
    bool is_month_Valid() const;

    qint32 getNanos() const;
    void setNanos(const qint32 &nanos);
    bool is_nanos_Set() const;
    bool is_nanos_Valid() const;

    qint32 getSeconds() const;
    void setSeconds(const qint32 &seconds);
    bool is_seconds_Set() const;
    bool is_seconds_Valid() const;

    OAIGoogleTypeTimeZone getTimeZone() const;
    void setTimeZone(const OAIGoogleTypeTimeZone &time_zone);
    bool is_time_zone_Set() const;
    bool is_time_zone_Valid() const;

    QString getUtcOffset() const;
    void setUtcOffset(const QString &utc_offset);
    bool is_utc_offset_Set() const;
    bool is_utc_offset_Valid() const;

    qint32 getYear() const;
    void setYear(const qint32 &year);
    bool is_year_Set() const;
    bool is_year_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_day;
    bool m_day_isSet;
    bool m_day_isValid;

    qint32 m_hours;
    bool m_hours_isSet;
    bool m_hours_isValid;

    qint32 m_minutes;
    bool m_minutes_isSet;
    bool m_minutes_isValid;

    qint32 m_month;
    bool m_month_isSet;
    bool m_month_isValid;

    qint32 m_nanos;
    bool m_nanos_isSet;
    bool m_nanos_isValid;

    qint32 m_seconds;
    bool m_seconds_isSet;
    bool m_seconds_isValid;

    OAIGoogleTypeTimeZone m_time_zone;
    bool m_time_zone_isSet;
    bool m_time_zone_isValid;

    QString m_utc_offset;
    bool m_utc_offset_isSet;
    bool m_utc_offset_isValid;

    qint32 m_year;
    bool m_year_isSet;
    bool m_year_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGoogleTypeDateTime)

#endif // OAIGoogleTypeDateTime_H
