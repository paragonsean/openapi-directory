/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::~OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent() {}

void OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::initializeModel() {

    m_channel_partner_isSet = false;
    m_channel_partner_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;
}

void OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::fromJsonObject(QJsonObject json) {

    m_channel_partner_isValid = ::OpenAPI::fromJsonValue(m_channel_partner, json[QString("channelPartner")]);
    m_channel_partner_isSet = !json[QString("channelPartner")].isNull() && m_channel_partner_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;
}

QString OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_partner_isSet) {
        obj.insert(QString("channelPartner"), ::OpenAPI::toJsonValue(m_channel_partner));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    return obj;
}

QString OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::getChannelPartner() const {
    return m_channel_partner;
}
void OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::setChannelPartner(const QString &channel_partner) {
    m_channel_partner = channel_partner;
    m_channel_partner_isSet = true;
}

bool OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::is_channel_partner_Set() const{
    return m_channel_partner_isSet;
}

bool OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::is_channel_partner_Valid() const{
    return m_channel_partner_isValid;
}

QString OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::getEventType() const {
    return m_event_type;
}
void OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::is_event_type_Valid() const{
    return m_event_type_isValid;
}

bool OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_partner_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
