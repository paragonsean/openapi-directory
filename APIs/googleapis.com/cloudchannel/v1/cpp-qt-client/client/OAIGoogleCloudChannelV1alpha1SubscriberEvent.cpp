/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1alpha1SubscriberEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1alpha1SubscriberEvent::OAIGoogleCloudChannelV1alpha1SubscriberEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1alpha1SubscriberEvent::OAIGoogleCloudChannelV1alpha1SubscriberEvent() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1alpha1SubscriberEvent::~OAIGoogleCloudChannelV1alpha1SubscriberEvent() {}

void OAIGoogleCloudChannelV1alpha1SubscriberEvent::initializeModel() {

    m_channel_partner_event_isSet = false;
    m_channel_partner_event_isValid = false;

    m_customer_event_isSet = false;
    m_customer_event_isValid = false;

    m_entitlement_event_isSet = false;
    m_entitlement_event_isValid = false;
}

void OAIGoogleCloudChannelV1alpha1SubscriberEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1alpha1SubscriberEvent::fromJsonObject(QJsonObject json) {

    m_channel_partner_event_isValid = ::OpenAPI::fromJsonValue(m_channel_partner_event, json[QString("channelPartnerEvent")]);
    m_channel_partner_event_isSet = !json[QString("channelPartnerEvent")].isNull() && m_channel_partner_event_isValid;

    m_customer_event_isValid = ::OpenAPI::fromJsonValue(m_customer_event, json[QString("customerEvent")]);
    m_customer_event_isSet = !json[QString("customerEvent")].isNull() && m_customer_event_isValid;

    m_entitlement_event_isValid = ::OpenAPI::fromJsonValue(m_entitlement_event, json[QString("entitlementEvent")]);
    m_entitlement_event_isSet = !json[QString("entitlementEvent")].isNull() && m_entitlement_event_isValid;
}

QString OAIGoogleCloudChannelV1alpha1SubscriberEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1alpha1SubscriberEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_partner_event.isSet()) {
        obj.insert(QString("channelPartnerEvent"), ::OpenAPI::toJsonValue(m_channel_partner_event));
    }
    if (m_customer_event.isSet()) {
        obj.insert(QString("customerEvent"), ::OpenAPI::toJsonValue(m_customer_event));
    }
    if (m_entitlement_event.isSet()) {
        obj.insert(QString("entitlementEvent"), ::OpenAPI::toJsonValue(m_entitlement_event));
    }
    return obj;
}

OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent OAIGoogleCloudChannelV1alpha1SubscriberEvent::getChannelPartnerEvent() const {
    return m_channel_partner_event;
}
void OAIGoogleCloudChannelV1alpha1SubscriberEvent::setChannelPartnerEvent(const OAIGoogleCloudChannelV1alpha1ChannelPartnerEvent &channel_partner_event) {
    m_channel_partner_event = channel_partner_event;
    m_channel_partner_event_isSet = true;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::is_channel_partner_event_Set() const{
    return m_channel_partner_event_isSet;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::is_channel_partner_event_Valid() const{
    return m_channel_partner_event_isValid;
}

OAIGoogleCloudChannelV1alpha1CustomerEvent OAIGoogleCloudChannelV1alpha1SubscriberEvent::getCustomerEvent() const {
    return m_customer_event;
}
void OAIGoogleCloudChannelV1alpha1SubscriberEvent::setCustomerEvent(const OAIGoogleCloudChannelV1alpha1CustomerEvent &customer_event) {
    m_customer_event = customer_event;
    m_customer_event_isSet = true;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::is_customer_event_Set() const{
    return m_customer_event_isSet;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::is_customer_event_Valid() const{
    return m_customer_event_isValid;
}

OAIGoogleCloudChannelV1alpha1EntitlementEvent OAIGoogleCloudChannelV1alpha1SubscriberEvent::getEntitlementEvent() const {
    return m_entitlement_event;
}
void OAIGoogleCloudChannelV1alpha1SubscriberEvent::setEntitlementEvent(const OAIGoogleCloudChannelV1alpha1EntitlementEvent &entitlement_event) {
    m_entitlement_event = entitlement_event;
    m_entitlement_event_isSet = true;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::is_entitlement_event_Set() const{
    return m_entitlement_event_isSet;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::is_entitlement_event_Valid() const{
    return m_entitlement_event_isValid;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_partner_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlement_event.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1alpha1SubscriberEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
