/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1TransferEligibility.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1TransferEligibility::OAIGoogleCloudChannelV1TransferEligibility(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1TransferEligibility::OAIGoogleCloudChannelV1TransferEligibility() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1TransferEligibility::~OAIGoogleCloudChannelV1TransferEligibility() {}

void OAIGoogleCloudChannelV1TransferEligibility::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_ineligibility_reason_isSet = false;
    m_ineligibility_reason_isValid = false;

    m_is_eligible_isSet = false;
    m_is_eligible_isValid = false;
}

void OAIGoogleCloudChannelV1TransferEligibility::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1TransferEligibility::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ineligibility_reason_isValid = ::OpenAPI::fromJsonValue(m_ineligibility_reason, json[QString("ineligibilityReason")]);
    m_ineligibility_reason_isSet = !json[QString("ineligibilityReason")].isNull() && m_ineligibility_reason_isValid;

    m_is_eligible_isValid = ::OpenAPI::fromJsonValue(m_is_eligible, json[QString("isEligible")]);
    m_is_eligible_isSet = !json[QString("isEligible")].isNull() && m_is_eligible_isValid;
}

QString OAIGoogleCloudChannelV1TransferEligibility::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1TransferEligibility::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ineligibility_reason_isSet) {
        obj.insert(QString("ineligibilityReason"), ::OpenAPI::toJsonValue(m_ineligibility_reason));
    }
    if (m_is_eligible_isSet) {
        obj.insert(QString("isEligible"), ::OpenAPI::toJsonValue(m_is_eligible));
    }
    return obj;
}

QString OAIGoogleCloudChannelV1TransferEligibility::getDescription() const {
    return m_description;
}
void OAIGoogleCloudChannelV1TransferEligibility::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGoogleCloudChannelV1TransferEligibility::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGoogleCloudChannelV1TransferEligibility::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGoogleCloudChannelV1TransferEligibility::getIneligibilityReason() const {
    return m_ineligibility_reason;
}
void OAIGoogleCloudChannelV1TransferEligibility::setIneligibilityReason(const QString &ineligibility_reason) {
    m_ineligibility_reason = ineligibility_reason;
    m_ineligibility_reason_isSet = true;
}

bool OAIGoogleCloudChannelV1TransferEligibility::is_ineligibility_reason_Set() const{
    return m_ineligibility_reason_isSet;
}

bool OAIGoogleCloudChannelV1TransferEligibility::is_ineligibility_reason_Valid() const{
    return m_ineligibility_reason_isValid;
}

bool OAIGoogleCloudChannelV1TransferEligibility::isIsEligible() const {
    return m_is_eligible;
}
void OAIGoogleCloudChannelV1TransferEligibility::setIsEligible(const bool &is_eligible) {
    m_is_eligible = is_eligible;
    m_is_eligible_isSet = true;
}

bool OAIGoogleCloudChannelV1TransferEligibility::is_is_eligible_Set() const{
    return m_is_eligible_isSet;
}

bool OAIGoogleCloudChannelV1TransferEligibility::is_is_eligible_Valid() const{
    return m_is_eligible_isValid;
}

bool OAIGoogleCloudChannelV1TransferEligibility::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ineligibility_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1TransferEligibility::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
