/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::~OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest() {}

void OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::initializeModel() {

    m_cloud_identity_info_isSet = false;
    m_cloud_identity_info_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_validate_only_isSet = false;
    m_validate_only_isValid = false;
}

void OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::fromJsonObject(QJsonObject json) {

    m_cloud_identity_info_isValid = ::OpenAPI::fromJsonValue(m_cloud_identity_info, json[QString("cloudIdentityInfo")]);
    m_cloud_identity_info_isSet = !json[QString("cloudIdentityInfo")].isNull() && m_cloud_identity_info_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_validate_only_isValid = ::OpenAPI::fromJsonValue(m_validate_only, json[QString("validateOnly")]);
    m_validate_only_isSet = !json[QString("validateOnly")].isNull() && m_validate_only_isValid;
}

QString OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_identity_info.isSet()) {
        obj.insert(QString("cloudIdentityInfo"), ::OpenAPI::toJsonValue(m_cloud_identity_info));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_validate_only_isSet) {
        obj.insert(QString("validateOnly"), ::OpenAPI::toJsonValue(m_validate_only));
    }
    return obj;
}

OAIGoogleCloudChannelV1CloudIdentityInfo OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::getCloudIdentityInfo() const {
    return m_cloud_identity_info;
}
void OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::setCloudIdentityInfo(const OAIGoogleCloudChannelV1CloudIdentityInfo &cloud_identity_info) {
    m_cloud_identity_info = cloud_identity_info;
    m_cloud_identity_info_isSet = true;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::is_cloud_identity_info_Set() const{
    return m_cloud_identity_info_isSet;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::is_cloud_identity_info_Valid() const{
    return m_cloud_identity_info_isValid;
}

OAIGoogleCloudChannelV1AdminUser OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::getUser() const {
    return m_user;
}
void OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::setUser(const OAIGoogleCloudChannelV1AdminUser &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::is_user_Set() const{
    return m_user_isSet;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::isValidateOnly() const {
    return m_validate_only;
}
void OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::setValidateOnly(const bool &validate_only) {
    m_validate_only = validate_only;
    m_validate_only_isSet = true;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::is_validate_only_Set() const{
    return m_validate_only_isSet;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::is_validate_only_Valid() const{
    return m_validate_only_isValid;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_identity_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validate_only_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
