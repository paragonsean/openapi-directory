/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1ImportCustomerRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1ImportCustomerRequest::OAIGoogleCloudChannelV1ImportCustomerRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1ImportCustomerRequest::OAIGoogleCloudChannelV1ImportCustomerRequest() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1ImportCustomerRequest::~OAIGoogleCloudChannelV1ImportCustomerRequest() {}

void OAIGoogleCloudChannelV1ImportCustomerRequest::initializeModel() {

    m_auth_token_isSet = false;
    m_auth_token_isValid = false;

    m_channel_partner_id_isSet = false;
    m_channel_partner_id_isValid = false;

    m_cloud_identity_id_isSet = false;
    m_cloud_identity_id_isValid = false;

    m_customer_isSet = false;
    m_customer_isValid = false;

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_overwrite_if_exists_isSet = false;
    m_overwrite_if_exists_isValid = false;
}

void OAIGoogleCloudChannelV1ImportCustomerRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1ImportCustomerRequest::fromJsonObject(QJsonObject json) {

    m_auth_token_isValid = ::OpenAPI::fromJsonValue(m_auth_token, json[QString("authToken")]);
    m_auth_token_isSet = !json[QString("authToken")].isNull() && m_auth_token_isValid;

    m_channel_partner_id_isValid = ::OpenAPI::fromJsonValue(m_channel_partner_id, json[QString("channelPartnerId")]);
    m_channel_partner_id_isSet = !json[QString("channelPartnerId")].isNull() && m_channel_partner_id_isValid;

    m_cloud_identity_id_isValid = ::OpenAPI::fromJsonValue(m_cloud_identity_id, json[QString("cloudIdentityId")]);
    m_cloud_identity_id_isSet = !json[QString("cloudIdentityId")].isNull() && m_cloud_identity_id_isValid;

    m_customer_isValid = ::OpenAPI::fromJsonValue(m_customer, json[QString("customer")]);
    m_customer_isSet = !json[QString("customer")].isNull() && m_customer_isValid;

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_overwrite_if_exists_isValid = ::OpenAPI::fromJsonValue(m_overwrite_if_exists, json[QString("overwriteIfExists")]);
    m_overwrite_if_exists_isSet = !json[QString("overwriteIfExists")].isNull() && m_overwrite_if_exists_isValid;
}

QString OAIGoogleCloudChannelV1ImportCustomerRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1ImportCustomerRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_token_isSet) {
        obj.insert(QString("authToken"), ::OpenAPI::toJsonValue(m_auth_token));
    }
    if (m_channel_partner_id_isSet) {
        obj.insert(QString("channelPartnerId"), ::OpenAPI::toJsonValue(m_channel_partner_id));
    }
    if (m_cloud_identity_id_isSet) {
        obj.insert(QString("cloudIdentityId"), ::OpenAPI::toJsonValue(m_cloud_identity_id));
    }
    if (m_customer_isSet) {
        obj.insert(QString("customer"), ::OpenAPI::toJsonValue(m_customer));
    }
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_overwrite_if_exists_isSet) {
        obj.insert(QString("overwriteIfExists"), ::OpenAPI::toJsonValue(m_overwrite_if_exists));
    }
    return obj;
}

QString OAIGoogleCloudChannelV1ImportCustomerRequest::getAuthToken() const {
    return m_auth_token;
}
void OAIGoogleCloudChannelV1ImportCustomerRequest::setAuthToken(const QString &auth_token) {
    m_auth_token = auth_token;
    m_auth_token_isSet = true;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_auth_token_Set() const{
    return m_auth_token_isSet;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_auth_token_Valid() const{
    return m_auth_token_isValid;
}

QString OAIGoogleCloudChannelV1ImportCustomerRequest::getChannelPartnerId() const {
    return m_channel_partner_id;
}
void OAIGoogleCloudChannelV1ImportCustomerRequest::setChannelPartnerId(const QString &channel_partner_id) {
    m_channel_partner_id = channel_partner_id;
    m_channel_partner_id_isSet = true;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_channel_partner_id_Set() const{
    return m_channel_partner_id_isSet;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_channel_partner_id_Valid() const{
    return m_channel_partner_id_isValid;
}

QString OAIGoogleCloudChannelV1ImportCustomerRequest::getCloudIdentityId() const {
    return m_cloud_identity_id;
}
void OAIGoogleCloudChannelV1ImportCustomerRequest::setCloudIdentityId(const QString &cloud_identity_id) {
    m_cloud_identity_id = cloud_identity_id;
    m_cloud_identity_id_isSet = true;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_cloud_identity_id_Set() const{
    return m_cloud_identity_id_isSet;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_cloud_identity_id_Valid() const{
    return m_cloud_identity_id_isValid;
}

QString OAIGoogleCloudChannelV1ImportCustomerRequest::getCustomer() const {
    return m_customer;
}
void OAIGoogleCloudChannelV1ImportCustomerRequest::setCustomer(const QString &customer) {
    m_customer = customer;
    m_customer_isSet = true;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_customer_Set() const{
    return m_customer_isSet;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_customer_Valid() const{
    return m_customer_isValid;
}

QString OAIGoogleCloudChannelV1ImportCustomerRequest::getDomain() const {
    return m_domain;
}
void OAIGoogleCloudChannelV1ImportCustomerRequest::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_domain_Valid() const{
    return m_domain_isValid;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::isOverwriteIfExists() const {
    return m_overwrite_if_exists;
}
void OAIGoogleCloudChannelV1ImportCustomerRequest::setOverwriteIfExists(const bool &overwrite_if_exists) {
    m_overwrite_if_exists = overwrite_if_exists;
    m_overwrite_if_exists_isSet = true;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_overwrite_if_exists_Set() const{
    return m_overwrite_if_exists_isSet;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::is_overwrite_if_exists_Valid() const{
    return m_overwrite_if_exists_isValid;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_partner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_identity_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_if_exists_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1ImportCustomerRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
