/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1CustomerConstraints.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1CustomerConstraints::OAIGoogleCloudChannelV1CustomerConstraints(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1CustomerConstraints::OAIGoogleCloudChannelV1CustomerConstraints() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1CustomerConstraints::~OAIGoogleCloudChannelV1CustomerConstraints() {}

void OAIGoogleCloudChannelV1CustomerConstraints::initializeModel() {

    m_allowed_customer_types_isSet = false;
    m_allowed_customer_types_isValid = false;

    m_allowed_regions_isSet = false;
    m_allowed_regions_isValid = false;

    m_promotional_order_types_isSet = false;
    m_promotional_order_types_isValid = false;
}

void OAIGoogleCloudChannelV1CustomerConstraints::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1CustomerConstraints::fromJsonObject(QJsonObject json) {

    m_allowed_customer_types_isValid = ::OpenAPI::fromJsonValue(m_allowed_customer_types, json[QString("allowedCustomerTypes")]);
    m_allowed_customer_types_isSet = !json[QString("allowedCustomerTypes")].isNull() && m_allowed_customer_types_isValid;

    m_allowed_regions_isValid = ::OpenAPI::fromJsonValue(m_allowed_regions, json[QString("allowedRegions")]);
    m_allowed_regions_isSet = !json[QString("allowedRegions")].isNull() && m_allowed_regions_isValid;

    m_promotional_order_types_isValid = ::OpenAPI::fromJsonValue(m_promotional_order_types, json[QString("promotionalOrderTypes")]);
    m_promotional_order_types_isSet = !json[QString("promotionalOrderTypes")].isNull() && m_promotional_order_types_isValid;
}

QString OAIGoogleCloudChannelV1CustomerConstraints::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1CustomerConstraints::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_customer_types.size() > 0) {
        obj.insert(QString("allowedCustomerTypes"), ::OpenAPI::toJsonValue(m_allowed_customer_types));
    }
    if (m_allowed_regions.size() > 0) {
        obj.insert(QString("allowedRegions"), ::OpenAPI::toJsonValue(m_allowed_regions));
    }
    if (m_promotional_order_types.size() > 0) {
        obj.insert(QString("promotionalOrderTypes"), ::OpenAPI::toJsonValue(m_promotional_order_types));
    }
    return obj;
}

QList<QString> OAIGoogleCloudChannelV1CustomerConstraints::getAllowedCustomerTypes() const {
    return m_allowed_customer_types;
}
void OAIGoogleCloudChannelV1CustomerConstraints::setAllowedCustomerTypes(const QList<QString> &allowed_customer_types) {
    m_allowed_customer_types = allowed_customer_types;
    m_allowed_customer_types_isSet = true;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::is_allowed_customer_types_Set() const{
    return m_allowed_customer_types_isSet;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::is_allowed_customer_types_Valid() const{
    return m_allowed_customer_types_isValid;
}

QList<QString> OAIGoogleCloudChannelV1CustomerConstraints::getAllowedRegions() const {
    return m_allowed_regions;
}
void OAIGoogleCloudChannelV1CustomerConstraints::setAllowedRegions(const QList<QString> &allowed_regions) {
    m_allowed_regions = allowed_regions;
    m_allowed_regions_isSet = true;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::is_allowed_regions_Set() const{
    return m_allowed_regions_isSet;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::is_allowed_regions_Valid() const{
    return m_allowed_regions_isValid;
}

QList<QString> OAIGoogleCloudChannelV1CustomerConstraints::getPromotionalOrderTypes() const {
    return m_promotional_order_types;
}
void OAIGoogleCloudChannelV1CustomerConstraints::setPromotionalOrderTypes(const QList<QString> &promotional_order_types) {
    m_promotional_order_types = promotional_order_types;
    m_promotional_order_types_isSet = true;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::is_promotional_order_types_Set() const{
    return m_promotional_order_types_isSet;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::is_promotional_order_types_Valid() const{
    return m_promotional_order_types_isValid;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_customer_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_allowed_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_promotional_order_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1CustomerConstraints::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
