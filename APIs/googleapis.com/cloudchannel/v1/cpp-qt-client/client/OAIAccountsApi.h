/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGoogleCloudChannelV1ActivateEntitlementRequest.h"
#include "OAIGoogleCloudChannelV1ChangeOfferRequest.h"
#include "OAIGoogleCloudChannelV1ChangeParametersRequest.h"
#include "OAIGoogleCloudChannelV1ChangeRenewalSettingsRequest.h"
#include "OAIGoogleCloudChannelV1ChannelPartnerLink.h"
#include "OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig.h"
#include "OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistRequest.h"
#include "OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistResponse.h"
#include "OAIGoogleCloudChannelV1CreateEntitlementRequest.h"
#include "OAIGoogleCloudChannelV1Customer.h"
#include "OAIGoogleCloudChannelV1CustomerRepricingConfig.h"
#include "OAIGoogleCloudChannelV1FetchReportResultsRequest.h"
#include "OAIGoogleCloudChannelV1FetchReportResultsResponse.h"
#include "OAIGoogleCloudChannelV1ImportCustomerRequest.h"
#include "OAIGoogleCloudChannelV1ListChannelPartnerLinksResponse.h"
#include "OAIGoogleCloudChannelV1ListChannelPartnerRepricingConfigsResponse.h"
#include "OAIGoogleCloudChannelV1ListCustomerRepricingConfigsResponse.h"
#include "OAIGoogleCloudChannelV1ListCustomersResponse.h"
#include "OAIGoogleCloudChannelV1ListEntitlementChangesResponse.h"
#include "OAIGoogleCloudChannelV1ListEntitlementsResponse.h"
#include "OAIGoogleCloudChannelV1ListOffersResponse.h"
#include "OAIGoogleCloudChannelV1ListPurchasableOffersResponse.h"
#include "OAIGoogleCloudChannelV1ListPurchasableSkusResponse.h"
#include "OAIGoogleCloudChannelV1ListReportsResponse.h"
#include "OAIGoogleCloudChannelV1ListSkuGroupBillableSkusResponse.h"
#include "OAIGoogleCloudChannelV1ListSkuGroupsResponse.h"
#include "OAIGoogleCloudChannelV1ListSubscribersResponse.h"
#include "OAIGoogleCloudChannelV1ListTransferableOffersRequest.h"
#include "OAIGoogleCloudChannelV1ListTransferableOffersResponse.h"
#include "OAIGoogleCloudChannelV1ListTransferableSkusRequest.h"
#include "OAIGoogleCloudChannelV1ListTransferableSkusResponse.h"
#include "OAIGoogleCloudChannelV1Offer.h"
#include "OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest.h"
#include "OAIGoogleCloudChannelV1QueryEligibleBillingAccountsResponse.h"
#include "OAIGoogleCloudChannelV1RegisterSubscriberRequest.h"
#include "OAIGoogleCloudChannelV1RegisterSubscriberResponse.h"
#include "OAIGoogleCloudChannelV1RunReportJobRequest.h"
#include "OAIGoogleCloudChannelV1StartPaidServiceRequest.h"
#include "OAIGoogleCloudChannelV1SuspendEntitlementRequest.h"
#include "OAIGoogleCloudChannelV1TransferEntitlementsRequest.h"
#include "OAIGoogleCloudChannelV1TransferEntitlementsToGoogleRequest.h"
#include "OAIGoogleCloudChannelV1UnregisterSubscriberRequest.h"
#include "OAIGoogleCloudChannelV1UnregisterSubscriberResponse.h"
#include "OAIGoogleLongrunningOperation.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_channel_partner_repricing_config OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig [optional]
    */
    virtual void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig> &oai_google_cloud_channel_v1_channel_partner_repricing_config = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_channel_partner_link OAIGoogleCloudChannelV1ChannelPartnerLink [optional]
    */
    virtual void cloudchannel_accounts_channelPartnerLinks_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChannelPartnerLink> &oai_google_cloud_channel_v1_channel_partner_link = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChannelPartnerLink>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void cloudchannel_accounts_channelPartnerLinks_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_check_cloud_identity_accounts_exist_request OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistRequest [optional]
    */
    virtual void cloudchannel_accounts_checkCloudIdentityAccountsExist(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistRequest> &oai_google_cloud_channel_v1_check_cloud_identity_accounts_exist_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_customer OAIGoogleCloudChannelV1Customer [optional]
    */
    virtual void cloudchannel_accounts_customers_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1Customer> &oai_google_cloud_channel_v1_customer = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1Customer>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_customer_repricing_config OAIGoogleCloudChannelV1CustomerRepricingConfig [optional]
    */
    virtual void cloudchannel_accounts_customers_customerRepricingConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CustomerRepricingConfig> &oai_google_cloud_channel_v1_customer_repricing_config = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CustomerRepricingConfig>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_customers_customerRepricingConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  update_mask QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_customer_repricing_config OAIGoogleCloudChannelV1CustomerRepricingConfig [optional]
    */
    virtual void cloudchannel_accounts_customers_customerRepricingConfigs_patch(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &update_mask = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CustomerRepricingConfig> &oai_google_cloud_channel_v1_customer_repricing_config = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CustomerRepricingConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_activate_entitlement_request OAIGoogleCloudChannelV1ActivateEntitlementRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_activate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ActivateEntitlementRequest> &oai_google_cloud_channel_v1_activate_entitlement_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ActivateEntitlementRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_change_offer_request OAIGoogleCloudChannelV1ChangeOfferRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_changeOffer(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChangeOfferRequest> &oai_google_cloud_channel_v1_change_offer_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChangeOfferRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_change_parameters_request OAIGoogleCloudChannelV1ChangeParametersRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_changeParameters(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChangeParametersRequest> &oai_google_cloud_channel_v1_change_parameters_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChangeParametersRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_change_renewal_settings_request OAIGoogleCloudChannelV1ChangeRenewalSettingsRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_changeRenewalSettings(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChangeRenewalSettingsRequest> &oai_google_cloud_channel_v1_change_renewal_settings_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ChangeRenewalSettingsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_create_entitlement_request OAIGoogleCloudChannelV1CreateEntitlementRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CreateEntitlementRequest> &oai_google_cloud_channel_v1_create_entitlement_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1CreateEntitlementRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_listEntitlementChanges(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  entitlement QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_lookupOffer(const QString &entitlement, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_start_paid_service_request OAIGoogleCloudChannelV1StartPaidServiceRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_startPaidService(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1StartPaidServiceRequest> &oai_google_cloud_channel_v1_start_paid_service_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1StartPaidServiceRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_suspend_entitlement_request OAIGoogleCloudChannelV1SuspendEntitlementRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_entitlements_suspend(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1SuspendEntitlementRequest> &oai_google_cloud_channel_v1_suspend_entitlement_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1SuspendEntitlementRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_import_customer_request OAIGoogleCloudChannelV1ImportCustomerRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_import(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ImportCustomerRequest> &oai_google_cloud_channel_v1_import_customer_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ImportCustomerRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_customers_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  change_offer_purchase_billing_account QString [optional]
    * @param[in]  change_offer_purchase_entitlement QString [optional]
    * @param[in]  change_offer_purchase_new_sku QString [optional]
    * @param[in]  create_entitlement_purchase_billing_account QString [optional]
    * @param[in]  create_entitlement_purchase_sku QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_customers_listPurchasableOffers(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_offer_purchase_billing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_offer_purchase_entitlement = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_offer_purchase_new_sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_entitlement_purchase_billing_account = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_entitlement_purchase_sku = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  change_offer_purchase_change_type QString [optional]
    * @param[in]  change_offer_purchase_entitlement QString [optional]
    * @param[in]  create_entitlement_purchase_product QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_customers_listPurchasableSkus(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_offer_purchase_change_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &change_offer_purchase_entitlement = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &create_entitlement_purchase_product = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_provision_cloud_identity_request OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_provisionCloudIdentity(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest> &oai_google_cloud_channel_v1_provision_cloud_identity_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ProvisionCloudIdentityRequest>());

    /**
    * @param[in]  customer QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  skus QList<QString> [optional]
    */
    virtual void cloudchannel_accounts_customers_queryEligibleBillingAccounts(const QString &customer, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &skus = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_transfer_entitlements_request OAIGoogleCloudChannelV1TransferEntitlementsRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_transferEntitlements(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1TransferEntitlementsRequest> &oai_google_cloud_channel_v1_transfer_entitlements_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1TransferEntitlementsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_transfer_entitlements_to_google_request OAIGoogleCloudChannelV1TransferEntitlementsToGoogleRequest [optional]
    */
    virtual void cloudchannel_accounts_customers_transferEntitlementsToGoogle(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1TransferEntitlementsToGoogleRequest> &oai_google_cloud_channel_v1_transfer_entitlements_to_google_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1TransferEntitlementsToGoogleRequest>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_listSubscribers(const QString &account, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_list_transferable_offers_request OAIGoogleCloudChannelV1ListTransferableOffersRequest [optional]
    */
    virtual void cloudchannel_accounts_listTransferableOffers(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ListTransferableOffersRequest> &oai_google_cloud_channel_v1_list_transferable_offers_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ListTransferableOffersRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_list_transferable_skus_request OAIGoogleCloudChannelV1ListTransferableSkusRequest [optional]
    */
    virtual void cloudchannel_accounts_listTransferableSkus(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ListTransferableSkusRequest> &oai_google_cloud_channel_v1_list_transferable_skus_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1ListTransferableSkusRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    * @param[in]  show_future_offers bool [optional]
    */
    virtual void cloudchannel_accounts_offers_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &show_future_offers = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_register_subscriber_request OAIGoogleCloudChannelV1RegisterSubscriberRequest [optional]
    */
    virtual void cloudchannel_accounts_register(const QString &account, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1RegisterSubscriberRequest> &oai_google_cloud_channel_v1_register_subscriber_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1RegisterSubscriberRequest>());

    /**
    * @param[in]  report_job QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_fetch_report_results_request OAIGoogleCloudChannelV1FetchReportResultsRequest [optional]
    */
    virtual void cloudchannel_accounts_reportJobs_fetchReportResults(const QString &report_job, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1FetchReportResultsRequest> &oai_google_cloud_channel_v1_fetch_report_results_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1FetchReportResultsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  language_code QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_reports_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_run_report_job_request OAIGoogleCloudChannelV1RunReportJobRequest [optional]
    */
    virtual void cloudchannel_accounts_reports_run(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1RunReportJobRequest> &oai_google_cloud_channel_v1_run_report_job_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1RunReportJobRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_skuGroups_billableSkus_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void cloudchannel_accounts_skuGroups_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  account QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_google_cloud_channel_v1_unregister_subscriber_request OAIGoogleCloudChannelV1UnregisterSubscriberRequest [optional]
    */
    virtual void cloudchannel_accounts_unregister(const QString &account, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1UnregisterSubscriberRequest> &oai_google_cloud_channel_v1_unregister_subscriber_request = ::OpenAPI::OptionalParam<OAIGoogleCloudChannelV1UnregisterSubscriberRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_channelPartnerLinks_createCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_channelPartnerLinks_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_checkCloudIdentityAccountsExistCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_createCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_customerRepricingConfigs_createCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_customerRepricingConfigs_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_activateCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_changeOfferCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_changeParametersCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_createCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_lookupOfferCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_startPaidServiceCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_entitlements_suspendCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_importCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_listPurchasableOffersCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_listPurchasableSkusCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_provisionCloudIdentityCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_transferEntitlementsCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_listSubscribersCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_listTransferableOffersCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_listTransferableSkusCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_offers_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_registerCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_reportJobs_fetchReportResultsCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_reports_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_reports_runCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_skuGroups_billableSkus_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_skuGroups_listCallback(OAIHttpRequestWorker *worker);
    void cloudchannel_accounts_unregisterCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignal(OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig summary);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignal(OAIGoogleCloudChannelV1ListChannelPartnerRepricingConfigsResponse summary);
    void cloudchannel_accounts_channelPartnerLinks_createSignal(OAIGoogleCloudChannelV1ChannelPartnerLink summary);
    void cloudchannel_accounts_channelPartnerLinks_listSignal(OAIGoogleCloudChannelV1ListChannelPartnerLinksResponse summary);
    void cloudchannel_accounts_checkCloudIdentityAccountsExistSignal(OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistResponse summary);
    void cloudchannel_accounts_customers_createSignal(OAIGoogleCloudChannelV1Customer summary);
    void cloudchannel_accounts_customers_customerRepricingConfigs_createSignal(OAIGoogleCloudChannelV1CustomerRepricingConfig summary);
    void cloudchannel_accounts_customers_customerRepricingConfigs_listSignal(OAIGoogleCloudChannelV1ListCustomerRepricingConfigsResponse summary);
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchSignal(OAIGoogleCloudChannelV1CustomerRepricingConfig summary);
    void cloudchannel_accounts_customers_entitlements_activateSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_changeOfferSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_changeParametersSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_createSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_listSignal(OAIGoogleCloudChannelV1ListEntitlementsResponse summary);
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignal(OAIGoogleCloudChannelV1ListEntitlementChangesResponse summary);
    void cloudchannel_accounts_customers_entitlements_lookupOfferSignal(OAIGoogleCloudChannelV1Offer summary);
    void cloudchannel_accounts_customers_entitlements_startPaidServiceSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_suspendSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_importSignal(OAIGoogleCloudChannelV1Customer summary);
    void cloudchannel_accounts_customers_listSignal(OAIGoogleCloudChannelV1ListCustomersResponse summary);
    void cloudchannel_accounts_customers_listPurchasableOffersSignal(OAIGoogleCloudChannelV1ListPurchasableOffersResponse summary);
    void cloudchannel_accounts_customers_listPurchasableSkusSignal(OAIGoogleCloudChannelV1ListPurchasableSkusResponse summary);
    void cloudchannel_accounts_customers_provisionCloudIdentitySignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsSignal(OAIGoogleCloudChannelV1QueryEligibleBillingAccountsResponse summary);
    void cloudchannel_accounts_customers_transferEntitlementsSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_listSubscribersSignal(OAIGoogleCloudChannelV1ListSubscribersResponse summary);
    void cloudchannel_accounts_listTransferableOffersSignal(OAIGoogleCloudChannelV1ListTransferableOffersResponse summary);
    void cloudchannel_accounts_listTransferableSkusSignal(OAIGoogleCloudChannelV1ListTransferableSkusResponse summary);
    void cloudchannel_accounts_offers_listSignal(OAIGoogleCloudChannelV1ListOffersResponse summary);
    void cloudchannel_accounts_registerSignal(OAIGoogleCloudChannelV1RegisterSubscriberResponse summary);
    void cloudchannel_accounts_reportJobs_fetchReportResultsSignal(OAIGoogleCloudChannelV1FetchReportResultsResponse summary);
    void cloudchannel_accounts_reports_listSignal(OAIGoogleCloudChannelV1ListReportsResponse summary);
    void cloudchannel_accounts_reports_runSignal(OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_skuGroups_billableSkus_listSignal(OAIGoogleCloudChannelV1ListSkuGroupBillableSkusResponse summary);
    void cloudchannel_accounts_skuGroups_listSignal(OAIGoogleCloudChannelV1ListSkuGroupsResponse summary);
    void cloudchannel_accounts_unregisterSignal(OAIGoogleCloudChannelV1UnregisterSubscriberResponse summary);


    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig summary);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListChannelPartnerRepricingConfigsResponse summary);
    void cloudchannel_accounts_channelPartnerLinks_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ChannelPartnerLink summary);
    void cloudchannel_accounts_channelPartnerLinks_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListChannelPartnerLinksResponse summary);
    void cloudchannel_accounts_checkCloudIdentityAccountsExistSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistResponse summary);
    void cloudchannel_accounts_customers_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1Customer summary);
    void cloudchannel_accounts_customers_customerRepricingConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1CustomerRepricingConfig summary);
    void cloudchannel_accounts_customers_customerRepricingConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListCustomerRepricingConfigsResponse summary);
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1CustomerRepricingConfig summary);
    void cloudchannel_accounts_customers_entitlements_activateSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_changeOfferSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_changeParametersSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_createSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListEntitlementsResponse summary);
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListEntitlementChangesResponse summary);
    void cloudchannel_accounts_customers_entitlements_lookupOfferSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1Offer summary);
    void cloudchannel_accounts_customers_entitlements_startPaidServiceSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_entitlements_suspendSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_importSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1Customer summary);
    void cloudchannel_accounts_customers_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListCustomersResponse summary);
    void cloudchannel_accounts_customers_listPurchasableOffersSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListPurchasableOffersResponse summary);
    void cloudchannel_accounts_customers_listPurchasableSkusSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListPurchasableSkusResponse summary);
    void cloudchannel_accounts_customers_provisionCloudIdentitySignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1QueryEligibleBillingAccountsResponse summary);
    void cloudchannel_accounts_customers_transferEntitlementsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_listSubscribersSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListSubscribersResponse summary);
    void cloudchannel_accounts_listTransferableOffersSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListTransferableOffersResponse summary);
    void cloudchannel_accounts_listTransferableSkusSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListTransferableSkusResponse summary);
    void cloudchannel_accounts_offers_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListOffersResponse summary);
    void cloudchannel_accounts_registerSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1RegisterSubscriberResponse summary);
    void cloudchannel_accounts_reportJobs_fetchReportResultsSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1FetchReportResultsResponse summary);
    void cloudchannel_accounts_reports_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListReportsResponse summary);
    void cloudchannel_accounts_reports_runSignalFull(OAIHttpRequestWorker *worker, OAIGoogleLongrunningOperation summary);
    void cloudchannel_accounts_skuGroups_billableSkus_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListSkuGroupBillableSkusResponse summary);
    void cloudchannel_accounts_skuGroups_listSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1ListSkuGroupsResponse summary);
    void cloudchannel_accounts_unregisterSignalFull(OAIHttpRequestWorker *worker, OAIGoogleCloudChannelV1UnregisterSubscriberResponse summary);

    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalError() instead")
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalE(OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalError(OAIGoogleCloudChannelV1ChannelPartnerRepricingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalError() instead")
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalE(OAIGoogleCloudChannelV1ListChannelPartnerRepricingConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalError(OAIGoogleCloudChannelV1ListChannelPartnerRepricingConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_createSignalError() instead")
    void cloudchannel_accounts_channelPartnerLinks_createSignalE(OAIGoogleCloudChannelV1ChannelPartnerLink summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_createSignalError(OAIGoogleCloudChannelV1ChannelPartnerLink summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_listSignalError() instead")
    void cloudchannel_accounts_channelPartnerLinks_listSignalE(OAIGoogleCloudChannelV1ListChannelPartnerLinksResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_listSignalError(OAIGoogleCloudChannelV1ListChannelPartnerLinksResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_checkCloudIdentityAccountsExistSignalError() instead")
    void cloudchannel_accounts_checkCloudIdentityAccountsExistSignalE(OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_checkCloudIdentityAccountsExistSignalError(OAIGoogleCloudChannelV1CheckCloudIdentityAccountsExistResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_createSignalError() instead")
    void cloudchannel_accounts_customers_createSignalE(OAIGoogleCloudChannelV1Customer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_createSignalError(OAIGoogleCloudChannelV1Customer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_customerRepricingConfigs_createSignalError() instead")
    void cloudchannel_accounts_customers_customerRepricingConfigs_createSignalE(OAIGoogleCloudChannelV1CustomerRepricingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_customerRepricingConfigs_createSignalError(OAIGoogleCloudChannelV1CustomerRepricingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_customerRepricingConfigs_listSignalError() instead")
    void cloudchannel_accounts_customers_customerRepricingConfigs_listSignalE(OAIGoogleCloudChannelV1ListCustomerRepricingConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_customerRepricingConfigs_listSignalError(OAIGoogleCloudChannelV1ListCustomerRepricingConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalError() instead")
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalE(OAIGoogleCloudChannelV1CustomerRepricingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalError(OAIGoogleCloudChannelV1CustomerRepricingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_activateSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_activateSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_activateSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_changeOfferSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_changeOfferSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_changeOfferSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_changeParametersSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_changeParametersSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_changeParametersSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_createSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_createSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_createSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_listSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_listSignalE(OAIGoogleCloudChannelV1ListEntitlementsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_listSignalError(OAIGoogleCloudChannelV1ListEntitlementsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalE(OAIGoogleCloudChannelV1ListEntitlementChangesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalError(OAIGoogleCloudChannelV1ListEntitlementChangesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_lookupOfferSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_lookupOfferSignalE(OAIGoogleCloudChannelV1Offer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_lookupOfferSignalError(OAIGoogleCloudChannelV1Offer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_startPaidServiceSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_startPaidServiceSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_startPaidServiceSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_suspendSignalError() instead")
    void cloudchannel_accounts_customers_entitlements_suspendSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_suspendSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_importSignalError() instead")
    void cloudchannel_accounts_customers_importSignalE(OAIGoogleCloudChannelV1Customer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_importSignalError(OAIGoogleCloudChannelV1Customer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_listSignalError() instead")
    void cloudchannel_accounts_customers_listSignalE(OAIGoogleCloudChannelV1ListCustomersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_listSignalError(OAIGoogleCloudChannelV1ListCustomersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_listPurchasableOffersSignalError() instead")
    void cloudchannel_accounts_customers_listPurchasableOffersSignalE(OAIGoogleCloudChannelV1ListPurchasableOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_listPurchasableOffersSignalError(OAIGoogleCloudChannelV1ListPurchasableOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_listPurchasableSkusSignalError() instead")
    void cloudchannel_accounts_customers_listPurchasableSkusSignalE(OAIGoogleCloudChannelV1ListPurchasableSkusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_listPurchasableSkusSignalError(OAIGoogleCloudChannelV1ListPurchasableSkusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_provisionCloudIdentitySignalError() instead")
    void cloudchannel_accounts_customers_provisionCloudIdentitySignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_provisionCloudIdentitySignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalError() instead")
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalE(OAIGoogleCloudChannelV1QueryEligibleBillingAccountsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalError(OAIGoogleCloudChannelV1QueryEligibleBillingAccountsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_transferEntitlementsSignalError() instead")
    void cloudchannel_accounts_customers_transferEntitlementsSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_transferEntitlementsSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalError() instead")
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_listSubscribersSignalError() instead")
    void cloudchannel_accounts_listSubscribersSignalE(OAIGoogleCloudChannelV1ListSubscribersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_listSubscribersSignalError(OAIGoogleCloudChannelV1ListSubscribersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_listTransferableOffersSignalError() instead")
    void cloudchannel_accounts_listTransferableOffersSignalE(OAIGoogleCloudChannelV1ListTransferableOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_listTransferableOffersSignalError(OAIGoogleCloudChannelV1ListTransferableOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_listTransferableSkusSignalError() instead")
    void cloudchannel_accounts_listTransferableSkusSignalE(OAIGoogleCloudChannelV1ListTransferableSkusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_listTransferableSkusSignalError(OAIGoogleCloudChannelV1ListTransferableSkusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_offers_listSignalError() instead")
    void cloudchannel_accounts_offers_listSignalE(OAIGoogleCloudChannelV1ListOffersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_offers_listSignalError(OAIGoogleCloudChannelV1ListOffersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_registerSignalError() instead")
    void cloudchannel_accounts_registerSignalE(OAIGoogleCloudChannelV1RegisterSubscriberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_registerSignalError(OAIGoogleCloudChannelV1RegisterSubscriberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_reportJobs_fetchReportResultsSignalError() instead")
    void cloudchannel_accounts_reportJobs_fetchReportResultsSignalE(OAIGoogleCloudChannelV1FetchReportResultsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_reportJobs_fetchReportResultsSignalError(OAIGoogleCloudChannelV1FetchReportResultsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_reports_listSignalError() instead")
    void cloudchannel_accounts_reports_listSignalE(OAIGoogleCloudChannelV1ListReportsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_reports_listSignalError(OAIGoogleCloudChannelV1ListReportsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_reports_runSignalError() instead")
    void cloudchannel_accounts_reports_runSignalE(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_reports_runSignalError(OAIGoogleLongrunningOperation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_skuGroups_billableSkus_listSignalError() instead")
    void cloudchannel_accounts_skuGroups_billableSkus_listSignalE(OAIGoogleCloudChannelV1ListSkuGroupBillableSkusResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_skuGroups_billableSkus_listSignalError(OAIGoogleCloudChannelV1ListSkuGroupBillableSkusResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_skuGroups_listSignalError() instead")
    void cloudchannel_accounts_skuGroups_listSignalE(OAIGoogleCloudChannelV1ListSkuGroupsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_skuGroups_listSignalError(OAIGoogleCloudChannelV1ListSkuGroupsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_unregisterSignalError() instead")
    void cloudchannel_accounts_unregisterSignalE(OAIGoogleCloudChannelV1UnregisterSubscriberResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_unregisterSignalError(OAIGoogleCloudChannelV1UnregisterSubscriberResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalErrorFull() instead")
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalErrorFull() instead")
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_channelPartnerRepricingConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_createSignalErrorFull() instead")
    void cloudchannel_accounts_channelPartnerLinks_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_channelPartnerLinks_listSignalErrorFull() instead")
    void cloudchannel_accounts_channelPartnerLinks_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_channelPartnerLinks_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_checkCloudIdentityAccountsExistSignalErrorFull() instead")
    void cloudchannel_accounts_checkCloudIdentityAccountsExistSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_checkCloudIdentityAccountsExistSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_createSignalErrorFull() instead")
    void cloudchannel_accounts_customers_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_customerRepricingConfigs_createSignalErrorFull() instead")
    void cloudchannel_accounts_customers_customerRepricingConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_customerRepricingConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_customerRepricingConfigs_listSignalErrorFull() instead")
    void cloudchannel_accounts_customers_customerRepricingConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_customerRepricingConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalErrorFull() instead")
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_customerRepricingConfigs_patchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_activateSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_changeOfferSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_changeOfferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_changeOfferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_changeParametersSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_changeParametersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_changeParametersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_changeRenewalSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_createSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_listSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_listEntitlementChangesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_lookupOfferSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_lookupOfferSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_lookupOfferSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_startPaidServiceSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_startPaidServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_startPaidServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_entitlements_suspendSignalErrorFull() instead")
    void cloudchannel_accounts_customers_entitlements_suspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_entitlements_suspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_importSignalErrorFull() instead")
    void cloudchannel_accounts_customers_importSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_importSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_listSignalErrorFull() instead")
    void cloudchannel_accounts_customers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_listPurchasableOffersSignalErrorFull() instead")
    void cloudchannel_accounts_customers_listPurchasableOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_listPurchasableOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_listPurchasableSkusSignalErrorFull() instead")
    void cloudchannel_accounts_customers_listPurchasableSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_listPurchasableSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_provisionCloudIdentitySignalErrorFull() instead")
    void cloudchannel_accounts_customers_provisionCloudIdentitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_provisionCloudIdentitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalErrorFull() instead")
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_queryEligibleBillingAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_transferEntitlementsSignalErrorFull() instead")
    void cloudchannel_accounts_customers_transferEntitlementsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_transferEntitlementsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalErrorFull() instead")
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_customers_transferEntitlementsToGoogleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_listSubscribersSignalErrorFull() instead")
    void cloudchannel_accounts_listSubscribersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_listSubscribersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_listTransferableOffersSignalErrorFull() instead")
    void cloudchannel_accounts_listTransferableOffersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_listTransferableOffersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_listTransferableSkusSignalErrorFull() instead")
    void cloudchannel_accounts_listTransferableSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_listTransferableSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_offers_listSignalErrorFull() instead")
    void cloudchannel_accounts_offers_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_offers_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_registerSignalErrorFull() instead")
    void cloudchannel_accounts_registerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_registerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_reportJobs_fetchReportResultsSignalErrorFull() instead")
    void cloudchannel_accounts_reportJobs_fetchReportResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_reportJobs_fetchReportResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_reports_listSignalErrorFull() instead")
    void cloudchannel_accounts_reports_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_reports_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_reports_runSignalErrorFull() instead")
    void cloudchannel_accounts_reports_runSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_reports_runSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_skuGroups_billableSkus_listSignalErrorFull() instead")
    void cloudchannel_accounts_skuGroups_billableSkus_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_skuGroups_billableSkus_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_skuGroups_listSignalErrorFull() instead")
    void cloudchannel_accounts_skuGroups_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_skuGroups_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cloudchannel_accounts_unregisterSignalErrorFull() instead")
    void cloudchannel_accounts_unregisterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cloudchannel_accounts_unregisterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
