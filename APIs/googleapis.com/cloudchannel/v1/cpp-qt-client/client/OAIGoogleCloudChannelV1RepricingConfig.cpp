/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1RepricingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1RepricingConfig::OAIGoogleCloudChannelV1RepricingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1RepricingConfig::OAIGoogleCloudChannelV1RepricingConfig() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1RepricingConfig::~OAIGoogleCloudChannelV1RepricingConfig() {}

void OAIGoogleCloudChannelV1RepricingConfig::initializeModel() {

    m_adjustment_isSet = false;
    m_adjustment_isValid = false;

    m_channel_partner_granularity_isSet = false;
    m_channel_partner_granularity_isValid = false;

    m_conditional_overrides_isSet = false;
    m_conditional_overrides_isValid = false;

    m_effective_invoice_month_isSet = false;
    m_effective_invoice_month_isValid = false;

    m_entitlement_granularity_isSet = false;
    m_entitlement_granularity_isValid = false;

    m_rebilling_basis_isSet = false;
    m_rebilling_basis_isValid = false;
}

void OAIGoogleCloudChannelV1RepricingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1RepricingConfig::fromJsonObject(QJsonObject json) {

    m_adjustment_isValid = ::OpenAPI::fromJsonValue(m_adjustment, json[QString("adjustment")]);
    m_adjustment_isSet = !json[QString("adjustment")].isNull() && m_adjustment_isValid;

    m_channel_partner_granularity_isValid = ::OpenAPI::fromJsonValue(m_channel_partner_granularity, json[QString("channelPartnerGranularity")]);
    m_channel_partner_granularity_isSet = !json[QString("channelPartnerGranularity")].isNull() && m_channel_partner_granularity_isValid;

    m_conditional_overrides_isValid = ::OpenAPI::fromJsonValue(m_conditional_overrides, json[QString("conditionalOverrides")]);
    m_conditional_overrides_isSet = !json[QString("conditionalOverrides")].isNull() && m_conditional_overrides_isValid;

    m_effective_invoice_month_isValid = ::OpenAPI::fromJsonValue(m_effective_invoice_month, json[QString("effectiveInvoiceMonth")]);
    m_effective_invoice_month_isSet = !json[QString("effectiveInvoiceMonth")].isNull() && m_effective_invoice_month_isValid;

    m_entitlement_granularity_isValid = ::OpenAPI::fromJsonValue(m_entitlement_granularity, json[QString("entitlementGranularity")]);
    m_entitlement_granularity_isSet = !json[QString("entitlementGranularity")].isNull() && m_entitlement_granularity_isValid;

    m_rebilling_basis_isValid = ::OpenAPI::fromJsonValue(m_rebilling_basis, json[QString("rebillingBasis")]);
    m_rebilling_basis_isSet = !json[QString("rebillingBasis")].isNull() && m_rebilling_basis_isValid;
}

QString OAIGoogleCloudChannelV1RepricingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1RepricingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustment.isSet()) {
        obj.insert(QString("adjustment"), ::OpenAPI::toJsonValue(m_adjustment));
    }
    if (m_channel_partner_granularity_isSet) {
        obj.insert(QString("channelPartnerGranularity"), ::OpenAPI::toJsonValue(m_channel_partner_granularity));
    }
    if (m_conditional_overrides.size() > 0) {
        obj.insert(QString("conditionalOverrides"), ::OpenAPI::toJsonValue(m_conditional_overrides));
    }
    if (m_effective_invoice_month.isSet()) {
        obj.insert(QString("effectiveInvoiceMonth"), ::OpenAPI::toJsonValue(m_effective_invoice_month));
    }
    if (m_entitlement_granularity.isSet()) {
        obj.insert(QString("entitlementGranularity"), ::OpenAPI::toJsonValue(m_entitlement_granularity));
    }
    if (m_rebilling_basis_isSet) {
        obj.insert(QString("rebillingBasis"), ::OpenAPI::toJsonValue(m_rebilling_basis));
    }
    return obj;
}

OAIGoogleCloudChannelV1RepricingAdjustment OAIGoogleCloudChannelV1RepricingConfig::getAdjustment() const {
    return m_adjustment;
}
void OAIGoogleCloudChannelV1RepricingConfig::setAdjustment(const OAIGoogleCloudChannelV1RepricingAdjustment &adjustment) {
    m_adjustment = adjustment;
    m_adjustment_isSet = true;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_adjustment_Set() const{
    return m_adjustment_isSet;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_adjustment_Valid() const{
    return m_adjustment_isValid;
}

OAIObject OAIGoogleCloudChannelV1RepricingConfig::getChannelPartnerGranularity() const {
    return m_channel_partner_granularity;
}
void OAIGoogleCloudChannelV1RepricingConfig::setChannelPartnerGranularity(const OAIObject &channel_partner_granularity) {
    m_channel_partner_granularity = channel_partner_granularity;
    m_channel_partner_granularity_isSet = true;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_channel_partner_granularity_Set() const{
    return m_channel_partner_granularity_isSet;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_channel_partner_granularity_Valid() const{
    return m_channel_partner_granularity_isValid;
}

QList<OAIGoogleCloudChannelV1ConditionalOverride> OAIGoogleCloudChannelV1RepricingConfig::getConditionalOverrides() const {
    return m_conditional_overrides;
}
void OAIGoogleCloudChannelV1RepricingConfig::setConditionalOverrides(const QList<OAIGoogleCloudChannelV1ConditionalOverride> &conditional_overrides) {
    m_conditional_overrides = conditional_overrides;
    m_conditional_overrides_isSet = true;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_conditional_overrides_Set() const{
    return m_conditional_overrides_isSet;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_conditional_overrides_Valid() const{
    return m_conditional_overrides_isValid;
}

OAIGoogleTypeDate OAIGoogleCloudChannelV1RepricingConfig::getEffectiveInvoiceMonth() const {
    return m_effective_invoice_month;
}
void OAIGoogleCloudChannelV1RepricingConfig::setEffectiveInvoiceMonth(const OAIGoogleTypeDate &effective_invoice_month) {
    m_effective_invoice_month = effective_invoice_month;
    m_effective_invoice_month_isSet = true;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_effective_invoice_month_Set() const{
    return m_effective_invoice_month_isSet;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_effective_invoice_month_Valid() const{
    return m_effective_invoice_month_isValid;
}

OAIGoogleCloudChannelV1RepricingConfigEntitlementGranularity OAIGoogleCloudChannelV1RepricingConfig::getEntitlementGranularity() const {
    return m_entitlement_granularity;
}
void OAIGoogleCloudChannelV1RepricingConfig::setEntitlementGranularity(const OAIGoogleCloudChannelV1RepricingConfigEntitlementGranularity &entitlement_granularity) {
    m_entitlement_granularity = entitlement_granularity;
    m_entitlement_granularity_isSet = true;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_entitlement_granularity_Set() const{
    return m_entitlement_granularity_isSet;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_entitlement_granularity_Valid() const{
    return m_entitlement_granularity_isValid;
}

QString OAIGoogleCloudChannelV1RepricingConfig::getRebillingBasis() const {
    return m_rebilling_basis;
}
void OAIGoogleCloudChannelV1RepricingConfig::setRebillingBasis(const QString &rebilling_basis) {
    m_rebilling_basis = rebilling_basis;
    m_rebilling_basis_isSet = true;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_rebilling_basis_Set() const{
    return m_rebilling_basis_isSet;
}

bool OAIGoogleCloudChannelV1RepricingConfig::is_rebilling_basis_Valid() const{
    return m_rebilling_basis_isValid;
}

bool OAIGoogleCloudChannelV1RepricingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_channel_partner_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conditional_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_invoice_month.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_entitlement_granularity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rebilling_basis_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1RepricingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
