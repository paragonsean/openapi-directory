/**
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGoogleCloudChannelV1RenewalSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGoogleCloudChannelV1RenewalSettings::OAIGoogleCloudChannelV1RenewalSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGoogleCloudChannelV1RenewalSettings::OAIGoogleCloudChannelV1RenewalSettings() {
    this->initializeModel();
}

OAIGoogleCloudChannelV1RenewalSettings::~OAIGoogleCloudChannelV1RenewalSettings() {}

void OAIGoogleCloudChannelV1RenewalSettings::initializeModel() {

    m_enable_renewal_isSet = false;
    m_enable_renewal_isValid = false;

    m_payment_cycle_isSet = false;
    m_payment_cycle_isValid = false;

    m_payment_plan_isSet = false;
    m_payment_plan_isValid = false;

    m_resize_unit_count_isSet = false;
    m_resize_unit_count_isValid = false;
}

void OAIGoogleCloudChannelV1RenewalSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGoogleCloudChannelV1RenewalSettings::fromJsonObject(QJsonObject json) {

    m_enable_renewal_isValid = ::OpenAPI::fromJsonValue(m_enable_renewal, json[QString("enableRenewal")]);
    m_enable_renewal_isSet = !json[QString("enableRenewal")].isNull() && m_enable_renewal_isValid;

    m_payment_cycle_isValid = ::OpenAPI::fromJsonValue(m_payment_cycle, json[QString("paymentCycle")]);
    m_payment_cycle_isSet = !json[QString("paymentCycle")].isNull() && m_payment_cycle_isValid;

    m_payment_plan_isValid = ::OpenAPI::fromJsonValue(m_payment_plan, json[QString("paymentPlan")]);
    m_payment_plan_isSet = !json[QString("paymentPlan")].isNull() && m_payment_plan_isValid;

    m_resize_unit_count_isValid = ::OpenAPI::fromJsonValue(m_resize_unit_count, json[QString("resizeUnitCount")]);
    m_resize_unit_count_isSet = !json[QString("resizeUnitCount")].isNull() && m_resize_unit_count_isValid;
}

QString OAIGoogleCloudChannelV1RenewalSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGoogleCloudChannelV1RenewalSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_renewal_isSet) {
        obj.insert(QString("enableRenewal"), ::OpenAPI::toJsonValue(m_enable_renewal));
    }
    if (m_payment_cycle.isSet()) {
        obj.insert(QString("paymentCycle"), ::OpenAPI::toJsonValue(m_payment_cycle));
    }
    if (m_payment_plan_isSet) {
        obj.insert(QString("paymentPlan"), ::OpenAPI::toJsonValue(m_payment_plan));
    }
    if (m_resize_unit_count_isSet) {
        obj.insert(QString("resizeUnitCount"), ::OpenAPI::toJsonValue(m_resize_unit_count));
    }
    return obj;
}

bool OAIGoogleCloudChannelV1RenewalSettings::isEnableRenewal() const {
    return m_enable_renewal;
}
void OAIGoogleCloudChannelV1RenewalSettings::setEnableRenewal(const bool &enable_renewal) {
    m_enable_renewal = enable_renewal;
    m_enable_renewal_isSet = true;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_enable_renewal_Set() const{
    return m_enable_renewal_isSet;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_enable_renewal_Valid() const{
    return m_enable_renewal_isValid;
}

OAIGoogleCloudChannelV1Period OAIGoogleCloudChannelV1RenewalSettings::getPaymentCycle() const {
    return m_payment_cycle;
}
void OAIGoogleCloudChannelV1RenewalSettings::setPaymentCycle(const OAIGoogleCloudChannelV1Period &payment_cycle) {
    m_payment_cycle = payment_cycle;
    m_payment_cycle_isSet = true;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_payment_cycle_Set() const{
    return m_payment_cycle_isSet;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_payment_cycle_Valid() const{
    return m_payment_cycle_isValid;
}

QString OAIGoogleCloudChannelV1RenewalSettings::getPaymentPlan() const {
    return m_payment_plan;
}
void OAIGoogleCloudChannelV1RenewalSettings::setPaymentPlan(const QString &payment_plan) {
    m_payment_plan = payment_plan;
    m_payment_plan_isSet = true;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_payment_plan_Set() const{
    return m_payment_plan_isSet;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_payment_plan_Valid() const{
    return m_payment_plan_isValid;
}

bool OAIGoogleCloudChannelV1RenewalSettings::isResizeUnitCount() const {
    return m_resize_unit_count;
}
void OAIGoogleCloudChannelV1RenewalSettings::setResizeUnitCount(const bool &resize_unit_count) {
    m_resize_unit_count = resize_unit_count;
    m_resize_unit_count_isSet = true;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_resize_unit_count_Set() const{
    return m_resize_unit_count_isSet;
}

bool OAIGoogleCloudChannelV1RenewalSettings::is_resize_unit_count_Valid() const{
    return m_resize_unit_count_isValid;
}

bool OAIGoogleCloudChannelV1RenewalSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_renewal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_cycle.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resize_unit_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGoogleCloudChannelV1RenewalSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
