/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudChannelV1alpha1Period;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Renewal settings for renewable Offers.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1alpha1RenewalSettings {
  public static final String SERIALIZED_NAME_DISABLE_COMMITMENT = "disableCommitment";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_DISABLE_COMMITMENT)
  private Boolean disableCommitment;

  public static final String SERIALIZED_NAME_ENABLE_RENEWAL = "enableRenewal";
  @SerializedName(SERIALIZED_NAME_ENABLE_RENEWAL)
  private Boolean enableRenewal;

  public static final String SERIALIZED_NAME_PAYMENT_CYCLE = "paymentCycle";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CYCLE)
  private GoogleCloudChannelV1alpha1Period paymentCycle;

  /**
   * Set if enable_renewal&#x3D;true. Deprecated: Use &#x60;payment_cycle&#x60; instead.
   */
  @JsonAdapter(PaymentOptionEnum.Adapter.class)
  public enum PaymentOptionEnum {
    PAYMENT_OPTION_UNSPECIFIED("PAYMENT_OPTION_UNSPECIFIED"),
    
    ANNUAL("ANNUAL"),
    
    MONTHLY("MONTHLY");

    private String value;

    PaymentOptionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentOptionEnum fromValue(String value) {
      for (PaymentOptionEnum b : PaymentOptionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentOptionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentOptionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentOptionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentOptionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentOptionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_OPTION = "paymentOption";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_PAYMENT_OPTION)
  private PaymentOptionEnum paymentOption;

  /**
   * Describes how a reseller will be billed.
   */
  @JsonAdapter(PaymentPlanEnum.Adapter.class)
  public enum PaymentPlanEnum {
    PAYMENT_PLAN_UNSPECIFIED("PAYMENT_PLAN_UNSPECIFIED"),
    
    COMMITMENT("COMMITMENT"),
    
    FLEXIBLE("FLEXIBLE"),
    
    FREE("FREE"),
    
    TRIAL("TRIAL"),
    
    OFFLINE("OFFLINE");

    private String value;

    PaymentPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentPlanEnum fromValue(String value) {
      for (PaymentPlanEnum b : PaymentPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_PLAN = "paymentPlan";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PLAN)
  private PaymentPlanEnum paymentPlan;

  public static final String SERIALIZED_NAME_RESIZE_UNIT_COUNT = "resizeUnitCount";
  @SerializedName(SERIALIZED_NAME_RESIZE_UNIT_COUNT)
  private Boolean resizeUnitCount;

  public static final String SERIALIZED_NAME_SCHEDULED_RENEWAL_OFFER = "scheduledRenewalOffer";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_RENEWAL_OFFER)
  private String scheduledRenewalOffer;

  public GoogleCloudChannelV1alpha1RenewalSettings() {
  }

  public GoogleCloudChannelV1alpha1RenewalSettings(
     String scheduledRenewalOffer
  ) {
    this();
    this.scheduledRenewalOffer = scheduledRenewalOffer;
  }

  @Deprecated
  public GoogleCloudChannelV1alpha1RenewalSettings disableCommitment(Boolean disableCommitment) {
    this.disableCommitment = disableCommitment;
    return this;
  }

  /**
   * If true, disables commitment-based offer on renewal and switches to flexible or pay as you go. Deprecated: Use &#x60;payment_plan&#x60; instead.
   * @return disableCommitment
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getDisableCommitment() {
    return disableCommitment;
  }

  @Deprecated
  public void setDisableCommitment(Boolean disableCommitment) {
    this.disableCommitment = disableCommitment;
  }


  public GoogleCloudChannelV1alpha1RenewalSettings enableRenewal(Boolean enableRenewal) {
    this.enableRenewal = enableRenewal;
    return this;
  }

  /**
   * If false, the plan will be completed at the end date.
   * @return enableRenewal
   */
  @javax.annotation.Nullable
  public Boolean getEnableRenewal() {
    return enableRenewal;
  }

  public void setEnableRenewal(Boolean enableRenewal) {
    this.enableRenewal = enableRenewal;
  }


  public GoogleCloudChannelV1alpha1RenewalSettings paymentCycle(GoogleCloudChannelV1alpha1Period paymentCycle) {
    this.paymentCycle = paymentCycle;
    return this;
  }

  /**
   * Get paymentCycle
   * @return paymentCycle
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1alpha1Period getPaymentCycle() {
    return paymentCycle;
  }

  public void setPaymentCycle(GoogleCloudChannelV1alpha1Period paymentCycle) {
    this.paymentCycle = paymentCycle;
  }


  @Deprecated
  public GoogleCloudChannelV1alpha1RenewalSettings paymentOption(PaymentOptionEnum paymentOption) {
    this.paymentOption = paymentOption;
    return this;
  }

  /**
   * Set if enable_renewal&#x3D;true. Deprecated: Use &#x60;payment_cycle&#x60; instead.
   * @return paymentOption
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public PaymentOptionEnum getPaymentOption() {
    return paymentOption;
  }

  @Deprecated
  public void setPaymentOption(PaymentOptionEnum paymentOption) {
    this.paymentOption = paymentOption;
  }


  public GoogleCloudChannelV1alpha1RenewalSettings paymentPlan(PaymentPlanEnum paymentPlan) {
    this.paymentPlan = paymentPlan;
    return this;
  }

  /**
   * Describes how a reseller will be billed.
   * @return paymentPlan
   */
  @javax.annotation.Nullable
  public PaymentPlanEnum getPaymentPlan() {
    return paymentPlan;
  }

  public void setPaymentPlan(PaymentPlanEnum paymentPlan) {
    this.paymentPlan = paymentPlan;
  }


  public GoogleCloudChannelV1alpha1RenewalSettings resizeUnitCount(Boolean resizeUnitCount) {
    this.resizeUnitCount = resizeUnitCount;
    return this;
  }

  /**
   * If true and enable_renewal &#x3D; true, the unit (for example seats or licenses) will be set to the number of active units at renewal time.
   * @return resizeUnitCount
   */
  @javax.annotation.Nullable
  public Boolean getResizeUnitCount() {
    return resizeUnitCount;
  }

  public void setResizeUnitCount(Boolean resizeUnitCount) {
    this.resizeUnitCount = resizeUnitCount;
  }


  /**
   * Output only. The offer resource name that the entitlement will renew on at the end date. Takes the form: accounts/{account_id}/offers/{offer_id}.
   * @return scheduledRenewalOffer
   */
  @javax.annotation.Nullable
  public String getScheduledRenewalOffer() {
    return scheduledRenewalOffer;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1alpha1RenewalSettings googleCloudChannelV1alpha1RenewalSettings = (GoogleCloudChannelV1alpha1RenewalSettings) o;
    return Objects.equals(this.disableCommitment, googleCloudChannelV1alpha1RenewalSettings.disableCommitment) &&
        Objects.equals(this.enableRenewal, googleCloudChannelV1alpha1RenewalSettings.enableRenewal) &&
        Objects.equals(this.paymentCycle, googleCloudChannelV1alpha1RenewalSettings.paymentCycle) &&
        Objects.equals(this.paymentOption, googleCloudChannelV1alpha1RenewalSettings.paymentOption) &&
        Objects.equals(this.paymentPlan, googleCloudChannelV1alpha1RenewalSettings.paymentPlan) &&
        Objects.equals(this.resizeUnitCount, googleCloudChannelV1alpha1RenewalSettings.resizeUnitCount) &&
        Objects.equals(this.scheduledRenewalOffer, googleCloudChannelV1alpha1RenewalSettings.scheduledRenewalOffer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disableCommitment, enableRenewal, paymentCycle, paymentOption, paymentPlan, resizeUnitCount, scheduledRenewalOffer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1alpha1RenewalSettings {\n");
    sb.append("    disableCommitment: ").append(toIndentedString(disableCommitment)).append("\n");
    sb.append("    enableRenewal: ").append(toIndentedString(enableRenewal)).append("\n");
    sb.append("    paymentCycle: ").append(toIndentedString(paymentCycle)).append("\n");
    sb.append("    paymentOption: ").append(toIndentedString(paymentOption)).append("\n");
    sb.append("    paymentPlan: ").append(toIndentedString(paymentPlan)).append("\n");
    sb.append("    resizeUnitCount: ").append(toIndentedString(resizeUnitCount)).append("\n");
    sb.append("    scheduledRenewalOffer: ").append(toIndentedString(scheduledRenewalOffer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disableCommitment");
    openapiFields.add("enableRenewal");
    openapiFields.add("paymentCycle");
    openapiFields.add("paymentOption");
    openapiFields.add("paymentPlan");
    openapiFields.add("resizeUnitCount");
    openapiFields.add("scheduledRenewalOffer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1alpha1RenewalSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1alpha1RenewalSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1alpha1RenewalSettings is not found in the empty JSON string", GoogleCloudChannelV1alpha1RenewalSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1alpha1RenewalSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1alpha1RenewalSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `paymentCycle`
      if (jsonObj.get("paymentCycle") != null && !jsonObj.get("paymentCycle").isJsonNull()) {
        GoogleCloudChannelV1alpha1Period.validateJsonElement(jsonObj.get("paymentCycle"));
      }
      if ((jsonObj.get("paymentOption") != null && !jsonObj.get("paymentOption").isJsonNull()) && !jsonObj.get("paymentOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentOption").toString()));
      }
      // validate the optional field `paymentOption`
      if (jsonObj.get("paymentOption") != null && !jsonObj.get("paymentOption").isJsonNull()) {
        PaymentOptionEnum.validateJsonElement(jsonObj.get("paymentOption"));
      }
      if ((jsonObj.get("paymentPlan") != null && !jsonObj.get("paymentPlan").isJsonNull()) && !jsonObj.get("paymentPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPlan").toString()));
      }
      // validate the optional field `paymentPlan`
      if (jsonObj.get("paymentPlan") != null && !jsonObj.get("paymentPlan").isJsonNull()) {
        PaymentPlanEnum.validateJsonElement(jsonObj.get("paymentPlan"));
      }
      if ((jsonObj.get("scheduledRenewalOffer") != null && !jsonObj.get("scheduledRenewalOffer").isJsonNull()) && !jsonObj.get("scheduledRenewalOffer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledRenewalOffer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledRenewalOffer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1alpha1RenewalSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1alpha1RenewalSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1alpha1RenewalSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1alpha1RenewalSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1alpha1RenewalSettings>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1alpha1RenewalSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1alpha1RenewalSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1alpha1RenewalSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1alpha1RenewalSettings
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1alpha1RenewalSettings
   */
  public static GoogleCloudChannelV1alpha1RenewalSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1alpha1RenewalSettings.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1alpha1RenewalSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

