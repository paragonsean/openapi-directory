/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request message for CloudChannelService.ImportCustomer
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1ImportCustomerRequest {
  public static final String SERIALIZED_NAME_AUTH_TOKEN = "authToken";
  @SerializedName(SERIALIZED_NAME_AUTH_TOKEN)
  private String authToken;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_ID = "channelPartnerId";
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_ID)
  private String channelPartnerId;

  public static final String SERIALIZED_NAME_CLOUD_IDENTITY_ID = "cloudIdentityId";
  @SerializedName(SERIALIZED_NAME_CLOUD_IDENTITY_ID)
  private String cloudIdentityId;

  public static final String SERIALIZED_NAME_CUSTOMER = "customer";
  @SerializedName(SERIALIZED_NAME_CUSTOMER)
  private String customer;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_OVERWRITE_IF_EXISTS = "overwriteIfExists";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_IF_EXISTS)
  private Boolean overwriteIfExists;

  public GoogleCloudChannelV1ImportCustomerRequest() {
  }

  public GoogleCloudChannelV1ImportCustomerRequest authToken(String authToken) {
    this.authToken = authToken;
    return this;
  }

  /**
   * Optional. The super admin of the resold customer generates this token to authorize a reseller to access their Cloud Identity and purchase entitlements on their behalf. You can omit this token after authorization. See https://support.google.com/a/answer/7643790 for more details.
   * @return authToken
   */
  @javax.annotation.Nullable
  public String getAuthToken() {
    return authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }


  public GoogleCloudChannelV1ImportCustomerRequest channelPartnerId(String channelPartnerId) {
    this.channelPartnerId = channelPartnerId;
    return this;
  }

  /**
   * Optional. Cloud Identity ID of a channel partner who will be the direct reseller for the customer&#39;s order. This field is required for 2-tier transfer scenarios and can be provided via the request Parent binding as well.
   * @return channelPartnerId
   */
  @javax.annotation.Nullable
  public String getChannelPartnerId() {
    return channelPartnerId;
  }

  public void setChannelPartnerId(String channelPartnerId) {
    this.channelPartnerId = channelPartnerId;
  }


  public GoogleCloudChannelV1ImportCustomerRequest cloudIdentityId(String cloudIdentityId) {
    this.cloudIdentityId = cloudIdentityId;
    return this;
  }

  /**
   * Required. Customer&#39;s Cloud Identity ID
   * @return cloudIdentityId
   */
  @javax.annotation.Nullable
  public String getCloudIdentityId() {
    return cloudIdentityId;
  }

  public void setCloudIdentityId(String cloudIdentityId) {
    this.cloudIdentityId = cloudIdentityId;
  }


  public GoogleCloudChannelV1ImportCustomerRequest customer(String customer) {
    this.customer = customer;
    return this;
  }

  /**
   * Optional. Specifies the customer that will receive imported Cloud Identity information. Format: accounts/{account_id}/customers/{customer_id}
   * @return customer
   */
  @javax.annotation.Nullable
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }


  public GoogleCloudChannelV1ImportCustomerRequest domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Required. Customer domain.
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public GoogleCloudChannelV1ImportCustomerRequest overwriteIfExists(Boolean overwriteIfExists) {
    this.overwriteIfExists = overwriteIfExists;
    return this;
  }

  /**
   * Required. Choose to overwrite an existing customer if found. This must be set to true if there is an existing customer with a conflicting region code or domain.
   * @return overwriteIfExists
   */
  @javax.annotation.Nullable
  public Boolean getOverwriteIfExists() {
    return overwriteIfExists;
  }

  public void setOverwriteIfExists(Boolean overwriteIfExists) {
    this.overwriteIfExists = overwriteIfExists;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1ImportCustomerRequest googleCloudChannelV1ImportCustomerRequest = (GoogleCloudChannelV1ImportCustomerRequest) o;
    return Objects.equals(this.authToken, googleCloudChannelV1ImportCustomerRequest.authToken) &&
        Objects.equals(this.channelPartnerId, googleCloudChannelV1ImportCustomerRequest.channelPartnerId) &&
        Objects.equals(this.cloudIdentityId, googleCloudChannelV1ImportCustomerRequest.cloudIdentityId) &&
        Objects.equals(this.customer, googleCloudChannelV1ImportCustomerRequest.customer) &&
        Objects.equals(this.domain, googleCloudChannelV1ImportCustomerRequest.domain) &&
        Objects.equals(this.overwriteIfExists, googleCloudChannelV1ImportCustomerRequest.overwriteIfExists);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authToken, channelPartnerId, cloudIdentityId, customer, domain, overwriteIfExists);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1ImportCustomerRequest {\n");
    sb.append("    authToken: ").append(toIndentedString(authToken)).append("\n");
    sb.append("    channelPartnerId: ").append(toIndentedString(channelPartnerId)).append("\n");
    sb.append("    cloudIdentityId: ").append(toIndentedString(cloudIdentityId)).append("\n");
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    overwriteIfExists: ").append(toIndentedString(overwriteIfExists)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authToken");
    openapiFields.add("channelPartnerId");
    openapiFields.add("cloudIdentityId");
    openapiFields.add("customer");
    openapiFields.add("domain");
    openapiFields.add("overwriteIfExists");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1ImportCustomerRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1ImportCustomerRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1ImportCustomerRequest is not found in the empty JSON string", GoogleCloudChannelV1ImportCustomerRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1ImportCustomerRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1ImportCustomerRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("authToken") != null && !jsonObj.get("authToken").isJsonNull()) && !jsonObj.get("authToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authToken").toString()));
      }
      if ((jsonObj.get("channelPartnerId") != null && !jsonObj.get("channelPartnerId").isJsonNull()) && !jsonObj.get("channelPartnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `channelPartnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("channelPartnerId").toString()));
      }
      if ((jsonObj.get("cloudIdentityId") != null && !jsonObj.get("cloudIdentityId").isJsonNull()) && !jsonObj.get("cloudIdentityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudIdentityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudIdentityId").toString()));
      }
      if ((jsonObj.get("customer") != null && !jsonObj.get("customer").isJsonNull()) && !jsonObj.get("customer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1ImportCustomerRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1ImportCustomerRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1ImportCustomerRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1ImportCustomerRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1ImportCustomerRequest>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1ImportCustomerRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1ImportCustomerRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1ImportCustomerRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1ImportCustomerRequest
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1ImportCustomerRequest
   */
  public static GoogleCloudChannelV1ImportCustomerRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1ImportCustomerRequest.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1ImportCustomerRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

