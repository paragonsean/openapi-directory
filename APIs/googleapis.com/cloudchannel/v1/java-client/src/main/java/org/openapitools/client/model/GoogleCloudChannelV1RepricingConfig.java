/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudChannelV1ConditionalOverride;
import org.openapitools.client.model.GoogleCloudChannelV1RepricingAdjustment;
import org.openapitools.client.model.GoogleCloudChannelV1RepricingConfigEntitlementGranularity;
import org.openapitools.client.model.GoogleTypeDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for repricing a Google bill over a period of time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1RepricingConfig {
  public static final String SERIALIZED_NAME_ADJUSTMENT = "adjustment";
  @SerializedName(SERIALIZED_NAME_ADJUSTMENT)
  private GoogleCloudChannelV1RepricingAdjustment adjustment;

  public static final String SERIALIZED_NAME_CHANNEL_PARTNER_GRANULARITY = "channelPartnerGranularity";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CHANNEL_PARTNER_GRANULARITY)
  private Object channelPartnerGranularity;

  public static final String SERIALIZED_NAME_CONDITIONAL_OVERRIDES = "conditionalOverrides";
  @SerializedName(SERIALIZED_NAME_CONDITIONAL_OVERRIDES)
  private List<GoogleCloudChannelV1ConditionalOverride> conditionalOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_INVOICE_MONTH = "effectiveInvoiceMonth";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_INVOICE_MONTH)
  private GoogleTypeDate effectiveInvoiceMonth;

  public static final String SERIALIZED_NAME_ENTITLEMENT_GRANULARITY = "entitlementGranularity";
  @SerializedName(SERIALIZED_NAME_ENTITLEMENT_GRANULARITY)
  private GoogleCloudChannelV1RepricingConfigEntitlementGranularity entitlementGranularity;

  /**
   * Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.
   */
  @JsonAdapter(RebillingBasisEnum.Adapter.class)
  public enum RebillingBasisEnum {
    REBILLING_BASIS_UNSPECIFIED("REBILLING_BASIS_UNSPECIFIED"),
    
    COST_AT_LIST("COST_AT_LIST"),
    
    DIRECT_CUSTOMER_COST("DIRECT_CUSTOMER_COST");

    private String value;

    RebillingBasisEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RebillingBasisEnum fromValue(String value) {
      for (RebillingBasisEnum b : RebillingBasisEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RebillingBasisEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RebillingBasisEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RebillingBasisEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RebillingBasisEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RebillingBasisEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REBILLING_BASIS = "rebillingBasis";
  @SerializedName(SERIALIZED_NAME_REBILLING_BASIS)
  private RebillingBasisEnum rebillingBasis;

  public GoogleCloudChannelV1RepricingConfig() {
  }

  public GoogleCloudChannelV1RepricingConfig adjustment(GoogleCloudChannelV1RepricingAdjustment adjustment) {
    this.adjustment = adjustment;
    return this;
  }

  /**
   * Get adjustment
   * @return adjustment
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1RepricingAdjustment getAdjustment() {
    return adjustment;
  }

  public void setAdjustment(GoogleCloudChannelV1RepricingAdjustment adjustment) {
    this.adjustment = adjustment;
  }


  @Deprecated
  public GoogleCloudChannelV1RepricingConfig channelPartnerGranularity(Object channelPartnerGranularity) {
    this.channelPartnerGranularity = channelPartnerGranularity;
    return this;
  }

  /**
   * Applies the repricing configuration at the channel partner level. The channel partner value is derived from the resource name. Takes an empty json object. Deprecated: This is no longer supported. Use RepricingConfig.EntitlementGranularity instead.
   * @return channelPartnerGranularity
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Object getChannelPartnerGranularity() {
    return channelPartnerGranularity;
  }

  @Deprecated
  public void setChannelPartnerGranularity(Object channelPartnerGranularity) {
    this.channelPartnerGranularity = channelPartnerGranularity;
  }


  public GoogleCloudChannelV1RepricingConfig conditionalOverrides(List<GoogleCloudChannelV1ConditionalOverride> conditionalOverrides) {
    this.conditionalOverrides = conditionalOverrides;
    return this;
  }

  public GoogleCloudChannelV1RepricingConfig addConditionalOverridesItem(GoogleCloudChannelV1ConditionalOverride conditionalOverridesItem) {
    if (this.conditionalOverrides == null) {
      this.conditionalOverrides = new ArrayList<>();
    }
    this.conditionalOverrides.add(conditionalOverridesItem);
    return this;
  }

  /**
   * The conditional overrides to apply for this configuration. If you list multiple overrides, only the first valid override is used. If you don&#39;t list any overrides, the API uses the normal adjustment and rebilling basis.
   * @return conditionalOverrides
   */
  @javax.annotation.Nullable
  public List<GoogleCloudChannelV1ConditionalOverride> getConditionalOverrides() {
    return conditionalOverrides;
  }

  public void setConditionalOverrides(List<GoogleCloudChannelV1ConditionalOverride> conditionalOverrides) {
    this.conditionalOverrides = conditionalOverrides;
  }


  public GoogleCloudChannelV1RepricingConfig effectiveInvoiceMonth(GoogleTypeDate effectiveInvoiceMonth) {
    this.effectiveInvoiceMonth = effectiveInvoiceMonth;
    return this;
  }

  /**
   * Get effectiveInvoiceMonth
   * @return effectiveInvoiceMonth
   */
  @javax.annotation.Nullable
  public GoogleTypeDate getEffectiveInvoiceMonth() {
    return effectiveInvoiceMonth;
  }

  public void setEffectiveInvoiceMonth(GoogleTypeDate effectiveInvoiceMonth) {
    this.effectiveInvoiceMonth = effectiveInvoiceMonth;
  }


  public GoogleCloudChannelV1RepricingConfig entitlementGranularity(GoogleCloudChannelV1RepricingConfigEntitlementGranularity entitlementGranularity) {
    this.entitlementGranularity = entitlementGranularity;
    return this;
  }

  /**
   * Get entitlementGranularity
   * @return entitlementGranularity
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1RepricingConfigEntitlementGranularity getEntitlementGranularity() {
    return entitlementGranularity;
  }

  public void setEntitlementGranularity(GoogleCloudChannelV1RepricingConfigEntitlementGranularity entitlementGranularity) {
    this.entitlementGranularity = entitlementGranularity;
  }


  public GoogleCloudChannelV1RepricingConfig rebillingBasis(RebillingBasisEnum rebillingBasis) {
    this.rebillingBasis = rebillingBasis;
    return this;
  }

  /**
   * Required. The RebillingBasis to use for this bill. Specifies the relative cost based on repricing costs you will apply.
   * @return rebillingBasis
   */
  @javax.annotation.Nullable
  public RebillingBasisEnum getRebillingBasis() {
    return rebillingBasis;
  }

  public void setRebillingBasis(RebillingBasisEnum rebillingBasis) {
    this.rebillingBasis = rebillingBasis;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1RepricingConfig googleCloudChannelV1RepricingConfig = (GoogleCloudChannelV1RepricingConfig) o;
    return Objects.equals(this.adjustment, googleCloudChannelV1RepricingConfig.adjustment) &&
        Objects.equals(this.channelPartnerGranularity, googleCloudChannelV1RepricingConfig.channelPartnerGranularity) &&
        Objects.equals(this.conditionalOverrides, googleCloudChannelV1RepricingConfig.conditionalOverrides) &&
        Objects.equals(this.effectiveInvoiceMonth, googleCloudChannelV1RepricingConfig.effectiveInvoiceMonth) &&
        Objects.equals(this.entitlementGranularity, googleCloudChannelV1RepricingConfig.entitlementGranularity) &&
        Objects.equals(this.rebillingBasis, googleCloudChannelV1RepricingConfig.rebillingBasis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adjustment, channelPartnerGranularity, conditionalOverrides, effectiveInvoiceMonth, entitlementGranularity, rebillingBasis);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1RepricingConfig {\n");
    sb.append("    adjustment: ").append(toIndentedString(adjustment)).append("\n");
    sb.append("    channelPartnerGranularity: ").append(toIndentedString(channelPartnerGranularity)).append("\n");
    sb.append("    conditionalOverrides: ").append(toIndentedString(conditionalOverrides)).append("\n");
    sb.append("    effectiveInvoiceMonth: ").append(toIndentedString(effectiveInvoiceMonth)).append("\n");
    sb.append("    entitlementGranularity: ").append(toIndentedString(entitlementGranularity)).append("\n");
    sb.append("    rebillingBasis: ").append(toIndentedString(rebillingBasis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adjustment");
    openapiFields.add("channelPartnerGranularity");
    openapiFields.add("conditionalOverrides");
    openapiFields.add("effectiveInvoiceMonth");
    openapiFields.add("entitlementGranularity");
    openapiFields.add("rebillingBasis");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1RepricingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1RepricingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1RepricingConfig is not found in the empty JSON string", GoogleCloudChannelV1RepricingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1RepricingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1RepricingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adjustment`
      if (jsonObj.get("adjustment") != null && !jsonObj.get("adjustment").isJsonNull()) {
        GoogleCloudChannelV1RepricingAdjustment.validateJsonElement(jsonObj.get("adjustment"));
      }
      if (jsonObj.get("conditionalOverrides") != null && !jsonObj.get("conditionalOverrides").isJsonNull()) {
        JsonArray jsonArrayconditionalOverrides = jsonObj.getAsJsonArray("conditionalOverrides");
        if (jsonArrayconditionalOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conditionalOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conditionalOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("conditionalOverrides").toString()));
          }

          // validate the optional field `conditionalOverrides` (array)
          for (int i = 0; i < jsonArrayconditionalOverrides.size(); i++) {
            GoogleCloudChannelV1ConditionalOverride.validateJsonElement(jsonArrayconditionalOverrides.get(i));
          };
        }
      }
      // validate the optional field `effectiveInvoiceMonth`
      if (jsonObj.get("effectiveInvoiceMonth") != null && !jsonObj.get("effectiveInvoiceMonth").isJsonNull()) {
        GoogleTypeDate.validateJsonElement(jsonObj.get("effectiveInvoiceMonth"));
      }
      // validate the optional field `entitlementGranularity`
      if (jsonObj.get("entitlementGranularity") != null && !jsonObj.get("entitlementGranularity").isJsonNull()) {
        GoogleCloudChannelV1RepricingConfigEntitlementGranularity.validateJsonElement(jsonObj.get("entitlementGranularity"));
      }
      if ((jsonObj.get("rebillingBasis") != null && !jsonObj.get("rebillingBasis").isJsonNull()) && !jsonObj.get("rebillingBasis").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rebillingBasis` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rebillingBasis").toString()));
      }
      // validate the optional field `rebillingBasis`
      if (jsonObj.get("rebillingBasis") != null && !jsonObj.get("rebillingBasis").isJsonNull()) {
        RebillingBasisEnum.validateJsonElement(jsonObj.get("rebillingBasis"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1RepricingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1RepricingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1RepricingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1RepricingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1RepricingConfig>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1RepricingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1RepricingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1RepricingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1RepricingConfig
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1RepricingConfig
   */
  public static GoogleCloudChannelV1RepricingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1RepricingConfig.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1RepricingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

