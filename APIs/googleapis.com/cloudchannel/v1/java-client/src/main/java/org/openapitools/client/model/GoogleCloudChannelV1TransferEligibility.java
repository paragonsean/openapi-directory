/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies transfer eligibility of a SKU.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1TransferEligibility {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Specified the reason for ineligibility.
   */
  @JsonAdapter(IneligibilityReasonEnum.Adapter.class)
  public enum IneligibilityReasonEnum {
    REASON_UNSPECIFIED("REASON_UNSPECIFIED"),
    
    PENDING_TOS_ACCEPTANCE("PENDING_TOS_ACCEPTANCE"),
    
    SKU_NOT_ELIGIBLE("SKU_NOT_ELIGIBLE"),
    
    SKU_SUSPENDED("SKU_SUSPENDED"),
    
    CHANNEL_PARTNER_NOT_AUTHORIZED_FOR_SKU("CHANNEL_PARTNER_NOT_AUTHORIZED_FOR_SKU");

    private String value;

    IneligibilityReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IneligibilityReasonEnum fromValue(String value) {
      for (IneligibilityReasonEnum b : IneligibilityReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IneligibilityReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IneligibilityReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IneligibilityReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IneligibilityReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IneligibilityReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INELIGIBILITY_REASON = "ineligibilityReason";
  @SerializedName(SERIALIZED_NAME_INELIGIBILITY_REASON)
  private IneligibilityReasonEnum ineligibilityReason;

  public static final String SERIALIZED_NAME_IS_ELIGIBLE = "isEligible";
  @SerializedName(SERIALIZED_NAME_IS_ELIGIBLE)
  private Boolean isEligible;

  public GoogleCloudChannelV1TransferEligibility() {
  }

  public GoogleCloudChannelV1TransferEligibility description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Localized description if reseller is not eligible to transfer the SKU.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleCloudChannelV1TransferEligibility ineligibilityReason(IneligibilityReasonEnum ineligibilityReason) {
    this.ineligibilityReason = ineligibilityReason;
    return this;
  }

  /**
   * Specified the reason for ineligibility.
   * @return ineligibilityReason
   */
  @javax.annotation.Nullable
  public IneligibilityReasonEnum getIneligibilityReason() {
    return ineligibilityReason;
  }

  public void setIneligibilityReason(IneligibilityReasonEnum ineligibilityReason) {
    this.ineligibilityReason = ineligibilityReason;
  }


  public GoogleCloudChannelV1TransferEligibility isEligible(Boolean isEligible) {
    this.isEligible = isEligible;
    return this;
  }

  /**
   * Whether reseller is eligible to transfer the SKU.
   * @return isEligible
   */
  @javax.annotation.Nullable
  public Boolean getIsEligible() {
    return isEligible;
  }

  public void setIsEligible(Boolean isEligible) {
    this.isEligible = isEligible;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1TransferEligibility googleCloudChannelV1TransferEligibility = (GoogleCloudChannelV1TransferEligibility) o;
    return Objects.equals(this.description, googleCloudChannelV1TransferEligibility.description) &&
        Objects.equals(this.ineligibilityReason, googleCloudChannelV1TransferEligibility.ineligibilityReason) &&
        Objects.equals(this.isEligible, googleCloudChannelV1TransferEligibility.isEligible);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, ineligibilityReason, isEligible);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1TransferEligibility {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ineligibilityReason: ").append(toIndentedString(ineligibilityReason)).append("\n");
    sb.append("    isEligible: ").append(toIndentedString(isEligible)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("ineligibilityReason");
    openapiFields.add("isEligible");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1TransferEligibility
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1TransferEligibility.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1TransferEligibility is not found in the empty JSON string", GoogleCloudChannelV1TransferEligibility.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1TransferEligibility.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1TransferEligibility` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("ineligibilityReason") != null && !jsonObj.get("ineligibilityReason").isJsonNull()) && !jsonObj.get("ineligibilityReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ineligibilityReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ineligibilityReason").toString()));
      }
      // validate the optional field `ineligibilityReason`
      if (jsonObj.get("ineligibilityReason") != null && !jsonObj.get("ineligibilityReason").isJsonNull()) {
        IneligibilityReasonEnum.validateJsonElement(jsonObj.get("ineligibilityReason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1TransferEligibility.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1TransferEligibility' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1TransferEligibility> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1TransferEligibility.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1TransferEligibility>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1TransferEligibility value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1TransferEligibility read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1TransferEligibility given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1TransferEligibility
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1TransferEligibility
   */
  public static GoogleCloudChannelV1TransferEligibility fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1TransferEligibility.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1TransferEligibility to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

