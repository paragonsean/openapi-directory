/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Required Edu Attributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1EduData {
  /**
   * Size of the institute.
   */
  @JsonAdapter(InstituteSizeEnum.Adapter.class)
  public enum InstituteSizeEnum {
    INSTITUTE_SIZE_UNSPECIFIED("INSTITUTE_SIZE_UNSPECIFIED"),
    
    SIZE_1_100("SIZE_1_100"),
    
    SIZE_101_500("SIZE_101_500"),
    
    SIZE_501_1000("SIZE_501_1000"),
    
    SIZE_1001_2000("SIZE_1001_2000"),
    
    SIZE_2001_5000("SIZE_2001_5000"),
    
    SIZE_5001_10000("SIZE_5001_10000"),
    
    SIZE_10001_OR_MORE("SIZE_10001_OR_MORE");

    private String value;

    InstituteSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstituteSizeEnum fromValue(String value) {
      for (InstituteSizeEnum b : InstituteSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstituteSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstituteSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstituteSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstituteSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstituteSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTITUTE_SIZE = "instituteSize";
  @SerializedName(SERIALIZED_NAME_INSTITUTE_SIZE)
  private InstituteSizeEnum instituteSize;

  /**
   * Designated institute type of customer.
   */
  @JsonAdapter(InstituteTypeEnum.Adapter.class)
  public enum InstituteTypeEnum {
    INSTITUTE_TYPE_UNSPECIFIED("INSTITUTE_TYPE_UNSPECIFIED"),
    
    K12("K12"),
    
    UNIVERSITY("UNIVERSITY");

    private String value;

    InstituteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstituteTypeEnum fromValue(String value) {
      for (InstituteTypeEnum b : InstituteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstituteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstituteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstituteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstituteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstituteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTITUTE_TYPE = "instituteType";
  @SerializedName(SERIALIZED_NAME_INSTITUTE_TYPE)
  private InstituteTypeEnum instituteType;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public GoogleCloudChannelV1EduData() {
  }

  public GoogleCloudChannelV1EduData instituteSize(InstituteSizeEnum instituteSize) {
    this.instituteSize = instituteSize;
    return this;
  }

  /**
   * Size of the institute.
   * @return instituteSize
   */
  @javax.annotation.Nullable
  public InstituteSizeEnum getInstituteSize() {
    return instituteSize;
  }

  public void setInstituteSize(InstituteSizeEnum instituteSize) {
    this.instituteSize = instituteSize;
  }


  public GoogleCloudChannelV1EduData instituteType(InstituteTypeEnum instituteType) {
    this.instituteType = instituteType;
    return this;
  }

  /**
   * Designated institute type of customer.
   * @return instituteType
   */
  @javax.annotation.Nullable
  public InstituteTypeEnum getInstituteType() {
    return instituteType;
  }

  public void setInstituteType(InstituteTypeEnum instituteType) {
    this.instituteType = instituteType;
  }


  public GoogleCloudChannelV1EduData website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Web address for the edu customer&#39;s institution.
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1EduData googleCloudChannelV1EduData = (GoogleCloudChannelV1EduData) o;
    return Objects.equals(this.instituteSize, googleCloudChannelV1EduData.instituteSize) &&
        Objects.equals(this.instituteType, googleCloudChannelV1EduData.instituteType) &&
        Objects.equals(this.website, googleCloudChannelV1EduData.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instituteSize, instituteType, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1EduData {\n");
    sb.append("    instituteSize: ").append(toIndentedString(instituteSize)).append("\n");
    sb.append("    instituteType: ").append(toIndentedString(instituteType)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instituteSize");
    openapiFields.add("instituteType");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1EduData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1EduData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1EduData is not found in the empty JSON string", GoogleCloudChannelV1EduData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1EduData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1EduData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("instituteSize") != null && !jsonObj.get("instituteSize").isJsonNull()) && !jsonObj.get("instituteSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instituteSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instituteSize").toString()));
      }
      // validate the optional field `instituteSize`
      if (jsonObj.get("instituteSize") != null && !jsonObj.get("instituteSize").isJsonNull()) {
        InstituteSizeEnum.validateJsonElement(jsonObj.get("instituteSize"));
      }
      if ((jsonObj.get("instituteType") != null && !jsonObj.get("instituteType").isJsonNull()) && !jsonObj.get("instituteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instituteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instituteType").toString()));
      }
      // validate the optional field `instituteType`
      if (jsonObj.get("instituteType") != null && !jsonObj.get("instituteType").isJsonNull()) {
        InstituteTypeEnum.validateJsonElement(jsonObj.get("instituteType"));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1EduData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1EduData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1EduData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1EduData.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1EduData>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1EduData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1EduData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1EduData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1EduData
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1EduData
   */
  public static GoogleCloudChannelV1EduData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1EduData.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1EduData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

