/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudChannelV1Value;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Parameter&#39;s definition. Specifies what parameter is required to use the current Offer to purchase.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1ParameterDefinition {
  public static final String SERIALIZED_NAME_ALLOWED_VALUES = "allowedValues";
  @SerializedName(SERIALIZED_NAME_ALLOWED_VALUES)
  private List<GoogleCloudChannelV1Value> allowedValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_VALUE = "maxValue";
  @SerializedName(SERIALIZED_NAME_MAX_VALUE)
  private GoogleCloudChannelV1Value maxValue;

  public static final String SERIALIZED_NAME_MIN_VALUE = "minValue";
  @SerializedName(SERIALIZED_NAME_MIN_VALUE)
  private GoogleCloudChannelV1Value minValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OPTIONAL = "optional";
  @SerializedName(SERIALIZED_NAME_OPTIONAL)
  private Boolean optional;

  /**
   * Data type of the parameter. Minimal value, Maximum value and allowed values will use specified data type here.
   */
  @JsonAdapter(ParameterTypeEnum.Adapter.class)
  public enum ParameterTypeEnum {
    PARAMETER_TYPE_UNSPECIFIED("PARAMETER_TYPE_UNSPECIFIED"),
    
    INT64("INT64"),
    
    STRING("STRING"),
    
    DOUBLE("DOUBLE"),
    
    BOOLEAN("BOOLEAN");

    private String value;

    ParameterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParameterTypeEnum fromValue(String value) {
      for (ParameterTypeEnum b : ParameterTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ParameterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParameterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ParameterTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ParameterTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PARAMETER_TYPE = "parameterType";
  @SerializedName(SERIALIZED_NAME_PARAMETER_TYPE)
  private ParameterTypeEnum parameterType;

  public GoogleCloudChannelV1ParameterDefinition() {
  }

  public GoogleCloudChannelV1ParameterDefinition allowedValues(List<GoogleCloudChannelV1Value> allowedValues) {
    this.allowedValues = allowedValues;
    return this;
  }

  public GoogleCloudChannelV1ParameterDefinition addAllowedValuesItem(GoogleCloudChannelV1Value allowedValuesItem) {
    if (this.allowedValues == null) {
      this.allowedValues = new ArrayList<>();
    }
    this.allowedValues.add(allowedValuesItem);
    return this;
  }

  /**
   * If not empty, parameter values must be drawn from this list. For example, [us-west1, us-west2, ...] Applicable to STRING parameter type.
   * @return allowedValues
   */
  @javax.annotation.Nullable
  public List<GoogleCloudChannelV1Value> getAllowedValues() {
    return allowedValues;
  }

  public void setAllowedValues(List<GoogleCloudChannelV1Value> allowedValues) {
    this.allowedValues = allowedValues;
  }


  public GoogleCloudChannelV1ParameterDefinition maxValue(GoogleCloudChannelV1Value maxValue) {
    this.maxValue = maxValue;
    return this;
  }

  /**
   * Get maxValue
   * @return maxValue
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1Value getMaxValue() {
    return maxValue;
  }

  public void setMaxValue(GoogleCloudChannelV1Value maxValue) {
    this.maxValue = maxValue;
  }


  public GoogleCloudChannelV1ParameterDefinition minValue(GoogleCloudChannelV1Value minValue) {
    this.minValue = minValue;
    return this;
  }

  /**
   * Get minValue
   * @return minValue
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1Value getMinValue() {
    return minValue;
  }

  public void setMinValue(GoogleCloudChannelV1Value minValue) {
    this.minValue = minValue;
  }


  public GoogleCloudChannelV1ParameterDefinition name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the parameter.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleCloudChannelV1ParameterDefinition optional(Boolean optional) {
    this.optional = optional;
    return this;
  }

  /**
   * If set to true, parameter is optional to purchase this Offer.
   * @return optional
   */
  @javax.annotation.Nullable
  public Boolean getOptional() {
    return optional;
  }

  public void setOptional(Boolean optional) {
    this.optional = optional;
  }


  public GoogleCloudChannelV1ParameterDefinition parameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
    return this;
  }

  /**
   * Data type of the parameter. Minimal value, Maximum value and allowed values will use specified data type here.
   * @return parameterType
   */
  @javax.annotation.Nullable
  public ParameterTypeEnum getParameterType() {
    return parameterType;
  }

  public void setParameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1ParameterDefinition googleCloudChannelV1ParameterDefinition = (GoogleCloudChannelV1ParameterDefinition) o;
    return Objects.equals(this.allowedValues, googleCloudChannelV1ParameterDefinition.allowedValues) &&
        Objects.equals(this.maxValue, googleCloudChannelV1ParameterDefinition.maxValue) &&
        Objects.equals(this.minValue, googleCloudChannelV1ParameterDefinition.minValue) &&
        Objects.equals(this.name, googleCloudChannelV1ParameterDefinition.name) &&
        Objects.equals(this.optional, googleCloudChannelV1ParameterDefinition.optional) &&
        Objects.equals(this.parameterType, googleCloudChannelV1ParameterDefinition.parameterType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedValues, maxValue, minValue, name, optional, parameterType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1ParameterDefinition {\n");
    sb.append("    allowedValues: ").append(toIndentedString(allowedValues)).append("\n");
    sb.append("    maxValue: ").append(toIndentedString(maxValue)).append("\n");
    sb.append("    minValue: ").append(toIndentedString(minValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    optional: ").append(toIndentedString(optional)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedValues");
    openapiFields.add("maxValue");
    openapiFields.add("minValue");
    openapiFields.add("name");
    openapiFields.add("optional");
    openapiFields.add("parameterType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1ParameterDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1ParameterDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1ParameterDefinition is not found in the empty JSON string", GoogleCloudChannelV1ParameterDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1ParameterDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1ParameterDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allowedValues") != null && !jsonObj.get("allowedValues").isJsonNull()) {
        JsonArray jsonArrayallowedValues = jsonObj.getAsJsonArray("allowedValues");
        if (jsonArrayallowedValues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allowedValues").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allowedValues` to be an array in the JSON string but got `%s`", jsonObj.get("allowedValues").toString()));
          }

          // validate the optional field `allowedValues` (array)
          for (int i = 0; i < jsonArrayallowedValues.size(); i++) {
            GoogleCloudChannelV1Value.validateJsonElement(jsonArrayallowedValues.get(i));
          };
        }
      }
      // validate the optional field `maxValue`
      if (jsonObj.get("maxValue") != null && !jsonObj.get("maxValue").isJsonNull()) {
        GoogleCloudChannelV1Value.validateJsonElement(jsonObj.get("maxValue"));
      }
      // validate the optional field `minValue`
      if (jsonObj.get("minValue") != null && !jsonObj.get("minValue").isJsonNull()) {
        GoogleCloudChannelV1Value.validateJsonElement(jsonObj.get("minValue"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("parameterType") != null && !jsonObj.get("parameterType").isJsonNull()) && !jsonObj.get("parameterType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameterType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parameterType").toString()));
      }
      // validate the optional field `parameterType`
      if (jsonObj.get("parameterType") != null && !jsonObj.get("parameterType").isJsonNull()) {
        ParameterTypeEnum.validateJsonElement(jsonObj.get("parameterType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1ParameterDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1ParameterDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1ParameterDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1ParameterDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1ParameterDefinition>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1ParameterDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1ParameterDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1ParameterDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1ParameterDefinition
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1ParameterDefinition
   */
  public static GoogleCloudChannelV1ParameterDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1ParameterDefinition.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1ParameterDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

