/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GoogleCloudChannelV1Price;
import org.openapitools.client.model.GoogleCloudChannelV1PriceTier;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the price by the duration of months. For example, a 20% discount for the first six months, then a 10% discount starting on the seventh month.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1PricePhase {
  public static final String SERIALIZED_NAME_FIRST_PERIOD = "firstPeriod";
  @SerializedName(SERIALIZED_NAME_FIRST_PERIOD)
  private Integer firstPeriod;

  public static final String SERIALIZED_NAME_LAST_PERIOD = "lastPeriod";
  @SerializedName(SERIALIZED_NAME_LAST_PERIOD)
  private Integer lastPeriod;

  /**
   * Defines the phase period type.
   */
  @JsonAdapter(PeriodTypeEnum.Adapter.class)
  public enum PeriodTypeEnum {
    PERIOD_TYPE_UNSPECIFIED("PERIOD_TYPE_UNSPECIFIED"),
    
    DAY("DAY"),
    
    MONTH("MONTH"),
    
    YEAR("YEAR");

    private String value;

    PeriodTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeriodTypeEnum fromValue(String value) {
      for (PeriodTypeEnum b : PeriodTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeriodTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeriodTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeriodTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeriodTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeriodTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PERIOD_TYPE = "periodType";
  @SerializedName(SERIALIZED_NAME_PERIOD_TYPE)
  private PeriodTypeEnum periodType;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private GoogleCloudChannelV1Price price;

  public static final String SERIALIZED_NAME_PRICE_TIERS = "priceTiers";
  @SerializedName(SERIALIZED_NAME_PRICE_TIERS)
  private List<GoogleCloudChannelV1PriceTier> priceTiers = new ArrayList<>();

  public GoogleCloudChannelV1PricePhase() {
  }

  public GoogleCloudChannelV1PricePhase firstPeriod(Integer firstPeriod) {
    this.firstPeriod = firstPeriod;
    return this;
  }

  /**
   * Defines first period for the phase.
   * @return firstPeriod
   */
  @javax.annotation.Nullable
  public Integer getFirstPeriod() {
    return firstPeriod;
  }

  public void setFirstPeriod(Integer firstPeriod) {
    this.firstPeriod = firstPeriod;
  }


  public GoogleCloudChannelV1PricePhase lastPeriod(Integer lastPeriod) {
    this.lastPeriod = lastPeriod;
    return this;
  }

  /**
   * Defines first period for the phase.
   * @return lastPeriod
   */
  @javax.annotation.Nullable
  public Integer getLastPeriod() {
    return lastPeriod;
  }

  public void setLastPeriod(Integer lastPeriod) {
    this.lastPeriod = lastPeriod;
  }


  public GoogleCloudChannelV1PricePhase periodType(PeriodTypeEnum periodType) {
    this.periodType = periodType;
    return this;
  }

  /**
   * Defines the phase period type.
   * @return periodType
   */
  @javax.annotation.Nullable
  public PeriodTypeEnum getPeriodType() {
    return periodType;
  }

  public void setPeriodType(PeriodTypeEnum periodType) {
    this.periodType = periodType;
  }


  public GoogleCloudChannelV1PricePhase price(GoogleCloudChannelV1Price price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1Price getPrice() {
    return price;
  }

  public void setPrice(GoogleCloudChannelV1Price price) {
    this.price = price;
  }


  public GoogleCloudChannelV1PricePhase priceTiers(List<GoogleCloudChannelV1PriceTier> priceTiers) {
    this.priceTiers = priceTiers;
    return this;
  }

  public GoogleCloudChannelV1PricePhase addPriceTiersItem(GoogleCloudChannelV1PriceTier priceTiersItem) {
    if (this.priceTiers == null) {
      this.priceTiers = new ArrayList<>();
    }
    this.priceTiers.add(priceTiersItem);
    return this;
  }

  /**
   * Price by the resource tiers.
   * @return priceTiers
   */
  @javax.annotation.Nullable
  public List<GoogleCloudChannelV1PriceTier> getPriceTiers() {
    return priceTiers;
  }

  public void setPriceTiers(List<GoogleCloudChannelV1PriceTier> priceTiers) {
    this.priceTiers = priceTiers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1PricePhase googleCloudChannelV1PricePhase = (GoogleCloudChannelV1PricePhase) o;
    return Objects.equals(this.firstPeriod, googleCloudChannelV1PricePhase.firstPeriod) &&
        Objects.equals(this.lastPeriod, googleCloudChannelV1PricePhase.lastPeriod) &&
        Objects.equals(this.periodType, googleCloudChannelV1PricePhase.periodType) &&
        Objects.equals(this.price, googleCloudChannelV1PricePhase.price) &&
        Objects.equals(this.priceTiers, googleCloudChannelV1PricePhase.priceTiers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(firstPeriod, lastPeriod, periodType, price, priceTiers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1PricePhase {\n");
    sb.append("    firstPeriod: ").append(toIndentedString(firstPeriod)).append("\n");
    sb.append("    lastPeriod: ").append(toIndentedString(lastPeriod)).append("\n");
    sb.append("    periodType: ").append(toIndentedString(periodType)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceTiers: ").append(toIndentedString(priceTiers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("firstPeriod");
    openapiFields.add("lastPeriod");
    openapiFields.add("periodType");
    openapiFields.add("price");
    openapiFields.add("priceTiers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1PricePhase
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1PricePhase.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1PricePhase is not found in the empty JSON string", GoogleCloudChannelV1PricePhase.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1PricePhase.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1PricePhase` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("periodType") != null && !jsonObj.get("periodType").isJsonNull()) && !jsonObj.get("periodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `periodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("periodType").toString()));
      }
      // validate the optional field `periodType`
      if (jsonObj.get("periodType") != null && !jsonObj.get("periodType").isJsonNull()) {
        PeriodTypeEnum.validateJsonElement(jsonObj.get("periodType"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        GoogleCloudChannelV1Price.validateJsonElement(jsonObj.get("price"));
      }
      if (jsonObj.get("priceTiers") != null && !jsonObj.get("priceTiers").isJsonNull()) {
        JsonArray jsonArraypriceTiers = jsonObj.getAsJsonArray("priceTiers");
        if (jsonArraypriceTiers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("priceTiers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `priceTiers` to be an array in the JSON string but got `%s`", jsonObj.get("priceTiers").toString()));
          }

          // validate the optional field `priceTiers` (array)
          for (int i = 0; i < jsonArraypriceTiers.size(); i++) {
            GoogleCloudChannelV1PriceTier.validateJsonElement(jsonArraypriceTiers.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1PricePhase.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1PricePhase' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1PricePhase> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1PricePhase.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1PricePhase>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1PricePhase value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1PricePhase read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1PricePhase given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1PricePhase
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1PricePhase
   */
  public static GoogleCloudChannelV1PricePhase fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1PricePhase.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1PricePhase to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

