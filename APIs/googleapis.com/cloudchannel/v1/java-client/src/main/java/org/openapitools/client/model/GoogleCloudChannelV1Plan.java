/*
 * Cloud Channel API
 * The Cloud Channel API enables Google Cloud partners to have a single unified resale platform and APIs across all of Google Cloud including GCP, Workspace, Maps and Chrome.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleCloudChannelV1Period;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The payment plan for the Offer. Describes how to make a payment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:35:50.180583-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleCloudChannelV1Plan {
  public static final String SERIALIZED_NAME_BILLING_ACCOUNT = "billingAccount";
  @SerializedName(SERIALIZED_NAME_BILLING_ACCOUNT)
  private String billingAccount;

  public static final String SERIALIZED_NAME_PAYMENT_CYCLE = "paymentCycle";
  @SerializedName(SERIALIZED_NAME_PAYMENT_CYCLE)
  private GoogleCloudChannelV1Period paymentCycle;

  /**
   * Describes how a reseller will be billed.
   */
  @JsonAdapter(PaymentPlanEnum.Adapter.class)
  public enum PaymentPlanEnum {
    PAYMENT_PLAN_UNSPECIFIED("PAYMENT_PLAN_UNSPECIFIED"),
    
    COMMITMENT("COMMITMENT"),
    
    FLEXIBLE("FLEXIBLE"),
    
    FREE("FREE"),
    
    TRIAL("TRIAL"),
    
    OFFLINE("OFFLINE");

    private String value;

    PaymentPlanEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentPlanEnum fromValue(String value) {
      for (PaymentPlanEnum b : PaymentPlanEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentPlanEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentPlanEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentPlanEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentPlanEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentPlanEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_PLAN = "paymentPlan";
  @SerializedName(SERIALIZED_NAME_PAYMENT_PLAN)
  private PaymentPlanEnum paymentPlan;

  /**
   * Specifies when the payment needs to happen.
   */
  @JsonAdapter(PaymentTypeEnum.Adapter.class)
  public enum PaymentTypeEnum {
    PAYMENT_TYPE_UNSPECIFIED("PAYMENT_TYPE_UNSPECIFIED"),
    
    PREPAY("PREPAY"),
    
    POSTPAY("POSTPAY");

    private String value;

    PaymentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PaymentTypeEnum fromValue(String value) {
      for (PaymentTypeEnum b : PaymentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PaymentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PaymentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PaymentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PaymentTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PaymentTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PAYMENT_TYPE = "paymentType";
  @SerializedName(SERIALIZED_NAME_PAYMENT_TYPE)
  private PaymentTypeEnum paymentType;

  public static final String SERIALIZED_NAME_TRIAL_PERIOD = "trialPeriod";
  @SerializedName(SERIALIZED_NAME_TRIAL_PERIOD)
  private GoogleCloudChannelV1Period trialPeriod;

  public GoogleCloudChannelV1Plan() {
  }

  public GoogleCloudChannelV1Plan billingAccount(String billingAccount) {
    this.billingAccount = billingAccount;
    return this;
  }

  /**
   * Reseller Billing account to charge after an offer transaction. Only present for Google Cloud offers.
   * @return billingAccount
   */
  @javax.annotation.Nullable
  public String getBillingAccount() {
    return billingAccount;
  }

  public void setBillingAccount(String billingAccount) {
    this.billingAccount = billingAccount;
  }


  public GoogleCloudChannelV1Plan paymentCycle(GoogleCloudChannelV1Period paymentCycle) {
    this.paymentCycle = paymentCycle;
    return this;
  }

  /**
   * Get paymentCycle
   * @return paymentCycle
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1Period getPaymentCycle() {
    return paymentCycle;
  }

  public void setPaymentCycle(GoogleCloudChannelV1Period paymentCycle) {
    this.paymentCycle = paymentCycle;
  }


  public GoogleCloudChannelV1Plan paymentPlan(PaymentPlanEnum paymentPlan) {
    this.paymentPlan = paymentPlan;
    return this;
  }

  /**
   * Describes how a reseller will be billed.
   * @return paymentPlan
   */
  @javax.annotation.Nullable
  public PaymentPlanEnum getPaymentPlan() {
    return paymentPlan;
  }

  public void setPaymentPlan(PaymentPlanEnum paymentPlan) {
    this.paymentPlan = paymentPlan;
  }


  public GoogleCloudChannelV1Plan paymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
    return this;
  }

  /**
   * Specifies when the payment needs to happen.
   * @return paymentType
   */
  @javax.annotation.Nullable
  public PaymentTypeEnum getPaymentType() {
    return paymentType;
  }

  public void setPaymentType(PaymentTypeEnum paymentType) {
    this.paymentType = paymentType;
  }


  public GoogleCloudChannelV1Plan trialPeriod(GoogleCloudChannelV1Period trialPeriod) {
    this.trialPeriod = trialPeriod;
    return this;
  }

  /**
   * Get trialPeriod
   * @return trialPeriod
   */
  @javax.annotation.Nullable
  public GoogleCloudChannelV1Period getTrialPeriod() {
    return trialPeriod;
  }

  public void setTrialPeriod(GoogleCloudChannelV1Period trialPeriod) {
    this.trialPeriod = trialPeriod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleCloudChannelV1Plan googleCloudChannelV1Plan = (GoogleCloudChannelV1Plan) o;
    return Objects.equals(this.billingAccount, googleCloudChannelV1Plan.billingAccount) &&
        Objects.equals(this.paymentCycle, googleCloudChannelV1Plan.paymentCycle) &&
        Objects.equals(this.paymentPlan, googleCloudChannelV1Plan.paymentPlan) &&
        Objects.equals(this.paymentType, googleCloudChannelV1Plan.paymentType) &&
        Objects.equals(this.trialPeriod, googleCloudChannelV1Plan.trialPeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingAccount, paymentCycle, paymentPlan, paymentType, trialPeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleCloudChannelV1Plan {\n");
    sb.append("    billingAccount: ").append(toIndentedString(billingAccount)).append("\n");
    sb.append("    paymentCycle: ").append(toIndentedString(paymentCycle)).append("\n");
    sb.append("    paymentPlan: ").append(toIndentedString(paymentPlan)).append("\n");
    sb.append("    paymentType: ").append(toIndentedString(paymentType)).append("\n");
    sb.append("    trialPeriod: ").append(toIndentedString(trialPeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billingAccount");
    openapiFields.add("paymentCycle");
    openapiFields.add("paymentPlan");
    openapiFields.add("paymentType");
    openapiFields.add("trialPeriod");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleCloudChannelV1Plan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleCloudChannelV1Plan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleCloudChannelV1Plan is not found in the empty JSON string", GoogleCloudChannelV1Plan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleCloudChannelV1Plan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleCloudChannelV1Plan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingAccount") != null && !jsonObj.get("billingAccount").isJsonNull()) && !jsonObj.get("billingAccount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingAccount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingAccount").toString()));
      }
      // validate the optional field `paymentCycle`
      if (jsonObj.get("paymentCycle") != null && !jsonObj.get("paymentCycle").isJsonNull()) {
        GoogleCloudChannelV1Period.validateJsonElement(jsonObj.get("paymentCycle"));
      }
      if ((jsonObj.get("paymentPlan") != null && !jsonObj.get("paymentPlan").isJsonNull()) && !jsonObj.get("paymentPlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentPlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentPlan").toString()));
      }
      // validate the optional field `paymentPlan`
      if (jsonObj.get("paymentPlan") != null && !jsonObj.get("paymentPlan").isJsonNull()) {
        PaymentPlanEnum.validateJsonElement(jsonObj.get("paymentPlan"));
      }
      if ((jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) && !jsonObj.get("paymentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paymentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paymentType").toString()));
      }
      // validate the optional field `paymentType`
      if (jsonObj.get("paymentType") != null && !jsonObj.get("paymentType").isJsonNull()) {
        PaymentTypeEnum.validateJsonElement(jsonObj.get("paymentType"));
      }
      // validate the optional field `trialPeriod`
      if (jsonObj.get("trialPeriod") != null && !jsonObj.get("trialPeriod").isJsonNull()) {
        GoogleCloudChannelV1Period.validateJsonElement(jsonObj.get("trialPeriod"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleCloudChannelV1Plan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleCloudChannelV1Plan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleCloudChannelV1Plan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudChannelV1Plan.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleCloudChannelV1Plan>() {
           @Override
           public void write(JsonWriter out, GoogleCloudChannelV1Plan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleCloudChannelV1Plan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleCloudChannelV1Plan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleCloudChannelV1Plan
   * @throws IOException if the JSON string is invalid with respect to GoogleCloudChannelV1Plan
   */
  public static GoogleCloudChannelV1Plan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleCloudChannelV1Plan.class);
  }

  /**
   * Convert an instance of GoogleCloudChannelV1Plan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

