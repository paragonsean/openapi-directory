/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RouterApplianceInstance model module.
 * @module model/RouterApplianceInstance
 * @version v1alpha1
 */
class RouterApplianceInstance {
    /**
     * Constructs a new <code>RouterApplianceInstance</code>.
     * RouterAppliance represents a Router appliance which is specified by a VM URI and a NIC address.
     * @alias module:model/RouterApplianceInstance
     */
    constructor() { 
        
        RouterApplianceInstance.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RouterApplianceInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RouterApplianceInstance} obj Optional instance to populate.
     * @return {module:model/RouterApplianceInstance} The populated <code>RouterApplianceInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RouterApplianceInstance();

            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('networkInterface')) {
                obj['networkInterface'] = ApiClient.convertToType(data['networkInterface'], 'String');
            }
            if (data.hasOwnProperty('virtualMachine')) {
                obj['virtualMachine'] = ApiClient.convertToType(data['virtualMachine'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RouterApplianceInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RouterApplianceInstance</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['networkInterface'] && !(typeof data['networkInterface'] === 'string' || data['networkInterface'] instanceof String)) {
            throw new Error("Expected the field `networkInterface` to be a primitive type in the JSON string but got " + data['networkInterface']);
        }
        // ensure the json data is a string
        if (data['virtualMachine'] && !(typeof data['virtualMachine'] === 'string' || data['virtualMachine'] instanceof String)) {
            throw new Error("Expected the field `virtualMachine` to be a primitive type in the JSON string but got " + data['virtualMachine']);
        }

        return true;
    }


}



/**
 * The IP address of the network interface to use for peering.
 * @member {String} ipAddress
 */
RouterApplianceInstance.prototype['ipAddress'] = undefined;

/**
 * @member {String} networkInterface
 */
RouterApplianceInstance.prototype['networkInterface'] = undefined;

/**
 * The URI of the virtual machine resource
 * @member {String} virtualMachine
 */
RouterApplianceInstance.prototype['virtualMachine'] = undefined;






export default RouterApplianceInstance;

