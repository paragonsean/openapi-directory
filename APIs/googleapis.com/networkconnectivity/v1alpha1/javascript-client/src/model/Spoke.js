/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RouterApplianceInstance from './RouterApplianceInstance';

/**
 * The Spoke model module.
 * @module model/Spoke
 * @version v1alpha1
 */
class Spoke {
    /**
     * Constructs a new <code>Spoke</code>.
     * A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc.
     * @alias module:model/Spoke
     */
    constructor() { 
        
        Spoke.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Spoke</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spoke} obj Optional instance to populate.
     * @return {module:model/Spoke} The populated <code>Spoke</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spoke();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('hub')) {
                obj['hub'] = ApiClient.convertToType(data['hub'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('linkedInterconnectAttachments')) {
                obj['linkedInterconnectAttachments'] = ApiClient.convertToType(data['linkedInterconnectAttachments'], ['String']);
            }
            if (data.hasOwnProperty('linkedRouterApplianceInstances')) {
                obj['linkedRouterApplianceInstances'] = ApiClient.convertToType(data['linkedRouterApplianceInstances'], [RouterApplianceInstance]);
            }
            if (data.hasOwnProperty('linkedVpnTunnels')) {
                obj['linkedVpnTunnels'] = ApiClient.convertToType(data['linkedVpnTunnels'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Spoke</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Spoke</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['hub'] && !(typeof data['hub'] === 'string' || data['hub'] instanceof String)) {
            throw new Error("Expected the field `hub` to be a primitive type in the JSON string but got " + data['hub']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['linkedInterconnectAttachments'])) {
            throw new Error("Expected the field `linkedInterconnectAttachments` to be an array in the JSON data but got " + data['linkedInterconnectAttachments']);
        }
        if (data['linkedRouterApplianceInstances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['linkedRouterApplianceInstances'])) {
                throw new Error("Expected the field `linkedRouterApplianceInstances` to be an array in the JSON data but got " + data['linkedRouterApplianceInstances']);
            }
            // validate the optional field `linkedRouterApplianceInstances` (array)
            for (const item of data['linkedRouterApplianceInstances']) {
                RouterApplianceInstance.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['linkedVpnTunnels'])) {
            throw new Error("Expected the field `linkedVpnTunnels` to be an array in the JSON data but got " + data['linkedVpnTunnels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uniqueId'] && !(typeof data['uniqueId'] === 'string' || data['uniqueId'] instanceof String)) {
            throw new Error("Expected the field `uniqueId` to be a primitive type in the JSON string but got " + data['uniqueId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The time when the Spoke was created.
 * @member {String} createTime
 */
Spoke.prototype['createTime'] = undefined;

/**
 * Short description of the spoke resource
 * @member {String} description
 */
Spoke.prototype['description'] = undefined;

/**
 * The resource URL of the hub resource that the spoke is attached to
 * @member {String} hub
 */
Spoke.prototype['hub'] = undefined;

/**
 * User-defined labels.
 * @member {Object.<String, String>} labels
 */
Spoke.prototype['labels'] = undefined;

/**
 * The URIs of linked interconnect attachment resources
 * @member {Array.<String>} linkedInterconnectAttachments
 */
Spoke.prototype['linkedInterconnectAttachments'] = undefined;

/**
 * The URIs of linked Router appliance resources
 * @member {Array.<module:model/RouterApplianceInstance>} linkedRouterApplianceInstances
 */
Spoke.prototype['linkedRouterApplianceInstances'] = undefined;

/**
 * The URIs of linked VPN tunnel resources
 * @member {Array.<String>} linkedVpnTunnels
 */
Spoke.prototype['linkedVpnTunnels'] = undefined;

/**
 * Immutable. The name of a Spoke resource.
 * @member {String} name
 */
Spoke.prototype['name'] = undefined;

/**
 * Output only. The current lifecycle state of this Hub.
 * @member {module:model/Spoke.StateEnum} state
 */
Spoke.prototype['state'] = undefined;

/**
 * Output only. Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.
 * @member {String} uniqueId
 */
Spoke.prototype['uniqueId'] = undefined;

/**
 * The time when the Spoke was updated.
 * @member {String} updateTime
 */
Spoke.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Spoke['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING"
};



export default Spoke;

