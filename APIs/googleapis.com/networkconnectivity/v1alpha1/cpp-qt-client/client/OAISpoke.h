/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpoke.h
 *
 * A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc.
 */

#ifndef OAISpoke_H
#define OAISpoke_H

#include <QJsonObject>

#include "OAIRouterApplianceInstance.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRouterApplianceInstance;

class OAISpoke : public OAIObject {
public:
    OAISpoke();
    OAISpoke(QString json);
    ~OAISpoke() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getHub() const;
    void setHub(const QString &hub);
    bool is_hub_Set() const;
    bool is_hub_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QList<QString> getLinkedInterconnectAttachments() const;
    void setLinkedInterconnectAttachments(const QList<QString> &linked_interconnect_attachments);
    bool is_linked_interconnect_attachments_Set() const;
    bool is_linked_interconnect_attachments_Valid() const;

    QList<OAIRouterApplianceInstance> getLinkedRouterApplianceInstances() const;
    void setLinkedRouterApplianceInstances(const QList<OAIRouterApplianceInstance> &linked_router_appliance_instances);
    bool is_linked_router_appliance_instances_Set() const;
    bool is_linked_router_appliance_instances_Valid() const;

    QList<QString> getLinkedVpnTunnels() const;
    void setLinkedVpnTunnels(const QList<QString> &linked_vpn_tunnels);
    bool is_linked_vpn_tunnels_Set() const;
    bool is_linked_vpn_tunnels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUniqueId() const;
    void setUniqueId(const QString &unique_id);
    bool is_unique_id_Set() const;
    bool is_unique_id_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_hub;
    bool m_hub_isSet;
    bool m_hub_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QList<QString> m_linked_interconnect_attachments;
    bool m_linked_interconnect_attachments_isSet;
    bool m_linked_interconnect_attachments_isValid;

    QList<OAIRouterApplianceInstance> m_linked_router_appliance_instances;
    bool m_linked_router_appliance_instances_isSet;
    bool m_linked_router_appliance_instances_isValid;

    QList<QString> m_linked_vpn_tunnels;
    bool m_linked_vpn_tunnels_isSet;
    bool m_linked_vpn_tunnels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_unique_id;
    bool m_unique_id_isSet;
    bool m_unique_id_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpoke)

#endif // OAISpoke_H
