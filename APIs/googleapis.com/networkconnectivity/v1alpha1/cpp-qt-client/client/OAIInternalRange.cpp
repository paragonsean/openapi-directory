/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInternalRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInternalRange::OAIInternalRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInternalRange::OAIInternalRange() {
    this->initializeModel();
}

OAIInternalRange::~OAIInternalRange() {}

void OAIInternalRange::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ip_cidr_range_isSet = false;
    m_ip_cidr_range_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_overlaps_isSet = false;
    m_overlaps_isValid = false;

    m_peering_isSet = false;
    m_peering_isValid = false;

    m_prefix_length_isSet = false;
    m_prefix_length_isValid = false;

    m_target_cidr_range_isSet = false;
    m_target_cidr_range_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_usage_isSet = false;
    m_usage_isValid = false;

    m_users_isSet = false;
    m_users_isValid = false;
}

void OAIInternalRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInternalRange::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ip_cidr_range_isValid = ::OpenAPI::fromJsonValue(m_ip_cidr_range, json[QString("ipCidrRange")]);
    m_ip_cidr_range_isSet = !json[QString("ipCidrRange")].isNull() && m_ip_cidr_range_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_overlaps_isValid = ::OpenAPI::fromJsonValue(m_overlaps, json[QString("overlaps")]);
    m_overlaps_isSet = !json[QString("overlaps")].isNull() && m_overlaps_isValid;

    m_peering_isValid = ::OpenAPI::fromJsonValue(m_peering, json[QString("peering")]);
    m_peering_isSet = !json[QString("peering")].isNull() && m_peering_isValid;

    m_prefix_length_isValid = ::OpenAPI::fromJsonValue(m_prefix_length, json[QString("prefixLength")]);
    m_prefix_length_isSet = !json[QString("prefixLength")].isNull() && m_prefix_length_isValid;

    m_target_cidr_range_isValid = ::OpenAPI::fromJsonValue(m_target_cidr_range, json[QString("targetCidrRange")]);
    m_target_cidr_range_isSet = !json[QString("targetCidrRange")].isNull() && m_target_cidr_range_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_usage_isValid = ::OpenAPI::fromJsonValue(m_usage, json[QString("usage")]);
    m_usage_isSet = !json[QString("usage")].isNull() && m_usage_isValid;

    m_users_isValid = ::OpenAPI::fromJsonValue(m_users, json[QString("users")]);
    m_users_isSet = !json[QString("users")].isNull() && m_users_isValid;
}

QString OAIInternalRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInternalRange::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ip_cidr_range_isSet) {
        obj.insert(QString("ipCidrRange"), ::OpenAPI::toJsonValue(m_ip_cidr_range));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_overlaps.size() > 0) {
        obj.insert(QString("overlaps"), ::OpenAPI::toJsonValue(m_overlaps));
    }
    if (m_peering_isSet) {
        obj.insert(QString("peering"), ::OpenAPI::toJsonValue(m_peering));
    }
    if (m_prefix_length_isSet) {
        obj.insert(QString("prefixLength"), ::OpenAPI::toJsonValue(m_prefix_length));
    }
    if (m_target_cidr_range.size() > 0) {
        obj.insert(QString("targetCidrRange"), ::OpenAPI::toJsonValue(m_target_cidr_range));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_usage_isSet) {
        obj.insert(QString("usage"), ::OpenAPI::toJsonValue(m_usage));
    }
    if (m_users.size() > 0) {
        obj.insert(QString("users"), ::OpenAPI::toJsonValue(m_users));
    }
    return obj;
}

QString OAIInternalRange::getCreateTime() const {
    return m_create_time;
}
void OAIInternalRange::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIInternalRange::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIInternalRange::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIInternalRange::getDescription() const {
    return m_description;
}
void OAIInternalRange::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInternalRange::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInternalRange::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIInternalRange::getIpCidrRange() const {
    return m_ip_cidr_range;
}
void OAIInternalRange::setIpCidrRange(const QString &ip_cidr_range) {
    m_ip_cidr_range = ip_cidr_range;
    m_ip_cidr_range_isSet = true;
}

bool OAIInternalRange::is_ip_cidr_range_Set() const{
    return m_ip_cidr_range_isSet;
}

bool OAIInternalRange::is_ip_cidr_range_Valid() const{
    return m_ip_cidr_range_isValid;
}

QMap<QString, QString> OAIInternalRange::getLabels() const {
    return m_labels;
}
void OAIInternalRange::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIInternalRange::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIInternalRange::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIInternalRange::getName() const {
    return m_name;
}
void OAIInternalRange::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInternalRange::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInternalRange::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIInternalRange::getNetwork() const {
    return m_network;
}
void OAIInternalRange::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIInternalRange::is_network_Set() const{
    return m_network_isSet;
}

bool OAIInternalRange::is_network_Valid() const{
    return m_network_isValid;
}

QList<QString> OAIInternalRange::getOverlaps() const {
    return m_overlaps;
}
void OAIInternalRange::setOverlaps(const QList<QString> &overlaps) {
    m_overlaps = overlaps;
    m_overlaps_isSet = true;
}

bool OAIInternalRange::is_overlaps_Set() const{
    return m_overlaps_isSet;
}

bool OAIInternalRange::is_overlaps_Valid() const{
    return m_overlaps_isValid;
}

QString OAIInternalRange::getPeering() const {
    return m_peering;
}
void OAIInternalRange::setPeering(const QString &peering) {
    m_peering = peering;
    m_peering_isSet = true;
}

bool OAIInternalRange::is_peering_Set() const{
    return m_peering_isSet;
}

bool OAIInternalRange::is_peering_Valid() const{
    return m_peering_isValid;
}

qint32 OAIInternalRange::getPrefixLength() const {
    return m_prefix_length;
}
void OAIInternalRange::setPrefixLength(const qint32 &prefix_length) {
    m_prefix_length = prefix_length;
    m_prefix_length_isSet = true;
}

bool OAIInternalRange::is_prefix_length_Set() const{
    return m_prefix_length_isSet;
}

bool OAIInternalRange::is_prefix_length_Valid() const{
    return m_prefix_length_isValid;
}

QList<QString> OAIInternalRange::getTargetCidrRange() const {
    return m_target_cidr_range;
}
void OAIInternalRange::setTargetCidrRange(const QList<QString> &target_cidr_range) {
    m_target_cidr_range = target_cidr_range;
    m_target_cidr_range_isSet = true;
}

bool OAIInternalRange::is_target_cidr_range_Set() const{
    return m_target_cidr_range_isSet;
}

bool OAIInternalRange::is_target_cidr_range_Valid() const{
    return m_target_cidr_range_isValid;
}

QString OAIInternalRange::getUpdateTime() const {
    return m_update_time;
}
void OAIInternalRange::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIInternalRange::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIInternalRange::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIInternalRange::getUsage() const {
    return m_usage;
}
void OAIInternalRange::setUsage(const QString &usage) {
    m_usage = usage;
    m_usage_isSet = true;
}

bool OAIInternalRange::is_usage_Set() const{
    return m_usage_isSet;
}

bool OAIInternalRange::is_usage_Valid() const{
    return m_usage_isValid;
}

QList<QString> OAIInternalRange::getUsers() const {
    return m_users;
}
void OAIInternalRange::setUsers(const QList<QString> &users) {
    m_users = users;
    m_users_isSet = true;
}

bool OAIInternalRange::is_users_Set() const{
    return m_users_isSet;
}

bool OAIInternalRange::is_users_Valid() const{
    return m_users_isValid;
}

bool OAIInternalRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_cidr_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overlaps.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_cidr_range.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInternalRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
