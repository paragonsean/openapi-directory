/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpoke.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpoke::OAISpoke(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpoke::OAISpoke() {
    this->initializeModel();
}

OAISpoke::~OAISpoke() {}

void OAISpoke::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_hub_isSet = false;
    m_hub_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_linked_interconnect_attachments_isSet = false;
    m_linked_interconnect_attachments_isValid = false;

    m_linked_router_appliance_instances_isSet = false;
    m_linked_router_appliance_instances_isValid = false;

    m_linked_vpn_tunnels_isSet = false;
    m_linked_vpn_tunnels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAISpoke::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpoke::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_hub_isValid = ::OpenAPI::fromJsonValue(m_hub, json[QString("hub")]);
    m_hub_isSet = !json[QString("hub")].isNull() && m_hub_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_linked_interconnect_attachments_isValid = ::OpenAPI::fromJsonValue(m_linked_interconnect_attachments, json[QString("linkedInterconnectAttachments")]);
    m_linked_interconnect_attachments_isSet = !json[QString("linkedInterconnectAttachments")].isNull() && m_linked_interconnect_attachments_isValid;

    m_linked_router_appliance_instances_isValid = ::OpenAPI::fromJsonValue(m_linked_router_appliance_instances, json[QString("linkedRouterApplianceInstances")]);
    m_linked_router_appliance_instances_isSet = !json[QString("linkedRouterApplianceInstances")].isNull() && m_linked_router_appliance_instances_isValid;

    m_linked_vpn_tunnels_isValid = ::OpenAPI::fromJsonValue(m_linked_vpn_tunnels, json[QString("linkedVpnTunnels")]);
    m_linked_vpn_tunnels_isSet = !json[QString("linkedVpnTunnels")].isNull() && m_linked_vpn_tunnels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAISpoke::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpoke::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_hub_isSet) {
        obj.insert(QString("hub"), ::OpenAPI::toJsonValue(m_hub));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_linked_interconnect_attachments.size() > 0) {
        obj.insert(QString("linkedInterconnectAttachments"), ::OpenAPI::toJsonValue(m_linked_interconnect_attachments));
    }
    if (m_linked_router_appliance_instances.size() > 0) {
        obj.insert(QString("linkedRouterApplianceInstances"), ::OpenAPI::toJsonValue(m_linked_router_appliance_instances));
    }
    if (m_linked_vpn_tunnels.size() > 0) {
        obj.insert(QString("linkedVpnTunnels"), ::OpenAPI::toJsonValue(m_linked_vpn_tunnels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAISpoke::getCreateTime() const {
    return m_create_time;
}
void OAISpoke::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAISpoke::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAISpoke::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAISpoke::getDescription() const {
    return m_description;
}
void OAISpoke::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISpoke::is_description_Set() const{
    return m_description_isSet;
}

bool OAISpoke::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISpoke::getHub() const {
    return m_hub;
}
void OAISpoke::setHub(const QString &hub) {
    m_hub = hub;
    m_hub_isSet = true;
}

bool OAISpoke::is_hub_Set() const{
    return m_hub_isSet;
}

bool OAISpoke::is_hub_Valid() const{
    return m_hub_isValid;
}

QMap<QString, QString> OAISpoke::getLabels() const {
    return m_labels;
}
void OAISpoke::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAISpoke::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAISpoke::is_labels_Valid() const{
    return m_labels_isValid;
}

QList<QString> OAISpoke::getLinkedInterconnectAttachments() const {
    return m_linked_interconnect_attachments;
}
void OAISpoke::setLinkedInterconnectAttachments(const QList<QString> &linked_interconnect_attachments) {
    m_linked_interconnect_attachments = linked_interconnect_attachments;
    m_linked_interconnect_attachments_isSet = true;
}

bool OAISpoke::is_linked_interconnect_attachments_Set() const{
    return m_linked_interconnect_attachments_isSet;
}

bool OAISpoke::is_linked_interconnect_attachments_Valid() const{
    return m_linked_interconnect_attachments_isValid;
}

QList<OAIRouterApplianceInstance> OAISpoke::getLinkedRouterApplianceInstances() const {
    return m_linked_router_appliance_instances;
}
void OAISpoke::setLinkedRouterApplianceInstances(const QList<OAIRouterApplianceInstance> &linked_router_appliance_instances) {
    m_linked_router_appliance_instances = linked_router_appliance_instances;
    m_linked_router_appliance_instances_isSet = true;
}

bool OAISpoke::is_linked_router_appliance_instances_Set() const{
    return m_linked_router_appliance_instances_isSet;
}

bool OAISpoke::is_linked_router_appliance_instances_Valid() const{
    return m_linked_router_appliance_instances_isValid;
}

QList<QString> OAISpoke::getLinkedVpnTunnels() const {
    return m_linked_vpn_tunnels;
}
void OAISpoke::setLinkedVpnTunnels(const QList<QString> &linked_vpn_tunnels) {
    m_linked_vpn_tunnels = linked_vpn_tunnels;
    m_linked_vpn_tunnels_isSet = true;
}

bool OAISpoke::is_linked_vpn_tunnels_Set() const{
    return m_linked_vpn_tunnels_isSet;
}

bool OAISpoke::is_linked_vpn_tunnels_Valid() const{
    return m_linked_vpn_tunnels_isValid;
}

QString OAISpoke::getName() const {
    return m_name;
}
void OAISpoke::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpoke::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpoke::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISpoke::getState() const {
    return m_state;
}
void OAISpoke::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISpoke::is_state_Set() const{
    return m_state_isSet;
}

bool OAISpoke::is_state_Valid() const{
    return m_state_isValid;
}

QString OAISpoke::getUniqueId() const {
    return m_unique_id;
}
void OAISpoke::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAISpoke::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAISpoke::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

QString OAISpoke::getUpdateTime() const {
    return m_update_time;
}
void OAISpoke::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAISpoke::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAISpoke::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAISpoke::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hub_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_interconnect_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_router_appliance_instances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_linked_vpn_tunnels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpoke::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
