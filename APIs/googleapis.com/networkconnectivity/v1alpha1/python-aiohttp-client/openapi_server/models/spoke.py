# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.router_appliance_instance import RouterApplianceInstance
from openapi_server import util


class Spoke(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, hub: str=None, labels: Dict[str, str]=None, linked_interconnect_attachments: List[str]=None, linked_router_appliance_instances: List[RouterApplianceInstance]=None, linked_vpn_tunnels: List[str]=None, name: str=None, state: str=None, unique_id: str=None, update_time: str=None):
        """Spoke - a model defined in OpenAPI

        :param create_time: The create_time of this Spoke.
        :param description: The description of this Spoke.
        :param hub: The hub of this Spoke.
        :param labels: The labels of this Spoke.
        :param linked_interconnect_attachments: The linked_interconnect_attachments of this Spoke.
        :param linked_router_appliance_instances: The linked_router_appliance_instances of this Spoke.
        :param linked_vpn_tunnels: The linked_vpn_tunnels of this Spoke.
        :param name: The name of this Spoke.
        :param state: The state of this Spoke.
        :param unique_id: The unique_id of this Spoke.
        :param update_time: The update_time of this Spoke.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'hub': str,
            'labels': Dict[str, str],
            'linked_interconnect_attachments': List[str],
            'linked_router_appliance_instances': List[RouterApplianceInstance],
            'linked_vpn_tunnels': List[str],
            'name': str,
            'state': str,
            'unique_id': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'hub': 'hub',
            'labels': 'labels',
            'linked_interconnect_attachments': 'linkedInterconnectAttachments',
            'linked_router_appliance_instances': 'linkedRouterApplianceInstances',
            'linked_vpn_tunnels': 'linkedVpnTunnels',
            'name': 'name',
            'state': 'state',
            'unique_id': 'uniqueId',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._hub = hub
        self._labels = labels
        self._linked_interconnect_attachments = linked_interconnect_attachments
        self._linked_router_appliance_instances = linked_router_appliance_instances
        self._linked_vpn_tunnels = linked_vpn_tunnels
        self._name = name
        self._state = state
        self._unique_id = unique_id
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Spoke':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Spoke of this Spoke.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Spoke.

        The time when the Spoke was created.

        :return: The create_time of this Spoke.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Spoke.

        The time when the Spoke was created.

        :param create_time: The create_time of this Spoke.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Spoke.

        Short description of the spoke resource

        :return: The description of this Spoke.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Spoke.

        Short description of the spoke resource

        :param description: The description of this Spoke.
        :type description: str
        """

        self._description = description

    @property
    def hub(self):
        """Gets the hub of this Spoke.

        The resource URL of the hub resource that the spoke is attached to

        :return: The hub of this Spoke.
        :rtype: str
        """
        return self._hub

    @hub.setter
    def hub(self, hub):
        """Sets the hub of this Spoke.

        The resource URL of the hub resource that the spoke is attached to

        :param hub: The hub of this Spoke.
        :type hub: str
        """

        self._hub = hub

    @property
    def labels(self):
        """Gets the labels of this Spoke.

        User-defined labels.

        :return: The labels of this Spoke.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Spoke.

        User-defined labels.

        :param labels: The labels of this Spoke.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def linked_interconnect_attachments(self):
        """Gets the linked_interconnect_attachments of this Spoke.

        The URIs of linked interconnect attachment resources

        :return: The linked_interconnect_attachments of this Spoke.
        :rtype: List[str]
        """
        return self._linked_interconnect_attachments

    @linked_interconnect_attachments.setter
    def linked_interconnect_attachments(self, linked_interconnect_attachments):
        """Sets the linked_interconnect_attachments of this Spoke.

        The URIs of linked interconnect attachment resources

        :param linked_interconnect_attachments: The linked_interconnect_attachments of this Spoke.
        :type linked_interconnect_attachments: List[str]
        """

        self._linked_interconnect_attachments = linked_interconnect_attachments

    @property
    def linked_router_appliance_instances(self):
        """Gets the linked_router_appliance_instances of this Spoke.

        The URIs of linked Router appliance resources

        :return: The linked_router_appliance_instances of this Spoke.
        :rtype: List[RouterApplianceInstance]
        """
        return self._linked_router_appliance_instances

    @linked_router_appliance_instances.setter
    def linked_router_appliance_instances(self, linked_router_appliance_instances):
        """Sets the linked_router_appliance_instances of this Spoke.

        The URIs of linked Router appliance resources

        :param linked_router_appliance_instances: The linked_router_appliance_instances of this Spoke.
        :type linked_router_appliance_instances: List[RouterApplianceInstance]
        """

        self._linked_router_appliance_instances = linked_router_appliance_instances

    @property
    def linked_vpn_tunnels(self):
        """Gets the linked_vpn_tunnels of this Spoke.

        The URIs of linked VPN tunnel resources

        :return: The linked_vpn_tunnels of this Spoke.
        :rtype: List[str]
        """
        return self._linked_vpn_tunnels

    @linked_vpn_tunnels.setter
    def linked_vpn_tunnels(self, linked_vpn_tunnels):
        """Sets the linked_vpn_tunnels of this Spoke.

        The URIs of linked VPN tunnel resources

        :param linked_vpn_tunnels: The linked_vpn_tunnels of this Spoke.
        :type linked_vpn_tunnels: List[str]
        """

        self._linked_vpn_tunnels = linked_vpn_tunnels

    @property
    def name(self):
        """Gets the name of this Spoke.

        Immutable. The name of a Spoke resource.

        :return: The name of this Spoke.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Spoke.

        Immutable. The name of a Spoke resource.

        :param name: The name of this Spoke.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Spoke.

        Output only. The current lifecycle state of this Hub.

        :return: The state of this Spoke.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Spoke.

        Output only. The current lifecycle state of this Hub.

        :param state: The state of this Spoke.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING", "UPDATING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unique_id(self):
        """Gets the unique_id of this Spoke.

        Output only. Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.

        :return: The unique_id of this Spoke.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Spoke.

        Output only. Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.

        :param unique_id: The unique_id of this Spoke.
        :type unique_id: str
        """

        self._unique_id = unique_id

    @property
    def update_time(self):
        """Gets the update_time of this Spoke.

        The time when the Spoke was updated.

        :return: The update_time of this Spoke.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Spoke.

        The time when the Spoke was updated.

        :param update_time: The update_time of this Spoke.
        :type update_time: str
        """

        self._update_time = update_time
