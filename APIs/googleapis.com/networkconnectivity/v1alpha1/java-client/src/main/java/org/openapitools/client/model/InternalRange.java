/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:03.785354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InternalRange {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IP_CIDR_RANGE = "ipCidrRange";
  @SerializedName(SERIALIZED_NAME_IP_CIDR_RANGE)
  private String ipCidrRange;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  /**
   * Gets or Sets overlaps
   */
  @JsonAdapter(OverlapsEnum.Adapter.class)
  public enum OverlapsEnum {
    UNSPECIFIED("OVERLAP_UNSPECIFIED"),
    
    ROUTE_RANGE("OVERLAP_ROUTE_RANGE"),
    
    EXISTING_SUBNET_RANGE("OVERLAP_EXISTING_SUBNET_RANGE");

    private String value;

    OverlapsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OverlapsEnum fromValue(String value) {
      for (OverlapsEnum b : OverlapsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OverlapsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OverlapsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OverlapsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OverlapsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OverlapsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OVERLAPS = "overlaps";
  @SerializedName(SERIALIZED_NAME_OVERLAPS)
  private List<OverlapsEnum> overlaps = new ArrayList<>();

  /**
   * The type of peering set for this internal range.
   */
  @JsonAdapter(PeeringEnum.Adapter.class)
  public enum PeeringEnum {
    PEERING_UNSPECIFIED("PEERING_UNSPECIFIED"),
    
    FOR_SELF("FOR_SELF"),
    
    FOR_PEER("FOR_PEER"),
    
    NOT_SHARED("NOT_SHARED");

    private String value;

    PeeringEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PeeringEnum fromValue(String value) {
      for (PeeringEnum b : PeeringEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PeeringEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PeeringEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PeeringEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PeeringEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PeeringEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PEERING = "peering";
  @SerializedName(SERIALIZED_NAME_PEERING)
  private PeeringEnum peering;

  public static final String SERIALIZED_NAME_PREFIX_LENGTH = "prefixLength";
  @SerializedName(SERIALIZED_NAME_PREFIX_LENGTH)
  private Integer prefixLength;

  public static final String SERIALIZED_NAME_TARGET_CIDR_RANGE = "targetCidrRange";
  @SerializedName(SERIALIZED_NAME_TARGET_CIDR_RANGE)
  private List<String> targetCidrRange = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  /**
   * The type of usage set for this internal range.
   */
  @JsonAdapter(UsageEnum.Adapter.class)
  public enum UsageEnum {
    USAGE_UNSPECIFIED("USAGE_UNSPECIFIED"),
    
    FOR_VPC("FOR_VPC"),
    
    EXTERNAL_TO_VPC("EXTERNAL_TO_VPC");

    private String value;

    UsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UsageEnum fromValue(String value) {
      for (UsageEnum b : UsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private UsageEnum usage;

  public static final String SERIALIZED_NAME_USERS = "users";
  @SerializedName(SERIALIZED_NAME_USERS)
  private List<String> users = new ArrayList<>();

  public InternalRange() {
  }

  public InternalRange(
     List<String> users
  ) {
    this();
    this.users = users;
  }

  public InternalRange createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Time when the internal range was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public InternalRange description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of this resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InternalRange ipCidrRange(String ipCidrRange) {
    this.ipCidrRange = ipCidrRange;
    return this;
  }

  /**
   * IP range that this internal range defines.
   * @return ipCidrRange
   */
  @javax.annotation.Nullable
  public String getIpCidrRange() {
    return ipCidrRange;
  }

  public void setIpCidrRange(String ipCidrRange) {
    this.ipCidrRange = ipCidrRange;
  }


  public InternalRange labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public InternalRange putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public InternalRange name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of an internal range. Format: projects/{project}/locations/{location}/internalRanges/{internal_range} See: https://google.aip.dev/122#fields-representing-resource-names
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InternalRange network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The URL or resource ID of the network in which to reserve the internal range. The network cannot be deleted if there are any reserved internal ranges referring to it. Legacy networks are not supported. This can only be specified for a global internal address. Example: - URL: /compute/v1/projects/{project}/global/networks/{resourceId} - ID: network123
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public InternalRange overlaps(List<OverlapsEnum> overlaps) {
    this.overlaps = overlaps;
    return this;
  }

  public InternalRange addOverlapsItem(OverlapsEnum overlapsItem) {
    if (this.overlaps == null) {
      this.overlaps = new ArrayList<>();
    }
    this.overlaps.add(overlapsItem);
    return this;
  }

  /**
   * Optional. Types of resources that are allowed to overlap with the current internal range.
   * @return overlaps
   */
  @javax.annotation.Nullable
  public List<OverlapsEnum> getOverlaps() {
    return overlaps;
  }

  public void setOverlaps(List<OverlapsEnum> overlaps) {
    this.overlaps = overlaps;
  }


  public InternalRange peering(PeeringEnum peering) {
    this.peering = peering;
    return this;
  }

  /**
   * The type of peering set for this internal range.
   * @return peering
   */
  @javax.annotation.Nullable
  public PeeringEnum getPeering() {
    return peering;
  }

  public void setPeering(PeeringEnum peering) {
    this.peering = peering;
  }


  public InternalRange prefixLength(Integer prefixLength) {
    this.prefixLength = prefixLength;
    return this;
  }

  /**
   * An alternative to ip_cidr_range. Can be set when trying to create a reservation that automatically finds a free range of the given size. If both ip_cidr_range and prefix_length are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.
   * @return prefixLength
   */
  @javax.annotation.Nullable
  public Integer getPrefixLength() {
    return prefixLength;
  }

  public void setPrefixLength(Integer prefixLength) {
    this.prefixLength = prefixLength;
  }


  public InternalRange targetCidrRange(List<String> targetCidrRange) {
    this.targetCidrRange = targetCidrRange;
    return this;
  }

  public InternalRange addTargetCidrRangeItem(String targetCidrRangeItem) {
    if (this.targetCidrRange == null) {
      this.targetCidrRange = new ArrayList<>();
    }
    this.targetCidrRange.add(targetCidrRangeItem);
    return this;
  }

  /**
   * Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set, defaults to the \&quot;10.0.0.0/8\&quot; address space. This can be used to search in other rfc-1918 address spaces like \&quot;172.16.0.0/12\&quot; and \&quot;192.168.0.0/16\&quot; or non-rfc-1918 address spaces used in the VPC.
   * @return targetCidrRange
   */
  @javax.annotation.Nullable
  public List<String> getTargetCidrRange() {
    return targetCidrRange;
  }

  public void setTargetCidrRange(List<String> targetCidrRange) {
    this.targetCidrRange = targetCidrRange;
  }


  public InternalRange updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Time when the internal range was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public InternalRange usage(UsageEnum usage) {
    this.usage = usage;
    return this;
  }

  /**
   * The type of usage set for this internal range.
   * @return usage
   */
  @javax.annotation.Nullable
  public UsageEnum getUsage() {
    return usage;
  }

  public void setUsage(UsageEnum usage) {
    this.usage = usage;
  }


  /**
   * Output only. The list of resources that refer to this internal range. Resources that use the internal range for their range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range that is referred to. Can be empty.
   * @return users
   */
  @javax.annotation.Nullable
  public List<String> getUsers() {
    return users;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InternalRange internalRange = (InternalRange) o;
    return Objects.equals(this.createTime, internalRange.createTime) &&
        Objects.equals(this.description, internalRange.description) &&
        Objects.equals(this.ipCidrRange, internalRange.ipCidrRange) &&
        Objects.equals(this.labels, internalRange.labels) &&
        Objects.equals(this.name, internalRange.name) &&
        Objects.equals(this.network, internalRange.network) &&
        Objects.equals(this.overlaps, internalRange.overlaps) &&
        Objects.equals(this.peering, internalRange.peering) &&
        Objects.equals(this.prefixLength, internalRange.prefixLength) &&
        Objects.equals(this.targetCidrRange, internalRange.targetCidrRange) &&
        Objects.equals(this.updateTime, internalRange.updateTime) &&
        Objects.equals(this.usage, internalRange.usage) &&
        Objects.equals(this.users, internalRange.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, ipCidrRange, labels, name, network, overlaps, peering, prefixLength, targetCidrRange, updateTime, usage, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InternalRange {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ipCidrRange: ").append(toIndentedString(ipCidrRange)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    overlaps: ").append(toIndentedString(overlaps)).append("\n");
    sb.append("    peering: ").append(toIndentedString(peering)).append("\n");
    sb.append("    prefixLength: ").append(toIndentedString(prefixLength)).append("\n");
    sb.append("    targetCidrRange: ").append(toIndentedString(targetCidrRange)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("ipCidrRange");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("overlaps");
    openapiFields.add("peering");
    openapiFields.add("prefixLength");
    openapiFields.add("targetCidrRange");
    openapiFields.add("updateTime");
    openapiFields.add("usage");
    openapiFields.add("users");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InternalRange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InternalRange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InternalRange is not found in the empty JSON string", InternalRange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InternalRange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InternalRange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("ipCidrRange") != null && !jsonObj.get("ipCidrRange").isJsonNull()) && !jsonObj.get("ipCidrRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipCidrRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipCidrRange").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("overlaps") != null && !jsonObj.get("overlaps").isJsonNull() && !jsonObj.get("overlaps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `overlaps` to be an array in the JSON string but got `%s`", jsonObj.get("overlaps").toString()));
      }
      if ((jsonObj.get("peering") != null && !jsonObj.get("peering").isJsonNull()) && !jsonObj.get("peering").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `peering` to be a primitive type in the JSON string but got `%s`", jsonObj.get("peering").toString()));
      }
      // validate the optional field `peering`
      if (jsonObj.get("peering") != null && !jsonObj.get("peering").isJsonNull()) {
        PeeringEnum.validateJsonElement(jsonObj.get("peering"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("targetCidrRange") != null && !jsonObj.get("targetCidrRange").isJsonNull() && !jsonObj.get("targetCidrRange").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetCidrRange` to be an array in the JSON string but got `%s`", jsonObj.get("targetCidrRange").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) && !jsonObj.get("usage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage").toString()));
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        UsageEnum.validateJsonElement(jsonObj.get("usage"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("users") != null && !jsonObj.get("users").isJsonNull() && !jsonObj.get("users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `users` to be an array in the JSON string but got `%s`", jsonObj.get("users").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InternalRange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InternalRange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InternalRange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InternalRange.class));

       return (TypeAdapter<T>) new TypeAdapter<InternalRange>() {
           @Override
           public void write(JsonWriter out, InternalRange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InternalRange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InternalRange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InternalRange
   * @throws IOException if the JSON string is invalid with respect to InternalRange
   */
  public static InternalRange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InternalRange.class);
  }

  /**
   * Convert an instance of InternalRange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

