/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RouterApplianceInstance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Spoke is an abstraction of a network attachment being attached to a Hub. A Spoke can be underlying a VPN tunnel, a VLAN (interconnect) attachment, a Router appliance, etc.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:03.785354-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Spoke {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HUB = "hub";
  @SerializedName(SERIALIZED_NAME_HUB)
  private String hub;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKED_INTERCONNECT_ATTACHMENTS = "linkedInterconnectAttachments";
  @SerializedName(SERIALIZED_NAME_LINKED_INTERCONNECT_ATTACHMENTS)
  private List<String> linkedInterconnectAttachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_ROUTER_APPLIANCE_INSTANCES = "linkedRouterApplianceInstances";
  @SerializedName(SERIALIZED_NAME_LINKED_ROUTER_APPLIANCE_INSTANCES)
  private List<RouterApplianceInstance> linkedRouterApplianceInstances = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_VPN_TUNNELS = "linkedVpnTunnels";
  @SerializedName(SERIALIZED_NAME_LINKED_VPN_TUNNELS)
  private List<String> linkedVpnTunnels = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. The current lifecycle state of this Hub.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    UPDATING("UPDATING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Spoke() {
  }

  public Spoke(
     StateEnum state, 
     String uniqueId
  ) {
    this();
    this.state = state;
    this.uniqueId = uniqueId;
  }

  public Spoke createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * The time when the Spoke was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Spoke description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Short description of the spoke resource
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Spoke hub(String hub) {
    this.hub = hub;
    return this;
  }

  /**
   * The resource URL of the hub resource that the spoke is attached to
   * @return hub
   */
  @javax.annotation.Nullable
  public String getHub() {
    return hub;
  }

  public void setHub(String hub) {
    this.hub = hub;
  }


  public Spoke labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Spoke putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Spoke linkedInterconnectAttachments(List<String> linkedInterconnectAttachments) {
    this.linkedInterconnectAttachments = linkedInterconnectAttachments;
    return this;
  }

  public Spoke addLinkedInterconnectAttachmentsItem(String linkedInterconnectAttachmentsItem) {
    if (this.linkedInterconnectAttachments == null) {
      this.linkedInterconnectAttachments = new ArrayList<>();
    }
    this.linkedInterconnectAttachments.add(linkedInterconnectAttachmentsItem);
    return this;
  }

  /**
   * The URIs of linked interconnect attachment resources
   * @return linkedInterconnectAttachments
   */
  @javax.annotation.Nullable
  public List<String> getLinkedInterconnectAttachments() {
    return linkedInterconnectAttachments;
  }

  public void setLinkedInterconnectAttachments(List<String> linkedInterconnectAttachments) {
    this.linkedInterconnectAttachments = linkedInterconnectAttachments;
  }


  public Spoke linkedRouterApplianceInstances(List<RouterApplianceInstance> linkedRouterApplianceInstances) {
    this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
    return this;
  }

  public Spoke addLinkedRouterApplianceInstancesItem(RouterApplianceInstance linkedRouterApplianceInstancesItem) {
    if (this.linkedRouterApplianceInstances == null) {
      this.linkedRouterApplianceInstances = new ArrayList<>();
    }
    this.linkedRouterApplianceInstances.add(linkedRouterApplianceInstancesItem);
    return this;
  }

  /**
   * The URIs of linked Router appliance resources
   * @return linkedRouterApplianceInstances
   */
  @javax.annotation.Nullable
  public List<RouterApplianceInstance> getLinkedRouterApplianceInstances() {
    return linkedRouterApplianceInstances;
  }

  public void setLinkedRouterApplianceInstances(List<RouterApplianceInstance> linkedRouterApplianceInstances) {
    this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
  }


  public Spoke linkedVpnTunnels(List<String> linkedVpnTunnels) {
    this.linkedVpnTunnels = linkedVpnTunnels;
    return this;
  }

  public Spoke addLinkedVpnTunnelsItem(String linkedVpnTunnelsItem) {
    if (this.linkedVpnTunnels == null) {
      this.linkedVpnTunnels = new ArrayList<>();
    }
    this.linkedVpnTunnels.add(linkedVpnTunnelsItem);
    return this;
  }

  /**
   * The URIs of linked VPN tunnel resources
   * @return linkedVpnTunnels
   */
  @javax.annotation.Nullable
  public List<String> getLinkedVpnTunnels() {
    return linkedVpnTunnels;
  }

  public void setLinkedVpnTunnels(List<String> linkedVpnTunnels) {
    this.linkedVpnTunnels = linkedVpnTunnels;
  }


  public Spoke name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of a Spoke resource.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The current lifecycle state of this Hub.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. Google-generated UUID for this resource. This is unique across all Spoke resources. If a Spoke resource is deleted and another with the same name is created, it gets a different unique_id.
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }



  public Spoke updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * The time when the Spoke was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spoke spoke = (Spoke) o;
    return Objects.equals(this.createTime, spoke.createTime) &&
        Objects.equals(this.description, spoke.description) &&
        Objects.equals(this.hub, spoke.hub) &&
        Objects.equals(this.labels, spoke.labels) &&
        Objects.equals(this.linkedInterconnectAttachments, spoke.linkedInterconnectAttachments) &&
        Objects.equals(this.linkedRouterApplianceInstances, spoke.linkedRouterApplianceInstances) &&
        Objects.equals(this.linkedVpnTunnels, spoke.linkedVpnTunnels) &&
        Objects.equals(this.name, spoke.name) &&
        Objects.equals(this.state, spoke.state) &&
        Objects.equals(this.uniqueId, spoke.uniqueId) &&
        Objects.equals(this.updateTime, spoke.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, hub, labels, linkedInterconnectAttachments, linkedRouterApplianceInstances, linkedVpnTunnels, name, state, uniqueId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spoke {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hub: ").append(toIndentedString(hub)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    linkedInterconnectAttachments: ").append(toIndentedString(linkedInterconnectAttachments)).append("\n");
    sb.append("    linkedRouterApplianceInstances: ").append(toIndentedString(linkedRouterApplianceInstances)).append("\n");
    sb.append("    linkedVpnTunnels: ").append(toIndentedString(linkedVpnTunnels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("hub");
    openapiFields.add("labels");
    openapiFields.add("linkedInterconnectAttachments");
    openapiFields.add("linkedRouterApplianceInstances");
    openapiFields.add("linkedVpnTunnels");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("uniqueId");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Spoke
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Spoke.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Spoke is not found in the empty JSON string", Spoke.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Spoke.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Spoke` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("hub") != null && !jsonObj.get("hub").isJsonNull()) && !jsonObj.get("hub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hub").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedInterconnectAttachments") != null && !jsonObj.get("linkedInterconnectAttachments").isJsonNull() && !jsonObj.get("linkedInterconnectAttachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedInterconnectAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("linkedInterconnectAttachments").toString()));
      }
      if (jsonObj.get("linkedRouterApplianceInstances") != null && !jsonObj.get("linkedRouterApplianceInstances").isJsonNull()) {
        JsonArray jsonArraylinkedRouterApplianceInstances = jsonObj.getAsJsonArray("linkedRouterApplianceInstances");
        if (jsonArraylinkedRouterApplianceInstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("linkedRouterApplianceInstances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `linkedRouterApplianceInstances` to be an array in the JSON string but got `%s`", jsonObj.get("linkedRouterApplianceInstances").toString()));
          }

          // validate the optional field `linkedRouterApplianceInstances` (array)
          for (int i = 0; i < jsonArraylinkedRouterApplianceInstances.size(); i++) {
            RouterApplianceInstance.validateJsonElement(jsonArraylinkedRouterApplianceInstances.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("linkedVpnTunnels") != null && !jsonObj.get("linkedVpnTunnels").isJsonNull() && !jsonObj.get("linkedVpnTunnels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedVpnTunnels` to be an array in the JSON string but got `%s`", jsonObj.get("linkedVpnTunnels").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Spoke.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Spoke' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Spoke> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Spoke.class));

       return (TypeAdapter<T>) new TypeAdapter<Spoke>() {
           @Override
           public void write(JsonWriter out, Spoke value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Spoke read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Spoke given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Spoke
   * @throws IOException if the JSON string is invalid with respect to Spoke
   */
  public static Spoke fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Spoke.class);
  }

  /**
   * Convert an instance of Spoke to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

