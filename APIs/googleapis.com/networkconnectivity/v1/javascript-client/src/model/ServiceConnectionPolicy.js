/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PscConfig from './PscConfig';
import PscConnection from './PscConnection';

/**
 * The ServiceConnectionPolicy model module.
 * @module model/ServiceConnectionPolicy
 * @version v1
 */
class ServiceConnectionPolicy {
    /**
     * Constructs a new <code>ServiceConnectionPolicy</code>.
     * The ServiceConnectionPolicy resource. Next id: 12
     * @alias module:model/ServiceConnectionPolicy
     */
    constructor() { 
        
        ServiceConnectionPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceConnectionPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceConnectionPolicy} obj Optional instance to populate.
     * @return {module:model/ServiceConnectionPolicy} The populated <code>ServiceConnectionPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceConnectionPolicy();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('infrastructure')) {
                obj['infrastructure'] = ApiClient.convertToType(data['infrastructure'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('pscConfig')) {
                obj['pscConfig'] = PscConfig.constructFromObject(data['pscConfig']);
            }
            if (data.hasOwnProperty('pscConnections')) {
                obj['pscConnections'] = ApiClient.convertToType(data['pscConnections'], [PscConnection]);
            }
            if (data.hasOwnProperty('serviceClass')) {
                obj['serviceClass'] = ApiClient.convertToType(data['serviceClass'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceConnectionPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceConnectionPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['infrastructure'] && !(typeof data['infrastructure'] === 'string' || data['infrastructure'] instanceof String)) {
            throw new Error("Expected the field `infrastructure` to be a primitive type in the JSON string but got " + data['infrastructure']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // validate the optional field `pscConfig`
        if (data['pscConfig']) { // data not null
          PscConfig.validateJSON(data['pscConfig']);
        }
        if (data['pscConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['pscConnections'])) {
                throw new Error("Expected the field `pscConnections` to be an array in the JSON data but got " + data['pscConnections']);
            }
            // validate the optional field `pscConnections` (array)
            for (const item of data['pscConnections']) {
                PscConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceClass'] && !(typeof data['serviceClass'] === 'string' || data['serviceClass'] instanceof String)) {
            throw new Error("Expected the field `serviceClass` to be a primitive type in the JSON string but got " + data['serviceClass']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. Time when the ServiceConnectionMap was created.
 * @member {String} createTime
 */
ServiceConnectionPolicy.prototype['createTime'] = undefined;

/**
 * A description of this resource.
 * @member {String} description
 */
ServiceConnectionPolicy.prototype['description'] = undefined;

/**
 * Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
ServiceConnectionPolicy.prototype['etag'] = undefined;

/**
 * Output only. The type of underlying resources used to create the connection.
 * @member {module:model/ServiceConnectionPolicy.InfrastructureEnum} infrastructure
 */
ServiceConnectionPolicy.prototype['infrastructure'] = undefined;

/**
 * User-defined labels.
 * @member {Object.<String, String>} labels
 */
ServiceConnectionPolicy.prototype['labels'] = undefined;

/**
 * Immutable. The name of a ServiceConnectionPolicy. Format: projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy} See: https://google.aip.dev/122#fields-representing-resource-names
 * @member {String} name
 */
ServiceConnectionPolicy.prototype['name'] = undefined;

/**
 * The resource path of the consumer network. Example: - projects/{projectNumOrId}/global/networks/{resourceId}.
 * @member {String} network
 */
ServiceConnectionPolicy.prototype['network'] = undefined;

/**
 * @member {module:model/PscConfig} pscConfig
 */
ServiceConnectionPolicy.prototype['pscConfig'] = undefined;

/**
 * Output only. [Output only] Information about each Private Service Connect connection.
 * @member {Array.<module:model/PscConnection>} pscConnections
 */
ServiceConnectionPolicy.prototype['pscConnections'] = undefined;

/**
 * The service class identifier for which this ServiceConnectionPolicy is for. The service class identifier is a unique, symbolic representation of a ServiceClass. It is provided by the Service Producer. Google services have a prefix of gcp. For example, gcp-cloud-sql. 3rd party services do not. For example, test-service-a3dfcx.
 * @member {String} serviceClass
 */
ServiceConnectionPolicy.prototype['serviceClass'] = undefined;

/**
 * Output only. Time when the ServiceConnectionMap was updated.
 * @member {String} updateTime
 */
ServiceConnectionPolicy.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>infrastructure</code> property.
 * @enum {String}
 * @readonly
 */
ServiceConnectionPolicy['InfrastructureEnum'] = {

    /**
     * value: "INFRASTRUCTURE_UNSPECIFIED"
     * @const
     */
    "INFRASTRUCTURE_UNSPECIFIED": "INFRASTRUCTURE_UNSPECIFIED",

    /**
     * value: "PSC"
     * @const
     */
    "PSC": "PSC"
};



export default ServiceConnectionPolicy;

