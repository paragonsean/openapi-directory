/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpokeStateCount model module.
 * @module model/SpokeStateCount
 * @version v1
 */
class SpokeStateCount {
    /**
     * Constructs a new <code>SpokeStateCount</code>.
     * The number of spokes that are in a particular state and associated with a given hub.
     * @alias module:model/SpokeStateCount
     */
    constructor() { 
        
        SpokeStateCount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpokeStateCount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpokeStateCount} obj Optional instance to populate.
     * @return {module:model/SpokeStateCount} The populated <code>SpokeStateCount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpokeStateCount();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpokeStateCount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpokeStateCount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['count'] && !(typeof data['count'] === 'string' || data['count'] instanceof String)) {
            throw new Error("Expected the field `count` to be a primitive type in the JSON string but got " + data['count']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The total number of spokes that are in this state and associated with a given hub.
 * @member {String} count
 */
SpokeStateCount.prototype['count'] = undefined;

/**
 * Output only. The state of the spokes.
 * @member {module:model/SpokeStateCount.StateEnum} state
 */
SpokeStateCount.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SpokeStateCount['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ACCEPTING"
     * @const
     */
    "ACCEPTING": "ACCEPTING",

    /**
     * value: "REJECTING"
     * @const
     */
    "REJECTING": "REJECTING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "OBSOLETE"
     * @const
     */
    "OBSOLETE": "OBSOLETE"
};



export default SpokeStateCount;

