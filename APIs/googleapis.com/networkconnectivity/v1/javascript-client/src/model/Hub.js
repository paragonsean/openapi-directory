/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RoutingVPC from './RoutingVPC';
import SpokeSummary from './SpokeSummary';

/**
 * The Hub model module.
 * @module model/Hub
 * @version v1
 */
class Hub {
    /**
     * Constructs a new <code>Hub</code>.
     * A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub&#39;s spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project.
     * @alias module:model/Hub
     */
    constructor() { 
        
        Hub.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Hub</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Hub} obj Optional instance to populate.
     * @return {module:model/Hub} The populated <code>Hub</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Hub();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('routeTables')) {
                obj['routeTables'] = ApiClient.convertToType(data['routeTables'], ['String']);
            }
            if (data.hasOwnProperty('routingVpcs')) {
                obj['routingVpcs'] = ApiClient.convertToType(data['routingVpcs'], [RoutingVPC]);
            }
            if (data.hasOwnProperty('spokeSummary')) {
                obj['spokeSummary'] = SpokeSummary.constructFromObject(data['spokeSummary']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Hub</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Hub</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['routeTables'])) {
            throw new Error("Expected the field `routeTables` to be an array in the JSON data but got " + data['routeTables']);
        }
        if (data['routingVpcs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['routingVpcs'])) {
                throw new Error("Expected the field `routingVpcs` to be an array in the JSON data but got " + data['routingVpcs']);
            }
            // validate the optional field `routingVpcs` (array)
            for (const item of data['routingVpcs']) {
                RoutingVPC.validateJSON(item);
            };
        }
        // validate the optional field `spokeSummary`
        if (data['spokeSummary']) { // data not null
          SpokeSummary.validateJSON(data['spokeSummary']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uniqueId'] && !(typeof data['uniqueId'] === 'string' || data['uniqueId'] instanceof String)) {
            throw new Error("Expected the field `uniqueId` to be a primitive type in the JSON string but got " + data['uniqueId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The time the hub was created.
 * @member {String} createTime
 */
Hub.prototype['createTime'] = undefined;

/**
 * An optional description of the hub.
 * @member {String} description
 */
Hub.prototype['description'] = undefined;

/**
 * Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 * @member {Object.<String, String>} labels
 */
Hub.prototype['labels'] = undefined;

/**
 * Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`
 * @member {String} name
 */
Hub.prototype['name'] = undefined;

/**
 * Output only. The route tables that belong to this hub. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}` This field is read-only. Network Connectivity Center automatically populates it based on the route tables nested under the hub.
 * @member {Array.<String>} routeTables
 */
Hub.prototype['routeTables'] = undefined;

/**
 * The VPC networks associated with this hub's spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.
 * @member {Array.<module:model/RoutingVPC>} routingVpcs
 */
Hub.prototype['routingVpcs'] = undefined;

/**
 * @member {module:model/SpokeSummary} spokeSummary
 */
Hub.prototype['spokeSummary'] = undefined;

/**
 * Output only. The current lifecycle state of this hub.
 * @member {module:model/Hub.StateEnum} state
 */
Hub.prototype['state'] = undefined;

/**
 * Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.
 * @member {String} uniqueId
 */
Hub.prototype['uniqueId'] = undefined;

/**
 * Output only. The time the hub was last updated.
 * @member {String} updateTime
 */
Hub.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Hub['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ACCEPTING"
     * @const
     */
    "ACCEPTING": "ACCEPTING",

    /**
     * value: "REJECTING"
     * @const
     */
    "REJECTING": "REJECTING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "OBSOLETE"
     * @const
     */
    "OBSOLETE": "OBSOLETE"
};



export default Hub;

