/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LinkedInterconnectAttachments model module.
 * @module model/LinkedInterconnectAttachments
 * @version v1
 */
class LinkedInterconnectAttachments {
    /**
     * Constructs a new <code>LinkedInterconnectAttachments</code>.
     * A collection of VLAN attachment resources. These resources should be redundant attachments that all advertise the same prefixes to Google Cloud. Alternatively, in active/passive configurations, all attachments should be capable of advertising the same prefixes.
     * @alias module:model/LinkedInterconnectAttachments
     */
    constructor() { 
        
        LinkedInterconnectAttachments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkedInterconnectAttachments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkedInterconnectAttachments} obj Optional instance to populate.
     * @return {module:model/LinkedInterconnectAttachments} The populated <code>LinkedInterconnectAttachments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkedInterconnectAttachments();

            if (data.hasOwnProperty('siteToSiteDataTransfer')) {
                obj['siteToSiteDataTransfer'] = ApiClient.convertToType(data['siteToSiteDataTransfer'], 'Boolean');
            }
            if (data.hasOwnProperty('uris')) {
                obj['uris'] = ApiClient.convertToType(data['uris'], ['String']);
            }
            if (data.hasOwnProperty('vpcNetwork')) {
                obj['vpcNetwork'] = ApiClient.convertToType(data['vpcNetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkedInterconnectAttachments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkedInterconnectAttachments</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['uris'])) {
            throw new Error("Expected the field `uris` to be an array in the JSON data but got " + data['uris']);
        }
        // ensure the json data is a string
        if (data['vpcNetwork'] && !(typeof data['vpcNetwork'] === 'string' || data['vpcNetwork'] instanceof String)) {
            throw new Error("Expected the field `vpcNetwork` to be a primitive type in the JSON string but got " + data['vpcNetwork']);
        }

        return true;
    }


}



/**
 * A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
 * @member {Boolean} siteToSiteDataTransfer
 */
LinkedInterconnectAttachments.prototype['siteToSiteDataTransfer'] = undefined;

/**
 * The URIs of linked interconnect attachment resources
 * @member {Array.<String>} uris
 */
LinkedInterconnectAttachments.prototype['uris'] = undefined;

/**
 * Output only. The VPC network where these VLAN attachments are located.
 * @member {String} vpcNetwork
 */
LinkedInterconnectAttachments.prototype['vpcNetwork'] = undefined;






export default LinkedInterconnectAttachments;

