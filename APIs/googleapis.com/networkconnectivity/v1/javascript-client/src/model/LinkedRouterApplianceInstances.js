/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RouterApplianceInstance from './RouterApplianceInstance';

/**
 * The LinkedRouterApplianceInstances model module.
 * @module model/LinkedRouterApplianceInstances
 * @version v1
 */
class LinkedRouterApplianceInstances {
    /**
     * Constructs a new <code>LinkedRouterApplianceInstances</code>.
     * A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
     * @alias module:model/LinkedRouterApplianceInstances
     */
    constructor() { 
        
        LinkedRouterApplianceInstances.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LinkedRouterApplianceInstances</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LinkedRouterApplianceInstances} obj Optional instance to populate.
     * @return {module:model/LinkedRouterApplianceInstances} The populated <code>LinkedRouterApplianceInstances</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LinkedRouterApplianceInstances();

            if (data.hasOwnProperty('instances')) {
                obj['instances'] = ApiClient.convertToType(data['instances'], [RouterApplianceInstance]);
            }
            if (data.hasOwnProperty('siteToSiteDataTransfer')) {
                obj['siteToSiteDataTransfer'] = ApiClient.convertToType(data['siteToSiteDataTransfer'], 'Boolean');
            }
            if (data.hasOwnProperty('vpcNetwork')) {
                obj['vpcNetwork'] = ApiClient.convertToType(data['vpcNetwork'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LinkedRouterApplianceInstances</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LinkedRouterApplianceInstances</code>.
     */
    static validateJSON(data) {
        if (data['instances']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instances'])) {
                throw new Error("Expected the field `instances` to be an array in the JSON data but got " + data['instances']);
            }
            // validate the optional field `instances` (array)
            for (const item of data['instances']) {
                RouterApplianceInstance.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['vpcNetwork'] && !(typeof data['vpcNetwork'] === 'string' || data['vpcNetwork'] instanceof String)) {
            throw new Error("Expected the field `vpcNetwork` to be a primitive type in the JSON string but got " + data['vpcNetwork']);
        }

        return true;
    }


}



/**
 * The list of router appliance instances.
 * @member {Array.<module:model/RouterApplianceInstance>} instances
 */
LinkedRouterApplianceInstances.prototype['instances'] = undefined;

/**
 * A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
 * @member {Boolean} siteToSiteDataTransfer
 */
LinkedRouterApplianceInstances.prototype['siteToSiteDataTransfer'] = undefined;

/**
 * Output only. The VPC network where these router appliance instances are located.
 * @member {String} vpcNetwork
 */
LinkedRouterApplianceInstances.prototype['vpcNetwork'] = undefined;






export default LinkedRouterApplianceInstances;

