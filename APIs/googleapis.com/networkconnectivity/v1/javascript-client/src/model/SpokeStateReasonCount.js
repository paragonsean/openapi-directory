/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpokeStateReasonCount model module.
 * @module model/SpokeStateReasonCount
 * @version v1
 */
class SpokeStateReasonCount {
    /**
     * Constructs a new <code>SpokeStateReasonCount</code>.
     * The number of spokes in the hub that are inactive for this reason.
     * @alias module:model/SpokeStateReasonCount
     */
    constructor() { 
        
        SpokeStateReasonCount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpokeStateReasonCount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpokeStateReasonCount} obj Optional instance to populate.
     * @return {module:model/SpokeStateReasonCount} The populated <code>SpokeStateReasonCount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpokeStateReasonCount();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('stateReasonCode')) {
                obj['stateReasonCode'] = ApiClient.convertToType(data['stateReasonCode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpokeStateReasonCount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpokeStateReasonCount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['count'] && !(typeof data['count'] === 'string' || data['count'] instanceof String)) {
            throw new Error("Expected the field `count` to be a primitive type in the JSON string but got " + data['count']);
        }
        // ensure the json data is a string
        if (data['stateReasonCode'] && !(typeof data['stateReasonCode'] === 'string' || data['stateReasonCode'] instanceof String)) {
            throw new Error("Expected the field `stateReasonCode` to be a primitive type in the JSON string but got " + data['stateReasonCode']);
        }

        return true;
    }


}



/**
 * Output only. The total number of spokes that are inactive for a particular reason and associated with a given hub.
 * @member {String} count
 */
SpokeStateReasonCount.prototype['count'] = undefined;

/**
 * Output only. The reason that a spoke is inactive.
 * @member {module:model/SpokeStateReasonCount.StateReasonCodeEnum} stateReasonCode
 */
SpokeStateReasonCount.prototype['stateReasonCode'] = undefined;





/**
 * Allowed values for the <code>stateReasonCode</code> property.
 * @enum {String}
 * @readonly
 */
SpokeStateReasonCount['StateReasonCodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "PENDING_REVIEW"
     * @const
     */
    "PENDING_REVIEW": "PENDING_REVIEW",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED",

    /**
     * value: "PAUSED"
     * @const
     */
    "PAUSED": "PAUSED",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default SpokeStateReasonCount;

