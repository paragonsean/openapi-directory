/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleRpcErrorInfo from './GoogleRpcErrorInfo';
import GoogleRpcStatus from './GoogleRpcStatus';

/**
 * The PscConnection model module.
 * @module model/PscConnection
 * @version v1
 */
class PscConnection {
    /**
     * Constructs a new <code>PscConnection</code>.
     * Information about a specific Private Service Connect connection.
     * @alias module:model/PscConnection
     */
    constructor() { 
        
        PscConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PscConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PscConnection} obj Optional instance to populate.
     * @return {module:model/PscConnection} The populated <code>PscConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PscConnection();

            if (data.hasOwnProperty('consumerAddress')) {
                obj['consumerAddress'] = ApiClient.convertToType(data['consumerAddress'], 'String');
            }
            if (data.hasOwnProperty('consumerForwardingRule')) {
                obj['consumerForwardingRule'] = ApiClient.convertToType(data['consumerForwardingRule'], 'String');
            }
            if (data.hasOwnProperty('consumerTargetProject')) {
                obj['consumerTargetProject'] = ApiClient.convertToType(data['consumerTargetProject'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = GoogleRpcStatus.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('errorInfo')) {
                obj['errorInfo'] = GoogleRpcErrorInfo.constructFromObject(data['errorInfo']);
            }
            if (data.hasOwnProperty('errorType')) {
                obj['errorType'] = ApiClient.convertToType(data['errorType'], 'String');
            }
            if (data.hasOwnProperty('gceOperation')) {
                obj['gceOperation'] = ApiClient.convertToType(data['gceOperation'], 'String');
            }
            if (data.hasOwnProperty('pscConnectionId')) {
                obj['pscConnectionId'] = ApiClient.convertToType(data['pscConnectionId'], 'String');
            }
            if (data.hasOwnProperty('selectedSubnetwork')) {
                obj['selectedSubnetwork'] = ApiClient.convertToType(data['selectedSubnetwork'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PscConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PscConnection</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consumerAddress'] && !(typeof data['consumerAddress'] === 'string' || data['consumerAddress'] instanceof String)) {
            throw new Error("Expected the field `consumerAddress` to be a primitive type in the JSON string but got " + data['consumerAddress']);
        }
        // ensure the json data is a string
        if (data['consumerForwardingRule'] && !(typeof data['consumerForwardingRule'] === 'string' || data['consumerForwardingRule'] instanceof String)) {
            throw new Error("Expected the field `consumerForwardingRule` to be a primitive type in the JSON string but got " + data['consumerForwardingRule']);
        }
        // ensure the json data is a string
        if (data['consumerTargetProject'] && !(typeof data['consumerTargetProject'] === 'string' || data['consumerTargetProject'] instanceof String)) {
            throw new Error("Expected the field `consumerTargetProject` to be a primitive type in the JSON string but got " + data['consumerTargetProject']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          GoogleRpcStatus.validateJSON(data['error']);
        }
        // validate the optional field `errorInfo`
        if (data['errorInfo']) { // data not null
          GoogleRpcErrorInfo.validateJSON(data['errorInfo']);
        }
        // ensure the json data is a string
        if (data['errorType'] && !(typeof data['errorType'] === 'string' || data['errorType'] instanceof String)) {
            throw new Error("Expected the field `errorType` to be a primitive type in the JSON string but got " + data['errorType']);
        }
        // ensure the json data is a string
        if (data['gceOperation'] && !(typeof data['gceOperation'] === 'string' || data['gceOperation'] instanceof String)) {
            throw new Error("Expected the field `gceOperation` to be a primitive type in the JSON string but got " + data['gceOperation']);
        }
        // ensure the json data is a string
        if (data['pscConnectionId'] && !(typeof data['pscConnectionId'] === 'string' || data['pscConnectionId'] instanceof String)) {
            throw new Error("Expected the field `pscConnectionId` to be a primitive type in the JSON string but got " + data['pscConnectionId']);
        }
        // ensure the json data is a string
        if (data['selectedSubnetwork'] && !(typeof data['selectedSubnetwork'] === 'string' || data['selectedSubnetwork'] instanceof String)) {
            throw new Error("Expected the field `selectedSubnetwork` to be a primitive type in the JSON string but got " + data['selectedSubnetwork']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * The resource reference of the consumer address.
 * @member {String} consumerAddress
 */
PscConnection.prototype['consumerAddress'] = undefined;

/**
 * The resource reference of the PSC Forwarding Rule within the consumer VPC.
 * @member {String} consumerForwardingRule
 */
PscConnection.prototype['consumerForwardingRule'] = undefined;

/**
 * The project where the PSC connection is created.
 * @member {String} consumerTargetProject
 */
PscConnection.prototype['consumerTargetProject'] = undefined;

/**
 * @member {module:model/GoogleRpcStatus} error
 */
PscConnection.prototype['error'] = undefined;

/**
 * @member {module:model/GoogleRpcErrorInfo} errorInfo
 */
PscConnection.prototype['errorInfo'] = undefined;

/**
 * The error type indicates whether the error is consumer facing, producer facing or system internal.
 * @member {module:model/PscConnection.ErrorTypeEnum} errorType
 */
PscConnection.prototype['errorType'] = undefined;

/**
 * The last Compute Engine operation to setup PSC connection.
 * @member {String} gceOperation
 */
PscConnection.prototype['gceOperation'] = undefined;

/**
 * The PSC connection id of the PSC forwarding rule.
 * @member {String} pscConnectionId
 */
PscConnection.prototype['pscConnectionId'] = undefined;

/**
 * Output only. The URI of the subnetwork selected to allocate IP address for this connection.
 * @member {String} selectedSubnetwork
 */
PscConnection.prototype['selectedSubnetwork'] = undefined;

/**
 * State of the PSC Connection
 * @member {module:model/PscConnection.StateEnum} state
 */
PscConnection.prototype['state'] = undefined;





/**
 * Allowed values for the <code>errorType</code> property.
 * @enum {String}
 * @readonly
 */
PscConnection['ErrorTypeEnum'] = {

    /**
     * value: "CONNECTION_ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "CONNECTION_ERROR_TYPE_UNSPECIFIED": "CONNECTION_ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "ERROR_INTERNAL"
     * @const
     */
    "ERROR_INTERNAL": "ERROR_INTERNAL",

    /**
     * value: "ERROR_CONSUMER_SIDE"
     * @const
     */
    "ERROR_CONSUMER_SIDE": "ERROR_CONSUMER_SIDE",

    /**
     * value: "ERROR_PRODUCER_SIDE"
     * @const
     */
    "ERROR_PRODUCER_SIDE": "ERROR_PRODUCER_SIDE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PscConnection['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default PscConnection;

