/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpokeTypeCount model module.
 * @module model/SpokeTypeCount
 * @version v1
 */
class SpokeTypeCount {
    /**
     * Constructs a new <code>SpokeTypeCount</code>.
     * The number of spokes of a given type that are associated with a specific hub. The type indicates what kind of resource is associated with the spoke.
     * @alias module:model/SpokeTypeCount
     */
    constructor() { 
        
        SpokeTypeCount.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpokeTypeCount</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpokeTypeCount} obj Optional instance to populate.
     * @return {module:model/SpokeTypeCount} The populated <code>SpokeTypeCount</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpokeTypeCount();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'String');
            }
            if (data.hasOwnProperty('spokeType')) {
                obj['spokeType'] = ApiClient.convertToType(data['spokeType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpokeTypeCount</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpokeTypeCount</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['count'] && !(typeof data['count'] === 'string' || data['count'] instanceof String)) {
            throw new Error("Expected the field `count` to be a primitive type in the JSON string but got " + data['count']);
        }
        // ensure the json data is a string
        if (data['spokeType'] && !(typeof data['spokeType'] === 'string' || data['spokeType'] instanceof String)) {
            throw new Error("Expected the field `spokeType` to be a primitive type in the JSON string but got " + data['spokeType']);
        }

        return true;
    }


}



/**
 * Output only. The total number of spokes of this type that are associated with the hub.
 * @member {String} count
 */
SpokeTypeCount.prototype['count'] = undefined;

/**
 * Output only. The type of the spokes.
 * @member {module:model/SpokeTypeCount.SpokeTypeEnum} spokeType
 */
SpokeTypeCount.prototype['spokeType'] = undefined;





/**
 * Allowed values for the <code>spokeType</code> property.
 * @enum {String}
 * @readonly
 */
SpokeTypeCount['SpokeTypeEnum'] = {

    /**
     * value: "SPOKE_TYPE_UNSPECIFIED"
     * @const
     */
    "SPOKE_TYPE_UNSPECIFIED": "SPOKE_TYPE_UNSPECIFIED",

    /**
     * value: "VPN_TUNNEL"
     * @const
     */
    "VPN_TUNNEL": "VPN_TUNNEL",

    /**
     * value: "INTERCONNECT_ATTACHMENT"
     * @const
     */
    "INTERCONNECT_ATTACHMENT": "INTERCONNECT_ATTACHMENT",

    /**
     * value: "ROUTER_APPLIANCE"
     * @const
     */
    "ROUTER_APPLIANCE": "ROUTER_APPLIANCE",

    /**
     * value: "VPC_NETWORK"
     * @const
     */
    "VPC_NETWORK": "VPC_NETWORK"
};



export default SpokeTypeCount;

