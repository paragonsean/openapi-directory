/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GoogleRpcErrorInfo model module.
 * @module model/GoogleRpcErrorInfo
 * @version v1
 */
class GoogleRpcErrorInfo {
    /**
     * Constructs a new <code>GoogleRpcErrorInfo</code>.
     * Describes the cause of the error with structured details. Example of an error when contacting the \&quot;pubsub.googleapis.com\&quot; API when it is not enabled: { \&quot;reason\&quot;: \&quot;API_DISABLED\&quot; \&quot;domain\&quot;: \&quot;googleapis.com\&quot; \&quot;metadata\&quot;: { \&quot;resource\&quot;: \&quot;projects/123\&quot;, \&quot;service\&quot;: \&quot;pubsub.googleapis.com\&quot; } } This response indicates that the pubsub.googleapis.com API is not enabled. Example of an error that is returned when attempting to create a Spanner instance in a region that is out of stock: { \&quot;reason\&quot;: \&quot;STOCKOUT\&quot; \&quot;domain\&quot;: \&quot;spanner.googleapis.com\&quot;, \&quot;metadata\&quot;: { \&quot;availableRegions\&quot;: \&quot;us-central1,us-east2\&quot; } }
     * @alias module:model/GoogleRpcErrorInfo
     */
    constructor() { 
        
        GoogleRpcErrorInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleRpcErrorInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleRpcErrorInfo} obj Optional instance to populate.
     * @return {module:model/GoogleRpcErrorInfo} The populated <code>GoogleRpcErrorInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleRpcErrorInfo();

            if (data.hasOwnProperty('domain')) {
                obj['domain'] = ApiClient.convertToType(data['domain'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], {'String': 'String'});
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleRpcErrorInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleRpcErrorInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['domain'] && !(typeof data['domain'] === 'string' || data['domain'] instanceof String)) {
            throw new Error("Expected the field `domain` to be a primitive type in the JSON string but got " + data['domain']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * The logical grouping to which the \"reason\" belongs. The error domain is typically the registered service name of the tool or product that generates the error. Example: \"pubsub.googleapis.com\". If the error is generated by some common infrastructure, the error domain must be a globally unique value that identifies the infrastructure. For Google API infrastructure, the error domain is \"googleapis.com\".
 * @member {String} domain
 */
GoogleRpcErrorInfo.prototype['domain'] = undefined;

/**
 * Additional structured details about this error. Keys should match /[a-zA-Z0-9-_]/ and be limited to 64 characters in length. When identifying the current value of an exceeded limit, the units should be contained in the key, not the value. For example, rather than {\"instanceLimit\": \"100/request\"}, should be returned as, {\"instanceLimitPerRequest\": \"100\"}, if the client exceeds the number of instances that can be created in a single (batch) request.
 * @member {Object.<String, String>} metadata
 */
GoogleRpcErrorInfo.prototype['metadata'] = undefined;

/**
 * The reason of the error. This is a constant value that identifies the proximate cause of the error. Error reasons are unique within a particular domain of errors. This should be at most 63 characters and match a regular expression of `A-Z+[A-Z0-9]`, which represents UPPER_SNAKE_CASE.
 * @member {String} reason
 */
GoogleRpcErrorInfo.prototype['reason'] = undefined;






export default GoogleRpcErrorInfo;

