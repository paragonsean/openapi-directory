/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsumerPscConfig model module.
 * @module model/ConsumerPscConfig
 * @version v1
 */
class ConsumerPscConfig {
    /**
     * Constructs a new <code>ConsumerPscConfig</code>.
     * Allow the producer to specify which consumers can connect to it.
     * @alias module:model/ConsumerPscConfig
     */
    constructor() { 
        
        ConsumerPscConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsumerPscConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsumerPscConfig} obj Optional instance to populate.
     * @return {module:model/ConsumerPscConfig} The populated <code>ConsumerPscConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsumerPscConfig();

            if (data.hasOwnProperty('disableGlobalAccess')) {
                obj['disableGlobalAccess'] = ApiClient.convertToType(data['disableGlobalAccess'], 'Boolean');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsumerPscConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsumerPscConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.
 * @member {Boolean} disableGlobalAccess
 */
ConsumerPscConfig.prototype['disableGlobalAccess'] = undefined;

/**
 * The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.
 * @member {String} network
 */
ConsumerPscConfig.prototype['network'] = undefined;

/**
 * The consumer project where PSC connections are allowed to be created in.
 * @member {String} project
 */
ConsumerPscConfig.prototype['project'] = undefined;

/**
 * Output only. Overall state of PSC Connections management for this consumer psc config.
 * @member {module:model/ConsumerPscConfig.StateEnum} state
 */
ConsumerPscConfig.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConsumerPscConfig['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "VALID"
     * @const
     */
    "VALID": "VALID",

    /**
     * value: "CONNECTION_POLICY_MISSING"
     * @const
     */
    "CONNECTION_POLICY_MISSING": "CONNECTION_POLICY_MISSING",

    /**
     * value: "POLICY_LIMIT_REACHED"
     * @const
     */
    "POLICY_LIMIT_REACHED": "POLICY_LIMIT_REACHED"
};



export default ConsumerPscConfig;

