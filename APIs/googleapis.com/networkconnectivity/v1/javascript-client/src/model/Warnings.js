/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Warnings model module.
 * @module model/Warnings
 * @version v1
 */
class Warnings {
    /**
     * Constructs a new <code>Warnings</code>.
     * Informational warning message.
     * @alias module:model/Warnings
     */
    constructor() { 
        
        Warnings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Warnings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Warnings} obj Optional instance to populate.
     * @return {module:model/Warnings} The populated <code>Warnings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Warnings();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': 'String'});
            }
            if (data.hasOwnProperty('warningMessage')) {
                obj['warningMessage'] = ApiClient.convertToType(data['warningMessage'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Warnings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Warnings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['warningMessage'] && !(typeof data['warningMessage'] === 'string' || data['warningMessage'] instanceof String)) {
            throw new Error("Expected the field `warningMessage` to be a primitive type in the JSON string but got " + data['warningMessage']);
        }

        return true;
    }


}



/**
 * Output only. A warning code, if applicable.
 * @member {module:model/Warnings.CodeEnum} code
 */
Warnings.prototype['code'] = undefined;

/**
 * Output only. Metadata about this warning in key: value format. The key should provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement.
 * @member {Object.<String, String>} data
 */
Warnings.prototype['data'] = undefined;

/**
 * Output only. A human-readable description of the warning code.
 * @member {String} warningMessage
 */
Warnings.prototype['warningMessage'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
Warnings['CodeEnum'] = {

    /**
     * value: "WARNING_UNSPECIFIED"
     * @const
     */
    "WARNING_UNSPECIFIED": "WARNING_UNSPECIFIED",

    /**
     * value: "RESOURCE_NOT_ACTIVE"
     * @const
     */
    "RESOURCE_NOT_ACTIVE": "RESOURCE_NOT_ACTIVE",

    /**
     * value: "RESOURCE_BEING_MODIFIED"
     * @const
     */
    "RESOURCE_BEING_MODIFIED": "RESOURCE_BEING_MODIFIED"
};



export default Warnings;

