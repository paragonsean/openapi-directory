/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConsumerPscConfig from './ConsumerPscConfig';
import ConsumerPscConnection from './ConsumerPscConnection';
import ProducerPscConfig from './ProducerPscConfig';

/**
 * The ServiceConnectionMap model module.
 * @module model/ServiceConnectionMap
 * @version v1
 */
class ServiceConnectionMap {
    /**
     * Constructs a new <code>ServiceConnectionMap</code>.
     * The ServiceConnectionMap resource. Next id: 15
     * @alias module:model/ServiceConnectionMap
     */
    constructor() { 
        
        ServiceConnectionMap.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ServiceConnectionMap</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceConnectionMap} obj Optional instance to populate.
     * @return {module:model/ServiceConnectionMap} The populated <code>ServiceConnectionMap</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceConnectionMap();

            if (data.hasOwnProperty('consumerPscConfigs')) {
                obj['consumerPscConfigs'] = ApiClient.convertToType(data['consumerPscConfigs'], [ConsumerPscConfig]);
            }
            if (data.hasOwnProperty('consumerPscConnections')) {
                obj['consumerPscConnections'] = ApiClient.convertToType(data['consumerPscConnections'], [ConsumerPscConnection]);
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('etag')) {
                obj['etag'] = ApiClient.convertToType(data['etag'], 'String');
            }
            if (data.hasOwnProperty('infrastructure')) {
                obj['infrastructure'] = ApiClient.convertToType(data['infrastructure'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('producerPscConfigs')) {
                obj['producerPscConfigs'] = ApiClient.convertToType(data['producerPscConfigs'], [ProducerPscConfig]);
            }
            if (data.hasOwnProperty('serviceClass')) {
                obj['serviceClass'] = ApiClient.convertToType(data['serviceClass'], 'String');
            }
            if (data.hasOwnProperty('serviceClassUri')) {
                obj['serviceClassUri'] = ApiClient.convertToType(data['serviceClassUri'], 'String');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceConnectionMap</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceConnectionMap</code>.
     */
    static validateJSON(data) {
        if (data['consumerPscConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consumerPscConfigs'])) {
                throw new Error("Expected the field `consumerPscConfigs` to be an array in the JSON data but got " + data['consumerPscConfigs']);
            }
            // validate the optional field `consumerPscConfigs` (array)
            for (const item of data['consumerPscConfigs']) {
                ConsumerPscConfig.validateJSON(item);
            };
        }
        if (data['consumerPscConnections']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consumerPscConnections'])) {
                throw new Error("Expected the field `consumerPscConnections` to be an array in the JSON data but got " + data['consumerPscConnections']);
            }
            // validate the optional field `consumerPscConnections` (array)
            for (const item of data['consumerPscConnections']) {
                ConsumerPscConnection.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['etag'] && !(typeof data['etag'] === 'string' || data['etag'] instanceof String)) {
            throw new Error("Expected the field `etag` to be a primitive type in the JSON string but got " + data['etag']);
        }
        // ensure the json data is a string
        if (data['infrastructure'] && !(typeof data['infrastructure'] === 'string' || data['infrastructure'] instanceof String)) {
            throw new Error("Expected the field `infrastructure` to be a primitive type in the JSON string but got " + data['infrastructure']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['producerPscConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['producerPscConfigs'])) {
                throw new Error("Expected the field `producerPscConfigs` to be an array in the JSON data but got " + data['producerPscConfigs']);
            }
            // validate the optional field `producerPscConfigs` (array)
            for (const item of data['producerPscConfigs']) {
                ProducerPscConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['serviceClass'] && !(typeof data['serviceClass'] === 'string' || data['serviceClass'] instanceof String)) {
            throw new Error("Expected the field `serviceClass` to be a primitive type in the JSON string but got " + data['serviceClass']);
        }
        // ensure the json data is a string
        if (data['serviceClassUri'] && !(typeof data['serviceClassUri'] === 'string' || data['serviceClassUri'] instanceof String)) {
            throw new Error("Expected the field `serviceClassUri` to be a primitive type in the JSON string but got " + data['serviceClassUri']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The PSC configurations on consumer side.
 * @member {Array.<module:model/ConsumerPscConfig>} consumerPscConfigs
 */
ServiceConnectionMap.prototype['consumerPscConfigs'] = undefined;

/**
 * Output only. PSC connection details on consumer side.
 * @member {Array.<module:model/ConsumerPscConnection>} consumerPscConnections
 */
ServiceConnectionMap.prototype['consumerPscConnections'] = undefined;

/**
 * Output only. Time when the ServiceConnectionMap was created.
 * @member {String} createTime
 */
ServiceConnectionMap.prototype['createTime'] = undefined;

/**
 * A description of this resource.
 * @member {String} description
 */
ServiceConnectionMap.prototype['description'] = undefined;

/**
 * Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
 * @member {String} etag
 */
ServiceConnectionMap.prototype['etag'] = undefined;

/**
 * Output only. The infrastructure used for connections between consumers/producers.
 * @member {module:model/ServiceConnectionMap.InfrastructureEnum} infrastructure
 */
ServiceConnectionMap.prototype['infrastructure'] = undefined;

/**
 * User-defined labels.
 * @member {Object.<String, String>} labels
 */
ServiceConnectionMap.prototype['labels'] = undefined;

/**
 * Immutable. The name of a ServiceConnectionMap. Format: projects/{project}/locations/{location}/serviceConnectionMaps/{service_connection_map} See: https://google.aip.dev/122#fields-representing-resource-names
 * @member {String} name
 */
ServiceConnectionMap.prototype['name'] = undefined;

/**
 * The PSC configurations on producer side.
 * @member {Array.<module:model/ProducerPscConfig>} producerPscConfigs
 */
ServiceConnectionMap.prototype['producerPscConfigs'] = undefined;

/**
 * The service class identifier this ServiceConnectionMap is for. The user of ServiceConnectionMap create API needs to have networkconnecitivty.serviceclasses.use iam permission for the service class.
 * @member {String} serviceClass
 */
ServiceConnectionMap.prototype['serviceClass'] = undefined;

/**
 * Output only. The service class uri this ServiceConnectionMap is for.
 * @member {String} serviceClassUri
 */
ServiceConnectionMap.prototype['serviceClassUri'] = undefined;

/**
 * The token provided by the consumer. This token authenticates that the consumer can create a connecton within the specified project and network.
 * @member {String} token
 */
ServiceConnectionMap.prototype['token'] = undefined;

/**
 * Output only. Time when the ServiceConnectionMap was updated.
 * @member {String} updateTime
 */
ServiceConnectionMap.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>infrastructure</code> property.
 * @enum {String}
 * @readonly
 */
ServiceConnectionMap['InfrastructureEnum'] = {

    /**
     * value: "INFRASTRUCTURE_UNSPECIFIED"
     * @const
     */
    "INFRASTRUCTURE_UNSPECIFIED": "INFRASTRUCTURE_UNSPECIFIED",

    /**
     * value: "PSC"
     * @const
     */
    "PSC": "PSC"
};



export default ServiceConnectionMap;

