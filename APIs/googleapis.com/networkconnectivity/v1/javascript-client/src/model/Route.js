/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NextHopVpcNetwork from './NextHopVpcNetwork';

/**
 * The Route model module.
 * @module model/Route
 * @version v1
 */
class Route {
    /**
     * Constructs a new <code>Route</code>.
     * A route defines a path from VM instances within a spoke to a specific destination resource. Only VPC spokes have routes.
     * @alias module:model/Route
     */
    constructor() { 
        
        Route.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Route</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Route} obj Optional instance to populate.
     * @return {module:model/Route} The populated <code>Route</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Route();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('ipCidrRange')) {
                obj['ipCidrRange'] = ApiClient.convertToType(data['ipCidrRange'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('nextHopVpcNetwork')) {
                obj['nextHopVpcNetwork'] = NextHopVpcNetwork.constructFromObject(data['nextHopVpcNetwork']);
            }
            if (data.hasOwnProperty('spoke')) {
                obj['spoke'] = ApiClient.convertToType(data['spoke'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('uid')) {
                obj['uid'] = ApiClient.convertToType(data['uid'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Route</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Route</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['ipCidrRange'] && !(typeof data['ipCidrRange'] === 'string' || data['ipCidrRange'] instanceof String)) {
            throw new Error("Expected the field `ipCidrRange` to be a primitive type in the JSON string but got " + data['ipCidrRange']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `nextHopVpcNetwork`
        if (data['nextHopVpcNetwork']) { // data not null
          NextHopVpcNetwork.validateJSON(data['nextHopVpcNetwork']);
        }
        // ensure the json data is a string
        if (data['spoke'] && !(typeof data['spoke'] === 'string' || data['spoke'] instanceof String)) {
            throw new Error("Expected the field `spoke` to be a primitive type in the JSON string but got " + data['spoke']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['uid'] && !(typeof data['uid'] === 'string' || data['uid'] instanceof String)) {
            throw new Error("Expected the field `uid` to be a primitive type in the JSON string but got " + data['uid']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The time the route was created.
 * @member {String} createTime
 */
Route.prototype['createTime'] = undefined;

/**
 * An optional description of the route.
 * @member {String} description
 */
Route.prototype['description'] = undefined;

/**
 * The destination IP address range.
 * @member {String} ipCidrRange
 */
Route.prototype['ipCidrRange'] = undefined;

/**
 * Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 * @member {Object.<String, String>} labels
 */
Route.prototype['labels'] = undefined;

/**
 * Output only. The location of the route. Uses the following form: \"projects/{project}/locations/{location}\" Example: projects/1234/locations/us-central1
 * @member {String} location
 */
Route.prototype['location'] = undefined;

/**
 * Immutable. The name of the route. Route names must be unique. Route names use the following form: `projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}/routes/{route_id}`
 * @member {String} name
 */
Route.prototype['name'] = undefined;

/**
 * @member {module:model/NextHopVpcNetwork} nextHopVpcNetwork
 */
Route.prototype['nextHopVpcNetwork'] = undefined;

/**
 * Immutable. The spoke that this route leads to. Example: projects/12345/locations/global/spokes/SPOKE
 * @member {String} spoke
 */
Route.prototype['spoke'] = undefined;

/**
 * Output only. The current lifecycle state of the route.
 * @member {module:model/Route.StateEnum} state
 */
Route.prototype['state'] = undefined;

/**
 * Output only. The route's type. Its type is determined by the properties of its IP address range.
 * @member {module:model/Route.TypeEnum} type
 */
Route.prototype['type'] = undefined;

/**
 * Output only. The Google-generated UUID for the route. This value is unique across all Network Connectivity Center route resources. If a route is deleted and another with the same name is created, the new route is assigned a different `uid`.
 * @member {String} uid
 */
Route.prototype['uid'] = undefined;

/**
 * Output only. The time the route was last updated.
 * @member {String} updateTime
 */
Route.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Route['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ACCEPTING"
     * @const
     */
    "ACCEPTING": "ACCEPTING",

    /**
     * value: "REJECTING"
     * @const
     */
    "REJECTING": "REJECTING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "OBSOLETE"
     * @const
     */
    "OBSOLETE": "OBSOLETE"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Route['TypeEnum'] = {

    /**
     * value: "ROUTE_TYPE_UNSPECIFIED"
     * @const
     */
    "ROUTE_TYPE_UNSPECIFIED": "ROUTE_TYPE_UNSPECIFIED",

    /**
     * value: "VPC_PRIMARY_SUBNET"
     * @const
     */
    "VPC_PRIMARY_SUBNET": "VPC_PRIMARY_SUBNET",

    /**
     * value: "VPC_SECONDARY_SUBNET"
     * @const
     */
    "VPC_SECONDARY_SUBNET": "VPC_SECONDARY_SUBNET"
};



export default Route;

