/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleRpcErrorInfo from './GoogleRpcErrorInfo';
import GoogleRpcStatus from './GoogleRpcStatus';

/**
 * The ConsumerPscConnection model module.
 * @module model/ConsumerPscConnection
 * @version v1
 */
class ConsumerPscConnection {
    /**
     * Constructs a new <code>ConsumerPscConnection</code>.
     * PSC connection details on consumer side.
     * @alias module:model/ConsumerPscConnection
     */
    constructor() { 
        
        ConsumerPscConnection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsumerPscConnection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsumerPscConnection} obj Optional instance to populate.
     * @return {module:model/ConsumerPscConnection} The populated <code>ConsumerPscConnection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsumerPscConnection();

            if (data.hasOwnProperty('error')) {
                obj['error'] = GoogleRpcStatus.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('errorInfo')) {
                obj['errorInfo'] = GoogleRpcErrorInfo.constructFromObject(data['errorInfo']);
            }
            if (data.hasOwnProperty('errorType')) {
                obj['errorType'] = ApiClient.convertToType(data['errorType'], 'String');
            }
            if (data.hasOwnProperty('forwardingRule')) {
                obj['forwardingRule'] = ApiClient.convertToType(data['forwardingRule'], 'String');
            }
            if (data.hasOwnProperty('gceOperation')) {
                obj['gceOperation'] = ApiClient.convertToType(data['gceOperation'], 'String');
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = ApiClient.convertToType(data['network'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('pscConnectionId')) {
                obj['pscConnectionId'] = ApiClient.convertToType(data['pscConnectionId'], 'String');
            }
            if (data.hasOwnProperty('selectedSubnetwork')) {
                obj['selectedSubnetwork'] = ApiClient.convertToType(data['selectedSubnetwork'], 'String');
            }
            if (data.hasOwnProperty('serviceAttachmentUri')) {
                obj['serviceAttachmentUri'] = ApiClient.convertToType(data['serviceAttachmentUri'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsumerPscConnection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsumerPscConnection</code>.
     */
    static validateJSON(data) {
        // validate the optional field `error`
        if (data['error']) { // data not null
          GoogleRpcStatus.validateJSON(data['error']);
        }
        // validate the optional field `errorInfo`
        if (data['errorInfo']) { // data not null
          GoogleRpcErrorInfo.validateJSON(data['errorInfo']);
        }
        // ensure the json data is a string
        if (data['errorType'] && !(typeof data['errorType'] === 'string' || data['errorType'] instanceof String)) {
            throw new Error("Expected the field `errorType` to be a primitive type in the JSON string but got " + data['errorType']);
        }
        // ensure the json data is a string
        if (data['forwardingRule'] && !(typeof data['forwardingRule'] === 'string' || data['forwardingRule'] instanceof String)) {
            throw new Error("Expected the field `forwardingRule` to be a primitive type in the JSON string but got " + data['forwardingRule']);
        }
        // ensure the json data is a string
        if (data['gceOperation'] && !(typeof data['gceOperation'] === 'string' || data['gceOperation'] instanceof String)) {
            throw new Error("Expected the field `gceOperation` to be a primitive type in the JSON string but got " + data['gceOperation']);
        }
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['network'] && !(typeof data['network'] === 'string' || data['network'] instanceof String)) {
            throw new Error("Expected the field `network` to be a primitive type in the JSON string but got " + data['network']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }
        // ensure the json data is a string
        if (data['pscConnectionId'] && !(typeof data['pscConnectionId'] === 'string' || data['pscConnectionId'] instanceof String)) {
            throw new Error("Expected the field `pscConnectionId` to be a primitive type in the JSON string but got " + data['pscConnectionId']);
        }
        // ensure the json data is a string
        if (data['selectedSubnetwork'] && !(typeof data['selectedSubnetwork'] === 'string' || data['selectedSubnetwork'] instanceof String)) {
            throw new Error("Expected the field `selectedSubnetwork` to be a primitive type in the JSON string but got " + data['selectedSubnetwork']);
        }
        // ensure the json data is a string
        if (data['serviceAttachmentUri'] && !(typeof data['serviceAttachmentUri'] === 'string' || data['serviceAttachmentUri'] instanceof String)) {
            throw new Error("Expected the field `serviceAttachmentUri` to be a primitive type in the JSON string but got " + data['serviceAttachmentUri']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/GoogleRpcStatus} error
 */
ConsumerPscConnection.prototype['error'] = undefined;

/**
 * @member {module:model/GoogleRpcErrorInfo} errorInfo
 */
ConsumerPscConnection.prototype['errorInfo'] = undefined;

/**
 * The error type indicates whether the error is consumer facing, producer facing or system internal.
 * @member {module:model/ConsumerPscConnection.ErrorTypeEnum} errorType
 */
ConsumerPscConnection.prototype['errorType'] = undefined;

/**
 * The URI of the consumer forwarding rule created. Example: projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.
 * @member {String} forwardingRule
 */
ConsumerPscConnection.prototype['forwardingRule'] = undefined;

/**
 * The last Compute Engine operation to setup PSC connection.
 * @member {String} gceOperation
 */
ConsumerPscConnection.prototype['gceOperation'] = undefined;

/**
 * The IP literal allocated on the consumer network for the PSC forwarding rule that is created to connect to the producer service attachment in this service connection map.
 * @member {String} ip
 */
ConsumerPscConnection.prototype['ip'] = undefined;

/**
 * The consumer network whose PSC forwarding rule is connected to the service attachments in this service connection map. Note that the network could be on a different project (shared VPC).
 * @member {String} network
 */
ConsumerPscConnection.prototype['network'] = undefined;

/**
 * The consumer project whose PSC forwarding rule is connected to the service attachments in this service connection map.
 * @member {String} project
 */
ConsumerPscConnection.prototype['project'] = undefined;

/**
 * The PSC connection id of the PSC forwarding rule connected to the service attachments in this service connection map.
 * @member {String} pscConnectionId
 */
ConsumerPscConnection.prototype['pscConnectionId'] = undefined;

/**
 * Output only. The URI of the selected subnetwork selected to allocate IP address for this connection.
 * @member {String} selectedSubnetwork
 */
ConsumerPscConnection.prototype['selectedSubnetwork'] = undefined;

/**
 * The URI of a service attachment which is the target of the PSC connection.
 * @member {String} serviceAttachmentUri
 */
ConsumerPscConnection.prototype['serviceAttachmentUri'] = undefined;

/**
 * The state of the PSC connection.
 * @member {module:model/ConsumerPscConnection.StateEnum} state
 */
ConsumerPscConnection.prototype['state'] = undefined;





/**
 * Allowed values for the <code>errorType</code> property.
 * @enum {String}
 * @readonly
 */
ConsumerPscConnection['ErrorTypeEnum'] = {

    /**
     * value: "CONNECTION_ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "CONNECTION_ERROR_TYPE_UNSPECIFIED": "CONNECTION_ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "ERROR_INTERNAL"
     * @const
     */
    "ERROR_INTERNAL": "ERROR_INTERNAL",

    /**
     * value: "ERROR_CONSUMER_SIDE"
     * @const
     */
    "ERROR_CONSUMER_SIDE": "ERROR_CONSUMER_SIDE",

    /**
     * value: "ERROR_PRODUCER_SIDE"
     * @const
     */
    "ERROR_PRODUCER_SIDE": "ERROR_PRODUCER_SIDE"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConsumerPscConnection['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING"
};



export default ConsumerPscConnection;

