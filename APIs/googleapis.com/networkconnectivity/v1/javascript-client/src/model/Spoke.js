/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LinkedInterconnectAttachments from './LinkedInterconnectAttachments';
import LinkedRouterApplianceInstances from './LinkedRouterApplianceInstances';
import LinkedVpcNetwork from './LinkedVpcNetwork';
import LinkedVpnTunnels from './LinkedVpnTunnels';
import StateReason from './StateReason';

/**
 * The Spoke model module.
 * @module model/Spoke
 * @version v1
 */
class Spoke {
    /**
     * Constructs a new <code>Spoke</code>.
     * A Network Connectivity Center spoke represents one or more network connectivity resources. When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields: * linked_vpn_tunnels * linked_interconnect_attachments * linked_router_appliance_instances * linked_vpc_network
     * @alias module:model/Spoke
     */
    constructor() { 
        
        Spoke.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Spoke</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Spoke} obj Optional instance to populate.
     * @return {module:model/Spoke} The populated <code>Spoke</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Spoke();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('group')) {
                obj['group'] = ApiClient.convertToType(data['group'], 'String');
            }
            if (data.hasOwnProperty('hub')) {
                obj['hub'] = ApiClient.convertToType(data['hub'], 'String');
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('linkedInterconnectAttachments')) {
                obj['linkedInterconnectAttachments'] = LinkedInterconnectAttachments.constructFromObject(data['linkedInterconnectAttachments']);
            }
            if (data.hasOwnProperty('linkedRouterApplianceInstances')) {
                obj['linkedRouterApplianceInstances'] = LinkedRouterApplianceInstances.constructFromObject(data['linkedRouterApplianceInstances']);
            }
            if (data.hasOwnProperty('linkedVpcNetwork')) {
                obj['linkedVpcNetwork'] = LinkedVpcNetwork.constructFromObject(data['linkedVpcNetwork']);
            }
            if (data.hasOwnProperty('linkedVpnTunnels')) {
                obj['linkedVpnTunnels'] = LinkedVpnTunnels.constructFromObject(data['linkedVpnTunnels']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('reasons')) {
                obj['reasons'] = ApiClient.convertToType(data['reasons'], [StateReason]);
            }
            if (data.hasOwnProperty('spokeType')) {
                obj['spokeType'] = ApiClient.convertToType(data['spokeType'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('uniqueId')) {
                obj['uniqueId'] = ApiClient.convertToType(data['uniqueId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Spoke</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Spoke</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['group'] && !(typeof data['group'] === 'string' || data['group'] instanceof String)) {
            throw new Error("Expected the field `group` to be a primitive type in the JSON string but got " + data['group']);
        }
        // ensure the json data is a string
        if (data['hub'] && !(typeof data['hub'] === 'string' || data['hub'] instanceof String)) {
            throw new Error("Expected the field `hub` to be a primitive type in the JSON string but got " + data['hub']);
        }
        // validate the optional field `linkedInterconnectAttachments`
        if (data['linkedInterconnectAttachments']) { // data not null
          LinkedInterconnectAttachments.validateJSON(data['linkedInterconnectAttachments']);
        }
        // validate the optional field `linkedRouterApplianceInstances`
        if (data['linkedRouterApplianceInstances']) { // data not null
          LinkedRouterApplianceInstances.validateJSON(data['linkedRouterApplianceInstances']);
        }
        // validate the optional field `linkedVpcNetwork`
        if (data['linkedVpcNetwork']) { // data not null
          LinkedVpcNetwork.validateJSON(data['linkedVpcNetwork']);
        }
        // validate the optional field `linkedVpnTunnels`
        if (data['linkedVpnTunnels']) { // data not null
          LinkedVpnTunnels.validateJSON(data['linkedVpnTunnels']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['reasons']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['reasons'])) {
                throw new Error("Expected the field `reasons` to be an array in the JSON data but got " + data['reasons']);
            }
            // validate the optional field `reasons` (array)
            for (const item of data['reasons']) {
                StateReason.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['spokeType'] && !(typeof data['spokeType'] === 'string' || data['spokeType'] instanceof String)) {
            throw new Error("Expected the field `spokeType` to be a primitive type in the JSON string but got " + data['spokeType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['uniqueId'] && !(typeof data['uniqueId'] === 'string' || data['uniqueId'] instanceof String)) {
            throw new Error("Expected the field `uniqueId` to be a primitive type in the JSON string but got " + data['uniqueId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. The time the spoke was created.
 * @member {String} createTime
 */
Spoke.prototype['createTime'] = undefined;

/**
 * An optional description of the spoke.
 * @member {String} description
 */
Spoke.prototype['description'] = undefined;

/**
 * Optional. The name of the group that this spoke is associated with.
 * @member {String} group
 */
Spoke.prototype['group'] = undefined;

/**
 * Immutable. The name of the hub that this spoke is attached to.
 * @member {String} hub
 */
Spoke.prototype['hub'] = undefined;

/**
 * Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
 * @member {Object.<String, String>} labels
 */
Spoke.prototype['labels'] = undefined;

/**
 * @member {module:model/LinkedInterconnectAttachments} linkedInterconnectAttachments
 */
Spoke.prototype['linkedInterconnectAttachments'] = undefined;

/**
 * @member {module:model/LinkedRouterApplianceInstances} linkedRouterApplianceInstances
 */
Spoke.prototype['linkedRouterApplianceInstances'] = undefined;

/**
 * @member {module:model/LinkedVpcNetwork} linkedVpcNetwork
 */
Spoke.prototype['linkedVpcNetwork'] = undefined;

/**
 * @member {module:model/LinkedVpnTunnels} linkedVpnTunnels
 */
Spoke.prototype['linkedVpnTunnels'] = undefined;

/**
 * Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`
 * @member {String} name
 */
Spoke.prototype['name'] = undefined;

/**
 * Output only. The reasons for current state of the spoke. Only present when the spoke is in the `INACTIVE` state.
 * @member {Array.<module:model/StateReason>} reasons
 */
Spoke.prototype['reasons'] = undefined;

/**
 * Output only. The type of resource associated with the spoke.
 * @member {module:model/Spoke.SpokeTypeEnum} spokeType
 */
Spoke.prototype['spokeType'] = undefined;

/**
 * Output only. The current lifecycle state of this spoke.
 * @member {module:model/Spoke.StateEnum} state
 */
Spoke.prototype['state'] = undefined;

/**
 * Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different `unique_id`.
 * @member {String} uniqueId
 */
Spoke.prototype['uniqueId'] = undefined;

/**
 * Output only. The time the spoke was last updated.
 * @member {String} updateTime
 */
Spoke.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>spokeType</code> property.
 * @enum {String}
 * @readonly
 */
Spoke['SpokeTypeEnum'] = {

    /**
     * value: "SPOKE_TYPE_UNSPECIFIED"
     * @const
     */
    "SPOKE_TYPE_UNSPECIFIED": "SPOKE_TYPE_UNSPECIFIED",

    /**
     * value: "VPN_TUNNEL"
     * @const
     */
    "VPN_TUNNEL": "VPN_TUNNEL",

    /**
     * value: "INTERCONNECT_ATTACHMENT"
     * @const
     */
    "INTERCONNECT_ATTACHMENT": "INTERCONNECT_ATTACHMENT",

    /**
     * value: "ROUTER_APPLIANCE"
     * @const
     */
    "ROUTER_APPLIANCE": "ROUTER_APPLIANCE",

    /**
     * value: "VPC_NETWORK"
     * @const
     */
    "VPC_NETWORK": "VPC_NETWORK"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Spoke['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CREATING"
     * @const
     */
    "CREATING": "CREATING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "DELETING"
     * @const
     */
    "DELETING": "DELETING",

    /**
     * value: "ACCEPTING"
     * @const
     */
    "ACCEPTING": "ACCEPTING",

    /**
     * value: "REJECTING"
     * @const
     */
    "REJECTING": "REJECTING",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "INACTIVE"
     * @const
     */
    "INACTIVE": "INACTIVE",

    /**
     * value: "OBSOLETE"
     * @const
     */
    "OBSOLETE": "OBSOLETE"
};



export default Spoke;

