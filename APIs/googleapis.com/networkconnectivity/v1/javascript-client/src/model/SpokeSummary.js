/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpokeStateCount from './SpokeStateCount';
import SpokeStateReasonCount from './SpokeStateReasonCount';
import SpokeTypeCount from './SpokeTypeCount';

/**
 * The SpokeSummary model module.
 * @module model/SpokeSummary
 * @version v1
 */
class SpokeSummary {
    /**
     * Constructs a new <code>SpokeSummary</code>.
     * Summarizes information about the spokes associated with a hub. The summary includes a count of spokes according to type and according to state. If any spokes are inactive, the summary also lists the reasons they are inactive, including a count for each reason.
     * @alias module:model/SpokeSummary
     */
    constructor() { 
        
        SpokeSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpokeSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpokeSummary} obj Optional instance to populate.
     * @return {module:model/SpokeSummary} The populated <code>SpokeSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpokeSummary();

            if (data.hasOwnProperty('spokeStateCounts')) {
                obj['spokeStateCounts'] = ApiClient.convertToType(data['spokeStateCounts'], [SpokeStateCount]);
            }
            if (data.hasOwnProperty('spokeStateReasonCounts')) {
                obj['spokeStateReasonCounts'] = ApiClient.convertToType(data['spokeStateReasonCounts'], [SpokeStateReasonCount]);
            }
            if (data.hasOwnProperty('spokeTypeCounts')) {
                obj['spokeTypeCounts'] = ApiClient.convertToType(data['spokeTypeCounts'], [SpokeTypeCount]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpokeSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpokeSummary</code>.
     */
    static validateJSON(data) {
        if (data['spokeStateCounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spokeStateCounts'])) {
                throw new Error("Expected the field `spokeStateCounts` to be an array in the JSON data but got " + data['spokeStateCounts']);
            }
            // validate the optional field `spokeStateCounts` (array)
            for (const item of data['spokeStateCounts']) {
                SpokeStateCount.validateJSON(item);
            };
        }
        if (data['spokeStateReasonCounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spokeStateReasonCounts'])) {
                throw new Error("Expected the field `spokeStateReasonCounts` to be an array in the JSON data but got " + data['spokeStateReasonCounts']);
            }
            // validate the optional field `spokeStateReasonCounts` (array)
            for (const item of data['spokeStateReasonCounts']) {
                SpokeStateReasonCount.validateJSON(item);
            };
        }
        if (data['spokeTypeCounts']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['spokeTypeCounts'])) {
                throw new Error("Expected the field `spokeTypeCounts` to be an array in the JSON data but got " + data['spokeTypeCounts']);
            }
            // validate the optional field `spokeTypeCounts` (array)
            for (const item of data['spokeTypeCounts']) {
                SpokeTypeCount.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Output only. Counts the number of spokes that are in each state and associated with a given hub.
 * @member {Array.<module:model/SpokeStateCount>} spokeStateCounts
 */
SpokeSummary.prototype['spokeStateCounts'] = undefined;

/**
 * Output only. Counts the number of spokes that are inactive for each possible reason and associated with a given hub.
 * @member {Array.<module:model/SpokeStateReasonCount>} spokeStateReasonCounts
 */
SpokeSummary.prototype['spokeStateReasonCounts'] = undefined;

/**
 * Output only. Counts the number of spokes of each type that are associated with a specific hub.
 * @member {Array.<module:model/SpokeTypeCount>} spokeTypeCounts
 */
SpokeSummary.prototype['spokeTypeCounts'] = undefined;






export default SpokeSummary;

