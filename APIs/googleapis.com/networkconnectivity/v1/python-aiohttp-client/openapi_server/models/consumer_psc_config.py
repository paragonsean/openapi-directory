# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsumerPscConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disable_global_access: bool=None, network: str=None, project: str=None, state: str=None):
        """ConsumerPscConfig - a model defined in OpenAPI

        :param disable_global_access: The disable_global_access of this ConsumerPscConfig.
        :param network: The network of this ConsumerPscConfig.
        :param project: The project of this ConsumerPscConfig.
        :param state: The state of this ConsumerPscConfig.
        """
        self.openapi_types = {
            'disable_global_access': bool,
            'network': str,
            'project': str,
            'state': str
        }

        self.attribute_map = {
            'disable_global_access': 'disableGlobalAccess',
            'network': 'network',
            'project': 'project',
            'state': 'state'
        }

        self._disable_global_access = disable_global_access
        self._network = network
        self._project = project
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerPscConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerPscConfig of this ConsumerPscConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disable_global_access(self):
        """Gets the disable_global_access of this ConsumerPscConfig.

        This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.

        :return: The disable_global_access of this ConsumerPscConfig.
        :rtype: bool
        """
        return self._disable_global_access

    @disable_global_access.setter
    def disable_global_access(self, disable_global_access):
        """Sets the disable_global_access of this ConsumerPscConfig.

        This is used in PSC consumer ForwardingRule to control whether the PSC endpoint can be accessed from another region.

        :param disable_global_access: The disable_global_access of this ConsumerPscConfig.
        :type disable_global_access: bool
        """

        self._disable_global_access = disable_global_access

    @property
    def network(self):
        """Gets the network of this ConsumerPscConfig.

        The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.

        :return: The network of this ConsumerPscConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConsumerPscConfig.

        The resource path of the consumer network where PSC connections are allowed to be created in. Note, this network does not need be in the ConsumerPscConfig.project in the case of SharedVPC. Example: projects/{projectNumOrId}/global/networks/{networkId}.

        :param network: The network of this ConsumerPscConfig.
        :type network: str
        """

        self._network = network

    @property
    def project(self):
        """Gets the project of this ConsumerPscConfig.

        The consumer project where PSC connections are allowed to be created in.

        :return: The project of this ConsumerPscConfig.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ConsumerPscConfig.

        The consumer project where PSC connections are allowed to be created in.

        :param project: The project of this ConsumerPscConfig.
        :type project: str
        """

        self._project = project

    @property
    def state(self):
        """Gets the state of this ConsumerPscConfig.

        Output only. Overall state of PSC Connections management for this consumer psc config.

        :return: The state of this ConsumerPscConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConsumerPscConfig.

        Output only. Overall state of PSC Connections management for this consumer psc config.

        :param state: The state of this ConsumerPscConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "VALID", "CONNECTION_POLICY_MISSING", "POLICY_LIMIT_REACHED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
