# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Warnings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, data: Dict[str, str]=None, warning_message: str=None):
        """Warnings - a model defined in OpenAPI

        :param code: The code of this Warnings.
        :param data: The data of this Warnings.
        :param warning_message: The warning_message of this Warnings.
        """
        self.openapi_types = {
            'code': str,
            'data': Dict[str, str],
            'warning_message': str
        }

        self.attribute_map = {
            'code': 'code',
            'data': 'data',
            'warning_message': 'warningMessage'
        }

        self._code = code
        self._data = data
        self._warning_message = warning_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Warnings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Warnings of this Warnings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Warnings.

        Output only. A warning code, if applicable.

        :return: The code of this Warnings.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Warnings.

        Output only. A warning code, if applicable.

        :param code: The code of this Warnings.
        :type code: str
        """
        allowed_values = ["WARNING_UNSPECIFIED", "RESOURCE_NOT_ACTIVE", "RESOURCE_BEING_MODIFIED"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def data(self):
        """Gets the data of this Warnings.

        Output only. Metadata about this warning in key: value format. The key should provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement.

        :return: The data of this Warnings.
        :rtype: Dict[str, str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Warnings.

        Output only. Metadata about this warning in key: value format. The key should provides more detail on the warning being returned. For example, for warnings where there are no results in a list request for a particular zone, this key might be scope and the key value might be the zone name. Other examples might be a key indicating a deprecated resource and a suggested replacement.

        :param data: The data of this Warnings.
        :type data: Dict[str, str]
        """

        self._data = data

    @property
    def warning_message(self):
        """Gets the warning_message of this Warnings.

        Output only. A human-readable description of the warning code.

        :return: The warning_message of this Warnings.
        :rtype: str
        """
        return self._warning_message

    @warning_message.setter
    def warning_message(self, warning_message):
        """Sets the warning_message of this Warnings.

        Output only. A human-readable description of the warning code.

        :param warning_message: The warning_message of this Warnings.
        :type warning_message: str
        """

        self._warning_message = warning_message
