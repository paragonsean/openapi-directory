# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Filter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dest_range: str=None, ip_protocol: str=None, protocol_version: str=None, src_range: str=None):
        """Filter - a model defined in OpenAPI

        :param dest_range: The dest_range of this Filter.
        :param ip_protocol: The ip_protocol of this Filter.
        :param protocol_version: The protocol_version of this Filter.
        :param src_range: The src_range of this Filter.
        """
        self.openapi_types = {
            'dest_range': str,
            'ip_protocol': str,
            'protocol_version': str,
            'src_range': str
        }

        self.attribute_map = {
            'dest_range': 'destRange',
            'ip_protocol': 'ipProtocol',
            'protocol_version': 'protocolVersion',
            'src_range': 'srcRange'
        }

        self._dest_range = dest_range
        self._ip_protocol = ip_protocol
        self._protocol_version = protocol_version
        self._src_range = src_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Filter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Filter of this Filter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dest_range(self):
        """Gets the dest_range of this Filter.

        Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.

        :return: The dest_range of this Filter.
        :rtype: str
        """
        return self._dest_range

    @dest_range.setter
    def dest_range(self, dest_range):
        """Sets the dest_range of this Filter.

        Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.

        :param dest_range: The dest_range of this Filter.
        :type dest_range: str
        """

        self._dest_range = dest_range

    @property
    def ip_protocol(self):
        """Gets the ip_protocol of this Filter.

        Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.

        :return: The ip_protocol of this Filter.
        :rtype: str
        """
        return self._ip_protocol

    @ip_protocol.setter
    def ip_protocol(self, ip_protocol):
        """Sets the ip_protocol of this Filter.

        Optional. The IP protocol that this policy-based route applies to. Valid values are 'TCP', 'UDP', and 'ALL'. Default is 'ALL'.

        :param ip_protocol: The ip_protocol of this Filter.
        :type ip_protocol: str
        """

        self._ip_protocol = ip_protocol

    @property
    def protocol_version(self):
        """Gets the protocol_version of this Filter.

        Required. Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.

        :return: The protocol_version of this Filter.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this Filter.

        Required. Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.

        :param protocol_version: The protocol_version of this Filter.
        :type protocol_version: str
        """
        allowed_values = ["PROTOCOL_VERSION_UNSPECIFIED", "IPV4"]  # noqa: E501
        if protocol_version not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol_version` ({0}), must be one of {1}"
                .format(protocol_version, allowed_values)
            )

        self._protocol_version = protocol_version

    @property
    def src_range(self):
        """Gets the src_range of this Filter.

        Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.

        :return: The src_range of this Filter.
        :rtype: str
        """
        return self._src_range

    @src_range.setter
    def src_range(self, src_range):
        """Sets the src_range of this Filter.

        Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is \"0.0.0.0/0\" if protocol version is IPv4.

        :param src_range: The src_range of this Filter.
        :type src_range: str
        """

        self._src_range = src_range
