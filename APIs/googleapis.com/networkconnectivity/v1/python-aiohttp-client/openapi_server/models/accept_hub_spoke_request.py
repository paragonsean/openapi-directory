# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AcceptHubSpokeRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, request_id: str=None, spoke_uri: str=None):
        """AcceptHubSpokeRequest - a model defined in OpenAPI

        :param request_id: The request_id of this AcceptHubSpokeRequest.
        :param spoke_uri: The spoke_uri of this AcceptHubSpokeRequest.
        """
        self.openapi_types = {
            'request_id': str,
            'spoke_uri': str
        }

        self.attribute_map = {
            'request_id': 'requestId',
            'spoke_uri': 'spokeUri'
        }

        self._request_id = request_id
        self._spoke_uri = spoke_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AcceptHubSpokeRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AcceptHubSpokeRequest of this AcceptHubSpokeRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def request_id(self):
        """Gets the request_id of this AcceptHubSpokeRequest.

        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check to see whether the original operation was received. If it was, the server ignores the second request. This behavior prevents clients from mistakenly creating duplicate commitments. The request ID must be a valid UUID, with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :return: The request_id of this AcceptHubSpokeRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this AcceptHubSpokeRequest.

        Optional. A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server knows to ignore the request if it has already been completed. The server guarantees that a request doesn't result in creation of duplicate commitments for at least 60 minutes. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check to see whether the original operation was received. If it was, the server ignores the second request. This behavior prevents clients from mistakenly creating duplicate commitments. The request ID must be a valid UUID, with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).

        :param request_id: The request_id of this AcceptHubSpokeRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def spoke_uri(self):
        """Gets the spoke_uri of this AcceptHubSpokeRequest.

        Required. The URI of the spoke to accept into the hub.

        :return: The spoke_uri of this AcceptHubSpokeRequest.
        :rtype: str
        """
        return self._spoke_uri

    @spoke_uri.setter
    def spoke_uri(self, spoke_uri):
        """Sets the spoke_uri of this AcceptHubSpokeRequest.

        Required. The URI of the spoke to accept into the hub.

        :param spoke_uri: The spoke_uri of this AcceptHubSpokeRequest.
        :type spoke_uri: str
        """

        self._spoke_uri = spoke_uri
