# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.filter import Filter
from openapi_server.models.interconnect_attachment import InterconnectAttachment
from openapi_server.models.virtual_machine import VirtualMachine
from openapi_server.models.warnings import Warnings
from openapi_server import util


class PolicyBasedRoute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, filter: Filter=None, interconnect_attachment: InterconnectAttachment=None, kind: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, next_hop_ilb_ip: str=None, next_hop_other_routes: str=None, priority: int=None, self_link: str=None, update_time: str=None, virtual_machine: VirtualMachine=None, warnings: List[Warnings]=None):
        """PolicyBasedRoute - a model defined in OpenAPI

        :param create_time: The create_time of this PolicyBasedRoute.
        :param description: The description of this PolicyBasedRoute.
        :param filter: The filter of this PolicyBasedRoute.
        :param interconnect_attachment: The interconnect_attachment of this PolicyBasedRoute.
        :param kind: The kind of this PolicyBasedRoute.
        :param labels: The labels of this PolicyBasedRoute.
        :param name: The name of this PolicyBasedRoute.
        :param network: The network of this PolicyBasedRoute.
        :param next_hop_ilb_ip: The next_hop_ilb_ip of this PolicyBasedRoute.
        :param next_hop_other_routes: The next_hop_other_routes of this PolicyBasedRoute.
        :param priority: The priority of this PolicyBasedRoute.
        :param self_link: The self_link of this PolicyBasedRoute.
        :param update_time: The update_time of this PolicyBasedRoute.
        :param virtual_machine: The virtual_machine of this PolicyBasedRoute.
        :param warnings: The warnings of this PolicyBasedRoute.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'filter': Filter,
            'interconnect_attachment': InterconnectAttachment,
            'kind': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'next_hop_ilb_ip': str,
            'next_hop_other_routes': str,
            'priority': int,
            'self_link': str,
            'update_time': str,
            'virtual_machine': VirtualMachine,
            'warnings': List[Warnings]
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'filter': 'filter',
            'interconnect_attachment': 'interconnectAttachment',
            'kind': 'kind',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'next_hop_ilb_ip': 'nextHopIlbIp',
            'next_hop_other_routes': 'nextHopOtherRoutes',
            'priority': 'priority',
            'self_link': 'selfLink',
            'update_time': 'updateTime',
            'virtual_machine': 'virtualMachine',
            'warnings': 'warnings'
        }

        self._create_time = create_time
        self._description = description
        self._filter = filter
        self._interconnect_attachment = interconnect_attachment
        self._kind = kind
        self._labels = labels
        self._name = name
        self._network = network
        self._next_hop_ilb_ip = next_hop_ilb_ip
        self._next_hop_other_routes = next_hop_other_routes
        self._priority = priority
        self._self_link = self_link
        self._update_time = update_time
        self._virtual_machine = virtual_machine
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyBasedRoute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyBasedRoute of this PolicyBasedRoute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this PolicyBasedRoute.

        Output only. Time when the policy-based route was created.

        :return: The create_time of this PolicyBasedRoute.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PolicyBasedRoute.

        Output only. Time when the policy-based route was created.

        :param create_time: The create_time of this PolicyBasedRoute.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this PolicyBasedRoute.

        Optional. An optional description of this resource. Provide this field when you create the resource.

        :return: The description of this PolicyBasedRoute.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PolicyBasedRoute.

        Optional. An optional description of this resource. Provide this field when you create the resource.

        :param description: The description of this PolicyBasedRoute.
        :type description: str
        """

        self._description = description

    @property
    def filter(self):
        """Gets the filter of this PolicyBasedRoute.


        :return: The filter of this PolicyBasedRoute.
        :rtype: Filter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this PolicyBasedRoute.


        :param filter: The filter of this PolicyBasedRoute.
        :type filter: Filter
        """

        self._filter = filter

    @property
    def interconnect_attachment(self):
        """Gets the interconnect_attachment of this PolicyBasedRoute.


        :return: The interconnect_attachment of this PolicyBasedRoute.
        :rtype: InterconnectAttachment
        """
        return self._interconnect_attachment

    @interconnect_attachment.setter
    def interconnect_attachment(self, interconnect_attachment):
        """Sets the interconnect_attachment of this PolicyBasedRoute.


        :param interconnect_attachment: The interconnect_attachment of this PolicyBasedRoute.
        :type interconnect_attachment: InterconnectAttachment
        """

        self._interconnect_attachment = interconnect_attachment

    @property
    def kind(self):
        """Gets the kind of this PolicyBasedRoute.

        Output only. Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.

        :return: The kind of this PolicyBasedRoute.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this PolicyBasedRoute.

        Output only. Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.

        :param kind: The kind of this PolicyBasedRoute.
        :type kind: str
        """

        self._kind = kind

    @property
    def labels(self):
        """Gets the labels of this PolicyBasedRoute.

        User-defined labels.

        :return: The labels of this PolicyBasedRoute.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this PolicyBasedRoute.

        User-defined labels.

        :param labels: The labels of this PolicyBasedRoute.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this PolicyBasedRoute.

        Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`

        :return: The name of this PolicyBasedRoute.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PolicyBasedRoute.

        Immutable. A unique name of the resource in the form of `projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}`

        :param name: The name of this PolicyBasedRoute.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this PolicyBasedRoute.

        Required. Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.

        :return: The network of this PolicyBasedRoute.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this PolicyBasedRoute.

        Required. Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.

        :param network: The network of this PolicyBasedRoute.
        :type network: str
        """

        self._network = network

    @property
    def next_hop_ilb_ip(self):
        """Gets the next_hop_ilb_ip of this PolicyBasedRoute.

        Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.

        :return: The next_hop_ilb_ip of this PolicyBasedRoute.
        :rtype: str
        """
        return self._next_hop_ilb_ip

    @next_hop_ilb_ip.setter
    def next_hop_ilb_ip(self, next_hop_ilb_ip):
        """Sets the next_hop_ilb_ip of this PolicyBasedRoute.

        Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.

        :param next_hop_ilb_ip: The next_hop_ilb_ip of this PolicyBasedRoute.
        :type next_hop_ilb_ip: str
        """

        self._next_hop_ilb_ip = next_hop_ilb_ip

    @property
    def next_hop_other_routes(self):
        """Gets the next_hop_other_routes of this PolicyBasedRoute.

        Optional. Other routes that will be referenced to determine the next hop of the packet.

        :return: The next_hop_other_routes of this PolicyBasedRoute.
        :rtype: str
        """
        return self._next_hop_other_routes

    @next_hop_other_routes.setter
    def next_hop_other_routes(self, next_hop_other_routes):
        """Sets the next_hop_other_routes of this PolicyBasedRoute.

        Optional. Other routes that will be referenced to determine the next hop of the packet.

        :param next_hop_other_routes: The next_hop_other_routes of this PolicyBasedRoute.
        :type next_hop_other_routes: str
        """
        allowed_values = ["OTHER_ROUTES_UNSPECIFIED", "DEFAULT_ROUTING"]  # noqa: E501
        if next_hop_other_routes not in allowed_values:
            raise ValueError(
                "Invalid value for `next_hop_other_routes` ({0}), must be one of {1}"
                .format(next_hop_other_routes, allowed_values)
            )

        self._next_hop_other_routes = next_hop_other_routes

    @property
    def priority(self):
        """Gets the priority of this PolicyBasedRoute.

        Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.

        :return: The priority of this PolicyBasedRoute.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this PolicyBasedRoute.

        Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.

        :param priority: The priority of this PolicyBasedRoute.
        :type priority: int
        """

        self._priority = priority

    @property
    def self_link(self):
        """Gets the self_link of this PolicyBasedRoute.

        Output only. Server-defined fully-qualified URL for this resource.

        :return: The self_link of this PolicyBasedRoute.
        :rtype: str
        """
        return self._self_link

    @self_link.setter
    def self_link(self, self_link):
        """Sets the self_link of this PolicyBasedRoute.

        Output only. Server-defined fully-qualified URL for this resource.

        :param self_link: The self_link of this PolicyBasedRoute.
        :type self_link: str
        """

        self._self_link = self_link

    @property
    def update_time(self):
        """Gets the update_time of this PolicyBasedRoute.

        Output only. Time when the policy-based route was updated.

        :return: The update_time of this PolicyBasedRoute.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this PolicyBasedRoute.

        Output only. Time when the policy-based route was updated.

        :param update_time: The update_time of this PolicyBasedRoute.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def virtual_machine(self):
        """Gets the virtual_machine of this PolicyBasedRoute.


        :return: The virtual_machine of this PolicyBasedRoute.
        :rtype: VirtualMachine
        """
        return self._virtual_machine

    @virtual_machine.setter
    def virtual_machine(self, virtual_machine):
        """Sets the virtual_machine of this PolicyBasedRoute.


        :param virtual_machine: The virtual_machine of this PolicyBasedRoute.
        :type virtual_machine: VirtualMachine
        """

        self._virtual_machine = virtual_machine

    @property
    def warnings(self):
        """Gets the warnings of this PolicyBasedRoute.

        Output only. If potential misconfigurations are detected for this route, this field will be populated with warning messages.

        :return: The warnings of this PolicyBasedRoute.
        :rtype: List[Warnings]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings):
        """Sets the warnings of this PolicyBasedRoute.

        Output only. If potential misconfigurations are detected for this route, this field will be populated with warning messages.

        :param warnings: The warnings of this PolicyBasedRoute.
        :type warnings: List[Warnings]
        """

        self._warnings = warnings
