# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.linked_interconnect_attachments import LinkedInterconnectAttachments
from openapi_server.models.linked_router_appliance_instances import LinkedRouterApplianceInstances
from openapi_server.models.linked_vpc_network import LinkedVpcNetwork
from openapi_server.models.linked_vpn_tunnels import LinkedVpnTunnels
from openapi_server.models.state_reason import StateReason
from openapi_server import util


class Spoke(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, group: str=None, hub: str=None, labels: Dict[str, str]=None, linked_interconnect_attachments: LinkedInterconnectAttachments=None, linked_router_appliance_instances: LinkedRouterApplianceInstances=None, linked_vpc_network: LinkedVpcNetwork=None, linked_vpn_tunnels: LinkedVpnTunnels=None, name: str=None, reasons: List[StateReason]=None, spoke_type: str=None, state: str=None, unique_id: str=None, update_time: str=None):
        """Spoke - a model defined in OpenAPI

        :param create_time: The create_time of this Spoke.
        :param description: The description of this Spoke.
        :param group: The group of this Spoke.
        :param hub: The hub of this Spoke.
        :param labels: The labels of this Spoke.
        :param linked_interconnect_attachments: The linked_interconnect_attachments of this Spoke.
        :param linked_router_appliance_instances: The linked_router_appliance_instances of this Spoke.
        :param linked_vpc_network: The linked_vpc_network of this Spoke.
        :param linked_vpn_tunnels: The linked_vpn_tunnels of this Spoke.
        :param name: The name of this Spoke.
        :param reasons: The reasons of this Spoke.
        :param spoke_type: The spoke_type of this Spoke.
        :param state: The state of this Spoke.
        :param unique_id: The unique_id of this Spoke.
        :param update_time: The update_time of this Spoke.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'group': str,
            'hub': str,
            'labels': Dict[str, str],
            'linked_interconnect_attachments': LinkedInterconnectAttachments,
            'linked_router_appliance_instances': LinkedRouterApplianceInstances,
            'linked_vpc_network': LinkedVpcNetwork,
            'linked_vpn_tunnels': LinkedVpnTunnels,
            'name': str,
            'reasons': List[StateReason],
            'spoke_type': str,
            'state': str,
            'unique_id': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'group': 'group',
            'hub': 'hub',
            'labels': 'labels',
            'linked_interconnect_attachments': 'linkedInterconnectAttachments',
            'linked_router_appliance_instances': 'linkedRouterApplianceInstances',
            'linked_vpc_network': 'linkedVpcNetwork',
            'linked_vpn_tunnels': 'linkedVpnTunnels',
            'name': 'name',
            'reasons': 'reasons',
            'spoke_type': 'spokeType',
            'state': 'state',
            'unique_id': 'uniqueId',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._group = group
        self._hub = hub
        self._labels = labels
        self._linked_interconnect_attachments = linked_interconnect_attachments
        self._linked_router_appliance_instances = linked_router_appliance_instances
        self._linked_vpc_network = linked_vpc_network
        self._linked_vpn_tunnels = linked_vpn_tunnels
        self._name = name
        self._reasons = reasons
        self._spoke_type = spoke_type
        self._state = state
        self._unique_id = unique_id
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Spoke':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Spoke of this Spoke.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Spoke.

        Output only. The time the spoke was created.

        :return: The create_time of this Spoke.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Spoke.

        Output only. The time the spoke was created.

        :param create_time: The create_time of this Spoke.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Spoke.

        An optional description of the spoke.

        :return: The description of this Spoke.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Spoke.

        An optional description of the spoke.

        :param description: The description of this Spoke.
        :type description: str
        """

        self._description = description

    @property
    def group(self):
        """Gets the group of this Spoke.

        Optional. The name of the group that this spoke is associated with.

        :return: The group of this Spoke.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Spoke.

        Optional. The name of the group that this spoke is associated with.

        :param group: The group of this Spoke.
        :type group: str
        """

        self._group = group

    @property
    def hub(self):
        """Gets the hub of this Spoke.

        Immutable. The name of the hub that this spoke is attached to.

        :return: The hub of this Spoke.
        :rtype: str
        """
        return self._hub

    @hub.setter
    def hub(self, hub):
        """Sets the hub of this Spoke.

        Immutable. The name of the hub that this spoke is attached to.

        :param hub: The hub of this Spoke.
        :type hub: str
        """

        self._hub = hub

    @property
    def labels(self):
        """Gets the labels of this Spoke.

        Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).

        :return: The labels of this Spoke.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Spoke.

        Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).

        :param labels: The labels of this Spoke.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def linked_interconnect_attachments(self):
        """Gets the linked_interconnect_attachments of this Spoke.


        :return: The linked_interconnect_attachments of this Spoke.
        :rtype: LinkedInterconnectAttachments
        """
        return self._linked_interconnect_attachments

    @linked_interconnect_attachments.setter
    def linked_interconnect_attachments(self, linked_interconnect_attachments):
        """Sets the linked_interconnect_attachments of this Spoke.


        :param linked_interconnect_attachments: The linked_interconnect_attachments of this Spoke.
        :type linked_interconnect_attachments: LinkedInterconnectAttachments
        """

        self._linked_interconnect_attachments = linked_interconnect_attachments

    @property
    def linked_router_appliance_instances(self):
        """Gets the linked_router_appliance_instances of this Spoke.


        :return: The linked_router_appliance_instances of this Spoke.
        :rtype: LinkedRouterApplianceInstances
        """
        return self._linked_router_appliance_instances

    @linked_router_appliance_instances.setter
    def linked_router_appliance_instances(self, linked_router_appliance_instances):
        """Sets the linked_router_appliance_instances of this Spoke.


        :param linked_router_appliance_instances: The linked_router_appliance_instances of this Spoke.
        :type linked_router_appliance_instances: LinkedRouterApplianceInstances
        """

        self._linked_router_appliance_instances = linked_router_appliance_instances

    @property
    def linked_vpc_network(self):
        """Gets the linked_vpc_network of this Spoke.


        :return: The linked_vpc_network of this Spoke.
        :rtype: LinkedVpcNetwork
        """
        return self._linked_vpc_network

    @linked_vpc_network.setter
    def linked_vpc_network(self, linked_vpc_network):
        """Sets the linked_vpc_network of this Spoke.


        :param linked_vpc_network: The linked_vpc_network of this Spoke.
        :type linked_vpc_network: LinkedVpcNetwork
        """

        self._linked_vpc_network = linked_vpc_network

    @property
    def linked_vpn_tunnels(self):
        """Gets the linked_vpn_tunnels of this Spoke.


        :return: The linked_vpn_tunnels of this Spoke.
        :rtype: LinkedVpnTunnels
        """
        return self._linked_vpn_tunnels

    @linked_vpn_tunnels.setter
    def linked_vpn_tunnels(self, linked_vpn_tunnels):
        """Sets the linked_vpn_tunnels of this Spoke.


        :param linked_vpn_tunnels: The linked_vpn_tunnels of this Spoke.
        :type linked_vpn_tunnels: LinkedVpnTunnels
        """

        self._linked_vpn_tunnels = linked_vpn_tunnels

    @property
    def name(self):
        """Gets the name of this Spoke.

        Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`

        :return: The name of this Spoke.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Spoke.

        Immutable. The name of the spoke. Spoke names must be unique. They use the following form: `projects/{project_number}/locations/{region}/spokes/{spoke_id}`

        :param name: The name of this Spoke.
        :type name: str
        """

        self._name = name

    @property
    def reasons(self):
        """Gets the reasons of this Spoke.

        Output only. The reasons for current state of the spoke. Only present when the spoke is in the `INACTIVE` state.

        :return: The reasons of this Spoke.
        :rtype: List[StateReason]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this Spoke.

        Output only. The reasons for current state of the spoke. Only present when the spoke is in the `INACTIVE` state.

        :param reasons: The reasons of this Spoke.
        :type reasons: List[StateReason]
        """

        self._reasons = reasons

    @property
    def spoke_type(self):
        """Gets the spoke_type of this Spoke.

        Output only. The type of resource associated with the spoke.

        :return: The spoke_type of this Spoke.
        :rtype: str
        """
        return self._spoke_type

    @spoke_type.setter
    def spoke_type(self, spoke_type):
        """Sets the spoke_type of this Spoke.

        Output only. The type of resource associated with the spoke.

        :param spoke_type: The spoke_type of this Spoke.
        :type spoke_type: str
        """
        allowed_values = ["SPOKE_TYPE_UNSPECIFIED", "VPN_TUNNEL", "INTERCONNECT_ATTACHMENT", "ROUTER_APPLIANCE", "VPC_NETWORK"]  # noqa: E501
        if spoke_type not in allowed_values:
            raise ValueError(
                "Invalid value for `spoke_type` ({0}), must be one of {1}"
                .format(spoke_type, allowed_values)
            )

        self._spoke_type = spoke_type

    @property
    def state(self):
        """Gets the state of this Spoke.

        Output only. The current lifecycle state of this spoke.

        :return: The state of this Spoke.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Spoke.

        Output only. The current lifecycle state of this spoke.

        :param state: The state of this Spoke.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING", "ACCEPTING", "REJECTING", "UPDATING", "INACTIVE", "OBSOLETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unique_id(self):
        """Gets the unique_id of this Spoke.

        Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different `unique_id`.

        :return: The unique_id of this Spoke.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Spoke.

        Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different `unique_id`.

        :param unique_id: The unique_id of this Spoke.
        :type unique_id: str
        """

        self._unique_id = unique_id

    @property
    def update_time(self):
        """Gets the update_time of this Spoke.

        Output only. The time the spoke was last updated.

        :return: The update_time of this Spoke.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Spoke.

        Output only. The time the spoke was last updated.

        :param update_time: The update_time of this Spoke.
        :type update_time: str
        """

        self._update_time = update_time
