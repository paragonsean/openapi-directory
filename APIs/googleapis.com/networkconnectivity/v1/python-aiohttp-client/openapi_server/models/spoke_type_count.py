# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpokeTypeCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, spoke_type: str=None):
        """SpokeTypeCount - a model defined in OpenAPI

        :param count: The count of this SpokeTypeCount.
        :param spoke_type: The spoke_type of this SpokeTypeCount.
        """
        self.openapi_types = {
            'count': str,
            'spoke_type': str
        }

        self.attribute_map = {
            'count': 'count',
            'spoke_type': 'spokeType'
        }

        self._count = count
        self._spoke_type = spoke_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpokeTypeCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpokeTypeCount of this SpokeTypeCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SpokeTypeCount.

        Output only. The total number of spokes of this type that are associated with the hub.

        :return: The count of this SpokeTypeCount.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SpokeTypeCount.

        Output only. The total number of spokes of this type that are associated with the hub.

        :param count: The count of this SpokeTypeCount.
        :type count: str
        """

        self._count = count

    @property
    def spoke_type(self):
        """Gets the spoke_type of this SpokeTypeCount.

        Output only. The type of the spokes.

        :return: The spoke_type of this SpokeTypeCount.
        :rtype: str
        """
        return self._spoke_type

    @spoke_type.setter
    def spoke_type(self, spoke_type):
        """Sets the spoke_type of this SpokeTypeCount.

        Output only. The type of the spokes.

        :param spoke_type: The spoke_type of this SpokeTypeCount.
        :type spoke_type: str
        """
        allowed_values = ["SPOKE_TYPE_UNSPECIFIED", "VPN_TUNNEL", "INTERCONNECT_ATTACHMENT", "ROUTER_APPLIANCE", "VPC_NETWORK"]  # noqa: E501
        if spoke_type not in allowed_values:
            raise ValueError(
                "Invalid value for `spoke_type` ({0}), must be one of {1}"
                .format(spoke_type, allowed_values)
            )

        self._spoke_type = spoke_type
