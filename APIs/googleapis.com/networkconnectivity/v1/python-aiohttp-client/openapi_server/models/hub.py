# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.routing_vpc import RoutingVPC
from openapi_server.models.spoke_summary import SpokeSummary
from openapi_server import util


class Hub(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, labels: Dict[str, str]=None, name: str=None, route_tables: List[str]=None, routing_vpcs: List[RoutingVPC]=None, spoke_summary: SpokeSummary=None, state: str=None, unique_id: str=None, update_time: str=None):
        """Hub - a model defined in OpenAPI

        :param create_time: The create_time of this Hub.
        :param description: The description of this Hub.
        :param labels: The labels of this Hub.
        :param name: The name of this Hub.
        :param route_tables: The route_tables of this Hub.
        :param routing_vpcs: The routing_vpcs of this Hub.
        :param spoke_summary: The spoke_summary of this Hub.
        :param state: The state of this Hub.
        :param unique_id: The unique_id of this Hub.
        :param update_time: The update_time of this Hub.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'labels': Dict[str, str],
            'name': str,
            'route_tables': List[str],
            'routing_vpcs': List[RoutingVPC],
            'spoke_summary': SpokeSummary,
            'state': str,
            'unique_id': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'labels': 'labels',
            'name': 'name',
            'route_tables': 'routeTables',
            'routing_vpcs': 'routingVpcs',
            'spoke_summary': 'spokeSummary',
            'state': 'state',
            'unique_id': 'uniqueId',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._labels = labels
        self._name = name
        self._route_tables = route_tables
        self._routing_vpcs = routing_vpcs
        self._spoke_summary = spoke_summary
        self._state = state
        self._unique_id = unique_id
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Hub':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Hub of this Hub.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Hub.

        Output only. The time the hub was created.

        :return: The create_time of this Hub.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Hub.

        Output only. The time the hub was created.

        :param create_time: The create_time of this Hub.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this Hub.

        An optional description of the hub.

        :return: The description of this Hub.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Hub.

        An optional description of the hub.

        :param description: The description of this Hub.
        :type description: str
        """

        self._description = description

    @property
    def labels(self):
        """Gets the labels of this Hub.

        Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).

        :return: The labels of this Hub.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Hub.

        Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).

        :param labels: The labels of this Hub.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Hub.

        Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`

        :return: The name of this Hub.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Hub.

        Immutable. The name of the hub. Hub names must be unique. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}`

        :param name: The name of this Hub.
        :type name: str
        """

        self._name = name

    @property
    def route_tables(self):
        """Gets the route_tables of this Hub.

        Output only. The route tables that belong to this hub. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}` This field is read-only. Network Connectivity Center automatically populates it based on the route tables nested under the hub.

        :return: The route_tables of this Hub.
        :rtype: List[str]
        """
        return self._route_tables

    @route_tables.setter
    def route_tables(self, route_tables):
        """Sets the route_tables of this Hub.

        Output only. The route tables that belong to this hub. They use the following form: `projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}` This field is read-only. Network Connectivity Center automatically populates it based on the route tables nested under the hub.

        :param route_tables: The route_tables of this Hub.
        :type route_tables: List[str]
        """

        self._route_tables = route_tables

    @property
    def routing_vpcs(self):
        """Gets the routing_vpcs of this Hub.

        The VPC networks associated with this hub's spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.

        :return: The routing_vpcs of this Hub.
        :rtype: List[RoutingVPC]
        """
        return self._routing_vpcs

    @routing_vpcs.setter
    def routing_vpcs(self, routing_vpcs):
        """Sets the routing_vpcs of this Hub.

        The VPC networks associated with this hub's spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.

        :param routing_vpcs: The routing_vpcs of this Hub.
        :type routing_vpcs: List[RoutingVPC]
        """

        self._routing_vpcs = routing_vpcs

    @property
    def spoke_summary(self):
        """Gets the spoke_summary of this Hub.


        :return: The spoke_summary of this Hub.
        :rtype: SpokeSummary
        """
        return self._spoke_summary

    @spoke_summary.setter
    def spoke_summary(self, spoke_summary):
        """Sets the spoke_summary of this Hub.


        :param spoke_summary: The spoke_summary of this Hub.
        :type spoke_summary: SpokeSummary
        """

        self._spoke_summary = spoke_summary

    @property
    def state(self):
        """Gets the state of this Hub.

        Output only. The current lifecycle state of this hub.

        :return: The state of this Hub.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Hub.

        Output only. The current lifecycle state of this hub.

        :param state: The state of this Hub.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "ACTIVE", "DELETING", "ACCEPTING", "REJECTING", "UPDATING", "INACTIVE", "OBSOLETE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def unique_id(self):
        """Gets the unique_id of this Hub.

        Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.

        :return: The unique_id of this Hub.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Hub.

        Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.

        :param unique_id: The unique_id of this Hub.
        :type unique_id: str
        """

        self._unique_id = unique_id

    @property
    def update_time(self):
        """Gets the update_time of this Hub.

        Output only. The time the hub was last updated.

        :return: The update_time of this Hub.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Hub.

        Output only. The time the hub was last updated.

        :param update_time: The update_time of this Hub.
        :type update_time: str
        """

        self._update_time = update_time
