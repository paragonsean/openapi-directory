# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_rpc_error_info import GoogleRpcErrorInfo
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server import util


class PscConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_address: str=None, consumer_forwarding_rule: str=None, consumer_target_project: str=None, error: GoogleRpcStatus=None, error_info: GoogleRpcErrorInfo=None, error_type: str=None, gce_operation: str=None, psc_connection_id: str=None, selected_subnetwork: str=None, state: str=None):
        """PscConnection - a model defined in OpenAPI

        :param consumer_address: The consumer_address of this PscConnection.
        :param consumer_forwarding_rule: The consumer_forwarding_rule of this PscConnection.
        :param consumer_target_project: The consumer_target_project of this PscConnection.
        :param error: The error of this PscConnection.
        :param error_info: The error_info of this PscConnection.
        :param error_type: The error_type of this PscConnection.
        :param gce_operation: The gce_operation of this PscConnection.
        :param psc_connection_id: The psc_connection_id of this PscConnection.
        :param selected_subnetwork: The selected_subnetwork of this PscConnection.
        :param state: The state of this PscConnection.
        """
        self.openapi_types = {
            'consumer_address': str,
            'consumer_forwarding_rule': str,
            'consumer_target_project': str,
            'error': GoogleRpcStatus,
            'error_info': GoogleRpcErrorInfo,
            'error_type': str,
            'gce_operation': str,
            'psc_connection_id': str,
            'selected_subnetwork': str,
            'state': str
        }

        self.attribute_map = {
            'consumer_address': 'consumerAddress',
            'consumer_forwarding_rule': 'consumerForwardingRule',
            'consumer_target_project': 'consumerTargetProject',
            'error': 'error',
            'error_info': 'errorInfo',
            'error_type': 'errorType',
            'gce_operation': 'gceOperation',
            'psc_connection_id': 'pscConnectionId',
            'selected_subnetwork': 'selectedSubnetwork',
            'state': 'state'
        }

        self._consumer_address = consumer_address
        self._consumer_forwarding_rule = consumer_forwarding_rule
        self._consumer_target_project = consumer_target_project
        self._error = error
        self._error_info = error_info
        self._error_type = error_type
        self._gce_operation = gce_operation
        self._psc_connection_id = psc_connection_id
        self._selected_subnetwork = selected_subnetwork
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PscConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PscConnection of this PscConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_address(self):
        """Gets the consumer_address of this PscConnection.

        The resource reference of the consumer address.

        :return: The consumer_address of this PscConnection.
        :rtype: str
        """
        return self._consumer_address

    @consumer_address.setter
    def consumer_address(self, consumer_address):
        """Sets the consumer_address of this PscConnection.

        The resource reference of the consumer address.

        :param consumer_address: The consumer_address of this PscConnection.
        :type consumer_address: str
        """

        self._consumer_address = consumer_address

    @property
    def consumer_forwarding_rule(self):
        """Gets the consumer_forwarding_rule of this PscConnection.

        The resource reference of the PSC Forwarding Rule within the consumer VPC.

        :return: The consumer_forwarding_rule of this PscConnection.
        :rtype: str
        """
        return self._consumer_forwarding_rule

    @consumer_forwarding_rule.setter
    def consumer_forwarding_rule(self, consumer_forwarding_rule):
        """Sets the consumer_forwarding_rule of this PscConnection.

        The resource reference of the PSC Forwarding Rule within the consumer VPC.

        :param consumer_forwarding_rule: The consumer_forwarding_rule of this PscConnection.
        :type consumer_forwarding_rule: str
        """

        self._consumer_forwarding_rule = consumer_forwarding_rule

    @property
    def consumer_target_project(self):
        """Gets the consumer_target_project of this PscConnection.

        The project where the PSC connection is created.

        :return: The consumer_target_project of this PscConnection.
        :rtype: str
        """
        return self._consumer_target_project

    @consumer_target_project.setter
    def consumer_target_project(self, consumer_target_project):
        """Sets the consumer_target_project of this PscConnection.

        The project where the PSC connection is created.

        :param consumer_target_project: The consumer_target_project of this PscConnection.
        :type consumer_target_project: str
        """

        self._consumer_target_project = consumer_target_project

    @property
    def error(self):
        """Gets the error of this PscConnection.


        :return: The error of this PscConnection.
        :rtype: GoogleRpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this PscConnection.


        :param error: The error of this PscConnection.
        :type error: GoogleRpcStatus
        """

        self._error = error

    @property
    def error_info(self):
        """Gets the error_info of this PscConnection.


        :return: The error_info of this PscConnection.
        :rtype: GoogleRpcErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this PscConnection.


        :param error_info: The error_info of this PscConnection.
        :type error_info: GoogleRpcErrorInfo
        """

        self._error_info = error_info

    @property
    def error_type(self):
        """Gets the error_type of this PscConnection.

        The error type indicates whether the error is consumer facing, producer facing or system internal.

        :return: The error_type of this PscConnection.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this PscConnection.

        The error type indicates whether the error is consumer facing, producer facing or system internal.

        :param error_type: The error_type of this PscConnection.
        :type error_type: str
        """
        allowed_values = ["CONNECTION_ERROR_TYPE_UNSPECIFIED", "ERROR_INTERNAL", "ERROR_CONSUMER_SIDE", "ERROR_PRODUCER_SIDE"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def gce_operation(self):
        """Gets the gce_operation of this PscConnection.

        The last Compute Engine operation to setup PSC connection.

        :return: The gce_operation of this PscConnection.
        :rtype: str
        """
        return self._gce_operation

    @gce_operation.setter
    def gce_operation(self, gce_operation):
        """Sets the gce_operation of this PscConnection.

        The last Compute Engine operation to setup PSC connection.

        :param gce_operation: The gce_operation of this PscConnection.
        :type gce_operation: str
        """

        self._gce_operation = gce_operation

    @property
    def psc_connection_id(self):
        """Gets the psc_connection_id of this PscConnection.

        The PSC connection id of the PSC forwarding rule.

        :return: The psc_connection_id of this PscConnection.
        :rtype: str
        """
        return self._psc_connection_id

    @psc_connection_id.setter
    def psc_connection_id(self, psc_connection_id):
        """Sets the psc_connection_id of this PscConnection.

        The PSC connection id of the PSC forwarding rule.

        :param psc_connection_id: The psc_connection_id of this PscConnection.
        :type psc_connection_id: str
        """

        self._psc_connection_id = psc_connection_id

    @property
    def selected_subnetwork(self):
        """Gets the selected_subnetwork of this PscConnection.

        Output only. The URI of the subnetwork selected to allocate IP address for this connection.

        :return: The selected_subnetwork of this PscConnection.
        :rtype: str
        """
        return self._selected_subnetwork

    @selected_subnetwork.setter
    def selected_subnetwork(self, selected_subnetwork):
        """Sets the selected_subnetwork of this PscConnection.

        Output only. The URI of the subnetwork selected to allocate IP address for this connection.

        :param selected_subnetwork: The selected_subnetwork of this PscConnection.
        :type selected_subnetwork: str
        """

        self._selected_subnetwork = selected_subnetwork

    @property
    def state(self):
        """Gets the state of this PscConnection.

        State of the PSC Connection

        :return: The state of this PscConnection.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PscConnection.

        State of the PSC Connection

        :param state: The state of this PscConnection.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "FAILED", "CREATING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
