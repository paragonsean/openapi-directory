# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.spoke_state_count import SpokeStateCount
from openapi_server.models.spoke_state_reason_count import SpokeStateReasonCount
from openapi_server.models.spoke_type_count import SpokeTypeCount
from openapi_server import util


class SpokeSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, spoke_state_counts: List[SpokeStateCount]=None, spoke_state_reason_counts: List[SpokeStateReasonCount]=None, spoke_type_counts: List[SpokeTypeCount]=None):
        """SpokeSummary - a model defined in OpenAPI

        :param spoke_state_counts: The spoke_state_counts of this SpokeSummary.
        :param spoke_state_reason_counts: The spoke_state_reason_counts of this SpokeSummary.
        :param spoke_type_counts: The spoke_type_counts of this SpokeSummary.
        """
        self.openapi_types = {
            'spoke_state_counts': List[SpokeStateCount],
            'spoke_state_reason_counts': List[SpokeStateReasonCount],
            'spoke_type_counts': List[SpokeTypeCount]
        }

        self.attribute_map = {
            'spoke_state_counts': 'spokeStateCounts',
            'spoke_state_reason_counts': 'spokeStateReasonCounts',
            'spoke_type_counts': 'spokeTypeCounts'
        }

        self._spoke_state_counts = spoke_state_counts
        self._spoke_state_reason_counts = spoke_state_reason_counts
        self._spoke_type_counts = spoke_type_counts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpokeSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpokeSummary of this SpokeSummary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def spoke_state_counts(self):
        """Gets the spoke_state_counts of this SpokeSummary.

        Output only. Counts the number of spokes that are in each state and associated with a given hub.

        :return: The spoke_state_counts of this SpokeSummary.
        :rtype: List[SpokeStateCount]
        """
        return self._spoke_state_counts

    @spoke_state_counts.setter
    def spoke_state_counts(self, spoke_state_counts):
        """Sets the spoke_state_counts of this SpokeSummary.

        Output only. Counts the number of spokes that are in each state and associated with a given hub.

        :param spoke_state_counts: The spoke_state_counts of this SpokeSummary.
        :type spoke_state_counts: List[SpokeStateCount]
        """

        self._spoke_state_counts = spoke_state_counts

    @property
    def spoke_state_reason_counts(self):
        """Gets the spoke_state_reason_counts of this SpokeSummary.

        Output only. Counts the number of spokes that are inactive for each possible reason and associated with a given hub.

        :return: The spoke_state_reason_counts of this SpokeSummary.
        :rtype: List[SpokeStateReasonCount]
        """
        return self._spoke_state_reason_counts

    @spoke_state_reason_counts.setter
    def spoke_state_reason_counts(self, spoke_state_reason_counts):
        """Sets the spoke_state_reason_counts of this SpokeSummary.

        Output only. Counts the number of spokes that are inactive for each possible reason and associated with a given hub.

        :param spoke_state_reason_counts: The spoke_state_reason_counts of this SpokeSummary.
        :type spoke_state_reason_counts: List[SpokeStateReasonCount]
        """

        self._spoke_state_reason_counts = spoke_state_reason_counts

    @property
    def spoke_type_counts(self):
        """Gets the spoke_type_counts of this SpokeSummary.

        Output only. Counts the number of spokes of each type that are associated with a specific hub.

        :return: The spoke_type_counts of this SpokeSummary.
        :rtype: List[SpokeTypeCount]
        """
        return self._spoke_type_counts

    @spoke_type_counts.setter
    def spoke_type_counts(self, spoke_type_counts):
        """Sets the spoke_type_counts of this SpokeSummary.

        Output only. Counts the number of spokes of each type that are associated with a specific hub.

        :param spoke_type_counts: The spoke_type_counts of this SpokeSummary.
        :type spoke_type_counts: List[SpokeTypeCount]
        """

        self._spoke_type_counts = spoke_type_counts
