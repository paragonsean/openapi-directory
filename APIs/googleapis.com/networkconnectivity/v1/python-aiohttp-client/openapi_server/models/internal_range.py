# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InternalRange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, ip_cidr_range: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, overlaps: List[str]=None, peering: str=None, prefix_length: int=None, target_cidr_range: List[str]=None, update_time: str=None, usage: str=None, users: List[str]=None):
        """InternalRange - a model defined in OpenAPI

        :param create_time: The create_time of this InternalRange.
        :param description: The description of this InternalRange.
        :param ip_cidr_range: The ip_cidr_range of this InternalRange.
        :param labels: The labels of this InternalRange.
        :param name: The name of this InternalRange.
        :param network: The network of this InternalRange.
        :param overlaps: The overlaps of this InternalRange.
        :param peering: The peering of this InternalRange.
        :param prefix_length: The prefix_length of this InternalRange.
        :param target_cidr_range: The target_cidr_range of this InternalRange.
        :param update_time: The update_time of this InternalRange.
        :param usage: The usage of this InternalRange.
        :param users: The users of this InternalRange.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'ip_cidr_range': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'overlaps': List[str],
            'peering': str,
            'prefix_length': int,
            'target_cidr_range': List[str],
            'update_time': str,
            'usage': str,
            'users': List[str]
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'ip_cidr_range': 'ipCidrRange',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'overlaps': 'overlaps',
            'peering': 'peering',
            'prefix_length': 'prefixLength',
            'target_cidr_range': 'targetCidrRange',
            'update_time': 'updateTime',
            'usage': 'usage',
            'users': 'users'
        }

        self._create_time = create_time
        self._description = description
        self._ip_cidr_range = ip_cidr_range
        self._labels = labels
        self._name = name
        self._network = network
        self._overlaps = overlaps
        self._peering = peering
        self._prefix_length = prefix_length
        self._target_cidr_range = target_cidr_range
        self._update_time = update_time
        self._usage = usage
        self._users = users

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InternalRange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InternalRange of this InternalRange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this InternalRange.

        Time when the internal range was created.

        :return: The create_time of this InternalRange.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InternalRange.

        Time when the internal range was created.

        :param create_time: The create_time of this InternalRange.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this InternalRange.

        A description of this resource.

        :return: The description of this InternalRange.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InternalRange.

        A description of this resource.

        :param description: The description of this InternalRange.
        :type description: str
        """

        self._description = description

    @property
    def ip_cidr_range(self):
        """Gets the ip_cidr_range of this InternalRange.

        The IP range that this internal range defines.

        :return: The ip_cidr_range of this InternalRange.
        :rtype: str
        """
        return self._ip_cidr_range

    @ip_cidr_range.setter
    def ip_cidr_range(self, ip_cidr_range):
        """Sets the ip_cidr_range of this InternalRange.

        The IP range that this internal range defines.

        :param ip_cidr_range: The ip_cidr_range of this InternalRange.
        :type ip_cidr_range: str
        """

        self._ip_cidr_range = ip_cidr_range

    @property
    def labels(self):
        """Gets the labels of this InternalRange.

        User-defined labels.

        :return: The labels of this InternalRange.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this InternalRange.

        User-defined labels.

        :param labels: The labels of this InternalRange.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this InternalRange.

        Immutable. The name of an internal range. Format: projects/{project}/locations/{location}/internalRanges/{internal_range} See: https://google.aip.dev/122#fields-representing-resource-names

        :return: The name of this InternalRange.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InternalRange.

        Immutable. The name of an internal range. Format: projects/{project}/locations/{location}/internalRanges/{internal_range} See: https://google.aip.dev/122#fields-representing-resource-names

        :param name: The name of this InternalRange.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this InternalRange.

        The URL or resource ID of the network in which to reserve the internal range. The network cannot be deleted if there are any reserved internal ranges referring to it. Legacy networks are not supported. This can only be specified for a global internal address. Example: - URL: /compute/v1/projects/{project}/global/networks/{resourceId} - ID: network123

        :return: The network of this InternalRange.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this InternalRange.

        The URL or resource ID of the network in which to reserve the internal range. The network cannot be deleted if there are any reserved internal ranges referring to it. Legacy networks are not supported. This can only be specified for a global internal address. Example: - URL: /compute/v1/projects/{project}/global/networks/{resourceId} - ID: network123

        :param network: The network of this InternalRange.
        :type network: str
        """

        self._network = network

    @property
    def overlaps(self):
        """Gets the overlaps of this InternalRange.

        Optional. Types of resources that are allowed to overlap with the current internal range.

        :return: The overlaps of this InternalRange.
        :rtype: List[str]
        """
        return self._overlaps

    @overlaps.setter
    def overlaps(self, overlaps):
        """Sets the overlaps of this InternalRange.

        Optional. Types of resources that are allowed to overlap with the current internal range.

        :param overlaps: The overlaps of this InternalRange.
        :type overlaps: List[str]
        """
        allowed_values = ["OVERLAP_UNSPECIFIED", "OVERLAP_ROUTE_RANGE", "OVERLAP_EXISTING_SUBNET_RANGE"]  # noqa: E501
        if not set(overlaps).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `overlaps` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(overlaps) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._overlaps = overlaps

    @property
    def peering(self):
        """Gets the peering of this InternalRange.

        The type of peering set for this internal range.

        :return: The peering of this InternalRange.
        :rtype: str
        """
        return self._peering

    @peering.setter
    def peering(self, peering):
        """Sets the peering of this InternalRange.

        The type of peering set for this internal range.

        :param peering: The peering of this InternalRange.
        :type peering: str
        """
        allowed_values = ["PEERING_UNSPECIFIED", "FOR_SELF", "FOR_PEER", "NOT_SHARED"]  # noqa: E501
        if peering not in allowed_values:
            raise ValueError(
                "Invalid value for `peering` ({0}), must be one of {1}"
                .format(peering, allowed_values)
            )

        self._peering = peering

    @property
    def prefix_length(self):
        """Gets the prefix_length of this InternalRange.

        An alternate to ip_cidr_range. Can be set when trying to create a reservation that automatically finds a free range of the given size. If both ip_cidr_range and prefix_length are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.

        :return: The prefix_length of this InternalRange.
        :rtype: int
        """
        return self._prefix_length

    @prefix_length.setter
    def prefix_length(self, prefix_length):
        """Sets the prefix_length of this InternalRange.

        An alternate to ip_cidr_range. Can be set when trying to create a reservation that automatically finds a free range of the given size. If both ip_cidr_range and prefix_length are set, there is an error if the range sizes do not match. Can also be used during updates to change the range size.

        :param prefix_length: The prefix_length of this InternalRange.
        :type prefix_length: int
        """

        self._prefix_length = prefix_length

    @property
    def target_cidr_range(self):
        """Gets the target_cidr_range of this InternalRange.

        Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set, defaults to the \"10.0.0.0/8\" address space. This can be used to search in other rfc-1918 address spaces like \"172.16.0.0/12\" and \"192.168.0.0/16\" or non-rfc-1918 address spaces used in the VPC.

        :return: The target_cidr_range of this InternalRange.
        :rtype: List[str]
        """
        return self._target_cidr_range

    @target_cidr_range.setter
    def target_cidr_range(self, target_cidr_range):
        """Sets the target_cidr_range of this InternalRange.

        Optional. Can be set to narrow down or pick a different address space while searching for a free range. If not set, defaults to the \"10.0.0.0/8\" address space. This can be used to search in other rfc-1918 address spaces like \"172.16.0.0/12\" and \"192.168.0.0/16\" or non-rfc-1918 address spaces used in the VPC.

        :param target_cidr_range: The target_cidr_range of this InternalRange.
        :type target_cidr_range: List[str]
        """

        self._target_cidr_range = target_cidr_range

    @property
    def update_time(self):
        """Gets the update_time of this InternalRange.

        Time when the internal range was updated.

        :return: The update_time of this InternalRange.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this InternalRange.

        Time when the internal range was updated.

        :param update_time: The update_time of this InternalRange.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def usage(self):
        """Gets the usage of this InternalRange.

        The type of usage set for this InternalRange.

        :return: The usage of this InternalRange.
        :rtype: str
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this InternalRange.

        The type of usage set for this InternalRange.

        :param usage: The usage of this InternalRange.
        :type usage: str
        """
        allowed_values = ["USAGE_UNSPECIFIED", "FOR_VPC", "EXTERNAL_TO_VPC"]  # noqa: E501
        if usage not in allowed_values:
            raise ValueError(
                "Invalid value for `usage` ({0}), must be one of {1}"
                .format(usage, allowed_values)
            )

        self._usage = usage

    @property
    def users(self):
        """Gets the users of this InternalRange.

        Output only. The list of resources that refer to this internal range. Resources that use the internal range for their range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.

        :return: The users of this InternalRange.
        :rtype: List[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this InternalRange.

        Output only. The list of resources that refer to this internal range. Resources that use the internal range for their range allocation are referred to as users of the range. Other resources mark themselves as users while doing so by creating a reference to this internal range. Having a user, based on this reference, prevents deletion of the internal range referred to. Can be empty.

        :param users: The users of this InternalRange.
        :type users: List[str]
        """

        self._users = users
