# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.psc_config import PscConfig
from openapi_server.models.psc_connection import PscConnection
from openapi_server import util


class ServiceConnectionPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, infrastructure: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, psc_config: PscConfig=None, psc_connections: List[PscConnection]=None, service_class: str=None, update_time: str=None):
        """ServiceConnectionPolicy - a model defined in OpenAPI

        :param create_time: The create_time of this ServiceConnectionPolicy.
        :param description: The description of this ServiceConnectionPolicy.
        :param etag: The etag of this ServiceConnectionPolicy.
        :param infrastructure: The infrastructure of this ServiceConnectionPolicy.
        :param labels: The labels of this ServiceConnectionPolicy.
        :param name: The name of this ServiceConnectionPolicy.
        :param network: The network of this ServiceConnectionPolicy.
        :param psc_config: The psc_config of this ServiceConnectionPolicy.
        :param psc_connections: The psc_connections of this ServiceConnectionPolicy.
        :param service_class: The service_class of this ServiceConnectionPolicy.
        :param update_time: The update_time of this ServiceConnectionPolicy.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'infrastructure': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'psc_config': PscConfig,
            'psc_connections': List[PscConnection],
            'service_class': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'infrastructure': 'infrastructure',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'psc_config': 'pscConfig',
            'psc_connections': 'pscConnections',
            'service_class': 'serviceClass',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._infrastructure = infrastructure
        self._labels = labels
        self._name = name
        self._network = network
        self._psc_config = psc_config
        self._psc_connections = psc_connections
        self._service_class = service_class
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceConnectionPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceConnectionPolicy of this ServiceConnectionPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ServiceConnectionPolicy.

        Output only. Time when the ServiceConnectionMap was created.

        :return: The create_time of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServiceConnectionPolicy.

        Output only. Time when the ServiceConnectionMap was created.

        :param create_time: The create_time of this ServiceConnectionPolicy.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ServiceConnectionPolicy.

        A description of this resource.

        :return: The description of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceConnectionPolicy.

        A description of this resource.

        :param description: The description of this ServiceConnectionPolicy.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this ServiceConnectionPolicy.

        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ServiceConnectionPolicy.

        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this ServiceConnectionPolicy.
        :type etag: str
        """

        self._etag = etag

    @property
    def infrastructure(self):
        """Gets the infrastructure of this ServiceConnectionPolicy.

        Output only. The type of underlying resources used to create the connection.

        :return: The infrastructure of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._infrastructure

    @infrastructure.setter
    def infrastructure(self, infrastructure):
        """Sets the infrastructure of this ServiceConnectionPolicy.

        Output only. The type of underlying resources used to create the connection.

        :param infrastructure: The infrastructure of this ServiceConnectionPolicy.
        :type infrastructure: str
        """
        allowed_values = ["INFRASTRUCTURE_UNSPECIFIED", "PSC"]  # noqa: E501
        if infrastructure not in allowed_values:
            raise ValueError(
                "Invalid value for `infrastructure` ({0}), must be one of {1}"
                .format(infrastructure, allowed_values)
            )

        self._infrastructure = infrastructure

    @property
    def labels(self):
        """Gets the labels of this ServiceConnectionPolicy.

        User-defined labels.

        :return: The labels of this ServiceConnectionPolicy.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServiceConnectionPolicy.

        User-defined labels.

        :param labels: The labels of this ServiceConnectionPolicy.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ServiceConnectionPolicy.

        Immutable. The name of a ServiceConnectionPolicy. Format: projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy} See: https://google.aip.dev/122#fields-representing-resource-names

        :return: The name of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceConnectionPolicy.

        Immutable. The name of a ServiceConnectionPolicy. Format: projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy} See: https://google.aip.dev/122#fields-representing-resource-names

        :param name: The name of this ServiceConnectionPolicy.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this ServiceConnectionPolicy.

        The resource path of the consumer network. Example: - projects/{projectNumOrId}/global/networks/{resourceId}.

        :return: The network of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ServiceConnectionPolicy.

        The resource path of the consumer network. Example: - projects/{projectNumOrId}/global/networks/{resourceId}.

        :param network: The network of this ServiceConnectionPolicy.
        :type network: str
        """

        self._network = network

    @property
    def psc_config(self):
        """Gets the psc_config of this ServiceConnectionPolicy.


        :return: The psc_config of this ServiceConnectionPolicy.
        :rtype: PscConfig
        """
        return self._psc_config

    @psc_config.setter
    def psc_config(self, psc_config):
        """Sets the psc_config of this ServiceConnectionPolicy.


        :param psc_config: The psc_config of this ServiceConnectionPolicy.
        :type psc_config: PscConfig
        """

        self._psc_config = psc_config

    @property
    def psc_connections(self):
        """Gets the psc_connections of this ServiceConnectionPolicy.

        Output only. [Output only] Information about each Private Service Connect connection.

        :return: The psc_connections of this ServiceConnectionPolicy.
        :rtype: List[PscConnection]
        """
        return self._psc_connections

    @psc_connections.setter
    def psc_connections(self, psc_connections):
        """Sets the psc_connections of this ServiceConnectionPolicy.

        Output only. [Output only] Information about each Private Service Connect connection.

        :param psc_connections: The psc_connections of this ServiceConnectionPolicy.
        :type psc_connections: List[PscConnection]
        """

        self._psc_connections = psc_connections

    @property
    def service_class(self):
        """Gets the service_class of this ServiceConnectionPolicy.

        The service class identifier for which this ServiceConnectionPolicy is for. The service class identifier is a unique, symbolic representation of a ServiceClass. It is provided by the Service Producer. Google services have a prefix of gcp. For example, gcp-cloud-sql. 3rd party services do not. For example, test-service-a3dfcx.

        :return: The service_class of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._service_class

    @service_class.setter
    def service_class(self, service_class):
        """Sets the service_class of this ServiceConnectionPolicy.

        The service class identifier for which this ServiceConnectionPolicy is for. The service class identifier is a unique, symbolic representation of a ServiceClass. It is provided by the Service Producer. Google services have a prefix of gcp. For example, gcp-cloud-sql. 3rd party services do not. For example, test-service-a3dfcx.

        :param service_class: The service_class of this ServiceConnectionPolicy.
        :type service_class: str
        """

        self._service_class = service_class

    @property
    def update_time(self):
        """Gets the update_time of this ServiceConnectionPolicy.

        Output only. Time when the ServiceConnectionMap was updated.

        :return: The update_time of this ServiceConnectionPolicy.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ServiceConnectionPolicy.

        Output only. Time when the ServiceConnectionMap was updated.

        :param update_time: The update_time of this ServiceConnectionPolicy.
        :type update_time: str
        """

        self._update_time = update_time
