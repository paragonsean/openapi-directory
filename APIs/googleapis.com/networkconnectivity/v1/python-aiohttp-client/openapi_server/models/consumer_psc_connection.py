# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_rpc_error_info import GoogleRpcErrorInfo
from openapi_server.models.google_rpc_status import GoogleRpcStatus
from openapi_server import util


class ConsumerPscConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: GoogleRpcStatus=None, error_info: GoogleRpcErrorInfo=None, error_type: str=None, forwarding_rule: str=None, gce_operation: str=None, ip: str=None, network: str=None, project: str=None, psc_connection_id: str=None, selected_subnetwork: str=None, service_attachment_uri: str=None, state: str=None):
        """ConsumerPscConnection - a model defined in OpenAPI

        :param error: The error of this ConsumerPscConnection.
        :param error_info: The error_info of this ConsumerPscConnection.
        :param error_type: The error_type of this ConsumerPscConnection.
        :param forwarding_rule: The forwarding_rule of this ConsumerPscConnection.
        :param gce_operation: The gce_operation of this ConsumerPscConnection.
        :param ip: The ip of this ConsumerPscConnection.
        :param network: The network of this ConsumerPscConnection.
        :param project: The project of this ConsumerPscConnection.
        :param psc_connection_id: The psc_connection_id of this ConsumerPscConnection.
        :param selected_subnetwork: The selected_subnetwork of this ConsumerPscConnection.
        :param service_attachment_uri: The service_attachment_uri of this ConsumerPscConnection.
        :param state: The state of this ConsumerPscConnection.
        """
        self.openapi_types = {
            'error': GoogleRpcStatus,
            'error_info': GoogleRpcErrorInfo,
            'error_type': str,
            'forwarding_rule': str,
            'gce_operation': str,
            'ip': str,
            'network': str,
            'project': str,
            'psc_connection_id': str,
            'selected_subnetwork': str,
            'service_attachment_uri': str,
            'state': str
        }

        self.attribute_map = {
            'error': 'error',
            'error_info': 'errorInfo',
            'error_type': 'errorType',
            'forwarding_rule': 'forwardingRule',
            'gce_operation': 'gceOperation',
            'ip': 'ip',
            'network': 'network',
            'project': 'project',
            'psc_connection_id': 'pscConnectionId',
            'selected_subnetwork': 'selectedSubnetwork',
            'service_attachment_uri': 'serviceAttachmentUri',
            'state': 'state'
        }

        self._error = error
        self._error_info = error_info
        self._error_type = error_type
        self._forwarding_rule = forwarding_rule
        self._gce_operation = gce_operation
        self._ip = ip
        self._network = network
        self._project = project
        self._psc_connection_id = psc_connection_id
        self._selected_subnetwork = selected_subnetwork
        self._service_attachment_uri = service_attachment_uri
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerPscConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerPscConnection of this ConsumerPscConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this ConsumerPscConnection.


        :return: The error of this ConsumerPscConnection.
        :rtype: GoogleRpcStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConsumerPscConnection.


        :param error: The error of this ConsumerPscConnection.
        :type error: GoogleRpcStatus
        """

        self._error = error

    @property
    def error_info(self):
        """Gets the error_info of this ConsumerPscConnection.


        :return: The error_info of this ConsumerPscConnection.
        :rtype: GoogleRpcErrorInfo
        """
        return self._error_info

    @error_info.setter
    def error_info(self, error_info):
        """Sets the error_info of this ConsumerPscConnection.


        :param error_info: The error_info of this ConsumerPscConnection.
        :type error_info: GoogleRpcErrorInfo
        """

        self._error_info = error_info

    @property
    def error_type(self):
        """Gets the error_type of this ConsumerPscConnection.

        The error type indicates whether the error is consumer facing, producer facing or system internal.

        :return: The error_type of this ConsumerPscConnection.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this ConsumerPscConnection.

        The error type indicates whether the error is consumer facing, producer facing or system internal.

        :param error_type: The error_type of this ConsumerPscConnection.
        :type error_type: str
        """
        allowed_values = ["CONNECTION_ERROR_TYPE_UNSPECIFIED", "ERROR_INTERNAL", "ERROR_CONSUMER_SIDE", "ERROR_PRODUCER_SIDE"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def forwarding_rule(self):
        """Gets the forwarding_rule of this ConsumerPscConnection.

        The URI of the consumer forwarding rule created. Example: projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.

        :return: The forwarding_rule of this ConsumerPscConnection.
        :rtype: str
        """
        return self._forwarding_rule

    @forwarding_rule.setter
    def forwarding_rule(self, forwarding_rule):
        """Sets the forwarding_rule of this ConsumerPscConnection.

        The URI of the consumer forwarding rule created. Example: projects/{projectNumOrId}/regions/us-east1/networks/{resourceId}.

        :param forwarding_rule: The forwarding_rule of this ConsumerPscConnection.
        :type forwarding_rule: str
        """

        self._forwarding_rule = forwarding_rule

    @property
    def gce_operation(self):
        """Gets the gce_operation of this ConsumerPscConnection.

        The last Compute Engine operation to setup PSC connection.

        :return: The gce_operation of this ConsumerPscConnection.
        :rtype: str
        """
        return self._gce_operation

    @gce_operation.setter
    def gce_operation(self, gce_operation):
        """Sets the gce_operation of this ConsumerPscConnection.

        The last Compute Engine operation to setup PSC connection.

        :param gce_operation: The gce_operation of this ConsumerPscConnection.
        :type gce_operation: str
        """

        self._gce_operation = gce_operation

    @property
    def ip(self):
        """Gets the ip of this ConsumerPscConnection.

        The IP literal allocated on the consumer network for the PSC forwarding rule that is created to connect to the producer service attachment in this service connection map.

        :return: The ip of this ConsumerPscConnection.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this ConsumerPscConnection.

        The IP literal allocated on the consumer network for the PSC forwarding rule that is created to connect to the producer service attachment in this service connection map.

        :param ip: The ip of this ConsumerPscConnection.
        :type ip: str
        """

        self._ip = ip

    @property
    def network(self):
        """Gets the network of this ConsumerPscConnection.

        The consumer network whose PSC forwarding rule is connected to the service attachments in this service connection map. Note that the network could be on a different project (shared VPC).

        :return: The network of this ConsumerPscConnection.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ConsumerPscConnection.

        The consumer network whose PSC forwarding rule is connected to the service attachments in this service connection map. Note that the network could be on a different project (shared VPC).

        :param network: The network of this ConsumerPscConnection.
        :type network: str
        """

        self._network = network

    @property
    def project(self):
        """Gets the project of this ConsumerPscConnection.

        The consumer project whose PSC forwarding rule is connected to the service attachments in this service connection map.

        :return: The project of this ConsumerPscConnection.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ConsumerPscConnection.

        The consumer project whose PSC forwarding rule is connected to the service attachments in this service connection map.

        :param project: The project of this ConsumerPscConnection.
        :type project: str
        """

        self._project = project

    @property
    def psc_connection_id(self):
        """Gets the psc_connection_id of this ConsumerPscConnection.

        The PSC connection id of the PSC forwarding rule connected to the service attachments in this service connection map.

        :return: The psc_connection_id of this ConsumerPscConnection.
        :rtype: str
        """
        return self._psc_connection_id

    @psc_connection_id.setter
    def psc_connection_id(self, psc_connection_id):
        """Sets the psc_connection_id of this ConsumerPscConnection.

        The PSC connection id of the PSC forwarding rule connected to the service attachments in this service connection map.

        :param psc_connection_id: The psc_connection_id of this ConsumerPscConnection.
        :type psc_connection_id: str
        """

        self._psc_connection_id = psc_connection_id

    @property
    def selected_subnetwork(self):
        """Gets the selected_subnetwork of this ConsumerPscConnection.

        Output only. The URI of the selected subnetwork selected to allocate IP address for this connection.

        :return: The selected_subnetwork of this ConsumerPscConnection.
        :rtype: str
        """
        return self._selected_subnetwork

    @selected_subnetwork.setter
    def selected_subnetwork(self, selected_subnetwork):
        """Sets the selected_subnetwork of this ConsumerPscConnection.

        Output only. The URI of the selected subnetwork selected to allocate IP address for this connection.

        :param selected_subnetwork: The selected_subnetwork of this ConsumerPscConnection.
        :type selected_subnetwork: str
        """

        self._selected_subnetwork = selected_subnetwork

    @property
    def service_attachment_uri(self):
        """Gets the service_attachment_uri of this ConsumerPscConnection.

        The URI of a service attachment which is the target of the PSC connection.

        :return: The service_attachment_uri of this ConsumerPscConnection.
        :rtype: str
        """
        return self._service_attachment_uri

    @service_attachment_uri.setter
    def service_attachment_uri(self, service_attachment_uri):
        """Sets the service_attachment_uri of this ConsumerPscConnection.

        The URI of a service attachment which is the target of the PSC connection.

        :param service_attachment_uri: The service_attachment_uri of this ConsumerPscConnection.
        :type service_attachment_uri: str
        """

        self._service_attachment_uri = service_attachment_uri

    @property
    def state(self):
        """Gets the state of this ConsumerPscConnection.

        The state of the PSC connection.

        :return: The state of this ConsumerPscConnection.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConsumerPscConnection.

        The state of the PSC connection.

        :param state: The state of this ConsumerPscConnection.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "FAILED", "CREATING", "DELETING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
