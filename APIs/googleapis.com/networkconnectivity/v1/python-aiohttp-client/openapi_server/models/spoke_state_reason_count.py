# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SpokeStateReasonCount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: str=None, state_reason_code: str=None):
        """SpokeStateReasonCount - a model defined in OpenAPI

        :param count: The count of this SpokeStateReasonCount.
        :param state_reason_code: The state_reason_code of this SpokeStateReasonCount.
        """
        self.openapi_types = {
            'count': str,
            'state_reason_code': str
        }

        self.attribute_map = {
            'count': 'count',
            'state_reason_code': 'stateReasonCode'
        }

        self._count = count
        self._state_reason_code = state_reason_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpokeStateReasonCount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpokeStateReasonCount of this SpokeStateReasonCount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SpokeStateReasonCount.

        Output only. The total number of spokes that are inactive for a particular reason and associated with a given hub.

        :return: The count of this SpokeStateReasonCount.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SpokeStateReasonCount.

        Output only. The total number of spokes that are inactive for a particular reason and associated with a given hub.

        :param count: The count of this SpokeStateReasonCount.
        :type count: str
        """

        self._count = count

    @property
    def state_reason_code(self):
        """Gets the state_reason_code of this SpokeStateReasonCount.

        Output only. The reason that a spoke is inactive.

        :return: The state_reason_code of this SpokeStateReasonCount.
        :rtype: str
        """
        return self._state_reason_code

    @state_reason_code.setter
    def state_reason_code(self, state_reason_code):
        """Sets the state_reason_code of this SpokeStateReasonCount.

        Output only. The reason that a spoke is inactive.

        :param state_reason_code: The state_reason_code of this SpokeStateReasonCount.
        :type state_reason_code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "PENDING_REVIEW", "REJECTED", "PAUSED", "FAILED"]  # noqa: E501
        if state_reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `state_reason_code` ({0}), must be one of {1}"
                .format(state_reason_code, allowed_values)
            )

        self._state_reason_code = state_reason_code
