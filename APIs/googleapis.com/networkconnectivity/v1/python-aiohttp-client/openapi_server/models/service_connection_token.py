# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceConnectionToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, description: str=None, etag: str=None, expire_time: str=None, labels: Dict[str, str]=None, name: str=None, network: str=None, token: str=None, update_time: str=None):
        """ServiceConnectionToken - a model defined in OpenAPI

        :param create_time: The create_time of this ServiceConnectionToken.
        :param description: The description of this ServiceConnectionToken.
        :param etag: The etag of this ServiceConnectionToken.
        :param expire_time: The expire_time of this ServiceConnectionToken.
        :param labels: The labels of this ServiceConnectionToken.
        :param name: The name of this ServiceConnectionToken.
        :param network: The network of this ServiceConnectionToken.
        :param token: The token of this ServiceConnectionToken.
        :param update_time: The update_time of this ServiceConnectionToken.
        """
        self.openapi_types = {
            'create_time': str,
            'description': str,
            'etag': str,
            'expire_time': str,
            'labels': Dict[str, str],
            'name': str,
            'network': str,
            'token': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'description': 'description',
            'etag': 'etag',
            'expire_time': 'expireTime',
            'labels': 'labels',
            'name': 'name',
            'network': 'network',
            'token': 'token',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._description = description
        self._etag = etag
        self._expire_time = expire_time
        self._labels = labels
        self._name = name
        self._network = network
        self._token = token
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceConnectionToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceConnectionToken of this ServiceConnectionToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this ServiceConnectionToken.

        Output only. Time when the ServiceConnectionToken was created.

        :return: The create_time of this ServiceConnectionToken.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this ServiceConnectionToken.

        Output only. Time when the ServiceConnectionToken was created.

        :param create_time: The create_time of this ServiceConnectionToken.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def description(self):
        """Gets the description of this ServiceConnectionToken.

        A description of this resource.

        :return: The description of this ServiceConnectionToken.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceConnectionToken.

        A description of this resource.

        :param description: The description of this ServiceConnectionToken.
        :type description: str
        """

        self._description = description

    @property
    def etag(self):
        """Gets the etag of this ServiceConnectionToken.

        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :return: The etag of this ServiceConnectionToken.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this ServiceConnectionToken.

        Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.

        :param etag: The etag of this ServiceConnectionToken.
        :type etag: str
        """

        self._etag = etag

    @property
    def expire_time(self):
        """Gets the expire_time of this ServiceConnectionToken.

        Output only. The time to which this token is valid.

        :return: The expire_time of this ServiceConnectionToken.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this ServiceConnectionToken.

        Output only. The time to which this token is valid.

        :param expire_time: The expire_time of this ServiceConnectionToken.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def labels(self):
        """Gets the labels of this ServiceConnectionToken.

        User-defined labels.

        :return: The labels of this ServiceConnectionToken.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ServiceConnectionToken.

        User-defined labels.

        :param labels: The labels of this ServiceConnectionToken.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this ServiceConnectionToken.

        Immutable. The name of a ServiceConnectionToken. Format: projects/{project}/locations/{location}/ServiceConnectionTokens/{service_connection_token} See: https://google.aip.dev/122#fields-representing-resource-names

        :return: The name of this ServiceConnectionToken.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceConnectionToken.

        Immutable. The name of a ServiceConnectionToken. Format: projects/{project}/locations/{location}/ServiceConnectionTokens/{service_connection_token} See: https://google.aip.dev/122#fields-representing-resource-names

        :param name: The name of this ServiceConnectionToken.
        :type name: str
        """

        self._name = name

    @property
    def network(self):
        """Gets the network of this ServiceConnectionToken.

        The resource path of the network associated with this token. Example: projects/{projectNumOrId}/global/networks/{resourceId}.

        :return: The network of this ServiceConnectionToken.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this ServiceConnectionToken.

        The resource path of the network associated with this token. Example: projects/{projectNumOrId}/global/networks/{resourceId}.

        :param network: The network of this ServiceConnectionToken.
        :type network: str
        """

        self._network = network

    @property
    def token(self):
        """Gets the token of this ServiceConnectionToken.

        Output only. The token generated by Automation.

        :return: The token of this ServiceConnectionToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ServiceConnectionToken.

        Output only. The token generated by Automation.

        :param token: The token of this ServiceConnectionToken.
        :type token: str
        """

        self._token = token

    @property
    def update_time(self):
        """Gets the update_time of this ServiceConnectionToken.

        Output only. Time when the ServiceConnectionToken was updated.

        :return: The update_time of this ServiceConnectionToken.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ServiceConnectionToken.

        Output only. Time when the ServiceConnectionToken was updated.

        :param update_time: The update_time of this ServiceConnectionToken.
        :type update_time: str
        """

        self._update_time = update_time
