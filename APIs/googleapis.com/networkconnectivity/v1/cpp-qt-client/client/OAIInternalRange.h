/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInternalRange.h
 *
 * The internal range resource for IPAM operations within a VPC network. Used to represent a private address range along with behavioral characterstics of that range (its usage and peering behavior). Networking resources can link to this range if they are created as belonging to it.
 */

#ifndef OAIInternalRange_H
#define OAIInternalRange_H

#include <QJsonObject>

#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIInternalRange : public OAIObject {
public:
    OAIInternalRange();
    OAIInternalRange(QString json);
    ~OAIInternalRange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getIpCidrRange() const;
    void setIpCidrRange(const QString &ip_cidr_range);
    bool is_ip_cidr_range_Set() const;
    bool is_ip_cidr_range_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QList<QString> getOverlaps() const;
    void setOverlaps(const QList<QString> &overlaps);
    bool is_overlaps_Set() const;
    bool is_overlaps_Valid() const;

    QString getPeering() const;
    void setPeering(const QString &peering);
    bool is_peering_Set() const;
    bool is_peering_Valid() const;

    qint32 getPrefixLength() const;
    void setPrefixLength(const qint32 &prefix_length);
    bool is_prefix_length_Set() const;
    bool is_prefix_length_Valid() const;

    QList<QString> getTargetCidrRange() const;
    void setTargetCidrRange(const QList<QString> &target_cidr_range);
    bool is_target_cidr_range_Set() const;
    bool is_target_cidr_range_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    QString getUsage() const;
    void setUsage(const QString &usage);
    bool is_usage_Set() const;
    bool is_usage_Valid() const;

    QList<QString> getUsers() const;
    void setUsers(const QList<QString> &users);
    bool is_users_Set() const;
    bool is_users_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_ip_cidr_range;
    bool m_ip_cidr_range_isSet;
    bool m_ip_cidr_range_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QList<QString> m_overlaps;
    bool m_overlaps_isSet;
    bool m_overlaps_isValid;

    QString m_peering;
    bool m_peering_isSet;
    bool m_peering_isValid;

    qint32 m_prefix_length;
    bool m_prefix_length_isSet;
    bool m_prefix_length_isValid;

    QList<QString> m_target_cidr_range;
    bool m_target_cidr_range_isSet;
    bool m_target_cidr_range_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;

    QString m_usage;
    bool m_usage_isSet;
    bool m_usage_isValid;

    QList<QString> m_users;
    bool m_users_isSet;
    bool m_users_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInternalRange)

#endif // OAIInternalRange_H
