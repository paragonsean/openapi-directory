/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoute::OAIRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoute::OAIRoute() {
    this->initializeModel();
}

OAIRoute::~OAIRoute() {}

void OAIRoute::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_ip_cidr_range_isSet = false;
    m_ip_cidr_range_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_hop_vpc_network_isSet = false;
    m_next_hop_vpc_network_isValid = false;

    m_spoke_isSet = false;
    m_spoke_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoute::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_ip_cidr_range_isValid = ::OpenAPI::fromJsonValue(m_ip_cidr_range, json[QString("ipCidrRange")]);
    m_ip_cidr_range_isSet = !json[QString("ipCidrRange")].isNull() && m_ip_cidr_range_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_hop_vpc_network_isValid = ::OpenAPI::fromJsonValue(m_next_hop_vpc_network, json[QString("nextHopVpcNetwork")]);
    m_next_hop_vpc_network_isSet = !json[QString("nextHopVpcNetwork")].isNull() && m_next_hop_vpc_network_isValid;

    m_spoke_isValid = ::OpenAPI::fromJsonValue(m_spoke, json[QString("spoke")]);
    m_spoke_isSet = !json[QString("spoke")].isNull() && m_spoke_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_ip_cidr_range_isSet) {
        obj.insert(QString("ipCidrRange"), ::OpenAPI::toJsonValue(m_ip_cidr_range));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_hop_vpc_network.isSet()) {
        obj.insert(QString("nextHopVpcNetwork"), ::OpenAPI::toJsonValue(m_next_hop_vpc_network));
    }
    if (m_spoke_isSet) {
        obj.insert(QString("spoke"), ::OpenAPI::toJsonValue(m_spoke));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIRoute::getCreateTime() const {
    return m_create_time;
}
void OAIRoute::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRoute::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRoute::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIRoute::getDescription() const {
    return m_description;
}
void OAIRoute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRoute::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRoute::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRoute::getIpCidrRange() const {
    return m_ip_cidr_range;
}
void OAIRoute::setIpCidrRange(const QString &ip_cidr_range) {
    m_ip_cidr_range = ip_cidr_range;
    m_ip_cidr_range_isSet = true;
}

bool OAIRoute::is_ip_cidr_range_Set() const{
    return m_ip_cidr_range_isSet;
}

bool OAIRoute::is_ip_cidr_range_Valid() const{
    return m_ip_cidr_range_isValid;
}

QMap<QString, QString> OAIRoute::getLabels() const {
    return m_labels;
}
void OAIRoute::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIRoute::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIRoute::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIRoute::getLocation() const {
    return m_location;
}
void OAIRoute::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIRoute::is_location_Set() const{
    return m_location_isSet;
}

bool OAIRoute::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIRoute::getName() const {
    return m_name;
}
void OAIRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRoute::is_name_Valid() const{
    return m_name_isValid;
}

OAINextHopVpcNetwork OAIRoute::getNextHopVpcNetwork() const {
    return m_next_hop_vpc_network;
}
void OAIRoute::setNextHopVpcNetwork(const OAINextHopVpcNetwork &next_hop_vpc_network) {
    m_next_hop_vpc_network = next_hop_vpc_network;
    m_next_hop_vpc_network_isSet = true;
}

bool OAIRoute::is_next_hop_vpc_network_Set() const{
    return m_next_hop_vpc_network_isSet;
}

bool OAIRoute::is_next_hop_vpc_network_Valid() const{
    return m_next_hop_vpc_network_isValid;
}

QString OAIRoute::getSpoke() const {
    return m_spoke;
}
void OAIRoute::setSpoke(const QString &spoke) {
    m_spoke = spoke;
    m_spoke_isSet = true;
}

bool OAIRoute::is_spoke_Set() const{
    return m_spoke_isSet;
}

bool OAIRoute::is_spoke_Valid() const{
    return m_spoke_isValid;
}

QString OAIRoute::getState() const {
    return m_state;
}
void OAIRoute::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIRoute::is_state_Set() const{
    return m_state_isSet;
}

bool OAIRoute::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIRoute::getType() const {
    return m_type;
}
void OAIRoute::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRoute::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRoute::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRoute::getUid() const {
    return m_uid;
}
void OAIRoute::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIRoute::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIRoute::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIRoute::getUpdateTime() const {
    return m_update_time;
}
void OAIRoute::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIRoute::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIRoute::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_cidr_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_vpc_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
