/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceConnectionMap.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceConnectionMap::OAIServiceConnectionMap(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceConnectionMap::OAIServiceConnectionMap() {
    this->initializeModel();
}

OAIServiceConnectionMap::~OAIServiceConnectionMap() {}

void OAIServiceConnectionMap::initializeModel() {

    m_consumer_psc_configs_isSet = false;
    m_consumer_psc_configs_isValid = false;

    m_consumer_psc_connections_isSet = false;
    m_consumer_psc_connections_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_etag_isSet = false;
    m_etag_isValid = false;

    m_infrastructure_isSet = false;
    m_infrastructure_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_producer_psc_configs_isSet = false;
    m_producer_psc_configs_isValid = false;

    m_service_class_isSet = false;
    m_service_class_isValid = false;

    m_service_class_uri_isSet = false;
    m_service_class_uri_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIServiceConnectionMap::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceConnectionMap::fromJsonObject(QJsonObject json) {

    m_consumer_psc_configs_isValid = ::OpenAPI::fromJsonValue(m_consumer_psc_configs, json[QString("consumerPscConfigs")]);
    m_consumer_psc_configs_isSet = !json[QString("consumerPscConfigs")].isNull() && m_consumer_psc_configs_isValid;

    m_consumer_psc_connections_isValid = ::OpenAPI::fromJsonValue(m_consumer_psc_connections, json[QString("consumerPscConnections")]);
    m_consumer_psc_connections_isSet = !json[QString("consumerPscConnections")].isNull() && m_consumer_psc_connections_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_etag_isValid = ::OpenAPI::fromJsonValue(m_etag, json[QString("etag")]);
    m_etag_isSet = !json[QString("etag")].isNull() && m_etag_isValid;

    m_infrastructure_isValid = ::OpenAPI::fromJsonValue(m_infrastructure, json[QString("infrastructure")]);
    m_infrastructure_isSet = !json[QString("infrastructure")].isNull() && m_infrastructure_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_producer_psc_configs_isValid = ::OpenAPI::fromJsonValue(m_producer_psc_configs, json[QString("producerPscConfigs")]);
    m_producer_psc_configs_isSet = !json[QString("producerPscConfigs")].isNull() && m_producer_psc_configs_isValid;

    m_service_class_isValid = ::OpenAPI::fromJsonValue(m_service_class, json[QString("serviceClass")]);
    m_service_class_isSet = !json[QString("serviceClass")].isNull() && m_service_class_isValid;

    m_service_class_uri_isValid = ::OpenAPI::fromJsonValue(m_service_class_uri, json[QString("serviceClassUri")]);
    m_service_class_uri_isSet = !json[QString("serviceClassUri")].isNull() && m_service_class_uri_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIServiceConnectionMap::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceConnectionMap::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_psc_configs.size() > 0) {
        obj.insert(QString("consumerPscConfigs"), ::OpenAPI::toJsonValue(m_consumer_psc_configs));
    }
    if (m_consumer_psc_connections.size() > 0) {
        obj.insert(QString("consumerPscConnections"), ::OpenAPI::toJsonValue(m_consumer_psc_connections));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_etag_isSet) {
        obj.insert(QString("etag"), ::OpenAPI::toJsonValue(m_etag));
    }
    if (m_infrastructure_isSet) {
        obj.insert(QString("infrastructure"), ::OpenAPI::toJsonValue(m_infrastructure));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_producer_psc_configs.size() > 0) {
        obj.insert(QString("producerPscConfigs"), ::OpenAPI::toJsonValue(m_producer_psc_configs));
    }
    if (m_service_class_isSet) {
        obj.insert(QString("serviceClass"), ::OpenAPI::toJsonValue(m_service_class));
    }
    if (m_service_class_uri_isSet) {
        obj.insert(QString("serviceClassUri"), ::OpenAPI::toJsonValue(m_service_class_uri));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QList<OAIConsumerPscConfig> OAIServiceConnectionMap::getConsumerPscConfigs() const {
    return m_consumer_psc_configs;
}
void OAIServiceConnectionMap::setConsumerPscConfigs(const QList<OAIConsumerPscConfig> &consumer_psc_configs) {
    m_consumer_psc_configs = consumer_psc_configs;
    m_consumer_psc_configs_isSet = true;
}

bool OAIServiceConnectionMap::is_consumer_psc_configs_Set() const{
    return m_consumer_psc_configs_isSet;
}

bool OAIServiceConnectionMap::is_consumer_psc_configs_Valid() const{
    return m_consumer_psc_configs_isValid;
}

QList<OAIConsumerPscConnection> OAIServiceConnectionMap::getConsumerPscConnections() const {
    return m_consumer_psc_connections;
}
void OAIServiceConnectionMap::setConsumerPscConnections(const QList<OAIConsumerPscConnection> &consumer_psc_connections) {
    m_consumer_psc_connections = consumer_psc_connections;
    m_consumer_psc_connections_isSet = true;
}

bool OAIServiceConnectionMap::is_consumer_psc_connections_Set() const{
    return m_consumer_psc_connections_isSet;
}

bool OAIServiceConnectionMap::is_consumer_psc_connections_Valid() const{
    return m_consumer_psc_connections_isValid;
}

QString OAIServiceConnectionMap::getCreateTime() const {
    return m_create_time;
}
void OAIServiceConnectionMap::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIServiceConnectionMap::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIServiceConnectionMap::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIServiceConnectionMap::getDescription() const {
    return m_description;
}
void OAIServiceConnectionMap::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceConnectionMap::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceConnectionMap::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIServiceConnectionMap::getEtag() const {
    return m_etag;
}
void OAIServiceConnectionMap::setEtag(const QString &etag) {
    m_etag = etag;
    m_etag_isSet = true;
}

bool OAIServiceConnectionMap::is_etag_Set() const{
    return m_etag_isSet;
}

bool OAIServiceConnectionMap::is_etag_Valid() const{
    return m_etag_isValid;
}

QString OAIServiceConnectionMap::getInfrastructure() const {
    return m_infrastructure;
}
void OAIServiceConnectionMap::setInfrastructure(const QString &infrastructure) {
    m_infrastructure = infrastructure;
    m_infrastructure_isSet = true;
}

bool OAIServiceConnectionMap::is_infrastructure_Set() const{
    return m_infrastructure_isSet;
}

bool OAIServiceConnectionMap::is_infrastructure_Valid() const{
    return m_infrastructure_isValid;
}

QMap<QString, QString> OAIServiceConnectionMap::getLabels() const {
    return m_labels;
}
void OAIServiceConnectionMap::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIServiceConnectionMap::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIServiceConnectionMap::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIServiceConnectionMap::getName() const {
    return m_name;
}
void OAIServiceConnectionMap::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIServiceConnectionMap::is_name_Set() const{
    return m_name_isSet;
}

bool OAIServiceConnectionMap::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProducerPscConfig> OAIServiceConnectionMap::getProducerPscConfigs() const {
    return m_producer_psc_configs;
}
void OAIServiceConnectionMap::setProducerPscConfigs(const QList<OAIProducerPscConfig> &producer_psc_configs) {
    m_producer_psc_configs = producer_psc_configs;
    m_producer_psc_configs_isSet = true;
}

bool OAIServiceConnectionMap::is_producer_psc_configs_Set() const{
    return m_producer_psc_configs_isSet;
}

bool OAIServiceConnectionMap::is_producer_psc_configs_Valid() const{
    return m_producer_psc_configs_isValid;
}

QString OAIServiceConnectionMap::getServiceClass() const {
    return m_service_class;
}
void OAIServiceConnectionMap::setServiceClass(const QString &service_class) {
    m_service_class = service_class;
    m_service_class_isSet = true;
}

bool OAIServiceConnectionMap::is_service_class_Set() const{
    return m_service_class_isSet;
}

bool OAIServiceConnectionMap::is_service_class_Valid() const{
    return m_service_class_isValid;
}

QString OAIServiceConnectionMap::getServiceClassUri() const {
    return m_service_class_uri;
}
void OAIServiceConnectionMap::setServiceClassUri(const QString &service_class_uri) {
    m_service_class_uri = service_class_uri;
    m_service_class_uri_isSet = true;
}

bool OAIServiceConnectionMap::is_service_class_uri_Set() const{
    return m_service_class_uri_isSet;
}

bool OAIServiceConnectionMap::is_service_class_uri_Valid() const{
    return m_service_class_uri_isValid;
}

QString OAIServiceConnectionMap::getToken() const {
    return m_token;
}
void OAIServiceConnectionMap::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIServiceConnectionMap::is_token_Set() const{
    return m_token_isSet;
}

bool OAIServiceConnectionMap::is_token_Valid() const{
    return m_token_isValid;
}

QString OAIServiceConnectionMap::getUpdateTime() const {
    return m_update_time;
}
void OAIServiceConnectionMap::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIServiceConnectionMap::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIServiceConnectionMap::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIServiceConnectionMap::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_psc_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_psc_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_etag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrastructure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_producer_psc_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_class_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_class_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceConnectionMap::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
