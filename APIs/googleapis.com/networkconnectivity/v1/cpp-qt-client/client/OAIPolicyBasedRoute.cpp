/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyBasedRoute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyBasedRoute::OAIPolicyBasedRoute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyBasedRoute::OAIPolicyBasedRoute() {
    this->initializeModel();
}

OAIPolicyBasedRoute::~OAIPolicyBasedRoute() {}

void OAIPolicyBasedRoute::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_interconnect_attachment_isSet = false;
    m_interconnect_attachment_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_next_hop_ilb_ip_isSet = false;
    m_next_hop_ilb_ip_isValid = false;

    m_next_hop_other_routes_isSet = false;
    m_next_hop_other_routes_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_self_link_isSet = false;
    m_self_link_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_virtual_machine_isSet = false;
    m_virtual_machine_isValid = false;

    m_warnings_isSet = false;
    m_warnings_isValid = false;
}

void OAIPolicyBasedRoute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyBasedRoute::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_interconnect_attachment_isValid = ::OpenAPI::fromJsonValue(m_interconnect_attachment, json[QString("interconnectAttachment")]);
    m_interconnect_attachment_isSet = !json[QString("interconnectAttachment")].isNull() && m_interconnect_attachment_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_next_hop_ilb_ip_isValid = ::OpenAPI::fromJsonValue(m_next_hop_ilb_ip, json[QString("nextHopIlbIp")]);
    m_next_hop_ilb_ip_isSet = !json[QString("nextHopIlbIp")].isNull() && m_next_hop_ilb_ip_isValid;

    m_next_hop_other_routes_isValid = ::OpenAPI::fromJsonValue(m_next_hop_other_routes, json[QString("nextHopOtherRoutes")]);
    m_next_hop_other_routes_isSet = !json[QString("nextHopOtherRoutes")].isNull() && m_next_hop_other_routes_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_self_link_isValid = ::OpenAPI::fromJsonValue(m_self_link, json[QString("selfLink")]);
    m_self_link_isSet = !json[QString("selfLink")].isNull() && m_self_link_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_virtual_machine_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine, json[QString("virtualMachine")]);
    m_virtual_machine_isSet = !json[QString("virtualMachine")].isNull() && m_virtual_machine_isValid;

    m_warnings_isValid = ::OpenAPI::fromJsonValue(m_warnings, json[QString("warnings")]);
    m_warnings_isSet = !json[QString("warnings")].isNull() && m_warnings_isValid;
}

QString OAIPolicyBasedRoute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyBasedRoute::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_filter.isSet()) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_interconnect_attachment.isSet()) {
        obj.insert(QString("interconnectAttachment"), ::OpenAPI::toJsonValue(m_interconnect_attachment));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_network_isSet) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_next_hop_ilb_ip_isSet) {
        obj.insert(QString("nextHopIlbIp"), ::OpenAPI::toJsonValue(m_next_hop_ilb_ip));
    }
    if (m_next_hop_other_routes_isSet) {
        obj.insert(QString("nextHopOtherRoutes"), ::OpenAPI::toJsonValue(m_next_hop_other_routes));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_self_link_isSet) {
        obj.insert(QString("selfLink"), ::OpenAPI::toJsonValue(m_self_link));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_virtual_machine.isSet()) {
        obj.insert(QString("virtualMachine"), ::OpenAPI::toJsonValue(m_virtual_machine));
    }
    if (m_warnings.size() > 0) {
        obj.insert(QString("warnings"), ::OpenAPI::toJsonValue(m_warnings));
    }
    return obj;
}

QString OAIPolicyBasedRoute::getCreateTime() const {
    return m_create_time;
}
void OAIPolicyBasedRoute::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPolicyBasedRoute::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPolicyBasedRoute::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIPolicyBasedRoute::getDescription() const {
    return m_description;
}
void OAIPolicyBasedRoute::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPolicyBasedRoute::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPolicyBasedRoute::is_description_Valid() const{
    return m_description_isValid;
}

OAIFilter OAIPolicyBasedRoute::getFilter() const {
    return m_filter;
}
void OAIPolicyBasedRoute::setFilter(const OAIFilter &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIPolicyBasedRoute::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIPolicyBasedRoute::is_filter_Valid() const{
    return m_filter_isValid;
}

OAIInterconnectAttachment OAIPolicyBasedRoute::getInterconnectAttachment() const {
    return m_interconnect_attachment;
}
void OAIPolicyBasedRoute::setInterconnectAttachment(const OAIInterconnectAttachment &interconnect_attachment) {
    m_interconnect_attachment = interconnect_attachment;
    m_interconnect_attachment_isSet = true;
}

bool OAIPolicyBasedRoute::is_interconnect_attachment_Set() const{
    return m_interconnect_attachment_isSet;
}

bool OAIPolicyBasedRoute::is_interconnect_attachment_Valid() const{
    return m_interconnect_attachment_isValid;
}

QString OAIPolicyBasedRoute::getKind() const {
    return m_kind;
}
void OAIPolicyBasedRoute::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIPolicyBasedRoute::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIPolicyBasedRoute::is_kind_Valid() const{
    return m_kind_isValid;
}

QMap<QString, QString> OAIPolicyBasedRoute::getLabels() const {
    return m_labels;
}
void OAIPolicyBasedRoute::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIPolicyBasedRoute::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIPolicyBasedRoute::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIPolicyBasedRoute::getName() const {
    return m_name;
}
void OAIPolicyBasedRoute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPolicyBasedRoute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPolicyBasedRoute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPolicyBasedRoute::getNetwork() const {
    return m_network;
}
void OAIPolicyBasedRoute::setNetwork(const QString &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIPolicyBasedRoute::is_network_Set() const{
    return m_network_isSet;
}

bool OAIPolicyBasedRoute::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIPolicyBasedRoute::getNextHopIlbIp() const {
    return m_next_hop_ilb_ip;
}
void OAIPolicyBasedRoute::setNextHopIlbIp(const QString &next_hop_ilb_ip) {
    m_next_hop_ilb_ip = next_hop_ilb_ip;
    m_next_hop_ilb_ip_isSet = true;
}

bool OAIPolicyBasedRoute::is_next_hop_ilb_ip_Set() const{
    return m_next_hop_ilb_ip_isSet;
}

bool OAIPolicyBasedRoute::is_next_hop_ilb_ip_Valid() const{
    return m_next_hop_ilb_ip_isValid;
}

QString OAIPolicyBasedRoute::getNextHopOtherRoutes() const {
    return m_next_hop_other_routes;
}
void OAIPolicyBasedRoute::setNextHopOtherRoutes(const QString &next_hop_other_routes) {
    m_next_hop_other_routes = next_hop_other_routes;
    m_next_hop_other_routes_isSet = true;
}

bool OAIPolicyBasedRoute::is_next_hop_other_routes_Set() const{
    return m_next_hop_other_routes_isSet;
}

bool OAIPolicyBasedRoute::is_next_hop_other_routes_Valid() const{
    return m_next_hop_other_routes_isValid;
}

qint32 OAIPolicyBasedRoute::getPriority() const {
    return m_priority;
}
void OAIPolicyBasedRoute::setPriority(const qint32 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAIPolicyBasedRoute::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAIPolicyBasedRoute::is_priority_Valid() const{
    return m_priority_isValid;
}

QString OAIPolicyBasedRoute::getSelfLink() const {
    return m_self_link;
}
void OAIPolicyBasedRoute::setSelfLink(const QString &self_link) {
    m_self_link = self_link;
    m_self_link_isSet = true;
}

bool OAIPolicyBasedRoute::is_self_link_Set() const{
    return m_self_link_isSet;
}

bool OAIPolicyBasedRoute::is_self_link_Valid() const{
    return m_self_link_isValid;
}

QString OAIPolicyBasedRoute::getUpdateTime() const {
    return m_update_time;
}
void OAIPolicyBasedRoute::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIPolicyBasedRoute::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIPolicyBasedRoute::is_update_time_Valid() const{
    return m_update_time_isValid;
}

OAIVirtualMachine OAIPolicyBasedRoute::getVirtualMachine() const {
    return m_virtual_machine;
}
void OAIPolicyBasedRoute::setVirtualMachine(const OAIVirtualMachine &virtual_machine) {
    m_virtual_machine = virtual_machine;
    m_virtual_machine_isSet = true;
}

bool OAIPolicyBasedRoute::is_virtual_machine_Set() const{
    return m_virtual_machine_isSet;
}

bool OAIPolicyBasedRoute::is_virtual_machine_Valid() const{
    return m_virtual_machine_isValid;
}

QList<OAIWarnings> OAIPolicyBasedRoute::getWarnings() const {
    return m_warnings;
}
void OAIPolicyBasedRoute::setWarnings(const QList<OAIWarnings> &warnings) {
    m_warnings = warnings;
    m_warnings_isSet = true;
}

bool OAIPolicyBasedRoute::is_warnings_Set() const{
    return m_warnings_isSet;
}

bool OAIPolicyBasedRoute::is_warnings_Valid() const{
    return m_warnings_isValid;
}

bool OAIPolicyBasedRoute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interconnect_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_ilb_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_hop_other_routes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_warnings.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyBasedRoute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
