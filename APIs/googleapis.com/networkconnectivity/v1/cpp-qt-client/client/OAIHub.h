/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIHub.h
 *
 * A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub&#39;s spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project.
 */

#ifndef OAIHub_H
#define OAIHub_H

#include <QJsonObject>

#include "OAIRoutingVPC.h"
#include "OAISpokeSummary.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIRoutingVPC;
class OAISpokeSummary;

class OAIHub : public OAIObject {
public:
    OAIHub();
    OAIHub(QString json);
    ~OAIHub() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<QString> getRouteTables() const;
    void setRouteTables(const QList<QString> &route_tables);
    bool is_route_tables_Set() const;
    bool is_route_tables_Valid() const;

    QList<OAIRoutingVPC> getRoutingVpcs() const;
    void setRoutingVpcs(const QList<OAIRoutingVPC> &routing_vpcs);
    bool is_routing_vpcs_Set() const;
    bool is_routing_vpcs_Valid() const;

    OAISpokeSummary getSpokeSummary() const;
    void setSpokeSummary(const OAISpokeSummary &spoke_summary);
    bool is_spoke_summary_Set() const;
    bool is_spoke_summary_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUniqueId() const;
    void setUniqueId(const QString &unique_id);
    bool is_unique_id_Set() const;
    bool is_unique_id_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<QString> m_route_tables;
    bool m_route_tables_isSet;
    bool m_route_tables_isValid;

    QList<OAIRoutingVPC> m_routing_vpcs;
    bool m_routing_vpcs_isSet;
    bool m_routing_vpcs_isValid;

    OAISpokeSummary m_spoke_summary;
    bool m_spoke_summary_isSet;
    bool m_spoke_summary_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_unique_id;
    bool m_unique_id_isSet;
    bool m_unique_id_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIHub)

#endif // OAIHub_H
