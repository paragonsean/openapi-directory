/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpokeSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpokeSummary::OAISpokeSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpokeSummary::OAISpokeSummary() {
    this->initializeModel();
}

OAISpokeSummary::~OAISpokeSummary() {}

void OAISpokeSummary::initializeModel() {

    m_spoke_state_counts_isSet = false;
    m_spoke_state_counts_isValid = false;

    m_spoke_state_reason_counts_isSet = false;
    m_spoke_state_reason_counts_isValid = false;

    m_spoke_type_counts_isSet = false;
    m_spoke_type_counts_isValid = false;
}

void OAISpokeSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpokeSummary::fromJsonObject(QJsonObject json) {

    m_spoke_state_counts_isValid = ::OpenAPI::fromJsonValue(m_spoke_state_counts, json[QString("spokeStateCounts")]);
    m_spoke_state_counts_isSet = !json[QString("spokeStateCounts")].isNull() && m_spoke_state_counts_isValid;

    m_spoke_state_reason_counts_isValid = ::OpenAPI::fromJsonValue(m_spoke_state_reason_counts, json[QString("spokeStateReasonCounts")]);
    m_spoke_state_reason_counts_isSet = !json[QString("spokeStateReasonCounts")].isNull() && m_spoke_state_reason_counts_isValid;

    m_spoke_type_counts_isValid = ::OpenAPI::fromJsonValue(m_spoke_type_counts, json[QString("spokeTypeCounts")]);
    m_spoke_type_counts_isSet = !json[QString("spokeTypeCounts")].isNull() && m_spoke_type_counts_isValid;
}

QString OAISpokeSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpokeSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_spoke_state_counts.size() > 0) {
        obj.insert(QString("spokeStateCounts"), ::OpenAPI::toJsonValue(m_spoke_state_counts));
    }
    if (m_spoke_state_reason_counts.size() > 0) {
        obj.insert(QString("spokeStateReasonCounts"), ::OpenAPI::toJsonValue(m_spoke_state_reason_counts));
    }
    if (m_spoke_type_counts.size() > 0) {
        obj.insert(QString("spokeTypeCounts"), ::OpenAPI::toJsonValue(m_spoke_type_counts));
    }
    return obj;
}

QList<OAISpokeStateCount> OAISpokeSummary::getSpokeStateCounts() const {
    return m_spoke_state_counts;
}
void OAISpokeSummary::setSpokeStateCounts(const QList<OAISpokeStateCount> &spoke_state_counts) {
    m_spoke_state_counts = spoke_state_counts;
    m_spoke_state_counts_isSet = true;
}

bool OAISpokeSummary::is_spoke_state_counts_Set() const{
    return m_spoke_state_counts_isSet;
}

bool OAISpokeSummary::is_spoke_state_counts_Valid() const{
    return m_spoke_state_counts_isValid;
}

QList<OAISpokeStateReasonCount> OAISpokeSummary::getSpokeStateReasonCounts() const {
    return m_spoke_state_reason_counts;
}
void OAISpokeSummary::setSpokeStateReasonCounts(const QList<OAISpokeStateReasonCount> &spoke_state_reason_counts) {
    m_spoke_state_reason_counts = spoke_state_reason_counts;
    m_spoke_state_reason_counts_isSet = true;
}

bool OAISpokeSummary::is_spoke_state_reason_counts_Set() const{
    return m_spoke_state_reason_counts_isSet;
}

bool OAISpokeSummary::is_spoke_state_reason_counts_Valid() const{
    return m_spoke_state_reason_counts_isValid;
}

QList<OAISpokeTypeCount> OAISpokeSummary::getSpokeTypeCounts() const {
    return m_spoke_type_counts;
}
void OAISpokeSummary::setSpokeTypeCounts(const QList<OAISpokeTypeCount> &spoke_type_counts) {
    m_spoke_type_counts = spoke_type_counts;
    m_spoke_type_counts_isSet = true;
}

bool OAISpokeSummary::is_spoke_type_counts_Set() const{
    return m_spoke_type_counts_isSet;
}

bool OAISpokeSummary::is_spoke_type_counts_Valid() const{
    return m_spoke_type_counts_isValid;
}

bool OAISpokeSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_spoke_state_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoke_state_reason_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoke_type_counts.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpokeSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
