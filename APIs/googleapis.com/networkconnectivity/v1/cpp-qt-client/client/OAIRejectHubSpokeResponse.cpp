/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRejectHubSpokeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRejectHubSpokeResponse::OAIRejectHubSpokeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRejectHubSpokeResponse::OAIRejectHubSpokeResponse() {
    this->initializeModel();
}

OAIRejectHubSpokeResponse::~OAIRejectHubSpokeResponse() {}

void OAIRejectHubSpokeResponse::initializeModel() {

    m_spoke_isSet = false;
    m_spoke_isValid = false;
}

void OAIRejectHubSpokeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRejectHubSpokeResponse::fromJsonObject(QJsonObject json) {

    m_spoke_isValid = ::OpenAPI::fromJsonValue(m_spoke, json[QString("spoke")]);
    m_spoke_isSet = !json[QString("spoke")].isNull() && m_spoke_isValid;
}

QString OAIRejectHubSpokeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRejectHubSpokeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_spoke.isSet()) {
        obj.insert(QString("spoke"), ::OpenAPI::toJsonValue(m_spoke));
    }
    return obj;
}

OAISpoke OAIRejectHubSpokeResponse::getSpoke() const {
    return m_spoke;
}
void OAIRejectHubSpokeResponse::setSpoke(const OAISpoke &spoke) {
    m_spoke = spoke;
    m_spoke_isSet = true;
}

bool OAIRejectHubSpokeResponse::is_spoke_Set() const{
    return m_spoke_isSet;
}

bool OAIRejectHubSpokeResponse::is_spoke_Valid() const{
    return m_spoke_isValid;
}

bool OAIRejectHubSpokeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_spoke.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRejectHubSpokeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
