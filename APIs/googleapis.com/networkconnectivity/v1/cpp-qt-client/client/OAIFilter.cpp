/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFilter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFilter::OAIFilter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFilter::OAIFilter() {
    this->initializeModel();
}

OAIFilter::~OAIFilter() {}

void OAIFilter::initializeModel() {

    m_dest_range_isSet = false;
    m_dest_range_isValid = false;

    m_ip_protocol_isSet = false;
    m_ip_protocol_isValid = false;

    m_protocol_version_isSet = false;
    m_protocol_version_isValid = false;

    m_src_range_isSet = false;
    m_src_range_isValid = false;
}

void OAIFilter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFilter::fromJsonObject(QJsonObject json) {

    m_dest_range_isValid = ::OpenAPI::fromJsonValue(m_dest_range, json[QString("destRange")]);
    m_dest_range_isSet = !json[QString("destRange")].isNull() && m_dest_range_isValid;

    m_ip_protocol_isValid = ::OpenAPI::fromJsonValue(m_ip_protocol, json[QString("ipProtocol")]);
    m_ip_protocol_isSet = !json[QString("ipProtocol")].isNull() && m_ip_protocol_isValid;

    m_protocol_version_isValid = ::OpenAPI::fromJsonValue(m_protocol_version, json[QString("protocolVersion")]);
    m_protocol_version_isSet = !json[QString("protocolVersion")].isNull() && m_protocol_version_isValid;

    m_src_range_isValid = ::OpenAPI::fromJsonValue(m_src_range, json[QString("srcRange")]);
    m_src_range_isSet = !json[QString("srcRange")].isNull() && m_src_range_isValid;
}

QString OAIFilter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFilter::asJsonObject() const {
    QJsonObject obj;
    if (m_dest_range_isSet) {
        obj.insert(QString("destRange"), ::OpenAPI::toJsonValue(m_dest_range));
    }
    if (m_ip_protocol_isSet) {
        obj.insert(QString("ipProtocol"), ::OpenAPI::toJsonValue(m_ip_protocol));
    }
    if (m_protocol_version_isSet) {
        obj.insert(QString("protocolVersion"), ::OpenAPI::toJsonValue(m_protocol_version));
    }
    if (m_src_range_isSet) {
        obj.insert(QString("srcRange"), ::OpenAPI::toJsonValue(m_src_range));
    }
    return obj;
}

QString OAIFilter::getDestRange() const {
    return m_dest_range;
}
void OAIFilter::setDestRange(const QString &dest_range) {
    m_dest_range = dest_range;
    m_dest_range_isSet = true;
}

bool OAIFilter::is_dest_range_Set() const{
    return m_dest_range_isSet;
}

bool OAIFilter::is_dest_range_Valid() const{
    return m_dest_range_isValid;
}

QString OAIFilter::getIpProtocol() const {
    return m_ip_protocol;
}
void OAIFilter::setIpProtocol(const QString &ip_protocol) {
    m_ip_protocol = ip_protocol;
    m_ip_protocol_isSet = true;
}

bool OAIFilter::is_ip_protocol_Set() const{
    return m_ip_protocol_isSet;
}

bool OAIFilter::is_ip_protocol_Valid() const{
    return m_ip_protocol_isValid;
}

QString OAIFilter::getProtocolVersion() const {
    return m_protocol_version;
}
void OAIFilter::setProtocolVersion(const QString &protocol_version) {
    m_protocol_version = protocol_version;
    m_protocol_version_isSet = true;
}

bool OAIFilter::is_protocol_version_Set() const{
    return m_protocol_version_isSet;
}

bool OAIFilter::is_protocol_version_Valid() const{
    return m_protocol_version_isValid;
}

QString OAIFilter::getSrcRange() const {
    return m_src_range;
}
void OAIFilter::setSrcRange(const QString &src_range) {
    m_src_range = src_range;
    m_src_range_isSet = true;
}

bool OAIFilter::is_src_range_Set() const{
    return m_src_range_isSet;
}

bool OAIFilter::is_src_range_Valid() const{
    return m_src_range_isValid;
}

bool OAIFilter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dest_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFilter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
