/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPscConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPscConfig::OAIPscConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPscConfig::OAIPscConfig() {
    this->initializeModel();
}

OAIPscConfig::~OAIPscConfig() {}

void OAIPscConfig::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_subnetworks_isSet = false;
    m_subnetworks_isValid = false;
}

void OAIPscConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPscConfig::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_subnetworks_isValid = ::OpenAPI::fromJsonValue(m_subnetworks, json[QString("subnetworks")]);
    m_subnetworks_isSet = !json[QString("subnetworks")].isNull() && m_subnetworks_isValid;
}

QString OAIPscConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPscConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_subnetworks.size() > 0) {
        obj.insert(QString("subnetworks"), ::OpenAPI::toJsonValue(m_subnetworks));
    }
    return obj;
}

QString OAIPscConfig::getLimit() const {
    return m_limit;
}
void OAIPscConfig::setLimit(const QString &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIPscConfig::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIPscConfig::is_limit_Valid() const{
    return m_limit_isValid;
}

QList<QString> OAIPscConfig::getSubnetworks() const {
    return m_subnetworks;
}
void OAIPscConfig::setSubnetworks(const QList<QString> &subnetworks) {
    m_subnetworks = subnetworks;
    m_subnetworks_isSet = true;
}

bool OAIPscConfig::is_subnetworks_Set() const{
    return m_subnetworks_isSet;
}

bool OAIPscConfig::is_subnetworks_Valid() const{
    return m_subnetworks_isValid;
}

bool OAIPscConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnetworks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPscConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
