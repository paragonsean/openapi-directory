/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingVPC.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRoutingVPC::OAIRoutingVPC(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRoutingVPC::OAIRoutingVPC() {
    this->initializeModel();
}

OAIRoutingVPC::~OAIRoutingVPC() {}

void OAIRoutingVPC::initializeModel() {

    m_required_for_new_site_to_site_data_transfer_spokes_isSet = false;
    m_required_for_new_site_to_site_data_transfer_spokes_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIRoutingVPC::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRoutingVPC::fromJsonObject(QJsonObject json) {

    m_required_for_new_site_to_site_data_transfer_spokes_isValid = ::OpenAPI::fromJsonValue(m_required_for_new_site_to_site_data_transfer_spokes, json[QString("requiredForNewSiteToSiteDataTransferSpokes")]);
    m_required_for_new_site_to_site_data_transfer_spokes_isSet = !json[QString("requiredForNewSiteToSiteDataTransferSpokes")].isNull() && m_required_for_new_site_to_site_data_transfer_spokes_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIRoutingVPC::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRoutingVPC::asJsonObject() const {
    QJsonObject obj;
    if (m_required_for_new_site_to_site_data_transfer_spokes_isSet) {
        obj.insert(QString("requiredForNewSiteToSiteDataTransferSpokes"), ::OpenAPI::toJsonValue(m_required_for_new_site_to_site_data_transfer_spokes));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

bool OAIRoutingVPC::isRequiredForNewSiteToSiteDataTransferSpokes() const {
    return m_required_for_new_site_to_site_data_transfer_spokes;
}
void OAIRoutingVPC::setRequiredForNewSiteToSiteDataTransferSpokes(const bool &required_for_new_site_to_site_data_transfer_spokes) {
    m_required_for_new_site_to_site_data_transfer_spokes = required_for_new_site_to_site_data_transfer_spokes;
    m_required_for_new_site_to_site_data_transfer_spokes_isSet = true;
}

bool OAIRoutingVPC::is_required_for_new_site_to_site_data_transfer_spokes_Set() const{
    return m_required_for_new_site_to_site_data_transfer_spokes_isSet;
}

bool OAIRoutingVPC::is_required_for_new_site_to_site_data_transfer_spokes_Valid() const{
    return m_required_for_new_site_to_site_data_transfer_spokes_isValid;
}

QString OAIRoutingVPC::getUri() const {
    return m_uri;
}
void OAIRoutingVPC::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIRoutingVPC::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIRoutingVPC::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIRoutingVPC::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_required_for_new_site_to_site_data_transfer_spokes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRoutingVPC::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
