/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILinkedVpnTunnels.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILinkedVpnTunnels::OAILinkedVpnTunnels(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILinkedVpnTunnels::OAILinkedVpnTunnels() {
    this->initializeModel();
}

OAILinkedVpnTunnels::~OAILinkedVpnTunnels() {}

void OAILinkedVpnTunnels::initializeModel() {

    m_site_to_site_data_transfer_isSet = false;
    m_site_to_site_data_transfer_isValid = false;

    m_uris_isSet = false;
    m_uris_isValid = false;

    m_vpc_network_isSet = false;
    m_vpc_network_isValid = false;
}

void OAILinkedVpnTunnels::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILinkedVpnTunnels::fromJsonObject(QJsonObject json) {

    m_site_to_site_data_transfer_isValid = ::OpenAPI::fromJsonValue(m_site_to_site_data_transfer, json[QString("siteToSiteDataTransfer")]);
    m_site_to_site_data_transfer_isSet = !json[QString("siteToSiteDataTransfer")].isNull() && m_site_to_site_data_transfer_isValid;

    m_uris_isValid = ::OpenAPI::fromJsonValue(m_uris, json[QString("uris")]);
    m_uris_isSet = !json[QString("uris")].isNull() && m_uris_isValid;

    m_vpc_network_isValid = ::OpenAPI::fromJsonValue(m_vpc_network, json[QString("vpcNetwork")]);
    m_vpc_network_isSet = !json[QString("vpcNetwork")].isNull() && m_vpc_network_isValid;
}

QString OAILinkedVpnTunnels::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILinkedVpnTunnels::asJsonObject() const {
    QJsonObject obj;
    if (m_site_to_site_data_transfer_isSet) {
        obj.insert(QString("siteToSiteDataTransfer"), ::OpenAPI::toJsonValue(m_site_to_site_data_transfer));
    }
    if (m_uris.size() > 0) {
        obj.insert(QString("uris"), ::OpenAPI::toJsonValue(m_uris));
    }
    if (m_vpc_network_isSet) {
        obj.insert(QString("vpcNetwork"), ::OpenAPI::toJsonValue(m_vpc_network));
    }
    return obj;
}

bool OAILinkedVpnTunnels::isSiteToSiteDataTransfer() const {
    return m_site_to_site_data_transfer;
}
void OAILinkedVpnTunnels::setSiteToSiteDataTransfer(const bool &site_to_site_data_transfer) {
    m_site_to_site_data_transfer = site_to_site_data_transfer;
    m_site_to_site_data_transfer_isSet = true;
}

bool OAILinkedVpnTunnels::is_site_to_site_data_transfer_Set() const{
    return m_site_to_site_data_transfer_isSet;
}

bool OAILinkedVpnTunnels::is_site_to_site_data_transfer_Valid() const{
    return m_site_to_site_data_transfer_isValid;
}

QList<QString> OAILinkedVpnTunnels::getUris() const {
    return m_uris;
}
void OAILinkedVpnTunnels::setUris(const QList<QString> &uris) {
    m_uris = uris;
    m_uris_isSet = true;
}

bool OAILinkedVpnTunnels::is_uris_Set() const{
    return m_uris_isSet;
}

bool OAILinkedVpnTunnels::is_uris_Valid() const{
    return m_uris_isValid;
}

QString OAILinkedVpnTunnels::getVpcNetwork() const {
    return m_vpc_network;
}
void OAILinkedVpnTunnels::setVpcNetwork(const QString &vpc_network) {
    m_vpc_network = vpc_network;
    m_vpc_network_isSet = true;
}

bool OAILinkedVpnTunnels::is_vpc_network_Set() const{
    return m_vpc_network_isSet;
}

bool OAILinkedVpnTunnels::is_vpc_network_Valid() const{
    return m_vpc_network_isValid;
}

bool OAILinkedVpnTunnels::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_site_to_site_data_transfer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uris.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vpc_network_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILinkedVpnTunnels::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
