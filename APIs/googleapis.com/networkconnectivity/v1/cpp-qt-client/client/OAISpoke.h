/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISpoke.h
 *
 * A Network Connectivity Center spoke represents one or more network connectivity resources. When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields: * linked_vpn_tunnels * linked_interconnect_attachments * linked_router_appliance_instances * linked_vpc_network
 */

#ifndef OAISpoke_H
#define OAISpoke_H

#include <QJsonObject>

#include "OAILinkedInterconnectAttachments.h"
#include "OAILinkedRouterApplianceInstances.h"
#include "OAILinkedVpcNetwork.h"
#include "OAILinkedVpnTunnels.h"
#include "OAIStateReason.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAILinkedInterconnectAttachments;
class OAILinkedRouterApplianceInstances;
class OAILinkedVpcNetwork;
class OAILinkedVpnTunnels;
class OAIStateReason;

class OAISpoke : public OAIObject {
public:
    OAISpoke();
    OAISpoke(QString json);
    ~OAISpoke() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCreateTime() const;
    void setCreateTime(const QString &create_time);
    bool is_create_time_Set() const;
    bool is_create_time_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getGroup() const;
    void setGroup(const QString &group);
    bool is_group_Set() const;
    bool is_group_Valid() const;

    QString getHub() const;
    void setHub(const QString &hub);
    bool is_hub_Set() const;
    bool is_hub_Valid() const;

    QMap<QString, QString> getLabels() const;
    void setLabels(const QMap<QString, QString> &labels);
    bool is_labels_Set() const;
    bool is_labels_Valid() const;

    OAILinkedInterconnectAttachments getLinkedInterconnectAttachments() const;
    void setLinkedInterconnectAttachments(const OAILinkedInterconnectAttachments &linked_interconnect_attachments);
    bool is_linked_interconnect_attachments_Set() const;
    bool is_linked_interconnect_attachments_Valid() const;

    OAILinkedRouterApplianceInstances getLinkedRouterApplianceInstances() const;
    void setLinkedRouterApplianceInstances(const OAILinkedRouterApplianceInstances &linked_router_appliance_instances);
    bool is_linked_router_appliance_instances_Set() const;
    bool is_linked_router_appliance_instances_Valid() const;

    OAILinkedVpcNetwork getLinkedVpcNetwork() const;
    void setLinkedVpcNetwork(const OAILinkedVpcNetwork &linked_vpc_network);
    bool is_linked_vpc_network_Set() const;
    bool is_linked_vpc_network_Valid() const;

    OAILinkedVpnTunnels getLinkedVpnTunnels() const;
    void setLinkedVpnTunnels(const OAILinkedVpnTunnels &linked_vpn_tunnels);
    bool is_linked_vpn_tunnels_Set() const;
    bool is_linked_vpn_tunnels_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIStateReason> getReasons() const;
    void setReasons(const QList<OAIStateReason> &reasons);
    bool is_reasons_Set() const;
    bool is_reasons_Valid() const;

    QString getSpokeType() const;
    void setSpokeType(const QString &spoke_type);
    bool is_spoke_type_Set() const;
    bool is_spoke_type_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    QString getUniqueId() const;
    void setUniqueId(const QString &unique_id);
    bool is_unique_id_Set() const;
    bool is_unique_id_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_create_time;
    bool m_create_time_isSet;
    bool m_create_time_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_group;
    bool m_group_isSet;
    bool m_group_isValid;

    QString m_hub;
    bool m_hub_isSet;
    bool m_hub_isValid;

    QMap<QString, QString> m_labels;
    bool m_labels_isSet;
    bool m_labels_isValid;

    OAILinkedInterconnectAttachments m_linked_interconnect_attachments;
    bool m_linked_interconnect_attachments_isSet;
    bool m_linked_interconnect_attachments_isValid;

    OAILinkedRouterApplianceInstances m_linked_router_appliance_instances;
    bool m_linked_router_appliance_instances_isSet;
    bool m_linked_router_appliance_instances_isValid;

    OAILinkedVpcNetwork m_linked_vpc_network;
    bool m_linked_vpc_network_isSet;
    bool m_linked_vpc_network_isValid;

    OAILinkedVpnTunnels m_linked_vpn_tunnels;
    bool m_linked_vpn_tunnels_isSet;
    bool m_linked_vpn_tunnels_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIStateReason> m_reasons;
    bool m_reasons_isSet;
    bool m_reasons_isValid;

    QString m_spoke_type;
    bool m_spoke_type_isSet;
    bool m_spoke_type_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    QString m_unique_id;
    bool m_unique_id_isSet;
    bool m_unique_id_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISpoke)

#endif // OAISpoke_H
