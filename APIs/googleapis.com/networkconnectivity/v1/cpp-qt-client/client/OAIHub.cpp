/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHub.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHub::OAIHub(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHub::OAIHub() {
    this->initializeModel();
}

OAIHub::~OAIHub() {}

void OAIHub::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_route_tables_isSet = false;
    m_route_tables_isValid = false;

    m_routing_vpcs_isSet = false;
    m_routing_vpcs_isValid = false;

    m_spoke_summary_isSet = false;
    m_spoke_summary_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIHub::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHub::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_route_tables_isValid = ::OpenAPI::fromJsonValue(m_route_tables, json[QString("routeTables")]);
    m_route_tables_isSet = !json[QString("routeTables")].isNull() && m_route_tables_isValid;

    m_routing_vpcs_isValid = ::OpenAPI::fromJsonValue(m_routing_vpcs, json[QString("routingVpcs")]);
    m_routing_vpcs_isSet = !json[QString("routingVpcs")].isNull() && m_routing_vpcs_isValid;

    m_spoke_summary_isValid = ::OpenAPI::fromJsonValue(m_spoke_summary, json[QString("spokeSummary")]);
    m_spoke_summary_isSet = !json[QString("spokeSummary")].isNull() && m_spoke_summary_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIHub::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHub::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_route_tables.size() > 0) {
        obj.insert(QString("routeTables"), ::OpenAPI::toJsonValue(m_route_tables));
    }
    if (m_routing_vpcs.size() > 0) {
        obj.insert(QString("routingVpcs"), ::OpenAPI::toJsonValue(m_routing_vpcs));
    }
    if (m_spoke_summary.isSet()) {
        obj.insert(QString("spokeSummary"), ::OpenAPI::toJsonValue(m_spoke_summary));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIHub::getCreateTime() const {
    return m_create_time;
}
void OAIHub::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIHub::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIHub::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIHub::getDescription() const {
    return m_description;
}
void OAIHub::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIHub::is_description_Set() const{
    return m_description_isSet;
}

bool OAIHub::is_description_Valid() const{
    return m_description_isValid;
}

QMap<QString, QString> OAIHub::getLabels() const {
    return m_labels;
}
void OAIHub::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIHub::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIHub::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIHub::getName() const {
    return m_name;
}
void OAIHub::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIHub::is_name_Set() const{
    return m_name_isSet;
}

bool OAIHub::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIHub::getRouteTables() const {
    return m_route_tables;
}
void OAIHub::setRouteTables(const QList<QString> &route_tables) {
    m_route_tables = route_tables;
    m_route_tables_isSet = true;
}

bool OAIHub::is_route_tables_Set() const{
    return m_route_tables_isSet;
}

bool OAIHub::is_route_tables_Valid() const{
    return m_route_tables_isValid;
}

QList<OAIRoutingVPC> OAIHub::getRoutingVpcs() const {
    return m_routing_vpcs;
}
void OAIHub::setRoutingVpcs(const QList<OAIRoutingVPC> &routing_vpcs) {
    m_routing_vpcs = routing_vpcs;
    m_routing_vpcs_isSet = true;
}

bool OAIHub::is_routing_vpcs_Set() const{
    return m_routing_vpcs_isSet;
}

bool OAIHub::is_routing_vpcs_Valid() const{
    return m_routing_vpcs_isValid;
}

OAISpokeSummary OAIHub::getSpokeSummary() const {
    return m_spoke_summary;
}
void OAIHub::setSpokeSummary(const OAISpokeSummary &spoke_summary) {
    m_spoke_summary = spoke_summary;
    m_spoke_summary_isSet = true;
}

bool OAIHub::is_spoke_summary_Set() const{
    return m_spoke_summary_isSet;
}

bool OAIHub::is_spoke_summary_Valid() const{
    return m_spoke_summary_isValid;
}

QString OAIHub::getState() const {
    return m_state;
}
void OAIHub::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIHub::is_state_Set() const{
    return m_state_isSet;
}

bool OAIHub::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIHub::getUniqueId() const {
    return m_unique_id;
}
void OAIHub::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIHub::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIHub::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

QString OAIHub::getUpdateTime() const {
    return m_update_time;
}
void OAIHub::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIHub::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIHub::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIHub::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_route_tables.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_routing_vpcs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spoke_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHub::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
