/**
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPscConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPscConnection::OAIPscConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPscConnection::OAIPscConnection() {
    this->initializeModel();
}

OAIPscConnection::~OAIPscConnection() {}

void OAIPscConnection::initializeModel() {

    m_consumer_address_isSet = false;
    m_consumer_address_isValid = false;

    m_consumer_forwarding_rule_isSet = false;
    m_consumer_forwarding_rule_isValid = false;

    m_consumer_target_project_isSet = false;
    m_consumer_target_project_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_error_info_isSet = false;
    m_error_info_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_gce_operation_isSet = false;
    m_gce_operation_isValid = false;

    m_psc_connection_id_isSet = false;
    m_psc_connection_id_isValid = false;

    m_selected_subnetwork_isSet = false;
    m_selected_subnetwork_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPscConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPscConnection::fromJsonObject(QJsonObject json) {

    m_consumer_address_isValid = ::OpenAPI::fromJsonValue(m_consumer_address, json[QString("consumerAddress")]);
    m_consumer_address_isSet = !json[QString("consumerAddress")].isNull() && m_consumer_address_isValid;

    m_consumer_forwarding_rule_isValid = ::OpenAPI::fromJsonValue(m_consumer_forwarding_rule, json[QString("consumerForwardingRule")]);
    m_consumer_forwarding_rule_isSet = !json[QString("consumerForwardingRule")].isNull() && m_consumer_forwarding_rule_isValid;

    m_consumer_target_project_isValid = ::OpenAPI::fromJsonValue(m_consumer_target_project, json[QString("consumerTargetProject")]);
    m_consumer_target_project_isSet = !json[QString("consumerTargetProject")].isNull() && m_consumer_target_project_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_error_info_isValid = ::OpenAPI::fromJsonValue(m_error_info, json[QString("errorInfo")]);
    m_error_info_isSet = !json[QString("errorInfo")].isNull() && m_error_info_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_gce_operation_isValid = ::OpenAPI::fromJsonValue(m_gce_operation, json[QString("gceOperation")]);
    m_gce_operation_isSet = !json[QString("gceOperation")].isNull() && m_gce_operation_isValid;

    m_psc_connection_id_isValid = ::OpenAPI::fromJsonValue(m_psc_connection_id, json[QString("pscConnectionId")]);
    m_psc_connection_id_isSet = !json[QString("pscConnectionId")].isNull() && m_psc_connection_id_isValid;

    m_selected_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_selected_subnetwork, json[QString("selectedSubnetwork")]);
    m_selected_subnetwork_isSet = !json[QString("selectedSubnetwork")].isNull() && m_selected_subnetwork_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPscConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPscConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_address_isSet) {
        obj.insert(QString("consumerAddress"), ::OpenAPI::toJsonValue(m_consumer_address));
    }
    if (m_consumer_forwarding_rule_isSet) {
        obj.insert(QString("consumerForwardingRule"), ::OpenAPI::toJsonValue(m_consumer_forwarding_rule));
    }
    if (m_consumer_target_project_isSet) {
        obj.insert(QString("consumerTargetProject"), ::OpenAPI::toJsonValue(m_consumer_target_project));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_error_info.isSet()) {
        obj.insert(QString("errorInfo"), ::OpenAPI::toJsonValue(m_error_info));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_gce_operation_isSet) {
        obj.insert(QString("gceOperation"), ::OpenAPI::toJsonValue(m_gce_operation));
    }
    if (m_psc_connection_id_isSet) {
        obj.insert(QString("pscConnectionId"), ::OpenAPI::toJsonValue(m_psc_connection_id));
    }
    if (m_selected_subnetwork_isSet) {
        obj.insert(QString("selectedSubnetwork"), ::OpenAPI::toJsonValue(m_selected_subnetwork));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIPscConnection::getConsumerAddress() const {
    return m_consumer_address;
}
void OAIPscConnection::setConsumerAddress(const QString &consumer_address) {
    m_consumer_address = consumer_address;
    m_consumer_address_isSet = true;
}

bool OAIPscConnection::is_consumer_address_Set() const{
    return m_consumer_address_isSet;
}

bool OAIPscConnection::is_consumer_address_Valid() const{
    return m_consumer_address_isValid;
}

QString OAIPscConnection::getConsumerForwardingRule() const {
    return m_consumer_forwarding_rule;
}
void OAIPscConnection::setConsumerForwardingRule(const QString &consumer_forwarding_rule) {
    m_consumer_forwarding_rule = consumer_forwarding_rule;
    m_consumer_forwarding_rule_isSet = true;
}

bool OAIPscConnection::is_consumer_forwarding_rule_Set() const{
    return m_consumer_forwarding_rule_isSet;
}

bool OAIPscConnection::is_consumer_forwarding_rule_Valid() const{
    return m_consumer_forwarding_rule_isValid;
}

QString OAIPscConnection::getConsumerTargetProject() const {
    return m_consumer_target_project;
}
void OAIPscConnection::setConsumerTargetProject(const QString &consumer_target_project) {
    m_consumer_target_project = consumer_target_project;
    m_consumer_target_project_isSet = true;
}

bool OAIPscConnection::is_consumer_target_project_Set() const{
    return m_consumer_target_project_isSet;
}

bool OAIPscConnection::is_consumer_target_project_Valid() const{
    return m_consumer_target_project_isValid;
}

OAIGoogleRpcStatus OAIPscConnection::getError() const {
    return m_error;
}
void OAIPscConnection::setError(const OAIGoogleRpcStatus &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIPscConnection::is_error_Set() const{
    return m_error_isSet;
}

bool OAIPscConnection::is_error_Valid() const{
    return m_error_isValid;
}

OAIGoogleRpcErrorInfo OAIPscConnection::getErrorInfo() const {
    return m_error_info;
}
void OAIPscConnection::setErrorInfo(const OAIGoogleRpcErrorInfo &error_info) {
    m_error_info = error_info;
    m_error_info_isSet = true;
}

bool OAIPscConnection::is_error_info_Set() const{
    return m_error_info_isSet;
}

bool OAIPscConnection::is_error_info_Valid() const{
    return m_error_info_isValid;
}

QString OAIPscConnection::getErrorType() const {
    return m_error_type;
}
void OAIPscConnection::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIPscConnection::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIPscConnection::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIPscConnection::getGceOperation() const {
    return m_gce_operation;
}
void OAIPscConnection::setGceOperation(const QString &gce_operation) {
    m_gce_operation = gce_operation;
    m_gce_operation_isSet = true;
}

bool OAIPscConnection::is_gce_operation_Set() const{
    return m_gce_operation_isSet;
}

bool OAIPscConnection::is_gce_operation_Valid() const{
    return m_gce_operation_isValid;
}

QString OAIPscConnection::getPscConnectionId() const {
    return m_psc_connection_id;
}
void OAIPscConnection::setPscConnectionId(const QString &psc_connection_id) {
    m_psc_connection_id = psc_connection_id;
    m_psc_connection_id_isSet = true;
}

bool OAIPscConnection::is_psc_connection_id_Set() const{
    return m_psc_connection_id_isSet;
}

bool OAIPscConnection::is_psc_connection_id_Valid() const{
    return m_psc_connection_id_isValid;
}

QString OAIPscConnection::getSelectedSubnetwork() const {
    return m_selected_subnetwork;
}
void OAIPscConnection::setSelectedSubnetwork(const QString &selected_subnetwork) {
    m_selected_subnetwork = selected_subnetwork;
    m_selected_subnetwork_isSet = true;
}

bool OAIPscConnection::is_selected_subnetwork_Set() const{
    return m_selected_subnetwork_isSet;
}

bool OAIPscConnection::is_selected_subnetwork_Valid() const{
    return m_selected_subnetwork_isValid;
}

QString OAIPscConnection::getState() const {
    return m_state;
}
void OAIPscConnection::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPscConnection::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPscConnection::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPscConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_forwarding_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_target_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gce_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_psc_connection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPscConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
