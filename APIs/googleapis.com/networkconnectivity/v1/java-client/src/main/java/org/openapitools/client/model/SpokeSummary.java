/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SpokeStateCount;
import org.openapitools.client.model.SpokeStateReasonCount;
import org.openapitools.client.model.SpokeTypeCount;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summarizes information about the spokes associated with a hub. The summary includes a count of spokes according to type and according to state. If any spokes are inactive, the summary also lists the reasons they are inactive, including a count for each reason.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpokeSummary {
  public static final String SERIALIZED_NAME_SPOKE_STATE_COUNTS = "spokeStateCounts";
  @SerializedName(SERIALIZED_NAME_SPOKE_STATE_COUNTS)
  private List<SpokeStateCount> spokeStateCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPOKE_STATE_REASON_COUNTS = "spokeStateReasonCounts";
  @SerializedName(SERIALIZED_NAME_SPOKE_STATE_REASON_COUNTS)
  private List<SpokeStateReasonCount> spokeStateReasonCounts = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPOKE_TYPE_COUNTS = "spokeTypeCounts";
  @SerializedName(SERIALIZED_NAME_SPOKE_TYPE_COUNTS)
  private List<SpokeTypeCount> spokeTypeCounts = new ArrayList<>();

  public SpokeSummary() {
  }

  public SpokeSummary(
     List<SpokeStateCount> spokeStateCounts, 
     List<SpokeStateReasonCount> spokeStateReasonCounts, 
     List<SpokeTypeCount> spokeTypeCounts
  ) {
    this();
    this.spokeStateCounts = spokeStateCounts;
    this.spokeStateReasonCounts = spokeStateReasonCounts;
    this.spokeTypeCounts = spokeTypeCounts;
  }

  /**
   * Output only. Counts the number of spokes that are in each state and associated with a given hub.
   * @return spokeStateCounts
   */
  @javax.annotation.Nullable
  public List<SpokeStateCount> getSpokeStateCounts() {
    return spokeStateCounts;
  }



  /**
   * Output only. Counts the number of spokes that are inactive for each possible reason and associated with a given hub.
   * @return spokeStateReasonCounts
   */
  @javax.annotation.Nullable
  public List<SpokeStateReasonCount> getSpokeStateReasonCounts() {
    return spokeStateReasonCounts;
  }



  /**
   * Output only. Counts the number of spokes of each type that are associated with a specific hub.
   * @return spokeTypeCounts
   */
  @javax.annotation.Nullable
  public List<SpokeTypeCount> getSpokeTypeCounts() {
    return spokeTypeCounts;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpokeSummary spokeSummary = (SpokeSummary) o;
    return Objects.equals(this.spokeStateCounts, spokeSummary.spokeStateCounts) &&
        Objects.equals(this.spokeStateReasonCounts, spokeSummary.spokeStateReasonCounts) &&
        Objects.equals(this.spokeTypeCounts, spokeSummary.spokeTypeCounts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(spokeStateCounts, spokeStateReasonCounts, spokeTypeCounts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpokeSummary {\n");
    sb.append("    spokeStateCounts: ").append(toIndentedString(spokeStateCounts)).append("\n");
    sb.append("    spokeStateReasonCounts: ").append(toIndentedString(spokeStateReasonCounts)).append("\n");
    sb.append("    spokeTypeCounts: ").append(toIndentedString(spokeTypeCounts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spokeStateCounts");
    openapiFields.add("spokeStateReasonCounts");
    openapiFields.add("spokeTypeCounts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpokeSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpokeSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpokeSummary is not found in the empty JSON string", SpokeSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpokeSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpokeSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("spokeStateCounts") != null && !jsonObj.get("spokeStateCounts").isJsonNull()) {
        JsonArray jsonArrayspokeStateCounts = jsonObj.getAsJsonArray("spokeStateCounts");
        if (jsonArrayspokeStateCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spokeStateCounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spokeStateCounts` to be an array in the JSON string but got `%s`", jsonObj.get("spokeStateCounts").toString()));
          }

          // validate the optional field `spokeStateCounts` (array)
          for (int i = 0; i < jsonArrayspokeStateCounts.size(); i++) {
            SpokeStateCount.validateJsonElement(jsonArrayspokeStateCounts.get(i));
          };
        }
      }
      if (jsonObj.get("spokeStateReasonCounts") != null && !jsonObj.get("spokeStateReasonCounts").isJsonNull()) {
        JsonArray jsonArrayspokeStateReasonCounts = jsonObj.getAsJsonArray("spokeStateReasonCounts");
        if (jsonArrayspokeStateReasonCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spokeStateReasonCounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spokeStateReasonCounts` to be an array in the JSON string but got `%s`", jsonObj.get("spokeStateReasonCounts").toString()));
          }

          // validate the optional field `spokeStateReasonCounts` (array)
          for (int i = 0; i < jsonArrayspokeStateReasonCounts.size(); i++) {
            SpokeStateReasonCount.validateJsonElement(jsonArrayspokeStateReasonCounts.get(i));
          };
        }
      }
      if (jsonObj.get("spokeTypeCounts") != null && !jsonObj.get("spokeTypeCounts").isJsonNull()) {
        JsonArray jsonArrayspokeTypeCounts = jsonObj.getAsJsonArray("spokeTypeCounts");
        if (jsonArrayspokeTypeCounts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("spokeTypeCounts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `spokeTypeCounts` to be an array in the JSON string but got `%s`", jsonObj.get("spokeTypeCounts").toString()));
          }

          // validate the optional field `spokeTypeCounts` (array)
          for (int i = 0; i < jsonArrayspokeTypeCounts.size(); i++) {
            SpokeTypeCount.validateJsonElement(jsonArrayspokeTypeCounts.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpokeSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpokeSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpokeSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpokeSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<SpokeSummary>() {
           @Override
           public void write(JsonWriter out, SpokeSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpokeSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpokeSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpokeSummary
   * @throws IOException if the JSON string is invalid with respect to SpokeSummary
   */
  public static SpokeSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpokeSummary.class);
  }

  /**
   * Convert an instance of SpokeSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

