/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PscConfig;
import org.openapitools.client.model.PscConnection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The ServiceConnectionPolicy resource. Next id: 12
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceConnectionPolicy {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ETAG = "etag";
  @SerializedName(SERIALIZED_NAME_ETAG)
  private String etag;

  /**
   * Output only. The type of underlying resources used to create the connection.
   */
  @JsonAdapter(InfrastructureEnum.Adapter.class)
  public enum InfrastructureEnum {
    INFRASTRUCTURE_UNSPECIFIED("INFRASTRUCTURE_UNSPECIFIED"),
    
    PSC("PSC");

    private String value;

    InfrastructureEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InfrastructureEnum fromValue(String value) {
      for (InfrastructureEnum b : InfrastructureEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InfrastructureEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InfrastructureEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InfrastructureEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InfrastructureEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InfrastructureEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INFRASTRUCTURE = "infrastructure";
  @SerializedName(SERIALIZED_NAME_INFRASTRUCTURE)
  private InfrastructureEnum infrastructure;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_PSC_CONFIG = "pscConfig";
  @SerializedName(SERIALIZED_NAME_PSC_CONFIG)
  private PscConfig pscConfig;

  public static final String SERIALIZED_NAME_PSC_CONNECTIONS = "pscConnections";
  @SerializedName(SERIALIZED_NAME_PSC_CONNECTIONS)
  private List<PscConnection> pscConnections = new ArrayList<>();

  public static final String SERIALIZED_NAME_SERVICE_CLASS = "serviceClass";
  @SerializedName(SERIALIZED_NAME_SERVICE_CLASS)
  private String serviceClass;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ServiceConnectionPolicy() {
  }

  public ServiceConnectionPolicy(
     String createTime, 
     InfrastructureEnum infrastructure, 
     List<PscConnection> pscConnections, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.infrastructure = infrastructure;
    this.pscConnections = pscConnections;
    this.updateTime = updateTime;
  }

  /**
   * Output only. Time when the ServiceConnectionMap was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public ServiceConnectionPolicy description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A description of this resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceConnectionPolicy etag(String etag) {
    this.etag = etag;
    return this;
  }

  /**
   * Optional. The etag is computed by the server, and may be sent on update and delete requests to ensure the client has an up-to-date value before proceeding.
   * @return etag
   */
  @javax.annotation.Nullable
  public String getEtag() {
    return etag;
  }

  public void setEtag(String etag) {
    this.etag = etag;
  }


  /**
   * Output only. The type of underlying resources used to create the connection.
   * @return infrastructure
   */
  @javax.annotation.Nullable
  public InfrastructureEnum getInfrastructure() {
    return infrastructure;
  }



  public ServiceConnectionPolicy labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public ServiceConnectionPolicy putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public ServiceConnectionPolicy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of a ServiceConnectionPolicy. Format: projects/{project}/locations/{location}/serviceConnectionPolicies/{service_connection_policy} See: https://google.aip.dev/122#fields-representing-resource-names
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceConnectionPolicy network(String network) {
    this.network = network;
    return this;
  }

  /**
   * The resource path of the consumer network. Example: - projects/{projectNumOrId}/global/networks/{resourceId}.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public ServiceConnectionPolicy pscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
    return this;
  }

  /**
   * Get pscConfig
   * @return pscConfig
   */
  @javax.annotation.Nullable
  public PscConfig getPscConfig() {
    return pscConfig;
  }

  public void setPscConfig(PscConfig pscConfig) {
    this.pscConfig = pscConfig;
  }


  /**
   * Output only. [Output only] Information about each Private Service Connect connection.
   * @return pscConnections
   */
  @javax.annotation.Nullable
  public List<PscConnection> getPscConnections() {
    return pscConnections;
  }



  public ServiceConnectionPolicy serviceClass(String serviceClass) {
    this.serviceClass = serviceClass;
    return this;
  }

  /**
   * The service class identifier for which this ServiceConnectionPolicy is for. The service class identifier is a unique, symbolic representation of a ServiceClass. It is provided by the Service Producer. Google services have a prefix of gcp. For example, gcp-cloud-sql. 3rd party services do not. For example, test-service-a3dfcx.
   * @return serviceClass
   */
  @javax.annotation.Nullable
  public String getServiceClass() {
    return serviceClass;
  }

  public void setServiceClass(String serviceClass) {
    this.serviceClass = serviceClass;
  }


  /**
   * Output only. Time when the ServiceConnectionMap was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceConnectionPolicy serviceConnectionPolicy = (ServiceConnectionPolicy) o;
    return Objects.equals(this.createTime, serviceConnectionPolicy.createTime) &&
        Objects.equals(this.description, serviceConnectionPolicy.description) &&
        Objects.equals(this.etag, serviceConnectionPolicy.etag) &&
        Objects.equals(this.infrastructure, serviceConnectionPolicy.infrastructure) &&
        Objects.equals(this.labels, serviceConnectionPolicy.labels) &&
        Objects.equals(this.name, serviceConnectionPolicy.name) &&
        Objects.equals(this.network, serviceConnectionPolicy.network) &&
        Objects.equals(this.pscConfig, serviceConnectionPolicy.pscConfig) &&
        Objects.equals(this.pscConnections, serviceConnectionPolicy.pscConnections) &&
        Objects.equals(this.serviceClass, serviceConnectionPolicy.serviceClass) &&
        Objects.equals(this.updateTime, serviceConnectionPolicy.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, etag, infrastructure, labels, name, network, pscConfig, pscConnections, serviceClass, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceConnectionPolicy {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    infrastructure: ").append(toIndentedString(infrastructure)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    pscConfig: ").append(toIndentedString(pscConfig)).append("\n");
    sb.append("    pscConnections: ").append(toIndentedString(pscConnections)).append("\n");
    sb.append("    serviceClass: ").append(toIndentedString(serviceClass)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("etag");
    openapiFields.add("infrastructure");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("pscConfig");
    openapiFields.add("pscConnections");
    openapiFields.add("serviceClass");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceConnectionPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceConnectionPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceConnectionPolicy is not found in the empty JSON string", ServiceConnectionPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceConnectionPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceConnectionPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("etag") != null && !jsonObj.get("etag").isJsonNull()) && !jsonObj.get("etag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `etag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("etag").toString()));
      }
      if ((jsonObj.get("infrastructure") != null && !jsonObj.get("infrastructure").isJsonNull()) && !jsonObj.get("infrastructure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `infrastructure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("infrastructure").toString()));
      }
      // validate the optional field `infrastructure`
      if (jsonObj.get("infrastructure") != null && !jsonObj.get("infrastructure").isJsonNull()) {
        InfrastructureEnum.validateJsonElement(jsonObj.get("infrastructure"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      // validate the optional field `pscConfig`
      if (jsonObj.get("pscConfig") != null && !jsonObj.get("pscConfig").isJsonNull()) {
        PscConfig.validateJsonElement(jsonObj.get("pscConfig"));
      }
      if (jsonObj.get("pscConnections") != null && !jsonObj.get("pscConnections").isJsonNull()) {
        JsonArray jsonArraypscConnections = jsonObj.getAsJsonArray("pscConnections");
        if (jsonArraypscConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pscConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pscConnections` to be an array in the JSON string but got `%s`", jsonObj.get("pscConnections").toString()));
          }

          // validate the optional field `pscConnections` (array)
          for (int i = 0; i < jsonArraypscConnections.size(); i++) {
            PscConnection.validateJsonElement(jsonArraypscConnections.get(i));
          };
        }
      }
      if ((jsonObj.get("serviceClass") != null && !jsonObj.get("serviceClass").isJsonNull()) && !jsonObj.get("serviceClass").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceClass` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceClass").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceConnectionPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceConnectionPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceConnectionPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceConnectionPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceConnectionPolicy>() {
           @Override
           public void write(JsonWriter out, ServiceConnectionPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceConnectionPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceConnectionPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceConnectionPolicy
   * @throws IOException if the JSON string is invalid with respect to ServiceConnectionPolicy
   */
  public static ServiceConnectionPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceConnectionPolicy.class);
  }

  /**
   * Convert an instance of ServiceConnectionPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

