/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.NextHopVpcNetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A route defines a path from VM instances within a spoke to a specific destination resource. Only VPC spokes have routes.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Route {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IP_CIDR_RANGE = "ipCidrRange";
  @SerializedName(SERIALIZED_NAME_IP_CIDR_RANGE)
  private String ipCidrRange;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_HOP_VPC_NETWORK = "nextHopVpcNetwork";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_VPC_NETWORK)
  private NextHopVpcNetwork nextHopVpcNetwork;

  public static final String SERIALIZED_NAME_SPOKE = "spoke";
  @SerializedName(SERIALIZED_NAME_SPOKE)
  private String spoke;

  /**
   * Output only. The current lifecycle state of the route.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    ACCEPTING("ACCEPTING"),
    
    REJECTING("REJECTING"),
    
    UPDATING("UPDATING"),
    
    INACTIVE("INACTIVE"),
    
    OBSOLETE("OBSOLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Output only. The route&#39;s type. Its type is determined by the properties of its IP address range.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    ROUTE_TYPE_UNSPECIFIED("ROUTE_TYPE_UNSPECIFIED"),
    
    VPC_PRIMARY_SUBNET("VPC_PRIMARY_SUBNET"),
    
    VPC_SECONDARY_SUBNET("VPC_SECONDARY_SUBNET");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  private String uid;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Route() {
  }

  public Route(
     String createTime, 
     String location, 
     StateEnum state, 
     TypeEnum type, 
     String uid, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.location = location;
    this.state = state;
    this.type = type;
    this.uid = uid;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time the route was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Route description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the route.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Route ipCidrRange(String ipCidrRange) {
    this.ipCidrRange = ipCidrRange;
    return this;
  }

  /**
   * The destination IP address range.
   * @return ipCidrRange
   */
  @javax.annotation.Nullable
  public String getIpCidrRange() {
    return ipCidrRange;
  }

  public void setIpCidrRange(String ipCidrRange) {
    this.ipCidrRange = ipCidrRange;
  }


  public Route labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Route putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. The location of the route. Uses the following form: \&quot;projects/{project}/locations/{location}\&quot; Example: projects/1234/locations/us-central1
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



  public Route name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of the route. Route names must be unique. Route names use the following form: &#x60;projects/{project_number}/locations/global/hubs/{hub}/routeTables/{route_table_id}/routes/{route_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Route nextHopVpcNetwork(NextHopVpcNetwork nextHopVpcNetwork) {
    this.nextHopVpcNetwork = nextHopVpcNetwork;
    return this;
  }

  /**
   * Get nextHopVpcNetwork
   * @return nextHopVpcNetwork
   */
  @javax.annotation.Nullable
  public NextHopVpcNetwork getNextHopVpcNetwork() {
    return nextHopVpcNetwork;
  }

  public void setNextHopVpcNetwork(NextHopVpcNetwork nextHopVpcNetwork) {
    this.nextHopVpcNetwork = nextHopVpcNetwork;
  }


  public Route spoke(String spoke) {
    this.spoke = spoke;
    return this;
  }

  /**
   * Immutable. The spoke that this route leads to. Example: projects/12345/locations/global/spokes/SPOKE
   * @return spoke
   */
  @javax.annotation.Nullable
  public String getSpoke() {
    return spoke;
  }

  public void setSpoke(String spoke) {
    this.spoke = spoke;
  }


  /**
   * Output only. The current lifecycle state of the route.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The route&#39;s type. Its type is determined by the properties of its IP address range.
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }



  /**
   * Output only. The Google-generated UUID for the route. This value is unique across all Network Connectivity Center route resources. If a route is deleted and another with the same name is created, the new route is assigned a different &#x60;uid&#x60;.
   * @return uid
   */
  @javax.annotation.Nullable
  public String getUid() {
    return uid;
  }



  /**
   * Output only. The time the route was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Route route = (Route) o;
    return Objects.equals(this.createTime, route.createTime) &&
        Objects.equals(this.description, route.description) &&
        Objects.equals(this.ipCidrRange, route.ipCidrRange) &&
        Objects.equals(this.labels, route.labels) &&
        Objects.equals(this.location, route.location) &&
        Objects.equals(this.name, route.name) &&
        Objects.equals(this.nextHopVpcNetwork, route.nextHopVpcNetwork) &&
        Objects.equals(this.spoke, route.spoke) &&
        Objects.equals(this.state, route.state) &&
        Objects.equals(this.type, route.type) &&
        Objects.equals(this.uid, route.uid) &&
        Objects.equals(this.updateTime, route.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, ipCidrRange, labels, location, name, nextHopVpcNetwork, spoke, state, type, uid, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Route {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    ipCidrRange: ").append(toIndentedString(ipCidrRange)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextHopVpcNetwork: ").append(toIndentedString(nextHopVpcNetwork)).append("\n");
    sb.append("    spoke: ").append(toIndentedString(spoke)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("ipCidrRange");
    openapiFields.add("labels");
    openapiFields.add("location");
    openapiFields.add("name");
    openapiFields.add("nextHopVpcNetwork");
    openapiFields.add("spoke");
    openapiFields.add("state");
    openapiFields.add("type");
    openapiFields.add("uid");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Route
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Route.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Route is not found in the empty JSON string", Route.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Route.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Route` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("ipCidrRange") != null && !jsonObj.get("ipCidrRange").isJsonNull()) && !jsonObj.get("ipCidrRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipCidrRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipCidrRange").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nextHopVpcNetwork`
      if (jsonObj.get("nextHopVpcNetwork") != null && !jsonObj.get("nextHopVpcNetwork").isJsonNull()) {
        NextHopVpcNetwork.validateJsonElement(jsonObj.get("nextHopVpcNetwork"));
      }
      if ((jsonObj.get("spoke") != null && !jsonObj.get("spoke").isJsonNull()) && !jsonObj.get("spoke").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spoke` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spoke").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("uid") != null && !jsonObj.get("uid").isJsonNull()) && !jsonObj.get("uid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uid").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Route.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Route' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Route> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Route.class));

       return (TypeAdapter<T>) new TypeAdapter<Route>() {
           @Override
           public void write(JsonWriter out, Route value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Route read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Route given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Route
   * @throws IOException if the JSON string is invalid with respect to Route
   */
  public static Route fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Route.class);
  }

  /**
   * Convert an instance of Route to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

