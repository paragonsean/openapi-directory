/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RouterApplianceInstance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A collection of router appliance instances. If you configure multiple router appliance instances to receive data from the same set of sites outside of Google Cloud, we recommend that you associate those instances with the same spoke.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LinkedRouterApplianceInstances {
  public static final String SERIALIZED_NAME_INSTANCES = "instances";
  @SerializedName(SERIALIZED_NAME_INSTANCES)
  private List<RouterApplianceInstance> instances = new ArrayList<>();

  public static final String SERIALIZED_NAME_SITE_TO_SITE_DATA_TRANSFER = "siteToSiteDataTransfer";
  @SerializedName(SERIALIZED_NAME_SITE_TO_SITE_DATA_TRANSFER)
  private Boolean siteToSiteDataTransfer;

  public static final String SERIALIZED_NAME_VPC_NETWORK = "vpcNetwork";
  @SerializedName(SERIALIZED_NAME_VPC_NETWORK)
  private String vpcNetwork;

  public LinkedRouterApplianceInstances() {
  }

  public LinkedRouterApplianceInstances(
     String vpcNetwork
  ) {
    this();
    this.vpcNetwork = vpcNetwork;
  }

  public LinkedRouterApplianceInstances instances(List<RouterApplianceInstance> instances) {
    this.instances = instances;
    return this;
  }

  public LinkedRouterApplianceInstances addInstancesItem(RouterApplianceInstance instancesItem) {
    if (this.instances == null) {
      this.instances = new ArrayList<>();
    }
    this.instances.add(instancesItem);
    return this;
  }

  /**
   * The list of router appliance instances.
   * @return instances
   */
  @javax.annotation.Nullable
  public List<RouterApplianceInstance> getInstances() {
    return instances;
  }

  public void setInstances(List<RouterApplianceInstance> instances) {
    this.instances = instances;
  }


  public LinkedRouterApplianceInstances siteToSiteDataTransfer(Boolean siteToSiteDataTransfer) {
    this.siteToSiteDataTransfer = siteToSiteDataTransfer;
    return this;
  }

  /**
   * A value that controls whether site-to-site data transfer is enabled for these resources. Data transfer is available only in [supported locations](https://cloud.google.com/network-connectivity/docs/network-connectivity-center/concepts/locations).
   * @return siteToSiteDataTransfer
   */
  @javax.annotation.Nullable
  public Boolean getSiteToSiteDataTransfer() {
    return siteToSiteDataTransfer;
  }

  public void setSiteToSiteDataTransfer(Boolean siteToSiteDataTransfer) {
    this.siteToSiteDataTransfer = siteToSiteDataTransfer;
  }


  /**
   * Output only. The VPC network where these router appliance instances are located.
   * @return vpcNetwork
   */
  @javax.annotation.Nullable
  public String getVpcNetwork() {
    return vpcNetwork;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LinkedRouterApplianceInstances linkedRouterApplianceInstances = (LinkedRouterApplianceInstances) o;
    return Objects.equals(this.instances, linkedRouterApplianceInstances.instances) &&
        Objects.equals(this.siteToSiteDataTransfer, linkedRouterApplianceInstances.siteToSiteDataTransfer) &&
        Objects.equals(this.vpcNetwork, linkedRouterApplianceInstances.vpcNetwork);
  }

  @Override
  public int hashCode() {
    return Objects.hash(instances, siteToSiteDataTransfer, vpcNetwork);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LinkedRouterApplianceInstances {\n");
    sb.append("    instances: ").append(toIndentedString(instances)).append("\n");
    sb.append("    siteToSiteDataTransfer: ").append(toIndentedString(siteToSiteDataTransfer)).append("\n");
    sb.append("    vpcNetwork: ").append(toIndentedString(vpcNetwork)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("instances");
    openapiFields.add("siteToSiteDataTransfer");
    openapiFields.add("vpcNetwork");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LinkedRouterApplianceInstances
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LinkedRouterApplianceInstances.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LinkedRouterApplianceInstances is not found in the empty JSON string", LinkedRouterApplianceInstances.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LinkedRouterApplianceInstances.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LinkedRouterApplianceInstances` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("instances") != null && !jsonObj.get("instances").isJsonNull()) {
        JsonArray jsonArrayinstances = jsonObj.getAsJsonArray("instances");
        if (jsonArrayinstances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instances` to be an array in the JSON string but got `%s`", jsonObj.get("instances").toString()));
          }

          // validate the optional field `instances` (array)
          for (int i = 0; i < jsonArrayinstances.size(); i++) {
            RouterApplianceInstance.validateJsonElement(jsonArrayinstances.get(i));
          };
        }
      }
      if ((jsonObj.get("vpcNetwork") != null && !jsonObj.get("vpcNetwork").isJsonNull()) && !jsonObj.get("vpcNetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vpcNetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vpcNetwork").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LinkedRouterApplianceInstances.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LinkedRouterApplianceInstances' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LinkedRouterApplianceInstances> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LinkedRouterApplianceInstances.class));

       return (TypeAdapter<T>) new TypeAdapter<LinkedRouterApplianceInstances>() {
           @Override
           public void write(JsonWriter out, LinkedRouterApplianceInstances value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LinkedRouterApplianceInstances read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LinkedRouterApplianceInstances given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LinkedRouterApplianceInstances
   * @throws IOException if the JSON string is invalid with respect to LinkedRouterApplianceInstances
   */
  public static LinkedRouterApplianceInstances fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LinkedRouterApplianceInstances.class);
  }

  /**
   * Convert an instance of LinkedRouterApplianceInstances to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

