/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.RoutingVPC;
import org.openapitools.client.model.SpokeSummary;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Network Connectivity Center hub is a global management resource to which you attach spokes. A single hub can contain spokes from multiple regions. However, if any of a hub&#39;s spokes use the site-to-site data transfer feature, the resources associated with those spokes must all be in the same VPC network. Spokes that do not use site-to-site data transfer can be associated with any VPC network in your project.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Hub {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROUTE_TABLES = "routeTables";
  @SerializedName(SERIALIZED_NAME_ROUTE_TABLES)
  private List<String> routeTables = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROUTING_VPCS = "routingVpcs";
  @SerializedName(SERIALIZED_NAME_ROUTING_VPCS)
  private List<RoutingVPC> routingVpcs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPOKE_SUMMARY = "spokeSummary";
  @SerializedName(SERIALIZED_NAME_SPOKE_SUMMARY)
  private SpokeSummary spokeSummary;

  /**
   * Output only. The current lifecycle state of this hub.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    ACCEPTING("ACCEPTING"),
    
    REJECTING("REJECTING"),
    
    UPDATING("UPDATING"),
    
    INACTIVE("INACTIVE"),
    
    OBSOLETE("OBSOLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Hub() {
  }

  public Hub(
     String createTime, 
     List<String> routeTables, 
     StateEnum state, 
     String uniqueId, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.routeTables = routeTables;
    this.state = state;
    this.uniqueId = uniqueId;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time the hub was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Hub description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the hub.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Hub labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Hub putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Hub name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of the hub. Hub names must be unique. They use the following form: &#x60;projects/{project_number}/locations/global/hubs/{hub_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The route tables that belong to this hub. They use the following form: &#x60;projects/{project_number}/locations/global/hubs/{hub_id}/routeTables/{route_table_id}&#x60; This field is read-only. Network Connectivity Center automatically populates it based on the route tables nested under the hub.
   * @return routeTables
   */
  @javax.annotation.Nullable
  public List<String> getRouteTables() {
    return routeTables;
  }



  public Hub routingVpcs(List<RoutingVPC> routingVpcs) {
    this.routingVpcs = routingVpcs;
    return this;
  }

  public Hub addRoutingVpcsItem(RoutingVPC routingVpcsItem) {
    if (this.routingVpcs == null) {
      this.routingVpcs = new ArrayList<>();
    }
    this.routingVpcs.add(routingVpcsItem);
    return this;
  }

  /**
   * The VPC networks associated with this hub&#39;s spokes. This field is read-only. Network Connectivity Center automatically populates it based on the set of spokes attached to the hub.
   * @return routingVpcs
   */
  @javax.annotation.Nullable
  public List<RoutingVPC> getRoutingVpcs() {
    return routingVpcs;
  }

  public void setRoutingVpcs(List<RoutingVPC> routingVpcs) {
    this.routingVpcs = routingVpcs;
  }


  public Hub spokeSummary(SpokeSummary spokeSummary) {
    this.spokeSummary = spokeSummary;
    return this;
  }

  /**
   * Get spokeSummary
   * @return spokeSummary
   */
  @javax.annotation.Nullable
  public SpokeSummary getSpokeSummary() {
    return spokeSummary;
  }

  public void setSpokeSummary(SpokeSummary spokeSummary) {
    this.spokeSummary = spokeSummary;
  }


  /**
   * Output only. The current lifecycle state of this hub.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The Google-generated UUID for the hub. This value is unique across all hub resources. If a hub is deleted and another with the same name is created, the new hub is assigned a different unique_id.
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }



  /**
   * Output only. The time the hub was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Hub hub = (Hub) o;
    return Objects.equals(this.createTime, hub.createTime) &&
        Objects.equals(this.description, hub.description) &&
        Objects.equals(this.labels, hub.labels) &&
        Objects.equals(this.name, hub.name) &&
        Objects.equals(this.routeTables, hub.routeTables) &&
        Objects.equals(this.routingVpcs, hub.routingVpcs) &&
        Objects.equals(this.spokeSummary, hub.spokeSummary) &&
        Objects.equals(this.state, hub.state) &&
        Objects.equals(this.uniqueId, hub.uniqueId) &&
        Objects.equals(this.updateTime, hub.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, labels, name, routeTables, routingVpcs, spokeSummary, state, uniqueId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Hub {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    routeTables: ").append(toIndentedString(routeTables)).append("\n");
    sb.append("    routingVpcs: ").append(toIndentedString(routingVpcs)).append("\n");
    sb.append("    spokeSummary: ").append(toIndentedString(spokeSummary)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("routeTables");
    openapiFields.add("routingVpcs");
    openapiFields.add("spokeSummary");
    openapiFields.add("state");
    openapiFields.add("uniqueId");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Hub
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Hub.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Hub is not found in the empty JSON string", Hub.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Hub.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Hub` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("routeTables") != null && !jsonObj.get("routeTables").isJsonNull() && !jsonObj.get("routeTables").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `routeTables` to be an array in the JSON string but got `%s`", jsonObj.get("routeTables").toString()));
      }
      if (jsonObj.get("routingVpcs") != null && !jsonObj.get("routingVpcs").isJsonNull()) {
        JsonArray jsonArrayroutingVpcs = jsonObj.getAsJsonArray("routingVpcs");
        if (jsonArrayroutingVpcs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("routingVpcs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `routingVpcs` to be an array in the JSON string but got `%s`", jsonObj.get("routingVpcs").toString()));
          }

          // validate the optional field `routingVpcs` (array)
          for (int i = 0; i < jsonArrayroutingVpcs.size(); i++) {
            RoutingVPC.validateJsonElement(jsonArrayroutingVpcs.get(i));
          };
        }
      }
      // validate the optional field `spokeSummary`
      if (jsonObj.get("spokeSummary") != null && !jsonObj.get("spokeSummary").isJsonNull()) {
        SpokeSummary.validateJsonElement(jsonObj.get("spokeSummary"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Hub.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Hub' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Hub> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Hub.class));

       return (TypeAdapter<T>) new TypeAdapter<Hub>() {
           @Override
           public void write(JsonWriter out, Hub value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Hub read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Hub given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Hub
   * @throws IOException if the JSON string is invalid with respect to Hub
   */
  public static Hub fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Hub.class);
  }

  /**
   * Convert an instance of Hub to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

