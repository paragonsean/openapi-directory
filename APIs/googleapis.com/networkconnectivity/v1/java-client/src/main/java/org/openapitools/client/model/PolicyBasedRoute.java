/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Filter;
import org.openapitools.client.model.InterconnectAttachment;
import org.openapitools.client.model.VirtualMachine;
import org.openapitools.client.model.Warnings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Policy-based routes route L4 network traffic based on not just destination IP address, but also source IP address, protocol, and more. If a policy-based route conflicts with other types of routes, the policy-based route always take precedence.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyBasedRoute {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private Filter filter;

  public static final String SERIALIZED_NAME_INTERCONNECT_ATTACHMENT = "interconnectAttachment";
  @SerializedName(SERIALIZED_NAME_INTERCONNECT_ATTACHMENT)
  private InterconnectAttachment interconnectAttachment;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private String network;

  public static final String SERIALIZED_NAME_NEXT_HOP_ILB_IP = "nextHopIlbIp";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_ILB_IP)
  private String nextHopIlbIp;

  /**
   * Optional. Other routes that will be referenced to determine the next hop of the packet.
   */
  @JsonAdapter(NextHopOtherRoutesEnum.Adapter.class)
  public enum NextHopOtherRoutesEnum {
    OTHER_ROUTES_UNSPECIFIED("OTHER_ROUTES_UNSPECIFIED"),
    
    DEFAULT_ROUTING("DEFAULT_ROUTING");

    private String value;

    NextHopOtherRoutesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NextHopOtherRoutesEnum fromValue(String value) {
      for (NextHopOtherRoutesEnum b : NextHopOtherRoutesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NextHopOtherRoutesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NextHopOtherRoutesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NextHopOtherRoutesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NextHopOtherRoutesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NextHopOtherRoutesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NEXT_HOP_OTHER_ROUTES = "nextHopOtherRoutes";
  @SerializedName(SERIALIZED_NAME_NEXT_HOP_OTHER_ROUTES)
  private NextHopOtherRoutesEnum nextHopOtherRoutes;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private Integer priority;

  public static final String SERIALIZED_NAME_SELF_LINK = "selfLink";
  @SerializedName(SERIALIZED_NAME_SELF_LINK)
  private String selfLink;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_VIRTUAL_MACHINE = "virtualMachine";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_MACHINE)
  private VirtualMachine virtualMachine;

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  private List<Warnings> warnings = new ArrayList<>();

  public PolicyBasedRoute() {
  }

  public PolicyBasedRoute(
     String createTime, 
     String kind, 
     String selfLink, 
     String updateTime, 
     List<Warnings> warnings
  ) {
    this();
    this.createTime = createTime;
    this.kind = kind;
    this.selfLink = selfLink;
    this.updateTime = updateTime;
    this.warnings = warnings;
  }

  /**
   * Output only. Time when the policy-based route was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public PolicyBasedRoute description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional. An optional description of this resource. Provide this field when you create the resource.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public PolicyBasedRoute filter(Filter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public Filter getFilter() {
    return filter;
  }

  public void setFilter(Filter filter) {
    this.filter = filter;
  }


  public PolicyBasedRoute interconnectAttachment(InterconnectAttachment interconnectAttachment) {
    this.interconnectAttachment = interconnectAttachment;
    return this;
  }

  /**
   * Get interconnectAttachment
   * @return interconnectAttachment
   */
  @javax.annotation.Nullable
  public InterconnectAttachment getInterconnectAttachment() {
    return interconnectAttachment;
  }

  public void setInterconnectAttachment(InterconnectAttachment interconnectAttachment) {
    this.interconnectAttachment = interconnectAttachment;
  }


  /**
   * Output only. Type of this resource. Always networkconnectivity#policyBasedRoute for policy-based Route resources.
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }



  public PolicyBasedRoute labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public PolicyBasedRoute putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * User-defined labels.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public PolicyBasedRoute name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. A unique name of the resource in the form of &#x60;projects/{project_number}/locations/global/PolicyBasedRoutes/{policy_based_route_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public PolicyBasedRoute network(String network) {
    this.network = network;
    return this;
  }

  /**
   * Required. Fully-qualified URL of the network that this route applies to, for example: projects/my-project/global/networks/my-network.
   * @return network
   */
  @javax.annotation.Nullable
  public String getNetwork() {
    return network;
  }

  public void setNetwork(String network) {
    this.network = network;
  }


  public PolicyBasedRoute nextHopIlbIp(String nextHopIlbIp) {
    this.nextHopIlbIp = nextHopIlbIp;
    return this;
  }

  /**
   * Optional. The IP address of a global-access-enabled L4 ILB that is the next hop for matching packets. For this version, only nextHopIlbIp is supported.
   * @return nextHopIlbIp
   */
  @javax.annotation.Nullable
  public String getNextHopIlbIp() {
    return nextHopIlbIp;
  }

  public void setNextHopIlbIp(String nextHopIlbIp) {
    this.nextHopIlbIp = nextHopIlbIp;
  }


  public PolicyBasedRoute nextHopOtherRoutes(NextHopOtherRoutesEnum nextHopOtherRoutes) {
    this.nextHopOtherRoutes = nextHopOtherRoutes;
    return this;
  }

  /**
   * Optional. Other routes that will be referenced to determine the next hop of the packet.
   * @return nextHopOtherRoutes
   */
  @javax.annotation.Nullable
  public NextHopOtherRoutesEnum getNextHopOtherRoutes() {
    return nextHopOtherRoutes;
  }

  public void setNextHopOtherRoutes(NextHopOtherRoutesEnum nextHopOtherRoutes) {
    this.nextHopOtherRoutes = nextHopOtherRoutes;
  }


  public PolicyBasedRoute priority(Integer priority) {
    this.priority = priority;
    return this;
  }

  /**
   * Optional. The priority of this policy-based route. Priority is used to break ties in cases where there are more than one matching policy-based routes found. In cases where multiple policy-based routes are matched, the one with the lowest-numbered priority value wins. The default value is 1000. The priority value must be from 1 to 65535, inclusive.
   * @return priority
   */
  @javax.annotation.Nullable
  public Integer getPriority() {
    return priority;
  }

  public void setPriority(Integer priority) {
    this.priority = priority;
  }


  /**
   * Output only. Server-defined fully-qualified URL for this resource.
   * @return selfLink
   */
  @javax.annotation.Nullable
  public String getSelfLink() {
    return selfLink;
  }



  /**
   * Output only. Time when the policy-based route was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }



  public PolicyBasedRoute virtualMachine(VirtualMachine virtualMachine) {
    this.virtualMachine = virtualMachine;
    return this;
  }

  /**
   * Get virtualMachine
   * @return virtualMachine
   */
  @javax.annotation.Nullable
  public VirtualMachine getVirtualMachine() {
    return virtualMachine;
  }

  public void setVirtualMachine(VirtualMachine virtualMachine) {
    this.virtualMachine = virtualMachine;
  }


  /**
   * Output only. If potential misconfigurations are detected for this route, this field will be populated with warning messages.
   * @return warnings
   */
  @javax.annotation.Nullable
  public List<Warnings> getWarnings() {
    return warnings;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyBasedRoute policyBasedRoute = (PolicyBasedRoute) o;
    return Objects.equals(this.createTime, policyBasedRoute.createTime) &&
        Objects.equals(this.description, policyBasedRoute.description) &&
        Objects.equals(this.filter, policyBasedRoute.filter) &&
        Objects.equals(this.interconnectAttachment, policyBasedRoute.interconnectAttachment) &&
        Objects.equals(this.kind, policyBasedRoute.kind) &&
        Objects.equals(this.labels, policyBasedRoute.labels) &&
        Objects.equals(this.name, policyBasedRoute.name) &&
        Objects.equals(this.network, policyBasedRoute.network) &&
        Objects.equals(this.nextHopIlbIp, policyBasedRoute.nextHopIlbIp) &&
        Objects.equals(this.nextHopOtherRoutes, policyBasedRoute.nextHopOtherRoutes) &&
        Objects.equals(this.priority, policyBasedRoute.priority) &&
        Objects.equals(this.selfLink, policyBasedRoute.selfLink) &&
        Objects.equals(this.updateTime, policyBasedRoute.updateTime) &&
        Objects.equals(this.virtualMachine, policyBasedRoute.virtualMachine) &&
        Objects.equals(this.warnings, policyBasedRoute.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, filter, interconnectAttachment, kind, labels, name, network, nextHopIlbIp, nextHopOtherRoutes, priority, selfLink, updateTime, virtualMachine, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyBasedRoute {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    interconnectAttachment: ").append(toIndentedString(interconnectAttachment)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    nextHopIlbIp: ").append(toIndentedString(nextHopIlbIp)).append("\n");
    sb.append("    nextHopOtherRoutes: ").append(toIndentedString(nextHopOtherRoutes)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    selfLink: ").append(toIndentedString(selfLink)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    virtualMachine: ").append(toIndentedString(virtualMachine)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("filter");
    openapiFields.add("interconnectAttachment");
    openapiFields.add("kind");
    openapiFields.add("labels");
    openapiFields.add("name");
    openapiFields.add("network");
    openapiFields.add("nextHopIlbIp");
    openapiFields.add("nextHopOtherRoutes");
    openapiFields.add("priority");
    openapiFields.add("selfLink");
    openapiFields.add("updateTime");
    openapiFields.add("virtualMachine");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyBasedRoute
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyBasedRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyBasedRoute is not found in the empty JSON string", PolicyBasedRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyBasedRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyBasedRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `filter`
      if (jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) {
        Filter.validateJsonElement(jsonObj.get("filter"));
      }
      // validate the optional field `interconnectAttachment`
      if (jsonObj.get("interconnectAttachment") != null && !jsonObj.get("interconnectAttachment").isJsonNull()) {
        InterconnectAttachment.validateJsonElement(jsonObj.get("interconnectAttachment"));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("network") != null && !jsonObj.get("network").isJsonNull()) && !jsonObj.get("network").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `network` to be a primitive type in the JSON string but got `%s`", jsonObj.get("network").toString()));
      }
      if ((jsonObj.get("nextHopIlbIp") != null && !jsonObj.get("nextHopIlbIp").isJsonNull()) && !jsonObj.get("nextHopIlbIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopIlbIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopIlbIp").toString()));
      }
      if ((jsonObj.get("nextHopOtherRoutes") != null && !jsonObj.get("nextHopOtherRoutes").isJsonNull()) && !jsonObj.get("nextHopOtherRoutes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextHopOtherRoutes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextHopOtherRoutes").toString()));
      }
      // validate the optional field `nextHopOtherRoutes`
      if (jsonObj.get("nextHopOtherRoutes") != null && !jsonObj.get("nextHopOtherRoutes").isJsonNull()) {
        NextHopOtherRoutesEnum.validateJsonElement(jsonObj.get("nextHopOtherRoutes"));
      }
      if ((jsonObj.get("selfLink") != null && !jsonObj.get("selfLink").isJsonNull()) && !jsonObj.get("selfLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selfLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selfLink").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      // validate the optional field `virtualMachine`
      if (jsonObj.get("virtualMachine") != null && !jsonObj.get("virtualMachine").isJsonNull()) {
        VirtualMachine.validateJsonElement(jsonObj.get("virtualMachine"));
      }
      if (jsonObj.get("warnings") != null && !jsonObj.get("warnings").isJsonNull()) {
        JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
        if (jsonArraywarnings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warnings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
          }

          // validate the optional field `warnings` (array)
          for (int i = 0; i < jsonArraywarnings.size(); i++) {
            Warnings.validateJsonElement(jsonArraywarnings.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyBasedRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyBasedRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyBasedRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyBasedRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyBasedRoute>() {
           @Override
           public void write(JsonWriter out, PolicyBasedRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyBasedRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyBasedRoute given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyBasedRoute
   * @throws IOException if the JSON string is invalid with respect to PolicyBasedRoute
   */
  public static PolicyBasedRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyBasedRoute.class);
  }

  /**
   * Convert an instance of PolicyBasedRoute to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

