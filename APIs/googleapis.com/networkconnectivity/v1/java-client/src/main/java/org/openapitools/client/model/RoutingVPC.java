/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoutingVPC contains information about the VPC networks associated with the spokes of a Network Connectivity Center hub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RoutingVPC {
  public static final String SERIALIZED_NAME_REQUIRED_FOR_NEW_SITE_TO_SITE_DATA_TRANSFER_SPOKES = "requiredForNewSiteToSiteDataTransferSpokes";
  @SerializedName(SERIALIZED_NAME_REQUIRED_FOR_NEW_SITE_TO_SITE_DATA_TRANSFER_SPOKES)
  private Boolean requiredForNewSiteToSiteDataTransferSpokes;

  public static final String SERIALIZED_NAME_URI = "uri";
  @SerializedName(SERIALIZED_NAME_URI)
  private String uri;

  public RoutingVPC() {
  }

  public RoutingVPC(
     Boolean requiredForNewSiteToSiteDataTransferSpokes
  ) {
    this();
    this.requiredForNewSiteToSiteDataTransferSpokes = requiredForNewSiteToSiteDataTransferSpokes;
  }

  /**
   * Output only. If true, indicates that this VPC network is currently associated with spokes that use the data transfer feature (spokes where the site_to_site_data_transfer field is set to true). If you create new spokes that use data transfer, they must be associated with this VPC network. At most, one VPC network will have this field set to true.
   * @return requiredForNewSiteToSiteDataTransferSpokes
   */
  @javax.annotation.Nullable
  public Boolean getRequiredForNewSiteToSiteDataTransferSpokes() {
    return requiredForNewSiteToSiteDataTransferSpokes;
  }



  public RoutingVPC uri(String uri) {
    this.uri = uri;
    return this;
  }

  /**
   * The URI of the VPC network.
   * @return uri
   */
  @javax.annotation.Nullable
  public String getUri() {
    return uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingVPC routingVPC = (RoutingVPC) o;
    return Objects.equals(this.requiredForNewSiteToSiteDataTransferSpokes, routingVPC.requiredForNewSiteToSiteDataTransferSpokes) &&
        Objects.equals(this.uri, routingVPC.uri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(requiredForNewSiteToSiteDataTransferSpokes, uri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingVPC {\n");
    sb.append("    requiredForNewSiteToSiteDataTransferSpokes: ").append(toIndentedString(requiredForNewSiteToSiteDataTransferSpokes)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("requiredForNewSiteToSiteDataTransferSpokes");
    openapiFields.add("uri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutingVPC
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutingVPC.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutingVPC is not found in the empty JSON string", RoutingVPC.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutingVPC.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutingVPC` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("uri") != null && !jsonObj.get("uri").isJsonNull()) && !jsonObj.get("uri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutingVPC.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutingVPC' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutingVPC> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutingVPC.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutingVPC>() {
           @Override
           public void write(JsonWriter out, RoutingVPC value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutingVPC read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutingVPC given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutingVPC
   * @throws IOException if the JSON string is invalid with respect to RoutingVPC
   */
  public static RoutingVPC fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutingVPC.class);
  }

  /**
   * Convert an instance of RoutingVPC to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

