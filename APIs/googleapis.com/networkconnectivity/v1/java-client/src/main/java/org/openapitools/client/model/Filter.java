/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filter matches L4 traffic.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Filter {
  public static final String SERIALIZED_NAME_DEST_RANGE = "destRange";
  @SerializedName(SERIALIZED_NAME_DEST_RANGE)
  private String destRange;

  public static final String SERIALIZED_NAME_IP_PROTOCOL = "ipProtocol";
  @SerializedName(SERIALIZED_NAME_IP_PROTOCOL)
  private String ipProtocol;

  /**
   * Required. Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
   */
  @JsonAdapter(ProtocolVersionEnum.Adapter.class)
  public enum ProtocolVersionEnum {
    PROTOCOL_VERSION_UNSPECIFIED("PROTOCOL_VERSION_UNSPECIFIED"),
    
    IPV4("IPV4");

    private String value;

    ProtocolVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProtocolVersionEnum fromValue(String value) {
      for (ProtocolVersionEnum b : ProtocolVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProtocolVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProtocolVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProtocolVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProtocolVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProtocolVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROTOCOL_VERSION = "protocolVersion";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_VERSION)
  private ProtocolVersionEnum protocolVersion;

  public static final String SERIALIZED_NAME_SRC_RANGE = "srcRange";
  @SerializedName(SERIALIZED_NAME_SRC_RANGE)
  private String srcRange;

  public Filter() {
  }

  public Filter destRange(String destRange) {
    this.destRange = destRange;
    return this;
  }

  /**
   * Optional. The destination IP range of outgoing packets that this policy-based route applies to. Default is \&quot;0.0.0.0/0\&quot; if protocol version is IPv4.
   * @return destRange
   */
  @javax.annotation.Nullable
  public String getDestRange() {
    return destRange;
  }

  public void setDestRange(String destRange) {
    this.destRange = destRange;
  }


  public Filter ipProtocol(String ipProtocol) {
    this.ipProtocol = ipProtocol;
    return this;
  }

  /**
   * Optional. The IP protocol that this policy-based route applies to. Valid values are &#39;TCP&#39;, &#39;UDP&#39;, and &#39;ALL&#39;. Default is &#39;ALL&#39;.
   * @return ipProtocol
   */
  @javax.annotation.Nullable
  public String getIpProtocol() {
    return ipProtocol;
  }

  public void setIpProtocol(String ipProtocol) {
    this.ipProtocol = ipProtocol;
  }


  public Filter protocolVersion(ProtocolVersionEnum protocolVersion) {
    this.protocolVersion = protocolVersion;
    return this;
  }

  /**
   * Required. Internet protocol versions this policy-based route applies to. For this version, only IPV4 is supported.
   * @return protocolVersion
   */
  @javax.annotation.Nullable
  public ProtocolVersionEnum getProtocolVersion() {
    return protocolVersion;
  }

  public void setProtocolVersion(ProtocolVersionEnum protocolVersion) {
    this.protocolVersion = protocolVersion;
  }


  public Filter srcRange(String srcRange) {
    this.srcRange = srcRange;
    return this;
  }

  /**
   * Optional. The source IP range of outgoing packets that this policy-based route applies to. Default is \&quot;0.0.0.0/0\&quot; if protocol version is IPv4.
   * @return srcRange
   */
  @javax.annotation.Nullable
  public String getSrcRange() {
    return srcRange;
  }

  public void setSrcRange(String srcRange) {
    this.srcRange = srcRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Filter filter = (Filter) o;
    return Objects.equals(this.destRange, filter.destRange) &&
        Objects.equals(this.ipProtocol, filter.ipProtocol) &&
        Objects.equals(this.protocolVersion, filter.protocolVersion) &&
        Objects.equals(this.srcRange, filter.srcRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destRange, ipProtocol, protocolVersion, srcRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Filter {\n");
    sb.append("    destRange: ").append(toIndentedString(destRange)).append("\n");
    sb.append("    ipProtocol: ").append(toIndentedString(ipProtocol)).append("\n");
    sb.append("    protocolVersion: ").append(toIndentedString(protocolVersion)).append("\n");
    sb.append("    srcRange: ").append(toIndentedString(srcRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destRange");
    openapiFields.add("ipProtocol");
    openapiFields.add("protocolVersion");
    openapiFields.add("srcRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Filter
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Filter.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Filter is not found in the empty JSON string", Filter.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Filter.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Filter` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("destRange") != null && !jsonObj.get("destRange").isJsonNull()) && !jsonObj.get("destRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `destRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("destRange").toString()));
      }
      if ((jsonObj.get("ipProtocol") != null && !jsonObj.get("ipProtocol").isJsonNull()) && !jsonObj.get("ipProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipProtocol").toString()));
      }
      if ((jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) && !jsonObj.get("protocolVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `protocolVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("protocolVersion").toString()));
      }
      // validate the optional field `protocolVersion`
      if (jsonObj.get("protocolVersion") != null && !jsonObj.get("protocolVersion").isJsonNull()) {
        ProtocolVersionEnum.validateJsonElement(jsonObj.get("protocolVersion"));
      }
      if ((jsonObj.get("srcRange") != null && !jsonObj.get("srcRange").isJsonNull()) && !jsonObj.get("srcRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `srcRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("srcRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Filter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Filter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Filter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Filter.class));

       return (TypeAdapter<T>) new TypeAdapter<Filter>() {
           @Override
           public void write(JsonWriter out, Filter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Filter read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Filter given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Filter
   * @throws IOException if the JSON string is invalid with respect to Filter
   */
  public static Filter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Filter.class);
  }

  /**
   * Convert an instance of Filter to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

