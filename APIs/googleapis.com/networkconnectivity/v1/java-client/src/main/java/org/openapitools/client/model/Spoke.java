/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.LinkedInterconnectAttachments;
import org.openapitools.client.model.LinkedRouterApplianceInstances;
import org.openapitools.client.model.LinkedVpcNetwork;
import org.openapitools.client.model.LinkedVpnTunnels;
import org.openapitools.client.model.StateReason;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Network Connectivity Center spoke represents one or more network connectivity resources. When you create a spoke, you associate it with a hub. You must also identify a value for exactly one of the following fields: * linked_vpn_tunnels * linked_interconnect_attachments * linked_router_appliance_instances * linked_vpc_network
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Spoke {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_HUB = "hub";
  @SerializedName(SERIALIZED_NAME_HUB)
  private String hub;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LINKED_INTERCONNECT_ATTACHMENTS = "linkedInterconnectAttachments";
  @SerializedName(SERIALIZED_NAME_LINKED_INTERCONNECT_ATTACHMENTS)
  private LinkedInterconnectAttachments linkedInterconnectAttachments;

  public static final String SERIALIZED_NAME_LINKED_ROUTER_APPLIANCE_INSTANCES = "linkedRouterApplianceInstances";
  @SerializedName(SERIALIZED_NAME_LINKED_ROUTER_APPLIANCE_INSTANCES)
  private LinkedRouterApplianceInstances linkedRouterApplianceInstances;

  public static final String SERIALIZED_NAME_LINKED_VPC_NETWORK = "linkedVpcNetwork";
  @SerializedName(SERIALIZED_NAME_LINKED_VPC_NETWORK)
  private LinkedVpcNetwork linkedVpcNetwork;

  public static final String SERIALIZED_NAME_LINKED_VPN_TUNNELS = "linkedVpnTunnels";
  @SerializedName(SERIALIZED_NAME_LINKED_VPN_TUNNELS)
  private LinkedVpnTunnels linkedVpnTunnels;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_REASONS = "reasons";
  @SerializedName(SERIALIZED_NAME_REASONS)
  private List<StateReason> reasons = new ArrayList<>();

  /**
   * Output only. The type of resource associated with the spoke.
   */
  @JsonAdapter(SpokeTypeEnum.Adapter.class)
  public enum SpokeTypeEnum {
    SPOKE_TYPE_UNSPECIFIED("SPOKE_TYPE_UNSPECIFIED"),
    
    VPN_TUNNEL("VPN_TUNNEL"),
    
    INTERCONNECT_ATTACHMENT("INTERCONNECT_ATTACHMENT"),
    
    ROUTER_APPLIANCE("ROUTER_APPLIANCE"),
    
    VPC_NETWORK("VPC_NETWORK");

    private String value;

    SpokeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpokeTypeEnum fromValue(String value) {
      for (SpokeTypeEnum b : SpokeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpokeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpokeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpokeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpokeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpokeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPOKE_TYPE = "spokeType";
  @SerializedName(SERIALIZED_NAME_SPOKE_TYPE)
  private SpokeTypeEnum spokeType;

  /**
   * Output only. The current lifecycle state of this spoke.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CREATING("CREATING"),
    
    ACTIVE("ACTIVE"),
    
    DELETING("DELETING"),
    
    ACCEPTING("ACCEPTING"),
    
    REJECTING("REJECTING"),
    
    UPDATING("UPDATING"),
    
    INACTIVE("INACTIVE"),
    
    OBSOLETE("OBSOLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Spoke() {
  }

  public Spoke(
     String createTime, 
     List<StateReason> reasons, 
     SpokeTypeEnum spokeType, 
     StateEnum state, 
     String uniqueId, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.reasons = reasons;
    this.spokeType = spokeType;
    this.state = state;
    this.uniqueId = uniqueId;
    this.updateTime = updateTime;
  }

  /**
   * Output only. The time the spoke was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  public Spoke description(String description) {
    this.description = description;
    return this;
  }

  /**
   * An optional description of the spoke.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Spoke group(String group) {
    this.group = group;
    return this;
  }

  /**
   * Optional. The name of the group that this spoke is associated with.
   * @return group
   */
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public Spoke hub(String hub) {
    this.hub = hub;
    return this;
  }

  /**
   * Immutable. The name of the hub that this spoke is attached to.
   * @return hub
   */
  @javax.annotation.Nullable
  public String getHub() {
    return hub;
  }

  public void setHub(String hub) {
    this.hub = hub;
  }


  public Spoke labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Spoke putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional labels in key-value pair format. For more information about labels, see [Requirements for labels](https://cloud.google.com/resource-manager/docs/creating-managing-labels#requirements).
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  public Spoke linkedInterconnectAttachments(LinkedInterconnectAttachments linkedInterconnectAttachments) {
    this.linkedInterconnectAttachments = linkedInterconnectAttachments;
    return this;
  }

  /**
   * Get linkedInterconnectAttachments
   * @return linkedInterconnectAttachments
   */
  @javax.annotation.Nullable
  public LinkedInterconnectAttachments getLinkedInterconnectAttachments() {
    return linkedInterconnectAttachments;
  }

  public void setLinkedInterconnectAttachments(LinkedInterconnectAttachments linkedInterconnectAttachments) {
    this.linkedInterconnectAttachments = linkedInterconnectAttachments;
  }


  public Spoke linkedRouterApplianceInstances(LinkedRouterApplianceInstances linkedRouterApplianceInstances) {
    this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
    return this;
  }

  /**
   * Get linkedRouterApplianceInstances
   * @return linkedRouterApplianceInstances
   */
  @javax.annotation.Nullable
  public LinkedRouterApplianceInstances getLinkedRouterApplianceInstances() {
    return linkedRouterApplianceInstances;
  }

  public void setLinkedRouterApplianceInstances(LinkedRouterApplianceInstances linkedRouterApplianceInstances) {
    this.linkedRouterApplianceInstances = linkedRouterApplianceInstances;
  }


  public Spoke linkedVpcNetwork(LinkedVpcNetwork linkedVpcNetwork) {
    this.linkedVpcNetwork = linkedVpcNetwork;
    return this;
  }

  /**
   * Get linkedVpcNetwork
   * @return linkedVpcNetwork
   */
  @javax.annotation.Nullable
  public LinkedVpcNetwork getLinkedVpcNetwork() {
    return linkedVpcNetwork;
  }

  public void setLinkedVpcNetwork(LinkedVpcNetwork linkedVpcNetwork) {
    this.linkedVpcNetwork = linkedVpcNetwork;
  }


  public Spoke linkedVpnTunnels(LinkedVpnTunnels linkedVpnTunnels) {
    this.linkedVpnTunnels = linkedVpnTunnels;
    return this;
  }

  /**
   * Get linkedVpnTunnels
   * @return linkedVpnTunnels
   */
  @javax.annotation.Nullable
  public LinkedVpnTunnels getLinkedVpnTunnels() {
    return linkedVpnTunnels;
  }

  public void setLinkedVpnTunnels(LinkedVpnTunnels linkedVpnTunnels) {
    this.linkedVpnTunnels = linkedVpnTunnels;
  }


  public Spoke name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Immutable. The name of the spoke. Spoke names must be unique. They use the following form: &#x60;projects/{project_number}/locations/{region}/spokes/{spoke_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  /**
   * Output only. The reasons for current state of the spoke. Only present when the spoke is in the &#x60;INACTIVE&#x60; state.
   * @return reasons
   */
  @javax.annotation.Nullable
  public List<StateReason> getReasons() {
    return reasons;
  }



  /**
   * Output only. The type of resource associated with the spoke.
   * @return spokeType
   */
  @javax.annotation.Nullable
  public SpokeTypeEnum getSpokeType() {
    return spokeType;
  }



  /**
   * Output only. The current lifecycle state of this spoke.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  /**
   * Output only. The Google-generated UUID for the spoke. This value is unique across all spoke resources. If a spoke is deleted and another with the same name is created, the new spoke is assigned a different &#x60;unique_id&#x60;.
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }



  /**
   * Output only. The time the spoke was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Spoke spoke = (Spoke) o;
    return Objects.equals(this.createTime, spoke.createTime) &&
        Objects.equals(this.description, spoke.description) &&
        Objects.equals(this.group, spoke.group) &&
        Objects.equals(this.hub, spoke.hub) &&
        Objects.equals(this.labels, spoke.labels) &&
        Objects.equals(this.linkedInterconnectAttachments, spoke.linkedInterconnectAttachments) &&
        Objects.equals(this.linkedRouterApplianceInstances, spoke.linkedRouterApplianceInstances) &&
        Objects.equals(this.linkedVpcNetwork, spoke.linkedVpcNetwork) &&
        Objects.equals(this.linkedVpnTunnels, spoke.linkedVpnTunnels) &&
        Objects.equals(this.name, spoke.name) &&
        Objects.equals(this.reasons, spoke.reasons) &&
        Objects.equals(this.spokeType, spoke.spokeType) &&
        Objects.equals(this.state, spoke.state) &&
        Objects.equals(this.uniqueId, spoke.uniqueId) &&
        Objects.equals(this.updateTime, spoke.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, description, group, hub, labels, linkedInterconnectAttachments, linkedRouterApplianceInstances, linkedVpcNetwork, linkedVpnTunnels, name, reasons, spokeType, state, uniqueId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Spoke {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    hub: ").append(toIndentedString(hub)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    linkedInterconnectAttachments: ").append(toIndentedString(linkedInterconnectAttachments)).append("\n");
    sb.append("    linkedRouterApplianceInstances: ").append(toIndentedString(linkedRouterApplianceInstances)).append("\n");
    sb.append("    linkedVpcNetwork: ").append(toIndentedString(linkedVpcNetwork)).append("\n");
    sb.append("    linkedVpnTunnels: ").append(toIndentedString(linkedVpnTunnels)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    reasons: ").append(toIndentedString(reasons)).append("\n");
    sb.append("    spokeType: ").append(toIndentedString(spokeType)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("description");
    openapiFields.add("group");
    openapiFields.add("hub");
    openapiFields.add("labels");
    openapiFields.add("linkedInterconnectAttachments");
    openapiFields.add("linkedRouterApplianceInstances");
    openapiFields.add("linkedVpcNetwork");
    openapiFields.add("linkedVpnTunnels");
    openapiFields.add("name");
    openapiFields.add("reasons");
    openapiFields.add("spokeType");
    openapiFields.add("state");
    openapiFields.add("uniqueId");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Spoke
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Spoke.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Spoke is not found in the empty JSON string", Spoke.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Spoke.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Spoke` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("hub") != null && !jsonObj.get("hub").isJsonNull()) && !jsonObj.get("hub").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hub` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hub").toString()));
      }
      // validate the optional field `linkedInterconnectAttachments`
      if (jsonObj.get("linkedInterconnectAttachments") != null && !jsonObj.get("linkedInterconnectAttachments").isJsonNull()) {
        LinkedInterconnectAttachments.validateJsonElement(jsonObj.get("linkedInterconnectAttachments"));
      }
      // validate the optional field `linkedRouterApplianceInstances`
      if (jsonObj.get("linkedRouterApplianceInstances") != null && !jsonObj.get("linkedRouterApplianceInstances").isJsonNull()) {
        LinkedRouterApplianceInstances.validateJsonElement(jsonObj.get("linkedRouterApplianceInstances"));
      }
      // validate the optional field `linkedVpcNetwork`
      if (jsonObj.get("linkedVpcNetwork") != null && !jsonObj.get("linkedVpcNetwork").isJsonNull()) {
        LinkedVpcNetwork.validateJsonElement(jsonObj.get("linkedVpcNetwork"));
      }
      // validate the optional field `linkedVpnTunnels`
      if (jsonObj.get("linkedVpnTunnels") != null && !jsonObj.get("linkedVpnTunnels").isJsonNull()) {
        LinkedVpnTunnels.validateJsonElement(jsonObj.get("linkedVpnTunnels"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("reasons") != null && !jsonObj.get("reasons").isJsonNull()) {
        JsonArray jsonArrayreasons = jsonObj.getAsJsonArray("reasons");
        if (jsonArrayreasons != null) {
          // ensure the json data is an array
          if (!jsonObj.get("reasons").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `reasons` to be an array in the JSON string but got `%s`", jsonObj.get("reasons").toString()));
          }

          // validate the optional field `reasons` (array)
          for (int i = 0; i < jsonArrayreasons.size(); i++) {
            StateReason.validateJsonElement(jsonArrayreasons.get(i));
          };
        }
      }
      if ((jsonObj.get("spokeType") != null && !jsonObj.get("spokeType").isJsonNull()) && !jsonObj.get("spokeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spokeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spokeType").toString()));
      }
      // validate the optional field `spokeType`
      if (jsonObj.get("spokeType") != null && !jsonObj.get("spokeType").isJsonNull()) {
        SpokeTypeEnum.validateJsonElement(jsonObj.get("spokeType"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Spoke.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Spoke' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Spoke> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Spoke.class));

       return (TypeAdapter<T>) new TypeAdapter<Spoke>() {
           @Override
           public void write(JsonWriter out, Spoke value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Spoke read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Spoke given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Spoke
   * @throws IOException if the JSON string is invalid with respect to Spoke
   */
  public static Spoke fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Spoke.class);
  }

  /**
   * Convert an instance of Spoke to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

