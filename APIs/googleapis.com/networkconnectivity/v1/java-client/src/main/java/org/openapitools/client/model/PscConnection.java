/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.GoogleRpcErrorInfo;
import org.openapitools.client.model.GoogleRpcStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a specific Private Service Connect connection.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:51:11.077024-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PscConnection {
  public static final String SERIALIZED_NAME_CONSUMER_ADDRESS = "consumerAddress";
  @SerializedName(SERIALIZED_NAME_CONSUMER_ADDRESS)
  private String consumerAddress;

  public static final String SERIALIZED_NAME_CONSUMER_FORWARDING_RULE = "consumerForwardingRule";
  @SerializedName(SERIALIZED_NAME_CONSUMER_FORWARDING_RULE)
  private String consumerForwardingRule;

  public static final String SERIALIZED_NAME_CONSUMER_TARGET_PROJECT = "consumerTargetProject";
  @SerializedName(SERIALIZED_NAME_CONSUMER_TARGET_PROJECT)
  private String consumerTargetProject;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private GoogleRpcStatus error;

  public static final String SERIALIZED_NAME_ERROR_INFO = "errorInfo";
  @SerializedName(SERIALIZED_NAME_ERROR_INFO)
  private GoogleRpcErrorInfo errorInfo;

  /**
   * The error type indicates whether the error is consumer facing, producer facing or system internal.
   */
  @JsonAdapter(ErrorTypeEnum.Adapter.class)
  public enum ErrorTypeEnum {
    CONNECTION_ERROR_TYPE_UNSPECIFIED("CONNECTION_ERROR_TYPE_UNSPECIFIED"),
    
    ERROR_INTERNAL("ERROR_INTERNAL"),
    
    ERROR_CONSUMER_SIDE("ERROR_CONSUMER_SIDE"),
    
    ERROR_PRODUCER_SIDE("ERROR_PRODUCER_SIDE");

    private String value;

    ErrorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ErrorTypeEnum fromValue(String value) {
      for (ErrorTypeEnum b : ErrorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ErrorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ErrorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ErrorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ErrorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ErrorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ERROR_TYPE = "errorType";
  @SerializedName(SERIALIZED_NAME_ERROR_TYPE)
  private ErrorTypeEnum errorType;

  public static final String SERIALIZED_NAME_GCE_OPERATION = "gceOperation";
  @SerializedName(SERIALIZED_NAME_GCE_OPERATION)
  private String gceOperation;

  public static final String SERIALIZED_NAME_PSC_CONNECTION_ID = "pscConnectionId";
  @SerializedName(SERIALIZED_NAME_PSC_CONNECTION_ID)
  private String pscConnectionId;

  public static final String SERIALIZED_NAME_SELECTED_SUBNETWORK = "selectedSubnetwork";
  @SerializedName(SERIALIZED_NAME_SELECTED_SUBNETWORK)
  private String selectedSubnetwork;

  /**
   * State of the PSC Connection
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    FAILED("FAILED"),
    
    CREATING("CREATING"),
    
    DELETING("DELETING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public PscConnection() {
  }

  public PscConnection(
     String selectedSubnetwork
  ) {
    this();
    this.selectedSubnetwork = selectedSubnetwork;
  }

  public PscConnection consumerAddress(String consumerAddress) {
    this.consumerAddress = consumerAddress;
    return this;
  }

  /**
   * The resource reference of the consumer address.
   * @return consumerAddress
   */
  @javax.annotation.Nullable
  public String getConsumerAddress() {
    return consumerAddress;
  }

  public void setConsumerAddress(String consumerAddress) {
    this.consumerAddress = consumerAddress;
  }


  public PscConnection consumerForwardingRule(String consumerForwardingRule) {
    this.consumerForwardingRule = consumerForwardingRule;
    return this;
  }

  /**
   * The resource reference of the PSC Forwarding Rule within the consumer VPC.
   * @return consumerForwardingRule
   */
  @javax.annotation.Nullable
  public String getConsumerForwardingRule() {
    return consumerForwardingRule;
  }

  public void setConsumerForwardingRule(String consumerForwardingRule) {
    this.consumerForwardingRule = consumerForwardingRule;
  }


  public PscConnection consumerTargetProject(String consumerTargetProject) {
    this.consumerTargetProject = consumerTargetProject;
    return this;
  }

  /**
   * The project where the PSC connection is created.
   * @return consumerTargetProject
   */
  @javax.annotation.Nullable
  public String getConsumerTargetProject() {
    return consumerTargetProject;
  }

  public void setConsumerTargetProject(String consumerTargetProject) {
    this.consumerTargetProject = consumerTargetProject;
  }


  public PscConnection error(GoogleRpcStatus error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public GoogleRpcStatus getError() {
    return error;
  }

  public void setError(GoogleRpcStatus error) {
    this.error = error;
  }


  public PscConnection errorInfo(GoogleRpcErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
    return this;
  }

  /**
   * Get errorInfo
   * @return errorInfo
   */
  @javax.annotation.Nullable
  public GoogleRpcErrorInfo getErrorInfo() {
    return errorInfo;
  }

  public void setErrorInfo(GoogleRpcErrorInfo errorInfo) {
    this.errorInfo = errorInfo;
  }


  public PscConnection errorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
    return this;
  }

  /**
   * The error type indicates whether the error is consumer facing, producer facing or system internal.
   * @return errorType
   */
  @javax.annotation.Nullable
  public ErrorTypeEnum getErrorType() {
    return errorType;
  }

  public void setErrorType(ErrorTypeEnum errorType) {
    this.errorType = errorType;
  }


  public PscConnection gceOperation(String gceOperation) {
    this.gceOperation = gceOperation;
    return this;
  }

  /**
   * The last Compute Engine operation to setup PSC connection.
   * @return gceOperation
   */
  @javax.annotation.Nullable
  public String getGceOperation() {
    return gceOperation;
  }

  public void setGceOperation(String gceOperation) {
    this.gceOperation = gceOperation;
  }


  public PscConnection pscConnectionId(String pscConnectionId) {
    this.pscConnectionId = pscConnectionId;
    return this;
  }

  /**
   * The PSC connection id of the PSC forwarding rule.
   * @return pscConnectionId
   */
  @javax.annotation.Nullable
  public String getPscConnectionId() {
    return pscConnectionId;
  }

  public void setPscConnectionId(String pscConnectionId) {
    this.pscConnectionId = pscConnectionId;
  }


  /**
   * Output only. The URI of the subnetwork selected to allocate IP address for this connection.
   * @return selectedSubnetwork
   */
  @javax.annotation.Nullable
  public String getSelectedSubnetwork() {
    return selectedSubnetwork;
  }



  public PscConnection state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the PSC Connection
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PscConnection pscConnection = (PscConnection) o;
    return Objects.equals(this.consumerAddress, pscConnection.consumerAddress) &&
        Objects.equals(this.consumerForwardingRule, pscConnection.consumerForwardingRule) &&
        Objects.equals(this.consumerTargetProject, pscConnection.consumerTargetProject) &&
        Objects.equals(this.error, pscConnection.error) &&
        Objects.equals(this.errorInfo, pscConnection.errorInfo) &&
        Objects.equals(this.errorType, pscConnection.errorType) &&
        Objects.equals(this.gceOperation, pscConnection.gceOperation) &&
        Objects.equals(this.pscConnectionId, pscConnection.pscConnectionId) &&
        Objects.equals(this.selectedSubnetwork, pscConnection.selectedSubnetwork) &&
        Objects.equals(this.state, pscConnection.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerAddress, consumerForwardingRule, consumerTargetProject, error, errorInfo, errorType, gceOperation, pscConnectionId, selectedSubnetwork, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PscConnection {\n");
    sb.append("    consumerAddress: ").append(toIndentedString(consumerAddress)).append("\n");
    sb.append("    consumerForwardingRule: ").append(toIndentedString(consumerForwardingRule)).append("\n");
    sb.append("    consumerTargetProject: ").append(toIndentedString(consumerTargetProject)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    errorInfo: ").append(toIndentedString(errorInfo)).append("\n");
    sb.append("    errorType: ").append(toIndentedString(errorType)).append("\n");
    sb.append("    gceOperation: ").append(toIndentedString(gceOperation)).append("\n");
    sb.append("    pscConnectionId: ").append(toIndentedString(pscConnectionId)).append("\n");
    sb.append("    selectedSubnetwork: ").append(toIndentedString(selectedSubnetwork)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerAddress");
    openapiFields.add("consumerForwardingRule");
    openapiFields.add("consumerTargetProject");
    openapiFields.add("error");
    openapiFields.add("errorInfo");
    openapiFields.add("errorType");
    openapiFields.add("gceOperation");
    openapiFields.add("pscConnectionId");
    openapiFields.add("selectedSubnetwork");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PscConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PscConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PscConnection is not found in the empty JSON string", PscConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PscConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PscConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerAddress") != null && !jsonObj.get("consumerAddress").isJsonNull()) && !jsonObj.get("consumerAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerAddress").toString()));
      }
      if ((jsonObj.get("consumerForwardingRule") != null && !jsonObj.get("consumerForwardingRule").isJsonNull()) && !jsonObj.get("consumerForwardingRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerForwardingRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerForwardingRule").toString()));
      }
      if ((jsonObj.get("consumerTargetProject") != null && !jsonObj.get("consumerTargetProject").isJsonNull()) && !jsonObj.get("consumerTargetProject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerTargetProject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerTargetProject").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        GoogleRpcStatus.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `errorInfo`
      if (jsonObj.get("errorInfo") != null && !jsonObj.get("errorInfo").isJsonNull()) {
        GoogleRpcErrorInfo.validateJsonElement(jsonObj.get("errorInfo"));
      }
      if ((jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) && !jsonObj.get("errorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `errorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("errorType").toString()));
      }
      // validate the optional field `errorType`
      if (jsonObj.get("errorType") != null && !jsonObj.get("errorType").isJsonNull()) {
        ErrorTypeEnum.validateJsonElement(jsonObj.get("errorType"));
      }
      if ((jsonObj.get("gceOperation") != null && !jsonObj.get("gceOperation").isJsonNull()) && !jsonObj.get("gceOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gceOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gceOperation").toString()));
      }
      if ((jsonObj.get("pscConnectionId") != null && !jsonObj.get("pscConnectionId").isJsonNull()) && !jsonObj.get("pscConnectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pscConnectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pscConnectionId").toString()));
      }
      if ((jsonObj.get("selectedSubnetwork") != null && !jsonObj.get("selectedSubnetwork").isJsonNull()) && !jsonObj.get("selectedSubnetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `selectedSubnetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("selectedSubnetwork").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PscConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PscConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PscConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PscConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<PscConnection>() {
           @Override
           public void write(JsonWriter out, PscConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PscConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PscConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PscConnection
   * @throws IOException if the JSON string is invalid with respect to PscConnection
   */
  public static PscConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PscConnection.class);
  }

  /**
   * Convert an instance of PscConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

