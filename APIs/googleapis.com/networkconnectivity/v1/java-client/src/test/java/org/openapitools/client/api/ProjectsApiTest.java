/*
 * Network Connectivity API
 * This API enables connectivity with and between Google Cloud resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AcceptHubSpokeRequest;
import org.openapitools.client.model.GoogleLongrunningListOperationsResponse;
import org.openapitools.client.model.GoogleLongrunningOperation;
import org.openapitools.client.model.Hub;
import org.openapitools.client.model.InternalRange;
import org.openapitools.client.model.ListGroupsResponse;
import org.openapitools.client.model.ListHubSpokesResponse;
import org.openapitools.client.model.ListHubsResponse;
import org.openapitools.client.model.ListInternalRangesResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListPolicyBasedRoutesResponse;
import org.openapitools.client.model.ListRouteTablesResponse;
import org.openapitools.client.model.ListRoutesResponse;
import org.openapitools.client.model.ListServiceClassesResponse;
import org.openapitools.client.model.ListServiceConnectionMapsResponse;
import org.openapitools.client.model.ListServiceConnectionPoliciesResponse;
import org.openapitools.client.model.ListServiceConnectionTokensResponse;
import org.openapitools.client.model.ListSpokesResponse;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.PolicyBasedRoute;
import org.openapitools.client.model.RejectHubSpokeRequest;
import org.openapitools.client.model.ServiceConnectionMap;
import org.openapitools.client.model.ServiceConnectionPolicy;
import org.openapitools.client.model.ServiceConnectionToken;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.Spoke;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Accepts a proposal to attach a Network Connectivity Center spoke to a hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsAcceptSpokeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AcceptHubSpokeRequest acceptHubSpokeRequest = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsGlobalHubsAcceptSpoke(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, acceptHubSpokeRequest);
        // TODO: test validations
    }

    /**
     * Creates a new Network Connectivity Center hub in the specified project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String hubId = null;
        String requestId = null;
        Hub hub = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsGlobalHubsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, hubId, requestId, hub);
        // TODO: test validations
    }

    /**
     * Lists groups in a given hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsGroupsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListGroupsResponse response = api.networkconnectivityProjectsLocationsGlobalHubsGroupsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the Network Connectivity Center hubs associated with a given project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListHubsResponse response = api.networkconnectivityProjectsLocationsGlobalHubsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists the Network Connectivity Center spokes associated with a specified hub and location. The list includes both spokes that are attached to the hub and spokes that have been proposed but not yet accepted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsListSpokesTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        List<String> spokeLocations = null;
        String view = null;
        ListHubSpokesResponse response = api.networkconnectivityProjectsLocationsGlobalHubsListSpokes(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken, spokeLocations, view);
        // TODO: test validations
    }

    /**
     * Rejects a Network Connectivity Center spoke from being attached to a hub. If the spoke was previously in the &#x60;ACTIVE&#x60; state, it transitions to the &#x60;INACTIVE&#x60; state and is no longer able to connect to other spokes that are attached to the hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsRejectSpokeTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RejectHubSpokeRequest rejectHubSpokeRequest = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsGlobalHubsRejectSpoke(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rejectHubSpokeRequest);
        // TODO: test validations
    }

    /**
     * Lists route tables in a given hub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsRouteTablesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRouteTablesResponse response = api.networkconnectivityProjectsLocationsGlobalHubsRouteTablesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists routes in a given route table.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalHubsRouteTablesRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListRoutesResponse response = api.networkconnectivityProjectsLocationsGlobalHubsRouteTablesRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new policy-based route in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalPolicyBasedRoutesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String policyBasedRouteId = null;
        String requestId = null;
        PolicyBasedRoute policyBasedRoute = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsGlobalPolicyBasedRoutesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, policyBasedRouteId, requestId, policyBasedRoute);
        // TODO: test validations
    }

    /**
     * Lists policy-based routes in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsGlobalPolicyBasedRoutesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPolicyBasedRoutesResponse response = api.networkconnectivityProjectsLocationsGlobalPolicyBasedRoutesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new internal range in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsInternalRangesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String internalRangeId = null;
        String requestId = null;
        InternalRange internalRange = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsInternalRangesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, internalRangeId, requestId, internalRange);
        // TODO: test validations
    }

    /**
     * Lists internal ranges in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsInternalRangesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListInternalRangesResponse response = api.networkconnectivityProjectsLocationsInternalRangesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.networkconnectivityProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.networkconnectivityProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        GoogleLongrunningListOperationsResponse response = api.networkconnectivityProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists ServiceClasses in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceClassesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceClassesResponse response = api.networkconnectivityProjectsLocationsServiceClassesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ServiceConnectionMap in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceConnectionMapsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String serviceConnectionMapId = null;
        ServiceConnectionMap serviceConnectionMap = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsServiceConnectionMapsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, serviceConnectionMapId, serviceConnectionMap);
        // TODO: test validations
    }

    /**
     * Lists ServiceConnectionMaps in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceConnectionMapsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceConnectionMapsResponse response = api.networkconnectivityProjectsLocationsServiceConnectionMapsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ServiceConnectionPolicy in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceConnectionPoliciesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String serviceConnectionPolicyId = null;
        ServiceConnectionPolicy serviceConnectionPolicy = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsServiceConnectionPoliciesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, serviceConnectionPolicyId, serviceConnectionPolicy);
        // TODO: test validations
    }

    /**
     * Lists ServiceConnectionPolicies in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceConnectionPoliciesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceConnectionPoliciesResponse response = api.networkconnectivityProjectsLocationsServiceConnectionPoliciesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new ServiceConnectionToken in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceConnectionTokensCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String serviceConnectionTokenId = null;
        ServiceConnectionToken serviceConnectionToken = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsServiceConnectionTokensCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, serviceConnectionTokenId, serviceConnectionToken);
        // TODO: test validations
    }

    /**
     * Lists ServiceConnectionTokens in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsServiceConnectionTokensListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceConnectionTokensResponse response = api.networkconnectivityProjectsLocationsServiceConnectionTokensList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a Network Connectivity Center spoke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String spokeId = null;
        Spoke spoke = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsSpokesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, spokeId, spoke);
        // TODO: test validations
    }

    /**
     * Deletes a Network Connectivity Center spoke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsSpokesDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId);
        // TODO: test validations
    }

    /**
     * Gets details about a Network Connectivity Center spoke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Spoke response = api.networkconnectivityProjectsLocationsSpokesGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.networkconnectivityProjectsLocationsSpokesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists the Network Connectivity Center spokes in a specified project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListSpokesResponse response = api.networkconnectivityProjectsLocationsSpokesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates the parameters of a Network Connectivity Center spoke.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String requestId = null;
        String updateMask = null;
        Spoke spoke = null;
        GoogleLongrunningOperation response = api.networkconnectivityProjectsLocationsSpokesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, requestId, updateMask, spoke);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.networkconnectivityProjectsLocationsSpokesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void networkconnectivityProjectsLocationsSpokesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.networkconnectivityProjectsLocationsSpokesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
