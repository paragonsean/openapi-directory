/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAuthority.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAuthority::OAIAuthority(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAuthority::OAIAuthority() {
    this->initializeModel();
}

OAIAuthority::~OAIAuthority() {}

void OAIAuthority::initializeModel() {

    m_identity_provider_isSet = false;
    m_identity_provider_isValid = false;

    m_issuer_isSet = false;
    m_issuer_isValid = false;

    m_oidc_jwks_isSet = false;
    m_oidc_jwks_isValid = false;

    m_workload_identity_pool_isSet = false;
    m_workload_identity_pool_isValid = false;
}

void OAIAuthority::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAuthority::fromJsonObject(QJsonObject json) {

    m_identity_provider_isValid = ::OpenAPI::fromJsonValue(m_identity_provider, json[QString("identityProvider")]);
    m_identity_provider_isSet = !json[QString("identityProvider")].isNull() && m_identity_provider_isValid;

    m_issuer_isValid = ::OpenAPI::fromJsonValue(m_issuer, json[QString("issuer")]);
    m_issuer_isSet = !json[QString("issuer")].isNull() && m_issuer_isValid;

    m_oidc_jwks_isValid = ::OpenAPI::fromJsonValue(m_oidc_jwks, json[QString("oidcJwks")]);
    m_oidc_jwks_isSet = !json[QString("oidcJwks")].isNull() && m_oidc_jwks_isValid;

    m_workload_identity_pool_isValid = ::OpenAPI::fromJsonValue(m_workload_identity_pool, json[QString("workloadIdentityPool")]);
    m_workload_identity_pool_isSet = !json[QString("workloadIdentityPool")].isNull() && m_workload_identity_pool_isValid;
}

QString OAIAuthority::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAuthority::asJsonObject() const {
    QJsonObject obj;
    if (m_identity_provider_isSet) {
        obj.insert(QString("identityProvider"), ::OpenAPI::toJsonValue(m_identity_provider));
    }
    if (m_issuer_isSet) {
        obj.insert(QString("issuer"), ::OpenAPI::toJsonValue(m_issuer));
    }
    if (m_oidc_jwks_isSet) {
        obj.insert(QString("oidcJwks"), ::OpenAPI::toJsonValue(m_oidc_jwks));
    }
    if (m_workload_identity_pool_isSet) {
        obj.insert(QString("workloadIdentityPool"), ::OpenAPI::toJsonValue(m_workload_identity_pool));
    }
    return obj;
}

QString OAIAuthority::getIdentityProvider() const {
    return m_identity_provider;
}
void OAIAuthority::setIdentityProvider(const QString &identity_provider) {
    m_identity_provider = identity_provider;
    m_identity_provider_isSet = true;
}

bool OAIAuthority::is_identity_provider_Set() const{
    return m_identity_provider_isSet;
}

bool OAIAuthority::is_identity_provider_Valid() const{
    return m_identity_provider_isValid;
}

QString OAIAuthority::getIssuer() const {
    return m_issuer;
}
void OAIAuthority::setIssuer(const QString &issuer) {
    m_issuer = issuer;
    m_issuer_isSet = true;
}

bool OAIAuthority::is_issuer_Set() const{
    return m_issuer_isSet;
}

bool OAIAuthority::is_issuer_Valid() const{
    return m_issuer_isValid;
}

QByteArray OAIAuthority::getOidcJwks() const {
    return m_oidc_jwks;
}
void OAIAuthority::setOidcJwks(const QByteArray &oidc_jwks) {
    m_oidc_jwks = oidc_jwks;
    m_oidc_jwks_isSet = true;
}

bool OAIAuthority::is_oidc_jwks_Set() const{
    return m_oidc_jwks_isSet;
}

bool OAIAuthority::is_oidc_jwks_Valid() const{
    return m_oidc_jwks_isValid;
}

QString OAIAuthority::getWorkloadIdentityPool() const {
    return m_workload_identity_pool;
}
void OAIAuthority::setWorkloadIdentityPool(const QString &workload_identity_pool) {
    m_workload_identity_pool = workload_identity_pool;
    m_workload_identity_pool_isSet = true;
}

bool OAIAuthority::is_workload_identity_pool_Set() const{
    return m_workload_identity_pool_isSet;
}

bool OAIAuthority::is_workload_identity_pool_Valid() const{
    return m_workload_identity_pool_isValid;
}

bool OAIAuthority::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identity_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oidc_jwks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workload_identity_pool_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAuthority::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
