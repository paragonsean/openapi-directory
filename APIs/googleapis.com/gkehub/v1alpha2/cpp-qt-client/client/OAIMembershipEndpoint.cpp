/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembershipEndpoint::OAIMembershipEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembershipEndpoint::OAIMembershipEndpoint() {
    this->initializeModel();
}

OAIMembershipEndpoint::~OAIMembershipEndpoint() {}

void OAIMembershipEndpoint::initializeModel() {

    m_appliance_cluster_isSet = false;
    m_appliance_cluster_isValid = false;

    m_edge_cluster_isSet = false;
    m_edge_cluster_isValid = false;

    m_gke_cluster_isSet = false;
    m_gke_cluster_isValid = false;

    m_kubernetes_metadata_isSet = false;
    m_kubernetes_metadata_isValid = false;

    m_kubernetes_resource_isSet = false;
    m_kubernetes_resource_isValid = false;

    m_multi_cloud_cluster_isSet = false;
    m_multi_cloud_cluster_isValid = false;

    m_on_prem_cluster_isSet = false;
    m_on_prem_cluster_isValid = false;
}

void OAIMembershipEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembershipEndpoint::fromJsonObject(QJsonObject json) {

    m_appliance_cluster_isValid = ::OpenAPI::fromJsonValue(m_appliance_cluster, json[QString("applianceCluster")]);
    m_appliance_cluster_isSet = !json[QString("applianceCluster")].isNull() && m_appliance_cluster_isValid;

    m_edge_cluster_isValid = ::OpenAPI::fromJsonValue(m_edge_cluster, json[QString("edgeCluster")]);
    m_edge_cluster_isSet = !json[QString("edgeCluster")].isNull() && m_edge_cluster_isValid;

    m_gke_cluster_isValid = ::OpenAPI::fromJsonValue(m_gke_cluster, json[QString("gkeCluster")]);
    m_gke_cluster_isSet = !json[QString("gkeCluster")].isNull() && m_gke_cluster_isValid;

    m_kubernetes_metadata_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_metadata, json[QString("kubernetesMetadata")]);
    m_kubernetes_metadata_isSet = !json[QString("kubernetesMetadata")].isNull() && m_kubernetes_metadata_isValid;

    m_kubernetes_resource_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_resource, json[QString("kubernetesResource")]);
    m_kubernetes_resource_isSet = !json[QString("kubernetesResource")].isNull() && m_kubernetes_resource_isValid;

    m_multi_cloud_cluster_isValid = ::OpenAPI::fromJsonValue(m_multi_cloud_cluster, json[QString("multiCloudCluster")]);
    m_multi_cloud_cluster_isSet = !json[QString("multiCloudCluster")].isNull() && m_multi_cloud_cluster_isValid;

    m_on_prem_cluster_isValid = ::OpenAPI::fromJsonValue(m_on_prem_cluster, json[QString("onPremCluster")]);
    m_on_prem_cluster_isSet = !json[QString("onPremCluster")].isNull() && m_on_prem_cluster_isValid;
}

QString OAIMembershipEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembershipEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_appliance_cluster.isSet()) {
        obj.insert(QString("applianceCluster"), ::OpenAPI::toJsonValue(m_appliance_cluster));
    }
    if (m_edge_cluster.isSet()) {
        obj.insert(QString("edgeCluster"), ::OpenAPI::toJsonValue(m_edge_cluster));
    }
    if (m_gke_cluster.isSet()) {
        obj.insert(QString("gkeCluster"), ::OpenAPI::toJsonValue(m_gke_cluster));
    }
    if (m_kubernetes_metadata.isSet()) {
        obj.insert(QString("kubernetesMetadata"), ::OpenAPI::toJsonValue(m_kubernetes_metadata));
    }
    if (m_kubernetes_resource.isSet()) {
        obj.insert(QString("kubernetesResource"), ::OpenAPI::toJsonValue(m_kubernetes_resource));
    }
    if (m_multi_cloud_cluster.isSet()) {
        obj.insert(QString("multiCloudCluster"), ::OpenAPI::toJsonValue(m_multi_cloud_cluster));
    }
    if (m_on_prem_cluster.isSet()) {
        obj.insert(QString("onPremCluster"), ::OpenAPI::toJsonValue(m_on_prem_cluster));
    }
    return obj;
}

OAIApplianceCluster OAIMembershipEndpoint::getApplianceCluster() const {
    return m_appliance_cluster;
}
void OAIMembershipEndpoint::setApplianceCluster(const OAIApplianceCluster &appliance_cluster) {
    m_appliance_cluster = appliance_cluster;
    m_appliance_cluster_isSet = true;
}

bool OAIMembershipEndpoint::is_appliance_cluster_Set() const{
    return m_appliance_cluster_isSet;
}

bool OAIMembershipEndpoint::is_appliance_cluster_Valid() const{
    return m_appliance_cluster_isValid;
}

OAIEdgeCluster OAIMembershipEndpoint::getEdgeCluster() const {
    return m_edge_cluster;
}
void OAIMembershipEndpoint::setEdgeCluster(const OAIEdgeCluster &edge_cluster) {
    m_edge_cluster = edge_cluster;
    m_edge_cluster_isSet = true;
}

bool OAIMembershipEndpoint::is_edge_cluster_Set() const{
    return m_edge_cluster_isSet;
}

bool OAIMembershipEndpoint::is_edge_cluster_Valid() const{
    return m_edge_cluster_isValid;
}

OAIGkeCluster OAIMembershipEndpoint::getGkeCluster() const {
    return m_gke_cluster;
}
void OAIMembershipEndpoint::setGkeCluster(const OAIGkeCluster &gke_cluster) {
    m_gke_cluster = gke_cluster;
    m_gke_cluster_isSet = true;
}

bool OAIMembershipEndpoint::is_gke_cluster_Set() const{
    return m_gke_cluster_isSet;
}

bool OAIMembershipEndpoint::is_gke_cluster_Valid() const{
    return m_gke_cluster_isValid;
}

OAIKubernetesMetadata OAIMembershipEndpoint::getKubernetesMetadata() const {
    return m_kubernetes_metadata;
}
void OAIMembershipEndpoint::setKubernetesMetadata(const OAIKubernetesMetadata &kubernetes_metadata) {
    m_kubernetes_metadata = kubernetes_metadata;
    m_kubernetes_metadata_isSet = true;
}

bool OAIMembershipEndpoint::is_kubernetes_metadata_Set() const{
    return m_kubernetes_metadata_isSet;
}

bool OAIMembershipEndpoint::is_kubernetes_metadata_Valid() const{
    return m_kubernetes_metadata_isValid;
}

OAIKubernetesResource OAIMembershipEndpoint::getKubernetesResource() const {
    return m_kubernetes_resource;
}
void OAIMembershipEndpoint::setKubernetesResource(const OAIKubernetesResource &kubernetes_resource) {
    m_kubernetes_resource = kubernetes_resource;
    m_kubernetes_resource_isSet = true;
}

bool OAIMembershipEndpoint::is_kubernetes_resource_Set() const{
    return m_kubernetes_resource_isSet;
}

bool OAIMembershipEndpoint::is_kubernetes_resource_Valid() const{
    return m_kubernetes_resource_isValid;
}

OAIMultiCloudCluster OAIMembershipEndpoint::getMultiCloudCluster() const {
    return m_multi_cloud_cluster;
}
void OAIMembershipEndpoint::setMultiCloudCluster(const OAIMultiCloudCluster &multi_cloud_cluster) {
    m_multi_cloud_cluster = multi_cloud_cluster;
    m_multi_cloud_cluster_isSet = true;
}

bool OAIMembershipEndpoint::is_multi_cloud_cluster_Set() const{
    return m_multi_cloud_cluster_isSet;
}

bool OAIMembershipEndpoint::is_multi_cloud_cluster_Valid() const{
    return m_multi_cloud_cluster_isValid;
}

OAIOnPremCluster OAIMembershipEndpoint::getOnPremCluster() const {
    return m_on_prem_cluster;
}
void OAIMembershipEndpoint::setOnPremCluster(const OAIOnPremCluster &on_prem_cluster) {
    m_on_prem_cluster = on_prem_cluster;
    m_on_prem_cluster_isSet = true;
}

bool OAIMembershipEndpoint::is_on_prem_cluster_Set() const{
    return m_on_prem_cluster_isSet;
}

bool OAIMembershipEndpoint::is_on_prem_cluster_Valid() const{
    return m_on_prem_cluster_isValid;
}

bool OAIMembershipEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appliance_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_edge_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_resource.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multi_cloud_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_prem_cluster.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembershipEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
