/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKubernetesResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKubernetesResource::OAIKubernetesResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKubernetesResource::OAIKubernetesResource() {
    this->initializeModel();
}

OAIKubernetesResource::~OAIKubernetesResource() {}

void OAIKubernetesResource::initializeModel() {

    m_connect_resources_isSet = false;
    m_connect_resources_isValid = false;

    m_membership_cr_manifest_isSet = false;
    m_membership_cr_manifest_isValid = false;

    m_membership_resources_isSet = false;
    m_membership_resources_isValid = false;

    m_resource_options_isSet = false;
    m_resource_options_isValid = false;
}

void OAIKubernetesResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKubernetesResource::fromJsonObject(QJsonObject json) {

    m_connect_resources_isValid = ::OpenAPI::fromJsonValue(m_connect_resources, json[QString("connectResources")]);
    m_connect_resources_isSet = !json[QString("connectResources")].isNull() && m_connect_resources_isValid;

    m_membership_cr_manifest_isValid = ::OpenAPI::fromJsonValue(m_membership_cr_manifest, json[QString("membershipCrManifest")]);
    m_membership_cr_manifest_isSet = !json[QString("membershipCrManifest")].isNull() && m_membership_cr_manifest_isValid;

    m_membership_resources_isValid = ::OpenAPI::fromJsonValue(m_membership_resources, json[QString("membershipResources")]);
    m_membership_resources_isSet = !json[QString("membershipResources")].isNull() && m_membership_resources_isValid;

    m_resource_options_isValid = ::OpenAPI::fromJsonValue(m_resource_options, json[QString("resourceOptions")]);
    m_resource_options_isSet = !json[QString("resourceOptions")].isNull() && m_resource_options_isValid;
}

QString OAIKubernetesResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKubernetesResource::asJsonObject() const {
    QJsonObject obj;
    if (m_connect_resources.size() > 0) {
        obj.insert(QString("connectResources"), ::OpenAPI::toJsonValue(m_connect_resources));
    }
    if (m_membership_cr_manifest_isSet) {
        obj.insert(QString("membershipCrManifest"), ::OpenAPI::toJsonValue(m_membership_cr_manifest));
    }
    if (m_membership_resources.size() > 0) {
        obj.insert(QString("membershipResources"), ::OpenAPI::toJsonValue(m_membership_resources));
    }
    if (m_resource_options.isSet()) {
        obj.insert(QString("resourceOptions"), ::OpenAPI::toJsonValue(m_resource_options));
    }
    return obj;
}

QList<OAIResourceManifest> OAIKubernetesResource::getConnectResources() const {
    return m_connect_resources;
}
void OAIKubernetesResource::setConnectResources(const QList<OAIResourceManifest> &connect_resources) {
    m_connect_resources = connect_resources;
    m_connect_resources_isSet = true;
}

bool OAIKubernetesResource::is_connect_resources_Set() const{
    return m_connect_resources_isSet;
}

bool OAIKubernetesResource::is_connect_resources_Valid() const{
    return m_connect_resources_isValid;
}

QString OAIKubernetesResource::getMembershipCrManifest() const {
    return m_membership_cr_manifest;
}
void OAIKubernetesResource::setMembershipCrManifest(const QString &membership_cr_manifest) {
    m_membership_cr_manifest = membership_cr_manifest;
    m_membership_cr_manifest_isSet = true;
}

bool OAIKubernetesResource::is_membership_cr_manifest_Set() const{
    return m_membership_cr_manifest_isSet;
}

bool OAIKubernetesResource::is_membership_cr_manifest_Valid() const{
    return m_membership_cr_manifest_isValid;
}

QList<OAIResourceManifest> OAIKubernetesResource::getMembershipResources() const {
    return m_membership_resources;
}
void OAIKubernetesResource::setMembershipResources(const QList<OAIResourceManifest> &membership_resources) {
    m_membership_resources = membership_resources;
    m_membership_resources_isSet = true;
}

bool OAIKubernetesResource::is_membership_resources_Set() const{
    return m_membership_resources_isSet;
}

bool OAIKubernetesResource::is_membership_resources_Valid() const{
    return m_membership_resources_isValid;
}

OAIResourceOptions OAIKubernetesResource::getResourceOptions() const {
    return m_resource_options;
}
void OAIKubernetesResource::setResourceOptions(const OAIResourceOptions &resource_options) {
    m_resource_options = resource_options;
    m_resource_options_isSet = true;
}

bool OAIKubernetesResource::is_resource_options_Set() const{
    return m_resource_options_isSet;
}

bool OAIKubernetesResource::is_resource_options_Valid() const{
    return m_resource_options_isValid;
}

bool OAIKubernetesResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connect_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_cr_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_resources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKubernetesResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
