# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementPolicyControllerMonitoring(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, backends: List[str]=None):
        """ConfigManagementPolicyControllerMonitoring - a model defined in OpenAPI

        :param backends: The backends of this ConfigManagementPolicyControllerMonitoring.
        """
        self.openapi_types = {
            'backends': List[str]
        }

        self.attribute_map = {
            'backends': 'backends'
        }

        self._backends = backends

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementPolicyControllerMonitoring':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementPolicyControllerMonitoring of this ConfigManagementPolicyControllerMonitoring.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def backends(self):
        """Gets the backends of this ConfigManagementPolicyControllerMonitoring.

        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.

        :return: The backends of this ConfigManagementPolicyControllerMonitoring.
        :rtype: List[str]
        """
        return self._backends

    @backends.setter
    def backends(self, backends):
        """Sets the backends of this ConfigManagementPolicyControllerMonitoring.

        Specifies the list of backends Policy Controller will export to. An empty list would effectively disable metrics export.

        :param backends: The backends of this ConfigManagementPolicyControllerMonitoring.
        :type backends: List[str]
        """
        allowed_values = ["MONITORING_BACKEND_UNSPECIFIED", "PROMETHEUS", "CLOUD_MONITORING"]  # noqa: E501
        if not set(backends).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `backends` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(backends) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._backends = backends
