# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_controller_monitoring_config import PolicyControllerMonitoringConfig
from openapi_server.models.policy_controller_policy_content_spec import PolicyControllerPolicyContentSpec
from openapi_server.models.policy_controller_policy_controller_deployment_config import PolicyControllerPolicyControllerDeploymentConfig
from openapi_server import util


class PolicyControllerHubConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_interval_seconds: str=None, constraint_violation_limit: str=None, deployment_configs: Dict[str, PolicyControllerPolicyControllerDeploymentConfig]=None, exemptable_namespaces: List[str]=None, install_spec: str=None, log_denies_enabled: bool=None, monitoring: PolicyControllerMonitoringConfig=None, mutation_enabled: bool=None, policy_content: PolicyControllerPolicyContentSpec=None, referential_rules_enabled: bool=None):
        """PolicyControllerHubConfig - a model defined in OpenAPI

        :param audit_interval_seconds: The audit_interval_seconds of this PolicyControllerHubConfig.
        :param constraint_violation_limit: The constraint_violation_limit of this PolicyControllerHubConfig.
        :param deployment_configs: The deployment_configs of this PolicyControllerHubConfig.
        :param exemptable_namespaces: The exemptable_namespaces of this PolicyControllerHubConfig.
        :param install_spec: The install_spec of this PolicyControllerHubConfig.
        :param log_denies_enabled: The log_denies_enabled of this PolicyControllerHubConfig.
        :param monitoring: The monitoring of this PolicyControllerHubConfig.
        :param mutation_enabled: The mutation_enabled of this PolicyControllerHubConfig.
        :param policy_content: The policy_content of this PolicyControllerHubConfig.
        :param referential_rules_enabled: The referential_rules_enabled of this PolicyControllerHubConfig.
        """
        self.openapi_types = {
            'audit_interval_seconds': str,
            'constraint_violation_limit': str,
            'deployment_configs': Dict[str, PolicyControllerPolicyControllerDeploymentConfig],
            'exemptable_namespaces': List[str],
            'install_spec': str,
            'log_denies_enabled': bool,
            'monitoring': PolicyControllerMonitoringConfig,
            'mutation_enabled': bool,
            'policy_content': PolicyControllerPolicyContentSpec,
            'referential_rules_enabled': bool
        }

        self.attribute_map = {
            'audit_interval_seconds': 'auditIntervalSeconds',
            'constraint_violation_limit': 'constraintViolationLimit',
            'deployment_configs': 'deploymentConfigs',
            'exemptable_namespaces': 'exemptableNamespaces',
            'install_spec': 'installSpec',
            'log_denies_enabled': 'logDeniesEnabled',
            'monitoring': 'monitoring',
            'mutation_enabled': 'mutationEnabled',
            'policy_content': 'policyContent',
            'referential_rules_enabled': 'referentialRulesEnabled'
        }

        self._audit_interval_seconds = audit_interval_seconds
        self._constraint_violation_limit = constraint_violation_limit
        self._deployment_configs = deployment_configs
        self._exemptable_namespaces = exemptable_namespaces
        self._install_spec = install_spec
        self._log_denies_enabled = log_denies_enabled
        self._monitoring = monitoring
        self._mutation_enabled = mutation_enabled
        self._policy_content = policy_content
        self._referential_rules_enabled = referential_rules_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerHubConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerHubConfig of this PolicyControllerHubConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_interval_seconds(self):
        """Gets the audit_interval_seconds of this PolicyControllerHubConfig.

        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.

        :return: The audit_interval_seconds of this PolicyControllerHubConfig.
        :rtype: str
        """
        return self._audit_interval_seconds

    @audit_interval_seconds.setter
    def audit_interval_seconds(self, audit_interval_seconds):
        """Sets the audit_interval_seconds of this PolicyControllerHubConfig.

        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.

        :param audit_interval_seconds: The audit_interval_seconds of this PolicyControllerHubConfig.
        :type audit_interval_seconds: str
        """

        self._audit_interval_seconds = audit_interval_seconds

    @property
    def constraint_violation_limit(self):
        """Gets the constraint_violation_limit of this PolicyControllerHubConfig.

        The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.

        :return: The constraint_violation_limit of this PolicyControllerHubConfig.
        :rtype: str
        """
        return self._constraint_violation_limit

    @constraint_violation_limit.setter
    def constraint_violation_limit(self, constraint_violation_limit):
        """Sets the constraint_violation_limit of this PolicyControllerHubConfig.

        The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.

        :param constraint_violation_limit: The constraint_violation_limit of this PolicyControllerHubConfig.
        :type constraint_violation_limit: str
        """

        self._constraint_violation_limit = constraint_violation_limit

    @property
    def deployment_configs(self):
        """Gets the deployment_configs of this PolicyControllerHubConfig.

        Map of deployment configs to deployments (\"admission\", \"audit\", \"mutation').

        :return: The deployment_configs of this PolicyControllerHubConfig.
        :rtype: Dict[str, PolicyControllerPolicyControllerDeploymentConfig]
        """
        return self._deployment_configs

    @deployment_configs.setter
    def deployment_configs(self, deployment_configs):
        """Sets the deployment_configs of this PolicyControllerHubConfig.

        Map of deployment configs to deployments (\"admission\", \"audit\", \"mutation').

        :param deployment_configs: The deployment_configs of this PolicyControllerHubConfig.
        :type deployment_configs: Dict[str, PolicyControllerPolicyControllerDeploymentConfig]
        """

        self._deployment_configs = deployment_configs

    @property
    def exemptable_namespaces(self):
        """Gets the exemptable_namespaces of this PolicyControllerHubConfig.

        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.

        :return: The exemptable_namespaces of this PolicyControllerHubConfig.
        :rtype: List[str]
        """
        return self._exemptable_namespaces

    @exemptable_namespaces.setter
    def exemptable_namespaces(self, exemptable_namespaces):
        """Sets the exemptable_namespaces of this PolicyControllerHubConfig.

        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.

        :param exemptable_namespaces: The exemptable_namespaces of this PolicyControllerHubConfig.
        :type exemptable_namespaces: List[str]
        """

        self._exemptable_namespaces = exemptable_namespaces

    @property
    def install_spec(self):
        """Gets the install_spec of this PolicyControllerHubConfig.

        The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.

        :return: The install_spec of this PolicyControllerHubConfig.
        :rtype: str
        """
        return self._install_spec

    @install_spec.setter
    def install_spec(self, install_spec):
        """Sets the install_spec of this PolicyControllerHubConfig.

        The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.

        :param install_spec: The install_spec of this PolicyControllerHubConfig.
        :type install_spec: str
        """
        allowed_values = ["INSTALL_SPEC_UNSPECIFIED", "INSTALL_SPEC_NOT_INSTALLED", "INSTALL_SPEC_ENABLED", "INSTALL_SPEC_SUSPENDED", "INSTALL_SPEC_DETACHED"]  # noqa: E501
        if install_spec not in allowed_values:
            raise ValueError(
                "Invalid value for `install_spec` ({0}), must be one of {1}"
                .format(install_spec, allowed_values)
            )

        self._install_spec = install_spec

    @property
    def log_denies_enabled(self):
        """Gets the log_denies_enabled of this PolicyControllerHubConfig.

        Logs all denies and dry run failures.

        :return: The log_denies_enabled of this PolicyControllerHubConfig.
        :rtype: bool
        """
        return self._log_denies_enabled

    @log_denies_enabled.setter
    def log_denies_enabled(self, log_denies_enabled):
        """Sets the log_denies_enabled of this PolicyControllerHubConfig.

        Logs all denies and dry run failures.

        :param log_denies_enabled: The log_denies_enabled of this PolicyControllerHubConfig.
        :type log_denies_enabled: bool
        """

        self._log_denies_enabled = log_denies_enabled

    @property
    def monitoring(self):
        """Gets the monitoring of this PolicyControllerHubConfig.


        :return: The monitoring of this PolicyControllerHubConfig.
        :rtype: PolicyControllerMonitoringConfig
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this PolicyControllerHubConfig.


        :param monitoring: The monitoring of this PolicyControllerHubConfig.
        :type monitoring: PolicyControllerMonitoringConfig
        """

        self._monitoring = monitoring

    @property
    def mutation_enabled(self):
        """Gets the mutation_enabled of this PolicyControllerHubConfig.

        Enables the ability to mutate resources using Policy Controller.

        :return: The mutation_enabled of this PolicyControllerHubConfig.
        :rtype: bool
        """
        return self._mutation_enabled

    @mutation_enabled.setter
    def mutation_enabled(self, mutation_enabled):
        """Sets the mutation_enabled of this PolicyControllerHubConfig.

        Enables the ability to mutate resources using Policy Controller.

        :param mutation_enabled: The mutation_enabled of this PolicyControllerHubConfig.
        :type mutation_enabled: bool
        """

        self._mutation_enabled = mutation_enabled

    @property
    def policy_content(self):
        """Gets the policy_content of this PolicyControllerHubConfig.


        :return: The policy_content of this PolicyControllerHubConfig.
        :rtype: PolicyControllerPolicyContentSpec
        """
        return self._policy_content

    @policy_content.setter
    def policy_content(self, policy_content):
        """Sets the policy_content of this PolicyControllerHubConfig.


        :param policy_content: The policy_content of this PolicyControllerHubConfig.
        :type policy_content: PolicyControllerPolicyContentSpec
        """

        self._policy_content = policy_content

    @property
    def referential_rules_enabled(self):
        """Gets the referential_rules_enabled of this PolicyControllerHubConfig.

        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.

        :return: The referential_rules_enabled of this PolicyControllerHubConfig.
        :rtype: bool
        """
        return self._referential_rules_enabled

    @referential_rules_enabled.setter
    def referential_rules_enabled(self, referential_rules_enabled):
        """Sets the referential_rules_enabled of this PolicyControllerHubConfig.

        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.

        :param referential_rules_enabled: The referential_rules_enabled of this PolicyControllerHubConfig.
        :type referential_rules_enabled: bool
        """

        self._referential_rules_enabled = referential_rules_enabled
