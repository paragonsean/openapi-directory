# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_config_sync_state import ConfigManagementConfigSyncState
from openapi_server.models.config_management_hierarchy_controller_state import ConfigManagementHierarchyControllerState
from openapi_server.models.config_management_membership_spec import ConfigManagementMembershipSpec
from openapi_server.models.config_management_operator_state import ConfigManagementOperatorState
from openapi_server.models.config_management_policy_controller_state import ConfigManagementPolicyControllerState
from openapi_server import util


class ConfigManagementMembershipState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_name: str=None, config_sync_state: ConfigManagementConfigSyncState=None, hierarchy_controller_state: ConfigManagementHierarchyControllerState=None, membership_spec: ConfigManagementMembershipSpec=None, operator_state: ConfigManagementOperatorState=None, policy_controller_state: ConfigManagementPolicyControllerState=None):
        """ConfigManagementMembershipState - a model defined in OpenAPI

        :param cluster_name: The cluster_name of this ConfigManagementMembershipState.
        :param config_sync_state: The config_sync_state of this ConfigManagementMembershipState.
        :param hierarchy_controller_state: The hierarchy_controller_state of this ConfigManagementMembershipState.
        :param membership_spec: The membership_spec of this ConfigManagementMembershipState.
        :param operator_state: The operator_state of this ConfigManagementMembershipState.
        :param policy_controller_state: The policy_controller_state of this ConfigManagementMembershipState.
        """
        self.openapi_types = {
            'cluster_name': str,
            'config_sync_state': ConfigManagementConfigSyncState,
            'hierarchy_controller_state': ConfigManagementHierarchyControllerState,
            'membership_spec': ConfigManagementMembershipSpec,
            'operator_state': ConfigManagementOperatorState,
            'policy_controller_state': ConfigManagementPolicyControllerState
        }

        self.attribute_map = {
            'cluster_name': 'clusterName',
            'config_sync_state': 'configSyncState',
            'hierarchy_controller_state': 'hierarchyControllerState',
            'membership_spec': 'membershipSpec',
            'operator_state': 'operatorState',
            'policy_controller_state': 'policyControllerState'
        }

        self._cluster_name = cluster_name
        self._config_sync_state = config_sync_state
        self._hierarchy_controller_state = hierarchy_controller_state
        self._membership_spec = membership_spec
        self._operator_state = operator_state
        self._policy_controller_state = policy_controller_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementMembershipState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementMembershipState of this ConfigManagementMembershipState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_name(self):
        """Gets the cluster_name of this ConfigManagementMembershipState.

        This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.

        :return: The cluster_name of this ConfigManagementMembershipState.
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this ConfigManagementMembershipState.

        This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.

        :param cluster_name: The cluster_name of this ConfigManagementMembershipState.
        :type cluster_name: str
        """

        self._cluster_name = cluster_name

    @property
    def config_sync_state(self):
        """Gets the config_sync_state of this ConfigManagementMembershipState.


        :return: The config_sync_state of this ConfigManagementMembershipState.
        :rtype: ConfigManagementConfigSyncState
        """
        return self._config_sync_state

    @config_sync_state.setter
    def config_sync_state(self, config_sync_state):
        """Sets the config_sync_state of this ConfigManagementMembershipState.


        :param config_sync_state: The config_sync_state of this ConfigManagementMembershipState.
        :type config_sync_state: ConfigManagementConfigSyncState
        """

        self._config_sync_state = config_sync_state

    @property
    def hierarchy_controller_state(self):
        """Gets the hierarchy_controller_state of this ConfigManagementMembershipState.


        :return: The hierarchy_controller_state of this ConfigManagementMembershipState.
        :rtype: ConfigManagementHierarchyControllerState
        """
        return self._hierarchy_controller_state

    @hierarchy_controller_state.setter
    def hierarchy_controller_state(self, hierarchy_controller_state):
        """Sets the hierarchy_controller_state of this ConfigManagementMembershipState.


        :param hierarchy_controller_state: The hierarchy_controller_state of this ConfigManagementMembershipState.
        :type hierarchy_controller_state: ConfigManagementHierarchyControllerState
        """

        self._hierarchy_controller_state = hierarchy_controller_state

    @property
    def membership_spec(self):
        """Gets the membership_spec of this ConfigManagementMembershipState.


        :return: The membership_spec of this ConfigManagementMembershipState.
        :rtype: ConfigManagementMembershipSpec
        """
        return self._membership_spec

    @membership_spec.setter
    def membership_spec(self, membership_spec):
        """Sets the membership_spec of this ConfigManagementMembershipState.


        :param membership_spec: The membership_spec of this ConfigManagementMembershipState.
        :type membership_spec: ConfigManagementMembershipSpec
        """

        self._membership_spec = membership_spec

    @property
    def operator_state(self):
        """Gets the operator_state of this ConfigManagementMembershipState.


        :return: The operator_state of this ConfigManagementMembershipState.
        :rtype: ConfigManagementOperatorState
        """
        return self._operator_state

    @operator_state.setter
    def operator_state(self, operator_state):
        """Sets the operator_state of this ConfigManagementMembershipState.


        :param operator_state: The operator_state of this ConfigManagementMembershipState.
        :type operator_state: ConfigManagementOperatorState
        """

        self._operator_state = operator_state

    @property
    def policy_controller_state(self):
        """Gets the policy_controller_state of this ConfigManagementMembershipState.


        :return: The policy_controller_state of this ConfigManagementMembershipState.
        :rtype: ConfigManagementPolicyControllerState
        """
        return self._policy_controller_state

    @policy_controller_state.setter
    def policy_controller_state(self, policy_controller_state):
        """Sets the policy_controller_state of this ConfigManagementMembershipState.


        :param policy_controller_state: The policy_controller_state of this ConfigManagementMembershipState.
        :type policy_controller_state: ConfigManagementPolicyControllerState
        """

        self._policy_controller_state = policy_controller_state
