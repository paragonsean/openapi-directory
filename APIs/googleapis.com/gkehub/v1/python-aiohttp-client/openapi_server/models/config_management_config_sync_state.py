# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_config_sync_deployment_state import ConfigManagementConfigSyncDeploymentState
from openapi_server.models.config_management_config_sync_error import ConfigManagementConfigSyncError
from openapi_server.models.config_management_config_sync_version import ConfigManagementConfigSyncVersion
from openapi_server.models.config_management_sync_state import ConfigManagementSyncState
from openapi_server import util


class ConfigManagementConfigSyncState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_state: ConfigManagementConfigSyncDeploymentState=None, errors: List[ConfigManagementConfigSyncError]=None, reposync_crd: str=None, rootsync_crd: str=None, state: str=None, sync_state: ConfigManagementSyncState=None, version: ConfigManagementConfigSyncVersion=None):
        """ConfigManagementConfigSyncState - a model defined in OpenAPI

        :param deployment_state: The deployment_state of this ConfigManagementConfigSyncState.
        :param errors: The errors of this ConfigManagementConfigSyncState.
        :param reposync_crd: The reposync_crd of this ConfigManagementConfigSyncState.
        :param rootsync_crd: The rootsync_crd of this ConfigManagementConfigSyncState.
        :param state: The state of this ConfigManagementConfigSyncState.
        :param sync_state: The sync_state of this ConfigManagementConfigSyncState.
        :param version: The version of this ConfigManagementConfigSyncState.
        """
        self.openapi_types = {
            'deployment_state': ConfigManagementConfigSyncDeploymentState,
            'errors': List[ConfigManagementConfigSyncError],
            'reposync_crd': str,
            'rootsync_crd': str,
            'state': str,
            'sync_state': ConfigManagementSyncState,
            'version': ConfigManagementConfigSyncVersion
        }

        self.attribute_map = {
            'deployment_state': 'deploymentState',
            'errors': 'errors',
            'reposync_crd': 'reposyncCrd',
            'rootsync_crd': 'rootsyncCrd',
            'state': 'state',
            'sync_state': 'syncState',
            'version': 'version'
        }

        self._deployment_state = deployment_state
        self._errors = errors
        self._reposync_crd = reposync_crd
        self._rootsync_crd = rootsync_crd
        self._state = state
        self._sync_state = sync_state
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementConfigSyncState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementConfigSyncState of this ConfigManagementConfigSyncState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_state(self):
        """Gets the deployment_state of this ConfigManagementConfigSyncState.


        :return: The deployment_state of this ConfigManagementConfigSyncState.
        :rtype: ConfigManagementConfigSyncDeploymentState
        """
        return self._deployment_state

    @deployment_state.setter
    def deployment_state(self, deployment_state):
        """Sets the deployment_state of this ConfigManagementConfigSyncState.


        :param deployment_state: The deployment_state of this ConfigManagementConfigSyncState.
        :type deployment_state: ConfigManagementConfigSyncDeploymentState
        """

        self._deployment_state = deployment_state

    @property
    def errors(self):
        """Gets the errors of this ConfigManagementConfigSyncState.

        Errors pertaining to the installation of Config Sync.

        :return: The errors of this ConfigManagementConfigSyncState.
        :rtype: List[ConfigManagementConfigSyncError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ConfigManagementConfigSyncState.

        Errors pertaining to the installation of Config Sync.

        :param errors: The errors of this ConfigManagementConfigSyncState.
        :type errors: List[ConfigManagementConfigSyncError]
        """

        self._errors = errors

    @property
    def reposync_crd(self):
        """Gets the reposync_crd of this ConfigManagementConfigSyncState.

        The state of the Reposync CRD

        :return: The reposync_crd of this ConfigManagementConfigSyncState.
        :rtype: str
        """
        return self._reposync_crd

    @reposync_crd.setter
    def reposync_crd(self, reposync_crd):
        """Sets the reposync_crd of this ConfigManagementConfigSyncState.

        The state of the Reposync CRD

        :param reposync_crd: The reposync_crd of this ConfigManagementConfigSyncState.
        :type reposync_crd: str
        """
        allowed_values = ["CRD_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "TERMINATING", "INSTALLING"]  # noqa: E501
        if reposync_crd not in allowed_values:
            raise ValueError(
                "Invalid value for `reposync_crd` ({0}), must be one of {1}"
                .format(reposync_crd, allowed_values)
            )

        self._reposync_crd = reposync_crd

    @property
    def rootsync_crd(self):
        """Gets the rootsync_crd of this ConfigManagementConfigSyncState.

        The state of the RootSync CRD

        :return: The rootsync_crd of this ConfigManagementConfigSyncState.
        :rtype: str
        """
        return self._rootsync_crd

    @rootsync_crd.setter
    def rootsync_crd(self, rootsync_crd):
        """Sets the rootsync_crd of this ConfigManagementConfigSyncState.

        The state of the RootSync CRD

        :param rootsync_crd: The rootsync_crd of this ConfigManagementConfigSyncState.
        :type rootsync_crd: str
        """
        allowed_values = ["CRD_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "TERMINATING", "INSTALLING"]  # noqa: E501
        if rootsync_crd not in allowed_values:
            raise ValueError(
                "Invalid value for `rootsync_crd` ({0}), must be one of {1}"
                .format(rootsync_crd, allowed_values)
            )

        self._rootsync_crd = rootsync_crd

    @property
    def state(self):
        """Gets the state of this ConfigManagementConfigSyncState.

        The state of CS This field summarizes the other fields in this message.

        :return: The state of this ConfigManagementConfigSyncState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConfigManagementConfigSyncState.

        The state of CS This field summarizes the other fields in this message.

        :param state: The state of this ConfigManagementConfigSyncState.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CONFIG_SYNC_NOT_INSTALLED", "CONFIG_SYNC_INSTALLED", "CONFIG_SYNC_ERROR", "CONFIG_SYNC_PENDING"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def sync_state(self):
        """Gets the sync_state of this ConfigManagementConfigSyncState.


        :return: The sync_state of this ConfigManagementConfigSyncState.
        :rtype: ConfigManagementSyncState
        """
        return self._sync_state

    @sync_state.setter
    def sync_state(self, sync_state):
        """Sets the sync_state of this ConfigManagementConfigSyncState.


        :param sync_state: The sync_state of this ConfigManagementConfigSyncState.
        :type sync_state: ConfigManagementSyncState
        """

        self._sync_state = sync_state

    @property
    def version(self):
        """Gets the version of this ConfigManagementConfigSyncState.


        :return: The version of this ConfigManagementConfigSyncState.
        :rtype: ConfigManagementConfigSyncVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigManagementConfigSyncState.


        :param version: The version of this ConfigManagementConfigSyncState.
        :type version: ConfigManagementConfigSyncVersion
        """

        self._version = version
