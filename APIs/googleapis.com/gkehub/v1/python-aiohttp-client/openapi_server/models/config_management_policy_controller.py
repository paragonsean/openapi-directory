# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_policy_controller_monitoring import ConfigManagementPolicyControllerMonitoring
from openapi_server import util


class ConfigManagementPolicyController(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audit_interval_seconds: str=None, enabled: bool=None, exemptable_namespaces: List[str]=None, log_denies_enabled: bool=None, monitoring: ConfigManagementPolicyControllerMonitoring=None, mutation_enabled: bool=None, referential_rules_enabled: bool=None, template_library_installed: bool=None, update_time: str=None):
        """ConfigManagementPolicyController - a model defined in OpenAPI

        :param audit_interval_seconds: The audit_interval_seconds of this ConfigManagementPolicyController.
        :param enabled: The enabled of this ConfigManagementPolicyController.
        :param exemptable_namespaces: The exemptable_namespaces of this ConfigManagementPolicyController.
        :param log_denies_enabled: The log_denies_enabled of this ConfigManagementPolicyController.
        :param monitoring: The monitoring of this ConfigManagementPolicyController.
        :param mutation_enabled: The mutation_enabled of this ConfigManagementPolicyController.
        :param referential_rules_enabled: The referential_rules_enabled of this ConfigManagementPolicyController.
        :param template_library_installed: The template_library_installed of this ConfigManagementPolicyController.
        :param update_time: The update_time of this ConfigManagementPolicyController.
        """
        self.openapi_types = {
            'audit_interval_seconds': str,
            'enabled': bool,
            'exemptable_namespaces': List[str],
            'log_denies_enabled': bool,
            'monitoring': ConfigManagementPolicyControllerMonitoring,
            'mutation_enabled': bool,
            'referential_rules_enabled': bool,
            'template_library_installed': bool,
            'update_time': str
        }

        self.attribute_map = {
            'audit_interval_seconds': 'auditIntervalSeconds',
            'enabled': 'enabled',
            'exemptable_namespaces': 'exemptableNamespaces',
            'log_denies_enabled': 'logDeniesEnabled',
            'monitoring': 'monitoring',
            'mutation_enabled': 'mutationEnabled',
            'referential_rules_enabled': 'referentialRulesEnabled',
            'template_library_installed': 'templateLibraryInstalled',
            'update_time': 'updateTime'
        }

        self._audit_interval_seconds = audit_interval_seconds
        self._enabled = enabled
        self._exemptable_namespaces = exemptable_namespaces
        self._log_denies_enabled = log_denies_enabled
        self._monitoring = monitoring
        self._mutation_enabled = mutation_enabled
        self._referential_rules_enabled = referential_rules_enabled
        self._template_library_installed = template_library_installed
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementPolicyController':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementPolicyController of this ConfigManagementPolicyController.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audit_interval_seconds(self):
        """Gets the audit_interval_seconds of this ConfigManagementPolicyController.

        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.

        :return: The audit_interval_seconds of this ConfigManagementPolicyController.
        :rtype: str
        """
        return self._audit_interval_seconds

    @audit_interval_seconds.setter
    def audit_interval_seconds(self, audit_interval_seconds):
        """Sets the audit_interval_seconds of this ConfigManagementPolicyController.

        Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.

        :param audit_interval_seconds: The audit_interval_seconds of this ConfigManagementPolicyController.
        :type audit_interval_seconds: str
        """

        self._audit_interval_seconds = audit_interval_seconds

    @property
    def enabled(self):
        """Gets the enabled of this ConfigManagementPolicyController.

        Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.

        :return: The enabled of this ConfigManagementPolicyController.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConfigManagementPolicyController.

        Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.

        :param enabled: The enabled of this ConfigManagementPolicyController.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def exemptable_namespaces(self):
        """Gets the exemptable_namespaces of this ConfigManagementPolicyController.

        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.

        :return: The exemptable_namespaces of this ConfigManagementPolicyController.
        :rtype: List[str]
        """
        return self._exemptable_namespaces

    @exemptable_namespaces.setter
    def exemptable_namespaces(self, exemptable_namespaces):
        """Sets the exemptable_namespaces of this ConfigManagementPolicyController.

        The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.

        :param exemptable_namespaces: The exemptable_namespaces of this ConfigManagementPolicyController.
        :type exemptable_namespaces: List[str]
        """

        self._exemptable_namespaces = exemptable_namespaces

    @property
    def log_denies_enabled(self):
        """Gets the log_denies_enabled of this ConfigManagementPolicyController.

        Logs all denies and dry run failures.

        :return: The log_denies_enabled of this ConfigManagementPolicyController.
        :rtype: bool
        """
        return self._log_denies_enabled

    @log_denies_enabled.setter
    def log_denies_enabled(self, log_denies_enabled):
        """Sets the log_denies_enabled of this ConfigManagementPolicyController.

        Logs all denies and dry run failures.

        :param log_denies_enabled: The log_denies_enabled of this ConfigManagementPolicyController.
        :type log_denies_enabled: bool
        """

        self._log_denies_enabled = log_denies_enabled

    @property
    def monitoring(self):
        """Gets the monitoring of this ConfigManagementPolicyController.


        :return: The monitoring of this ConfigManagementPolicyController.
        :rtype: ConfigManagementPolicyControllerMonitoring
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this ConfigManagementPolicyController.


        :param monitoring: The monitoring of this ConfigManagementPolicyController.
        :type monitoring: ConfigManagementPolicyControllerMonitoring
        """

        self._monitoring = monitoring

    @property
    def mutation_enabled(self):
        """Gets the mutation_enabled of this ConfigManagementPolicyController.

        Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.

        :return: The mutation_enabled of this ConfigManagementPolicyController.
        :rtype: bool
        """
        return self._mutation_enabled

    @mutation_enabled.setter
    def mutation_enabled(self, mutation_enabled):
        """Sets the mutation_enabled of this ConfigManagementPolicyController.

        Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.

        :param mutation_enabled: The mutation_enabled of this ConfigManagementPolicyController.
        :type mutation_enabled: bool
        """

        self._mutation_enabled = mutation_enabled

    @property
    def referential_rules_enabled(self):
        """Gets the referential_rules_enabled of this ConfigManagementPolicyController.

        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.

        :return: The referential_rules_enabled of this ConfigManagementPolicyController.
        :rtype: bool
        """
        return self._referential_rules_enabled

    @referential_rules_enabled.setter
    def referential_rules_enabled(self, referential_rules_enabled):
        """Sets the referential_rules_enabled of this ConfigManagementPolicyController.

        Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.

        :param referential_rules_enabled: The referential_rules_enabled of this ConfigManagementPolicyController.
        :type referential_rules_enabled: bool
        """

        self._referential_rules_enabled = referential_rules_enabled

    @property
    def template_library_installed(self):
        """Gets the template_library_installed of this ConfigManagementPolicyController.

        Installs the default template library along with Policy Controller.

        :return: The template_library_installed of this ConfigManagementPolicyController.
        :rtype: bool
        """
        return self._template_library_installed

    @template_library_installed.setter
    def template_library_installed(self, template_library_installed):
        """Sets the template_library_installed of this ConfigManagementPolicyController.

        Installs the default template library along with Policy Controller.

        :param template_library_installed: The template_library_installed of this ConfigManagementPolicyController.
        :type template_library_installed: bool
        """

        self._template_library_installed = template_library_installed

    @property
    def update_time(self):
        """Gets the update_time of this ConfigManagementPolicyController.

        Output only. Last time this membership spec was updated.

        :return: The update_time of this ConfigManagementPolicyController.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ConfigManagementPolicyController.

        Output only. Last time this membership spec was updated.

        :param update_time: The update_time of this ConfigManagementPolicyController.
        :type update_time: str
        """

        self._update_time = update_time
