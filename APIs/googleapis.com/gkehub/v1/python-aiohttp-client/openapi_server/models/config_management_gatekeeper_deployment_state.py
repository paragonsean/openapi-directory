# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementGatekeeperDeploymentState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gatekeeper_audit: str=None, gatekeeper_controller_manager_state: str=None, gatekeeper_mutation: str=None):
        """ConfigManagementGatekeeperDeploymentState - a model defined in OpenAPI

        :param gatekeeper_audit: The gatekeeper_audit of this ConfigManagementGatekeeperDeploymentState.
        :param gatekeeper_controller_manager_state: The gatekeeper_controller_manager_state of this ConfigManagementGatekeeperDeploymentState.
        :param gatekeeper_mutation: The gatekeeper_mutation of this ConfigManagementGatekeeperDeploymentState.
        """
        self.openapi_types = {
            'gatekeeper_audit': str,
            'gatekeeper_controller_manager_state': str,
            'gatekeeper_mutation': str
        }

        self.attribute_map = {
            'gatekeeper_audit': 'gatekeeperAudit',
            'gatekeeper_controller_manager_state': 'gatekeeperControllerManagerState',
            'gatekeeper_mutation': 'gatekeeperMutation'
        }

        self._gatekeeper_audit = gatekeeper_audit
        self._gatekeeper_controller_manager_state = gatekeeper_controller_manager_state
        self._gatekeeper_mutation = gatekeeper_mutation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementGatekeeperDeploymentState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementGatekeeperDeploymentState of this ConfigManagementGatekeeperDeploymentState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gatekeeper_audit(self):
        """Gets the gatekeeper_audit of this ConfigManagementGatekeeperDeploymentState.

        Status of gatekeeper-audit deployment.

        :return: The gatekeeper_audit of this ConfigManagementGatekeeperDeploymentState.
        :rtype: str
        """
        return self._gatekeeper_audit

    @gatekeeper_audit.setter
    def gatekeeper_audit(self, gatekeeper_audit):
        """Sets the gatekeeper_audit of this ConfigManagementGatekeeperDeploymentState.

        Status of gatekeeper-audit deployment.

        :param gatekeeper_audit: The gatekeeper_audit of this ConfigManagementGatekeeperDeploymentState.
        :type gatekeeper_audit: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if gatekeeper_audit not in allowed_values:
            raise ValueError(
                "Invalid value for `gatekeeper_audit` ({0}), must be one of {1}"
                .format(gatekeeper_audit, allowed_values)
            )

        self._gatekeeper_audit = gatekeeper_audit

    @property
    def gatekeeper_controller_manager_state(self):
        """Gets the gatekeeper_controller_manager_state of this ConfigManagementGatekeeperDeploymentState.

        Status of gatekeeper-controller-manager pod.

        :return: The gatekeeper_controller_manager_state of this ConfigManagementGatekeeperDeploymentState.
        :rtype: str
        """
        return self._gatekeeper_controller_manager_state

    @gatekeeper_controller_manager_state.setter
    def gatekeeper_controller_manager_state(self, gatekeeper_controller_manager_state):
        """Sets the gatekeeper_controller_manager_state of this ConfigManagementGatekeeperDeploymentState.

        Status of gatekeeper-controller-manager pod.

        :param gatekeeper_controller_manager_state: The gatekeeper_controller_manager_state of this ConfigManagementGatekeeperDeploymentState.
        :type gatekeeper_controller_manager_state: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if gatekeeper_controller_manager_state not in allowed_values:
            raise ValueError(
                "Invalid value for `gatekeeper_controller_manager_state` ({0}), must be one of {1}"
                .format(gatekeeper_controller_manager_state, allowed_values)
            )

        self._gatekeeper_controller_manager_state = gatekeeper_controller_manager_state

    @property
    def gatekeeper_mutation(self):
        """Gets the gatekeeper_mutation of this ConfigManagementGatekeeperDeploymentState.

        Status of the pod serving the mutation webhook.

        :return: The gatekeeper_mutation of this ConfigManagementGatekeeperDeploymentState.
        :rtype: str
        """
        return self._gatekeeper_mutation

    @gatekeeper_mutation.setter
    def gatekeeper_mutation(self, gatekeeper_mutation):
        """Sets the gatekeeper_mutation of this ConfigManagementGatekeeperDeploymentState.

        Status of the pod serving the mutation webhook.

        :param gatekeeper_mutation: The gatekeeper_mutation of this ConfigManagementGatekeeperDeploymentState.
        :type gatekeeper_mutation: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if gatekeeper_mutation not in allowed_values:
            raise ValueError(
                "Invalid value for `gatekeeper_mutation` ({0}), must be one of {1}"
                .format(gatekeeper_mutation, allowed_values)
            )

        self._gatekeeper_mutation = gatekeeper_mutation
