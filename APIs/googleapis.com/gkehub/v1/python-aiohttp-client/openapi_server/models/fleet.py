# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.default_cluster_config import DefaultClusterConfig
from openapi_server.models.fleet_lifecycle_state import FleetLifecycleState
from openapi_server import util


class Fleet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, default_cluster_config: DefaultClusterConfig=None, delete_time: str=None, display_name: str=None, labels: Dict[str, str]=None, name: str=None, state: FleetLifecycleState=None, uid: str=None, update_time: str=None):
        """Fleet - a model defined in OpenAPI

        :param create_time: The create_time of this Fleet.
        :param default_cluster_config: The default_cluster_config of this Fleet.
        :param delete_time: The delete_time of this Fleet.
        :param display_name: The display_name of this Fleet.
        :param labels: The labels of this Fleet.
        :param name: The name of this Fleet.
        :param state: The state of this Fleet.
        :param uid: The uid of this Fleet.
        :param update_time: The update_time of this Fleet.
        """
        self.openapi_types = {
            'create_time': str,
            'default_cluster_config': DefaultClusterConfig,
            'delete_time': str,
            'display_name': str,
            'labels': Dict[str, str],
            'name': str,
            'state': FleetLifecycleState,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'default_cluster_config': 'defaultClusterConfig',
            'delete_time': 'deleteTime',
            'display_name': 'displayName',
            'labels': 'labels',
            'name': 'name',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._default_cluster_config = default_cluster_config
        self._delete_time = delete_time
        self._display_name = display_name
        self._labels = labels
        self._name = name
        self._state = state
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fleet':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Fleet of this Fleet.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Fleet.

        Output only. When the Fleet was created.

        :return: The create_time of this Fleet.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Fleet.

        Output only. When the Fleet was created.

        :param create_time: The create_time of this Fleet.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def default_cluster_config(self):
        """Gets the default_cluster_config of this Fleet.


        :return: The default_cluster_config of this Fleet.
        :rtype: DefaultClusterConfig
        """
        return self._default_cluster_config

    @default_cluster_config.setter
    def default_cluster_config(self, default_cluster_config):
        """Sets the default_cluster_config of this Fleet.


        :param default_cluster_config: The default_cluster_config of this Fleet.
        :type default_cluster_config: DefaultClusterConfig
        """

        self._default_cluster_config = default_cluster_config

    @property
    def delete_time(self):
        """Gets the delete_time of this Fleet.

        Output only. When the Fleet was deleted.

        :return: The delete_time of this Fleet.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Fleet.

        Output only. When the Fleet was deleted.

        :param delete_time: The delete_time of this Fleet.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def display_name(self):
        """Gets the display_name of this Fleet.

        Optional. A user-assigned display name of the Fleet. When present, it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `Production Fleet`

        :return: The display_name of this Fleet.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Fleet.

        Optional. A user-assigned display name of the Fleet. When present, it must be between 4 to 30 characters. Allowed characters are: lowercase and uppercase letters, numbers, hyphen, single-quote, double-quote, space, and exclamation point. Example: `Production Fleet`

        :param display_name: The display_name of this Fleet.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def labels(self):
        """Gets the labels of this Fleet.

        Optional. Labels for this Fleet.

        :return: The labels of this Fleet.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Fleet.

        Optional. Labels for this Fleet.

        :param labels: The labels of this Fleet.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Fleet.

        Output only. The full, unique resource name of this fleet in the format of `projects/{project}/locations/{location}/fleets/{fleet}`. Each Google Cloud project can have at most one fleet resource, named \"default\".

        :return: The name of this Fleet.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Fleet.

        Output only. The full, unique resource name of this fleet in the format of `projects/{project}/locations/{location}/fleets/{fleet}`. Each Google Cloud project can have at most one fleet resource, named \"default\".

        :param name: The name of this Fleet.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Fleet.


        :return: The state of this Fleet.
        :rtype: FleetLifecycleState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Fleet.


        :param state: The state of this Fleet.
        :type state: FleetLifecycleState
        """

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this Fleet.

        Output only. Google-generated UUID for this resource. This is unique across all Fleet resources. If a Fleet resource is deleted and another resource with the same name is created, it gets a different uid.

        :return: The uid of this Fleet.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Fleet.

        Output only. Google-generated UUID for this resource. This is unique across all Fleet resources. If a Fleet resource is deleted and another resource with the same name is created, it gets a different uid.

        :param uid: The uid of this Fleet.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Fleet.

        Output only. When the Fleet was last updated.

        :return: The update_time of this Fleet.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Fleet.

        Output only. When the Fleet was last updated.

        :param update_time: The update_time of this Fleet.
        :type update_time: str
        """

        self._update_time = update_time
