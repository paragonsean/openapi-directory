# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_controller_on_cluster_state import PolicyControllerOnClusterState
from openapi_server import util


class PolicyControllerPolicyContentState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundle_states: Dict[str, PolicyControllerOnClusterState]=None, referential_sync_config_state: PolicyControllerOnClusterState=None, template_library_state: PolicyControllerOnClusterState=None):
        """PolicyControllerPolicyContentState - a model defined in OpenAPI

        :param bundle_states: The bundle_states of this PolicyControllerPolicyContentState.
        :param referential_sync_config_state: The referential_sync_config_state of this PolicyControllerPolicyContentState.
        :param template_library_state: The template_library_state of this PolicyControllerPolicyContentState.
        """
        self.openapi_types = {
            'bundle_states': Dict[str, PolicyControllerOnClusterState],
            'referential_sync_config_state': PolicyControllerOnClusterState,
            'template_library_state': PolicyControllerOnClusterState
        }

        self.attribute_map = {
            'bundle_states': 'bundleStates',
            'referential_sync_config_state': 'referentialSyncConfigState',
            'template_library_state': 'templateLibraryState'
        }

        self._bundle_states = bundle_states
        self._referential_sync_config_state = referential_sync_config_state
        self._template_library_state = template_library_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerPolicyContentState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerPolicyContentState of this PolicyControllerPolicyContentState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundle_states(self):
        """Gets the bundle_states of this PolicyControllerPolicyContentState.

        The state of the any bundles included in the chosen version of the manifest

        :return: The bundle_states of this PolicyControllerPolicyContentState.
        :rtype: Dict[str, PolicyControllerOnClusterState]
        """
        return self._bundle_states

    @bundle_states.setter
    def bundle_states(self, bundle_states):
        """Sets the bundle_states of this PolicyControllerPolicyContentState.

        The state of the any bundles included in the chosen version of the manifest

        :param bundle_states: The bundle_states of this PolicyControllerPolicyContentState.
        :type bundle_states: Dict[str, PolicyControllerOnClusterState]
        """

        self._bundle_states = bundle_states

    @property
    def referential_sync_config_state(self):
        """Gets the referential_sync_config_state of this PolicyControllerPolicyContentState.


        :return: The referential_sync_config_state of this PolicyControllerPolicyContentState.
        :rtype: PolicyControllerOnClusterState
        """
        return self._referential_sync_config_state

    @referential_sync_config_state.setter
    def referential_sync_config_state(self, referential_sync_config_state):
        """Sets the referential_sync_config_state of this PolicyControllerPolicyContentState.


        :param referential_sync_config_state: The referential_sync_config_state of this PolicyControllerPolicyContentState.
        :type referential_sync_config_state: PolicyControllerOnClusterState
        """

        self._referential_sync_config_state = referential_sync_config_state

    @property
    def template_library_state(self):
        """Gets the template_library_state of this PolicyControllerPolicyContentState.


        :return: The template_library_state of this PolicyControllerPolicyContentState.
        :rtype: PolicyControllerOnClusterState
        """
        return self._template_library_state

    @template_library_state.setter
    def template_library_state(self, template_library_state):
        """Sets the template_library_state of this PolicyControllerPolicyContentState.


        :param template_library_state: The template_library_state of this PolicyControllerPolicyContentState.
        :type template_library_state: PolicyControllerOnClusterState
        """

        self._template_library_state = template_library_state
