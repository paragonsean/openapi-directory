# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_sync_error import ConfigManagementSyncError
from openapi_server import util


class ConfigManagementSyncState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, errors: List[ConfigManagementSyncError]=None, import_token: str=None, last_sync: str=None, last_sync_time: str=None, source_token: str=None, sync_token: str=None):
        """ConfigManagementSyncState - a model defined in OpenAPI

        :param code: The code of this ConfigManagementSyncState.
        :param errors: The errors of this ConfigManagementSyncState.
        :param import_token: The import_token of this ConfigManagementSyncState.
        :param last_sync: The last_sync of this ConfigManagementSyncState.
        :param last_sync_time: The last_sync_time of this ConfigManagementSyncState.
        :param source_token: The source_token of this ConfigManagementSyncState.
        :param sync_token: The sync_token of this ConfigManagementSyncState.
        """
        self.openapi_types = {
            'code': str,
            'errors': List[ConfigManagementSyncError],
            'import_token': str,
            'last_sync': str,
            'last_sync_time': str,
            'source_token': str,
            'sync_token': str
        }

        self.attribute_map = {
            'code': 'code',
            'errors': 'errors',
            'import_token': 'importToken',
            'last_sync': 'lastSync',
            'last_sync_time': 'lastSyncTime',
            'source_token': 'sourceToken',
            'sync_token': 'syncToken'
        }

        self._code = code
        self._errors = errors
        self._import_token = import_token
        self._last_sync = last_sync
        self._last_sync_time = last_sync_time
        self._source_token = source_token
        self._sync_token = sync_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementSyncState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementSyncState of this ConfigManagementSyncState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ConfigManagementSyncState.

        Sync status code

        :return: The code of this ConfigManagementSyncState.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ConfigManagementSyncState.

        Sync status code

        :param code: The code of this ConfigManagementSyncState.
        :type code: str
        """
        allowed_values = ["SYNC_CODE_UNSPECIFIED", "SYNCED", "PENDING", "ERROR", "NOT_CONFIGURED", "NOT_INSTALLED", "UNAUTHORIZED", "UNREACHABLE"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def errors(self):
        """Gets the errors of this ConfigManagementSyncState.

        A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.

        :return: The errors of this ConfigManagementSyncState.
        :rtype: List[ConfigManagementSyncError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ConfigManagementSyncState.

        A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.

        :param errors: The errors of this ConfigManagementSyncState.
        :type errors: List[ConfigManagementSyncError]
        """

        self._errors = errors

    @property
    def import_token(self):
        """Gets the import_token of this ConfigManagementSyncState.

        Token indicating the state of the importer.

        :return: The import_token of this ConfigManagementSyncState.
        :rtype: str
        """
        return self._import_token

    @import_token.setter
    def import_token(self, import_token):
        """Sets the import_token of this ConfigManagementSyncState.

        Token indicating the state of the importer.

        :param import_token: The import_token of this ConfigManagementSyncState.
        :type import_token: str
        """

        self._import_token = import_token

    @property
    def last_sync(self):
        """Gets the last_sync of this ConfigManagementSyncState.

        Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String

        :return: The last_sync of this ConfigManagementSyncState.
        :rtype: str
        """
        return self._last_sync

    @last_sync.setter
    def last_sync(self, last_sync):
        """Sets the last_sync of this ConfigManagementSyncState.

        Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String

        :param last_sync: The last_sync of this ConfigManagementSyncState.
        :type last_sync: str
        """

        self._last_sync = last_sync

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this ConfigManagementSyncState.

        Timestamp type of when ACM last successfully synced the repo

        :return: The last_sync_time of this ConfigManagementSyncState.
        :rtype: str
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this ConfigManagementSyncState.

        Timestamp type of when ACM last successfully synced the repo

        :param last_sync_time: The last_sync_time of this ConfigManagementSyncState.
        :type last_sync_time: str
        """

        self._last_sync_time = last_sync_time

    @property
    def source_token(self):
        """Gets the source_token of this ConfigManagementSyncState.

        Token indicating the state of the repo.

        :return: The source_token of this ConfigManagementSyncState.
        :rtype: str
        """
        return self._source_token

    @source_token.setter
    def source_token(self, source_token):
        """Sets the source_token of this ConfigManagementSyncState.

        Token indicating the state of the repo.

        :param source_token: The source_token of this ConfigManagementSyncState.
        :type source_token: str
        """

        self._source_token = source_token

    @property
    def sync_token(self):
        """Gets the sync_token of this ConfigManagementSyncState.

        Token indicating the state of the syncer.

        :return: The sync_token of this ConfigManagementSyncState.
        :rtype: str
        """
        return self._sync_token

    @sync_token.setter
    def sync_token(self, sync_token):
        """Sets the sync_token of this ConfigManagementSyncState.

        Token indicating the state of the syncer.

        :param sync_token: The sync_token of this ConfigManagementSyncState.
        :type sync_token: str
        """

        self._sync_token = sync_token
