# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_controller_resource_requirements import PolicyControllerResourceRequirements
from openapi_server.models.policy_controller_toleration import PolicyControllerToleration
from openapi_server import util


class PolicyControllerPolicyControllerDeploymentConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_resources: PolicyControllerResourceRequirements=None, pod_affinity: str=None, pod_anti_affinity: bool=None, pod_tolerations: List[PolicyControllerToleration]=None, replica_count: str=None):
        """PolicyControllerPolicyControllerDeploymentConfig - a model defined in OpenAPI

        :param container_resources: The container_resources of this PolicyControllerPolicyControllerDeploymentConfig.
        :param pod_affinity: The pod_affinity of this PolicyControllerPolicyControllerDeploymentConfig.
        :param pod_anti_affinity: The pod_anti_affinity of this PolicyControllerPolicyControllerDeploymentConfig.
        :param pod_tolerations: The pod_tolerations of this PolicyControllerPolicyControllerDeploymentConfig.
        :param replica_count: The replica_count of this PolicyControllerPolicyControllerDeploymentConfig.
        """
        self.openapi_types = {
            'container_resources': PolicyControllerResourceRequirements,
            'pod_affinity': str,
            'pod_anti_affinity': bool,
            'pod_tolerations': List[PolicyControllerToleration],
            'replica_count': str
        }

        self.attribute_map = {
            'container_resources': 'containerResources',
            'pod_affinity': 'podAffinity',
            'pod_anti_affinity': 'podAntiAffinity',
            'pod_tolerations': 'podTolerations',
            'replica_count': 'replicaCount'
        }

        self._container_resources = container_resources
        self._pod_affinity = pod_affinity
        self._pod_anti_affinity = pod_anti_affinity
        self._pod_tolerations = pod_tolerations
        self._replica_count = replica_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerPolicyControllerDeploymentConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerPolicyControllerDeploymentConfig of this PolicyControllerPolicyControllerDeploymentConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_resources(self):
        """Gets the container_resources of this PolicyControllerPolicyControllerDeploymentConfig.


        :return: The container_resources of this PolicyControllerPolicyControllerDeploymentConfig.
        :rtype: PolicyControllerResourceRequirements
        """
        return self._container_resources

    @container_resources.setter
    def container_resources(self, container_resources):
        """Sets the container_resources of this PolicyControllerPolicyControllerDeploymentConfig.


        :param container_resources: The container_resources of this PolicyControllerPolicyControllerDeploymentConfig.
        :type container_resources: PolicyControllerResourceRequirements
        """

        self._container_resources = container_resources

    @property
    def pod_affinity(self):
        """Gets the pod_affinity of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod affinity configuration.

        :return: The pod_affinity of this PolicyControllerPolicyControllerDeploymentConfig.
        :rtype: str
        """
        return self._pod_affinity

    @pod_affinity.setter
    def pod_affinity(self, pod_affinity):
        """Sets the pod_affinity of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod affinity configuration.

        :param pod_affinity: The pod_affinity of this PolicyControllerPolicyControllerDeploymentConfig.
        :type pod_affinity: str
        """
        allowed_values = ["AFFINITY_UNSPECIFIED", "NO_AFFINITY", "ANTI_AFFINITY"]  # noqa: E501
        if pod_affinity not in allowed_values:
            raise ValueError(
                "Invalid value for `pod_affinity` ({0}), must be one of {1}"
                .format(pod_affinity, allowed_values)
            )

        self._pod_affinity = pod_affinity

    @property
    def pod_anti_affinity(self):
        """Gets the pod_anti_affinity of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod anti-affinity enablement. Deprecated: use `pod_affinity` instead.

        :return: The pod_anti_affinity of this PolicyControllerPolicyControllerDeploymentConfig.
        :rtype: bool
        """
        return self._pod_anti_affinity

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, pod_anti_affinity):
        """Sets the pod_anti_affinity of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod anti-affinity enablement. Deprecated: use `pod_affinity` instead.

        :param pod_anti_affinity: The pod_anti_affinity of this PolicyControllerPolicyControllerDeploymentConfig.
        :type pod_anti_affinity: bool
        """

        self._pod_anti_affinity = pod_anti_affinity

    @property
    def pod_tolerations(self):
        """Gets the pod_tolerations of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod tolerations of node taints.

        :return: The pod_tolerations of this PolicyControllerPolicyControllerDeploymentConfig.
        :rtype: List[PolicyControllerToleration]
        """
        return self._pod_tolerations

    @pod_tolerations.setter
    def pod_tolerations(self, pod_tolerations):
        """Sets the pod_tolerations of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod tolerations of node taints.

        :param pod_tolerations: The pod_tolerations of this PolicyControllerPolicyControllerDeploymentConfig.
        :type pod_tolerations: List[PolicyControllerToleration]
        """

        self._pod_tolerations = pod_tolerations

    @property
    def replica_count(self):
        """Gets the replica_count of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod replica count.

        :return: The replica_count of this PolicyControllerPolicyControllerDeploymentConfig.
        :rtype: str
        """
        return self._replica_count

    @replica_count.setter
    def replica_count(self, replica_count):
        """Sets the replica_count of this PolicyControllerPolicyControllerDeploymentConfig.

        Pod replica count.

        :param replica_count: The replica_count of this PolicyControllerPolicyControllerDeploymentConfig.
        :type replica_count: str
        """

        self._replica_count = replica_count
