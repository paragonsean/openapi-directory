# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_gatekeeper_deployment_state import ConfigManagementGatekeeperDeploymentState
from openapi_server.models.config_management_policy_controller_migration import ConfigManagementPolicyControllerMigration
from openapi_server.models.config_management_policy_controller_version import ConfigManagementPolicyControllerVersion
from openapi_server import util


class ConfigManagementPolicyControllerState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_state: ConfigManagementGatekeeperDeploymentState=None, migration: ConfigManagementPolicyControllerMigration=None, version: ConfigManagementPolicyControllerVersion=None):
        """ConfigManagementPolicyControllerState - a model defined in OpenAPI

        :param deployment_state: The deployment_state of this ConfigManagementPolicyControllerState.
        :param migration: The migration of this ConfigManagementPolicyControllerState.
        :param version: The version of this ConfigManagementPolicyControllerState.
        """
        self.openapi_types = {
            'deployment_state': ConfigManagementGatekeeperDeploymentState,
            'migration': ConfigManagementPolicyControllerMigration,
            'version': ConfigManagementPolicyControllerVersion
        }

        self.attribute_map = {
            'deployment_state': 'deploymentState',
            'migration': 'migration',
            'version': 'version'
        }

        self._deployment_state = deployment_state
        self._migration = migration
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementPolicyControllerState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementPolicyControllerState of this ConfigManagementPolicyControllerState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_state(self):
        """Gets the deployment_state of this ConfigManagementPolicyControllerState.


        :return: The deployment_state of this ConfigManagementPolicyControllerState.
        :rtype: ConfigManagementGatekeeperDeploymentState
        """
        return self._deployment_state

    @deployment_state.setter
    def deployment_state(self, deployment_state):
        """Sets the deployment_state of this ConfigManagementPolicyControllerState.


        :param deployment_state: The deployment_state of this ConfigManagementPolicyControllerState.
        :type deployment_state: ConfigManagementGatekeeperDeploymentState
        """

        self._deployment_state = deployment_state

    @property
    def migration(self):
        """Gets the migration of this ConfigManagementPolicyControllerState.


        :return: The migration of this ConfigManagementPolicyControllerState.
        :rtype: ConfigManagementPolicyControllerMigration
        """
        return self._migration

    @migration.setter
    def migration(self, migration):
        """Sets the migration of this ConfigManagementPolicyControllerState.


        :param migration: The migration of this ConfigManagementPolicyControllerState.
        :type migration: ConfigManagementPolicyControllerMigration
        """

        self._migration = migration

    @property
    def version(self):
        """Gets the version of this ConfigManagementPolicyControllerState.


        :return: The version of this ConfigManagementPolicyControllerState.
        :rtype: ConfigManagementPolicyControllerVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigManagementPolicyControllerState.


        :param version: The version of this ConfigManagementPolicyControllerState.
        :type version: ConfigManagementPolicyControllerVersion
        """

        self._version = version
