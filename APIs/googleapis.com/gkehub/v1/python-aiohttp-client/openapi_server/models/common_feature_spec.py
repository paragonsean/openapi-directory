# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_upgrade_fleet_spec import ClusterUpgradeFleetSpec
from openapi_server.models.dataplane_v2_feature_spec import DataplaneV2FeatureSpec
from openapi_server.models.fleet_observability_feature_spec import FleetObservabilityFeatureSpec
from openapi_server.models.multi_cluster_ingress_feature_spec import MultiClusterIngressFeatureSpec
from openapi_server import util


class CommonFeatureSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appdevexperience: object=None, clusterupgrade: ClusterUpgradeFleetSpec=None, dataplanev2: DataplaneV2FeatureSpec=None, fleetobservability: FleetObservabilityFeatureSpec=None, multiclusteringress: MultiClusterIngressFeatureSpec=None):
        """CommonFeatureSpec - a model defined in OpenAPI

        :param appdevexperience: The appdevexperience of this CommonFeatureSpec.
        :param clusterupgrade: The clusterupgrade of this CommonFeatureSpec.
        :param dataplanev2: The dataplanev2 of this CommonFeatureSpec.
        :param fleetobservability: The fleetobservability of this CommonFeatureSpec.
        :param multiclusteringress: The multiclusteringress of this CommonFeatureSpec.
        """
        self.openapi_types = {
            'appdevexperience': object,
            'clusterupgrade': ClusterUpgradeFleetSpec,
            'dataplanev2': DataplaneV2FeatureSpec,
            'fleetobservability': FleetObservabilityFeatureSpec,
            'multiclusteringress': MultiClusterIngressFeatureSpec
        }

        self.attribute_map = {
            'appdevexperience': 'appdevexperience',
            'clusterupgrade': 'clusterupgrade',
            'dataplanev2': 'dataplanev2',
            'fleetobservability': 'fleetobservability',
            'multiclusteringress': 'multiclusteringress'
        }

        self._appdevexperience = appdevexperience
        self._clusterupgrade = clusterupgrade
        self._dataplanev2 = dataplanev2
        self._fleetobservability = fleetobservability
        self._multiclusteringress = multiclusteringress

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonFeatureSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonFeatureSpec of this CommonFeatureSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appdevexperience(self):
        """Gets the appdevexperience of this CommonFeatureSpec.

        Spec for App Dev Experience Feature.

        :return: The appdevexperience of this CommonFeatureSpec.
        :rtype: object
        """
        return self._appdevexperience

    @appdevexperience.setter
    def appdevexperience(self, appdevexperience):
        """Sets the appdevexperience of this CommonFeatureSpec.

        Spec for App Dev Experience Feature.

        :param appdevexperience: The appdevexperience of this CommonFeatureSpec.
        :type appdevexperience: object
        """

        self._appdevexperience = appdevexperience

    @property
    def clusterupgrade(self):
        """Gets the clusterupgrade of this CommonFeatureSpec.


        :return: The clusterupgrade of this CommonFeatureSpec.
        :rtype: ClusterUpgradeFleetSpec
        """
        return self._clusterupgrade

    @clusterupgrade.setter
    def clusterupgrade(self, clusterupgrade):
        """Sets the clusterupgrade of this CommonFeatureSpec.


        :param clusterupgrade: The clusterupgrade of this CommonFeatureSpec.
        :type clusterupgrade: ClusterUpgradeFleetSpec
        """

        self._clusterupgrade = clusterupgrade

    @property
    def dataplanev2(self):
        """Gets the dataplanev2 of this CommonFeatureSpec.


        :return: The dataplanev2 of this CommonFeatureSpec.
        :rtype: DataplaneV2FeatureSpec
        """
        return self._dataplanev2

    @dataplanev2.setter
    def dataplanev2(self, dataplanev2):
        """Sets the dataplanev2 of this CommonFeatureSpec.


        :param dataplanev2: The dataplanev2 of this CommonFeatureSpec.
        :type dataplanev2: DataplaneV2FeatureSpec
        """

        self._dataplanev2 = dataplanev2

    @property
    def fleetobservability(self):
        """Gets the fleetobservability of this CommonFeatureSpec.


        :return: The fleetobservability of this CommonFeatureSpec.
        :rtype: FleetObservabilityFeatureSpec
        """
        return self._fleetobservability

    @fleetobservability.setter
    def fleetobservability(self, fleetobservability):
        """Sets the fleetobservability of this CommonFeatureSpec.


        :param fleetobservability: The fleetobservability of this CommonFeatureSpec.
        :type fleetobservability: FleetObservabilityFeatureSpec
        """

        self._fleetobservability = fleetobservability

    @property
    def multiclusteringress(self):
        """Gets the multiclusteringress of this CommonFeatureSpec.


        :return: The multiclusteringress of this CommonFeatureSpec.
        :rtype: MultiClusterIngressFeatureSpec
        """
        return self._multiclusteringress

    @multiclusteringress.setter
    def multiclusteringress(self, multiclusteringress):
        """Sets the multiclusteringress of this CommonFeatureSpec.


        :param multiclusteringress: The multiclusteringress of this CommonFeatureSpec.
        :type multiclusteringress: MultiClusterIngressFeatureSpec
        """

        self._multiclusteringress = multiclusteringress
