# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementPolicyControllerMigration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copy_time: str=None, stage: str=None):
        """ConfigManagementPolicyControllerMigration - a model defined in OpenAPI

        :param copy_time: The copy_time of this ConfigManagementPolicyControllerMigration.
        :param stage: The stage of this ConfigManagementPolicyControllerMigration.
        """
        self.openapi_types = {
            'copy_time': str,
            'stage': str
        }

        self.attribute_map = {
            'copy_time': 'copyTime',
            'stage': 'stage'
        }

        self._copy_time = copy_time
        self._stage = stage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementPolicyControllerMigration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementPolicyControllerMigration of this ConfigManagementPolicyControllerMigration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copy_time(self):
        """Gets the copy_time of this ConfigManagementPolicyControllerMigration.

        Last time this membership spec was copied to PoCo feature.

        :return: The copy_time of this ConfigManagementPolicyControllerMigration.
        :rtype: str
        """
        return self._copy_time

    @copy_time.setter
    def copy_time(self, copy_time):
        """Sets the copy_time of this ConfigManagementPolicyControllerMigration.

        Last time this membership spec was copied to PoCo feature.

        :param copy_time: The copy_time of this ConfigManagementPolicyControllerMigration.
        :type copy_time: str
        """

        self._copy_time = copy_time

    @property
    def stage(self):
        """Gets the stage of this ConfigManagementPolicyControllerMigration.

        Stage of the migration.

        :return: The stage of this ConfigManagementPolicyControllerMigration.
        :rtype: str
        """
        return self._stage

    @stage.setter
    def stage(self, stage):
        """Sets the stage of this ConfigManagementPolicyControllerMigration.

        Stage of the migration.

        :param stage: The stage of this ConfigManagementPolicyControllerMigration.
        :type stage: str
        """
        allowed_values = ["STAGE_UNSPECIFIED", "ACM_MANAGED", "POCO_MANAGED"]  # noqa: E501
        if stage not in allowed_values:
            raise ValueError(
                "Invalid value for `stage` ({0}), must be one of {1}"
                .format(stage, allowed_values)
            )

        self._stage = stage
