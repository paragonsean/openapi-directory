/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigManagementConfigSyncDeploymentState;
import org.openapitools.client.model.ConfigManagementConfigSyncError;
import org.openapitools.client.model.ConfigManagementConfigSyncVersion;
import org.openapitools.client.model.ConfigManagementSyncState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * State information for ConfigSync
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementConfigSyncState {
  public static final String SERIALIZED_NAME_DEPLOYMENT_STATE = "deploymentState";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_STATE)
  private ConfigManagementConfigSyncDeploymentState deploymentState;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ConfigManagementConfigSyncError> errors = new ArrayList<>();

  /**
   * The state of the Reposync CRD
   */
  @JsonAdapter(ReposyncCrdEnum.Adapter.class)
  public enum ReposyncCrdEnum {
    CRD_STATE_UNSPECIFIED("CRD_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    TERMINATING("TERMINATING"),
    
    INSTALLING("INSTALLING");

    private String value;

    ReposyncCrdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReposyncCrdEnum fromValue(String value) {
      for (ReposyncCrdEnum b : ReposyncCrdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReposyncCrdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReposyncCrdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReposyncCrdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReposyncCrdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReposyncCrdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPOSYNC_CRD = "reposyncCrd";
  @SerializedName(SERIALIZED_NAME_REPOSYNC_CRD)
  private ReposyncCrdEnum reposyncCrd;

  /**
   * The state of the RootSync CRD
   */
  @JsonAdapter(RootsyncCrdEnum.Adapter.class)
  public enum RootsyncCrdEnum {
    CRD_STATE_UNSPECIFIED("CRD_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    TERMINATING("TERMINATING"),
    
    INSTALLING("INSTALLING");

    private String value;

    RootsyncCrdEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RootsyncCrdEnum fromValue(String value) {
      for (RootsyncCrdEnum b : RootsyncCrdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RootsyncCrdEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RootsyncCrdEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RootsyncCrdEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RootsyncCrdEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RootsyncCrdEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOTSYNC_CRD = "rootsyncCrd";
  @SerializedName(SERIALIZED_NAME_ROOTSYNC_CRD)
  private RootsyncCrdEnum rootsyncCrd;

  /**
   * The state of CS This field summarizes the other fields in this message.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    CONFIG_SYNC_NOT_INSTALLED("CONFIG_SYNC_NOT_INSTALLED"),
    
    CONFIG_SYNC_INSTALLED("CONFIG_SYNC_INSTALLED"),
    
    CONFIG_SYNC_ERROR("CONFIG_SYNC_ERROR"),
    
    CONFIG_SYNC_PENDING("CONFIG_SYNC_PENDING");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SYNC_STATE = "syncState";
  @SerializedName(SERIALIZED_NAME_SYNC_STATE)
  private ConfigManagementSyncState syncState;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private ConfigManagementConfigSyncVersion version;

  public ConfigManagementConfigSyncState() {
  }

  public ConfigManagementConfigSyncState deploymentState(ConfigManagementConfigSyncDeploymentState deploymentState) {
    this.deploymentState = deploymentState;
    return this;
  }

  /**
   * Get deploymentState
   * @return deploymentState
   */
  @javax.annotation.Nullable
  public ConfigManagementConfigSyncDeploymentState getDeploymentState() {
    return deploymentState;
  }

  public void setDeploymentState(ConfigManagementConfigSyncDeploymentState deploymentState) {
    this.deploymentState = deploymentState;
  }


  public ConfigManagementConfigSyncState errors(List<ConfigManagementConfigSyncError> errors) {
    this.errors = errors;
    return this;
  }

  public ConfigManagementConfigSyncState addErrorsItem(ConfigManagementConfigSyncError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Errors pertaining to the installation of Config Sync.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ConfigManagementConfigSyncError> getErrors() {
    return errors;
  }

  public void setErrors(List<ConfigManagementConfigSyncError> errors) {
    this.errors = errors;
  }


  public ConfigManagementConfigSyncState reposyncCrd(ReposyncCrdEnum reposyncCrd) {
    this.reposyncCrd = reposyncCrd;
    return this;
  }

  /**
   * The state of the Reposync CRD
   * @return reposyncCrd
   */
  @javax.annotation.Nullable
  public ReposyncCrdEnum getReposyncCrd() {
    return reposyncCrd;
  }

  public void setReposyncCrd(ReposyncCrdEnum reposyncCrd) {
    this.reposyncCrd = reposyncCrd;
  }


  public ConfigManagementConfigSyncState rootsyncCrd(RootsyncCrdEnum rootsyncCrd) {
    this.rootsyncCrd = rootsyncCrd;
    return this;
  }

  /**
   * The state of the RootSync CRD
   * @return rootsyncCrd
   */
  @javax.annotation.Nullable
  public RootsyncCrdEnum getRootsyncCrd() {
    return rootsyncCrd;
  }

  public void setRootsyncCrd(RootsyncCrdEnum rootsyncCrd) {
    this.rootsyncCrd = rootsyncCrd;
  }


  public ConfigManagementConfigSyncState state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state of CS This field summarizes the other fields in this message.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ConfigManagementConfigSyncState syncState(ConfigManagementSyncState syncState) {
    this.syncState = syncState;
    return this;
  }

  /**
   * Get syncState
   * @return syncState
   */
  @javax.annotation.Nullable
  public ConfigManagementSyncState getSyncState() {
    return syncState;
  }

  public void setSyncState(ConfigManagementSyncState syncState) {
    this.syncState = syncState;
  }


  public ConfigManagementConfigSyncState version(ConfigManagementConfigSyncVersion version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public ConfigManagementConfigSyncVersion getVersion() {
    return version;
  }

  public void setVersion(ConfigManagementConfigSyncVersion version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementConfigSyncState configManagementConfigSyncState = (ConfigManagementConfigSyncState) o;
    return Objects.equals(this.deploymentState, configManagementConfigSyncState.deploymentState) &&
        Objects.equals(this.errors, configManagementConfigSyncState.errors) &&
        Objects.equals(this.reposyncCrd, configManagementConfigSyncState.reposyncCrd) &&
        Objects.equals(this.rootsyncCrd, configManagementConfigSyncState.rootsyncCrd) &&
        Objects.equals(this.state, configManagementConfigSyncState.state) &&
        Objects.equals(this.syncState, configManagementConfigSyncState.syncState) &&
        Objects.equals(this.version, configManagementConfigSyncState.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deploymentState, errors, reposyncCrd, rootsyncCrd, state, syncState, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementConfigSyncState {\n");
    sb.append("    deploymentState: ").append(toIndentedString(deploymentState)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    reposyncCrd: ").append(toIndentedString(reposyncCrd)).append("\n");
    sb.append("    rootsyncCrd: ").append(toIndentedString(rootsyncCrd)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    syncState: ").append(toIndentedString(syncState)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deploymentState");
    openapiFields.add("errors");
    openapiFields.add("reposyncCrd");
    openapiFields.add("rootsyncCrd");
    openapiFields.add("state");
    openapiFields.add("syncState");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementConfigSyncState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementConfigSyncState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementConfigSyncState is not found in the empty JSON string", ConfigManagementConfigSyncState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementConfigSyncState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementConfigSyncState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `deploymentState`
      if (jsonObj.get("deploymentState") != null && !jsonObj.get("deploymentState").isJsonNull()) {
        ConfigManagementConfigSyncDeploymentState.validateJsonElement(jsonObj.get("deploymentState"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ConfigManagementConfigSyncError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("reposyncCrd") != null && !jsonObj.get("reposyncCrd").isJsonNull()) && !jsonObj.get("reposyncCrd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reposyncCrd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reposyncCrd").toString()));
      }
      // validate the optional field `reposyncCrd`
      if (jsonObj.get("reposyncCrd") != null && !jsonObj.get("reposyncCrd").isJsonNull()) {
        ReposyncCrdEnum.validateJsonElement(jsonObj.get("reposyncCrd"));
      }
      if ((jsonObj.get("rootsyncCrd") != null && !jsonObj.get("rootsyncCrd").isJsonNull()) && !jsonObj.get("rootsyncCrd").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootsyncCrd` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootsyncCrd").toString()));
      }
      // validate the optional field `rootsyncCrd`
      if (jsonObj.get("rootsyncCrd") != null && !jsonObj.get("rootsyncCrd").isJsonNull()) {
        RootsyncCrdEnum.validateJsonElement(jsonObj.get("rootsyncCrd"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `syncState`
      if (jsonObj.get("syncState") != null && !jsonObj.get("syncState").isJsonNull()) {
        ConfigManagementSyncState.validateJsonElement(jsonObj.get("syncState"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        ConfigManagementConfigSyncVersion.validateJsonElement(jsonObj.get("version"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementConfigSyncState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementConfigSyncState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementConfigSyncState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementConfigSyncState.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementConfigSyncState>() {
           @Override
           public void write(JsonWriter out, ConfigManagementConfigSyncState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementConfigSyncState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementConfigSyncState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementConfigSyncState
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementConfigSyncState
   */
  public static ConfigManagementConfigSyncState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementConfigSyncState.class);
  }

  /**
   * Convert an instance of ConfigManagementConfigSyncState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

