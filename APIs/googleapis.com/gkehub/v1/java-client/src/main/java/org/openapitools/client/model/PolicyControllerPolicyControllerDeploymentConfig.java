/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyControllerResourceRequirements;
import org.openapitools.client.model.PolicyControllerToleration;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Deployment-specific configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyControllerPolicyControllerDeploymentConfig {
  public static final String SERIALIZED_NAME_CONTAINER_RESOURCES = "containerResources";
  @SerializedName(SERIALIZED_NAME_CONTAINER_RESOURCES)
  private PolicyControllerResourceRequirements containerResources;

  /**
   * Pod affinity configuration.
   */
  @JsonAdapter(PodAffinityEnum.Adapter.class)
  public enum PodAffinityEnum {
    AFFINITY_UNSPECIFIED("AFFINITY_UNSPECIFIED"),
    
    NO_AFFINITY("NO_AFFINITY"),
    
    ANTI_AFFINITY("ANTI_AFFINITY");

    private String value;

    PodAffinityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PodAffinityEnum fromValue(String value) {
      for (PodAffinityEnum b : PodAffinityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PodAffinityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PodAffinityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PodAffinityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PodAffinityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PodAffinityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POD_AFFINITY = "podAffinity";
  @SerializedName(SERIALIZED_NAME_POD_AFFINITY)
  private PodAffinityEnum podAffinity;

  public static final String SERIALIZED_NAME_POD_ANTI_AFFINITY = "podAntiAffinity";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_POD_ANTI_AFFINITY)
  private Boolean podAntiAffinity;

  public static final String SERIALIZED_NAME_POD_TOLERATIONS = "podTolerations";
  @SerializedName(SERIALIZED_NAME_POD_TOLERATIONS)
  private List<PolicyControllerToleration> podTolerations = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPLICA_COUNT = "replicaCount";
  @SerializedName(SERIALIZED_NAME_REPLICA_COUNT)
  private String replicaCount;

  public PolicyControllerPolicyControllerDeploymentConfig() {
  }

  public PolicyControllerPolicyControllerDeploymentConfig containerResources(PolicyControllerResourceRequirements containerResources) {
    this.containerResources = containerResources;
    return this;
  }

  /**
   * Get containerResources
   * @return containerResources
   */
  @javax.annotation.Nullable
  public PolicyControllerResourceRequirements getContainerResources() {
    return containerResources;
  }

  public void setContainerResources(PolicyControllerResourceRequirements containerResources) {
    this.containerResources = containerResources;
  }


  public PolicyControllerPolicyControllerDeploymentConfig podAffinity(PodAffinityEnum podAffinity) {
    this.podAffinity = podAffinity;
    return this;
  }

  /**
   * Pod affinity configuration.
   * @return podAffinity
   */
  @javax.annotation.Nullable
  public PodAffinityEnum getPodAffinity() {
    return podAffinity;
  }

  public void setPodAffinity(PodAffinityEnum podAffinity) {
    this.podAffinity = podAffinity;
  }


  @Deprecated
  public PolicyControllerPolicyControllerDeploymentConfig podAntiAffinity(Boolean podAntiAffinity) {
    this.podAntiAffinity = podAntiAffinity;
    return this;
  }

  /**
   * Pod anti-affinity enablement. Deprecated: use &#x60;pod_affinity&#x60; instead.
   * @return podAntiAffinity
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getPodAntiAffinity() {
    return podAntiAffinity;
  }

  @Deprecated
  public void setPodAntiAffinity(Boolean podAntiAffinity) {
    this.podAntiAffinity = podAntiAffinity;
  }


  public PolicyControllerPolicyControllerDeploymentConfig podTolerations(List<PolicyControllerToleration> podTolerations) {
    this.podTolerations = podTolerations;
    return this;
  }

  public PolicyControllerPolicyControllerDeploymentConfig addPodTolerationsItem(PolicyControllerToleration podTolerationsItem) {
    if (this.podTolerations == null) {
      this.podTolerations = new ArrayList<>();
    }
    this.podTolerations.add(podTolerationsItem);
    return this;
  }

  /**
   * Pod tolerations of node taints.
   * @return podTolerations
   */
  @javax.annotation.Nullable
  public List<PolicyControllerToleration> getPodTolerations() {
    return podTolerations;
  }

  public void setPodTolerations(List<PolicyControllerToleration> podTolerations) {
    this.podTolerations = podTolerations;
  }


  public PolicyControllerPolicyControllerDeploymentConfig replicaCount(String replicaCount) {
    this.replicaCount = replicaCount;
    return this;
  }

  /**
   * Pod replica count.
   * @return replicaCount
   */
  @javax.annotation.Nullable
  public String getReplicaCount() {
    return replicaCount;
  }

  public void setReplicaCount(String replicaCount) {
    this.replicaCount = replicaCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyControllerPolicyControllerDeploymentConfig policyControllerPolicyControllerDeploymentConfig = (PolicyControllerPolicyControllerDeploymentConfig) o;
    return Objects.equals(this.containerResources, policyControllerPolicyControllerDeploymentConfig.containerResources) &&
        Objects.equals(this.podAffinity, policyControllerPolicyControllerDeploymentConfig.podAffinity) &&
        Objects.equals(this.podAntiAffinity, policyControllerPolicyControllerDeploymentConfig.podAntiAffinity) &&
        Objects.equals(this.podTolerations, policyControllerPolicyControllerDeploymentConfig.podTolerations) &&
        Objects.equals(this.replicaCount, policyControllerPolicyControllerDeploymentConfig.replicaCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(containerResources, podAffinity, podAntiAffinity, podTolerations, replicaCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyControllerPolicyControllerDeploymentConfig {\n");
    sb.append("    containerResources: ").append(toIndentedString(containerResources)).append("\n");
    sb.append("    podAffinity: ").append(toIndentedString(podAffinity)).append("\n");
    sb.append("    podAntiAffinity: ").append(toIndentedString(podAntiAffinity)).append("\n");
    sb.append("    podTolerations: ").append(toIndentedString(podTolerations)).append("\n");
    sb.append("    replicaCount: ").append(toIndentedString(replicaCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("containerResources");
    openapiFields.add("podAffinity");
    openapiFields.add("podAntiAffinity");
    openapiFields.add("podTolerations");
    openapiFields.add("replicaCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyControllerPolicyControllerDeploymentConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyControllerPolicyControllerDeploymentConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyControllerPolicyControllerDeploymentConfig is not found in the empty JSON string", PolicyControllerPolicyControllerDeploymentConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyControllerPolicyControllerDeploymentConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyControllerPolicyControllerDeploymentConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `containerResources`
      if (jsonObj.get("containerResources") != null && !jsonObj.get("containerResources").isJsonNull()) {
        PolicyControllerResourceRequirements.validateJsonElement(jsonObj.get("containerResources"));
      }
      if ((jsonObj.get("podAffinity") != null && !jsonObj.get("podAffinity").isJsonNull()) && !jsonObj.get("podAffinity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podAffinity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podAffinity").toString()));
      }
      // validate the optional field `podAffinity`
      if (jsonObj.get("podAffinity") != null && !jsonObj.get("podAffinity").isJsonNull()) {
        PodAffinityEnum.validateJsonElement(jsonObj.get("podAffinity"));
      }
      if (jsonObj.get("podTolerations") != null && !jsonObj.get("podTolerations").isJsonNull()) {
        JsonArray jsonArraypodTolerations = jsonObj.getAsJsonArray("podTolerations");
        if (jsonArraypodTolerations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("podTolerations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `podTolerations` to be an array in the JSON string but got `%s`", jsonObj.get("podTolerations").toString()));
          }

          // validate the optional field `podTolerations` (array)
          for (int i = 0; i < jsonArraypodTolerations.size(); i++) {
            PolicyControllerToleration.validateJsonElement(jsonArraypodTolerations.get(i));
          };
        }
      }
      if ((jsonObj.get("replicaCount") != null && !jsonObj.get("replicaCount").isJsonNull()) && !jsonObj.get("replicaCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replicaCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replicaCount").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyControllerPolicyControllerDeploymentConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyControllerPolicyControllerDeploymentConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyControllerPolicyControllerDeploymentConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyControllerPolicyControllerDeploymentConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyControllerPolicyControllerDeploymentConfig>() {
           @Override
           public void write(JsonWriter out, PolicyControllerPolicyControllerDeploymentConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyControllerPolicyControllerDeploymentConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyControllerPolicyControllerDeploymentConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyControllerPolicyControllerDeploymentConfig
   * @throws IOException if the JSON string is invalid with respect to PolicyControllerPolicyControllerDeploymentConfig
   */
  public static PolicyControllerPolicyControllerDeploymentConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyControllerPolicyControllerDeploymentConfig.class);
  }

  /**
   * Convert an instance of PolicyControllerPolicyControllerDeploymentConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

