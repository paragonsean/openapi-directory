/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AppDevExperienceFeatureState;
import org.openapitools.client.model.ClusterUpgradeMembershipState;
import org.openapitools.client.model.ConfigManagementMembershipState;
import org.openapitools.client.model.FeatureState;
import org.openapitools.client.model.IdentityServiceMembershipState;
import org.openapitools.client.model.PolicyControllerMembershipState;
import org.openapitools.client.model.ServiceMeshMembershipState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MembershipFeatureState contains Feature status information for a single Membership.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MembershipFeatureState {
  public static final String SERIALIZED_NAME_APPDEVEXPERIENCE = "appdevexperience";
  @SerializedName(SERIALIZED_NAME_APPDEVEXPERIENCE)
  private AppDevExperienceFeatureState appdevexperience;

  public static final String SERIALIZED_NAME_CLUSTERUPGRADE = "clusterupgrade";
  @SerializedName(SERIALIZED_NAME_CLUSTERUPGRADE)
  private ClusterUpgradeMembershipState clusterupgrade;

  public static final String SERIALIZED_NAME_CONFIGMANAGEMENT = "configmanagement";
  @SerializedName(SERIALIZED_NAME_CONFIGMANAGEMENT)
  private ConfigManagementMembershipState configmanagement;

  public static final String SERIALIZED_NAME_FLEETOBSERVABILITY = "fleetobservability";
  @SerializedName(SERIALIZED_NAME_FLEETOBSERVABILITY)
  private Object fleetobservability;

  public static final String SERIALIZED_NAME_IDENTITYSERVICE = "identityservice";
  @SerializedName(SERIALIZED_NAME_IDENTITYSERVICE)
  private IdentityServiceMembershipState identityservice;

  public static final String SERIALIZED_NAME_POLICYCONTROLLER = "policycontroller";
  @SerializedName(SERIALIZED_NAME_POLICYCONTROLLER)
  private PolicyControllerMembershipState policycontroller;

  public static final String SERIALIZED_NAME_SERVICEMESH = "servicemesh";
  @SerializedName(SERIALIZED_NAME_SERVICEMESH)
  private ServiceMeshMembershipState servicemesh;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private FeatureState state;

  public MembershipFeatureState() {
  }

  public MembershipFeatureState appdevexperience(AppDevExperienceFeatureState appdevexperience) {
    this.appdevexperience = appdevexperience;
    return this;
  }

  /**
   * Get appdevexperience
   * @return appdevexperience
   */
  @javax.annotation.Nullable
  public AppDevExperienceFeatureState getAppdevexperience() {
    return appdevexperience;
  }

  public void setAppdevexperience(AppDevExperienceFeatureState appdevexperience) {
    this.appdevexperience = appdevexperience;
  }


  public MembershipFeatureState clusterupgrade(ClusterUpgradeMembershipState clusterupgrade) {
    this.clusterupgrade = clusterupgrade;
    return this;
  }

  /**
   * Get clusterupgrade
   * @return clusterupgrade
   */
  @javax.annotation.Nullable
  public ClusterUpgradeMembershipState getClusterupgrade() {
    return clusterupgrade;
  }

  public void setClusterupgrade(ClusterUpgradeMembershipState clusterupgrade) {
    this.clusterupgrade = clusterupgrade;
  }


  public MembershipFeatureState configmanagement(ConfigManagementMembershipState configmanagement) {
    this.configmanagement = configmanagement;
    return this;
  }

  /**
   * Get configmanagement
   * @return configmanagement
   */
  @javax.annotation.Nullable
  public ConfigManagementMembershipState getConfigmanagement() {
    return configmanagement;
  }

  public void setConfigmanagement(ConfigManagementMembershipState configmanagement) {
    this.configmanagement = configmanagement;
  }


  public MembershipFeatureState fleetobservability(Object fleetobservability) {
    this.fleetobservability = fleetobservability;
    return this;
  }

  /**
   * **FleetObservability**: Membership-specific Feature state for fleetobservability.
   * @return fleetobservability
   */
  @javax.annotation.Nullable
  public Object getFleetobservability() {
    return fleetobservability;
  }

  public void setFleetobservability(Object fleetobservability) {
    this.fleetobservability = fleetobservability;
  }


  public MembershipFeatureState identityservice(IdentityServiceMembershipState identityservice) {
    this.identityservice = identityservice;
    return this;
  }

  /**
   * Get identityservice
   * @return identityservice
   */
  @javax.annotation.Nullable
  public IdentityServiceMembershipState getIdentityservice() {
    return identityservice;
  }

  public void setIdentityservice(IdentityServiceMembershipState identityservice) {
    this.identityservice = identityservice;
  }


  public MembershipFeatureState policycontroller(PolicyControllerMembershipState policycontroller) {
    this.policycontroller = policycontroller;
    return this;
  }

  /**
   * Get policycontroller
   * @return policycontroller
   */
  @javax.annotation.Nullable
  public PolicyControllerMembershipState getPolicycontroller() {
    return policycontroller;
  }

  public void setPolicycontroller(PolicyControllerMembershipState policycontroller) {
    this.policycontroller = policycontroller;
  }


  public MembershipFeatureState servicemesh(ServiceMeshMembershipState servicemesh) {
    this.servicemesh = servicemesh;
    return this;
  }

  /**
   * Get servicemesh
   * @return servicemesh
   */
  @javax.annotation.Nullable
  public ServiceMeshMembershipState getServicemesh() {
    return servicemesh;
  }

  public void setServicemesh(ServiceMeshMembershipState servicemesh) {
    this.servicemesh = servicemesh;
  }


  public MembershipFeatureState state(FeatureState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public FeatureState getState() {
    return state;
  }

  public void setState(FeatureState state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MembershipFeatureState membershipFeatureState = (MembershipFeatureState) o;
    return Objects.equals(this.appdevexperience, membershipFeatureState.appdevexperience) &&
        Objects.equals(this.clusterupgrade, membershipFeatureState.clusterupgrade) &&
        Objects.equals(this.configmanagement, membershipFeatureState.configmanagement) &&
        Objects.equals(this.fleetobservability, membershipFeatureState.fleetobservability) &&
        Objects.equals(this.identityservice, membershipFeatureState.identityservice) &&
        Objects.equals(this.policycontroller, membershipFeatureState.policycontroller) &&
        Objects.equals(this.servicemesh, membershipFeatureState.servicemesh) &&
        Objects.equals(this.state, membershipFeatureState.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appdevexperience, clusterupgrade, configmanagement, fleetobservability, identityservice, policycontroller, servicemesh, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MembershipFeatureState {\n");
    sb.append("    appdevexperience: ").append(toIndentedString(appdevexperience)).append("\n");
    sb.append("    clusterupgrade: ").append(toIndentedString(clusterupgrade)).append("\n");
    sb.append("    configmanagement: ").append(toIndentedString(configmanagement)).append("\n");
    sb.append("    fleetobservability: ").append(toIndentedString(fleetobservability)).append("\n");
    sb.append("    identityservice: ").append(toIndentedString(identityservice)).append("\n");
    sb.append("    policycontroller: ").append(toIndentedString(policycontroller)).append("\n");
    sb.append("    servicemesh: ").append(toIndentedString(servicemesh)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appdevexperience");
    openapiFields.add("clusterupgrade");
    openapiFields.add("configmanagement");
    openapiFields.add("fleetobservability");
    openapiFields.add("identityservice");
    openapiFields.add("policycontroller");
    openapiFields.add("servicemesh");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MembershipFeatureState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MembershipFeatureState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MembershipFeatureState is not found in the empty JSON string", MembershipFeatureState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MembershipFeatureState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MembershipFeatureState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appdevexperience`
      if (jsonObj.get("appdevexperience") != null && !jsonObj.get("appdevexperience").isJsonNull()) {
        AppDevExperienceFeatureState.validateJsonElement(jsonObj.get("appdevexperience"));
      }
      // validate the optional field `clusterupgrade`
      if (jsonObj.get("clusterupgrade") != null && !jsonObj.get("clusterupgrade").isJsonNull()) {
        ClusterUpgradeMembershipState.validateJsonElement(jsonObj.get("clusterupgrade"));
      }
      // validate the optional field `configmanagement`
      if (jsonObj.get("configmanagement") != null && !jsonObj.get("configmanagement").isJsonNull()) {
        ConfigManagementMembershipState.validateJsonElement(jsonObj.get("configmanagement"));
      }
      // validate the optional field `identityservice`
      if (jsonObj.get("identityservice") != null && !jsonObj.get("identityservice").isJsonNull()) {
        IdentityServiceMembershipState.validateJsonElement(jsonObj.get("identityservice"));
      }
      // validate the optional field `policycontroller`
      if (jsonObj.get("policycontroller") != null && !jsonObj.get("policycontroller").isJsonNull()) {
        PolicyControllerMembershipState.validateJsonElement(jsonObj.get("policycontroller"));
      }
      // validate the optional field `servicemesh`
      if (jsonObj.get("servicemesh") != null && !jsonObj.get("servicemesh").isJsonNull()) {
        ServiceMeshMembershipState.validateJsonElement(jsonObj.get("servicemesh"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        FeatureState.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MembershipFeatureState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MembershipFeatureState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MembershipFeatureState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MembershipFeatureState.class));

       return (TypeAdapter<T>) new TypeAdapter<MembershipFeatureState>() {
           @Override
           public void write(JsonWriter out, MembershipFeatureState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MembershipFeatureState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MembershipFeatureState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MembershipFeatureState
   * @throws IOException if the JSON string is invalid with respect to MembershipFeatureState
   */
  public static MembershipFeatureState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MembershipFeatureState.class);
  }

  /**
   * Convert an instance of MembershipFeatureState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

