/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OCI repo configuration for a single cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementOciConfig {
  public static final String SERIALIZED_NAME_GCP_SERVICE_ACCOUNT_EMAIL = "gcpServiceAccountEmail";
  @SerializedName(SERIALIZED_NAME_GCP_SERVICE_ACCOUNT_EMAIL)
  private String gcpServiceAccountEmail;

  public static final String SERIALIZED_NAME_POLICY_DIR = "policyDir";
  @SerializedName(SERIALIZED_NAME_POLICY_DIR)
  private String policyDir;

  public static final String SERIALIZED_NAME_SECRET_TYPE = "secretType";
  @SerializedName(SERIALIZED_NAME_SECRET_TYPE)
  private String secretType;

  public static final String SERIALIZED_NAME_SYNC_REPO = "syncRepo";
  @SerializedName(SERIALIZED_NAME_SYNC_REPO)
  private String syncRepo;

  public static final String SERIALIZED_NAME_SYNC_WAIT_SECS = "syncWaitSecs";
  @SerializedName(SERIALIZED_NAME_SYNC_WAIT_SECS)
  private String syncWaitSecs;

  public ConfigManagementOciConfig() {
  }

  public ConfigManagementOciConfig gcpServiceAccountEmail(String gcpServiceAccountEmail) {
    this.gcpServiceAccountEmail = gcpServiceAccountEmail;
    return this;
  }

  /**
   * The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
   * @return gcpServiceAccountEmail
   */
  @javax.annotation.Nullable
  public String getGcpServiceAccountEmail() {
    return gcpServiceAccountEmail;
  }

  public void setGcpServiceAccountEmail(String gcpServiceAccountEmail) {
    this.gcpServiceAccountEmail = gcpServiceAccountEmail;
  }


  public ConfigManagementOciConfig policyDir(String policyDir) {
    this.policyDir = policyDir;
    return this;
  }

  /**
   * The absolute path of the directory that contains the local resources. Default: the root directory of the image.
   * @return policyDir
   */
  @javax.annotation.Nullable
  public String getPolicyDir() {
    return policyDir;
  }

  public void setPolicyDir(String policyDir) {
    this.policyDir = policyDir;
  }


  public ConfigManagementOciConfig secretType(String secretType) {
    this.secretType = secretType;
    return this;
  }

  /**
   * Type of secret configured for access to the Git repo.
   * @return secretType
   */
  @javax.annotation.Nullable
  public String getSecretType() {
    return secretType;
  }

  public void setSecretType(String secretType) {
    this.secretType = secretType;
  }


  public ConfigManagementOciConfig syncRepo(String syncRepo) {
    this.syncRepo = syncRepo;
    return this;
  }

  /**
   * The OCI image repository URL for the package to sync from. e.g. &#x60;LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME&#x60;.
   * @return syncRepo
   */
  @javax.annotation.Nullable
  public String getSyncRepo() {
    return syncRepo;
  }

  public void setSyncRepo(String syncRepo) {
    this.syncRepo = syncRepo;
  }


  public ConfigManagementOciConfig syncWaitSecs(String syncWaitSecs) {
    this.syncWaitSecs = syncWaitSecs;
    return this;
  }

  /**
   * Period in seconds between consecutive syncs. Default: 15.
   * @return syncWaitSecs
   */
  @javax.annotation.Nullable
  public String getSyncWaitSecs() {
    return syncWaitSecs;
  }

  public void setSyncWaitSecs(String syncWaitSecs) {
    this.syncWaitSecs = syncWaitSecs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementOciConfig configManagementOciConfig = (ConfigManagementOciConfig) o;
    return Objects.equals(this.gcpServiceAccountEmail, configManagementOciConfig.gcpServiceAccountEmail) &&
        Objects.equals(this.policyDir, configManagementOciConfig.policyDir) &&
        Objects.equals(this.secretType, configManagementOciConfig.secretType) &&
        Objects.equals(this.syncRepo, configManagementOciConfig.syncRepo) &&
        Objects.equals(this.syncWaitSecs, configManagementOciConfig.syncWaitSecs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gcpServiceAccountEmail, policyDir, secretType, syncRepo, syncWaitSecs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementOciConfig {\n");
    sb.append("    gcpServiceAccountEmail: ").append(toIndentedString(gcpServiceAccountEmail)).append("\n");
    sb.append("    policyDir: ").append(toIndentedString(policyDir)).append("\n");
    sb.append("    secretType: ").append(toIndentedString(secretType)).append("\n");
    sb.append("    syncRepo: ").append(toIndentedString(syncRepo)).append("\n");
    sb.append("    syncWaitSecs: ").append(toIndentedString(syncWaitSecs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gcpServiceAccountEmail");
    openapiFields.add("policyDir");
    openapiFields.add("secretType");
    openapiFields.add("syncRepo");
    openapiFields.add("syncWaitSecs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementOciConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementOciConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementOciConfig is not found in the empty JSON string", ConfigManagementOciConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementOciConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementOciConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gcpServiceAccountEmail") != null && !jsonObj.get("gcpServiceAccountEmail").isJsonNull()) && !jsonObj.get("gcpServiceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gcpServiceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gcpServiceAccountEmail").toString()));
      }
      if ((jsonObj.get("policyDir") != null && !jsonObj.get("policyDir").isJsonNull()) && !jsonObj.get("policyDir").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyDir` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyDir").toString()));
      }
      if ((jsonObj.get("secretType") != null && !jsonObj.get("secretType").isJsonNull()) && !jsonObj.get("secretType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secretType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secretType").toString()));
      }
      if ((jsonObj.get("syncRepo") != null && !jsonObj.get("syncRepo").isJsonNull()) && !jsonObj.get("syncRepo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncRepo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncRepo").toString()));
      }
      if ((jsonObj.get("syncWaitSecs") != null && !jsonObj.get("syncWaitSecs").isJsonNull()) && !jsonObj.get("syncWaitSecs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncWaitSecs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncWaitSecs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementOciConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementOciConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementOciConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementOciConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementOciConfig>() {
           @Override
           public void write(JsonWriter out, ConfigManagementOciConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementOciConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementOciConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementOciConfig
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementOciConfig
   */
  public static ConfigManagementOciConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementOciConfig.class);
  }

  /**
   * Convert an instance of ConfigManagementOciConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

