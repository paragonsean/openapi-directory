/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigManagementConfigSync;
import org.openapitools.client.model.ConfigManagementHierarchyControllerConfig;
import org.openapitools.client.model.ConfigManagementPolicyController;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementMembershipSpec {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_CONFIG_SYNC = "configSync";
  @SerializedName(SERIALIZED_NAME_CONFIG_SYNC)
  private ConfigManagementConfigSync configSync;

  public static final String SERIALIZED_NAME_HIERARCHY_CONTROLLER = "hierarchyController";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_CONTROLLER)
  private ConfigManagementHierarchyControllerConfig hierarchyController;

  /**
   * Enables automatic Feature management.
   */
  @JsonAdapter(ManagementEnum.Adapter.class)
  public enum ManagementEnum {
    UNSPECIFIED("MANAGEMENT_UNSPECIFIED"),
    
    AUTOMATIC("MANAGEMENT_AUTOMATIC"),
    
    MANUAL("MANAGEMENT_MANUAL");

    private String value;

    ManagementEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagementEnum fromValue(String value) {
      for (ManagementEnum b : ManagementEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagementEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagementEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagementEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagementEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagementEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGEMENT = "management";
  @SerializedName(SERIALIZED_NAME_MANAGEMENT)
  private ManagementEnum management;

  public static final String SERIALIZED_NAME_POLICY_CONTROLLER = "policyController";
  @SerializedName(SERIALIZED_NAME_POLICY_CONTROLLER)
  private ConfigManagementPolicyController policyController;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ConfigManagementMembershipSpec() {
  }

  public ConfigManagementMembershipSpec cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster&#39;s fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster&#39;s fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public ConfigManagementMembershipSpec configSync(ConfigManagementConfigSync configSync) {
    this.configSync = configSync;
    return this;
  }

  /**
   * Get configSync
   * @return configSync
   */
  @javax.annotation.Nullable
  public ConfigManagementConfigSync getConfigSync() {
    return configSync;
  }

  public void setConfigSync(ConfigManagementConfigSync configSync) {
    this.configSync = configSync;
  }


  public ConfigManagementMembershipSpec hierarchyController(ConfigManagementHierarchyControllerConfig hierarchyController) {
    this.hierarchyController = hierarchyController;
    return this;
  }

  /**
   * Get hierarchyController
   * @return hierarchyController
   */
  @javax.annotation.Nullable
  public ConfigManagementHierarchyControllerConfig getHierarchyController() {
    return hierarchyController;
  }

  public void setHierarchyController(ConfigManagementHierarchyControllerConfig hierarchyController) {
    this.hierarchyController = hierarchyController;
  }


  public ConfigManagementMembershipSpec management(ManagementEnum management) {
    this.management = management;
    return this;
  }

  /**
   * Enables automatic Feature management.
   * @return management
   */
  @javax.annotation.Nullable
  public ManagementEnum getManagement() {
    return management;
  }

  public void setManagement(ManagementEnum management) {
    this.management = management;
  }


  public ConfigManagementMembershipSpec policyController(ConfigManagementPolicyController policyController) {
    this.policyController = policyController;
    return this;
  }

  /**
   * Get policyController
   * @return policyController
   */
  @javax.annotation.Nullable
  public ConfigManagementPolicyController getPolicyController() {
    return policyController;
  }

  public void setPolicyController(ConfigManagementPolicyController policyController) {
    this.policyController = policyController;
  }


  public ConfigManagementMembershipSpec version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Version of ACM installed.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementMembershipSpec configManagementMembershipSpec = (ConfigManagementMembershipSpec) o;
    return Objects.equals(this.cluster, configManagementMembershipSpec.cluster) &&
        Objects.equals(this.configSync, configManagementMembershipSpec.configSync) &&
        Objects.equals(this.hierarchyController, configManagementMembershipSpec.hierarchyController) &&
        Objects.equals(this.management, configManagementMembershipSpec.management) &&
        Objects.equals(this.policyController, configManagementMembershipSpec.policyController) &&
        Objects.equals(this.version, configManagementMembershipSpec.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, configSync, hierarchyController, management, policyController, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementMembershipSpec {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    configSync: ").append(toIndentedString(configSync)).append("\n");
    sb.append("    hierarchyController: ").append(toIndentedString(hierarchyController)).append("\n");
    sb.append("    management: ").append(toIndentedString(management)).append("\n");
    sb.append("    policyController: ").append(toIndentedString(policyController)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("configSync");
    openapiFields.add("hierarchyController");
    openapiFields.add("management");
    openapiFields.add("policyController");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementMembershipSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementMembershipSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementMembershipSpec is not found in the empty JSON string", ConfigManagementMembershipSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementMembershipSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementMembershipSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      // validate the optional field `configSync`
      if (jsonObj.get("configSync") != null && !jsonObj.get("configSync").isJsonNull()) {
        ConfigManagementConfigSync.validateJsonElement(jsonObj.get("configSync"));
      }
      // validate the optional field `hierarchyController`
      if (jsonObj.get("hierarchyController") != null && !jsonObj.get("hierarchyController").isJsonNull()) {
        ConfigManagementHierarchyControllerConfig.validateJsonElement(jsonObj.get("hierarchyController"));
      }
      if ((jsonObj.get("management") != null && !jsonObj.get("management").isJsonNull()) && !jsonObj.get("management").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `management` to be a primitive type in the JSON string but got `%s`", jsonObj.get("management").toString()));
      }
      // validate the optional field `management`
      if (jsonObj.get("management") != null && !jsonObj.get("management").isJsonNull()) {
        ManagementEnum.validateJsonElement(jsonObj.get("management"));
      }
      // validate the optional field `policyController`
      if (jsonObj.get("policyController") != null && !jsonObj.get("policyController").isJsonNull()) {
        ConfigManagementPolicyController.validateJsonElement(jsonObj.get("policyController"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementMembershipSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementMembershipSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementMembershipSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementMembershipSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementMembershipSpec>() {
           @Override
           public void write(JsonWriter out, ConfigManagementMembershipSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementMembershipSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementMembershipSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementMembershipSpec
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementMembershipSpec
   */
  public static ConfigManagementMembershipSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementMembershipSpec.class);
  }

  /**
   * Convert an instance of ConfigManagementMembershipSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

