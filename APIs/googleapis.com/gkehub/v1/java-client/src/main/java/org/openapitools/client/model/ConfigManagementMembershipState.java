/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigManagementConfigSyncState;
import org.openapitools.client.model.ConfigManagementHierarchyControllerState;
import org.openapitools.client.model.ConfigManagementMembershipSpec;
import org.openapitools.client.model.ConfigManagementOperatorState;
import org.openapitools.client.model.ConfigManagementPolicyControllerState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * **Anthos Config Management**: State for a single cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementMembershipState {
  public static final String SERIALIZED_NAME_CLUSTER_NAME = "clusterName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_NAME)
  private String clusterName;

  public static final String SERIALIZED_NAME_CONFIG_SYNC_STATE = "configSyncState";
  @SerializedName(SERIALIZED_NAME_CONFIG_SYNC_STATE)
  private ConfigManagementConfigSyncState configSyncState;

  public static final String SERIALIZED_NAME_HIERARCHY_CONTROLLER_STATE = "hierarchyControllerState";
  @SerializedName(SERIALIZED_NAME_HIERARCHY_CONTROLLER_STATE)
  private ConfigManagementHierarchyControllerState hierarchyControllerState;

  public static final String SERIALIZED_NAME_MEMBERSHIP_SPEC = "membershipSpec";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_SPEC)
  private ConfigManagementMembershipSpec membershipSpec;

  public static final String SERIALIZED_NAME_OPERATOR_STATE = "operatorState";
  @SerializedName(SERIALIZED_NAME_OPERATOR_STATE)
  private ConfigManagementOperatorState operatorState;

  public static final String SERIALIZED_NAME_POLICY_CONTROLLER_STATE = "policyControllerState";
  @SerializedName(SERIALIZED_NAME_POLICY_CONTROLLER_STATE)
  private ConfigManagementPolicyControllerState policyControllerState;

  public ConfigManagementMembershipState() {
  }

  public ConfigManagementMembershipState clusterName(String clusterName) {
    this.clusterName = clusterName;
    return this;
  }

  /**
   * This field is set to the &#x60;cluster_name&#x60; field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster&#39;s fleet membership name.
   * @return clusterName
   */
  @javax.annotation.Nullable
  public String getClusterName() {
    return clusterName;
  }

  public void setClusterName(String clusterName) {
    this.clusterName = clusterName;
  }


  public ConfigManagementMembershipState configSyncState(ConfigManagementConfigSyncState configSyncState) {
    this.configSyncState = configSyncState;
    return this;
  }

  /**
   * Get configSyncState
   * @return configSyncState
   */
  @javax.annotation.Nullable
  public ConfigManagementConfigSyncState getConfigSyncState() {
    return configSyncState;
  }

  public void setConfigSyncState(ConfigManagementConfigSyncState configSyncState) {
    this.configSyncState = configSyncState;
  }


  public ConfigManagementMembershipState hierarchyControllerState(ConfigManagementHierarchyControllerState hierarchyControllerState) {
    this.hierarchyControllerState = hierarchyControllerState;
    return this;
  }

  /**
   * Get hierarchyControllerState
   * @return hierarchyControllerState
   */
  @javax.annotation.Nullable
  public ConfigManagementHierarchyControllerState getHierarchyControllerState() {
    return hierarchyControllerState;
  }

  public void setHierarchyControllerState(ConfigManagementHierarchyControllerState hierarchyControllerState) {
    this.hierarchyControllerState = hierarchyControllerState;
  }


  public ConfigManagementMembershipState membershipSpec(ConfigManagementMembershipSpec membershipSpec) {
    this.membershipSpec = membershipSpec;
    return this;
  }

  /**
   * Get membershipSpec
   * @return membershipSpec
   */
  @javax.annotation.Nullable
  public ConfigManagementMembershipSpec getMembershipSpec() {
    return membershipSpec;
  }

  public void setMembershipSpec(ConfigManagementMembershipSpec membershipSpec) {
    this.membershipSpec = membershipSpec;
  }


  public ConfigManagementMembershipState operatorState(ConfigManagementOperatorState operatorState) {
    this.operatorState = operatorState;
    return this;
  }

  /**
   * Get operatorState
   * @return operatorState
   */
  @javax.annotation.Nullable
  public ConfigManagementOperatorState getOperatorState() {
    return operatorState;
  }

  public void setOperatorState(ConfigManagementOperatorState operatorState) {
    this.operatorState = operatorState;
  }


  public ConfigManagementMembershipState policyControllerState(ConfigManagementPolicyControllerState policyControllerState) {
    this.policyControllerState = policyControllerState;
    return this;
  }

  /**
   * Get policyControllerState
   * @return policyControllerState
   */
  @javax.annotation.Nullable
  public ConfigManagementPolicyControllerState getPolicyControllerState() {
    return policyControllerState;
  }

  public void setPolicyControllerState(ConfigManagementPolicyControllerState policyControllerState) {
    this.policyControllerState = policyControllerState;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementMembershipState configManagementMembershipState = (ConfigManagementMembershipState) o;
    return Objects.equals(this.clusterName, configManagementMembershipState.clusterName) &&
        Objects.equals(this.configSyncState, configManagementMembershipState.configSyncState) &&
        Objects.equals(this.hierarchyControllerState, configManagementMembershipState.hierarchyControllerState) &&
        Objects.equals(this.membershipSpec, configManagementMembershipState.membershipSpec) &&
        Objects.equals(this.operatorState, configManagementMembershipState.operatorState) &&
        Objects.equals(this.policyControllerState, configManagementMembershipState.policyControllerState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterName, configSyncState, hierarchyControllerState, membershipSpec, operatorState, policyControllerState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementMembershipState {\n");
    sb.append("    clusterName: ").append(toIndentedString(clusterName)).append("\n");
    sb.append("    configSyncState: ").append(toIndentedString(configSyncState)).append("\n");
    sb.append("    hierarchyControllerState: ").append(toIndentedString(hierarchyControllerState)).append("\n");
    sb.append("    membershipSpec: ").append(toIndentedString(membershipSpec)).append("\n");
    sb.append("    operatorState: ").append(toIndentedString(operatorState)).append("\n");
    sb.append("    policyControllerState: ").append(toIndentedString(policyControllerState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterName");
    openapiFields.add("configSyncState");
    openapiFields.add("hierarchyControllerState");
    openapiFields.add("membershipSpec");
    openapiFields.add("operatorState");
    openapiFields.add("policyControllerState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementMembershipState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementMembershipState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementMembershipState is not found in the empty JSON string", ConfigManagementMembershipState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementMembershipState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementMembershipState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterName") != null && !jsonObj.get("clusterName").isJsonNull()) && !jsonObj.get("clusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterName").toString()));
      }
      // validate the optional field `configSyncState`
      if (jsonObj.get("configSyncState") != null && !jsonObj.get("configSyncState").isJsonNull()) {
        ConfigManagementConfigSyncState.validateJsonElement(jsonObj.get("configSyncState"));
      }
      // validate the optional field `hierarchyControllerState`
      if (jsonObj.get("hierarchyControllerState") != null && !jsonObj.get("hierarchyControllerState").isJsonNull()) {
        ConfigManagementHierarchyControllerState.validateJsonElement(jsonObj.get("hierarchyControllerState"));
      }
      // validate the optional field `membershipSpec`
      if (jsonObj.get("membershipSpec") != null && !jsonObj.get("membershipSpec").isJsonNull()) {
        ConfigManagementMembershipSpec.validateJsonElement(jsonObj.get("membershipSpec"));
      }
      // validate the optional field `operatorState`
      if (jsonObj.get("operatorState") != null && !jsonObj.get("operatorState").isJsonNull()) {
        ConfigManagementOperatorState.validateJsonElement(jsonObj.get("operatorState"));
      }
      // validate the optional field `policyControllerState`
      if (jsonObj.get("policyControllerState") != null && !jsonObj.get("policyControllerState").isJsonNull()) {
        ConfigManagementPolicyControllerState.validateJsonElement(jsonObj.get("policyControllerState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementMembershipState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementMembershipState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementMembershipState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementMembershipState.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementMembershipState>() {
           @Override
           public void write(JsonWriter out, ConfigManagementMembershipState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementMembershipState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementMembershipState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementMembershipState
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementMembershipState
   */
  public static ConfigManagementMembershipState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementMembershipState.class);
  }

  /**
   * Convert an instance of ConfigManagementMembershipState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

