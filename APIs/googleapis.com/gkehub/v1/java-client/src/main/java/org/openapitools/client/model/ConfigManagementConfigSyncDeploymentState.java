/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The state of ConfigSync&#39;s deployment on a cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementConfigSyncDeploymentState {
  /**
   * Deployment state of admission-webhook
   */
  @JsonAdapter(AdmissionWebhookEnum.Adapter.class)
  public enum AdmissionWebhookEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    AdmissionWebhookEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdmissionWebhookEnum fromValue(String value) {
      for (AdmissionWebhookEnum b : AdmissionWebhookEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdmissionWebhookEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdmissionWebhookEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdmissionWebhookEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdmissionWebhookEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdmissionWebhookEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADMISSION_WEBHOOK = "admissionWebhook";
  @SerializedName(SERIALIZED_NAME_ADMISSION_WEBHOOK)
  private AdmissionWebhookEnum admissionWebhook;

  /**
   * Deployment state of the git-sync pod
   */
  @JsonAdapter(GitSyncEnum.Adapter.class)
  public enum GitSyncEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    GitSyncEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GitSyncEnum fromValue(String value) {
      for (GitSyncEnum b : GitSyncEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GitSyncEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GitSyncEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GitSyncEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GitSyncEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GitSyncEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GIT_SYNC = "gitSync";
  @SerializedName(SERIALIZED_NAME_GIT_SYNC)
  private GitSyncEnum gitSync;

  /**
   * Deployment state of the importer pod
   */
  @JsonAdapter(ImporterEnum.Adapter.class)
  public enum ImporterEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    ImporterEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ImporterEnum fromValue(String value) {
      for (ImporterEnum b : ImporterEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ImporterEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ImporterEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ImporterEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ImporterEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ImporterEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IMPORTER = "importer";
  @SerializedName(SERIALIZED_NAME_IMPORTER)
  private ImporterEnum importer;

  /**
   * Deployment state of the monitor pod
   */
  @JsonAdapter(MonitorEnum.Adapter.class)
  public enum MonitorEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    MonitorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonitorEnum fromValue(String value) {
      for (MonitorEnum b : MonitorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonitorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonitorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonitorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private MonitorEnum monitor;

  /**
   * Deployment state of reconciler-manager pod
   */
  @JsonAdapter(ReconcilerManagerEnum.Adapter.class)
  public enum ReconcilerManagerEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    ReconcilerManagerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReconcilerManagerEnum fromValue(String value) {
      for (ReconcilerManagerEnum b : ReconcilerManagerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReconcilerManagerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReconcilerManagerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReconcilerManagerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReconcilerManagerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReconcilerManagerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECONCILER_MANAGER = "reconcilerManager";
  @SerializedName(SERIALIZED_NAME_RECONCILER_MANAGER)
  private ReconcilerManagerEnum reconcilerManager;

  /**
   * Deployment state of root-reconciler
   */
  @JsonAdapter(RootReconcilerEnum.Adapter.class)
  public enum RootReconcilerEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    RootReconcilerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RootReconcilerEnum fromValue(String value) {
      for (RootReconcilerEnum b : RootReconcilerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RootReconcilerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RootReconcilerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RootReconcilerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RootReconcilerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RootReconcilerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROOT_RECONCILER = "rootReconciler";
  @SerializedName(SERIALIZED_NAME_ROOT_RECONCILER)
  private RootReconcilerEnum rootReconciler;

  /**
   * Deployment state of the syncer pod
   */
  @JsonAdapter(SyncerEnum.Adapter.class)
  public enum SyncerEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    SyncerEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncerEnum fromValue(String value) {
      for (SyncerEnum b : SyncerEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncerEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncerEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncerEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncerEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SyncerEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNCER = "syncer";
  @SerializedName(SERIALIZED_NAME_SYNCER)
  private SyncerEnum syncer;

  public ConfigManagementConfigSyncDeploymentState() {
  }

  public ConfigManagementConfigSyncDeploymentState admissionWebhook(AdmissionWebhookEnum admissionWebhook) {
    this.admissionWebhook = admissionWebhook;
    return this;
  }

  /**
   * Deployment state of admission-webhook
   * @return admissionWebhook
   */
  @javax.annotation.Nullable
  public AdmissionWebhookEnum getAdmissionWebhook() {
    return admissionWebhook;
  }

  public void setAdmissionWebhook(AdmissionWebhookEnum admissionWebhook) {
    this.admissionWebhook = admissionWebhook;
  }


  public ConfigManagementConfigSyncDeploymentState gitSync(GitSyncEnum gitSync) {
    this.gitSync = gitSync;
    return this;
  }

  /**
   * Deployment state of the git-sync pod
   * @return gitSync
   */
  @javax.annotation.Nullable
  public GitSyncEnum getGitSync() {
    return gitSync;
  }

  public void setGitSync(GitSyncEnum gitSync) {
    this.gitSync = gitSync;
  }


  public ConfigManagementConfigSyncDeploymentState importer(ImporterEnum importer) {
    this.importer = importer;
    return this;
  }

  /**
   * Deployment state of the importer pod
   * @return importer
   */
  @javax.annotation.Nullable
  public ImporterEnum getImporter() {
    return importer;
  }

  public void setImporter(ImporterEnum importer) {
    this.importer = importer;
  }


  public ConfigManagementConfigSyncDeploymentState monitor(MonitorEnum monitor) {
    this.monitor = monitor;
    return this;
  }

  /**
   * Deployment state of the monitor pod
   * @return monitor
   */
  @javax.annotation.Nullable
  public MonitorEnum getMonitor() {
    return monitor;
  }

  public void setMonitor(MonitorEnum monitor) {
    this.monitor = monitor;
  }


  public ConfigManagementConfigSyncDeploymentState reconcilerManager(ReconcilerManagerEnum reconcilerManager) {
    this.reconcilerManager = reconcilerManager;
    return this;
  }

  /**
   * Deployment state of reconciler-manager pod
   * @return reconcilerManager
   */
  @javax.annotation.Nullable
  public ReconcilerManagerEnum getReconcilerManager() {
    return reconcilerManager;
  }

  public void setReconcilerManager(ReconcilerManagerEnum reconcilerManager) {
    this.reconcilerManager = reconcilerManager;
  }


  public ConfigManagementConfigSyncDeploymentState rootReconciler(RootReconcilerEnum rootReconciler) {
    this.rootReconciler = rootReconciler;
    return this;
  }

  /**
   * Deployment state of root-reconciler
   * @return rootReconciler
   */
  @javax.annotation.Nullable
  public RootReconcilerEnum getRootReconciler() {
    return rootReconciler;
  }

  public void setRootReconciler(RootReconcilerEnum rootReconciler) {
    this.rootReconciler = rootReconciler;
  }


  public ConfigManagementConfigSyncDeploymentState syncer(SyncerEnum syncer) {
    this.syncer = syncer;
    return this;
  }

  /**
   * Deployment state of the syncer pod
   * @return syncer
   */
  @javax.annotation.Nullable
  public SyncerEnum getSyncer() {
    return syncer;
  }

  public void setSyncer(SyncerEnum syncer) {
    this.syncer = syncer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementConfigSyncDeploymentState configManagementConfigSyncDeploymentState = (ConfigManagementConfigSyncDeploymentState) o;
    return Objects.equals(this.admissionWebhook, configManagementConfigSyncDeploymentState.admissionWebhook) &&
        Objects.equals(this.gitSync, configManagementConfigSyncDeploymentState.gitSync) &&
        Objects.equals(this.importer, configManagementConfigSyncDeploymentState.importer) &&
        Objects.equals(this.monitor, configManagementConfigSyncDeploymentState.monitor) &&
        Objects.equals(this.reconcilerManager, configManagementConfigSyncDeploymentState.reconcilerManager) &&
        Objects.equals(this.rootReconciler, configManagementConfigSyncDeploymentState.rootReconciler) &&
        Objects.equals(this.syncer, configManagementConfigSyncDeploymentState.syncer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admissionWebhook, gitSync, importer, monitor, reconcilerManager, rootReconciler, syncer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementConfigSyncDeploymentState {\n");
    sb.append("    admissionWebhook: ").append(toIndentedString(admissionWebhook)).append("\n");
    sb.append("    gitSync: ").append(toIndentedString(gitSync)).append("\n");
    sb.append("    importer: ").append(toIndentedString(importer)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    reconcilerManager: ").append(toIndentedString(reconcilerManager)).append("\n");
    sb.append("    rootReconciler: ").append(toIndentedString(rootReconciler)).append("\n");
    sb.append("    syncer: ").append(toIndentedString(syncer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admissionWebhook");
    openapiFields.add("gitSync");
    openapiFields.add("importer");
    openapiFields.add("monitor");
    openapiFields.add("reconcilerManager");
    openapiFields.add("rootReconciler");
    openapiFields.add("syncer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementConfigSyncDeploymentState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementConfigSyncDeploymentState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementConfigSyncDeploymentState is not found in the empty JSON string", ConfigManagementConfigSyncDeploymentState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementConfigSyncDeploymentState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementConfigSyncDeploymentState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admissionWebhook") != null && !jsonObj.get("admissionWebhook").isJsonNull()) && !jsonObj.get("admissionWebhook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admissionWebhook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admissionWebhook").toString()));
      }
      // validate the optional field `admissionWebhook`
      if (jsonObj.get("admissionWebhook") != null && !jsonObj.get("admissionWebhook").isJsonNull()) {
        AdmissionWebhookEnum.validateJsonElement(jsonObj.get("admissionWebhook"));
      }
      if ((jsonObj.get("gitSync") != null && !jsonObj.get("gitSync").isJsonNull()) && !jsonObj.get("gitSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitSync").toString()));
      }
      // validate the optional field `gitSync`
      if (jsonObj.get("gitSync") != null && !jsonObj.get("gitSync").isJsonNull()) {
        GitSyncEnum.validateJsonElement(jsonObj.get("gitSync"));
      }
      if ((jsonObj.get("importer") != null && !jsonObj.get("importer").isJsonNull()) && !jsonObj.get("importer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importer").toString()));
      }
      // validate the optional field `importer`
      if (jsonObj.get("importer") != null && !jsonObj.get("importer").isJsonNull()) {
        ImporterEnum.validateJsonElement(jsonObj.get("importer"));
      }
      if ((jsonObj.get("monitor") != null && !jsonObj.get("monitor").isJsonNull()) && !jsonObj.get("monitor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor").toString()));
      }
      // validate the optional field `monitor`
      if (jsonObj.get("monitor") != null && !jsonObj.get("monitor").isJsonNull()) {
        MonitorEnum.validateJsonElement(jsonObj.get("monitor"));
      }
      if ((jsonObj.get("reconcilerManager") != null && !jsonObj.get("reconcilerManager").isJsonNull()) && !jsonObj.get("reconcilerManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconcilerManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconcilerManager").toString()));
      }
      // validate the optional field `reconcilerManager`
      if (jsonObj.get("reconcilerManager") != null && !jsonObj.get("reconcilerManager").isJsonNull()) {
        ReconcilerManagerEnum.validateJsonElement(jsonObj.get("reconcilerManager"));
      }
      if ((jsonObj.get("rootReconciler") != null && !jsonObj.get("rootReconciler").isJsonNull()) && !jsonObj.get("rootReconciler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootReconciler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootReconciler").toString()));
      }
      // validate the optional field `rootReconciler`
      if (jsonObj.get("rootReconciler") != null && !jsonObj.get("rootReconciler").isJsonNull()) {
        RootReconcilerEnum.validateJsonElement(jsonObj.get("rootReconciler"));
      }
      if ((jsonObj.get("syncer") != null && !jsonObj.get("syncer").isJsonNull()) && !jsonObj.get("syncer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncer").toString()));
      }
      // validate the optional field `syncer`
      if (jsonObj.get("syncer") != null && !jsonObj.get("syncer").isJsonNull()) {
        SyncerEnum.validateJsonElement(jsonObj.get("syncer"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementConfigSyncDeploymentState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementConfigSyncDeploymentState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementConfigSyncDeploymentState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementConfigSyncDeploymentState.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementConfigSyncDeploymentState>() {
           @Override
           public void write(JsonWriter out, ConfigManagementConfigSyncDeploymentState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementConfigSyncDeploymentState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementConfigSyncDeploymentState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementConfigSyncDeploymentState
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementConfigSyncDeploymentState
   */
  public static ConfigManagementConfigSyncDeploymentState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementConfigSyncDeploymentState.class);
  }

  /**
   * Convert an instance of ConfigManagementConfigSyncDeploymentState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

