/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PolicyControllerMonitoringConfig;
import org.openapitools.client.model.PolicyControllerPolicyContentSpec;
import org.openapitools.client.model.PolicyControllerPolicyControllerDeploymentConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Policy Controller
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:03.748693-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyControllerHubConfig {
  public static final String SERIALIZED_NAME_AUDIT_INTERVAL_SECONDS = "auditIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_AUDIT_INTERVAL_SECONDS)
  private String auditIntervalSeconds;

  public static final String SERIALIZED_NAME_CONSTRAINT_VIOLATION_LIMIT = "constraintViolationLimit";
  @SerializedName(SERIALIZED_NAME_CONSTRAINT_VIOLATION_LIMIT)
  private String constraintViolationLimit;

  public static final String SERIALIZED_NAME_DEPLOYMENT_CONFIGS = "deploymentConfigs";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_CONFIGS)
  private Map<String, PolicyControllerPolicyControllerDeploymentConfig> deploymentConfigs = new HashMap<>();

  public static final String SERIALIZED_NAME_EXEMPTABLE_NAMESPACES = "exemptableNamespaces";
  @SerializedName(SERIALIZED_NAME_EXEMPTABLE_NAMESPACES)
  private List<String> exemptableNamespaces = new ArrayList<>();

  /**
   * The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
   */
  @JsonAdapter(InstallSpecEnum.Adapter.class)
  public enum InstallSpecEnum {
    UNSPECIFIED("INSTALL_SPEC_UNSPECIFIED"),
    
    NOT_INSTALLED("INSTALL_SPEC_NOT_INSTALLED"),
    
    ENABLED("INSTALL_SPEC_ENABLED"),
    
    SUSPENDED("INSTALL_SPEC_SUSPENDED"),
    
    DETACHED("INSTALL_SPEC_DETACHED");

    private String value;

    InstallSpecEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InstallSpecEnum fromValue(String value) {
      for (InstallSpecEnum b : InstallSpecEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InstallSpecEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InstallSpecEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InstallSpecEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InstallSpecEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InstallSpecEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INSTALL_SPEC = "installSpec";
  @SerializedName(SERIALIZED_NAME_INSTALL_SPEC)
  private InstallSpecEnum installSpec;

  public static final String SERIALIZED_NAME_LOG_DENIES_ENABLED = "logDeniesEnabled";
  @SerializedName(SERIALIZED_NAME_LOG_DENIES_ENABLED)
  private Boolean logDeniesEnabled;

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private PolicyControllerMonitoringConfig monitoring;

  public static final String SERIALIZED_NAME_MUTATION_ENABLED = "mutationEnabled";
  @SerializedName(SERIALIZED_NAME_MUTATION_ENABLED)
  private Boolean mutationEnabled;

  public static final String SERIALIZED_NAME_POLICY_CONTENT = "policyContent";
  @SerializedName(SERIALIZED_NAME_POLICY_CONTENT)
  private PolicyControllerPolicyContentSpec policyContent;

  public static final String SERIALIZED_NAME_REFERENTIAL_RULES_ENABLED = "referentialRulesEnabled";
  @SerializedName(SERIALIZED_NAME_REFERENTIAL_RULES_ENABLED)
  private Boolean referentialRulesEnabled;

  public PolicyControllerHubConfig() {
  }

  public PolicyControllerHubConfig auditIntervalSeconds(String auditIntervalSeconds) {
    this.auditIntervalSeconds = auditIntervalSeconds;
    return this;
  }

  /**
   * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
   * @return auditIntervalSeconds
   */
  @javax.annotation.Nullable
  public String getAuditIntervalSeconds() {
    return auditIntervalSeconds;
  }

  public void setAuditIntervalSeconds(String auditIntervalSeconds) {
    this.auditIntervalSeconds = auditIntervalSeconds;
  }


  public PolicyControllerHubConfig constraintViolationLimit(String constraintViolationLimit) {
    this.constraintViolationLimit = constraintViolationLimit;
    return this;
  }

  /**
   * The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
   * @return constraintViolationLimit
   */
  @javax.annotation.Nullable
  public String getConstraintViolationLimit() {
    return constraintViolationLimit;
  }

  public void setConstraintViolationLimit(String constraintViolationLimit) {
    this.constraintViolationLimit = constraintViolationLimit;
  }


  public PolicyControllerHubConfig deploymentConfigs(Map<String, PolicyControllerPolicyControllerDeploymentConfig> deploymentConfigs) {
    this.deploymentConfigs = deploymentConfigs;
    return this;
  }

  public PolicyControllerHubConfig putDeploymentConfigsItem(String key, PolicyControllerPolicyControllerDeploymentConfig deploymentConfigsItem) {
    if (this.deploymentConfigs == null) {
      this.deploymentConfigs = new HashMap<>();
    }
    this.deploymentConfigs.put(key, deploymentConfigsItem);
    return this;
  }

  /**
   * Map of deployment configs to deployments (\&quot;admission\&quot;, \&quot;audit\&quot;, \&quot;mutation&#39;).
   * @return deploymentConfigs
   */
  @javax.annotation.Nullable
  public Map<String, PolicyControllerPolicyControllerDeploymentConfig> getDeploymentConfigs() {
    return deploymentConfigs;
  }

  public void setDeploymentConfigs(Map<String, PolicyControllerPolicyControllerDeploymentConfig> deploymentConfigs) {
    this.deploymentConfigs = deploymentConfigs;
  }


  public PolicyControllerHubConfig exemptableNamespaces(List<String> exemptableNamespaces) {
    this.exemptableNamespaces = exemptableNamespaces;
    return this;
  }

  public PolicyControllerHubConfig addExemptableNamespacesItem(String exemptableNamespacesItem) {
    if (this.exemptableNamespaces == null) {
      this.exemptableNamespaces = new ArrayList<>();
    }
    this.exemptableNamespaces.add(exemptableNamespacesItem);
    return this;
  }

  /**
   * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
   * @return exemptableNamespaces
   */
  @javax.annotation.Nullable
  public List<String> getExemptableNamespaces() {
    return exemptableNamespaces;
  }

  public void setExemptableNamespaces(List<String> exemptableNamespaces) {
    this.exemptableNamespaces = exemptableNamespaces;
  }


  public PolicyControllerHubConfig installSpec(InstallSpecEnum installSpec) {
    this.installSpec = installSpec;
    return this;
  }

  /**
   * The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
   * @return installSpec
   */
  @javax.annotation.Nullable
  public InstallSpecEnum getInstallSpec() {
    return installSpec;
  }

  public void setInstallSpec(InstallSpecEnum installSpec) {
    this.installSpec = installSpec;
  }


  public PolicyControllerHubConfig logDeniesEnabled(Boolean logDeniesEnabled) {
    this.logDeniesEnabled = logDeniesEnabled;
    return this;
  }

  /**
   * Logs all denies and dry run failures.
   * @return logDeniesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLogDeniesEnabled() {
    return logDeniesEnabled;
  }

  public void setLogDeniesEnabled(Boolean logDeniesEnabled) {
    this.logDeniesEnabled = logDeniesEnabled;
  }


  public PolicyControllerHubConfig monitoring(PolicyControllerMonitoringConfig monitoring) {
    this.monitoring = monitoring;
    return this;
  }

  /**
   * Get monitoring
   * @return monitoring
   */
  @javax.annotation.Nullable
  public PolicyControllerMonitoringConfig getMonitoring() {
    return monitoring;
  }

  public void setMonitoring(PolicyControllerMonitoringConfig monitoring) {
    this.monitoring = monitoring;
  }


  public PolicyControllerHubConfig mutationEnabled(Boolean mutationEnabled) {
    this.mutationEnabled = mutationEnabled;
    return this;
  }

  /**
   * Enables the ability to mutate resources using Policy Controller.
   * @return mutationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMutationEnabled() {
    return mutationEnabled;
  }

  public void setMutationEnabled(Boolean mutationEnabled) {
    this.mutationEnabled = mutationEnabled;
  }


  public PolicyControllerHubConfig policyContent(PolicyControllerPolicyContentSpec policyContent) {
    this.policyContent = policyContent;
    return this;
  }

  /**
   * Get policyContent
   * @return policyContent
   */
  @javax.annotation.Nullable
  public PolicyControllerPolicyContentSpec getPolicyContent() {
    return policyContent;
  }

  public void setPolicyContent(PolicyControllerPolicyContentSpec policyContent) {
    this.policyContent = policyContent;
  }


  public PolicyControllerHubConfig referentialRulesEnabled(Boolean referentialRulesEnabled) {
    this.referentialRulesEnabled = referentialRulesEnabled;
    return this;
  }

  /**
   * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
   * @return referentialRulesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReferentialRulesEnabled() {
    return referentialRulesEnabled;
  }

  public void setReferentialRulesEnabled(Boolean referentialRulesEnabled) {
    this.referentialRulesEnabled = referentialRulesEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyControllerHubConfig policyControllerHubConfig = (PolicyControllerHubConfig) o;
    return Objects.equals(this.auditIntervalSeconds, policyControllerHubConfig.auditIntervalSeconds) &&
        Objects.equals(this.constraintViolationLimit, policyControllerHubConfig.constraintViolationLimit) &&
        Objects.equals(this.deploymentConfigs, policyControllerHubConfig.deploymentConfigs) &&
        Objects.equals(this.exemptableNamespaces, policyControllerHubConfig.exemptableNamespaces) &&
        Objects.equals(this.installSpec, policyControllerHubConfig.installSpec) &&
        Objects.equals(this.logDeniesEnabled, policyControllerHubConfig.logDeniesEnabled) &&
        Objects.equals(this.monitoring, policyControllerHubConfig.monitoring) &&
        Objects.equals(this.mutationEnabled, policyControllerHubConfig.mutationEnabled) &&
        Objects.equals(this.policyContent, policyControllerHubConfig.policyContent) &&
        Objects.equals(this.referentialRulesEnabled, policyControllerHubConfig.referentialRulesEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditIntervalSeconds, constraintViolationLimit, deploymentConfigs, exemptableNamespaces, installSpec, logDeniesEnabled, monitoring, mutationEnabled, policyContent, referentialRulesEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyControllerHubConfig {\n");
    sb.append("    auditIntervalSeconds: ").append(toIndentedString(auditIntervalSeconds)).append("\n");
    sb.append("    constraintViolationLimit: ").append(toIndentedString(constraintViolationLimit)).append("\n");
    sb.append("    deploymentConfigs: ").append(toIndentedString(deploymentConfigs)).append("\n");
    sb.append("    exemptableNamespaces: ").append(toIndentedString(exemptableNamespaces)).append("\n");
    sb.append("    installSpec: ").append(toIndentedString(installSpec)).append("\n");
    sb.append("    logDeniesEnabled: ").append(toIndentedString(logDeniesEnabled)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    mutationEnabled: ").append(toIndentedString(mutationEnabled)).append("\n");
    sb.append("    policyContent: ").append(toIndentedString(policyContent)).append("\n");
    sb.append("    referentialRulesEnabled: ").append(toIndentedString(referentialRulesEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auditIntervalSeconds");
    openapiFields.add("constraintViolationLimit");
    openapiFields.add("deploymentConfigs");
    openapiFields.add("exemptableNamespaces");
    openapiFields.add("installSpec");
    openapiFields.add("logDeniesEnabled");
    openapiFields.add("monitoring");
    openapiFields.add("mutationEnabled");
    openapiFields.add("policyContent");
    openapiFields.add("referentialRulesEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyControllerHubConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyControllerHubConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyControllerHubConfig is not found in the empty JSON string", PolicyControllerHubConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyControllerHubConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyControllerHubConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auditIntervalSeconds") != null && !jsonObj.get("auditIntervalSeconds").isJsonNull()) && !jsonObj.get("auditIntervalSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditIntervalSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auditIntervalSeconds").toString()));
      }
      if ((jsonObj.get("constraintViolationLimit") != null && !jsonObj.get("constraintViolationLimit").isJsonNull()) && !jsonObj.get("constraintViolationLimit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `constraintViolationLimit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("constraintViolationLimit").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exemptableNamespaces") != null && !jsonObj.get("exemptableNamespaces").isJsonNull() && !jsonObj.get("exemptableNamespaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exemptableNamespaces` to be an array in the JSON string but got `%s`", jsonObj.get("exemptableNamespaces").toString()));
      }
      if ((jsonObj.get("installSpec") != null && !jsonObj.get("installSpec").isJsonNull()) && !jsonObj.get("installSpec").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `installSpec` to be a primitive type in the JSON string but got `%s`", jsonObj.get("installSpec").toString()));
      }
      // validate the optional field `installSpec`
      if (jsonObj.get("installSpec") != null && !jsonObj.get("installSpec").isJsonNull()) {
        InstallSpecEnum.validateJsonElement(jsonObj.get("installSpec"));
      }
      // validate the optional field `monitoring`
      if (jsonObj.get("monitoring") != null && !jsonObj.get("monitoring").isJsonNull()) {
        PolicyControllerMonitoringConfig.validateJsonElement(jsonObj.get("monitoring"));
      }
      // validate the optional field `policyContent`
      if (jsonObj.get("policyContent") != null && !jsonObj.get("policyContent").isJsonNull()) {
        PolicyControllerPolicyContentSpec.validateJsonElement(jsonObj.get("policyContent"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyControllerHubConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyControllerHubConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyControllerHubConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyControllerHubConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyControllerHubConfig>() {
           @Override
           public void write(JsonWriter out, PolicyControllerHubConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyControllerHubConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyControllerHubConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyControllerHubConfig
   * @throws IOException if the JSON string is invalid with respect to PolicyControllerHubConfig
   */
  public static PolicyControllerHubConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyControllerHubConfig.class);
  }

  /**
   * Convert an instance of PolicyControllerHubConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

