/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementConfigSyncDeploymentState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementConfigSyncDeploymentState::OAIConfigManagementConfigSyncDeploymentState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementConfigSyncDeploymentState::OAIConfigManagementConfigSyncDeploymentState() {
    this->initializeModel();
}

OAIConfigManagementConfigSyncDeploymentState::~OAIConfigManagementConfigSyncDeploymentState() {}

void OAIConfigManagementConfigSyncDeploymentState::initializeModel() {

    m_admission_webhook_isSet = false;
    m_admission_webhook_isValid = false;

    m_git_sync_isSet = false;
    m_git_sync_isValid = false;

    m_importer_isSet = false;
    m_importer_isValid = false;

    m_monitor_isSet = false;
    m_monitor_isValid = false;

    m_reconciler_manager_isSet = false;
    m_reconciler_manager_isValid = false;

    m_root_reconciler_isSet = false;
    m_root_reconciler_isValid = false;

    m_syncer_isSet = false;
    m_syncer_isValid = false;
}

void OAIConfigManagementConfigSyncDeploymentState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementConfigSyncDeploymentState::fromJsonObject(QJsonObject json) {

    m_admission_webhook_isValid = ::OpenAPI::fromJsonValue(m_admission_webhook, json[QString("admissionWebhook")]);
    m_admission_webhook_isSet = !json[QString("admissionWebhook")].isNull() && m_admission_webhook_isValid;

    m_git_sync_isValid = ::OpenAPI::fromJsonValue(m_git_sync, json[QString("gitSync")]);
    m_git_sync_isSet = !json[QString("gitSync")].isNull() && m_git_sync_isValid;

    m_importer_isValid = ::OpenAPI::fromJsonValue(m_importer, json[QString("importer")]);
    m_importer_isSet = !json[QString("importer")].isNull() && m_importer_isValid;

    m_monitor_isValid = ::OpenAPI::fromJsonValue(m_monitor, json[QString("monitor")]);
    m_monitor_isSet = !json[QString("monitor")].isNull() && m_monitor_isValid;

    m_reconciler_manager_isValid = ::OpenAPI::fromJsonValue(m_reconciler_manager, json[QString("reconcilerManager")]);
    m_reconciler_manager_isSet = !json[QString("reconcilerManager")].isNull() && m_reconciler_manager_isValid;

    m_root_reconciler_isValid = ::OpenAPI::fromJsonValue(m_root_reconciler, json[QString("rootReconciler")]);
    m_root_reconciler_isSet = !json[QString("rootReconciler")].isNull() && m_root_reconciler_isValid;

    m_syncer_isValid = ::OpenAPI::fromJsonValue(m_syncer, json[QString("syncer")]);
    m_syncer_isSet = !json[QString("syncer")].isNull() && m_syncer_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementConfigSyncDeploymentState::asJsonObject() const {
    QJsonObject obj;
    if (m_admission_webhook_isSet) {
        obj.insert(QString("admissionWebhook"), ::OpenAPI::toJsonValue(m_admission_webhook));
    }
    if (m_git_sync_isSet) {
        obj.insert(QString("gitSync"), ::OpenAPI::toJsonValue(m_git_sync));
    }
    if (m_importer_isSet) {
        obj.insert(QString("importer"), ::OpenAPI::toJsonValue(m_importer));
    }
    if (m_monitor_isSet) {
        obj.insert(QString("monitor"), ::OpenAPI::toJsonValue(m_monitor));
    }
    if (m_reconciler_manager_isSet) {
        obj.insert(QString("reconcilerManager"), ::OpenAPI::toJsonValue(m_reconciler_manager));
    }
    if (m_root_reconciler_isSet) {
        obj.insert(QString("rootReconciler"), ::OpenAPI::toJsonValue(m_root_reconciler));
    }
    if (m_syncer_isSet) {
        obj.insert(QString("syncer"), ::OpenAPI::toJsonValue(m_syncer));
    }
    return obj;
}

QString OAIConfigManagementConfigSyncDeploymentState::getAdmissionWebhook() const {
    return m_admission_webhook;
}
void OAIConfigManagementConfigSyncDeploymentState::setAdmissionWebhook(const QString &admission_webhook) {
    m_admission_webhook = admission_webhook;
    m_admission_webhook_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_admission_webhook_Set() const{
    return m_admission_webhook_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_admission_webhook_Valid() const{
    return m_admission_webhook_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::getGitSync() const {
    return m_git_sync;
}
void OAIConfigManagementConfigSyncDeploymentState::setGitSync(const QString &git_sync) {
    m_git_sync = git_sync;
    m_git_sync_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_git_sync_Set() const{
    return m_git_sync_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_git_sync_Valid() const{
    return m_git_sync_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::getImporter() const {
    return m_importer;
}
void OAIConfigManagementConfigSyncDeploymentState::setImporter(const QString &importer) {
    m_importer = importer;
    m_importer_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_importer_Set() const{
    return m_importer_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_importer_Valid() const{
    return m_importer_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::getMonitor() const {
    return m_monitor;
}
void OAIConfigManagementConfigSyncDeploymentState::setMonitor(const QString &monitor) {
    m_monitor = monitor;
    m_monitor_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_monitor_Set() const{
    return m_monitor_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_monitor_Valid() const{
    return m_monitor_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::getReconcilerManager() const {
    return m_reconciler_manager;
}
void OAIConfigManagementConfigSyncDeploymentState::setReconcilerManager(const QString &reconciler_manager) {
    m_reconciler_manager = reconciler_manager;
    m_reconciler_manager_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_reconciler_manager_Set() const{
    return m_reconciler_manager_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_reconciler_manager_Valid() const{
    return m_reconciler_manager_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::getRootReconciler() const {
    return m_root_reconciler;
}
void OAIConfigManagementConfigSyncDeploymentState::setRootReconciler(const QString &root_reconciler) {
    m_root_reconciler = root_reconciler;
    m_root_reconciler_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_root_reconciler_Set() const{
    return m_root_reconciler_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_root_reconciler_Valid() const{
    return m_root_reconciler_isValid;
}

QString OAIConfigManagementConfigSyncDeploymentState::getSyncer() const {
    return m_syncer;
}
void OAIConfigManagementConfigSyncDeploymentState::setSyncer(const QString &syncer) {
    m_syncer = syncer;
    m_syncer_isSet = true;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_syncer_Set() const{
    return m_syncer_isSet;
}

bool OAIConfigManagementConfigSyncDeploymentState::is_syncer_Valid() const{
    return m_syncer_isValid;
}

bool OAIConfigManagementConfigSyncDeploymentState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admission_webhook_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_importer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reconciler_manager_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_root_reconciler_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syncer_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementConfigSyncDeploymentState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
