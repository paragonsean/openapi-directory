/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityServiceAuthMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityServiceAuthMethod::OAIIdentityServiceAuthMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityServiceAuthMethod::OAIIdentityServiceAuthMethod() {
    this->initializeModel();
}

OAIIdentityServiceAuthMethod::~OAIIdentityServiceAuthMethod() {}

void OAIIdentityServiceAuthMethod::initializeModel() {

    m_azuread_config_isSet = false;
    m_azuread_config_isValid = false;

    m_google_config_isSet = false;
    m_google_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_oidc_config_isSet = false;
    m_oidc_config_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;
}

void OAIIdentityServiceAuthMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityServiceAuthMethod::fromJsonObject(QJsonObject json) {

    m_azuread_config_isValid = ::OpenAPI::fromJsonValue(m_azuread_config, json[QString("azureadConfig")]);
    m_azuread_config_isSet = !json[QString("azureadConfig")].isNull() && m_azuread_config_isValid;

    m_google_config_isValid = ::OpenAPI::fromJsonValue(m_google_config, json[QString("googleConfig")]);
    m_google_config_isSet = !json[QString("googleConfig")].isNull() && m_google_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_oidc_config_isValid = ::OpenAPI::fromJsonValue(m_oidc_config, json[QString("oidcConfig")]);
    m_oidc_config_isSet = !json[QString("oidcConfig")].isNull() && m_oidc_config_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;
}

QString OAIIdentityServiceAuthMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityServiceAuthMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_azuread_config.isSet()) {
        obj.insert(QString("azureadConfig"), ::OpenAPI::toJsonValue(m_azuread_config));
    }
    if (m_google_config.isSet()) {
        obj.insert(QString("googleConfig"), ::OpenAPI::toJsonValue(m_google_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_oidc_config.isSet()) {
        obj.insert(QString("oidcConfig"), ::OpenAPI::toJsonValue(m_oidc_config));
    }
    if (m_proxy_isSet) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    return obj;
}

OAIIdentityServiceAzureADConfig OAIIdentityServiceAuthMethod::getAzureadConfig() const {
    return m_azuread_config;
}
void OAIIdentityServiceAuthMethod::setAzureadConfig(const OAIIdentityServiceAzureADConfig &azuread_config) {
    m_azuread_config = azuread_config;
    m_azuread_config_isSet = true;
}

bool OAIIdentityServiceAuthMethod::is_azuread_config_Set() const{
    return m_azuread_config_isSet;
}

bool OAIIdentityServiceAuthMethod::is_azuread_config_Valid() const{
    return m_azuread_config_isValid;
}

OAIIdentityServiceGoogleConfig OAIIdentityServiceAuthMethod::getGoogleConfig() const {
    return m_google_config;
}
void OAIIdentityServiceAuthMethod::setGoogleConfig(const OAIIdentityServiceGoogleConfig &google_config) {
    m_google_config = google_config;
    m_google_config_isSet = true;
}

bool OAIIdentityServiceAuthMethod::is_google_config_Set() const{
    return m_google_config_isSet;
}

bool OAIIdentityServiceAuthMethod::is_google_config_Valid() const{
    return m_google_config_isValid;
}

QString OAIIdentityServiceAuthMethod::getName() const {
    return m_name;
}
void OAIIdentityServiceAuthMethod::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIIdentityServiceAuthMethod::is_name_Set() const{
    return m_name_isSet;
}

bool OAIIdentityServiceAuthMethod::is_name_Valid() const{
    return m_name_isValid;
}

OAIIdentityServiceOidcConfig OAIIdentityServiceAuthMethod::getOidcConfig() const {
    return m_oidc_config;
}
void OAIIdentityServiceAuthMethod::setOidcConfig(const OAIIdentityServiceOidcConfig &oidc_config) {
    m_oidc_config = oidc_config;
    m_oidc_config_isSet = true;
}

bool OAIIdentityServiceAuthMethod::is_oidc_config_Set() const{
    return m_oidc_config_isSet;
}

bool OAIIdentityServiceAuthMethod::is_oidc_config_Valid() const{
    return m_oidc_config_isValid;
}

QString OAIIdentityServiceAuthMethod::getProxy() const {
    return m_proxy;
}
void OAIIdentityServiceAuthMethod::setProxy(const QString &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAIIdentityServiceAuthMethod::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAIIdentityServiceAuthMethod::is_proxy_Valid() const{
    return m_proxy_isValid;
}

bool OAIIdentityServiceAuthMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_azuread_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oidc_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityServiceAuthMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
