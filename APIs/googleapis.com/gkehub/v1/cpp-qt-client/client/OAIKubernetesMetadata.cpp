/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKubernetesMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKubernetesMetadata::OAIKubernetesMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKubernetesMetadata::OAIKubernetesMetadata() {
    this->initializeModel();
}

OAIKubernetesMetadata::~OAIKubernetesMetadata() {}

void OAIKubernetesMetadata::initializeModel() {

    m_kubernetes_api_server_version_isSet = false;
    m_kubernetes_api_server_version_isValid = false;

    m_memory_mb_isSet = false;
    m_memory_mb_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_node_provider_id_isSet = false;
    m_node_provider_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_vcpu_count_isSet = false;
    m_vcpu_count_isValid = false;
}

void OAIKubernetesMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKubernetesMetadata::fromJsonObject(QJsonObject json) {

    m_kubernetes_api_server_version_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_api_server_version, json[QString("kubernetesApiServerVersion")]);
    m_kubernetes_api_server_version_isSet = !json[QString("kubernetesApiServerVersion")].isNull() && m_kubernetes_api_server_version_isValid;

    m_memory_mb_isValid = ::OpenAPI::fromJsonValue(m_memory_mb, json[QString("memoryMb")]);
    m_memory_mb_isSet = !json[QString("memoryMb")].isNull() && m_memory_mb_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_node_provider_id_isValid = ::OpenAPI::fromJsonValue(m_node_provider_id, json[QString("nodeProviderId")]);
    m_node_provider_id_isSet = !json[QString("nodeProviderId")].isNull() && m_node_provider_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_vcpu_count_isValid = ::OpenAPI::fromJsonValue(m_vcpu_count, json[QString("vcpuCount")]);
    m_vcpu_count_isSet = !json[QString("vcpuCount")].isNull() && m_vcpu_count_isValid;
}

QString OAIKubernetesMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKubernetesMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_kubernetes_api_server_version_isSet) {
        obj.insert(QString("kubernetesApiServerVersion"), ::OpenAPI::toJsonValue(m_kubernetes_api_server_version));
    }
    if (m_memory_mb_isSet) {
        obj.insert(QString("memoryMb"), ::OpenAPI::toJsonValue(m_memory_mb));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_node_provider_id_isSet) {
        obj.insert(QString("nodeProviderId"), ::OpenAPI::toJsonValue(m_node_provider_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_vcpu_count_isSet) {
        obj.insert(QString("vcpuCount"), ::OpenAPI::toJsonValue(m_vcpu_count));
    }
    return obj;
}

QString OAIKubernetesMetadata::getKubernetesApiServerVersion() const {
    return m_kubernetes_api_server_version;
}
void OAIKubernetesMetadata::setKubernetesApiServerVersion(const QString &kubernetes_api_server_version) {
    m_kubernetes_api_server_version = kubernetes_api_server_version;
    m_kubernetes_api_server_version_isSet = true;
}

bool OAIKubernetesMetadata::is_kubernetes_api_server_version_Set() const{
    return m_kubernetes_api_server_version_isSet;
}

bool OAIKubernetesMetadata::is_kubernetes_api_server_version_Valid() const{
    return m_kubernetes_api_server_version_isValid;
}

qint32 OAIKubernetesMetadata::getMemoryMb() const {
    return m_memory_mb;
}
void OAIKubernetesMetadata::setMemoryMb(const qint32 &memory_mb) {
    m_memory_mb = memory_mb;
    m_memory_mb_isSet = true;
}

bool OAIKubernetesMetadata::is_memory_mb_Set() const{
    return m_memory_mb_isSet;
}

bool OAIKubernetesMetadata::is_memory_mb_Valid() const{
    return m_memory_mb_isValid;
}

qint32 OAIKubernetesMetadata::getNodeCount() const {
    return m_node_count;
}
void OAIKubernetesMetadata::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIKubernetesMetadata::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIKubernetesMetadata::is_node_count_Valid() const{
    return m_node_count_isValid;
}

QString OAIKubernetesMetadata::getNodeProviderId() const {
    return m_node_provider_id;
}
void OAIKubernetesMetadata::setNodeProviderId(const QString &node_provider_id) {
    m_node_provider_id = node_provider_id;
    m_node_provider_id_isSet = true;
}

bool OAIKubernetesMetadata::is_node_provider_id_Set() const{
    return m_node_provider_id_isSet;
}

bool OAIKubernetesMetadata::is_node_provider_id_Valid() const{
    return m_node_provider_id_isValid;
}

QString OAIKubernetesMetadata::getUpdateTime() const {
    return m_update_time;
}
void OAIKubernetesMetadata::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIKubernetesMetadata::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIKubernetesMetadata::is_update_time_Valid() const{
    return m_update_time_isValid;
}

qint32 OAIKubernetesMetadata::getVcpuCount() const {
    return m_vcpu_count;
}
void OAIKubernetesMetadata::setVcpuCount(const qint32 &vcpu_count) {
    m_vcpu_count = vcpu_count;
    m_vcpu_count_isSet = true;
}

bool OAIKubernetesMetadata::is_vcpu_count_Set() const{
    return m_vcpu_count_isSet;
}

bool OAIKubernetesMetadata::is_vcpu_count_Valid() const{
    return m_vcpu_count_isValid;
}

bool OAIKubernetesMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kubernetes_api_server_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_mb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_provider_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcpu_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKubernetesMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
