/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementHierarchyControllerConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementHierarchyControllerConfig::OAIConfigManagementHierarchyControllerConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementHierarchyControllerConfig::OAIConfigManagementHierarchyControllerConfig() {
    this->initializeModel();
}

OAIConfigManagementHierarchyControllerConfig::~OAIConfigManagementHierarchyControllerConfig() {}

void OAIConfigManagementHierarchyControllerConfig::initializeModel() {

    m_enable_hierarchical_resource_quota_isSet = false;
    m_enable_hierarchical_resource_quota_isValid = false;

    m_enable_pod_tree_labels_isSet = false;
    m_enable_pod_tree_labels_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;
}

void OAIConfigManagementHierarchyControllerConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementHierarchyControllerConfig::fromJsonObject(QJsonObject json) {

    m_enable_hierarchical_resource_quota_isValid = ::OpenAPI::fromJsonValue(m_enable_hierarchical_resource_quota, json[QString("enableHierarchicalResourceQuota")]);
    m_enable_hierarchical_resource_quota_isSet = !json[QString("enableHierarchicalResourceQuota")].isNull() && m_enable_hierarchical_resource_quota_isValid;

    m_enable_pod_tree_labels_isValid = ::OpenAPI::fromJsonValue(m_enable_pod_tree_labels, json[QString("enablePodTreeLabels")]);
    m_enable_pod_tree_labels_isSet = !json[QString("enablePodTreeLabels")].isNull() && m_enable_pod_tree_labels_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;
}

QString OAIConfigManagementHierarchyControllerConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementHierarchyControllerConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_hierarchical_resource_quota_isSet) {
        obj.insert(QString("enableHierarchicalResourceQuota"), ::OpenAPI::toJsonValue(m_enable_hierarchical_resource_quota));
    }
    if (m_enable_pod_tree_labels_isSet) {
        obj.insert(QString("enablePodTreeLabels"), ::OpenAPI::toJsonValue(m_enable_pod_tree_labels));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    return obj;
}

bool OAIConfigManagementHierarchyControllerConfig::isEnableHierarchicalResourceQuota() const {
    return m_enable_hierarchical_resource_quota;
}
void OAIConfigManagementHierarchyControllerConfig::setEnableHierarchicalResourceQuota(const bool &enable_hierarchical_resource_quota) {
    m_enable_hierarchical_resource_quota = enable_hierarchical_resource_quota;
    m_enable_hierarchical_resource_quota_isSet = true;
}

bool OAIConfigManagementHierarchyControllerConfig::is_enable_hierarchical_resource_quota_Set() const{
    return m_enable_hierarchical_resource_quota_isSet;
}

bool OAIConfigManagementHierarchyControllerConfig::is_enable_hierarchical_resource_quota_Valid() const{
    return m_enable_hierarchical_resource_quota_isValid;
}

bool OAIConfigManagementHierarchyControllerConfig::isEnablePodTreeLabels() const {
    return m_enable_pod_tree_labels;
}
void OAIConfigManagementHierarchyControllerConfig::setEnablePodTreeLabels(const bool &enable_pod_tree_labels) {
    m_enable_pod_tree_labels = enable_pod_tree_labels;
    m_enable_pod_tree_labels_isSet = true;
}

bool OAIConfigManagementHierarchyControllerConfig::is_enable_pod_tree_labels_Set() const{
    return m_enable_pod_tree_labels_isSet;
}

bool OAIConfigManagementHierarchyControllerConfig::is_enable_pod_tree_labels_Valid() const{
    return m_enable_pod_tree_labels_isValid;
}

bool OAIConfigManagementHierarchyControllerConfig::isEnabled() const {
    return m_enabled;
}
void OAIConfigManagementHierarchyControllerConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIConfigManagementHierarchyControllerConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIConfigManagementHierarchyControllerConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

bool OAIConfigManagementHierarchyControllerConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_hierarchical_resource_quota_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_pod_tree_labels_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementHierarchyControllerConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
