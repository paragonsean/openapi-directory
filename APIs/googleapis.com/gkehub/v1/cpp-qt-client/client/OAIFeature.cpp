/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeature.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeature::OAIFeature(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeature::OAIFeature() {
    this->initializeModel();
}

OAIFeature::~OAIFeature() {}

void OAIFeature::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_fleet_default_member_config_isSet = false;
    m_fleet_default_member_config_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_membership_specs_isSet = false;
    m_membership_specs_isValid = false;

    m_membership_states_isSet = false;
    m_membership_states_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_state_isSet = false;
    m_resource_state_isValid = false;

    m_scope_specs_isSet = false;
    m_scope_specs_isValid = false;

    m_scope_states_isSet = false;
    m_scope_states_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIFeature::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeature::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_fleet_default_member_config_isValid = ::OpenAPI::fromJsonValue(m_fleet_default_member_config, json[QString("fleetDefaultMemberConfig")]);
    m_fleet_default_member_config_isSet = !json[QString("fleetDefaultMemberConfig")].isNull() && m_fleet_default_member_config_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_membership_specs_isValid = ::OpenAPI::fromJsonValue(m_membership_specs, json[QString("membershipSpecs")]);
    m_membership_specs_isSet = !json[QString("membershipSpecs")].isNull() && m_membership_specs_isValid;

    m_membership_states_isValid = ::OpenAPI::fromJsonValue(m_membership_states, json[QString("membershipStates")]);
    m_membership_states_isSet = !json[QString("membershipStates")].isNull() && m_membership_states_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_state_isValid = ::OpenAPI::fromJsonValue(m_resource_state, json[QString("resourceState")]);
    m_resource_state_isSet = !json[QString("resourceState")].isNull() && m_resource_state_isValid;

    m_scope_specs_isValid = ::OpenAPI::fromJsonValue(m_scope_specs, json[QString("scopeSpecs")]);
    m_scope_specs_isSet = !json[QString("scopeSpecs")].isNull() && m_scope_specs_isValid;

    m_scope_states_isValid = ::OpenAPI::fromJsonValue(m_scope_states, json[QString("scopeStates")]);
    m_scope_states_isSet = !json[QString("scopeStates")].isNull() && m_scope_states_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIFeature::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeature::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_fleet_default_member_config.isSet()) {
        obj.insert(QString("fleetDefaultMemberConfig"), ::OpenAPI::toJsonValue(m_fleet_default_member_config));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_membership_specs.size() > 0) {
        obj.insert(QString("membershipSpecs"), ::OpenAPI::toJsonValue(m_membership_specs));
    }
    if (m_membership_states.size() > 0) {
        obj.insert(QString("membershipStates"), ::OpenAPI::toJsonValue(m_membership_states));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_state.isSet()) {
        obj.insert(QString("resourceState"), ::OpenAPI::toJsonValue(m_resource_state));
    }
    if (m_scope_specs.size() > 0) {
        obj.insert(QString("scopeSpecs"), ::OpenAPI::toJsonValue(m_scope_specs));
    }
    if (m_scope_states.size() > 0) {
        obj.insert(QString("scopeStates"), ::OpenAPI::toJsonValue(m_scope_states));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIFeature::getCreateTime() const {
    return m_create_time;
}
void OAIFeature::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFeature::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFeature::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFeature::getDeleteTime() const {
    return m_delete_time;
}
void OAIFeature::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIFeature::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIFeature::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

OAICommonFleetDefaultMemberConfigSpec OAIFeature::getFleetDefaultMemberConfig() const {
    return m_fleet_default_member_config;
}
void OAIFeature::setFleetDefaultMemberConfig(const OAICommonFleetDefaultMemberConfigSpec &fleet_default_member_config) {
    m_fleet_default_member_config = fleet_default_member_config;
    m_fleet_default_member_config_isSet = true;
}

bool OAIFeature::is_fleet_default_member_config_Set() const{
    return m_fleet_default_member_config_isSet;
}

bool OAIFeature::is_fleet_default_member_config_Valid() const{
    return m_fleet_default_member_config_isValid;
}

QMap<QString, QString> OAIFeature::getLabels() const {
    return m_labels;
}
void OAIFeature::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIFeature::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIFeature::is_labels_Valid() const{
    return m_labels_isValid;
}

QMap<QString, OAIMembershipFeatureSpec> OAIFeature::getMembershipSpecs() const {
    return m_membership_specs;
}
void OAIFeature::setMembershipSpecs(const QMap<QString, OAIMembershipFeatureSpec> &membership_specs) {
    m_membership_specs = membership_specs;
    m_membership_specs_isSet = true;
}

bool OAIFeature::is_membership_specs_Set() const{
    return m_membership_specs_isSet;
}

bool OAIFeature::is_membership_specs_Valid() const{
    return m_membership_specs_isValid;
}

QMap<QString, OAIMembershipFeatureState> OAIFeature::getMembershipStates() const {
    return m_membership_states;
}
void OAIFeature::setMembershipStates(const QMap<QString, OAIMembershipFeatureState> &membership_states) {
    m_membership_states = membership_states;
    m_membership_states_isSet = true;
}

bool OAIFeature::is_membership_states_Set() const{
    return m_membership_states_isSet;
}

bool OAIFeature::is_membership_states_Valid() const{
    return m_membership_states_isValid;
}

QString OAIFeature::getName() const {
    return m_name;
}
void OAIFeature::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIFeature::is_name_Set() const{
    return m_name_isSet;
}

bool OAIFeature::is_name_Valid() const{
    return m_name_isValid;
}

OAIFeatureResourceState OAIFeature::getResourceState() const {
    return m_resource_state;
}
void OAIFeature::setResourceState(const OAIFeatureResourceState &resource_state) {
    m_resource_state = resource_state;
    m_resource_state_isSet = true;
}

bool OAIFeature::is_resource_state_Set() const{
    return m_resource_state_isSet;
}

bool OAIFeature::is_resource_state_Valid() const{
    return m_resource_state_isValid;
}

QMap<QString, OAIObject> OAIFeature::getScopeSpecs() const {
    return m_scope_specs;
}
void OAIFeature::setScopeSpecs(const QMap<QString, OAIObject> &scope_specs) {
    m_scope_specs = scope_specs;
    m_scope_specs_isSet = true;
}

bool OAIFeature::is_scope_specs_Set() const{
    return m_scope_specs_isSet;
}

bool OAIFeature::is_scope_specs_Valid() const{
    return m_scope_specs_isValid;
}

QMap<QString, OAIScopeFeatureState> OAIFeature::getScopeStates() const {
    return m_scope_states;
}
void OAIFeature::setScopeStates(const QMap<QString, OAIScopeFeatureState> &scope_states) {
    m_scope_states = scope_states;
    m_scope_states_isSet = true;
}

bool OAIFeature::is_scope_states_Set() const{
    return m_scope_states_isSet;
}

bool OAIFeature::is_scope_states_Valid() const{
    return m_scope_states_isValid;
}

OAICommonFeatureSpec OAIFeature::getSpec() const {
    return m_spec;
}
void OAIFeature::setSpec(const OAICommonFeatureSpec &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIFeature::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIFeature::is_spec_Valid() const{
    return m_spec_isValid;
}

OAICommonFeatureState OAIFeature::getState() const {
    return m_state;
}
void OAIFeature::setState(const OAICommonFeatureState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIFeature::is_state_Set() const{
    return m_state_isSet;
}

bool OAIFeature::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIFeature::getUpdateTime() const {
    return m_update_time;
}
void OAIFeature::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIFeature::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIFeature::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIFeature::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleet_default_member_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeature::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
