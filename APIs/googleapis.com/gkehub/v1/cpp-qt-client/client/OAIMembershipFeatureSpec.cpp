/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipFeatureSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembershipFeatureSpec::OAIMembershipFeatureSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembershipFeatureSpec::OAIMembershipFeatureSpec() {
    this->initializeModel();
}

OAIMembershipFeatureSpec::~OAIMembershipFeatureSpec() {}

void OAIMembershipFeatureSpec::initializeModel() {

    m_configmanagement_isSet = false;
    m_configmanagement_isValid = false;

    m_fleetobservability_isSet = false;
    m_fleetobservability_isValid = false;

    m_identityservice_isSet = false;
    m_identityservice_isValid = false;

    m_mesh_isSet = false;
    m_mesh_isValid = false;

    m_origin_isSet = false;
    m_origin_isValid = false;

    m_policycontroller_isSet = false;
    m_policycontroller_isValid = false;
}

void OAIMembershipFeatureSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembershipFeatureSpec::fromJsonObject(QJsonObject json) {

    m_configmanagement_isValid = ::OpenAPI::fromJsonValue(m_configmanagement, json[QString("configmanagement")]);
    m_configmanagement_isSet = !json[QString("configmanagement")].isNull() && m_configmanagement_isValid;

    m_fleetobservability_isValid = ::OpenAPI::fromJsonValue(m_fleetobservability, json[QString("fleetobservability")]);
    m_fleetobservability_isSet = !json[QString("fleetobservability")].isNull() && m_fleetobservability_isValid;

    m_identityservice_isValid = ::OpenAPI::fromJsonValue(m_identityservice, json[QString("identityservice")]);
    m_identityservice_isSet = !json[QString("identityservice")].isNull() && m_identityservice_isValid;

    m_mesh_isValid = ::OpenAPI::fromJsonValue(m_mesh, json[QString("mesh")]);
    m_mesh_isSet = !json[QString("mesh")].isNull() && m_mesh_isValid;

    m_origin_isValid = ::OpenAPI::fromJsonValue(m_origin, json[QString("origin")]);
    m_origin_isSet = !json[QString("origin")].isNull() && m_origin_isValid;

    m_policycontroller_isValid = ::OpenAPI::fromJsonValue(m_policycontroller, json[QString("policycontroller")]);
    m_policycontroller_isSet = !json[QString("policycontroller")].isNull() && m_policycontroller_isValid;
}

QString OAIMembershipFeatureSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembershipFeatureSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_configmanagement.isSet()) {
        obj.insert(QString("configmanagement"), ::OpenAPI::toJsonValue(m_configmanagement));
    }
    if (m_fleetobservability_isSet) {
        obj.insert(QString("fleetobservability"), ::OpenAPI::toJsonValue(m_fleetobservability));
    }
    if (m_identityservice.isSet()) {
        obj.insert(QString("identityservice"), ::OpenAPI::toJsonValue(m_identityservice));
    }
    if (m_mesh.isSet()) {
        obj.insert(QString("mesh"), ::OpenAPI::toJsonValue(m_mesh));
    }
    if (m_origin.isSet()) {
        obj.insert(QString("origin"), ::OpenAPI::toJsonValue(m_origin));
    }
    if (m_policycontroller.isSet()) {
        obj.insert(QString("policycontroller"), ::OpenAPI::toJsonValue(m_policycontroller));
    }
    return obj;
}

OAIConfigManagementMembershipSpec OAIMembershipFeatureSpec::getConfigmanagement() const {
    return m_configmanagement;
}
void OAIMembershipFeatureSpec::setConfigmanagement(const OAIConfigManagementMembershipSpec &configmanagement) {
    m_configmanagement = configmanagement;
    m_configmanagement_isSet = true;
}

bool OAIMembershipFeatureSpec::is_configmanagement_Set() const{
    return m_configmanagement_isSet;
}

bool OAIMembershipFeatureSpec::is_configmanagement_Valid() const{
    return m_configmanagement_isValid;
}

OAIObject OAIMembershipFeatureSpec::getFleetobservability() const {
    return m_fleetobservability;
}
void OAIMembershipFeatureSpec::setFleetobservability(const OAIObject &fleetobservability) {
    m_fleetobservability = fleetobservability;
    m_fleetobservability_isSet = true;
}

bool OAIMembershipFeatureSpec::is_fleetobservability_Set() const{
    return m_fleetobservability_isSet;
}

bool OAIMembershipFeatureSpec::is_fleetobservability_Valid() const{
    return m_fleetobservability_isValid;
}

OAIIdentityServiceMembershipSpec OAIMembershipFeatureSpec::getIdentityservice() const {
    return m_identityservice;
}
void OAIMembershipFeatureSpec::setIdentityservice(const OAIIdentityServiceMembershipSpec &identityservice) {
    m_identityservice = identityservice;
    m_identityservice_isSet = true;
}

bool OAIMembershipFeatureSpec::is_identityservice_Set() const{
    return m_identityservice_isSet;
}

bool OAIMembershipFeatureSpec::is_identityservice_Valid() const{
    return m_identityservice_isValid;
}

OAIServiceMeshMembershipSpec OAIMembershipFeatureSpec::getMesh() const {
    return m_mesh;
}
void OAIMembershipFeatureSpec::setMesh(const OAIServiceMeshMembershipSpec &mesh) {
    m_mesh = mesh;
    m_mesh_isSet = true;
}

bool OAIMembershipFeatureSpec::is_mesh_Set() const{
    return m_mesh_isSet;
}

bool OAIMembershipFeatureSpec::is_mesh_Valid() const{
    return m_mesh_isValid;
}

OAIOrigin OAIMembershipFeatureSpec::getOrigin() const {
    return m_origin;
}
void OAIMembershipFeatureSpec::setOrigin(const OAIOrigin &origin) {
    m_origin = origin;
    m_origin_isSet = true;
}

bool OAIMembershipFeatureSpec::is_origin_Set() const{
    return m_origin_isSet;
}

bool OAIMembershipFeatureSpec::is_origin_Valid() const{
    return m_origin_isValid;
}

OAIPolicyControllerMembershipSpec OAIMembershipFeatureSpec::getPolicycontroller() const {
    return m_policycontroller;
}
void OAIMembershipFeatureSpec::setPolicycontroller(const OAIPolicyControllerMembershipSpec &policycontroller) {
    m_policycontroller = policycontroller;
    m_policycontroller_isSet = true;
}

bool OAIMembershipFeatureSpec::is_policycontroller_Set() const{
    return m_policycontroller_isSet;
}

bool OAIMembershipFeatureSpec::is_policycontroller_Valid() const{
    return m_policycontroller_isValid;
}

bool OAIMembershipFeatureSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_configmanagement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleetobservability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identityservice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mesh.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_origin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policycontroller.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembershipFeatureSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
