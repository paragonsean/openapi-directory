/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementHierarchyControllerDeploymentState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementHierarchyControllerDeploymentState::OAIConfigManagementHierarchyControllerDeploymentState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementHierarchyControllerDeploymentState::OAIConfigManagementHierarchyControllerDeploymentState() {
    this->initializeModel();
}

OAIConfigManagementHierarchyControllerDeploymentState::~OAIConfigManagementHierarchyControllerDeploymentState() {}

void OAIConfigManagementHierarchyControllerDeploymentState::initializeModel() {

    m_extension_isSet = false;
    m_extension_isValid = false;

    m_hnc_isSet = false;
    m_hnc_isValid = false;
}

void OAIConfigManagementHierarchyControllerDeploymentState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementHierarchyControllerDeploymentState::fromJsonObject(QJsonObject json) {

    m_extension_isValid = ::OpenAPI::fromJsonValue(m_extension, json[QString("extension")]);
    m_extension_isSet = !json[QString("extension")].isNull() && m_extension_isValid;

    m_hnc_isValid = ::OpenAPI::fromJsonValue(m_hnc, json[QString("hnc")]);
    m_hnc_isSet = !json[QString("hnc")].isNull() && m_hnc_isValid;
}

QString OAIConfigManagementHierarchyControllerDeploymentState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementHierarchyControllerDeploymentState::asJsonObject() const {
    QJsonObject obj;
    if (m_extension_isSet) {
        obj.insert(QString("extension"), ::OpenAPI::toJsonValue(m_extension));
    }
    if (m_hnc_isSet) {
        obj.insert(QString("hnc"), ::OpenAPI::toJsonValue(m_hnc));
    }
    return obj;
}

QString OAIConfigManagementHierarchyControllerDeploymentState::getExtension() const {
    return m_extension;
}
void OAIConfigManagementHierarchyControllerDeploymentState::setExtension(const QString &extension) {
    m_extension = extension;
    m_extension_isSet = true;
}

bool OAIConfigManagementHierarchyControllerDeploymentState::is_extension_Set() const{
    return m_extension_isSet;
}

bool OAIConfigManagementHierarchyControllerDeploymentState::is_extension_Valid() const{
    return m_extension_isValid;
}

QString OAIConfigManagementHierarchyControllerDeploymentState::getHnc() const {
    return m_hnc;
}
void OAIConfigManagementHierarchyControllerDeploymentState::setHnc(const QString &hnc) {
    m_hnc = hnc;
    m_hnc_isSet = true;
}

bool OAIConfigManagementHierarchyControllerDeploymentState::is_hnc_Set() const{
    return m_hnc_isSet;
}

bool OAIConfigManagementHierarchyControllerDeploymentState::is_hnc_Valid() const{
    return m_hnc_isValid;
}

bool OAIConfigManagementHierarchyControllerDeploymentState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hnc_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementHierarchyControllerDeploymentState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
