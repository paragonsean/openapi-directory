/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIConfigManagementPolicyController.h
 *
 * Configuration for Policy Controller
 */

#ifndef OAIConfigManagementPolicyController_H
#define OAIConfigManagementPolicyController_H

#include <QJsonObject>

#include "OAIConfigManagementPolicyControllerMonitoring.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIConfigManagementPolicyControllerMonitoring;

class OAIConfigManagementPolicyController : public OAIObject {
public:
    OAIConfigManagementPolicyController();
    OAIConfigManagementPolicyController(QString json);
    ~OAIConfigManagementPolicyController() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuditIntervalSeconds() const;
    void setAuditIntervalSeconds(const QString &audit_interval_seconds);
    bool is_audit_interval_seconds_Set() const;
    bool is_audit_interval_seconds_Valid() const;

    bool isEnabled() const;
    void setEnabled(const bool &enabled);
    bool is_enabled_Set() const;
    bool is_enabled_Valid() const;

    QList<QString> getExemptableNamespaces() const;
    void setExemptableNamespaces(const QList<QString> &exemptable_namespaces);
    bool is_exemptable_namespaces_Set() const;
    bool is_exemptable_namespaces_Valid() const;

    bool isLogDeniesEnabled() const;
    void setLogDeniesEnabled(const bool &log_denies_enabled);
    bool is_log_denies_enabled_Set() const;
    bool is_log_denies_enabled_Valid() const;

    OAIConfigManagementPolicyControllerMonitoring getMonitoring() const;
    void setMonitoring(const OAIConfigManagementPolicyControllerMonitoring &monitoring);
    bool is_monitoring_Set() const;
    bool is_monitoring_Valid() const;

    bool isMutationEnabled() const;
    void setMutationEnabled(const bool &mutation_enabled);
    bool is_mutation_enabled_Set() const;
    bool is_mutation_enabled_Valid() const;

    bool isReferentialRulesEnabled() const;
    void setReferentialRulesEnabled(const bool &referential_rules_enabled);
    bool is_referential_rules_enabled_Set() const;
    bool is_referential_rules_enabled_Valid() const;

    bool isTemplateLibraryInstalled() const;
    void setTemplateLibraryInstalled(const bool &template_library_installed);
    bool is_template_library_installed_Set() const;
    bool is_template_library_installed_Valid() const;

    QString getUpdateTime() const;
    void setUpdateTime(const QString &update_time);
    bool is_update_time_Set() const;
    bool is_update_time_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audit_interval_seconds;
    bool m_audit_interval_seconds_isSet;
    bool m_audit_interval_seconds_isValid;

    bool m_enabled;
    bool m_enabled_isSet;
    bool m_enabled_isValid;

    QList<QString> m_exemptable_namespaces;
    bool m_exemptable_namespaces_isSet;
    bool m_exemptable_namespaces_isValid;

    bool m_log_denies_enabled;
    bool m_log_denies_enabled_isSet;
    bool m_log_denies_enabled_isValid;

    OAIConfigManagementPolicyControllerMonitoring m_monitoring;
    bool m_monitoring_isSet;
    bool m_monitoring_isValid;

    bool m_mutation_enabled;
    bool m_mutation_enabled_isSet;
    bool m_mutation_enabled_isValid;

    bool m_referential_rules_enabled;
    bool m_referential_rules_enabled_isSet;
    bool m_referential_rules_enabled_isValid;

    bool m_template_library_installed;
    bool m_template_library_installed_isSet;
    bool m_template_library_installed_isValid;

    QString m_update_time;
    bool m_update_time_isSet;
    bool m_update_time_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIConfigManagementPolicyController)

#endif // OAIConfigManagementPolicyController_H
