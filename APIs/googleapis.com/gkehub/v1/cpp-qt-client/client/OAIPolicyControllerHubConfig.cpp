/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyControllerHubConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyControllerHubConfig::OAIPolicyControllerHubConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyControllerHubConfig::OAIPolicyControllerHubConfig() {
    this->initializeModel();
}

OAIPolicyControllerHubConfig::~OAIPolicyControllerHubConfig() {}

void OAIPolicyControllerHubConfig::initializeModel() {

    m_audit_interval_seconds_isSet = false;
    m_audit_interval_seconds_isValid = false;

    m_constraint_violation_limit_isSet = false;
    m_constraint_violation_limit_isValid = false;

    m_deployment_configs_isSet = false;
    m_deployment_configs_isValid = false;

    m_exemptable_namespaces_isSet = false;
    m_exemptable_namespaces_isValid = false;

    m_install_spec_isSet = false;
    m_install_spec_isValid = false;

    m_log_denies_enabled_isSet = false;
    m_log_denies_enabled_isValid = false;

    m_monitoring_isSet = false;
    m_monitoring_isValid = false;

    m_mutation_enabled_isSet = false;
    m_mutation_enabled_isValid = false;

    m_policy_content_isSet = false;
    m_policy_content_isValid = false;

    m_referential_rules_enabled_isSet = false;
    m_referential_rules_enabled_isValid = false;
}

void OAIPolicyControllerHubConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyControllerHubConfig::fromJsonObject(QJsonObject json) {

    m_audit_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_audit_interval_seconds, json[QString("auditIntervalSeconds")]);
    m_audit_interval_seconds_isSet = !json[QString("auditIntervalSeconds")].isNull() && m_audit_interval_seconds_isValid;

    m_constraint_violation_limit_isValid = ::OpenAPI::fromJsonValue(m_constraint_violation_limit, json[QString("constraintViolationLimit")]);
    m_constraint_violation_limit_isSet = !json[QString("constraintViolationLimit")].isNull() && m_constraint_violation_limit_isValid;

    m_deployment_configs_isValid = ::OpenAPI::fromJsonValue(m_deployment_configs, json[QString("deploymentConfigs")]);
    m_deployment_configs_isSet = !json[QString("deploymentConfigs")].isNull() && m_deployment_configs_isValid;

    m_exemptable_namespaces_isValid = ::OpenAPI::fromJsonValue(m_exemptable_namespaces, json[QString("exemptableNamespaces")]);
    m_exemptable_namespaces_isSet = !json[QString("exemptableNamespaces")].isNull() && m_exemptable_namespaces_isValid;

    m_install_spec_isValid = ::OpenAPI::fromJsonValue(m_install_spec, json[QString("installSpec")]);
    m_install_spec_isSet = !json[QString("installSpec")].isNull() && m_install_spec_isValid;

    m_log_denies_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_denies_enabled, json[QString("logDeniesEnabled")]);
    m_log_denies_enabled_isSet = !json[QString("logDeniesEnabled")].isNull() && m_log_denies_enabled_isValid;

    m_monitoring_isValid = ::OpenAPI::fromJsonValue(m_monitoring, json[QString("monitoring")]);
    m_monitoring_isSet = !json[QString("monitoring")].isNull() && m_monitoring_isValid;

    m_mutation_enabled_isValid = ::OpenAPI::fromJsonValue(m_mutation_enabled, json[QString("mutationEnabled")]);
    m_mutation_enabled_isSet = !json[QString("mutationEnabled")].isNull() && m_mutation_enabled_isValid;

    m_policy_content_isValid = ::OpenAPI::fromJsonValue(m_policy_content, json[QString("policyContent")]);
    m_policy_content_isSet = !json[QString("policyContent")].isNull() && m_policy_content_isValid;

    m_referential_rules_enabled_isValid = ::OpenAPI::fromJsonValue(m_referential_rules_enabled, json[QString("referentialRulesEnabled")]);
    m_referential_rules_enabled_isSet = !json[QString("referentialRulesEnabled")].isNull() && m_referential_rules_enabled_isValid;
}

QString OAIPolicyControllerHubConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyControllerHubConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_interval_seconds_isSet) {
        obj.insert(QString("auditIntervalSeconds"), ::OpenAPI::toJsonValue(m_audit_interval_seconds));
    }
    if (m_constraint_violation_limit_isSet) {
        obj.insert(QString("constraintViolationLimit"), ::OpenAPI::toJsonValue(m_constraint_violation_limit));
    }
    if (m_deployment_configs.size() > 0) {
        obj.insert(QString("deploymentConfigs"), ::OpenAPI::toJsonValue(m_deployment_configs));
    }
    if (m_exemptable_namespaces.size() > 0) {
        obj.insert(QString("exemptableNamespaces"), ::OpenAPI::toJsonValue(m_exemptable_namespaces));
    }
    if (m_install_spec_isSet) {
        obj.insert(QString("installSpec"), ::OpenAPI::toJsonValue(m_install_spec));
    }
    if (m_log_denies_enabled_isSet) {
        obj.insert(QString("logDeniesEnabled"), ::OpenAPI::toJsonValue(m_log_denies_enabled));
    }
    if (m_monitoring.isSet()) {
        obj.insert(QString("monitoring"), ::OpenAPI::toJsonValue(m_monitoring));
    }
    if (m_mutation_enabled_isSet) {
        obj.insert(QString("mutationEnabled"), ::OpenAPI::toJsonValue(m_mutation_enabled));
    }
    if (m_policy_content.isSet()) {
        obj.insert(QString("policyContent"), ::OpenAPI::toJsonValue(m_policy_content));
    }
    if (m_referential_rules_enabled_isSet) {
        obj.insert(QString("referentialRulesEnabled"), ::OpenAPI::toJsonValue(m_referential_rules_enabled));
    }
    return obj;
}

QString OAIPolicyControllerHubConfig::getAuditIntervalSeconds() const {
    return m_audit_interval_seconds;
}
void OAIPolicyControllerHubConfig::setAuditIntervalSeconds(const QString &audit_interval_seconds) {
    m_audit_interval_seconds = audit_interval_seconds;
    m_audit_interval_seconds_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_audit_interval_seconds_Set() const{
    return m_audit_interval_seconds_isSet;
}

bool OAIPolicyControllerHubConfig::is_audit_interval_seconds_Valid() const{
    return m_audit_interval_seconds_isValid;
}

QString OAIPolicyControllerHubConfig::getConstraintViolationLimit() const {
    return m_constraint_violation_limit;
}
void OAIPolicyControllerHubConfig::setConstraintViolationLimit(const QString &constraint_violation_limit) {
    m_constraint_violation_limit = constraint_violation_limit;
    m_constraint_violation_limit_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_constraint_violation_limit_Set() const{
    return m_constraint_violation_limit_isSet;
}

bool OAIPolicyControllerHubConfig::is_constraint_violation_limit_Valid() const{
    return m_constraint_violation_limit_isValid;
}

QMap<QString, OAIPolicyControllerPolicyControllerDeploymentConfig> OAIPolicyControllerHubConfig::getDeploymentConfigs() const {
    return m_deployment_configs;
}
void OAIPolicyControllerHubConfig::setDeploymentConfigs(const QMap<QString, OAIPolicyControllerPolicyControllerDeploymentConfig> &deployment_configs) {
    m_deployment_configs = deployment_configs;
    m_deployment_configs_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_deployment_configs_Set() const{
    return m_deployment_configs_isSet;
}

bool OAIPolicyControllerHubConfig::is_deployment_configs_Valid() const{
    return m_deployment_configs_isValid;
}

QList<QString> OAIPolicyControllerHubConfig::getExemptableNamespaces() const {
    return m_exemptable_namespaces;
}
void OAIPolicyControllerHubConfig::setExemptableNamespaces(const QList<QString> &exemptable_namespaces) {
    m_exemptable_namespaces = exemptable_namespaces;
    m_exemptable_namespaces_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_exemptable_namespaces_Set() const{
    return m_exemptable_namespaces_isSet;
}

bool OAIPolicyControllerHubConfig::is_exemptable_namespaces_Valid() const{
    return m_exemptable_namespaces_isValid;
}

QString OAIPolicyControllerHubConfig::getInstallSpec() const {
    return m_install_spec;
}
void OAIPolicyControllerHubConfig::setInstallSpec(const QString &install_spec) {
    m_install_spec = install_spec;
    m_install_spec_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_install_spec_Set() const{
    return m_install_spec_isSet;
}

bool OAIPolicyControllerHubConfig::is_install_spec_Valid() const{
    return m_install_spec_isValid;
}

bool OAIPolicyControllerHubConfig::isLogDeniesEnabled() const {
    return m_log_denies_enabled;
}
void OAIPolicyControllerHubConfig::setLogDeniesEnabled(const bool &log_denies_enabled) {
    m_log_denies_enabled = log_denies_enabled;
    m_log_denies_enabled_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_log_denies_enabled_Set() const{
    return m_log_denies_enabled_isSet;
}

bool OAIPolicyControllerHubConfig::is_log_denies_enabled_Valid() const{
    return m_log_denies_enabled_isValid;
}

OAIPolicyControllerMonitoringConfig OAIPolicyControllerHubConfig::getMonitoring() const {
    return m_monitoring;
}
void OAIPolicyControllerHubConfig::setMonitoring(const OAIPolicyControllerMonitoringConfig &monitoring) {
    m_monitoring = monitoring;
    m_monitoring_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_monitoring_Set() const{
    return m_monitoring_isSet;
}

bool OAIPolicyControllerHubConfig::is_monitoring_Valid() const{
    return m_monitoring_isValid;
}

bool OAIPolicyControllerHubConfig::isMutationEnabled() const {
    return m_mutation_enabled;
}
void OAIPolicyControllerHubConfig::setMutationEnabled(const bool &mutation_enabled) {
    m_mutation_enabled = mutation_enabled;
    m_mutation_enabled_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_mutation_enabled_Set() const{
    return m_mutation_enabled_isSet;
}

bool OAIPolicyControllerHubConfig::is_mutation_enabled_Valid() const{
    return m_mutation_enabled_isValid;
}

OAIPolicyControllerPolicyContentSpec OAIPolicyControllerHubConfig::getPolicyContent() const {
    return m_policy_content;
}
void OAIPolicyControllerHubConfig::setPolicyContent(const OAIPolicyControllerPolicyContentSpec &policy_content) {
    m_policy_content = policy_content;
    m_policy_content_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_policy_content_Set() const{
    return m_policy_content_isSet;
}

bool OAIPolicyControllerHubConfig::is_policy_content_Valid() const{
    return m_policy_content_isValid;
}

bool OAIPolicyControllerHubConfig::isReferentialRulesEnabled() const {
    return m_referential_rules_enabled;
}
void OAIPolicyControllerHubConfig::setReferentialRulesEnabled(const bool &referential_rules_enabled) {
    m_referential_rules_enabled = referential_rules_enabled;
    m_referential_rules_enabled_isSet = true;
}

bool OAIPolicyControllerHubConfig::is_referential_rules_enabled_Set() const{
    return m_referential_rules_enabled_isSet;
}

bool OAIPolicyControllerHubConfig::is_referential_rules_enabled_Valid() const{
    return m_referential_rules_enabled_isValid;
}

bool OAIPolicyControllerHubConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_constraint_violation_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deployment_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_exemptable_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_spec_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_denies_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_content.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_referential_rules_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyControllerHubConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
