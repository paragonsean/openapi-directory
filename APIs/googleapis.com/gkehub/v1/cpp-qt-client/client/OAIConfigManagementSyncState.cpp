/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementSyncState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementSyncState::OAIConfigManagementSyncState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementSyncState::OAIConfigManagementSyncState() {
    this->initializeModel();
}

OAIConfigManagementSyncState::~OAIConfigManagementSyncState() {}

void OAIConfigManagementSyncState::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_import_token_isSet = false;
    m_import_token_isValid = false;

    m_last_sync_isSet = false;
    m_last_sync_isValid = false;

    m_last_sync_time_isSet = false;
    m_last_sync_time_isValid = false;

    m_source_token_isSet = false;
    m_source_token_isValid = false;

    m_sync_token_isSet = false;
    m_sync_token_isValid = false;
}

void OAIConfigManagementSyncState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementSyncState::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_import_token_isValid = ::OpenAPI::fromJsonValue(m_import_token, json[QString("importToken")]);
    m_import_token_isSet = !json[QString("importToken")].isNull() && m_import_token_isValid;

    m_last_sync_isValid = ::OpenAPI::fromJsonValue(m_last_sync, json[QString("lastSync")]);
    m_last_sync_isSet = !json[QString("lastSync")].isNull() && m_last_sync_isValid;

    m_last_sync_time_isValid = ::OpenAPI::fromJsonValue(m_last_sync_time, json[QString("lastSyncTime")]);
    m_last_sync_time_isSet = !json[QString("lastSyncTime")].isNull() && m_last_sync_time_isValid;

    m_source_token_isValid = ::OpenAPI::fromJsonValue(m_source_token, json[QString("sourceToken")]);
    m_source_token_isSet = !json[QString("sourceToken")].isNull() && m_source_token_isValid;

    m_sync_token_isValid = ::OpenAPI::fromJsonValue(m_sync_token, json[QString("syncToken")]);
    m_sync_token_isSet = !json[QString("syncToken")].isNull() && m_sync_token_isValid;
}

QString OAIConfigManagementSyncState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementSyncState::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_import_token_isSet) {
        obj.insert(QString("importToken"), ::OpenAPI::toJsonValue(m_import_token));
    }
    if (m_last_sync_isSet) {
        obj.insert(QString("lastSync"), ::OpenAPI::toJsonValue(m_last_sync));
    }
    if (m_last_sync_time_isSet) {
        obj.insert(QString("lastSyncTime"), ::OpenAPI::toJsonValue(m_last_sync_time));
    }
    if (m_source_token_isSet) {
        obj.insert(QString("sourceToken"), ::OpenAPI::toJsonValue(m_source_token));
    }
    if (m_sync_token_isSet) {
        obj.insert(QString("syncToken"), ::OpenAPI::toJsonValue(m_sync_token));
    }
    return obj;
}

QString OAIConfigManagementSyncState::getCode() const {
    return m_code;
}
void OAIConfigManagementSyncState::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIConfigManagementSyncState::is_code_Set() const{
    return m_code_isSet;
}

bool OAIConfigManagementSyncState::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIConfigManagementSyncError> OAIConfigManagementSyncState::getErrors() const {
    return m_errors;
}
void OAIConfigManagementSyncState::setErrors(const QList<OAIConfigManagementSyncError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIConfigManagementSyncState::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIConfigManagementSyncState::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIConfigManagementSyncState::getImportToken() const {
    return m_import_token;
}
void OAIConfigManagementSyncState::setImportToken(const QString &import_token) {
    m_import_token = import_token;
    m_import_token_isSet = true;
}

bool OAIConfigManagementSyncState::is_import_token_Set() const{
    return m_import_token_isSet;
}

bool OAIConfigManagementSyncState::is_import_token_Valid() const{
    return m_import_token_isValid;
}

QString OAIConfigManagementSyncState::getLastSync() const {
    return m_last_sync;
}
void OAIConfigManagementSyncState::setLastSync(const QString &last_sync) {
    m_last_sync = last_sync;
    m_last_sync_isSet = true;
}

bool OAIConfigManagementSyncState::is_last_sync_Set() const{
    return m_last_sync_isSet;
}

bool OAIConfigManagementSyncState::is_last_sync_Valid() const{
    return m_last_sync_isValid;
}

QString OAIConfigManagementSyncState::getLastSyncTime() const {
    return m_last_sync_time;
}
void OAIConfigManagementSyncState::setLastSyncTime(const QString &last_sync_time) {
    m_last_sync_time = last_sync_time;
    m_last_sync_time_isSet = true;
}

bool OAIConfigManagementSyncState::is_last_sync_time_Set() const{
    return m_last_sync_time_isSet;
}

bool OAIConfigManagementSyncState::is_last_sync_time_Valid() const{
    return m_last_sync_time_isValid;
}

QString OAIConfigManagementSyncState::getSourceToken() const {
    return m_source_token;
}
void OAIConfigManagementSyncState::setSourceToken(const QString &source_token) {
    m_source_token = source_token;
    m_source_token_isSet = true;
}

bool OAIConfigManagementSyncState::is_source_token_Set() const{
    return m_source_token_isSet;
}

bool OAIConfigManagementSyncState::is_source_token_Valid() const{
    return m_source_token_isValid;
}

QString OAIConfigManagementSyncState::getSyncToken() const {
    return m_sync_token;
}
void OAIConfigManagementSyncState::setSyncToken(const QString &sync_token) {
    m_sync_token = sync_token;
    m_sync_token_isSet = true;
}

bool OAIConfigManagementSyncState::is_sync_token_Set() const{
    return m_sync_token_isSet;
}

bool OAIConfigManagementSyncState::is_sync_token_Valid() const{
    return m_sync_token_isValid;
}

bool OAIConfigManagementSyncState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_sync_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementSyncState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
