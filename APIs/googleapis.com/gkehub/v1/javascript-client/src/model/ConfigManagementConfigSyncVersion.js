/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigManagementConfigSyncVersion model module.
 * @module model/ConfigManagementConfigSyncVersion
 * @version v1
 */
class ConfigManagementConfigSyncVersion {
    /**
     * Constructs a new <code>ConfigManagementConfigSyncVersion</code>.
     * Specific versioning information pertaining to ConfigSync&#39;s Pods
     * @alias module:model/ConfigManagementConfigSyncVersion
     */
    constructor() { 
        
        ConfigManagementConfigSyncVersion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementConfigSyncVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementConfigSyncVersion} obj Optional instance to populate.
     * @return {module:model/ConfigManagementConfigSyncVersion} The populated <code>ConfigManagementConfigSyncVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementConfigSyncVersion();

            if (data.hasOwnProperty('admissionWebhook')) {
                obj['admissionWebhook'] = ApiClient.convertToType(data['admissionWebhook'], 'String');
            }
            if (data.hasOwnProperty('gitSync')) {
                obj['gitSync'] = ApiClient.convertToType(data['gitSync'], 'String');
            }
            if (data.hasOwnProperty('importer')) {
                obj['importer'] = ApiClient.convertToType(data['importer'], 'String');
            }
            if (data.hasOwnProperty('monitor')) {
                obj['monitor'] = ApiClient.convertToType(data['monitor'], 'String');
            }
            if (data.hasOwnProperty('reconcilerManager')) {
                obj['reconcilerManager'] = ApiClient.convertToType(data['reconcilerManager'], 'String');
            }
            if (data.hasOwnProperty('rootReconciler')) {
                obj['rootReconciler'] = ApiClient.convertToType(data['rootReconciler'], 'String');
            }
            if (data.hasOwnProperty('syncer')) {
                obj['syncer'] = ApiClient.convertToType(data['syncer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementConfigSyncVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementConfigSyncVersion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['admissionWebhook'] && !(typeof data['admissionWebhook'] === 'string' || data['admissionWebhook'] instanceof String)) {
            throw new Error("Expected the field `admissionWebhook` to be a primitive type in the JSON string but got " + data['admissionWebhook']);
        }
        // ensure the json data is a string
        if (data['gitSync'] && !(typeof data['gitSync'] === 'string' || data['gitSync'] instanceof String)) {
            throw new Error("Expected the field `gitSync` to be a primitive type in the JSON string but got " + data['gitSync']);
        }
        // ensure the json data is a string
        if (data['importer'] && !(typeof data['importer'] === 'string' || data['importer'] instanceof String)) {
            throw new Error("Expected the field `importer` to be a primitive type in the JSON string but got " + data['importer']);
        }
        // ensure the json data is a string
        if (data['monitor'] && !(typeof data['monitor'] === 'string' || data['monitor'] instanceof String)) {
            throw new Error("Expected the field `monitor` to be a primitive type in the JSON string but got " + data['monitor']);
        }
        // ensure the json data is a string
        if (data['reconcilerManager'] && !(typeof data['reconcilerManager'] === 'string' || data['reconcilerManager'] instanceof String)) {
            throw new Error("Expected the field `reconcilerManager` to be a primitive type in the JSON string but got " + data['reconcilerManager']);
        }
        // ensure the json data is a string
        if (data['rootReconciler'] && !(typeof data['rootReconciler'] === 'string' || data['rootReconciler'] instanceof String)) {
            throw new Error("Expected the field `rootReconciler` to be a primitive type in the JSON string but got " + data['rootReconciler']);
        }
        // ensure the json data is a string
        if (data['syncer'] && !(typeof data['syncer'] === 'string' || data['syncer'] instanceof String)) {
            throw new Error("Expected the field `syncer` to be a primitive type in the JSON string but got " + data['syncer']);
        }

        return true;
    }


}



/**
 * Version of the deployed admission_webhook pod
 * @member {String} admissionWebhook
 */
ConfigManagementConfigSyncVersion.prototype['admissionWebhook'] = undefined;

/**
 * Version of the deployed git-sync pod
 * @member {String} gitSync
 */
ConfigManagementConfigSyncVersion.prototype['gitSync'] = undefined;

/**
 * Version of the deployed importer pod
 * @member {String} importer
 */
ConfigManagementConfigSyncVersion.prototype['importer'] = undefined;

/**
 * Version of the deployed monitor pod
 * @member {String} monitor
 */
ConfigManagementConfigSyncVersion.prototype['monitor'] = undefined;

/**
 * Version of the deployed reconciler-manager pod
 * @member {String} reconcilerManager
 */
ConfigManagementConfigSyncVersion.prototype['reconcilerManager'] = undefined;

/**
 * Version of the deployed reconciler container in root-reconciler pod
 * @member {String} rootReconciler
 */
ConfigManagementConfigSyncVersion.prototype['rootReconciler'] = undefined;

/**
 * Version of the deployed syncer pod
 * @member {String} syncer
 */
ConfigManagementConfigSyncVersion.prototype['syncer'] = undefined;






export default ConfigManagementConfigSyncVersion;

