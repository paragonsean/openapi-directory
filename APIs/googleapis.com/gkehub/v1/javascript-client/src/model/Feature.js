/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CommonFeatureSpec from './CommonFeatureSpec';
import CommonFeatureState from './CommonFeatureState';
import CommonFleetDefaultMemberConfigSpec from './CommonFleetDefaultMemberConfigSpec';
import FeatureResourceState from './FeatureResourceState';
import MembershipFeatureSpec from './MembershipFeatureSpec';
import MembershipFeatureState from './MembershipFeatureState';
import ScopeFeatureState from './ScopeFeatureState';

/**
 * The Feature model module.
 * @module model/Feature
 * @version v1
 */
class Feature {
    /**
     * Constructs a new <code>Feature</code>.
     * Feature represents the settings and status of any Hub Feature.
     * @alias module:model/Feature
     */
    constructor() { 
        
        Feature.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feature</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feature} obj Optional instance to populate.
     * @return {module:model/Feature} The populated <code>Feature</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feature();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('deleteTime')) {
                obj['deleteTime'] = ApiClient.convertToType(data['deleteTime'], 'String');
            }
            if (data.hasOwnProperty('fleetDefaultMemberConfig')) {
                obj['fleetDefaultMemberConfig'] = CommonFleetDefaultMemberConfigSpec.constructFromObject(data['fleetDefaultMemberConfig']);
            }
            if (data.hasOwnProperty('labels')) {
                obj['labels'] = ApiClient.convertToType(data['labels'], {'String': 'String'});
            }
            if (data.hasOwnProperty('membershipSpecs')) {
                obj['membershipSpecs'] = ApiClient.convertToType(data['membershipSpecs'], {'String': MembershipFeatureSpec});
            }
            if (data.hasOwnProperty('membershipStates')) {
                obj['membershipStates'] = ApiClient.convertToType(data['membershipStates'], {'String': MembershipFeatureState});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('resourceState')) {
                obj['resourceState'] = FeatureResourceState.constructFromObject(data['resourceState']);
            }
            if (data.hasOwnProperty('scopeSpecs')) {
                obj['scopeSpecs'] = ApiClient.convertToType(data['scopeSpecs'], {'String': Object});
            }
            if (data.hasOwnProperty('scopeStates')) {
                obj['scopeStates'] = ApiClient.convertToType(data['scopeStates'], {'String': ScopeFeatureState});
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = CommonFeatureSpec.constructFromObject(data['spec']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = CommonFeatureState.constructFromObject(data['state']);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feature</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feature</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['deleteTime'] && !(typeof data['deleteTime'] === 'string' || data['deleteTime'] instanceof String)) {
            throw new Error("Expected the field `deleteTime` to be a primitive type in the JSON string but got " + data['deleteTime']);
        }
        // validate the optional field `fleetDefaultMemberConfig`
        if (data['fleetDefaultMemberConfig']) { // data not null
          CommonFleetDefaultMemberConfigSpec.validateJSON(data['fleetDefaultMemberConfig']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `resourceState`
        if (data['resourceState']) { // data not null
          FeatureResourceState.validateJSON(data['resourceState']);
        }
        // validate the optional field `spec`
        if (data['spec']) { // data not null
          CommonFeatureSpec.validateJSON(data['spec']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          CommonFeatureState.validateJSON(data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Output only. When the Feature resource was created.
 * @member {String} createTime
 */
Feature.prototype['createTime'] = undefined;

/**
 * Output only. When the Feature resource was deleted.
 * @member {String} deleteTime
 */
Feature.prototype['deleteTime'] = undefined;

/**
 * @member {module:model/CommonFleetDefaultMemberConfigSpec} fleetDefaultMemberConfig
 */
Feature.prototype['fleetDefaultMemberConfig'] = undefined;

/**
 * Labels for this Feature.
 * @member {Object.<String, String>} labels
 */
Feature.prototype['labels'] = undefined;

/**
 * Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
 * @member {Object.<String, module:model/MembershipFeatureSpec>} membershipSpecs
 */
Feature.prototype['membershipSpecs'] = undefined;

/**
 * Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.
 * @member {Object.<String, module:model/MembershipFeatureState>} membershipStates
 */
Feature.prototype['membershipStates'] = undefined;

/**
 * Output only. The full, unique name of this Feature resource in the format `projects/_*_/locations/_*_/features/_*`.
 * @member {String} name
 */
Feature.prototype['name'] = undefined;

/**
 * @member {module:model/FeatureResourceState} resourceState
 */
Feature.prototype['resourceState'] = undefined;

/**
 * Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.
 * @member {Object.<String, Object>} scopeSpecs
 */
Feature.prototype['scopeSpecs'] = undefined;

/**
 * Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.
 * @member {Object.<String, module:model/ScopeFeatureState>} scopeStates
 */
Feature.prototype['scopeStates'] = undefined;

/**
 * @member {module:model/CommonFeatureSpec} spec
 */
Feature.prototype['spec'] = undefined;

/**
 * @member {module:model/CommonFeatureState} state
 */
Feature.prototype['state'] = undefined;

/**
 * Output only. When the Feature resource was last updated.
 * @member {String} updateTime
 */
Feature.prototype['updateTime'] = undefined;






export default Feature;

