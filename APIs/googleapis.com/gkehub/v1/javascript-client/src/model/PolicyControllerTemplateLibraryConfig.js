/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyControllerTemplateLibraryConfig model module.
 * @module model/PolicyControllerTemplateLibraryConfig
 * @version v1
 */
class PolicyControllerTemplateLibraryConfig {
    /**
     * Constructs a new <code>PolicyControllerTemplateLibraryConfig</code>.
     * The config specifying which default library templates to install.
     * @alias module:model/PolicyControllerTemplateLibraryConfig
     */
    constructor() { 
        
        PolicyControllerTemplateLibraryConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyControllerTemplateLibraryConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyControllerTemplateLibraryConfig} obj Optional instance to populate.
     * @return {module:model/PolicyControllerTemplateLibraryConfig} The populated <code>PolicyControllerTemplateLibraryConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyControllerTemplateLibraryConfig();

            if (data.hasOwnProperty('installation')) {
                obj['installation'] = ApiClient.convertToType(data['installation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyControllerTemplateLibraryConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyControllerTemplateLibraryConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['installation'] && !(typeof data['installation'] === 'string' || data['installation'] instanceof String)) {
            throw new Error("Expected the field `installation` to be a primitive type in the JSON string but got " + data['installation']);
        }

        return true;
    }


}



/**
 * Configures the manner in which the template library is installed on the cluster.
 * @member {module:model/PolicyControllerTemplateLibraryConfig.InstallationEnum} installation
 */
PolicyControllerTemplateLibraryConfig.prototype['installation'] = undefined;





/**
 * Allowed values for the <code>installation</code> property.
 * @enum {String}
 * @readonly
 */
PolicyControllerTemplateLibraryConfig['InstallationEnum'] = {

    /**
     * value: "INSTALLATION_UNSPECIFIED"
     * @const
     */
    "INSTALLATION_UNSPECIFIED": "INSTALLATION_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "ALL"
     * @const
     */
    "ALL": "ALL"
};



export default PolicyControllerTemplateLibraryConfig;

