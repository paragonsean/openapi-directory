/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyControllerOnClusterState from './PolicyControllerOnClusterState';

/**
 * The PolicyControllerPolicyContentState model module.
 * @module model/PolicyControllerPolicyContentState
 * @version v1
 */
class PolicyControllerPolicyContentState {
    /**
     * Constructs a new <code>PolicyControllerPolicyContentState</code>.
     * The state of the policy controller policy content
     * @alias module:model/PolicyControllerPolicyContentState
     */
    constructor() { 
        
        PolicyControllerPolicyContentState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyControllerPolicyContentState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyControllerPolicyContentState} obj Optional instance to populate.
     * @return {module:model/PolicyControllerPolicyContentState} The populated <code>PolicyControllerPolicyContentState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyControllerPolicyContentState();

            if (data.hasOwnProperty('bundleStates')) {
                obj['bundleStates'] = ApiClient.convertToType(data['bundleStates'], {'String': PolicyControllerOnClusterState});
            }
            if (data.hasOwnProperty('referentialSyncConfigState')) {
                obj['referentialSyncConfigState'] = PolicyControllerOnClusterState.constructFromObject(data['referentialSyncConfigState']);
            }
            if (data.hasOwnProperty('templateLibraryState')) {
                obj['templateLibraryState'] = PolicyControllerOnClusterState.constructFromObject(data['templateLibraryState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyControllerPolicyContentState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyControllerPolicyContentState</code>.
     */
    static validateJSON(data) {
        // validate the optional field `referentialSyncConfigState`
        if (data['referentialSyncConfigState']) { // data not null
          PolicyControllerOnClusterState.validateJSON(data['referentialSyncConfigState']);
        }
        // validate the optional field `templateLibraryState`
        if (data['templateLibraryState']) { // data not null
          PolicyControllerOnClusterState.validateJSON(data['templateLibraryState']);
        }

        return true;
    }


}



/**
 * The state of the any bundles included in the chosen version of the manifest
 * @member {Object.<String, module:model/PolicyControllerOnClusterState>} bundleStates
 */
PolicyControllerPolicyContentState.prototype['bundleStates'] = undefined;

/**
 * @member {module:model/PolicyControllerOnClusterState} referentialSyncConfigState
 */
PolicyControllerPolicyContentState.prototype['referentialSyncConfigState'] = undefined;

/**
 * @member {module:model/PolicyControllerOnClusterState} templateLibraryState
 */
PolicyControllerPolicyContentState.prototype['templateLibraryState'] = undefined;






export default PolicyControllerPolicyContentState;

