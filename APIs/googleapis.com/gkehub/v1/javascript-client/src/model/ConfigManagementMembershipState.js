/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementConfigSyncState from './ConfigManagementConfigSyncState';
import ConfigManagementHierarchyControllerState from './ConfigManagementHierarchyControllerState';
import ConfigManagementMembershipSpec from './ConfigManagementMembershipSpec';
import ConfigManagementOperatorState from './ConfigManagementOperatorState';
import ConfigManagementPolicyControllerState from './ConfigManagementPolicyControllerState';

/**
 * The ConfigManagementMembershipState model module.
 * @module model/ConfigManagementMembershipState
 * @version v1
 */
class ConfigManagementMembershipState {
    /**
     * Constructs a new <code>ConfigManagementMembershipState</code>.
     * **Anthos Config Management**: State for a single cluster.
     * @alias module:model/ConfigManagementMembershipState
     */
    constructor() { 
        
        ConfigManagementMembershipState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementMembershipState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementMembershipState} obj Optional instance to populate.
     * @return {module:model/ConfigManagementMembershipState} The populated <code>ConfigManagementMembershipState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementMembershipState();

            if (data.hasOwnProperty('clusterName')) {
                obj['clusterName'] = ApiClient.convertToType(data['clusterName'], 'String');
            }
            if (data.hasOwnProperty('configSyncState')) {
                obj['configSyncState'] = ConfigManagementConfigSyncState.constructFromObject(data['configSyncState']);
            }
            if (data.hasOwnProperty('hierarchyControllerState')) {
                obj['hierarchyControllerState'] = ConfigManagementHierarchyControllerState.constructFromObject(data['hierarchyControllerState']);
            }
            if (data.hasOwnProperty('membershipSpec')) {
                obj['membershipSpec'] = ConfigManagementMembershipSpec.constructFromObject(data['membershipSpec']);
            }
            if (data.hasOwnProperty('operatorState')) {
                obj['operatorState'] = ConfigManagementOperatorState.constructFromObject(data['operatorState']);
            }
            if (data.hasOwnProperty('policyControllerState')) {
                obj['policyControllerState'] = ConfigManagementPolicyControllerState.constructFromObject(data['policyControllerState']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementMembershipState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementMembershipState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterName'] && !(typeof data['clusterName'] === 'string' || data['clusterName'] instanceof String)) {
            throw new Error("Expected the field `clusterName` to be a primitive type in the JSON string but got " + data['clusterName']);
        }
        // validate the optional field `configSyncState`
        if (data['configSyncState']) { // data not null
          ConfigManagementConfigSyncState.validateJSON(data['configSyncState']);
        }
        // validate the optional field `hierarchyControllerState`
        if (data['hierarchyControllerState']) { // data not null
          ConfigManagementHierarchyControllerState.validateJSON(data['hierarchyControllerState']);
        }
        // validate the optional field `membershipSpec`
        if (data['membershipSpec']) { // data not null
          ConfigManagementMembershipSpec.validateJSON(data['membershipSpec']);
        }
        // validate the optional field `operatorState`
        if (data['operatorState']) { // data not null
          ConfigManagementOperatorState.validateJSON(data['operatorState']);
        }
        // validate the optional field `policyControllerState`
        if (data['policyControllerState']) { // data not null
          ConfigManagementPolicyControllerState.validateJSON(data['policyControllerState']);
        }

        return true;
    }


}



/**
 * This field is set to the `cluster_name` field of the Membership Spec if it is not empty. Otherwise, it is set to the cluster's fleet membership name.
 * @member {String} clusterName
 */
ConfigManagementMembershipState.prototype['clusterName'] = undefined;

/**
 * @member {module:model/ConfigManagementConfigSyncState} configSyncState
 */
ConfigManagementMembershipState.prototype['configSyncState'] = undefined;

/**
 * @member {module:model/ConfigManagementHierarchyControllerState} hierarchyControllerState
 */
ConfigManagementMembershipState.prototype['hierarchyControllerState'] = undefined;

/**
 * @member {module:model/ConfigManagementMembershipSpec} membershipSpec
 */
ConfigManagementMembershipState.prototype['membershipSpec'] = undefined;

/**
 * @member {module:model/ConfigManagementOperatorState} operatorState
 */
ConfigManagementMembershipState.prototype['operatorState'] = undefined;

/**
 * @member {module:model/ConfigManagementPolicyControllerState} policyControllerState
 */
ConfigManagementMembershipState.prototype['policyControllerState'] = undefined;






export default ConfigManagementMembershipState;

