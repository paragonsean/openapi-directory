# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MembershipSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, security_policy: str=None, version: str=None):
        """MembershipSpec - a model defined in OpenAPI

        :param security_policy: The security_policy of this MembershipSpec.
        :param version: The version of this MembershipSpec.
        """
        self.openapi_types = {
            'security_policy': str,
            'version': str
        }

        self.attribute_map = {
            'security_policy': 'securityPolicy',
            'version': 'version'
        }

        self._security_policy = security_policy
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipSpec of this MembershipSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def security_policy(self):
        """Gets the security_policy of this MembershipSpec.

        Whether it is allowed to run the privileged builds on the cluster or not.

        :return: The security_policy of this MembershipSpec.
        :rtype: str
        """
        return self._security_policy

    @security_policy.setter
    def security_policy(self, security_policy):
        """Sets the security_policy of this MembershipSpec.

        Whether it is allowed to run the privileged builds on the cluster or not.

        :param security_policy: The security_policy of this MembershipSpec.
        :type security_policy: str
        """
        allowed_values = ["SECURITY_POLICY_UNSPECIFIED", "NON_PRIVILEGED", "PRIVILEGED"]  # noqa: E501
        if security_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `security_policy` ({0}), must be one of {1}"
                .format(security_policy, allowed_values)
            )

        self._security_policy = security_policy

    @property
    def version(self):
        """Gets the version of this MembershipSpec.

        Version of the cloud build software on the cluster.

        :return: The version of this MembershipSpec.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this MembershipSpec.

        Version of the cloud build software on the cluster.

        :param version: The version of this MembershipSpec.
        :type version: str
        """

        self._version = version
