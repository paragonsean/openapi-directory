# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.scope_lifecycle_state import ScopeLifecycleState
from openapi_server import util


class Scope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, labels: Dict[str, str]=None, name: str=None, namespace_labels: Dict[str, str]=None, state: ScopeLifecycleState=None, uid: str=None, update_time: str=None):
        """Scope - a model defined in OpenAPI

        :param create_time: The create_time of this Scope.
        :param delete_time: The delete_time of this Scope.
        :param labels: The labels of this Scope.
        :param name: The name of this Scope.
        :param namespace_labels: The namespace_labels of this Scope.
        :param state: The state of this Scope.
        :param uid: The uid of this Scope.
        :param update_time: The update_time of this Scope.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'labels': Dict[str, str],
            'name': str,
            'namespace_labels': Dict[str, str],
            'state': ScopeLifecycleState,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'labels': 'labels',
            'name': 'name',
            'namespace_labels': 'namespaceLabels',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._labels = labels
        self._name = name
        self._namespace_labels = namespace_labels
        self._state = state
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scope of this Scope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Scope.

        Output only. When the scope was created.

        :return: The create_time of this Scope.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Scope.

        Output only. When the scope was created.

        :param create_time: The create_time of this Scope.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Scope.

        Output only. When the scope was deleted.

        :return: The delete_time of this Scope.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Scope.

        Output only. When the scope was deleted.

        :param delete_time: The delete_time of this Scope.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def labels(self):
        """Gets the labels of this Scope.

        Optional. Labels for this Scope.

        :return: The labels of this Scope.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Scope.

        Optional. Labels for this Scope.

        :param labels: The labels of this Scope.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Scope.

        The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`

        :return: The name of this Scope.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Scope.

        The resource name for the scope `projects/{project}/locations/{location}/scopes/{scope}`

        :param name: The name of this Scope.
        :type name: str
        """

        self._name = name

    @property
    def namespace_labels(self):
        """Gets the namespace_labels of this Scope.

        Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.

        :return: The namespace_labels of this Scope.
        :rtype: Dict[str, str]
        """
        return self._namespace_labels

    @namespace_labels.setter
    def namespace_labels(self, namespace_labels):
        """Sets the namespace_labels of this Scope.

        Optional. Scope-level cluster namespace labels. For the member clusters bound to the Scope, these labels are applied to each namespace under the Scope. Scope-level labels take precedence over Namespace-level labels (`namespace_labels` in the Fleet Namespace resource) if they share a key. Keys and values must be Kubernetes-conformant.

        :param namespace_labels: The namespace_labels of this Scope.
        :type namespace_labels: Dict[str, str]
        """

        self._namespace_labels = namespace_labels

    @property
    def state(self):
        """Gets the state of this Scope.


        :return: The state of this Scope.
        :rtype: ScopeLifecycleState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Scope.


        :param state: The state of this Scope.
        :type state: ScopeLifecycleState
        """

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this Scope.

        Output only. Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.

        :return: The uid of this Scope.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this Scope.

        Output only. Google-generated UUID for this resource. This is unique across all scope resources. If a scope resource is deleted and another resource with the same name is created, it gets a different uid.

        :param uid: The uid of this Scope.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this Scope.

        Output only. When the scope was last updated.

        :return: The update_time of this Scope.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Scope.

        Output only. When the scope was last updated.

        :param update_time: The update_time of this Scope.
        :type update_time: str
        """

        self._update_time = update_time
