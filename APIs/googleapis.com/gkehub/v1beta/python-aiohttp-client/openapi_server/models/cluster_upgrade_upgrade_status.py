# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterUpgradeUpgradeStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, reason: str=None, update_time: str=None):
        """ClusterUpgradeUpgradeStatus - a model defined in OpenAPI

        :param code: The code of this ClusterUpgradeUpgradeStatus.
        :param reason: The reason of this ClusterUpgradeUpgradeStatus.
        :param update_time: The update_time of this ClusterUpgradeUpgradeStatus.
        """
        self.openapi_types = {
            'code': str,
            'reason': str,
            'update_time': str
        }

        self.attribute_map = {
            'code': 'code',
            'reason': 'reason',
            'update_time': 'updateTime'
        }

        self._code = code
        self._reason = reason
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeUpgradeStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeUpgradeStatus of this ClusterUpgradeUpgradeStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ClusterUpgradeUpgradeStatus.

        Status code of the upgrade.

        :return: The code of this ClusterUpgradeUpgradeStatus.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ClusterUpgradeUpgradeStatus.

        Status code of the upgrade.

        :param code: The code of this ClusterUpgradeUpgradeStatus.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "INELIGIBLE", "PENDING", "IN_PROGRESS", "SOAKING", "FORCED_SOAKING", "COMPLETE"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def reason(self):
        """Gets the reason of this ClusterUpgradeUpgradeStatus.

        Reason for this status.

        :return: The reason of this ClusterUpgradeUpgradeStatus.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ClusterUpgradeUpgradeStatus.

        Reason for this status.

        :param reason: The reason of this ClusterUpgradeUpgradeStatus.
        :type reason: str
        """

        self._reason = reason

    @property
    def update_time(self):
        """Gets the update_time of this ClusterUpgradeUpgradeStatus.

        Last timestamp the status was updated.

        :return: The update_time of this ClusterUpgradeUpgradeStatus.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this ClusterUpgradeUpgradeStatus.

        Last timestamp the status was updated.

        :param update_time: The update_time of this ClusterUpgradeUpgradeStatus.
        :type update_time: str
        """

        self._update_time = update_time
