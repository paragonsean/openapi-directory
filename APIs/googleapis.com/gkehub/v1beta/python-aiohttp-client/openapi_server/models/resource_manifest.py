# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResourceManifest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_scoped: bool=None, manifest: str=None):
        """ResourceManifest - a model defined in OpenAPI

        :param cluster_scoped: The cluster_scoped of this ResourceManifest.
        :param manifest: The manifest of this ResourceManifest.
        """
        self.openapi_types = {
            'cluster_scoped': bool,
            'manifest': str
        }

        self.attribute_map = {
            'cluster_scoped': 'clusterScoped',
            'manifest': 'manifest'
        }

        self._cluster_scoped = cluster_scoped
        self._manifest = manifest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceManifest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceManifest of this ResourceManifest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_scoped(self):
        """Gets the cluster_scoped of this ResourceManifest.

        Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.

        :return: The cluster_scoped of this ResourceManifest.
        :rtype: bool
        """
        return self._cluster_scoped

    @cluster_scoped.setter
    def cluster_scoped(self, cluster_scoped):
        """Sets the cluster_scoped of this ResourceManifest.

        Whether the resource provided in the manifest is `cluster_scoped`. If unset, the manifest is assumed to be namespace scoped. This field is used for REST mapping when applying the resource in a cluster.

        :param cluster_scoped: The cluster_scoped of this ResourceManifest.
        :type cluster_scoped: bool
        """

        self._cluster_scoped = cluster_scoped

    @property
    def manifest(self):
        """Gets the manifest of this ResourceManifest.

        YAML manifest of the resource.

        :return: The manifest of this ResourceManifest.
        :rtype: str
        """
        return self._manifest

    @manifest.setter
    def manifest(self, manifest):
        """Sets the manifest of this ResourceManifest.

        YAML manifest of the resource.

        :param manifest: The manifest of this ResourceManifest.
        :type manifest: str
        """

        self._manifest = manifest
