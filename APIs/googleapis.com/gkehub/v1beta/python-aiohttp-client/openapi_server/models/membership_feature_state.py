# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_dev_experience_feature_state import AppDevExperienceFeatureState
from openapi_server.models.cluster_upgrade_membership_state import ClusterUpgradeMembershipState
from openapi_server.models.config_management_membership_state import ConfigManagementMembershipState
from openapi_server.models.feature_state import FeatureState
from openapi_server.models.identity_service_membership_state import IdentityServiceMembershipState
from openapi_server.models.metering_membership_state import MeteringMembershipState
from openapi_server.models.policy_controller_membership_state import PolicyControllerMembershipState
from openapi_server.models.service_mesh_membership_state import ServiceMeshMembershipState
from openapi_server import util


class MembershipFeatureState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appdevexperience: AppDevExperienceFeatureState=None, clusterupgrade: ClusterUpgradeMembershipState=None, configmanagement: ConfigManagementMembershipState=None, fleetobservability: object=None, identityservice: IdentityServiceMembershipState=None, metering: MeteringMembershipState=None, policycontroller: PolicyControllerMembershipState=None, servicemesh: ServiceMeshMembershipState=None, state: FeatureState=None):
        """MembershipFeatureState - a model defined in OpenAPI

        :param appdevexperience: The appdevexperience of this MembershipFeatureState.
        :param clusterupgrade: The clusterupgrade of this MembershipFeatureState.
        :param configmanagement: The configmanagement of this MembershipFeatureState.
        :param fleetobservability: The fleetobservability of this MembershipFeatureState.
        :param identityservice: The identityservice of this MembershipFeatureState.
        :param metering: The metering of this MembershipFeatureState.
        :param policycontroller: The policycontroller of this MembershipFeatureState.
        :param servicemesh: The servicemesh of this MembershipFeatureState.
        :param state: The state of this MembershipFeatureState.
        """
        self.openapi_types = {
            'appdevexperience': AppDevExperienceFeatureState,
            'clusterupgrade': ClusterUpgradeMembershipState,
            'configmanagement': ConfigManagementMembershipState,
            'fleetobservability': object,
            'identityservice': IdentityServiceMembershipState,
            'metering': MeteringMembershipState,
            'policycontroller': PolicyControllerMembershipState,
            'servicemesh': ServiceMeshMembershipState,
            'state': FeatureState
        }

        self.attribute_map = {
            'appdevexperience': 'appdevexperience',
            'clusterupgrade': 'clusterupgrade',
            'configmanagement': 'configmanagement',
            'fleetobservability': 'fleetobservability',
            'identityservice': 'identityservice',
            'metering': 'metering',
            'policycontroller': 'policycontroller',
            'servicemesh': 'servicemesh',
            'state': 'state'
        }

        self._appdevexperience = appdevexperience
        self._clusterupgrade = clusterupgrade
        self._configmanagement = configmanagement
        self._fleetobservability = fleetobservability
        self._identityservice = identityservice
        self._metering = metering
        self._policycontroller = policycontroller
        self._servicemesh = servicemesh
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipFeatureState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipFeatureState of this MembershipFeatureState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appdevexperience(self):
        """Gets the appdevexperience of this MembershipFeatureState.


        :return: The appdevexperience of this MembershipFeatureState.
        :rtype: AppDevExperienceFeatureState
        """
        return self._appdevexperience

    @appdevexperience.setter
    def appdevexperience(self, appdevexperience):
        """Sets the appdevexperience of this MembershipFeatureState.


        :param appdevexperience: The appdevexperience of this MembershipFeatureState.
        :type appdevexperience: AppDevExperienceFeatureState
        """

        self._appdevexperience = appdevexperience

    @property
    def clusterupgrade(self):
        """Gets the clusterupgrade of this MembershipFeatureState.


        :return: The clusterupgrade of this MembershipFeatureState.
        :rtype: ClusterUpgradeMembershipState
        """
        return self._clusterupgrade

    @clusterupgrade.setter
    def clusterupgrade(self, clusterupgrade):
        """Sets the clusterupgrade of this MembershipFeatureState.


        :param clusterupgrade: The clusterupgrade of this MembershipFeatureState.
        :type clusterupgrade: ClusterUpgradeMembershipState
        """

        self._clusterupgrade = clusterupgrade

    @property
    def configmanagement(self):
        """Gets the configmanagement of this MembershipFeatureState.


        :return: The configmanagement of this MembershipFeatureState.
        :rtype: ConfigManagementMembershipState
        """
        return self._configmanagement

    @configmanagement.setter
    def configmanagement(self, configmanagement):
        """Sets the configmanagement of this MembershipFeatureState.


        :param configmanagement: The configmanagement of this MembershipFeatureState.
        :type configmanagement: ConfigManagementMembershipState
        """

        self._configmanagement = configmanagement

    @property
    def fleetobservability(self):
        """Gets the fleetobservability of this MembershipFeatureState.

        **FleetObservability**: Membership-specific Feature state for fleetobservability.

        :return: The fleetobservability of this MembershipFeatureState.
        :rtype: object
        """
        return self._fleetobservability

    @fleetobservability.setter
    def fleetobservability(self, fleetobservability):
        """Sets the fleetobservability of this MembershipFeatureState.

        **FleetObservability**: Membership-specific Feature state for fleetobservability.

        :param fleetobservability: The fleetobservability of this MembershipFeatureState.
        :type fleetobservability: object
        """

        self._fleetobservability = fleetobservability

    @property
    def identityservice(self):
        """Gets the identityservice of this MembershipFeatureState.


        :return: The identityservice of this MembershipFeatureState.
        :rtype: IdentityServiceMembershipState
        """
        return self._identityservice

    @identityservice.setter
    def identityservice(self, identityservice):
        """Sets the identityservice of this MembershipFeatureState.


        :param identityservice: The identityservice of this MembershipFeatureState.
        :type identityservice: IdentityServiceMembershipState
        """

        self._identityservice = identityservice

    @property
    def metering(self):
        """Gets the metering of this MembershipFeatureState.


        :return: The metering of this MembershipFeatureState.
        :rtype: MeteringMembershipState
        """
        return self._metering

    @metering.setter
    def metering(self, metering):
        """Sets the metering of this MembershipFeatureState.


        :param metering: The metering of this MembershipFeatureState.
        :type metering: MeteringMembershipState
        """

        self._metering = metering

    @property
    def policycontroller(self):
        """Gets the policycontroller of this MembershipFeatureState.


        :return: The policycontroller of this MembershipFeatureState.
        :rtype: PolicyControllerMembershipState
        """
        return self._policycontroller

    @policycontroller.setter
    def policycontroller(self, policycontroller):
        """Sets the policycontroller of this MembershipFeatureState.


        :param policycontroller: The policycontroller of this MembershipFeatureState.
        :type policycontroller: PolicyControllerMembershipState
        """

        self._policycontroller = policycontroller

    @property
    def servicemesh(self):
        """Gets the servicemesh of this MembershipFeatureState.


        :return: The servicemesh of this MembershipFeatureState.
        :rtype: ServiceMeshMembershipState
        """
        return self._servicemesh

    @servicemesh.setter
    def servicemesh(self, servicemesh):
        """Sets the servicemesh of this MembershipFeatureState.


        :param servicemesh: The servicemesh of this MembershipFeatureState.
        :type servicemesh: ServiceMeshMembershipState
        """

        self._servicemesh = servicemesh

    @property
    def state(self):
        """Gets the state of this MembershipFeatureState.


        :return: The state of this MembershipFeatureState.
        :rtype: FeatureState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MembershipFeatureState.


        :param state: The state of this MembershipFeatureState.
        :type state: FeatureState
        """

        self._state = state
