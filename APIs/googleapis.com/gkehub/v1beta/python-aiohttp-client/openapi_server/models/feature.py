# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_feature_spec import CommonFeatureSpec
from openapi_server.models.common_feature_state import CommonFeatureState
from openapi_server.models.common_fleet_default_member_config_spec import CommonFleetDefaultMemberConfigSpec
from openapi_server.models.feature_resource_state import FeatureResourceState
from openapi_server.models.membership_feature_spec import MembershipFeatureSpec
from openapi_server.models.membership_feature_state import MembershipFeatureState
from openapi_server.models.scope_feature_state import ScopeFeatureState
from openapi_server import util


class Feature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, fleet_default_member_config: CommonFleetDefaultMemberConfigSpec=None, labels: Dict[str, str]=None, membership_specs: Dict[str, MembershipFeatureSpec]=None, membership_states: Dict[str, MembershipFeatureState]=None, name: str=None, resource_state: FeatureResourceState=None, scope_specs: Dict[str, object]=None, scope_states: Dict[str, ScopeFeatureState]=None, spec: CommonFeatureSpec=None, state: CommonFeatureState=None, update_time: str=None):
        """Feature - a model defined in OpenAPI

        :param create_time: The create_time of this Feature.
        :param delete_time: The delete_time of this Feature.
        :param fleet_default_member_config: The fleet_default_member_config of this Feature.
        :param labels: The labels of this Feature.
        :param membership_specs: The membership_specs of this Feature.
        :param membership_states: The membership_states of this Feature.
        :param name: The name of this Feature.
        :param resource_state: The resource_state of this Feature.
        :param scope_specs: The scope_specs of this Feature.
        :param scope_states: The scope_states of this Feature.
        :param spec: The spec of this Feature.
        :param state: The state of this Feature.
        :param update_time: The update_time of this Feature.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'fleet_default_member_config': CommonFleetDefaultMemberConfigSpec,
            'labels': Dict[str, str],
            'membership_specs': Dict[str, MembershipFeatureSpec],
            'membership_states': Dict[str, MembershipFeatureState],
            'name': str,
            'resource_state': FeatureResourceState,
            'scope_specs': Dict[str, object],
            'scope_states': Dict[str, ScopeFeatureState],
            'spec': CommonFeatureSpec,
            'state': CommonFeatureState,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'fleet_default_member_config': 'fleetDefaultMemberConfig',
            'labels': 'labels',
            'membership_specs': 'membershipSpecs',
            'membership_states': 'membershipStates',
            'name': 'name',
            'resource_state': 'resourceState',
            'scope_specs': 'scopeSpecs',
            'scope_states': 'scopeStates',
            'spec': 'spec',
            'state': 'state',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._fleet_default_member_config = fleet_default_member_config
        self._labels = labels
        self._membership_specs = membership_specs
        self._membership_states = membership_states
        self._name = name
        self._resource_state = resource_state
        self._scope_specs = scope_specs
        self._scope_states = scope_states
        self._spec = spec
        self._state = state
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feature of this Feature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Feature.

        Output only. When the Feature resource was created.

        :return: The create_time of this Feature.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Feature.

        Output only. When the Feature resource was created.

        :param create_time: The create_time of this Feature.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Feature.

        Output only. When the Feature resource was deleted.

        :return: The delete_time of this Feature.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Feature.

        Output only. When the Feature resource was deleted.

        :param delete_time: The delete_time of this Feature.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def fleet_default_member_config(self):
        """Gets the fleet_default_member_config of this Feature.


        :return: The fleet_default_member_config of this Feature.
        :rtype: CommonFleetDefaultMemberConfigSpec
        """
        return self._fleet_default_member_config

    @fleet_default_member_config.setter
    def fleet_default_member_config(self, fleet_default_member_config):
        """Sets the fleet_default_member_config of this Feature.


        :param fleet_default_member_config: The fleet_default_member_config of this Feature.
        :type fleet_default_member_config: CommonFleetDefaultMemberConfigSpec
        """

        self._fleet_default_member_config = fleet_default_member_config

    @property
    def labels(self):
        """Gets the labels of this Feature.

        Labels for this Feature.

        :return: The labels of this Feature.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Feature.

        Labels for this Feature.

        :param labels: The labels of this Feature.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def membership_specs(self):
        """Gets the membership_specs of this Feature.

        Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.

        :return: The membership_specs of this Feature.
        :rtype: Dict[str, MembershipFeatureSpec]
        """
        return self._membership_specs

    @membership_specs.setter
    def membership_specs(self, membership_specs):
        """Sets the membership_specs of this Feature.

        Optional. Membership-specific configuration for this Feature. If this Feature does not support any per-Membership configuration, this field may be unused. The keys indicate which Membership the configuration is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Membership is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.

        :param membership_specs: The membership_specs of this Feature.
        :type membership_specs: Dict[str, MembershipFeatureSpec]
        """

        self._membership_specs = membership_specs

    @property
    def membership_states(self):
        """Gets the membership_states of this Feature.

        Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.

        :return: The membership_states of this Feature.
        :rtype: Dict[str, MembershipFeatureState]
        """
        return self._membership_states

    @membership_states.setter
    def membership_states(self, membership_states):
        """Sets the membership_states of this Feature.

        Output only. Membership-specific Feature status. If this Feature does report any per-Membership status, this field may be unused. The keys indicate which Membership the state is for, in the form: `projects/{p}/locations/{l}/memberships/{m}` Where {p} is the project number, {l} is a valid location and {m} is a valid Membership in this project at that location. {p} MUST match the Feature's project number.

        :param membership_states: The membership_states of this Feature.
        :type membership_states: Dict[str, MembershipFeatureState]
        """

        self._membership_states = membership_states

    @property
    def name(self):
        """Gets the name of this Feature.

        Output only. The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.

        :return: The name of this Feature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Feature.

        Output only. The full, unique name of this Feature resource in the format `projects/*/locations/*/features/*`.

        :param name: The name of this Feature.
        :type name: str
        """

        self._name = name

    @property
    def resource_state(self):
        """Gets the resource_state of this Feature.


        :return: The resource_state of this Feature.
        :rtype: FeatureResourceState
        """
        return self._resource_state

    @resource_state.setter
    def resource_state(self, resource_state):
        """Sets the resource_state of this Feature.


        :param resource_state: The resource_state of this Feature.
        :type resource_state: FeatureResourceState
        """

        self._resource_state = resource_state

    @property
    def scope_specs(self):
        """Gets the scope_specs of this Feature.

        Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.

        :return: The scope_specs of this Feature.
        :rtype: Dict[str, object]
        """
        return self._scope_specs

    @scope_specs.setter
    def scope_specs(self, scope_specs):
        """Sets the scope_specs of this Feature.

        Optional. Scope-specific configuration for this Feature. If this Feature does not support any per-Scope configuration, this field may be unused. The keys indicate which Scope the configuration is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. {p} will always be returned as the project number, but the project ID is also accepted during input. If the same Scope is specified in the map twice (using the project ID form, and the project number form), exactly ONE of the entries will be saved, with no guarantees as to which. For this reason, it is recommended the same format be used for all entries when mutating a Feature.

        :param scope_specs: The scope_specs of this Feature.
        :type scope_specs: Dict[str, object]
        """

        self._scope_specs = scope_specs

    @property
    def scope_states(self):
        """Gets the scope_states of this Feature.

        Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.

        :return: The scope_states of this Feature.
        :rtype: Dict[str, ScopeFeatureState]
        """
        return self._scope_states

    @scope_states.setter
    def scope_states(self, scope_states):
        """Sets the scope_states of this Feature.

        Output only. Scope-specific Feature status. If this Feature does report any per-Scope status, this field may be unused. The keys indicate which Scope the state is for, in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.

        :param scope_states: The scope_states of this Feature.
        :type scope_states: Dict[str, ScopeFeatureState]
        """

        self._scope_states = scope_states

    @property
    def spec(self):
        """Gets the spec of this Feature.


        :return: The spec of this Feature.
        :rtype: CommonFeatureSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec):
        """Sets the spec of this Feature.


        :param spec: The spec of this Feature.
        :type spec: CommonFeatureSpec
        """

        self._spec = spec

    @property
    def state(self):
        """Gets the state of this Feature.


        :return: The state of this Feature.
        :rtype: CommonFeatureState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Feature.


        :param state: The state of this Feature.
        :type state: CommonFeatureState
        """

        self._state = state

    @property
    def update_time(self):
        """Gets the update_time of this Feature.

        Output only. When the Feature resource was last updated.

        :return: The update_time of this Feature.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Feature.

        Output only. When the Feature resource was last updated.

        :param update_time: The update_time of this Feature.
        :type update_time: str
        """

        self._update_time = update_time
