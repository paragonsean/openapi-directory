# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityServiceOidcConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_authority_data: str=None, client_id: str=None, client_secret: str=None, deploy_cloud_console_proxy: bool=None, enable_access_token: bool=None, encrypted_client_secret: str=None, extra_params: str=None, group_prefix: str=None, groups_claim: str=None, issuer_uri: str=None, kubectl_redirect_uri: str=None, scopes: str=None, user_claim: str=None, user_prefix: str=None):
        """IdentityServiceOidcConfig - a model defined in OpenAPI

        :param certificate_authority_data: The certificate_authority_data of this IdentityServiceOidcConfig.
        :param client_id: The client_id of this IdentityServiceOidcConfig.
        :param client_secret: The client_secret of this IdentityServiceOidcConfig.
        :param deploy_cloud_console_proxy: The deploy_cloud_console_proxy of this IdentityServiceOidcConfig.
        :param enable_access_token: The enable_access_token of this IdentityServiceOidcConfig.
        :param encrypted_client_secret: The encrypted_client_secret of this IdentityServiceOidcConfig.
        :param extra_params: The extra_params of this IdentityServiceOidcConfig.
        :param group_prefix: The group_prefix of this IdentityServiceOidcConfig.
        :param groups_claim: The groups_claim of this IdentityServiceOidcConfig.
        :param issuer_uri: The issuer_uri of this IdentityServiceOidcConfig.
        :param kubectl_redirect_uri: The kubectl_redirect_uri of this IdentityServiceOidcConfig.
        :param scopes: The scopes of this IdentityServiceOidcConfig.
        :param user_claim: The user_claim of this IdentityServiceOidcConfig.
        :param user_prefix: The user_prefix of this IdentityServiceOidcConfig.
        """
        self.openapi_types = {
            'certificate_authority_data': str,
            'client_id': str,
            'client_secret': str,
            'deploy_cloud_console_proxy': bool,
            'enable_access_token': bool,
            'encrypted_client_secret': str,
            'extra_params': str,
            'group_prefix': str,
            'groups_claim': str,
            'issuer_uri': str,
            'kubectl_redirect_uri': str,
            'scopes': str,
            'user_claim': str,
            'user_prefix': str
        }

        self.attribute_map = {
            'certificate_authority_data': 'certificateAuthorityData',
            'client_id': 'clientId',
            'client_secret': 'clientSecret',
            'deploy_cloud_console_proxy': 'deployCloudConsoleProxy',
            'enable_access_token': 'enableAccessToken',
            'encrypted_client_secret': 'encryptedClientSecret',
            'extra_params': 'extraParams',
            'group_prefix': 'groupPrefix',
            'groups_claim': 'groupsClaim',
            'issuer_uri': 'issuerUri',
            'kubectl_redirect_uri': 'kubectlRedirectUri',
            'scopes': 'scopes',
            'user_claim': 'userClaim',
            'user_prefix': 'userPrefix'
        }

        self._certificate_authority_data = certificate_authority_data
        self._client_id = client_id
        self._client_secret = client_secret
        self._deploy_cloud_console_proxy = deploy_cloud_console_proxy
        self._enable_access_token = enable_access_token
        self._encrypted_client_secret = encrypted_client_secret
        self._extra_params = extra_params
        self._group_prefix = group_prefix
        self._groups_claim = groups_claim
        self._issuer_uri = issuer_uri
        self._kubectl_redirect_uri = kubectl_redirect_uri
        self._scopes = scopes
        self._user_claim = user_claim
        self._user_prefix = user_prefix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityServiceOidcConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityServiceOidcConfig of this IdentityServiceOidcConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_authority_data(self):
        """Gets the certificate_authority_data of this IdentityServiceOidcConfig.

        PEM-encoded CA for OIDC provider.

        :return: The certificate_authority_data of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._certificate_authority_data

    @certificate_authority_data.setter
    def certificate_authority_data(self, certificate_authority_data):
        """Sets the certificate_authority_data of this IdentityServiceOidcConfig.

        PEM-encoded CA for OIDC provider.

        :param certificate_authority_data: The certificate_authority_data of this IdentityServiceOidcConfig.
        :type certificate_authority_data: str
        """

        self._certificate_authority_data = certificate_authority_data

    @property
    def client_id(self):
        """Gets the client_id of this IdentityServiceOidcConfig.

        ID for OIDC client application.

        :return: The client_id of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this IdentityServiceOidcConfig.

        ID for OIDC client application.

        :param client_id: The client_id of this IdentityServiceOidcConfig.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this IdentityServiceOidcConfig.

        Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.

        :return: The client_secret of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this IdentityServiceOidcConfig.

        Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.

        :param client_secret: The client_secret of this IdentityServiceOidcConfig.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def deploy_cloud_console_proxy(self):
        """Gets the deploy_cloud_console_proxy of this IdentityServiceOidcConfig.

        Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.

        :return: The deploy_cloud_console_proxy of this IdentityServiceOidcConfig.
        :rtype: bool
        """
        return self._deploy_cloud_console_proxy

    @deploy_cloud_console_proxy.setter
    def deploy_cloud_console_proxy(self, deploy_cloud_console_proxy):
        """Sets the deploy_cloud_console_proxy of this IdentityServiceOidcConfig.

        Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.

        :param deploy_cloud_console_proxy: The deploy_cloud_console_proxy of this IdentityServiceOidcConfig.
        :type deploy_cloud_console_proxy: bool
        """

        self._deploy_cloud_console_proxy = deploy_cloud_console_proxy

    @property
    def enable_access_token(self):
        """Gets the enable_access_token of this IdentityServiceOidcConfig.

        Enable access token.

        :return: The enable_access_token of this IdentityServiceOidcConfig.
        :rtype: bool
        """
        return self._enable_access_token

    @enable_access_token.setter
    def enable_access_token(self, enable_access_token):
        """Sets the enable_access_token of this IdentityServiceOidcConfig.

        Enable access token.

        :param enable_access_token: The enable_access_token of this IdentityServiceOidcConfig.
        :type enable_access_token: bool
        """

        self._enable_access_token = enable_access_token

    @property
    def encrypted_client_secret(self):
        """Gets the encrypted_client_secret of this IdentityServiceOidcConfig.

        Output only. Encrypted OIDC Client secret

        :return: The encrypted_client_secret of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._encrypted_client_secret

    @encrypted_client_secret.setter
    def encrypted_client_secret(self, encrypted_client_secret):
        """Sets the encrypted_client_secret of this IdentityServiceOidcConfig.

        Output only. Encrypted OIDC Client secret

        :param encrypted_client_secret: The encrypted_client_secret of this IdentityServiceOidcConfig.
        :type encrypted_client_secret: str
        """

        self._encrypted_client_secret = encrypted_client_secret

    @property
    def extra_params(self):
        """Gets the extra_params of this IdentityServiceOidcConfig.

        Comma-separated list of key-value pairs.

        :return: The extra_params of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._extra_params

    @extra_params.setter
    def extra_params(self, extra_params):
        """Sets the extra_params of this IdentityServiceOidcConfig.

        Comma-separated list of key-value pairs.

        :param extra_params: The extra_params of this IdentityServiceOidcConfig.
        :type extra_params: str
        """

        self._extra_params = extra_params

    @property
    def group_prefix(self):
        """Gets the group_prefix of this IdentityServiceOidcConfig.

        Prefix to prepend to group name.

        :return: The group_prefix of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._group_prefix

    @group_prefix.setter
    def group_prefix(self, group_prefix):
        """Sets the group_prefix of this IdentityServiceOidcConfig.

        Prefix to prepend to group name.

        :param group_prefix: The group_prefix of this IdentityServiceOidcConfig.
        :type group_prefix: str
        """

        self._group_prefix = group_prefix

    @property
    def groups_claim(self):
        """Gets the groups_claim of this IdentityServiceOidcConfig.

        Claim in OIDC ID token that holds group information.

        :return: The groups_claim of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._groups_claim

    @groups_claim.setter
    def groups_claim(self, groups_claim):
        """Sets the groups_claim of this IdentityServiceOidcConfig.

        Claim in OIDC ID token that holds group information.

        :param groups_claim: The groups_claim of this IdentityServiceOidcConfig.
        :type groups_claim: str
        """

        self._groups_claim = groups_claim

    @property
    def issuer_uri(self):
        """Gets the issuer_uri of this IdentityServiceOidcConfig.

        URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.

        :return: The issuer_uri of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._issuer_uri

    @issuer_uri.setter
    def issuer_uri(self, issuer_uri):
        """Sets the issuer_uri of this IdentityServiceOidcConfig.

        URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.

        :param issuer_uri: The issuer_uri of this IdentityServiceOidcConfig.
        :type issuer_uri: str
        """

        self._issuer_uri = issuer_uri

    @property
    def kubectl_redirect_uri(self):
        """Gets the kubectl_redirect_uri of this IdentityServiceOidcConfig.

        Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.

        :return: The kubectl_redirect_uri of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._kubectl_redirect_uri

    @kubectl_redirect_uri.setter
    def kubectl_redirect_uri(self, kubectl_redirect_uri):
        """Sets the kubectl_redirect_uri of this IdentityServiceOidcConfig.

        Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.

        :param kubectl_redirect_uri: The kubectl_redirect_uri of this IdentityServiceOidcConfig.
        :type kubectl_redirect_uri: str
        """

        self._kubectl_redirect_uri = kubectl_redirect_uri

    @property
    def scopes(self):
        """Gets the scopes of this IdentityServiceOidcConfig.

        Comma-separated list of identifiers.

        :return: The scopes of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this IdentityServiceOidcConfig.

        Comma-separated list of identifiers.

        :param scopes: The scopes of this IdentityServiceOidcConfig.
        :type scopes: str
        """

        self._scopes = scopes

    @property
    def user_claim(self):
        """Gets the user_claim of this IdentityServiceOidcConfig.

        Claim in OIDC ID token that holds username.

        :return: The user_claim of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._user_claim

    @user_claim.setter
    def user_claim(self, user_claim):
        """Sets the user_claim of this IdentityServiceOidcConfig.

        Claim in OIDC ID token that holds username.

        :param user_claim: The user_claim of this IdentityServiceOidcConfig.
        :type user_claim: str
        """

        self._user_claim = user_claim

    @property
    def user_prefix(self):
        """Gets the user_prefix of this IdentityServiceOidcConfig.

        Prefix to prepend to user name.

        :return: The user_prefix of this IdentityServiceOidcConfig.
        :rtype: str
        """
        return self._user_prefix

    @user_prefix.setter
    def user_prefix(self, user_prefix):
        """Sets the user_prefix of this IdentityServiceOidcConfig.

        Prefix to prepend to user name.

        :param user_prefix: The user_prefix of this IdentityServiceOidcConfig.
        :type user_prefix: str
        """

        self._user_prefix = user_prefix
