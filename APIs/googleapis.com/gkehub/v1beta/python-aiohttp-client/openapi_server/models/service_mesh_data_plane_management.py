# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_mesh_status_details import ServiceMeshStatusDetails
from openapi_server import util


class ServiceMeshDataPlaneManagement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: List[ServiceMeshStatusDetails]=None, state: str=None):
        """ServiceMeshDataPlaneManagement - a model defined in OpenAPI

        :param details: The details of this ServiceMeshDataPlaneManagement.
        :param state: The state of this ServiceMeshDataPlaneManagement.
        """
        self.openapi_types = {
            'details': List[ServiceMeshStatusDetails],
            'state': str
        }

        self.attribute_map = {
            'details': 'details',
            'state': 'state'
        }

        self._details = details
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMeshDataPlaneManagement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMeshDataPlaneManagement of this ServiceMeshDataPlaneManagement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this ServiceMeshDataPlaneManagement.

        Explanation of the status.

        :return: The details of this ServiceMeshDataPlaneManagement.
        :rtype: List[ServiceMeshStatusDetails]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ServiceMeshDataPlaneManagement.

        Explanation of the status.

        :param details: The details of this ServiceMeshDataPlaneManagement.
        :type details: List[ServiceMeshStatusDetails]
        """

        self._details = details

    @property
    def state(self):
        """Gets the state of this ServiceMeshDataPlaneManagement.

        Lifecycle status of data plane management.

        :return: The state of this ServiceMeshDataPlaneManagement.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ServiceMeshDataPlaneManagement.

        Lifecycle status of data plane management.

        :param state: The state of this ServiceMeshDataPlaneManagement.
        :type state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "DISABLED", "FAILED_PRECONDITION", "PROVISIONING", "ACTIVE", "STALLED", "NEEDS_ATTENTION", "DEGRADED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
