# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementConfigSyncDeploymentState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admission_webhook: str=None, git_sync: str=None, importer: str=None, monitor: str=None, reconciler_manager: str=None, root_reconciler: str=None, syncer: str=None):
        """ConfigManagementConfigSyncDeploymentState - a model defined in OpenAPI

        :param admission_webhook: The admission_webhook of this ConfigManagementConfigSyncDeploymentState.
        :param git_sync: The git_sync of this ConfigManagementConfigSyncDeploymentState.
        :param importer: The importer of this ConfigManagementConfigSyncDeploymentState.
        :param monitor: The monitor of this ConfigManagementConfigSyncDeploymentState.
        :param reconciler_manager: The reconciler_manager of this ConfigManagementConfigSyncDeploymentState.
        :param root_reconciler: The root_reconciler of this ConfigManagementConfigSyncDeploymentState.
        :param syncer: The syncer of this ConfigManagementConfigSyncDeploymentState.
        """
        self.openapi_types = {
            'admission_webhook': str,
            'git_sync': str,
            'importer': str,
            'monitor': str,
            'reconciler_manager': str,
            'root_reconciler': str,
            'syncer': str
        }

        self.attribute_map = {
            'admission_webhook': 'admissionWebhook',
            'git_sync': 'gitSync',
            'importer': 'importer',
            'monitor': 'monitor',
            'reconciler_manager': 'reconcilerManager',
            'root_reconciler': 'rootReconciler',
            'syncer': 'syncer'
        }

        self._admission_webhook = admission_webhook
        self._git_sync = git_sync
        self._importer = importer
        self._monitor = monitor
        self._reconciler_manager = reconciler_manager
        self._root_reconciler = root_reconciler
        self._syncer = syncer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementConfigSyncDeploymentState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementConfigSyncDeploymentState of this ConfigManagementConfigSyncDeploymentState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admission_webhook(self):
        """Gets the admission_webhook of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of admission-webhook

        :return: The admission_webhook of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._admission_webhook

    @admission_webhook.setter
    def admission_webhook(self, admission_webhook):
        """Sets the admission_webhook of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of admission-webhook

        :param admission_webhook: The admission_webhook of this ConfigManagementConfigSyncDeploymentState.
        :type admission_webhook: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if admission_webhook not in allowed_values:
            raise ValueError(
                "Invalid value for `admission_webhook` ({0}), must be one of {1}"
                .format(admission_webhook, allowed_values)
            )

        self._admission_webhook = admission_webhook

    @property
    def git_sync(self):
        """Gets the git_sync of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the git-sync pod

        :return: The git_sync of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._git_sync

    @git_sync.setter
    def git_sync(self, git_sync):
        """Sets the git_sync of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the git-sync pod

        :param git_sync: The git_sync of this ConfigManagementConfigSyncDeploymentState.
        :type git_sync: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if git_sync not in allowed_values:
            raise ValueError(
                "Invalid value for `git_sync` ({0}), must be one of {1}"
                .format(git_sync, allowed_values)
            )

        self._git_sync = git_sync

    @property
    def importer(self):
        """Gets the importer of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the importer pod

        :return: The importer of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._importer

    @importer.setter
    def importer(self, importer):
        """Sets the importer of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the importer pod

        :param importer: The importer of this ConfigManagementConfigSyncDeploymentState.
        :type importer: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if importer not in allowed_values:
            raise ValueError(
                "Invalid value for `importer` ({0}), must be one of {1}"
                .format(importer, allowed_values)
            )

        self._importer = importer

    @property
    def monitor(self):
        """Gets the monitor of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the monitor pod

        :return: The monitor of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor):
        """Sets the monitor of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the monitor pod

        :param monitor: The monitor of this ConfigManagementConfigSyncDeploymentState.
        :type monitor: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if monitor not in allowed_values:
            raise ValueError(
                "Invalid value for `monitor` ({0}), must be one of {1}"
                .format(monitor, allowed_values)
            )

        self._monitor = monitor

    @property
    def reconciler_manager(self):
        """Gets the reconciler_manager of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of reconciler-manager pod

        :return: The reconciler_manager of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._reconciler_manager

    @reconciler_manager.setter
    def reconciler_manager(self, reconciler_manager):
        """Sets the reconciler_manager of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of reconciler-manager pod

        :param reconciler_manager: The reconciler_manager of this ConfigManagementConfigSyncDeploymentState.
        :type reconciler_manager: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if reconciler_manager not in allowed_values:
            raise ValueError(
                "Invalid value for `reconciler_manager` ({0}), must be one of {1}"
                .format(reconciler_manager, allowed_values)
            )

        self._reconciler_manager = reconciler_manager

    @property
    def root_reconciler(self):
        """Gets the root_reconciler of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of root-reconciler

        :return: The root_reconciler of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._root_reconciler

    @root_reconciler.setter
    def root_reconciler(self, root_reconciler):
        """Sets the root_reconciler of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of root-reconciler

        :param root_reconciler: The root_reconciler of this ConfigManagementConfigSyncDeploymentState.
        :type root_reconciler: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if root_reconciler not in allowed_values:
            raise ValueError(
                "Invalid value for `root_reconciler` ({0}), must be one of {1}"
                .format(root_reconciler, allowed_values)
            )

        self._root_reconciler = root_reconciler

    @property
    def syncer(self):
        """Gets the syncer of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the syncer pod

        :return: The syncer of this ConfigManagementConfigSyncDeploymentState.
        :rtype: str
        """
        return self._syncer

    @syncer.setter
    def syncer(self, syncer):
        """Sets the syncer of this ConfigManagementConfigSyncDeploymentState.

        Deployment state of the syncer pod

        :param syncer: The syncer of this ConfigManagementConfigSyncDeploymentState.
        :type syncer: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if syncer not in allowed_values:
            raise ValueError(
                "Invalid value for `syncer` ({0}), must be one of {1}"
                .format(syncer, allowed_values)
            )

        self._syncer = syncer
