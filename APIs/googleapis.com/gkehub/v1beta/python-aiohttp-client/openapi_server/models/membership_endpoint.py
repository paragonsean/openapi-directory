# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.appliance_cluster import ApplianceCluster
from openapi_server.models.edge_cluster import EdgeCluster
from openapi_server.models.gke_cluster import GkeCluster
from openapi_server.models.kubernetes_metadata import KubernetesMetadata
from openapi_server.models.kubernetes_resource import KubernetesResource
from openapi_server.models.multi_cloud_cluster import MultiCloudCluster
from openapi_server.models.on_prem_cluster import OnPremCluster
from openapi_server import util


class MembershipEndpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appliance_cluster: ApplianceCluster=None, edge_cluster: EdgeCluster=None, gke_cluster: GkeCluster=None, google_managed: bool=None, kubernetes_metadata: KubernetesMetadata=None, kubernetes_resource: KubernetesResource=None, multi_cloud_cluster: MultiCloudCluster=None, on_prem_cluster: OnPremCluster=None):
        """MembershipEndpoint - a model defined in OpenAPI

        :param appliance_cluster: The appliance_cluster of this MembershipEndpoint.
        :param edge_cluster: The edge_cluster of this MembershipEndpoint.
        :param gke_cluster: The gke_cluster of this MembershipEndpoint.
        :param google_managed: The google_managed of this MembershipEndpoint.
        :param kubernetes_metadata: The kubernetes_metadata of this MembershipEndpoint.
        :param kubernetes_resource: The kubernetes_resource of this MembershipEndpoint.
        :param multi_cloud_cluster: The multi_cloud_cluster of this MembershipEndpoint.
        :param on_prem_cluster: The on_prem_cluster of this MembershipEndpoint.
        """
        self.openapi_types = {
            'appliance_cluster': ApplianceCluster,
            'edge_cluster': EdgeCluster,
            'gke_cluster': GkeCluster,
            'google_managed': bool,
            'kubernetes_metadata': KubernetesMetadata,
            'kubernetes_resource': KubernetesResource,
            'multi_cloud_cluster': MultiCloudCluster,
            'on_prem_cluster': OnPremCluster
        }

        self.attribute_map = {
            'appliance_cluster': 'applianceCluster',
            'edge_cluster': 'edgeCluster',
            'gke_cluster': 'gkeCluster',
            'google_managed': 'googleManaged',
            'kubernetes_metadata': 'kubernetesMetadata',
            'kubernetes_resource': 'kubernetesResource',
            'multi_cloud_cluster': 'multiCloudCluster',
            'on_prem_cluster': 'onPremCluster'
        }

        self._appliance_cluster = appliance_cluster
        self._edge_cluster = edge_cluster
        self._gke_cluster = gke_cluster
        self._google_managed = google_managed
        self._kubernetes_metadata = kubernetes_metadata
        self._kubernetes_resource = kubernetes_resource
        self._multi_cloud_cluster = multi_cloud_cluster
        self._on_prem_cluster = on_prem_cluster

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipEndpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipEndpoint of this MembershipEndpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appliance_cluster(self):
        """Gets the appliance_cluster of this MembershipEndpoint.


        :return: The appliance_cluster of this MembershipEndpoint.
        :rtype: ApplianceCluster
        """
        return self._appliance_cluster

    @appliance_cluster.setter
    def appliance_cluster(self, appliance_cluster):
        """Sets the appliance_cluster of this MembershipEndpoint.


        :param appliance_cluster: The appliance_cluster of this MembershipEndpoint.
        :type appliance_cluster: ApplianceCluster
        """

        self._appliance_cluster = appliance_cluster

    @property
    def edge_cluster(self):
        """Gets the edge_cluster of this MembershipEndpoint.


        :return: The edge_cluster of this MembershipEndpoint.
        :rtype: EdgeCluster
        """
        return self._edge_cluster

    @edge_cluster.setter
    def edge_cluster(self, edge_cluster):
        """Sets the edge_cluster of this MembershipEndpoint.


        :param edge_cluster: The edge_cluster of this MembershipEndpoint.
        :type edge_cluster: EdgeCluster
        """

        self._edge_cluster = edge_cluster

    @property
    def gke_cluster(self):
        """Gets the gke_cluster of this MembershipEndpoint.


        :return: The gke_cluster of this MembershipEndpoint.
        :rtype: GkeCluster
        """
        return self._gke_cluster

    @gke_cluster.setter
    def gke_cluster(self, gke_cluster):
        """Sets the gke_cluster of this MembershipEndpoint.


        :param gke_cluster: The gke_cluster of this MembershipEndpoint.
        :type gke_cluster: GkeCluster
        """

        self._gke_cluster = gke_cluster

    @property
    def google_managed(self):
        """Gets the google_managed of this MembershipEndpoint.

        Output only. Whether the lifecycle of this membership is managed by a google cluster platform service.

        :return: The google_managed of this MembershipEndpoint.
        :rtype: bool
        """
        return self._google_managed

    @google_managed.setter
    def google_managed(self, google_managed):
        """Sets the google_managed of this MembershipEndpoint.

        Output only. Whether the lifecycle of this membership is managed by a google cluster platform service.

        :param google_managed: The google_managed of this MembershipEndpoint.
        :type google_managed: bool
        """

        self._google_managed = google_managed

    @property
    def kubernetes_metadata(self):
        """Gets the kubernetes_metadata of this MembershipEndpoint.


        :return: The kubernetes_metadata of this MembershipEndpoint.
        :rtype: KubernetesMetadata
        """
        return self._kubernetes_metadata

    @kubernetes_metadata.setter
    def kubernetes_metadata(self, kubernetes_metadata):
        """Sets the kubernetes_metadata of this MembershipEndpoint.


        :param kubernetes_metadata: The kubernetes_metadata of this MembershipEndpoint.
        :type kubernetes_metadata: KubernetesMetadata
        """

        self._kubernetes_metadata = kubernetes_metadata

    @property
    def kubernetes_resource(self):
        """Gets the kubernetes_resource of this MembershipEndpoint.


        :return: The kubernetes_resource of this MembershipEndpoint.
        :rtype: KubernetesResource
        """
        return self._kubernetes_resource

    @kubernetes_resource.setter
    def kubernetes_resource(self, kubernetes_resource):
        """Sets the kubernetes_resource of this MembershipEndpoint.


        :param kubernetes_resource: The kubernetes_resource of this MembershipEndpoint.
        :type kubernetes_resource: KubernetesResource
        """

        self._kubernetes_resource = kubernetes_resource

    @property
    def multi_cloud_cluster(self):
        """Gets the multi_cloud_cluster of this MembershipEndpoint.


        :return: The multi_cloud_cluster of this MembershipEndpoint.
        :rtype: MultiCloudCluster
        """
        return self._multi_cloud_cluster

    @multi_cloud_cluster.setter
    def multi_cloud_cluster(self, multi_cloud_cluster):
        """Sets the multi_cloud_cluster of this MembershipEndpoint.


        :param multi_cloud_cluster: The multi_cloud_cluster of this MembershipEndpoint.
        :type multi_cloud_cluster: MultiCloudCluster
        """

        self._multi_cloud_cluster = multi_cloud_cluster

    @property
    def on_prem_cluster(self):
        """Gets the on_prem_cluster of this MembershipEndpoint.


        :return: The on_prem_cluster of this MembershipEndpoint.
        :rtype: OnPremCluster
        """
        return self._on_prem_cluster

    @on_prem_cluster.setter
    def on_prem_cluster(self, on_prem_cluster):
        """Sets the on_prem_cluster of this MembershipEndpoint.


        :param on_prem_cluster: The on_prem_cluster of this MembershipEndpoint.
        :type on_prem_cluster: OnPremCluster
        """

        self._on_prem_cluster = on_prem_cluster
