# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.authority import Authority
from openapi_server.models.membership_endpoint import MembershipEndpoint
from openapi_server.models.membership_state import MembershipState
from openapi_server.models.monitoring_config import MonitoringConfig
from openapi_server import util


class Membership(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authority: Authority=None, create_time: str=None, delete_time: str=None, description: str=None, endpoint: MembershipEndpoint=None, external_id: str=None, labels: Dict[str, str]=None, last_connection_time: str=None, monitoring_config: MonitoringConfig=None, name: str=None, state: MembershipState=None, unique_id: str=None, update_time: str=None):
        """Membership - a model defined in OpenAPI

        :param authority: The authority of this Membership.
        :param create_time: The create_time of this Membership.
        :param delete_time: The delete_time of this Membership.
        :param description: The description of this Membership.
        :param endpoint: The endpoint of this Membership.
        :param external_id: The external_id of this Membership.
        :param labels: The labels of this Membership.
        :param last_connection_time: The last_connection_time of this Membership.
        :param monitoring_config: The monitoring_config of this Membership.
        :param name: The name of this Membership.
        :param state: The state of this Membership.
        :param unique_id: The unique_id of this Membership.
        :param update_time: The update_time of this Membership.
        """
        self.openapi_types = {
            'authority': Authority,
            'create_time': str,
            'delete_time': str,
            'description': str,
            'endpoint': MembershipEndpoint,
            'external_id': str,
            'labels': Dict[str, str],
            'last_connection_time': str,
            'monitoring_config': MonitoringConfig,
            'name': str,
            'state': MembershipState,
            'unique_id': str,
            'update_time': str
        }

        self.attribute_map = {
            'authority': 'authority',
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'description': 'description',
            'endpoint': 'endpoint',
            'external_id': 'externalId',
            'labels': 'labels',
            'last_connection_time': 'lastConnectionTime',
            'monitoring_config': 'monitoringConfig',
            'name': 'name',
            'state': 'state',
            'unique_id': 'uniqueId',
            'update_time': 'updateTime'
        }

        self._authority = authority
        self._create_time = create_time
        self._delete_time = delete_time
        self._description = description
        self._endpoint = endpoint
        self._external_id = external_id
        self._labels = labels
        self._last_connection_time = last_connection_time
        self._monitoring_config = monitoring_config
        self._name = name
        self._state = state
        self._unique_id = unique_id
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Membership':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Membership of this Membership.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authority(self):
        """Gets the authority of this Membership.


        :return: The authority of this Membership.
        :rtype: Authority
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this Membership.


        :param authority: The authority of this Membership.
        :type authority: Authority
        """

        self._authority = authority

    @property
    def create_time(self):
        """Gets the create_time of this Membership.

        Output only. When the Membership was created.

        :return: The create_time of this Membership.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Membership.

        Output only. When the Membership was created.

        :param create_time: The create_time of this Membership.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this Membership.

        Output only. When the Membership was deleted.

        :return: The delete_time of this Membership.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this Membership.

        Output only. When the Membership was deleted.

        :param delete_time: The delete_time of this Membership.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def description(self):
        """Gets the description of this Membership.

        Output only. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*` This field is present for legacy purposes.

        :return: The description of this Membership.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Membership.

        Output only. Description of this membership, limited to 63 characters. Must match the regex: `a-zA-Z0-9*` This field is present for legacy purposes.

        :param description: The description of this Membership.
        :type description: str
        """

        self._description = description

    @property
    def endpoint(self):
        """Gets the endpoint of this Membership.


        :return: The endpoint of this Membership.
        :rtype: MembershipEndpoint
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this Membership.


        :param endpoint: The endpoint of this Membership.
        :type endpoint: MembershipEndpoint
        """

        self._endpoint = endpoint

    @property
    def external_id(self):
        """Gets the external_id of this Membership.

        Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.

        :return: The external_id of this Membership.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this Membership.

        Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: `a-zA-Z0-9*` If this Membership represents a Kubernetes cluster, this value should be set to the UID of the `kube-system` namespace object.

        :param external_id: The external_id of this Membership.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def labels(self):
        """Gets the labels of this Membership.

        Optional. Labels for this membership.

        :return: The labels of this Membership.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Membership.

        Optional. Labels for this membership.

        :param labels: The labels of this Membership.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def last_connection_time(self):
        """Gets the last_connection_time of this Membership.

        Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.

        :return: The last_connection_time of this Membership.
        :rtype: str
        """
        return self._last_connection_time

    @last_connection_time.setter
    def last_connection_time(self, last_connection_time):
        """Sets the last_connection_time of this Membership.

        Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.

        :param last_connection_time: The last_connection_time of this Membership.
        :type last_connection_time: str
        """

        self._last_connection_time = last_connection_time

    @property
    def monitoring_config(self):
        """Gets the monitoring_config of this Membership.


        :return: The monitoring_config of this Membership.
        :rtype: MonitoringConfig
        """
        return self._monitoring_config

    @monitoring_config.setter
    def monitoring_config(self, monitoring_config):
        """Sets the monitoring_config of this Membership.


        :param monitoring_config: The monitoring_config of this Membership.
        :type monitoring_config: MonitoringConfig
        """

        self._monitoring_config = monitoring_config

    @property
    def name(self):
        """Gets the name of this Membership.

        Output only. The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.

        :return: The name of this Membership.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Membership.

        Output only. The full, unique name of this Membership resource in the format `projects/*/locations/*/memberships/{membership_id}`, set during creation. `membership_id` must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or `-` 3. It must start and end with an alphanumeric character Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`, with a maximum length of 63 characters.

        :param name: The name of this Membership.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Membership.


        :return: The state of this Membership.
        :rtype: MembershipState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Membership.


        :param state: The state of this Membership.
        :type state: MembershipState
        """

        self._state = state

    @property
    def unique_id(self):
        """Gets the unique_id of this Membership.

        Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.

        :return: The unique_id of this Membership.
        :rtype: str
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Membership.

        Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.

        :param unique_id: The unique_id of this Membership.
        :type unique_id: str
        """

        self._unique_id = unique_id

    @property
    def update_time(self):
        """Gets the update_time of this Membership.

        Output only. When the Membership was last updated.

        :return: The update_time of this Membership.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Membership.

        Output only. When the Membership was last updated.

        :param update_time: The update_time of this Membership.
        :type update_time: str
        """

        self._update_time = update_time
