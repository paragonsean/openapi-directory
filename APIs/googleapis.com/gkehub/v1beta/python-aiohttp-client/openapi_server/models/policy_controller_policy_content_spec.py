# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_controller_bundle_install_spec import PolicyControllerBundleInstallSpec
from openapi_server.models.policy_controller_template_library_config import PolicyControllerTemplateLibraryConfig
from openapi_server import util


class PolicyControllerPolicyContentSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bundles: Dict[str, PolicyControllerBundleInstallSpec]=None, template_library: PolicyControllerTemplateLibraryConfig=None):
        """PolicyControllerPolicyContentSpec - a model defined in OpenAPI

        :param bundles: The bundles of this PolicyControllerPolicyContentSpec.
        :param template_library: The template_library of this PolicyControllerPolicyContentSpec.
        """
        self.openapi_types = {
            'bundles': Dict[str, PolicyControllerBundleInstallSpec],
            'template_library': PolicyControllerTemplateLibraryConfig
        }

        self.attribute_map = {
            'bundles': 'bundles',
            'template_library': 'templateLibrary'
        }

        self._bundles = bundles
        self._template_library = template_library

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerPolicyContentSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerPolicyContentSpec of this PolicyControllerPolicyContentSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bundles(self):
        """Gets the bundles of this PolicyControllerPolicyContentSpec.

        map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.

        :return: The bundles of this PolicyControllerPolicyContentSpec.
        :rtype: Dict[str, PolicyControllerBundleInstallSpec]
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this PolicyControllerPolicyContentSpec.

        map of bundle name to BundleInstallSpec. The bundle name maps to the `bundleName` key in the `policycontroller.gke.io/constraintData` annotation on a constraint.

        :param bundles: The bundles of this PolicyControllerPolicyContentSpec.
        :type bundles: Dict[str, PolicyControllerBundleInstallSpec]
        """

        self._bundles = bundles

    @property
    def template_library(self):
        """Gets the template_library of this PolicyControllerPolicyContentSpec.


        :return: The template_library of this PolicyControllerPolicyContentSpec.
        :rtype: PolicyControllerTemplateLibraryConfig
        """
        return self._template_library

    @template_library.setter
    def template_library(self, template_library):
        """Sets the template_library of this PolicyControllerPolicyContentSpec.


        :param template_library: The template_library of this PolicyControllerPolicyContentSpec.
        :type template_library: PolicyControllerTemplateLibraryConfig
        """

        self._template_library = template_library
