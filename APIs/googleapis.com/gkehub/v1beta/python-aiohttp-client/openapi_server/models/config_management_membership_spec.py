# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_binauthz_config import ConfigManagementBinauthzConfig
from openapi_server.models.config_management_config_sync import ConfigManagementConfigSync
from openapi_server.models.config_management_hierarchy_controller_config import ConfigManagementHierarchyControllerConfig
from openapi_server.models.config_management_policy_controller import ConfigManagementPolicyController
from openapi_server import util


class ConfigManagementMembershipSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, binauthz: ConfigManagementBinauthzConfig=None, cluster: str=None, config_sync: ConfigManagementConfigSync=None, hierarchy_controller: ConfigManagementHierarchyControllerConfig=None, management: str=None, policy_controller: ConfigManagementPolicyController=None, version: str=None):
        """ConfigManagementMembershipSpec - a model defined in OpenAPI

        :param binauthz: The binauthz of this ConfigManagementMembershipSpec.
        :param cluster: The cluster of this ConfigManagementMembershipSpec.
        :param config_sync: The config_sync of this ConfigManagementMembershipSpec.
        :param hierarchy_controller: The hierarchy_controller of this ConfigManagementMembershipSpec.
        :param management: The management of this ConfigManagementMembershipSpec.
        :param policy_controller: The policy_controller of this ConfigManagementMembershipSpec.
        :param version: The version of this ConfigManagementMembershipSpec.
        """
        self.openapi_types = {
            'binauthz': ConfigManagementBinauthzConfig,
            'cluster': str,
            'config_sync': ConfigManagementConfigSync,
            'hierarchy_controller': ConfigManagementHierarchyControllerConfig,
            'management': str,
            'policy_controller': ConfigManagementPolicyController,
            'version': str
        }

        self.attribute_map = {
            'binauthz': 'binauthz',
            'cluster': 'cluster',
            'config_sync': 'configSync',
            'hierarchy_controller': 'hierarchyController',
            'management': 'management',
            'policy_controller': 'policyController',
            'version': 'version'
        }

        self._binauthz = binauthz
        self._cluster = cluster
        self._config_sync = config_sync
        self._hierarchy_controller = hierarchy_controller
        self._management = management
        self._policy_controller = policy_controller
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementMembershipSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementMembershipSpec of this ConfigManagementMembershipSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def binauthz(self):
        """Gets the binauthz of this ConfigManagementMembershipSpec.


        :return: The binauthz of this ConfigManagementMembershipSpec.
        :rtype: ConfigManagementBinauthzConfig
        """
        return self._binauthz

    @binauthz.setter
    def binauthz(self, binauthz):
        """Sets the binauthz of this ConfigManagementMembershipSpec.


        :param binauthz: The binauthz of this ConfigManagementMembershipSpec.
        :type binauthz: ConfigManagementBinauthzConfig
        """

        self._binauthz = binauthz

    @property
    def cluster(self):
        """Gets the cluster of this ConfigManagementMembershipSpec.

        The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.

        :return: The cluster of this ConfigManagementMembershipSpec.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this ConfigManagementMembershipSpec.

        The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.

        :param cluster: The cluster of this ConfigManagementMembershipSpec.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def config_sync(self):
        """Gets the config_sync of this ConfigManagementMembershipSpec.


        :return: The config_sync of this ConfigManagementMembershipSpec.
        :rtype: ConfigManagementConfigSync
        """
        return self._config_sync

    @config_sync.setter
    def config_sync(self, config_sync):
        """Sets the config_sync of this ConfigManagementMembershipSpec.


        :param config_sync: The config_sync of this ConfigManagementMembershipSpec.
        :type config_sync: ConfigManagementConfigSync
        """

        self._config_sync = config_sync

    @property
    def hierarchy_controller(self):
        """Gets the hierarchy_controller of this ConfigManagementMembershipSpec.


        :return: The hierarchy_controller of this ConfigManagementMembershipSpec.
        :rtype: ConfigManagementHierarchyControllerConfig
        """
        return self._hierarchy_controller

    @hierarchy_controller.setter
    def hierarchy_controller(self, hierarchy_controller):
        """Sets the hierarchy_controller of this ConfigManagementMembershipSpec.


        :param hierarchy_controller: The hierarchy_controller of this ConfigManagementMembershipSpec.
        :type hierarchy_controller: ConfigManagementHierarchyControllerConfig
        """

        self._hierarchy_controller = hierarchy_controller

    @property
    def management(self):
        """Gets the management of this ConfigManagementMembershipSpec.

        Enables automatic Feature management.

        :return: The management of this ConfigManagementMembershipSpec.
        :rtype: str
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this ConfigManagementMembershipSpec.

        Enables automatic Feature management.

        :param management: The management of this ConfigManagementMembershipSpec.
        :type management: str
        """
        allowed_values = ["MANAGEMENT_UNSPECIFIED", "MANAGEMENT_AUTOMATIC", "MANAGEMENT_MANUAL"]  # noqa: E501
        if management not in allowed_values:
            raise ValueError(
                "Invalid value for `management` ({0}), must be one of {1}"
                .format(management, allowed_values)
            )

        self._management = management

    @property
    def policy_controller(self):
        """Gets the policy_controller of this ConfigManagementMembershipSpec.


        :return: The policy_controller of this ConfigManagementMembershipSpec.
        :rtype: ConfigManagementPolicyController
        """
        return self._policy_controller

    @policy_controller.setter
    def policy_controller(self, policy_controller):
        """Sets the policy_controller of this ConfigManagementMembershipSpec.


        :param policy_controller: The policy_controller of this ConfigManagementMembershipSpec.
        :type policy_controller: ConfigManagementPolicyController
        """

        self._policy_controller = policy_controller

    @property
    def version(self):
        """Gets the version of this ConfigManagementMembershipSpec.

        Version of ACM installed.

        :return: The version of this ConfigManagementMembershipSpec.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigManagementMembershipSpec.

        Version of ACM installed.

        :param version: The version of this ConfigManagementMembershipSpec.
        :type version: str
        """

        self._version = version
