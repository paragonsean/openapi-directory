# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_binauthz_version import ConfigManagementBinauthzVersion
from openapi_server import util


class ConfigManagementBinauthzState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version: ConfigManagementBinauthzVersion=None, webhook: str=None):
        """ConfigManagementBinauthzState - a model defined in OpenAPI

        :param version: The version of this ConfigManagementBinauthzState.
        :param webhook: The webhook of this ConfigManagementBinauthzState.
        """
        self.openapi_types = {
            'version': ConfigManagementBinauthzVersion,
            'webhook': str
        }

        self.attribute_map = {
            'version': 'version',
            'webhook': 'webhook'
        }

        self._version = version
        self._webhook = webhook

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementBinauthzState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementBinauthzState of this ConfigManagementBinauthzState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version(self):
        """Gets the version of this ConfigManagementBinauthzState.


        :return: The version of this ConfigManagementBinauthzState.
        :rtype: ConfigManagementBinauthzVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigManagementBinauthzState.


        :param version: The version of this ConfigManagementBinauthzState.
        :type version: ConfigManagementBinauthzVersion
        """

        self._version = version

    @property
    def webhook(self):
        """Gets the webhook of this ConfigManagementBinauthzState.

        The state of the binauthz webhook.

        :return: The webhook of this ConfigManagementBinauthzState.
        :rtype: str
        """
        return self._webhook

    @webhook.setter
    def webhook(self, webhook):
        """Sets the webhook of this ConfigManagementBinauthzState.

        The state of the binauthz webhook.

        :param webhook: The webhook of this ConfigManagementBinauthzState.
        :type webhook: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if webhook not in allowed_values:
            raise ValueError(
                "Invalid value for `webhook` ({0}), must be one of {1}"
                .format(webhook, allowed_values)
            )

        self._webhook = webhook
