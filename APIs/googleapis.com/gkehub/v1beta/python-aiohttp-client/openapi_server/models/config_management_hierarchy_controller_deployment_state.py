# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementHierarchyControllerDeploymentState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extension: str=None, hnc: str=None):
        """ConfigManagementHierarchyControllerDeploymentState - a model defined in OpenAPI

        :param extension: The extension of this ConfigManagementHierarchyControllerDeploymentState.
        :param hnc: The hnc of this ConfigManagementHierarchyControllerDeploymentState.
        """
        self.openapi_types = {
            'extension': str,
            'hnc': str
        }

        self.attribute_map = {
            'extension': 'extension',
            'hnc': 'hnc'
        }

        self._extension = extension
        self._hnc = hnc

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementHierarchyControllerDeploymentState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementHierarchyControllerDeploymentState of this ConfigManagementHierarchyControllerDeploymentState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extension(self):
        """Gets the extension of this ConfigManagementHierarchyControllerDeploymentState.

        The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)

        :return: The extension of this ConfigManagementHierarchyControllerDeploymentState.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this ConfigManagementHierarchyControllerDeploymentState.

        The deployment state for Hierarchy Controller extension (e.g. v0.7.0-hc.1)

        :param extension: The extension of this ConfigManagementHierarchyControllerDeploymentState.
        :type extension: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if extension not in allowed_values:
            raise ValueError(
                "Invalid value for `extension` ({0}), must be one of {1}"
                .format(extension, allowed_values)
            )

        self._extension = extension

    @property
    def hnc(self):
        """Gets the hnc of this ConfigManagementHierarchyControllerDeploymentState.

        The deployment state for open source HNC (e.g. v0.7.0-hc.0)

        :return: The hnc of this ConfigManagementHierarchyControllerDeploymentState.
        :rtype: str
        """
        return self._hnc

    @hnc.setter
    def hnc(self, hnc):
        """Sets the hnc of this ConfigManagementHierarchyControllerDeploymentState.

        The deployment state for open source HNC (e.g. v0.7.0-hc.0)

        :param hnc: The hnc of this ConfigManagementHierarchyControllerDeploymentState.
        :type hnc: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if hnc not in allowed_values:
            raise ValueError(
                "Invalid value for `hnc` ({0}), must be one of {1}"
                .format(hnc, allowed_values)
            )

        self._hnc = hnc
