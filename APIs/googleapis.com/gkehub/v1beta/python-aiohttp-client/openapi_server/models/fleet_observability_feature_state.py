# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fleet_observability_fleet_observability_logging_state import FleetObservabilityFleetObservabilityLoggingState
from openapi_server.models.fleet_observability_fleet_observability_monitoring_state import FleetObservabilityFleetObservabilityMonitoringState
from openapi_server import util


class FleetObservabilityFeatureState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logging: FleetObservabilityFleetObservabilityLoggingState=None, monitoring: FleetObservabilityFleetObservabilityMonitoringState=None):
        """FleetObservabilityFeatureState - a model defined in OpenAPI

        :param logging: The logging of this FleetObservabilityFeatureState.
        :param monitoring: The monitoring of this FleetObservabilityFeatureState.
        """
        self.openapi_types = {
            'logging': FleetObservabilityFleetObservabilityLoggingState,
            'monitoring': FleetObservabilityFleetObservabilityMonitoringState
        }

        self.attribute_map = {
            'logging': 'logging',
            'monitoring': 'monitoring'
        }

        self._logging = logging
        self._monitoring = monitoring

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FleetObservabilityFeatureState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FleetObservabilityFeatureState of this FleetObservabilityFeatureState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logging(self):
        """Gets the logging of this FleetObservabilityFeatureState.


        :return: The logging of this FleetObservabilityFeatureState.
        :rtype: FleetObservabilityFleetObservabilityLoggingState
        """
        return self._logging

    @logging.setter
    def logging(self, logging):
        """Sets the logging of this FleetObservabilityFeatureState.


        :param logging: The logging of this FleetObservabilityFeatureState.
        :type logging: FleetObservabilityFleetObservabilityLoggingState
        """

        self._logging = logging

    @property
    def monitoring(self):
        """Gets the monitoring of this FleetObservabilityFeatureState.


        :return: The monitoring of this FleetObservabilityFeatureState.
        :rtype: FleetObservabilityFleetObservabilityMonitoringState
        """
        return self._monitoring

    @monitoring.setter
    def monitoring(self, monitoring):
        """Sets the monitoring of this FleetObservabilityFeatureState.


        :param monitoring: The monitoring of this FleetObservabilityFeatureState.
        :type monitoring: FleetObservabilityFleetObservabilityMonitoringState
        """

        self._monitoring = monitoring
