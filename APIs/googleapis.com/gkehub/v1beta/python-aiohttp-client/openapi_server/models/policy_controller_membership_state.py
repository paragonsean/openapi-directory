# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_controller_on_cluster_state import PolicyControllerOnClusterState
from openapi_server.models.policy_controller_policy_content_state import PolicyControllerPolicyContentState
from openapi_server import util


class PolicyControllerMembershipState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_states: Dict[str, PolicyControllerOnClusterState]=None, policy_content_state: PolicyControllerPolicyContentState=None, state: str=None):
        """PolicyControllerMembershipState - a model defined in OpenAPI

        :param component_states: The component_states of this PolicyControllerMembershipState.
        :param policy_content_state: The policy_content_state of this PolicyControllerMembershipState.
        :param state: The state of this PolicyControllerMembershipState.
        """
        self.openapi_types = {
            'component_states': Dict[str, PolicyControllerOnClusterState],
            'policy_content_state': PolicyControllerPolicyContentState,
            'state': str
        }

        self.attribute_map = {
            'component_states': 'componentStates',
            'policy_content_state': 'policyContentState',
            'state': 'state'
        }

        self._component_states = component_states
        self._policy_content_state = policy_content_state
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerMembershipState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerMembershipState of this PolicyControllerMembershipState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_states(self):
        """Gets the component_states of this PolicyControllerMembershipState.

        Currently these include (also serving as map keys): 1. \"admission\" 2. \"audit\" 3. \"mutation\"

        :return: The component_states of this PolicyControllerMembershipState.
        :rtype: Dict[str, PolicyControllerOnClusterState]
        """
        return self._component_states

    @component_states.setter
    def component_states(self, component_states):
        """Sets the component_states of this PolicyControllerMembershipState.

        Currently these include (also serving as map keys): 1. \"admission\" 2. \"audit\" 3. \"mutation\"

        :param component_states: The component_states of this PolicyControllerMembershipState.
        :type component_states: Dict[str, PolicyControllerOnClusterState]
        """

        self._component_states = component_states

    @property
    def policy_content_state(self):
        """Gets the policy_content_state of this PolicyControllerMembershipState.


        :return: The policy_content_state of this PolicyControllerMembershipState.
        :rtype: PolicyControllerPolicyContentState
        """
        return self._policy_content_state

    @policy_content_state.setter
    def policy_content_state(self, policy_content_state):
        """Sets the policy_content_state of this PolicyControllerMembershipState.


        :param policy_content_state: The policy_content_state of this PolicyControllerMembershipState.
        :type policy_content_state: PolicyControllerPolicyContentState
        """

        self._policy_content_state = policy_content_state

    @property
    def state(self):
        """Gets the state of this PolicyControllerMembershipState.

        The overall Policy Controller lifecycle state observed by the Hub Feature controller.

        :return: The state of this PolicyControllerMembershipState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PolicyControllerMembershipState.

        The overall Policy Controller lifecycle state observed by the Hub Feature controller.

        :param state: The state of this PolicyControllerMembershipState.
        :type state: str
        """
        allowed_values = ["LIFECYCLE_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLING", "ACTIVE", "UPDATING", "DECOMMISSIONING", "CLUSTER_ERROR", "HUB_ERROR", "SUSPENDED", "DETACHED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
