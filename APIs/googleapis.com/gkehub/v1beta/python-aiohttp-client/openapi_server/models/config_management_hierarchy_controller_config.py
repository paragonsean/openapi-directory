# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementHierarchyControllerConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_hierarchical_resource_quota: bool=None, enable_pod_tree_labels: bool=None, enabled: bool=None):
        """ConfigManagementHierarchyControllerConfig - a model defined in OpenAPI

        :param enable_hierarchical_resource_quota: The enable_hierarchical_resource_quota of this ConfigManagementHierarchyControllerConfig.
        :param enable_pod_tree_labels: The enable_pod_tree_labels of this ConfigManagementHierarchyControllerConfig.
        :param enabled: The enabled of this ConfigManagementHierarchyControllerConfig.
        """
        self.openapi_types = {
            'enable_hierarchical_resource_quota': bool,
            'enable_pod_tree_labels': bool,
            'enabled': bool
        }

        self.attribute_map = {
            'enable_hierarchical_resource_quota': 'enableHierarchicalResourceQuota',
            'enable_pod_tree_labels': 'enablePodTreeLabels',
            'enabled': 'enabled'
        }

        self._enable_hierarchical_resource_quota = enable_hierarchical_resource_quota
        self._enable_pod_tree_labels = enable_pod_tree_labels
        self._enabled = enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementHierarchyControllerConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementHierarchyControllerConfig of this ConfigManagementHierarchyControllerConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_hierarchical_resource_quota(self):
        """Gets the enable_hierarchical_resource_quota of this ConfigManagementHierarchyControllerConfig.

        Whether hierarchical resource quota is enabled in this cluster.

        :return: The enable_hierarchical_resource_quota of this ConfigManagementHierarchyControllerConfig.
        :rtype: bool
        """
        return self._enable_hierarchical_resource_quota

    @enable_hierarchical_resource_quota.setter
    def enable_hierarchical_resource_quota(self, enable_hierarchical_resource_quota):
        """Sets the enable_hierarchical_resource_quota of this ConfigManagementHierarchyControllerConfig.

        Whether hierarchical resource quota is enabled in this cluster.

        :param enable_hierarchical_resource_quota: The enable_hierarchical_resource_quota of this ConfigManagementHierarchyControllerConfig.
        :type enable_hierarchical_resource_quota: bool
        """

        self._enable_hierarchical_resource_quota = enable_hierarchical_resource_quota

    @property
    def enable_pod_tree_labels(self):
        """Gets the enable_pod_tree_labels of this ConfigManagementHierarchyControllerConfig.

        Whether pod tree labels are enabled in this cluster.

        :return: The enable_pod_tree_labels of this ConfigManagementHierarchyControllerConfig.
        :rtype: bool
        """
        return self._enable_pod_tree_labels

    @enable_pod_tree_labels.setter
    def enable_pod_tree_labels(self, enable_pod_tree_labels):
        """Sets the enable_pod_tree_labels of this ConfigManagementHierarchyControllerConfig.

        Whether pod tree labels are enabled in this cluster.

        :param enable_pod_tree_labels: The enable_pod_tree_labels of this ConfigManagementHierarchyControllerConfig.
        :type enable_pod_tree_labels: bool
        """

        self._enable_pod_tree_labels = enable_pod_tree_labels

    @property
    def enabled(self):
        """Gets the enabled of this ConfigManagementHierarchyControllerConfig.

        Whether Hierarchy Controller is enabled in this cluster.

        :return: The enabled of this ConfigManagementHierarchyControllerConfig.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConfigManagementHierarchyControllerConfig.

        Whether Hierarchy Controller is enabled in this cluster.

        :param enabled: The enabled of this ConfigManagementHierarchyControllerConfig.
        :type enabled: bool
        """

        self._enabled = enabled
