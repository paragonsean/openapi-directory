# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MultiClusterIngressFeatureSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing: str=None, config_membership: str=None):
        """MultiClusterIngressFeatureSpec - a model defined in OpenAPI

        :param billing: The billing of this MultiClusterIngressFeatureSpec.
        :param config_membership: The config_membership of this MultiClusterIngressFeatureSpec.
        """
        self.openapi_types = {
            'billing': str,
            'config_membership': str
        }

        self.attribute_map = {
            'billing': 'billing',
            'config_membership': 'configMembership'
        }

        self._billing = billing
        self._config_membership = config_membership

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MultiClusterIngressFeatureSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MultiClusterIngressFeatureSpec of this MultiClusterIngressFeatureSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing(self):
        """Gets the billing of this MultiClusterIngressFeatureSpec.

        Deprecated: This field will be ignored and should not be set. Customer's billing structure.

        :return: The billing of this MultiClusterIngressFeatureSpec.
        :rtype: str
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this MultiClusterIngressFeatureSpec.

        Deprecated: This field will be ignored and should not be set. Customer's billing structure.

        :param billing: The billing of this MultiClusterIngressFeatureSpec.
        :type billing: str
        """
        allowed_values = ["BILLING_UNSPECIFIED", "PAY_AS_YOU_GO", "ANTHOS_LICENSE"]  # noqa: E501
        if billing not in allowed_values:
            raise ValueError(
                "Invalid value for `billing` ({0}), must be one of {1}"
                .format(billing, allowed_values)
            )

        self._billing = billing

    @property
    def config_membership(self):
        """Gets the config_membership of this MultiClusterIngressFeatureSpec.

        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`

        :return: The config_membership of this MultiClusterIngressFeatureSpec.
        :rtype: str
        """
        return self._config_membership

    @config_membership.setter
    def config_membership(self, config_membership):
        """Sets the config_membership of this MultiClusterIngressFeatureSpec.

        Fully-qualified Membership name which hosts the MultiClusterIngress CRD. Example: `projects/foo-proj/locations/global/memberships/bar`

        :param config_membership: The config_membership of this MultiClusterIngressFeatureSpec.
        :type config_membership: str
        """

        self._config_membership = config_membership
