# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementOciConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcp_service_account_email: str=None, policy_dir: str=None, secret_type: str=None, sync_repo: str=None, sync_wait_secs: str=None):
        """ConfigManagementOciConfig - a model defined in OpenAPI

        :param gcp_service_account_email: The gcp_service_account_email of this ConfigManagementOciConfig.
        :param policy_dir: The policy_dir of this ConfigManagementOciConfig.
        :param secret_type: The secret_type of this ConfigManagementOciConfig.
        :param sync_repo: The sync_repo of this ConfigManagementOciConfig.
        :param sync_wait_secs: The sync_wait_secs of this ConfigManagementOciConfig.
        """
        self.openapi_types = {
            'gcp_service_account_email': str,
            'policy_dir': str,
            'secret_type': str,
            'sync_repo': str,
            'sync_wait_secs': str
        }

        self.attribute_map = {
            'gcp_service_account_email': 'gcpServiceAccountEmail',
            'policy_dir': 'policyDir',
            'secret_type': 'secretType',
            'sync_repo': 'syncRepo',
            'sync_wait_secs': 'syncWaitSecs'
        }

        self._gcp_service_account_email = gcp_service_account_email
        self._policy_dir = policy_dir
        self._secret_type = secret_type
        self._sync_repo = sync_repo
        self._sync_wait_secs = sync_wait_secs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementOciConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementOciConfig of this ConfigManagementOciConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcp_service_account_email(self):
        """Gets the gcp_service_account_email of this ConfigManagementOciConfig.

        The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.

        :return: The gcp_service_account_email of this ConfigManagementOciConfig.
        :rtype: str
        """
        return self._gcp_service_account_email

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, gcp_service_account_email):
        """Sets the gcp_service_account_email of this ConfigManagementOciConfig.

        The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.

        :param gcp_service_account_email: The gcp_service_account_email of this ConfigManagementOciConfig.
        :type gcp_service_account_email: str
        """

        self._gcp_service_account_email = gcp_service_account_email

    @property
    def policy_dir(self):
        """Gets the policy_dir of this ConfigManagementOciConfig.

        The absolute path of the directory that contains the local resources. Default: the root directory of the image.

        :return: The policy_dir of this ConfigManagementOciConfig.
        :rtype: str
        """
        return self._policy_dir

    @policy_dir.setter
    def policy_dir(self, policy_dir):
        """Sets the policy_dir of this ConfigManagementOciConfig.

        The absolute path of the directory that contains the local resources. Default: the root directory of the image.

        :param policy_dir: The policy_dir of this ConfigManagementOciConfig.
        :type policy_dir: str
        """

        self._policy_dir = policy_dir

    @property
    def secret_type(self):
        """Gets the secret_type of this ConfigManagementOciConfig.

        Type of secret configured for access to the Git repo.

        :return: The secret_type of this ConfigManagementOciConfig.
        :rtype: str
        """
        return self._secret_type

    @secret_type.setter
    def secret_type(self, secret_type):
        """Sets the secret_type of this ConfigManagementOciConfig.

        Type of secret configured for access to the Git repo.

        :param secret_type: The secret_type of this ConfigManagementOciConfig.
        :type secret_type: str
        """

        self._secret_type = secret_type

    @property
    def sync_repo(self):
        """Gets the sync_repo of this ConfigManagementOciConfig.

        The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.

        :return: The sync_repo of this ConfigManagementOciConfig.
        :rtype: str
        """
        return self._sync_repo

    @sync_repo.setter
    def sync_repo(self, sync_repo):
        """Sets the sync_repo of this ConfigManagementOciConfig.

        The OCI image repository URL for the package to sync from. e.g. `LOCATION-docker.pkg.dev/PROJECT_ID/REPOSITORY_NAME/PACKAGE_NAME`.

        :param sync_repo: The sync_repo of this ConfigManagementOciConfig.
        :type sync_repo: str
        """

        self._sync_repo = sync_repo

    @property
    def sync_wait_secs(self):
        """Gets the sync_wait_secs of this ConfigManagementOciConfig.

        Period in seconds between consecutive syncs. Default: 15.

        :return: The sync_wait_secs of this ConfigManagementOciConfig.
        :rtype: str
        """
        return self._sync_wait_secs

    @sync_wait_secs.setter
    def sync_wait_secs(self, sync_wait_secs):
        """Sets the sync_wait_secs of this ConfigManagementOciConfig.

        Period in seconds between consecutive syncs. Default: 15.

        :param sync_wait_secs: The sync_wait_secs of this ConfigManagementOciConfig.
        :type sync_wait_secs: str
        """

        self._sync_wait_secs = sync_wait_secs
