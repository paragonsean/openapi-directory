# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.fleet_observability_logging_config import FleetObservabilityLoggingConfig
from openapi_server import util


class FleetObservabilityFeatureSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, logging_config: FleetObservabilityLoggingConfig=None):
        """FleetObservabilityFeatureSpec - a model defined in OpenAPI

        :param logging_config: The logging_config of this FleetObservabilityFeatureSpec.
        """
        self.openapi_types = {
            'logging_config': FleetObservabilityLoggingConfig
        }

        self.attribute_map = {
            'logging_config': 'loggingConfig'
        }

        self._logging_config = logging_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FleetObservabilityFeatureSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FleetObservabilityFeatureSpec of this FleetObservabilityFeatureSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def logging_config(self):
        """Gets the logging_config of this FleetObservabilityFeatureSpec.


        :return: The logging_config of this FleetObservabilityFeatureSpec.
        :rtype: FleetObservabilityLoggingConfig
        """
        return self._logging_config

    @logging_config.setter
    def logging_config(self, logging_config):
        """Sets the logging_config of this FleetObservabilityFeatureSpec.


        :param logging_config: The logging_config of this FleetObservabilityFeatureSpec.
        :type logging_config: FleetObservabilityLoggingConfig
        """

        self._logging_config = logging_config
