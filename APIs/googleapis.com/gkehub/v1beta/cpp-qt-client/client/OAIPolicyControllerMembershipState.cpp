/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyControllerMembershipState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyControllerMembershipState::OAIPolicyControllerMembershipState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyControllerMembershipState::OAIPolicyControllerMembershipState() {
    this->initializeModel();
}

OAIPolicyControllerMembershipState::~OAIPolicyControllerMembershipState() {}

void OAIPolicyControllerMembershipState::initializeModel() {

    m_component_states_isSet = false;
    m_component_states_isValid = false;

    m_policy_content_state_isSet = false;
    m_policy_content_state_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIPolicyControllerMembershipState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyControllerMembershipState::fromJsonObject(QJsonObject json) {

    m_component_states_isValid = ::OpenAPI::fromJsonValue(m_component_states, json[QString("componentStates")]);
    m_component_states_isSet = !json[QString("componentStates")].isNull() && m_component_states_isValid;

    m_policy_content_state_isValid = ::OpenAPI::fromJsonValue(m_policy_content_state, json[QString("policyContentState")]);
    m_policy_content_state_isSet = !json[QString("policyContentState")].isNull() && m_policy_content_state_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIPolicyControllerMembershipState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyControllerMembershipState::asJsonObject() const {
    QJsonObject obj;
    if (m_component_states.size() > 0) {
        obj.insert(QString("componentStates"), ::OpenAPI::toJsonValue(m_component_states));
    }
    if (m_policy_content_state.isSet()) {
        obj.insert(QString("policyContentState"), ::OpenAPI::toJsonValue(m_policy_content_state));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QMap<QString, OAIPolicyControllerOnClusterState> OAIPolicyControllerMembershipState::getComponentStates() const {
    return m_component_states;
}
void OAIPolicyControllerMembershipState::setComponentStates(const QMap<QString, OAIPolicyControllerOnClusterState> &component_states) {
    m_component_states = component_states;
    m_component_states_isSet = true;
}

bool OAIPolicyControllerMembershipState::is_component_states_Set() const{
    return m_component_states_isSet;
}

bool OAIPolicyControllerMembershipState::is_component_states_Valid() const{
    return m_component_states_isValid;
}

OAIPolicyControllerPolicyContentState OAIPolicyControllerMembershipState::getPolicyContentState() const {
    return m_policy_content_state;
}
void OAIPolicyControllerMembershipState::setPolicyContentState(const OAIPolicyControllerPolicyContentState &policy_content_state) {
    m_policy_content_state = policy_content_state;
    m_policy_content_state_isSet = true;
}

bool OAIPolicyControllerMembershipState::is_policy_content_state_Set() const{
    return m_policy_content_state_isSet;
}

bool OAIPolicyControllerMembershipState::is_policy_content_state_Valid() const{
    return m_policy_content_state_isValid;
}

QString OAIPolicyControllerMembershipState::getState() const {
    return m_state;
}
void OAIPolicyControllerMembershipState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPolicyControllerMembershipState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPolicyControllerMembershipState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIPolicyControllerMembershipState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_component_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_content_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyControllerMembershipState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
