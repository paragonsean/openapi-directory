/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradeGKEUpgradeFeatureCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradeGKEUpgradeFeatureCondition::OAIClusterUpgradeGKEUpgradeFeatureCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradeGKEUpgradeFeatureCondition::OAIClusterUpgradeGKEUpgradeFeatureCondition() {
    this->initializeModel();
}

OAIClusterUpgradeGKEUpgradeFeatureCondition::~OAIClusterUpgradeGKEUpgradeFeatureCondition() {}

void OAIClusterUpgradeGKEUpgradeFeatureCondition::initializeModel() {

    m_reason_isSet = false;
    m_reason_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIClusterUpgradeGKEUpgradeFeatureCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradeGKEUpgradeFeatureCondition::fromJsonObject(QJsonObject json) {

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIClusterUpgradeGKEUpgradeFeatureCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradeGKEUpgradeFeatureCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIClusterUpgradeGKEUpgradeFeatureCondition::getReason() const {
    return m_reason;
}
void OAIClusterUpgradeGKEUpgradeFeatureCondition::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_reason_Valid() const{
    return m_reason_isValid;
}

QString OAIClusterUpgradeGKEUpgradeFeatureCondition::getStatus() const {
    return m_status;
}
void OAIClusterUpgradeGKEUpgradeFeatureCondition::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_status_Set() const{
    return m_status_isSet;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIClusterUpgradeGKEUpgradeFeatureCondition::getType() const {
    return m_type;
}
void OAIClusterUpgradeGKEUpgradeFeatureCondition::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_type_Set() const{
    return m_type_isSet;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIClusterUpgradeGKEUpgradeFeatureCondition::getUpdateTime() const {
    return m_update_time;
}
void OAIClusterUpgradeGKEUpgradeFeatureCondition::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradeGKEUpgradeFeatureCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
