/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceManifest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceManifest::OAIResourceManifest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceManifest::OAIResourceManifest() {
    this->initializeModel();
}

OAIResourceManifest::~OAIResourceManifest() {}

void OAIResourceManifest::initializeModel() {

    m_cluster_scoped_isSet = false;
    m_cluster_scoped_isValid = false;

    m_manifest_isSet = false;
    m_manifest_isValid = false;
}

void OAIResourceManifest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceManifest::fromJsonObject(QJsonObject json) {

    m_cluster_scoped_isValid = ::OpenAPI::fromJsonValue(m_cluster_scoped, json[QString("clusterScoped")]);
    m_cluster_scoped_isSet = !json[QString("clusterScoped")].isNull() && m_cluster_scoped_isValid;

    m_manifest_isValid = ::OpenAPI::fromJsonValue(m_manifest, json[QString("manifest")]);
    m_manifest_isSet = !json[QString("manifest")].isNull() && m_manifest_isValid;
}

QString OAIResourceManifest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceManifest::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_scoped_isSet) {
        obj.insert(QString("clusterScoped"), ::OpenAPI::toJsonValue(m_cluster_scoped));
    }
    if (m_manifest_isSet) {
        obj.insert(QString("manifest"), ::OpenAPI::toJsonValue(m_manifest));
    }
    return obj;
}

bool OAIResourceManifest::isClusterScoped() const {
    return m_cluster_scoped;
}
void OAIResourceManifest::setClusterScoped(const bool &cluster_scoped) {
    m_cluster_scoped = cluster_scoped;
    m_cluster_scoped_isSet = true;
}

bool OAIResourceManifest::is_cluster_scoped_Set() const{
    return m_cluster_scoped_isSet;
}

bool OAIResourceManifest::is_cluster_scoped_Valid() const{
    return m_cluster_scoped_isValid;
}

QString OAIResourceManifest::getManifest() const {
    return m_manifest;
}
void OAIResourceManifest::setManifest(const QString &manifest) {
    m_manifest = manifest;
    m_manifest_isSet = true;
}

bool OAIResourceManifest::is_manifest_Set() const{
    return m_manifest_isSet;
}

bool OAIResourceManifest::is_manifest_Valid() const{
    return m_manifest_isValid;
}

bool OAIResourceManifest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_scoped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceManifest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
