/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementPolicyControllerMigration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementPolicyControllerMigration::OAIConfigManagementPolicyControllerMigration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementPolicyControllerMigration::OAIConfigManagementPolicyControllerMigration() {
    this->initializeModel();
}

OAIConfigManagementPolicyControllerMigration::~OAIConfigManagementPolicyControllerMigration() {}

void OAIConfigManagementPolicyControllerMigration::initializeModel() {

    m_copy_time_isSet = false;
    m_copy_time_isValid = false;

    m_stage_isSet = false;
    m_stage_isValid = false;
}

void OAIConfigManagementPolicyControllerMigration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementPolicyControllerMigration::fromJsonObject(QJsonObject json) {

    m_copy_time_isValid = ::OpenAPI::fromJsonValue(m_copy_time, json[QString("copyTime")]);
    m_copy_time_isSet = !json[QString("copyTime")].isNull() && m_copy_time_isValid;

    m_stage_isValid = ::OpenAPI::fromJsonValue(m_stage, json[QString("stage")]);
    m_stage_isSet = !json[QString("stage")].isNull() && m_stage_isValid;
}

QString OAIConfigManagementPolicyControllerMigration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementPolicyControllerMigration::asJsonObject() const {
    QJsonObject obj;
    if (m_copy_time_isSet) {
        obj.insert(QString("copyTime"), ::OpenAPI::toJsonValue(m_copy_time));
    }
    if (m_stage_isSet) {
        obj.insert(QString("stage"), ::OpenAPI::toJsonValue(m_stage));
    }
    return obj;
}

QString OAIConfigManagementPolicyControllerMigration::getCopyTime() const {
    return m_copy_time;
}
void OAIConfigManagementPolicyControllerMigration::setCopyTime(const QString &copy_time) {
    m_copy_time = copy_time;
    m_copy_time_isSet = true;
}

bool OAIConfigManagementPolicyControllerMigration::is_copy_time_Set() const{
    return m_copy_time_isSet;
}

bool OAIConfigManagementPolicyControllerMigration::is_copy_time_Valid() const{
    return m_copy_time_isValid;
}

QString OAIConfigManagementPolicyControllerMigration::getStage() const {
    return m_stage;
}
void OAIConfigManagementPolicyControllerMigration::setStage(const QString &stage) {
    m_stage = stage;
    m_stage_isSet = true;
}

bool OAIConfigManagementPolicyControllerMigration::is_stage_Set() const{
    return m_stage_isSet;
}

bool OAIConfigManagementPolicyControllerMigration::is_stage_Valid() const{
    return m_stage_isValid;
}

bool OAIConfigManagementPolicyControllerMigration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_copy_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stage_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementPolicyControllerMigration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
