/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyControllerPolicyContentSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyControllerPolicyContentSpec::OAIPolicyControllerPolicyContentSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyControllerPolicyContentSpec::OAIPolicyControllerPolicyContentSpec() {
    this->initializeModel();
}

OAIPolicyControllerPolicyContentSpec::~OAIPolicyControllerPolicyContentSpec() {}

void OAIPolicyControllerPolicyContentSpec::initializeModel() {

    m_bundles_isSet = false;
    m_bundles_isValid = false;

    m_template_library_isSet = false;
    m_template_library_isValid = false;
}

void OAIPolicyControllerPolicyContentSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyControllerPolicyContentSpec::fromJsonObject(QJsonObject json) {

    m_bundles_isValid = ::OpenAPI::fromJsonValue(m_bundles, json[QString("bundles")]);
    m_bundles_isSet = !json[QString("bundles")].isNull() && m_bundles_isValid;

    m_template_library_isValid = ::OpenAPI::fromJsonValue(m_template_library, json[QString("templateLibrary")]);
    m_template_library_isSet = !json[QString("templateLibrary")].isNull() && m_template_library_isValid;
}

QString OAIPolicyControllerPolicyContentSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyControllerPolicyContentSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_bundles.size() > 0) {
        obj.insert(QString("bundles"), ::OpenAPI::toJsonValue(m_bundles));
    }
    if (m_template_library.isSet()) {
        obj.insert(QString("templateLibrary"), ::OpenAPI::toJsonValue(m_template_library));
    }
    return obj;
}

QMap<QString, OAIPolicyControllerBundleInstallSpec> OAIPolicyControllerPolicyContentSpec::getBundles() const {
    return m_bundles;
}
void OAIPolicyControllerPolicyContentSpec::setBundles(const QMap<QString, OAIPolicyControllerBundleInstallSpec> &bundles) {
    m_bundles = bundles;
    m_bundles_isSet = true;
}

bool OAIPolicyControllerPolicyContentSpec::is_bundles_Set() const{
    return m_bundles_isSet;
}

bool OAIPolicyControllerPolicyContentSpec::is_bundles_Valid() const{
    return m_bundles_isValid;
}

OAIPolicyControllerTemplateLibraryConfig OAIPolicyControllerPolicyContentSpec::getTemplateLibrary() const {
    return m_template_library;
}
void OAIPolicyControllerPolicyContentSpec::setTemplateLibrary(const OAIPolicyControllerTemplateLibraryConfig &template_library) {
    m_template_library = template_library;
    m_template_library_isSet = true;
}

bool OAIPolicyControllerPolicyContentSpec::is_template_library_Set() const{
    return m_template_library_isSet;
}

bool OAIPolicyControllerPolicyContentSpec::is_template_library_Valid() const{
    return m_template_library_isValid;
}

bool OAIPolicyControllerPolicyContentSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_library.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyControllerPolicyContentSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
