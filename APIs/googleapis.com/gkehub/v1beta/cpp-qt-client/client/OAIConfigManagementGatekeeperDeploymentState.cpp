/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementGatekeeperDeploymentState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementGatekeeperDeploymentState::OAIConfigManagementGatekeeperDeploymentState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementGatekeeperDeploymentState::OAIConfigManagementGatekeeperDeploymentState() {
    this->initializeModel();
}

OAIConfigManagementGatekeeperDeploymentState::~OAIConfigManagementGatekeeperDeploymentState() {}

void OAIConfigManagementGatekeeperDeploymentState::initializeModel() {

    m_gatekeeper_audit_isSet = false;
    m_gatekeeper_audit_isValid = false;

    m_gatekeeper_controller_manager_state_isSet = false;
    m_gatekeeper_controller_manager_state_isValid = false;

    m_gatekeeper_mutation_isSet = false;
    m_gatekeeper_mutation_isValid = false;
}

void OAIConfigManagementGatekeeperDeploymentState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementGatekeeperDeploymentState::fromJsonObject(QJsonObject json) {

    m_gatekeeper_audit_isValid = ::OpenAPI::fromJsonValue(m_gatekeeper_audit, json[QString("gatekeeperAudit")]);
    m_gatekeeper_audit_isSet = !json[QString("gatekeeperAudit")].isNull() && m_gatekeeper_audit_isValid;

    m_gatekeeper_controller_manager_state_isValid = ::OpenAPI::fromJsonValue(m_gatekeeper_controller_manager_state, json[QString("gatekeeperControllerManagerState")]);
    m_gatekeeper_controller_manager_state_isSet = !json[QString("gatekeeperControllerManagerState")].isNull() && m_gatekeeper_controller_manager_state_isValid;

    m_gatekeeper_mutation_isValid = ::OpenAPI::fromJsonValue(m_gatekeeper_mutation, json[QString("gatekeeperMutation")]);
    m_gatekeeper_mutation_isSet = !json[QString("gatekeeperMutation")].isNull() && m_gatekeeper_mutation_isValid;
}

QString OAIConfigManagementGatekeeperDeploymentState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementGatekeeperDeploymentState::asJsonObject() const {
    QJsonObject obj;
    if (m_gatekeeper_audit_isSet) {
        obj.insert(QString("gatekeeperAudit"), ::OpenAPI::toJsonValue(m_gatekeeper_audit));
    }
    if (m_gatekeeper_controller_manager_state_isSet) {
        obj.insert(QString("gatekeeperControllerManagerState"), ::OpenAPI::toJsonValue(m_gatekeeper_controller_manager_state));
    }
    if (m_gatekeeper_mutation_isSet) {
        obj.insert(QString("gatekeeperMutation"), ::OpenAPI::toJsonValue(m_gatekeeper_mutation));
    }
    return obj;
}

QString OAIConfigManagementGatekeeperDeploymentState::getGatekeeperAudit() const {
    return m_gatekeeper_audit;
}
void OAIConfigManagementGatekeeperDeploymentState::setGatekeeperAudit(const QString &gatekeeper_audit) {
    m_gatekeeper_audit = gatekeeper_audit;
    m_gatekeeper_audit_isSet = true;
}

bool OAIConfigManagementGatekeeperDeploymentState::is_gatekeeper_audit_Set() const{
    return m_gatekeeper_audit_isSet;
}

bool OAIConfigManagementGatekeeperDeploymentState::is_gatekeeper_audit_Valid() const{
    return m_gatekeeper_audit_isValid;
}

QString OAIConfigManagementGatekeeperDeploymentState::getGatekeeperControllerManagerState() const {
    return m_gatekeeper_controller_manager_state;
}
void OAIConfigManagementGatekeeperDeploymentState::setGatekeeperControllerManagerState(const QString &gatekeeper_controller_manager_state) {
    m_gatekeeper_controller_manager_state = gatekeeper_controller_manager_state;
    m_gatekeeper_controller_manager_state_isSet = true;
}

bool OAIConfigManagementGatekeeperDeploymentState::is_gatekeeper_controller_manager_state_Set() const{
    return m_gatekeeper_controller_manager_state_isSet;
}

bool OAIConfigManagementGatekeeperDeploymentState::is_gatekeeper_controller_manager_state_Valid() const{
    return m_gatekeeper_controller_manager_state_isValid;
}

QString OAIConfigManagementGatekeeperDeploymentState::getGatekeeperMutation() const {
    return m_gatekeeper_mutation;
}
void OAIConfigManagementGatekeeperDeploymentState::setGatekeeperMutation(const QString &gatekeeper_mutation) {
    m_gatekeeper_mutation = gatekeeper_mutation;
    m_gatekeeper_mutation_isSet = true;
}

bool OAIConfigManagementGatekeeperDeploymentState::is_gatekeeper_mutation_Set() const{
    return m_gatekeeper_mutation_isSet;
}

bool OAIConfigManagementGatekeeperDeploymentState::is_gatekeeper_mutation_Valid() const{
    return m_gatekeeper_mutation_isValid;
}

bool OAIConfigManagementGatekeeperDeploymentState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gatekeeper_audit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gatekeeper_controller_manager_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gatekeeper_mutation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementGatekeeperDeploymentState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
