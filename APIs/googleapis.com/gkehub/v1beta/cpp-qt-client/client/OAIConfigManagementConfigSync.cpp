/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementConfigSync.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementConfigSync::OAIConfigManagementConfigSync(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementConfigSync::OAIConfigManagementConfigSync() {
    this->initializeModel();
}

OAIConfigManagementConfigSync::~OAIConfigManagementConfigSync() {}

void OAIConfigManagementConfigSync::initializeModel() {

    m_allow_vertical_scale_isSet = false;
    m_allow_vertical_scale_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_git_isSet = false;
    m_git_isValid = false;

    m_metrics_gcp_service_account_email_isSet = false;
    m_metrics_gcp_service_account_email_isValid = false;

    m_oci_isSet = false;
    m_oci_isValid = false;

    m_prevent_drift_isSet = false;
    m_prevent_drift_isValid = false;

    m_source_format_isSet = false;
    m_source_format_isValid = false;
}

void OAIConfigManagementConfigSync::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementConfigSync::fromJsonObject(QJsonObject json) {

    m_allow_vertical_scale_isValid = ::OpenAPI::fromJsonValue(m_allow_vertical_scale, json[QString("allowVerticalScale")]);
    m_allow_vertical_scale_isSet = !json[QString("allowVerticalScale")].isNull() && m_allow_vertical_scale_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_git_isValid = ::OpenAPI::fromJsonValue(m_git, json[QString("git")]);
    m_git_isSet = !json[QString("git")].isNull() && m_git_isValid;

    m_metrics_gcp_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_metrics_gcp_service_account_email, json[QString("metricsGcpServiceAccountEmail")]);
    m_metrics_gcp_service_account_email_isSet = !json[QString("metricsGcpServiceAccountEmail")].isNull() && m_metrics_gcp_service_account_email_isValid;

    m_oci_isValid = ::OpenAPI::fromJsonValue(m_oci, json[QString("oci")]);
    m_oci_isSet = !json[QString("oci")].isNull() && m_oci_isValid;

    m_prevent_drift_isValid = ::OpenAPI::fromJsonValue(m_prevent_drift, json[QString("preventDrift")]);
    m_prevent_drift_isSet = !json[QString("preventDrift")].isNull() && m_prevent_drift_isValid;

    m_source_format_isValid = ::OpenAPI::fromJsonValue(m_source_format, json[QString("sourceFormat")]);
    m_source_format_isSet = !json[QString("sourceFormat")].isNull() && m_source_format_isValid;
}

QString OAIConfigManagementConfigSync::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementConfigSync::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_vertical_scale_isSet) {
        obj.insert(QString("allowVerticalScale"), ::OpenAPI::toJsonValue(m_allow_vertical_scale));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_git.isSet()) {
        obj.insert(QString("git"), ::OpenAPI::toJsonValue(m_git));
    }
    if (m_metrics_gcp_service_account_email_isSet) {
        obj.insert(QString("metricsGcpServiceAccountEmail"), ::OpenAPI::toJsonValue(m_metrics_gcp_service_account_email));
    }
    if (m_oci.isSet()) {
        obj.insert(QString("oci"), ::OpenAPI::toJsonValue(m_oci));
    }
    if (m_prevent_drift_isSet) {
        obj.insert(QString("preventDrift"), ::OpenAPI::toJsonValue(m_prevent_drift));
    }
    if (m_source_format_isSet) {
        obj.insert(QString("sourceFormat"), ::OpenAPI::toJsonValue(m_source_format));
    }
    return obj;
}

bool OAIConfigManagementConfigSync::isAllowVerticalScale() const {
    return m_allow_vertical_scale;
}
void OAIConfigManagementConfigSync::setAllowVerticalScale(const bool &allow_vertical_scale) {
    m_allow_vertical_scale = allow_vertical_scale;
    m_allow_vertical_scale_isSet = true;
}

bool OAIConfigManagementConfigSync::is_allow_vertical_scale_Set() const{
    return m_allow_vertical_scale_isSet;
}

bool OAIConfigManagementConfigSync::is_allow_vertical_scale_Valid() const{
    return m_allow_vertical_scale_isValid;
}

bool OAIConfigManagementConfigSync::isEnabled() const {
    return m_enabled;
}
void OAIConfigManagementConfigSync::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIConfigManagementConfigSync::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIConfigManagementConfigSync::is_enabled_Valid() const{
    return m_enabled_isValid;
}

OAIConfigManagementGitConfig OAIConfigManagementConfigSync::getGit() const {
    return m_git;
}
void OAIConfigManagementConfigSync::setGit(const OAIConfigManagementGitConfig &git) {
    m_git = git;
    m_git_isSet = true;
}

bool OAIConfigManagementConfigSync::is_git_Set() const{
    return m_git_isSet;
}

bool OAIConfigManagementConfigSync::is_git_Valid() const{
    return m_git_isValid;
}

QString OAIConfigManagementConfigSync::getMetricsGcpServiceAccountEmail() const {
    return m_metrics_gcp_service_account_email;
}
void OAIConfigManagementConfigSync::setMetricsGcpServiceAccountEmail(const QString &metrics_gcp_service_account_email) {
    m_metrics_gcp_service_account_email = metrics_gcp_service_account_email;
    m_metrics_gcp_service_account_email_isSet = true;
}

bool OAIConfigManagementConfigSync::is_metrics_gcp_service_account_email_Set() const{
    return m_metrics_gcp_service_account_email_isSet;
}

bool OAIConfigManagementConfigSync::is_metrics_gcp_service_account_email_Valid() const{
    return m_metrics_gcp_service_account_email_isValid;
}

OAIConfigManagementOciConfig OAIConfigManagementConfigSync::getOci() const {
    return m_oci;
}
void OAIConfigManagementConfigSync::setOci(const OAIConfigManagementOciConfig &oci) {
    m_oci = oci;
    m_oci_isSet = true;
}

bool OAIConfigManagementConfigSync::is_oci_Set() const{
    return m_oci_isSet;
}

bool OAIConfigManagementConfigSync::is_oci_Valid() const{
    return m_oci_isValid;
}

bool OAIConfigManagementConfigSync::isPreventDrift() const {
    return m_prevent_drift;
}
void OAIConfigManagementConfigSync::setPreventDrift(const bool &prevent_drift) {
    m_prevent_drift = prevent_drift;
    m_prevent_drift_isSet = true;
}

bool OAIConfigManagementConfigSync::is_prevent_drift_Set() const{
    return m_prevent_drift_isSet;
}

bool OAIConfigManagementConfigSync::is_prevent_drift_Valid() const{
    return m_prevent_drift_isValid;
}

QString OAIConfigManagementConfigSync::getSourceFormat() const {
    return m_source_format;
}
void OAIConfigManagementConfigSync::setSourceFormat(const QString &source_format) {
    m_source_format = source_format;
    m_source_format_isSet = true;
}

bool OAIConfigManagementConfigSync::is_source_format_Set() const{
    return m_source_format_isSet;
}

bool OAIConfigManagementConfigSync::is_source_format_Valid() const{
    return m_source_format_isValid;
}

bool OAIConfigManagementConfigSync::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_vertical_scale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_git.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics_gcp_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_oci.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_prevent_drift_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_format_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementConfigSync::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
