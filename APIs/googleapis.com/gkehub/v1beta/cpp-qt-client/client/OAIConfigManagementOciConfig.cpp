/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementOciConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementOciConfig::OAIConfigManagementOciConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementOciConfig::OAIConfigManagementOciConfig() {
    this->initializeModel();
}

OAIConfigManagementOciConfig::~OAIConfigManagementOciConfig() {}

void OAIConfigManagementOciConfig::initializeModel() {

    m_gcp_service_account_email_isSet = false;
    m_gcp_service_account_email_isValid = false;

    m_policy_dir_isSet = false;
    m_policy_dir_isValid = false;

    m_secret_type_isSet = false;
    m_secret_type_isValid = false;

    m_sync_repo_isSet = false;
    m_sync_repo_isValid = false;

    m_sync_wait_secs_isSet = false;
    m_sync_wait_secs_isValid = false;
}

void OAIConfigManagementOciConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementOciConfig::fromJsonObject(QJsonObject json) {

    m_gcp_service_account_email_isValid = ::OpenAPI::fromJsonValue(m_gcp_service_account_email, json[QString("gcpServiceAccountEmail")]);
    m_gcp_service_account_email_isSet = !json[QString("gcpServiceAccountEmail")].isNull() && m_gcp_service_account_email_isValid;

    m_policy_dir_isValid = ::OpenAPI::fromJsonValue(m_policy_dir, json[QString("policyDir")]);
    m_policy_dir_isSet = !json[QString("policyDir")].isNull() && m_policy_dir_isValid;

    m_secret_type_isValid = ::OpenAPI::fromJsonValue(m_secret_type, json[QString("secretType")]);
    m_secret_type_isSet = !json[QString("secretType")].isNull() && m_secret_type_isValid;

    m_sync_repo_isValid = ::OpenAPI::fromJsonValue(m_sync_repo, json[QString("syncRepo")]);
    m_sync_repo_isSet = !json[QString("syncRepo")].isNull() && m_sync_repo_isValid;

    m_sync_wait_secs_isValid = ::OpenAPI::fromJsonValue(m_sync_wait_secs, json[QString("syncWaitSecs")]);
    m_sync_wait_secs_isSet = !json[QString("syncWaitSecs")].isNull() && m_sync_wait_secs_isValid;
}

QString OAIConfigManagementOciConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementOciConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_gcp_service_account_email_isSet) {
        obj.insert(QString("gcpServiceAccountEmail"), ::OpenAPI::toJsonValue(m_gcp_service_account_email));
    }
    if (m_policy_dir_isSet) {
        obj.insert(QString("policyDir"), ::OpenAPI::toJsonValue(m_policy_dir));
    }
    if (m_secret_type_isSet) {
        obj.insert(QString("secretType"), ::OpenAPI::toJsonValue(m_secret_type));
    }
    if (m_sync_repo_isSet) {
        obj.insert(QString("syncRepo"), ::OpenAPI::toJsonValue(m_sync_repo));
    }
    if (m_sync_wait_secs_isSet) {
        obj.insert(QString("syncWaitSecs"), ::OpenAPI::toJsonValue(m_sync_wait_secs));
    }
    return obj;
}

QString OAIConfigManagementOciConfig::getGcpServiceAccountEmail() const {
    return m_gcp_service_account_email;
}
void OAIConfigManagementOciConfig::setGcpServiceAccountEmail(const QString &gcp_service_account_email) {
    m_gcp_service_account_email = gcp_service_account_email;
    m_gcp_service_account_email_isSet = true;
}

bool OAIConfigManagementOciConfig::is_gcp_service_account_email_Set() const{
    return m_gcp_service_account_email_isSet;
}

bool OAIConfigManagementOciConfig::is_gcp_service_account_email_Valid() const{
    return m_gcp_service_account_email_isValid;
}

QString OAIConfigManagementOciConfig::getPolicyDir() const {
    return m_policy_dir;
}
void OAIConfigManagementOciConfig::setPolicyDir(const QString &policy_dir) {
    m_policy_dir = policy_dir;
    m_policy_dir_isSet = true;
}

bool OAIConfigManagementOciConfig::is_policy_dir_Set() const{
    return m_policy_dir_isSet;
}

bool OAIConfigManagementOciConfig::is_policy_dir_Valid() const{
    return m_policy_dir_isValid;
}

QString OAIConfigManagementOciConfig::getSecretType() const {
    return m_secret_type;
}
void OAIConfigManagementOciConfig::setSecretType(const QString &secret_type) {
    m_secret_type = secret_type;
    m_secret_type_isSet = true;
}

bool OAIConfigManagementOciConfig::is_secret_type_Set() const{
    return m_secret_type_isSet;
}

bool OAIConfigManagementOciConfig::is_secret_type_Valid() const{
    return m_secret_type_isValid;
}

QString OAIConfigManagementOciConfig::getSyncRepo() const {
    return m_sync_repo;
}
void OAIConfigManagementOciConfig::setSyncRepo(const QString &sync_repo) {
    m_sync_repo = sync_repo;
    m_sync_repo_isSet = true;
}

bool OAIConfigManagementOciConfig::is_sync_repo_Set() const{
    return m_sync_repo_isSet;
}

bool OAIConfigManagementOciConfig::is_sync_repo_Valid() const{
    return m_sync_repo_isValid;
}

QString OAIConfigManagementOciConfig::getSyncWaitSecs() const {
    return m_sync_wait_secs;
}
void OAIConfigManagementOciConfig::setSyncWaitSecs(const QString &sync_wait_secs) {
    m_sync_wait_secs = sync_wait_secs;
    m_sync_wait_secs_isSet = true;
}

bool OAIConfigManagementOciConfig::is_sync_wait_secs_Set() const{
    return m_sync_wait_secs_isSet;
}

bool OAIConfigManagementOciConfig::is_sync_wait_secs_Valid() const{
    return m_sync_wait_secs_isValid;
}

bool OAIConfigManagementOciConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gcp_service_account_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_dir_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_repo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_wait_secs_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementOciConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
