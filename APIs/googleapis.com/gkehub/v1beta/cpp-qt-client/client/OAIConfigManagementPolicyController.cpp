/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementPolicyController.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementPolicyController::OAIConfigManagementPolicyController(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementPolicyController::OAIConfigManagementPolicyController() {
    this->initializeModel();
}

OAIConfigManagementPolicyController::~OAIConfigManagementPolicyController() {}

void OAIConfigManagementPolicyController::initializeModel() {

    m_audit_interval_seconds_isSet = false;
    m_audit_interval_seconds_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_exemptable_namespaces_isSet = false;
    m_exemptable_namespaces_isValid = false;

    m_log_denies_enabled_isSet = false;
    m_log_denies_enabled_isValid = false;

    m_monitoring_isSet = false;
    m_monitoring_isValid = false;

    m_mutation_enabled_isSet = false;
    m_mutation_enabled_isValid = false;

    m_referential_rules_enabled_isSet = false;
    m_referential_rules_enabled_isValid = false;

    m_template_library_installed_isSet = false;
    m_template_library_installed_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIConfigManagementPolicyController::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementPolicyController::fromJsonObject(QJsonObject json) {

    m_audit_interval_seconds_isValid = ::OpenAPI::fromJsonValue(m_audit_interval_seconds, json[QString("auditIntervalSeconds")]);
    m_audit_interval_seconds_isSet = !json[QString("auditIntervalSeconds")].isNull() && m_audit_interval_seconds_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_exemptable_namespaces_isValid = ::OpenAPI::fromJsonValue(m_exemptable_namespaces, json[QString("exemptableNamespaces")]);
    m_exemptable_namespaces_isSet = !json[QString("exemptableNamespaces")].isNull() && m_exemptable_namespaces_isValid;

    m_log_denies_enabled_isValid = ::OpenAPI::fromJsonValue(m_log_denies_enabled, json[QString("logDeniesEnabled")]);
    m_log_denies_enabled_isSet = !json[QString("logDeniesEnabled")].isNull() && m_log_denies_enabled_isValid;

    m_monitoring_isValid = ::OpenAPI::fromJsonValue(m_monitoring, json[QString("monitoring")]);
    m_monitoring_isSet = !json[QString("monitoring")].isNull() && m_monitoring_isValid;

    m_mutation_enabled_isValid = ::OpenAPI::fromJsonValue(m_mutation_enabled, json[QString("mutationEnabled")]);
    m_mutation_enabled_isSet = !json[QString("mutationEnabled")].isNull() && m_mutation_enabled_isValid;

    m_referential_rules_enabled_isValid = ::OpenAPI::fromJsonValue(m_referential_rules_enabled, json[QString("referentialRulesEnabled")]);
    m_referential_rules_enabled_isSet = !json[QString("referentialRulesEnabled")].isNull() && m_referential_rules_enabled_isValid;

    m_template_library_installed_isValid = ::OpenAPI::fromJsonValue(m_template_library_installed, json[QString("templateLibraryInstalled")]);
    m_template_library_installed_isSet = !json[QString("templateLibraryInstalled")].isNull() && m_template_library_installed_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIConfigManagementPolicyController::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementPolicyController::asJsonObject() const {
    QJsonObject obj;
    if (m_audit_interval_seconds_isSet) {
        obj.insert(QString("auditIntervalSeconds"), ::OpenAPI::toJsonValue(m_audit_interval_seconds));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_exemptable_namespaces.size() > 0) {
        obj.insert(QString("exemptableNamespaces"), ::OpenAPI::toJsonValue(m_exemptable_namespaces));
    }
    if (m_log_denies_enabled_isSet) {
        obj.insert(QString("logDeniesEnabled"), ::OpenAPI::toJsonValue(m_log_denies_enabled));
    }
    if (m_monitoring.isSet()) {
        obj.insert(QString("monitoring"), ::OpenAPI::toJsonValue(m_monitoring));
    }
    if (m_mutation_enabled_isSet) {
        obj.insert(QString("mutationEnabled"), ::OpenAPI::toJsonValue(m_mutation_enabled));
    }
    if (m_referential_rules_enabled_isSet) {
        obj.insert(QString("referentialRulesEnabled"), ::OpenAPI::toJsonValue(m_referential_rules_enabled));
    }
    if (m_template_library_installed_isSet) {
        obj.insert(QString("templateLibraryInstalled"), ::OpenAPI::toJsonValue(m_template_library_installed));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIConfigManagementPolicyController::getAuditIntervalSeconds() const {
    return m_audit_interval_seconds;
}
void OAIConfigManagementPolicyController::setAuditIntervalSeconds(const QString &audit_interval_seconds) {
    m_audit_interval_seconds = audit_interval_seconds;
    m_audit_interval_seconds_isSet = true;
}

bool OAIConfigManagementPolicyController::is_audit_interval_seconds_Set() const{
    return m_audit_interval_seconds_isSet;
}

bool OAIConfigManagementPolicyController::is_audit_interval_seconds_Valid() const{
    return m_audit_interval_seconds_isValid;
}

bool OAIConfigManagementPolicyController::isEnabled() const {
    return m_enabled;
}
void OAIConfigManagementPolicyController::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIConfigManagementPolicyController::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIConfigManagementPolicyController::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QList<QString> OAIConfigManagementPolicyController::getExemptableNamespaces() const {
    return m_exemptable_namespaces;
}
void OAIConfigManagementPolicyController::setExemptableNamespaces(const QList<QString> &exemptable_namespaces) {
    m_exemptable_namespaces = exemptable_namespaces;
    m_exemptable_namespaces_isSet = true;
}

bool OAIConfigManagementPolicyController::is_exemptable_namespaces_Set() const{
    return m_exemptable_namespaces_isSet;
}

bool OAIConfigManagementPolicyController::is_exemptable_namespaces_Valid() const{
    return m_exemptable_namespaces_isValid;
}

bool OAIConfigManagementPolicyController::isLogDeniesEnabled() const {
    return m_log_denies_enabled;
}
void OAIConfigManagementPolicyController::setLogDeniesEnabled(const bool &log_denies_enabled) {
    m_log_denies_enabled = log_denies_enabled;
    m_log_denies_enabled_isSet = true;
}

bool OAIConfigManagementPolicyController::is_log_denies_enabled_Set() const{
    return m_log_denies_enabled_isSet;
}

bool OAIConfigManagementPolicyController::is_log_denies_enabled_Valid() const{
    return m_log_denies_enabled_isValid;
}

OAIConfigManagementPolicyControllerMonitoring OAIConfigManagementPolicyController::getMonitoring() const {
    return m_monitoring;
}
void OAIConfigManagementPolicyController::setMonitoring(const OAIConfigManagementPolicyControllerMonitoring &monitoring) {
    m_monitoring = monitoring;
    m_monitoring_isSet = true;
}

bool OAIConfigManagementPolicyController::is_monitoring_Set() const{
    return m_monitoring_isSet;
}

bool OAIConfigManagementPolicyController::is_monitoring_Valid() const{
    return m_monitoring_isValid;
}

bool OAIConfigManagementPolicyController::isMutationEnabled() const {
    return m_mutation_enabled;
}
void OAIConfigManagementPolicyController::setMutationEnabled(const bool &mutation_enabled) {
    m_mutation_enabled = mutation_enabled;
    m_mutation_enabled_isSet = true;
}

bool OAIConfigManagementPolicyController::is_mutation_enabled_Set() const{
    return m_mutation_enabled_isSet;
}

bool OAIConfigManagementPolicyController::is_mutation_enabled_Valid() const{
    return m_mutation_enabled_isValid;
}

bool OAIConfigManagementPolicyController::isReferentialRulesEnabled() const {
    return m_referential_rules_enabled;
}
void OAIConfigManagementPolicyController::setReferentialRulesEnabled(const bool &referential_rules_enabled) {
    m_referential_rules_enabled = referential_rules_enabled;
    m_referential_rules_enabled_isSet = true;
}

bool OAIConfigManagementPolicyController::is_referential_rules_enabled_Set() const{
    return m_referential_rules_enabled_isSet;
}

bool OAIConfigManagementPolicyController::is_referential_rules_enabled_Valid() const{
    return m_referential_rules_enabled_isValid;
}

bool OAIConfigManagementPolicyController::isTemplateLibraryInstalled() const {
    return m_template_library_installed;
}
void OAIConfigManagementPolicyController::setTemplateLibraryInstalled(const bool &template_library_installed) {
    m_template_library_installed = template_library_installed;
    m_template_library_installed_isSet = true;
}

bool OAIConfigManagementPolicyController::is_template_library_installed_Set() const{
    return m_template_library_installed_isSet;
}

bool OAIConfigManagementPolicyController::is_template_library_installed_Valid() const{
    return m_template_library_installed_isValid;
}

QString OAIConfigManagementPolicyController::getUpdateTime() const {
    return m_update_time;
}
void OAIConfigManagementPolicyController::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIConfigManagementPolicyController::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIConfigManagementPolicyController::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIConfigManagementPolicyController::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audit_interval_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exemptable_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_denies_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mutation_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referential_rules_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_library_installed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementPolicyController::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
