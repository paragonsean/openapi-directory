/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementMembershipSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementMembershipSpec::OAIConfigManagementMembershipSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementMembershipSpec::OAIConfigManagementMembershipSpec() {
    this->initializeModel();
}

OAIConfigManagementMembershipSpec::~OAIConfigManagementMembershipSpec() {}

void OAIConfigManagementMembershipSpec::initializeModel() {

    m_binauthz_isSet = false;
    m_binauthz_isValid = false;

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_config_sync_isSet = false;
    m_config_sync_isValid = false;

    m_hierarchy_controller_isSet = false;
    m_hierarchy_controller_isValid = false;

    m_management_isSet = false;
    m_management_isValid = false;

    m_policy_controller_isSet = false;
    m_policy_controller_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConfigManagementMembershipSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementMembershipSpec::fromJsonObject(QJsonObject json) {

    m_binauthz_isValid = ::OpenAPI::fromJsonValue(m_binauthz, json[QString("binauthz")]);
    m_binauthz_isSet = !json[QString("binauthz")].isNull() && m_binauthz_isValid;

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_config_sync_isValid = ::OpenAPI::fromJsonValue(m_config_sync, json[QString("configSync")]);
    m_config_sync_isSet = !json[QString("configSync")].isNull() && m_config_sync_isValid;

    m_hierarchy_controller_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_controller, json[QString("hierarchyController")]);
    m_hierarchy_controller_isSet = !json[QString("hierarchyController")].isNull() && m_hierarchy_controller_isValid;

    m_management_isValid = ::OpenAPI::fromJsonValue(m_management, json[QString("management")]);
    m_management_isSet = !json[QString("management")].isNull() && m_management_isValid;

    m_policy_controller_isValid = ::OpenAPI::fromJsonValue(m_policy_controller, json[QString("policyController")]);
    m_policy_controller_isSet = !json[QString("policyController")].isNull() && m_policy_controller_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConfigManagementMembershipSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementMembershipSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_binauthz.isSet()) {
        obj.insert(QString("binauthz"), ::OpenAPI::toJsonValue(m_binauthz));
    }
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_config_sync.isSet()) {
        obj.insert(QString("configSync"), ::OpenAPI::toJsonValue(m_config_sync));
    }
    if (m_hierarchy_controller.isSet()) {
        obj.insert(QString("hierarchyController"), ::OpenAPI::toJsonValue(m_hierarchy_controller));
    }
    if (m_management_isSet) {
        obj.insert(QString("management"), ::OpenAPI::toJsonValue(m_management));
    }
    if (m_policy_controller.isSet()) {
        obj.insert(QString("policyController"), ::OpenAPI::toJsonValue(m_policy_controller));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIConfigManagementBinauthzConfig OAIConfigManagementMembershipSpec::getBinauthz() const {
    return m_binauthz;
}
void OAIConfigManagementMembershipSpec::setBinauthz(const OAIConfigManagementBinauthzConfig &binauthz) {
    m_binauthz = binauthz;
    m_binauthz_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_binauthz_Set() const{
    return m_binauthz_isSet;
}

bool OAIConfigManagementMembershipSpec::is_binauthz_Valid() const{
    return m_binauthz_isValid;
}

QString OAIConfigManagementMembershipSpec::getCluster() const {
    return m_cluster;
}
void OAIConfigManagementMembershipSpec::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIConfigManagementMembershipSpec::is_cluster_Valid() const{
    return m_cluster_isValid;
}

OAIConfigManagementConfigSync OAIConfigManagementMembershipSpec::getConfigSync() const {
    return m_config_sync;
}
void OAIConfigManagementMembershipSpec::setConfigSync(const OAIConfigManagementConfigSync &config_sync) {
    m_config_sync = config_sync;
    m_config_sync_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_config_sync_Set() const{
    return m_config_sync_isSet;
}

bool OAIConfigManagementMembershipSpec::is_config_sync_Valid() const{
    return m_config_sync_isValid;
}

OAIConfigManagementHierarchyControllerConfig OAIConfigManagementMembershipSpec::getHierarchyController() const {
    return m_hierarchy_controller;
}
void OAIConfigManagementMembershipSpec::setHierarchyController(const OAIConfigManagementHierarchyControllerConfig &hierarchy_controller) {
    m_hierarchy_controller = hierarchy_controller;
    m_hierarchy_controller_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_hierarchy_controller_Set() const{
    return m_hierarchy_controller_isSet;
}

bool OAIConfigManagementMembershipSpec::is_hierarchy_controller_Valid() const{
    return m_hierarchy_controller_isValid;
}

QString OAIConfigManagementMembershipSpec::getManagement() const {
    return m_management;
}
void OAIConfigManagementMembershipSpec::setManagement(const QString &management) {
    m_management = management;
    m_management_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_management_Set() const{
    return m_management_isSet;
}

bool OAIConfigManagementMembershipSpec::is_management_Valid() const{
    return m_management_isValid;
}

OAIConfigManagementPolicyController OAIConfigManagementMembershipSpec::getPolicyController() const {
    return m_policy_controller;
}
void OAIConfigManagementMembershipSpec::setPolicyController(const OAIConfigManagementPolicyController &policy_controller) {
    m_policy_controller = policy_controller;
    m_policy_controller_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_policy_controller_Set() const{
    return m_policy_controller_isSet;
}

bool OAIConfigManagementMembershipSpec::is_policy_controller_Valid() const{
    return m_policy_controller_isValid;
}

QString OAIConfigManagementMembershipSpec::getVersion() const {
    return m_version;
}
void OAIConfigManagementMembershipSpec::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConfigManagementMembershipSpec::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConfigManagementMembershipSpec::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConfigManagementMembershipSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binauthz.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_sync.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_controller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_management_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_controller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementMembershipSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
