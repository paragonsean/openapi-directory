/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementConfigSyncState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementConfigSyncState::OAIConfigManagementConfigSyncState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementConfigSyncState::OAIConfigManagementConfigSyncState() {
    this->initializeModel();
}

OAIConfigManagementConfigSyncState::~OAIConfigManagementConfigSyncState() {}

void OAIConfigManagementConfigSyncState::initializeModel() {

    m_deployment_state_isSet = false;
    m_deployment_state_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_reposync_crd_isSet = false;
    m_reposync_crd_isValid = false;

    m_rootsync_crd_isSet = false;
    m_rootsync_crd_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_sync_state_isSet = false;
    m_sync_state_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIConfigManagementConfigSyncState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementConfigSyncState::fromJsonObject(QJsonObject json) {

    m_deployment_state_isValid = ::OpenAPI::fromJsonValue(m_deployment_state, json[QString("deploymentState")]);
    m_deployment_state_isSet = !json[QString("deploymentState")].isNull() && m_deployment_state_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_reposync_crd_isValid = ::OpenAPI::fromJsonValue(m_reposync_crd, json[QString("reposyncCrd")]);
    m_reposync_crd_isSet = !json[QString("reposyncCrd")].isNull() && m_reposync_crd_isValid;

    m_rootsync_crd_isValid = ::OpenAPI::fromJsonValue(m_rootsync_crd, json[QString("rootsyncCrd")]);
    m_rootsync_crd_isSet = !json[QString("rootsyncCrd")].isNull() && m_rootsync_crd_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_sync_state_isValid = ::OpenAPI::fromJsonValue(m_sync_state, json[QString("syncState")]);
    m_sync_state_isSet = !json[QString("syncState")].isNull() && m_sync_state_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIConfigManagementConfigSyncState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementConfigSyncState::asJsonObject() const {
    QJsonObject obj;
    if (m_deployment_state.isSet()) {
        obj.insert(QString("deploymentState"), ::OpenAPI::toJsonValue(m_deployment_state));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_reposync_crd_isSet) {
        obj.insert(QString("reposyncCrd"), ::OpenAPI::toJsonValue(m_reposync_crd));
    }
    if (m_rootsync_crd_isSet) {
        obj.insert(QString("rootsyncCrd"), ::OpenAPI::toJsonValue(m_rootsync_crd));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_sync_state.isSet()) {
        obj.insert(QString("syncState"), ::OpenAPI::toJsonValue(m_sync_state));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIConfigManagementConfigSyncDeploymentState OAIConfigManagementConfigSyncState::getDeploymentState() const {
    return m_deployment_state;
}
void OAIConfigManagementConfigSyncState::setDeploymentState(const OAIConfigManagementConfigSyncDeploymentState &deployment_state) {
    m_deployment_state = deployment_state;
    m_deployment_state_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_deployment_state_Set() const{
    return m_deployment_state_isSet;
}

bool OAIConfigManagementConfigSyncState::is_deployment_state_Valid() const{
    return m_deployment_state_isValid;
}

QList<OAIConfigManagementConfigSyncError> OAIConfigManagementConfigSyncState::getErrors() const {
    return m_errors;
}
void OAIConfigManagementConfigSyncState::setErrors(const QList<OAIConfigManagementConfigSyncError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIConfigManagementConfigSyncState::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIConfigManagementConfigSyncState::getReposyncCrd() const {
    return m_reposync_crd;
}
void OAIConfigManagementConfigSyncState::setReposyncCrd(const QString &reposync_crd) {
    m_reposync_crd = reposync_crd;
    m_reposync_crd_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_reposync_crd_Set() const{
    return m_reposync_crd_isSet;
}

bool OAIConfigManagementConfigSyncState::is_reposync_crd_Valid() const{
    return m_reposync_crd_isValid;
}

QString OAIConfigManagementConfigSyncState::getRootsyncCrd() const {
    return m_rootsync_crd;
}
void OAIConfigManagementConfigSyncState::setRootsyncCrd(const QString &rootsync_crd) {
    m_rootsync_crd = rootsync_crd;
    m_rootsync_crd_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_rootsync_crd_Set() const{
    return m_rootsync_crd_isSet;
}

bool OAIConfigManagementConfigSyncState::is_rootsync_crd_Valid() const{
    return m_rootsync_crd_isValid;
}

QString OAIConfigManagementConfigSyncState::getState() const {
    return m_state;
}
void OAIConfigManagementConfigSyncState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConfigManagementConfigSyncState::is_state_Valid() const{
    return m_state_isValid;
}

OAIConfigManagementSyncState OAIConfigManagementConfigSyncState::getSyncState() const {
    return m_sync_state;
}
void OAIConfigManagementConfigSyncState::setSyncState(const OAIConfigManagementSyncState &sync_state) {
    m_sync_state = sync_state;
    m_sync_state_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_sync_state_Set() const{
    return m_sync_state_isSet;
}

bool OAIConfigManagementConfigSyncState::is_sync_state_Valid() const{
    return m_sync_state_isValid;
}

OAIConfigManagementConfigSyncVersion OAIConfigManagementConfigSyncState::getVersion() const {
    return m_version;
}
void OAIConfigManagementConfigSyncState::setVersion(const OAIConfigManagementConfigSyncVersion &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIConfigManagementConfigSyncState::is_version_Set() const{
    return m_version_isSet;
}

bool OAIConfigManagementConfigSyncState::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIConfigManagementConfigSyncState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deployment_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reposync_crd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rootsync_crd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementConfigSyncState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
