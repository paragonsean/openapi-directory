/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMonitoringConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMonitoringConfig::OAIMonitoringConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMonitoringConfig::OAIMonitoringConfig() {
    this->initializeModel();
}

OAIMonitoringConfig::~OAIMonitoringConfig() {}

void OAIMonitoringConfig::initializeModel() {

    m_cluster_isSet = false;
    m_cluster_isValid = false;

    m_cluster_hash_isSet = false;
    m_cluster_hash_isValid = false;

    m_kubernetes_metrics_prefix_isSet = false;
    m_kubernetes_metrics_prefix_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_project_id_isSet = false;
    m_project_id_isValid = false;
}

void OAIMonitoringConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMonitoringConfig::fromJsonObject(QJsonObject json) {

    m_cluster_isValid = ::OpenAPI::fromJsonValue(m_cluster, json[QString("cluster")]);
    m_cluster_isSet = !json[QString("cluster")].isNull() && m_cluster_isValid;

    m_cluster_hash_isValid = ::OpenAPI::fromJsonValue(m_cluster_hash, json[QString("clusterHash")]);
    m_cluster_hash_isSet = !json[QString("clusterHash")].isNull() && m_cluster_hash_isValid;

    m_kubernetes_metrics_prefix_isValid = ::OpenAPI::fromJsonValue(m_kubernetes_metrics_prefix, json[QString("kubernetesMetricsPrefix")]);
    m_kubernetes_metrics_prefix_isSet = !json[QString("kubernetesMetricsPrefix")].isNull() && m_kubernetes_metrics_prefix_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_project_id_isValid = ::OpenAPI::fromJsonValue(m_project_id, json[QString("projectId")]);
    m_project_id_isSet = !json[QString("projectId")].isNull() && m_project_id_isValid;
}

QString OAIMonitoringConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMonitoringConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_isSet) {
        obj.insert(QString("cluster"), ::OpenAPI::toJsonValue(m_cluster));
    }
    if (m_cluster_hash_isSet) {
        obj.insert(QString("clusterHash"), ::OpenAPI::toJsonValue(m_cluster_hash));
    }
    if (m_kubernetes_metrics_prefix_isSet) {
        obj.insert(QString("kubernetesMetricsPrefix"), ::OpenAPI::toJsonValue(m_kubernetes_metrics_prefix));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_project_id_isSet) {
        obj.insert(QString("projectId"), ::OpenAPI::toJsonValue(m_project_id));
    }
    return obj;
}

QString OAIMonitoringConfig::getCluster() const {
    return m_cluster;
}
void OAIMonitoringConfig::setCluster(const QString &cluster) {
    m_cluster = cluster;
    m_cluster_isSet = true;
}

bool OAIMonitoringConfig::is_cluster_Set() const{
    return m_cluster_isSet;
}

bool OAIMonitoringConfig::is_cluster_Valid() const{
    return m_cluster_isValid;
}

QString OAIMonitoringConfig::getClusterHash() const {
    return m_cluster_hash;
}
void OAIMonitoringConfig::setClusterHash(const QString &cluster_hash) {
    m_cluster_hash = cluster_hash;
    m_cluster_hash_isSet = true;
}

bool OAIMonitoringConfig::is_cluster_hash_Set() const{
    return m_cluster_hash_isSet;
}

bool OAIMonitoringConfig::is_cluster_hash_Valid() const{
    return m_cluster_hash_isValid;
}

QString OAIMonitoringConfig::getKubernetesMetricsPrefix() const {
    return m_kubernetes_metrics_prefix;
}
void OAIMonitoringConfig::setKubernetesMetricsPrefix(const QString &kubernetes_metrics_prefix) {
    m_kubernetes_metrics_prefix = kubernetes_metrics_prefix;
    m_kubernetes_metrics_prefix_isSet = true;
}

bool OAIMonitoringConfig::is_kubernetes_metrics_prefix_Set() const{
    return m_kubernetes_metrics_prefix_isSet;
}

bool OAIMonitoringConfig::is_kubernetes_metrics_prefix_Valid() const{
    return m_kubernetes_metrics_prefix_isValid;
}

QString OAIMonitoringConfig::getLocation() const {
    return m_location;
}
void OAIMonitoringConfig::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIMonitoringConfig::is_location_Set() const{
    return m_location_isSet;
}

bool OAIMonitoringConfig::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIMonitoringConfig::getProjectId() const {
    return m_project_id;
}
void OAIMonitoringConfig::setProjectId(const QString &project_id) {
    m_project_id = project_id;
    m_project_id_isSet = true;
}

bool OAIMonitoringConfig::is_project_id_Set() const{
    return m_project_id_isSet;
}

bool OAIMonitoringConfig::is_project_id_Valid() const{
    return m_project_id_isValid;
}

bool OAIMonitoringConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubernetes_metrics_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMonitoringConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
