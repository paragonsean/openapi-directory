/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicyControllerHubConfig.h
 *
 * Configuration for Policy Controller
 */

#ifndef OAIPolicyControllerHubConfig_H
#define OAIPolicyControllerHubConfig_H

#include <QJsonObject>

#include "OAIPolicyControllerMonitoringConfig.h"
#include "OAIPolicyControllerPolicyContentSpec.h"
#include "OAIPolicyControllerPolicyControllerDeploymentConfig.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPolicyControllerPolicyControllerDeploymentConfig;
class OAIPolicyControllerMonitoringConfig;
class OAIPolicyControllerPolicyContentSpec;

class OAIPolicyControllerHubConfig : public OAIObject {
public:
    OAIPolicyControllerHubConfig();
    OAIPolicyControllerHubConfig(QString json);
    ~OAIPolicyControllerHubConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAuditIntervalSeconds() const;
    void setAuditIntervalSeconds(const QString &audit_interval_seconds);
    bool is_audit_interval_seconds_Set() const;
    bool is_audit_interval_seconds_Valid() const;

    QString getConstraintViolationLimit() const;
    void setConstraintViolationLimit(const QString &constraint_violation_limit);
    bool is_constraint_violation_limit_Set() const;
    bool is_constraint_violation_limit_Valid() const;

    QMap<QString, OAIPolicyControllerPolicyControllerDeploymentConfig> getDeploymentConfigs() const;
    void setDeploymentConfigs(const QMap<QString, OAIPolicyControllerPolicyControllerDeploymentConfig> &deployment_configs);
    bool is_deployment_configs_Set() const;
    bool is_deployment_configs_Valid() const;

    QList<QString> getExemptableNamespaces() const;
    void setExemptableNamespaces(const QList<QString> &exemptable_namespaces);
    bool is_exemptable_namespaces_Set() const;
    bool is_exemptable_namespaces_Valid() const;

    QString getInstallSpec() const;
    void setInstallSpec(const QString &install_spec);
    bool is_install_spec_Set() const;
    bool is_install_spec_Valid() const;

    bool isLogDeniesEnabled() const;
    void setLogDeniesEnabled(const bool &log_denies_enabled);
    bool is_log_denies_enabled_Set() const;
    bool is_log_denies_enabled_Valid() const;

    OAIPolicyControllerMonitoringConfig getMonitoring() const;
    void setMonitoring(const OAIPolicyControllerMonitoringConfig &monitoring);
    bool is_monitoring_Set() const;
    bool is_monitoring_Valid() const;

    bool isMutationEnabled() const;
    void setMutationEnabled(const bool &mutation_enabled);
    bool is_mutation_enabled_Set() const;
    bool is_mutation_enabled_Valid() const;

    OAIPolicyControllerPolicyContentSpec getPolicyContent() const;
    void setPolicyContent(const OAIPolicyControllerPolicyContentSpec &policy_content);
    bool is_policy_content_Set() const;
    bool is_policy_content_Valid() const;

    bool isReferentialRulesEnabled() const;
    void setReferentialRulesEnabled(const bool &referential_rules_enabled);
    bool is_referential_rules_enabled_Set() const;
    bool is_referential_rules_enabled_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_audit_interval_seconds;
    bool m_audit_interval_seconds_isSet;
    bool m_audit_interval_seconds_isValid;

    QString m_constraint_violation_limit;
    bool m_constraint_violation_limit_isSet;
    bool m_constraint_violation_limit_isValid;

    QMap<QString, OAIPolicyControllerPolicyControllerDeploymentConfig> m_deployment_configs;
    bool m_deployment_configs_isSet;
    bool m_deployment_configs_isValid;

    QList<QString> m_exemptable_namespaces;
    bool m_exemptable_namespaces_isSet;
    bool m_exemptable_namespaces_isValid;

    QString m_install_spec;
    bool m_install_spec_isSet;
    bool m_install_spec_isValid;

    bool m_log_denies_enabled;
    bool m_log_denies_enabled_isSet;
    bool m_log_denies_enabled_isValid;

    OAIPolicyControllerMonitoringConfig m_monitoring;
    bool m_monitoring_isSet;
    bool m_monitoring_isValid;

    bool m_mutation_enabled;
    bool m_mutation_enabled_isSet;
    bool m_mutation_enabled_isValid;

    OAIPolicyControllerPolicyContentSpec m_policy_content;
    bool m_policy_content_isSet;
    bool m_policy_content_isValid;

    bool m_referential_rules_enabled;
    bool m_referential_rules_enabled_isSet;
    bool m_referential_rules_enabled_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicyControllerHubConfig)

#endif // OAIPolicyControllerHubConfig_H
