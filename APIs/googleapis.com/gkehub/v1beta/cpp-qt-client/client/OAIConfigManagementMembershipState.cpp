/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementMembershipState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementMembershipState::OAIConfigManagementMembershipState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementMembershipState::OAIConfigManagementMembershipState() {
    this->initializeModel();
}

OAIConfigManagementMembershipState::~OAIConfigManagementMembershipState() {}

void OAIConfigManagementMembershipState::initializeModel() {

    m_binauthz_state_isSet = false;
    m_binauthz_state_isValid = false;

    m_cluster_name_isSet = false;
    m_cluster_name_isValid = false;

    m_config_sync_state_isSet = false;
    m_config_sync_state_isValid = false;

    m_hierarchy_controller_state_isSet = false;
    m_hierarchy_controller_state_isValid = false;

    m_membership_spec_isSet = false;
    m_membership_spec_isValid = false;

    m_operator_state_isSet = false;
    m_operator_state_isValid = false;

    m_policy_controller_state_isSet = false;
    m_policy_controller_state_isValid = false;
}

void OAIConfigManagementMembershipState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementMembershipState::fromJsonObject(QJsonObject json) {

    m_binauthz_state_isValid = ::OpenAPI::fromJsonValue(m_binauthz_state, json[QString("binauthzState")]);
    m_binauthz_state_isSet = !json[QString("binauthzState")].isNull() && m_binauthz_state_isValid;

    m_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_name, json[QString("clusterName")]);
    m_cluster_name_isSet = !json[QString("clusterName")].isNull() && m_cluster_name_isValid;

    m_config_sync_state_isValid = ::OpenAPI::fromJsonValue(m_config_sync_state, json[QString("configSyncState")]);
    m_config_sync_state_isSet = !json[QString("configSyncState")].isNull() && m_config_sync_state_isValid;

    m_hierarchy_controller_state_isValid = ::OpenAPI::fromJsonValue(m_hierarchy_controller_state, json[QString("hierarchyControllerState")]);
    m_hierarchy_controller_state_isSet = !json[QString("hierarchyControllerState")].isNull() && m_hierarchy_controller_state_isValid;

    m_membership_spec_isValid = ::OpenAPI::fromJsonValue(m_membership_spec, json[QString("membershipSpec")]);
    m_membership_spec_isSet = !json[QString("membershipSpec")].isNull() && m_membership_spec_isValid;

    m_operator_state_isValid = ::OpenAPI::fromJsonValue(m_operator_state, json[QString("operatorState")]);
    m_operator_state_isSet = !json[QString("operatorState")].isNull() && m_operator_state_isValid;

    m_policy_controller_state_isValid = ::OpenAPI::fromJsonValue(m_policy_controller_state, json[QString("policyControllerState")]);
    m_policy_controller_state_isSet = !json[QString("policyControllerState")].isNull() && m_policy_controller_state_isValid;
}

QString OAIConfigManagementMembershipState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementMembershipState::asJsonObject() const {
    QJsonObject obj;
    if (m_binauthz_state.isSet()) {
        obj.insert(QString("binauthzState"), ::OpenAPI::toJsonValue(m_binauthz_state));
    }
    if (m_cluster_name_isSet) {
        obj.insert(QString("clusterName"), ::OpenAPI::toJsonValue(m_cluster_name));
    }
    if (m_config_sync_state.isSet()) {
        obj.insert(QString("configSyncState"), ::OpenAPI::toJsonValue(m_config_sync_state));
    }
    if (m_hierarchy_controller_state.isSet()) {
        obj.insert(QString("hierarchyControllerState"), ::OpenAPI::toJsonValue(m_hierarchy_controller_state));
    }
    if (m_membership_spec.isSet()) {
        obj.insert(QString("membershipSpec"), ::OpenAPI::toJsonValue(m_membership_spec));
    }
    if (m_operator_state.isSet()) {
        obj.insert(QString("operatorState"), ::OpenAPI::toJsonValue(m_operator_state));
    }
    if (m_policy_controller_state.isSet()) {
        obj.insert(QString("policyControllerState"), ::OpenAPI::toJsonValue(m_policy_controller_state));
    }
    return obj;
}

OAIConfigManagementBinauthzState OAIConfigManagementMembershipState::getBinauthzState() const {
    return m_binauthz_state;
}
void OAIConfigManagementMembershipState::setBinauthzState(const OAIConfigManagementBinauthzState &binauthz_state) {
    m_binauthz_state = binauthz_state;
    m_binauthz_state_isSet = true;
}

bool OAIConfigManagementMembershipState::is_binauthz_state_Set() const{
    return m_binauthz_state_isSet;
}

bool OAIConfigManagementMembershipState::is_binauthz_state_Valid() const{
    return m_binauthz_state_isValid;
}

QString OAIConfigManagementMembershipState::getClusterName() const {
    return m_cluster_name;
}
void OAIConfigManagementMembershipState::setClusterName(const QString &cluster_name) {
    m_cluster_name = cluster_name;
    m_cluster_name_isSet = true;
}

bool OAIConfigManagementMembershipState::is_cluster_name_Set() const{
    return m_cluster_name_isSet;
}

bool OAIConfigManagementMembershipState::is_cluster_name_Valid() const{
    return m_cluster_name_isValid;
}

OAIConfigManagementConfigSyncState OAIConfigManagementMembershipState::getConfigSyncState() const {
    return m_config_sync_state;
}
void OAIConfigManagementMembershipState::setConfigSyncState(const OAIConfigManagementConfigSyncState &config_sync_state) {
    m_config_sync_state = config_sync_state;
    m_config_sync_state_isSet = true;
}

bool OAIConfigManagementMembershipState::is_config_sync_state_Set() const{
    return m_config_sync_state_isSet;
}

bool OAIConfigManagementMembershipState::is_config_sync_state_Valid() const{
    return m_config_sync_state_isValid;
}

OAIConfigManagementHierarchyControllerState OAIConfigManagementMembershipState::getHierarchyControllerState() const {
    return m_hierarchy_controller_state;
}
void OAIConfigManagementMembershipState::setHierarchyControllerState(const OAIConfigManagementHierarchyControllerState &hierarchy_controller_state) {
    m_hierarchy_controller_state = hierarchy_controller_state;
    m_hierarchy_controller_state_isSet = true;
}

bool OAIConfigManagementMembershipState::is_hierarchy_controller_state_Set() const{
    return m_hierarchy_controller_state_isSet;
}

bool OAIConfigManagementMembershipState::is_hierarchy_controller_state_Valid() const{
    return m_hierarchy_controller_state_isValid;
}

OAIConfigManagementMembershipSpec OAIConfigManagementMembershipState::getMembershipSpec() const {
    return m_membership_spec;
}
void OAIConfigManagementMembershipState::setMembershipSpec(const OAIConfigManagementMembershipSpec &membership_spec) {
    m_membership_spec = membership_spec;
    m_membership_spec_isSet = true;
}

bool OAIConfigManagementMembershipState::is_membership_spec_Set() const{
    return m_membership_spec_isSet;
}

bool OAIConfigManagementMembershipState::is_membership_spec_Valid() const{
    return m_membership_spec_isValid;
}

OAIConfigManagementOperatorState OAIConfigManagementMembershipState::getOperatorState() const {
    return m_operator_state;
}
void OAIConfigManagementMembershipState::setOperatorState(const OAIConfigManagementOperatorState &operator_state) {
    m_operator_state = operator_state;
    m_operator_state_isSet = true;
}

bool OAIConfigManagementMembershipState::is_operator_state_Set() const{
    return m_operator_state_isSet;
}

bool OAIConfigManagementMembershipState::is_operator_state_Valid() const{
    return m_operator_state_isValid;
}

OAIConfigManagementPolicyControllerState OAIConfigManagementMembershipState::getPolicyControllerState() const {
    return m_policy_controller_state;
}
void OAIConfigManagementMembershipState::setPolicyControllerState(const OAIConfigManagementPolicyControllerState &policy_controller_state) {
    m_policy_controller_state = policy_controller_state;
    m_policy_controller_state_isSet = true;
}

bool OAIConfigManagementMembershipState::is_policy_controller_state_Set() const{
    return m_policy_controller_state_isSet;
}

bool OAIConfigManagementMembershipState::is_policy_controller_state_Valid() const{
    return m_policy_controller_state_isValid;
}

bool OAIConfigManagementMembershipState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binauthz_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_sync_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hierarchy_controller_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_operator_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_controller_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementMembershipState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
