/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyControllerPolicyControllerDeploymentConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyControllerPolicyControllerDeploymentConfig::OAIPolicyControllerPolicyControllerDeploymentConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyControllerPolicyControllerDeploymentConfig::OAIPolicyControllerPolicyControllerDeploymentConfig() {
    this->initializeModel();
}

OAIPolicyControllerPolicyControllerDeploymentConfig::~OAIPolicyControllerPolicyControllerDeploymentConfig() {}

void OAIPolicyControllerPolicyControllerDeploymentConfig::initializeModel() {

    m_container_resources_isSet = false;
    m_container_resources_isValid = false;

    m_pod_affinity_isSet = false;
    m_pod_affinity_isValid = false;

    m_pod_anti_affinity_isSet = false;
    m_pod_anti_affinity_isValid = false;

    m_pod_tolerations_isSet = false;
    m_pod_tolerations_isValid = false;

    m_replica_count_isSet = false;
    m_replica_count_isValid = false;
}

void OAIPolicyControllerPolicyControllerDeploymentConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyControllerPolicyControllerDeploymentConfig::fromJsonObject(QJsonObject json) {

    m_container_resources_isValid = ::OpenAPI::fromJsonValue(m_container_resources, json[QString("containerResources")]);
    m_container_resources_isSet = !json[QString("containerResources")].isNull() && m_container_resources_isValid;

    m_pod_affinity_isValid = ::OpenAPI::fromJsonValue(m_pod_affinity, json[QString("podAffinity")]);
    m_pod_affinity_isSet = !json[QString("podAffinity")].isNull() && m_pod_affinity_isValid;

    m_pod_anti_affinity_isValid = ::OpenAPI::fromJsonValue(m_pod_anti_affinity, json[QString("podAntiAffinity")]);
    m_pod_anti_affinity_isSet = !json[QString("podAntiAffinity")].isNull() && m_pod_anti_affinity_isValid;

    m_pod_tolerations_isValid = ::OpenAPI::fromJsonValue(m_pod_tolerations, json[QString("podTolerations")]);
    m_pod_tolerations_isSet = !json[QString("podTolerations")].isNull() && m_pod_tolerations_isValid;

    m_replica_count_isValid = ::OpenAPI::fromJsonValue(m_replica_count, json[QString("replicaCount")]);
    m_replica_count_isSet = !json[QString("replicaCount")].isNull() && m_replica_count_isValid;
}

QString OAIPolicyControllerPolicyControllerDeploymentConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyControllerPolicyControllerDeploymentConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_container_resources.isSet()) {
        obj.insert(QString("containerResources"), ::OpenAPI::toJsonValue(m_container_resources));
    }
    if (m_pod_affinity_isSet) {
        obj.insert(QString("podAffinity"), ::OpenAPI::toJsonValue(m_pod_affinity));
    }
    if (m_pod_anti_affinity_isSet) {
        obj.insert(QString("podAntiAffinity"), ::OpenAPI::toJsonValue(m_pod_anti_affinity));
    }
    if (m_pod_tolerations.size() > 0) {
        obj.insert(QString("podTolerations"), ::OpenAPI::toJsonValue(m_pod_tolerations));
    }
    if (m_replica_count_isSet) {
        obj.insert(QString("replicaCount"), ::OpenAPI::toJsonValue(m_replica_count));
    }
    return obj;
}

OAIPolicyControllerResourceRequirements OAIPolicyControllerPolicyControllerDeploymentConfig::getContainerResources() const {
    return m_container_resources;
}
void OAIPolicyControllerPolicyControllerDeploymentConfig::setContainerResources(const OAIPolicyControllerResourceRequirements &container_resources) {
    m_container_resources = container_resources;
    m_container_resources_isSet = true;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_container_resources_Set() const{
    return m_container_resources_isSet;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_container_resources_Valid() const{
    return m_container_resources_isValid;
}

QString OAIPolicyControllerPolicyControllerDeploymentConfig::getPodAffinity() const {
    return m_pod_affinity;
}
void OAIPolicyControllerPolicyControllerDeploymentConfig::setPodAffinity(const QString &pod_affinity) {
    m_pod_affinity = pod_affinity;
    m_pod_affinity_isSet = true;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_pod_affinity_Set() const{
    return m_pod_affinity_isSet;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_pod_affinity_Valid() const{
    return m_pod_affinity_isValid;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::isPodAntiAffinity() const {
    return m_pod_anti_affinity;
}
void OAIPolicyControllerPolicyControllerDeploymentConfig::setPodAntiAffinity(const bool &pod_anti_affinity) {
    m_pod_anti_affinity = pod_anti_affinity;
    m_pod_anti_affinity_isSet = true;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_pod_anti_affinity_Set() const{
    return m_pod_anti_affinity_isSet;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_pod_anti_affinity_Valid() const{
    return m_pod_anti_affinity_isValid;
}

QList<OAIPolicyControllerToleration> OAIPolicyControllerPolicyControllerDeploymentConfig::getPodTolerations() const {
    return m_pod_tolerations;
}
void OAIPolicyControllerPolicyControllerDeploymentConfig::setPodTolerations(const QList<OAIPolicyControllerToleration> &pod_tolerations) {
    m_pod_tolerations = pod_tolerations;
    m_pod_tolerations_isSet = true;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_pod_tolerations_Set() const{
    return m_pod_tolerations_isSet;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_pod_tolerations_Valid() const{
    return m_pod_tolerations_isValid;
}

QString OAIPolicyControllerPolicyControllerDeploymentConfig::getReplicaCount() const {
    return m_replica_count;
}
void OAIPolicyControllerPolicyControllerDeploymentConfig::setReplicaCount(const QString &replica_count) {
    m_replica_count = replica_count;
    m_replica_count_isSet = true;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_replica_count_Set() const{
    return m_replica_count_isSet;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::is_replica_count_Valid() const{
    return m_replica_count_isValid;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_resources.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_affinity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_anti_affinity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_tolerations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_replica_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyControllerPolicyControllerDeploymentConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
