/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyControllerBundleInstallSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyControllerBundleInstallSpec::OAIPolicyControllerBundleInstallSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyControllerBundleInstallSpec::OAIPolicyControllerBundleInstallSpec() {
    this->initializeModel();
}

OAIPolicyControllerBundleInstallSpec::~OAIPolicyControllerBundleInstallSpec() {}

void OAIPolicyControllerBundleInstallSpec::initializeModel() {

    m_exempted_namespaces_isSet = false;
    m_exempted_namespaces_isValid = false;
}

void OAIPolicyControllerBundleInstallSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyControllerBundleInstallSpec::fromJsonObject(QJsonObject json) {

    m_exempted_namespaces_isValid = ::OpenAPI::fromJsonValue(m_exempted_namespaces, json[QString("exemptedNamespaces")]);
    m_exempted_namespaces_isSet = !json[QString("exemptedNamespaces")].isNull() && m_exempted_namespaces_isValid;
}

QString OAIPolicyControllerBundleInstallSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyControllerBundleInstallSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_exempted_namespaces.size() > 0) {
        obj.insert(QString("exemptedNamespaces"), ::OpenAPI::toJsonValue(m_exempted_namespaces));
    }
    return obj;
}

QList<QString> OAIPolicyControllerBundleInstallSpec::getExemptedNamespaces() const {
    return m_exempted_namespaces;
}
void OAIPolicyControllerBundleInstallSpec::setExemptedNamespaces(const QList<QString> &exempted_namespaces) {
    m_exempted_namespaces = exempted_namespaces;
    m_exempted_namespaces_isSet = true;
}

bool OAIPolicyControllerBundleInstallSpec::is_exempted_namespaces_Set() const{
    return m_exempted_namespaces_isSet;
}

bool OAIPolicyControllerBundleInstallSpec::is_exempted_namespaces_Valid() const{
    return m_exempted_namespaces_isValid;
}

bool OAIPolicyControllerBundleInstallSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exempted_namespaces.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyControllerBundleInstallSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
