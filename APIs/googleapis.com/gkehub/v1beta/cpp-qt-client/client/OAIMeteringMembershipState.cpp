/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeteringMembershipState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeteringMembershipState::OAIMeteringMembershipState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeteringMembershipState::OAIMeteringMembershipState() {
    this->initializeModel();
}

OAIMeteringMembershipState::~OAIMeteringMembershipState() {}

void OAIMeteringMembershipState::initializeModel() {

    m_last_measurement_time_isSet = false;
    m_last_measurement_time_isValid = false;

    m_precise_last_measured_cluster_vcpu_capacity_isSet = false;
    m_precise_last_measured_cluster_vcpu_capacity_isValid = false;
}

void OAIMeteringMembershipState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeteringMembershipState::fromJsonObject(QJsonObject json) {

    m_last_measurement_time_isValid = ::OpenAPI::fromJsonValue(m_last_measurement_time, json[QString("lastMeasurementTime")]);
    m_last_measurement_time_isSet = !json[QString("lastMeasurementTime")].isNull() && m_last_measurement_time_isValid;

    m_precise_last_measured_cluster_vcpu_capacity_isValid = ::OpenAPI::fromJsonValue(m_precise_last_measured_cluster_vcpu_capacity, json[QString("preciseLastMeasuredClusterVcpuCapacity")]);
    m_precise_last_measured_cluster_vcpu_capacity_isSet = !json[QString("preciseLastMeasuredClusterVcpuCapacity")].isNull() && m_precise_last_measured_cluster_vcpu_capacity_isValid;
}

QString OAIMeteringMembershipState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeteringMembershipState::asJsonObject() const {
    QJsonObject obj;
    if (m_last_measurement_time_isSet) {
        obj.insert(QString("lastMeasurementTime"), ::OpenAPI::toJsonValue(m_last_measurement_time));
    }
    if (m_precise_last_measured_cluster_vcpu_capacity_isSet) {
        obj.insert(QString("preciseLastMeasuredClusterVcpuCapacity"), ::OpenAPI::toJsonValue(m_precise_last_measured_cluster_vcpu_capacity));
    }
    return obj;
}

QString OAIMeteringMembershipState::getLastMeasurementTime() const {
    return m_last_measurement_time;
}
void OAIMeteringMembershipState::setLastMeasurementTime(const QString &last_measurement_time) {
    m_last_measurement_time = last_measurement_time;
    m_last_measurement_time_isSet = true;
}

bool OAIMeteringMembershipState::is_last_measurement_time_Set() const{
    return m_last_measurement_time_isSet;
}

bool OAIMeteringMembershipState::is_last_measurement_time_Valid() const{
    return m_last_measurement_time_isValid;
}

float OAIMeteringMembershipState::getPreciseLastMeasuredClusterVcpuCapacity() const {
    return m_precise_last_measured_cluster_vcpu_capacity;
}
void OAIMeteringMembershipState::setPreciseLastMeasuredClusterVcpuCapacity(const float &precise_last_measured_cluster_vcpu_capacity) {
    m_precise_last_measured_cluster_vcpu_capacity = precise_last_measured_cluster_vcpu_capacity;
    m_precise_last_measured_cluster_vcpu_capacity_isSet = true;
}

bool OAIMeteringMembershipState::is_precise_last_measured_cluster_vcpu_capacity_Set() const{
    return m_precise_last_measured_cluster_vcpu_capacity_isSet;
}

bool OAIMeteringMembershipState::is_precise_last_measured_cluster_vcpu_capacity_Valid() const{
    return m_precise_last_measured_cluster_vcpu_capacity_isValid;
}

bool OAIMeteringMembershipState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_measurement_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_precise_last_measured_cluster_vcpu_capacity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeteringMembershipState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
