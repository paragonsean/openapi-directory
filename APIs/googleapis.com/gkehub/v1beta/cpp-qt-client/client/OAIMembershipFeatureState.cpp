/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembershipFeatureState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembershipFeatureState::OAIMembershipFeatureState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembershipFeatureState::OAIMembershipFeatureState() {
    this->initializeModel();
}

OAIMembershipFeatureState::~OAIMembershipFeatureState() {}

void OAIMembershipFeatureState::initializeModel() {

    m_appdevexperience_isSet = false;
    m_appdevexperience_isValid = false;

    m_clusterupgrade_isSet = false;
    m_clusterupgrade_isValid = false;

    m_configmanagement_isSet = false;
    m_configmanagement_isValid = false;

    m_fleetobservability_isSet = false;
    m_fleetobservability_isValid = false;

    m_identityservice_isSet = false;
    m_identityservice_isValid = false;

    m_metering_isSet = false;
    m_metering_isValid = false;

    m_policycontroller_isSet = false;
    m_policycontroller_isValid = false;

    m_servicemesh_isSet = false;
    m_servicemesh_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIMembershipFeatureState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembershipFeatureState::fromJsonObject(QJsonObject json) {

    m_appdevexperience_isValid = ::OpenAPI::fromJsonValue(m_appdevexperience, json[QString("appdevexperience")]);
    m_appdevexperience_isSet = !json[QString("appdevexperience")].isNull() && m_appdevexperience_isValid;

    m_clusterupgrade_isValid = ::OpenAPI::fromJsonValue(m_clusterupgrade, json[QString("clusterupgrade")]);
    m_clusterupgrade_isSet = !json[QString("clusterupgrade")].isNull() && m_clusterupgrade_isValid;

    m_configmanagement_isValid = ::OpenAPI::fromJsonValue(m_configmanagement, json[QString("configmanagement")]);
    m_configmanagement_isSet = !json[QString("configmanagement")].isNull() && m_configmanagement_isValid;

    m_fleetobservability_isValid = ::OpenAPI::fromJsonValue(m_fleetobservability, json[QString("fleetobservability")]);
    m_fleetobservability_isSet = !json[QString("fleetobservability")].isNull() && m_fleetobservability_isValid;

    m_identityservice_isValid = ::OpenAPI::fromJsonValue(m_identityservice, json[QString("identityservice")]);
    m_identityservice_isSet = !json[QString("identityservice")].isNull() && m_identityservice_isValid;

    m_metering_isValid = ::OpenAPI::fromJsonValue(m_metering, json[QString("metering")]);
    m_metering_isSet = !json[QString("metering")].isNull() && m_metering_isValid;

    m_policycontroller_isValid = ::OpenAPI::fromJsonValue(m_policycontroller, json[QString("policycontroller")]);
    m_policycontroller_isSet = !json[QString("policycontroller")].isNull() && m_policycontroller_isValid;

    m_servicemesh_isValid = ::OpenAPI::fromJsonValue(m_servicemesh, json[QString("servicemesh")]);
    m_servicemesh_isSet = !json[QString("servicemesh")].isNull() && m_servicemesh_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIMembershipFeatureState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembershipFeatureState::asJsonObject() const {
    QJsonObject obj;
    if (m_appdevexperience.isSet()) {
        obj.insert(QString("appdevexperience"), ::OpenAPI::toJsonValue(m_appdevexperience));
    }
    if (m_clusterupgrade.isSet()) {
        obj.insert(QString("clusterupgrade"), ::OpenAPI::toJsonValue(m_clusterupgrade));
    }
    if (m_configmanagement.isSet()) {
        obj.insert(QString("configmanagement"), ::OpenAPI::toJsonValue(m_configmanagement));
    }
    if (m_fleetobservability_isSet) {
        obj.insert(QString("fleetobservability"), ::OpenAPI::toJsonValue(m_fleetobservability));
    }
    if (m_identityservice.isSet()) {
        obj.insert(QString("identityservice"), ::OpenAPI::toJsonValue(m_identityservice));
    }
    if (m_metering.isSet()) {
        obj.insert(QString("metering"), ::OpenAPI::toJsonValue(m_metering));
    }
    if (m_policycontroller.isSet()) {
        obj.insert(QString("policycontroller"), ::OpenAPI::toJsonValue(m_policycontroller));
    }
    if (m_servicemesh.isSet()) {
        obj.insert(QString("servicemesh"), ::OpenAPI::toJsonValue(m_servicemesh));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIAppDevExperienceFeatureState OAIMembershipFeatureState::getAppdevexperience() const {
    return m_appdevexperience;
}
void OAIMembershipFeatureState::setAppdevexperience(const OAIAppDevExperienceFeatureState &appdevexperience) {
    m_appdevexperience = appdevexperience;
    m_appdevexperience_isSet = true;
}

bool OAIMembershipFeatureState::is_appdevexperience_Set() const{
    return m_appdevexperience_isSet;
}

bool OAIMembershipFeatureState::is_appdevexperience_Valid() const{
    return m_appdevexperience_isValid;
}

OAIClusterUpgradeMembershipState OAIMembershipFeatureState::getClusterupgrade() const {
    return m_clusterupgrade;
}
void OAIMembershipFeatureState::setClusterupgrade(const OAIClusterUpgradeMembershipState &clusterupgrade) {
    m_clusterupgrade = clusterupgrade;
    m_clusterupgrade_isSet = true;
}

bool OAIMembershipFeatureState::is_clusterupgrade_Set() const{
    return m_clusterupgrade_isSet;
}

bool OAIMembershipFeatureState::is_clusterupgrade_Valid() const{
    return m_clusterupgrade_isValid;
}

OAIConfigManagementMembershipState OAIMembershipFeatureState::getConfigmanagement() const {
    return m_configmanagement;
}
void OAIMembershipFeatureState::setConfigmanagement(const OAIConfigManagementMembershipState &configmanagement) {
    m_configmanagement = configmanagement;
    m_configmanagement_isSet = true;
}

bool OAIMembershipFeatureState::is_configmanagement_Set() const{
    return m_configmanagement_isSet;
}

bool OAIMembershipFeatureState::is_configmanagement_Valid() const{
    return m_configmanagement_isValid;
}

OAIObject OAIMembershipFeatureState::getFleetobservability() const {
    return m_fleetobservability;
}
void OAIMembershipFeatureState::setFleetobservability(const OAIObject &fleetobservability) {
    m_fleetobservability = fleetobservability;
    m_fleetobservability_isSet = true;
}

bool OAIMembershipFeatureState::is_fleetobservability_Set() const{
    return m_fleetobservability_isSet;
}

bool OAIMembershipFeatureState::is_fleetobservability_Valid() const{
    return m_fleetobservability_isValid;
}

OAIIdentityServiceMembershipState OAIMembershipFeatureState::getIdentityservice() const {
    return m_identityservice;
}
void OAIMembershipFeatureState::setIdentityservice(const OAIIdentityServiceMembershipState &identityservice) {
    m_identityservice = identityservice;
    m_identityservice_isSet = true;
}

bool OAIMembershipFeatureState::is_identityservice_Set() const{
    return m_identityservice_isSet;
}

bool OAIMembershipFeatureState::is_identityservice_Valid() const{
    return m_identityservice_isValid;
}

OAIMeteringMembershipState OAIMembershipFeatureState::getMetering() const {
    return m_metering;
}
void OAIMembershipFeatureState::setMetering(const OAIMeteringMembershipState &metering) {
    m_metering = metering;
    m_metering_isSet = true;
}

bool OAIMembershipFeatureState::is_metering_Set() const{
    return m_metering_isSet;
}

bool OAIMembershipFeatureState::is_metering_Valid() const{
    return m_metering_isValid;
}

OAIPolicyControllerMembershipState OAIMembershipFeatureState::getPolicycontroller() const {
    return m_policycontroller;
}
void OAIMembershipFeatureState::setPolicycontroller(const OAIPolicyControllerMembershipState &policycontroller) {
    m_policycontroller = policycontroller;
    m_policycontroller_isSet = true;
}

bool OAIMembershipFeatureState::is_policycontroller_Set() const{
    return m_policycontroller_isSet;
}

bool OAIMembershipFeatureState::is_policycontroller_Valid() const{
    return m_policycontroller_isValid;
}

OAIServiceMeshMembershipState OAIMembershipFeatureState::getServicemesh() const {
    return m_servicemesh;
}
void OAIMembershipFeatureState::setServicemesh(const OAIServiceMeshMembershipState &servicemesh) {
    m_servicemesh = servicemesh;
    m_servicemesh_isSet = true;
}

bool OAIMembershipFeatureState::is_servicemesh_Set() const{
    return m_servicemesh_isSet;
}

bool OAIMembershipFeatureState::is_servicemesh_Valid() const{
    return m_servicemesh_isValid;
}

OAIFeatureState OAIMembershipFeatureState::getState() const {
    return m_state;
}
void OAIMembershipFeatureState::setState(const OAIFeatureState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMembershipFeatureState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMembershipFeatureState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIMembershipFeatureState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appdevexperience.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusterupgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_configmanagement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleetobservability_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_identityservice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metering.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_policycontroller.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_servicemesh.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembershipFeatureState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
