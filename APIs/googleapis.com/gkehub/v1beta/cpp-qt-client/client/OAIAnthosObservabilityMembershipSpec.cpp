/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnthosObservabilityMembershipSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnthosObservabilityMembershipSpec::OAIAnthosObservabilityMembershipSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnthosObservabilityMembershipSpec::OAIAnthosObservabilityMembershipSpec() {
    this->initializeModel();
}

OAIAnthosObservabilityMembershipSpec::~OAIAnthosObservabilityMembershipSpec() {}

void OAIAnthosObservabilityMembershipSpec::initializeModel() {

    m_do_not_optimize_metrics_isSet = false;
    m_do_not_optimize_metrics_isValid = false;

    m_enable_stackdriver_on_applications_isSet = false;
    m_enable_stackdriver_on_applications_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIAnthosObservabilityMembershipSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnthosObservabilityMembershipSpec::fromJsonObject(QJsonObject json) {

    m_do_not_optimize_metrics_isValid = ::OpenAPI::fromJsonValue(m_do_not_optimize_metrics, json[QString("doNotOptimizeMetrics")]);
    m_do_not_optimize_metrics_isSet = !json[QString("doNotOptimizeMetrics")].isNull() && m_do_not_optimize_metrics_isValid;

    m_enable_stackdriver_on_applications_isValid = ::OpenAPI::fromJsonValue(m_enable_stackdriver_on_applications, json[QString("enableStackdriverOnApplications")]);
    m_enable_stackdriver_on_applications_isSet = !json[QString("enableStackdriverOnApplications")].isNull() && m_enable_stackdriver_on_applications_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIAnthosObservabilityMembershipSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnthosObservabilityMembershipSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_do_not_optimize_metrics_isSet) {
        obj.insert(QString("doNotOptimizeMetrics"), ::OpenAPI::toJsonValue(m_do_not_optimize_metrics));
    }
    if (m_enable_stackdriver_on_applications_isSet) {
        obj.insert(QString("enableStackdriverOnApplications"), ::OpenAPI::toJsonValue(m_enable_stackdriver_on_applications));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

bool OAIAnthosObservabilityMembershipSpec::isDoNotOptimizeMetrics() const {
    return m_do_not_optimize_metrics;
}
void OAIAnthosObservabilityMembershipSpec::setDoNotOptimizeMetrics(const bool &do_not_optimize_metrics) {
    m_do_not_optimize_metrics = do_not_optimize_metrics;
    m_do_not_optimize_metrics_isSet = true;
}

bool OAIAnthosObservabilityMembershipSpec::is_do_not_optimize_metrics_Set() const{
    return m_do_not_optimize_metrics_isSet;
}

bool OAIAnthosObservabilityMembershipSpec::is_do_not_optimize_metrics_Valid() const{
    return m_do_not_optimize_metrics_isValid;
}

bool OAIAnthosObservabilityMembershipSpec::isEnableStackdriverOnApplications() const {
    return m_enable_stackdriver_on_applications;
}
void OAIAnthosObservabilityMembershipSpec::setEnableStackdriverOnApplications(const bool &enable_stackdriver_on_applications) {
    m_enable_stackdriver_on_applications = enable_stackdriver_on_applications;
    m_enable_stackdriver_on_applications_isSet = true;
}

bool OAIAnthosObservabilityMembershipSpec::is_enable_stackdriver_on_applications_Set() const{
    return m_enable_stackdriver_on_applications_isSet;
}

bool OAIAnthosObservabilityMembershipSpec::is_enable_stackdriver_on_applications_Valid() const{
    return m_enable_stackdriver_on_applications_isValid;
}

QString OAIAnthosObservabilityMembershipSpec::getVersion() const {
    return m_version;
}
void OAIAnthosObservabilityMembershipSpec::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIAnthosObservabilityMembershipSpec::is_version_Set() const{
    return m_version_isSet;
}

bool OAIAnthosObservabilityMembershipSpec::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIAnthosObservabilityMembershipSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_do_not_optimize_metrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_stackdriver_on_applications_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnthosObservabilityMembershipSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
