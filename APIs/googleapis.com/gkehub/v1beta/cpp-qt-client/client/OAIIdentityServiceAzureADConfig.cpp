/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityServiceAzureADConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityServiceAzureADConfig::OAIIdentityServiceAzureADConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityServiceAzureADConfig::OAIIdentityServiceAzureADConfig() {
    this->initializeModel();
}

OAIIdentityServiceAzureADConfig::~OAIIdentityServiceAzureADConfig() {}

void OAIIdentityServiceAzureADConfig::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_encrypted_client_secret_isSet = false;
    m_encrypted_client_secret_isValid = false;

    m_kubectl_redirect_uri_isSet = false;
    m_kubectl_redirect_uri_isValid = false;

    m_tenant_isSet = false;
    m_tenant_isValid = false;
}

void OAIIdentityServiceAzureADConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityServiceAzureADConfig::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_encrypted_client_secret_isValid = ::OpenAPI::fromJsonValue(m_encrypted_client_secret, json[QString("encryptedClientSecret")]);
    m_encrypted_client_secret_isSet = !json[QString("encryptedClientSecret")].isNull() && m_encrypted_client_secret_isValid;

    m_kubectl_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_kubectl_redirect_uri, json[QString("kubectlRedirectUri")]);
    m_kubectl_redirect_uri_isSet = !json[QString("kubectlRedirectUri")].isNull() && m_kubectl_redirect_uri_isValid;

    m_tenant_isValid = ::OpenAPI::fromJsonValue(m_tenant, json[QString("tenant")]);
    m_tenant_isSet = !json[QString("tenant")].isNull() && m_tenant_isValid;
}

QString OAIIdentityServiceAzureADConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityServiceAzureADConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_encrypted_client_secret_isSet) {
        obj.insert(QString("encryptedClientSecret"), ::OpenAPI::toJsonValue(m_encrypted_client_secret));
    }
    if (m_kubectl_redirect_uri_isSet) {
        obj.insert(QString("kubectlRedirectUri"), ::OpenAPI::toJsonValue(m_kubectl_redirect_uri));
    }
    if (m_tenant_isSet) {
        obj.insert(QString("tenant"), ::OpenAPI::toJsonValue(m_tenant));
    }
    return obj;
}

QString OAIIdentityServiceAzureADConfig::getClientId() const {
    return m_client_id;
}
void OAIIdentityServiceAzureADConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityServiceAzureADConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityServiceAzureADConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentityServiceAzureADConfig::getClientSecret() const {
    return m_client_secret;
}
void OAIIdentityServiceAzureADConfig::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIIdentityServiceAzureADConfig::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIIdentityServiceAzureADConfig::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QByteArray OAIIdentityServiceAzureADConfig::getEncryptedClientSecret() const {
    return m_encrypted_client_secret;
}
void OAIIdentityServiceAzureADConfig::setEncryptedClientSecret(const QByteArray &encrypted_client_secret) {
    m_encrypted_client_secret = encrypted_client_secret;
    m_encrypted_client_secret_isSet = true;
}

bool OAIIdentityServiceAzureADConfig::is_encrypted_client_secret_Set() const{
    return m_encrypted_client_secret_isSet;
}

bool OAIIdentityServiceAzureADConfig::is_encrypted_client_secret_Valid() const{
    return m_encrypted_client_secret_isValid;
}

QString OAIIdentityServiceAzureADConfig::getKubectlRedirectUri() const {
    return m_kubectl_redirect_uri;
}
void OAIIdentityServiceAzureADConfig::setKubectlRedirectUri(const QString &kubectl_redirect_uri) {
    m_kubectl_redirect_uri = kubectl_redirect_uri;
    m_kubectl_redirect_uri_isSet = true;
}

bool OAIIdentityServiceAzureADConfig::is_kubectl_redirect_uri_Set() const{
    return m_kubectl_redirect_uri_isSet;
}

bool OAIIdentityServiceAzureADConfig::is_kubectl_redirect_uri_Valid() const{
    return m_kubectl_redirect_uri_isValid;
}

QString OAIIdentityServiceAzureADConfig::getTenant() const {
    return m_tenant;
}
void OAIIdentityServiceAzureADConfig::setTenant(const QString &tenant) {
    m_tenant = tenant;
    m_tenant_isSet = true;
}

bool OAIIdentityServiceAzureADConfig::is_tenant_Set() const{
    return m_tenant_isSet;
}

bool OAIIdentityServiceAzureADConfig::is_tenant_Valid() const{
    return m_tenant_isValid;
}

bool OAIIdentityServiceAzureADConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubectl_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityServiceAzureADConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
