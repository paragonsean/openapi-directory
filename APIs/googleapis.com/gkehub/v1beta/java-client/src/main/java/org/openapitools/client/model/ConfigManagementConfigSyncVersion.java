/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specific versioning information pertaining to ConfigSync&#39;s Pods
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:02.202070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementConfigSyncVersion {
  public static final String SERIALIZED_NAME_ADMISSION_WEBHOOK = "admissionWebhook";
  @SerializedName(SERIALIZED_NAME_ADMISSION_WEBHOOK)
  private String admissionWebhook;

  public static final String SERIALIZED_NAME_GIT_SYNC = "gitSync";
  @SerializedName(SERIALIZED_NAME_GIT_SYNC)
  private String gitSync;

  public static final String SERIALIZED_NAME_IMPORTER = "importer";
  @SerializedName(SERIALIZED_NAME_IMPORTER)
  private String importer;

  public static final String SERIALIZED_NAME_MONITOR = "monitor";
  @SerializedName(SERIALIZED_NAME_MONITOR)
  private String monitor;

  public static final String SERIALIZED_NAME_RECONCILER_MANAGER = "reconcilerManager";
  @SerializedName(SERIALIZED_NAME_RECONCILER_MANAGER)
  private String reconcilerManager;

  public static final String SERIALIZED_NAME_ROOT_RECONCILER = "rootReconciler";
  @SerializedName(SERIALIZED_NAME_ROOT_RECONCILER)
  private String rootReconciler;

  public static final String SERIALIZED_NAME_SYNCER = "syncer";
  @SerializedName(SERIALIZED_NAME_SYNCER)
  private String syncer;

  public ConfigManagementConfigSyncVersion() {
  }

  public ConfigManagementConfigSyncVersion admissionWebhook(String admissionWebhook) {
    this.admissionWebhook = admissionWebhook;
    return this;
  }

  /**
   * Version of the deployed admission_webhook pod
   * @return admissionWebhook
   */
  @javax.annotation.Nullable
  public String getAdmissionWebhook() {
    return admissionWebhook;
  }

  public void setAdmissionWebhook(String admissionWebhook) {
    this.admissionWebhook = admissionWebhook;
  }


  public ConfigManagementConfigSyncVersion gitSync(String gitSync) {
    this.gitSync = gitSync;
    return this;
  }

  /**
   * Version of the deployed git-sync pod
   * @return gitSync
   */
  @javax.annotation.Nullable
  public String getGitSync() {
    return gitSync;
  }

  public void setGitSync(String gitSync) {
    this.gitSync = gitSync;
  }


  public ConfigManagementConfigSyncVersion importer(String importer) {
    this.importer = importer;
    return this;
  }

  /**
   * Version of the deployed importer pod
   * @return importer
   */
  @javax.annotation.Nullable
  public String getImporter() {
    return importer;
  }

  public void setImporter(String importer) {
    this.importer = importer;
  }


  public ConfigManagementConfigSyncVersion monitor(String monitor) {
    this.monitor = monitor;
    return this;
  }

  /**
   * Version of the deployed monitor pod
   * @return monitor
   */
  @javax.annotation.Nullable
  public String getMonitor() {
    return monitor;
  }

  public void setMonitor(String monitor) {
    this.monitor = monitor;
  }


  public ConfigManagementConfigSyncVersion reconcilerManager(String reconcilerManager) {
    this.reconcilerManager = reconcilerManager;
    return this;
  }

  /**
   * Version of the deployed reconciler-manager pod
   * @return reconcilerManager
   */
  @javax.annotation.Nullable
  public String getReconcilerManager() {
    return reconcilerManager;
  }

  public void setReconcilerManager(String reconcilerManager) {
    this.reconcilerManager = reconcilerManager;
  }


  public ConfigManagementConfigSyncVersion rootReconciler(String rootReconciler) {
    this.rootReconciler = rootReconciler;
    return this;
  }

  /**
   * Version of the deployed reconciler container in root-reconciler pod
   * @return rootReconciler
   */
  @javax.annotation.Nullable
  public String getRootReconciler() {
    return rootReconciler;
  }

  public void setRootReconciler(String rootReconciler) {
    this.rootReconciler = rootReconciler;
  }


  public ConfigManagementConfigSyncVersion syncer(String syncer) {
    this.syncer = syncer;
    return this;
  }

  /**
   * Version of the deployed syncer pod
   * @return syncer
   */
  @javax.annotation.Nullable
  public String getSyncer() {
    return syncer;
  }

  public void setSyncer(String syncer) {
    this.syncer = syncer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementConfigSyncVersion configManagementConfigSyncVersion = (ConfigManagementConfigSyncVersion) o;
    return Objects.equals(this.admissionWebhook, configManagementConfigSyncVersion.admissionWebhook) &&
        Objects.equals(this.gitSync, configManagementConfigSyncVersion.gitSync) &&
        Objects.equals(this.importer, configManagementConfigSyncVersion.importer) &&
        Objects.equals(this.monitor, configManagementConfigSyncVersion.monitor) &&
        Objects.equals(this.reconcilerManager, configManagementConfigSyncVersion.reconcilerManager) &&
        Objects.equals(this.rootReconciler, configManagementConfigSyncVersion.rootReconciler) &&
        Objects.equals(this.syncer, configManagementConfigSyncVersion.syncer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(admissionWebhook, gitSync, importer, monitor, reconcilerManager, rootReconciler, syncer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementConfigSyncVersion {\n");
    sb.append("    admissionWebhook: ").append(toIndentedString(admissionWebhook)).append("\n");
    sb.append("    gitSync: ").append(toIndentedString(gitSync)).append("\n");
    sb.append("    importer: ").append(toIndentedString(importer)).append("\n");
    sb.append("    monitor: ").append(toIndentedString(monitor)).append("\n");
    sb.append("    reconcilerManager: ").append(toIndentedString(reconcilerManager)).append("\n");
    sb.append("    rootReconciler: ").append(toIndentedString(rootReconciler)).append("\n");
    sb.append("    syncer: ").append(toIndentedString(syncer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("admissionWebhook");
    openapiFields.add("gitSync");
    openapiFields.add("importer");
    openapiFields.add("monitor");
    openapiFields.add("reconcilerManager");
    openapiFields.add("rootReconciler");
    openapiFields.add("syncer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementConfigSyncVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementConfigSyncVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementConfigSyncVersion is not found in the empty JSON string", ConfigManagementConfigSyncVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementConfigSyncVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementConfigSyncVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("admissionWebhook") != null && !jsonObj.get("admissionWebhook").isJsonNull()) && !jsonObj.get("admissionWebhook").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `admissionWebhook` to be a primitive type in the JSON string but got `%s`", jsonObj.get("admissionWebhook").toString()));
      }
      if ((jsonObj.get("gitSync") != null && !jsonObj.get("gitSync").isJsonNull()) && !jsonObj.get("gitSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitSync").toString()));
      }
      if ((jsonObj.get("importer") != null && !jsonObj.get("importer").isJsonNull()) && !jsonObj.get("importer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importer").toString()));
      }
      if ((jsonObj.get("monitor") != null && !jsonObj.get("monitor").isJsonNull()) && !jsonObj.get("monitor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitor").toString()));
      }
      if ((jsonObj.get("reconcilerManager") != null && !jsonObj.get("reconcilerManager").isJsonNull()) && !jsonObj.get("reconcilerManager").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reconcilerManager` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reconcilerManager").toString()));
      }
      if ((jsonObj.get("rootReconciler") != null && !jsonObj.get("rootReconciler").isJsonNull()) && !jsonObj.get("rootReconciler").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rootReconciler` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rootReconciler").toString()));
      }
      if ((jsonObj.get("syncer") != null && !jsonObj.get("syncer").isJsonNull()) && !jsonObj.get("syncer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementConfigSyncVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementConfigSyncVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementConfigSyncVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementConfigSyncVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementConfigSyncVersion>() {
           @Override
           public void write(JsonWriter out, ConfigManagementConfigSyncVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementConfigSyncVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementConfigSyncVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementConfigSyncVersion
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementConfigSyncVersion
   */
  public static ConfigManagementConfigSyncVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementConfigSyncVersion.class);
  }

  /**
   * Convert an instance of ConfigManagementConfigSyncVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

