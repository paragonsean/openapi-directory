/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ResourceOptions represent options for Kubernetes resource generation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:02.202070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceOptions {
  public static final String SERIALIZED_NAME_CONNECT_VERSION = "connectVersion";
  @SerializedName(SERIALIZED_NAME_CONNECT_VERSION)
  private String connectVersion;

  public static final String SERIALIZED_NAME_K8S_VERSION = "k8sVersion";
  @SerializedName(SERIALIZED_NAME_K8S_VERSION)
  private String k8sVersion;

  public static final String SERIALIZED_NAME_V1BETA1_CRD = "v1beta1Crd";
  @SerializedName(SERIALIZED_NAME_V1BETA1_CRD)
  private Boolean v1beta1Crd;

  public ResourceOptions() {
  }

  public ResourceOptions connectVersion(String connectVersion) {
    this.connectVersion = connectVersion;
    return this;
  }

  /**
   * Optional. The Connect agent version to use for connect_resources. Defaults to the latest GKE Connect version. The version must be a currently supported version, obsolete versions will be rejected.
   * @return connectVersion
   */
  @javax.annotation.Nullable
  public String getConnectVersion() {
    return connectVersion;
  }

  public void setConnectVersion(String connectVersion) {
    this.connectVersion = connectVersion;
  }


  public ResourceOptions k8sVersion(String k8sVersion) {
    this.k8sVersion = k8sVersion;
    return this;
  }

  /**
   * Optional. Major version of the Kubernetes cluster. This is only used to determine which version to use for the CustomResourceDefinition resources, &#x60;apiextensions/v1beta1&#x60; or&#x60;apiextensions/v1&#x60;.
   * @return k8sVersion
   */
  @javax.annotation.Nullable
  public String getK8sVersion() {
    return k8sVersion;
  }

  public void setK8sVersion(String k8sVersion) {
    this.k8sVersion = k8sVersion;
  }


  public ResourceOptions v1beta1Crd(Boolean v1beta1Crd) {
    this.v1beta1Crd = v1beta1Crd;
    return this;
  }

  /**
   * Optional. Use &#x60;apiextensions/v1beta1&#x60; instead of &#x60;apiextensions/v1&#x60; for CustomResourceDefinition resources. This option should be set for clusters with Kubernetes apiserver versions &lt;1.16.
   * @return v1beta1Crd
   */
  @javax.annotation.Nullable
  public Boolean getV1beta1Crd() {
    return v1beta1Crd;
  }

  public void setV1beta1Crd(Boolean v1beta1Crd) {
    this.v1beta1Crd = v1beta1Crd;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceOptions resourceOptions = (ResourceOptions) o;
    return Objects.equals(this.connectVersion, resourceOptions.connectVersion) &&
        Objects.equals(this.k8sVersion, resourceOptions.k8sVersion) &&
        Objects.equals(this.v1beta1Crd, resourceOptions.v1beta1Crd);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectVersion, k8sVersion, v1beta1Crd);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceOptions {\n");
    sb.append("    connectVersion: ").append(toIndentedString(connectVersion)).append("\n");
    sb.append("    k8sVersion: ").append(toIndentedString(k8sVersion)).append("\n");
    sb.append("    v1beta1Crd: ").append(toIndentedString(v1beta1Crd)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectVersion");
    openapiFields.add("k8sVersion");
    openapiFields.add("v1beta1Crd");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceOptions is not found in the empty JSON string", ResourceOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("connectVersion") != null && !jsonObj.get("connectVersion").isJsonNull()) && !jsonObj.get("connectVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectVersion").toString()));
      }
      if ((jsonObj.get("k8sVersion") != null && !jsonObj.get("k8sVersion").isJsonNull()) && !jsonObj.get("k8sVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `k8sVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("k8sVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceOptions>() {
           @Override
           public void write(JsonWriter out, ResourceOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceOptions
   * @throws IOException if the JSON string is invalid with respect to ResourceOptions
   */
  public static ResourceOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceOptions.class);
  }

  /**
   * Convert an instance of ResourceOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

