/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigManagementSyncError;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * State indicating an ACM&#39;s progress syncing configurations to a cluster
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:02.202070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementSyncState {
  /**
   * Sync status code
   */
  @JsonAdapter(CodeEnum.Adapter.class)
  public enum CodeEnum {
    SYNC_CODE_UNSPECIFIED("SYNC_CODE_UNSPECIFIED"),
    
    SYNCED("SYNCED"),
    
    PENDING("PENDING"),
    
    ERROR("ERROR"),
    
    NOT_CONFIGURED("NOT_CONFIGURED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    UNAUTHORIZED("UNAUTHORIZED"),
    
    UNREACHABLE("UNREACHABLE");

    private String value;

    CodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CodeEnum fromValue(String value) {
      for (CodeEnum b : CodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private CodeEnum code;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ConfigManagementSyncError> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMPORT_TOKEN = "importToken";
  @SerializedName(SERIALIZED_NAME_IMPORT_TOKEN)
  private String importToken;

  public static final String SERIALIZED_NAME_LAST_SYNC = "lastSync";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_LAST_SYNC)
  private String lastSync;

  public static final String SERIALIZED_NAME_LAST_SYNC_TIME = "lastSyncTime";
  @SerializedName(SERIALIZED_NAME_LAST_SYNC_TIME)
  private String lastSyncTime;

  public static final String SERIALIZED_NAME_SOURCE_TOKEN = "sourceToken";
  @SerializedName(SERIALIZED_NAME_SOURCE_TOKEN)
  private String sourceToken;

  public static final String SERIALIZED_NAME_SYNC_TOKEN = "syncToken";
  @SerializedName(SERIALIZED_NAME_SYNC_TOKEN)
  private String syncToken;

  public ConfigManagementSyncState() {
  }

  public ConfigManagementSyncState code(CodeEnum code) {
    this.code = code;
    return this;
  }

  /**
   * Sync status code
   * @return code
   */
  @javax.annotation.Nullable
  public CodeEnum getCode() {
    return code;
  }

  public void setCode(CodeEnum code) {
    this.code = code;
  }


  public ConfigManagementSyncState errors(List<ConfigManagementSyncError> errors) {
    this.errors = errors;
    return this;
  }

  public ConfigManagementSyncState addErrorsItem(ConfigManagementSyncError errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ConfigManagementSyncError> getErrors() {
    return errors;
  }

  public void setErrors(List<ConfigManagementSyncError> errors) {
    this.errors = errors;
  }


  public ConfigManagementSyncState importToken(String importToken) {
    this.importToken = importToken;
    return this;
  }

  /**
   * Token indicating the state of the importer.
   * @return importToken
   */
  @javax.annotation.Nullable
  public String getImportToken() {
    return importToken;
  }

  public void setImportToken(String importToken) {
    this.importToken = importToken;
  }


  @Deprecated
  public ConfigManagementSyncState lastSync(String lastSync) {
    this.lastSync = lastSync;
    return this;
  }

  /**
   * Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
   * @return lastSync
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getLastSync() {
    return lastSync;
  }

  @Deprecated
  public void setLastSync(String lastSync) {
    this.lastSync = lastSync;
  }


  public ConfigManagementSyncState lastSyncTime(String lastSyncTime) {
    this.lastSyncTime = lastSyncTime;
    return this;
  }

  /**
   * Timestamp type of when ACM last successfully synced the repo
   * @return lastSyncTime
   */
  @javax.annotation.Nullable
  public String getLastSyncTime() {
    return lastSyncTime;
  }

  public void setLastSyncTime(String lastSyncTime) {
    this.lastSyncTime = lastSyncTime;
  }


  public ConfigManagementSyncState sourceToken(String sourceToken) {
    this.sourceToken = sourceToken;
    return this;
  }

  /**
   * Token indicating the state of the repo.
   * @return sourceToken
   */
  @javax.annotation.Nullable
  public String getSourceToken() {
    return sourceToken;
  }

  public void setSourceToken(String sourceToken) {
    this.sourceToken = sourceToken;
  }


  public ConfigManagementSyncState syncToken(String syncToken) {
    this.syncToken = syncToken;
    return this;
  }

  /**
   * Token indicating the state of the syncer.
   * @return syncToken
   */
  @javax.annotation.Nullable
  public String getSyncToken() {
    return syncToken;
  }

  public void setSyncToken(String syncToken) {
    this.syncToken = syncToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementSyncState configManagementSyncState = (ConfigManagementSyncState) o;
    return Objects.equals(this.code, configManagementSyncState.code) &&
        Objects.equals(this.errors, configManagementSyncState.errors) &&
        Objects.equals(this.importToken, configManagementSyncState.importToken) &&
        Objects.equals(this.lastSync, configManagementSyncState.lastSync) &&
        Objects.equals(this.lastSyncTime, configManagementSyncState.lastSyncTime) &&
        Objects.equals(this.sourceToken, configManagementSyncState.sourceToken) &&
        Objects.equals(this.syncToken, configManagementSyncState.syncToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, errors, importToken, lastSync, lastSyncTime, sourceToken, syncToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementSyncState {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    importToken: ").append(toIndentedString(importToken)).append("\n");
    sb.append("    lastSync: ").append(toIndentedString(lastSync)).append("\n");
    sb.append("    lastSyncTime: ").append(toIndentedString(lastSyncTime)).append("\n");
    sb.append("    sourceToken: ").append(toIndentedString(sourceToken)).append("\n");
    sb.append("    syncToken: ").append(toIndentedString(syncToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("errors");
    openapiFields.add("importToken");
    openapiFields.add("lastSync");
    openapiFields.add("lastSyncTime");
    openapiFields.add("sourceToken");
    openapiFields.add("syncToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementSyncState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementSyncState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementSyncState is not found in the empty JSON string", ConfigManagementSyncState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementSyncState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementSyncState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        CodeEnum.validateJsonElement(jsonObj.get("code"));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ConfigManagementSyncError.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if ((jsonObj.get("importToken") != null && !jsonObj.get("importToken").isJsonNull()) && !jsonObj.get("importToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importToken").toString()));
      }
      if ((jsonObj.get("lastSync") != null && !jsonObj.get("lastSync").isJsonNull()) && !jsonObj.get("lastSync").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSync` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSync").toString()));
      }
      if ((jsonObj.get("lastSyncTime") != null && !jsonObj.get("lastSyncTime").isJsonNull()) && !jsonObj.get("lastSyncTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSyncTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSyncTime").toString()));
      }
      if ((jsonObj.get("sourceToken") != null && !jsonObj.get("sourceToken").isJsonNull()) && !jsonObj.get("sourceToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceToken").toString()));
      }
      if ((jsonObj.get("syncToken") != null && !jsonObj.get("syncToken").isJsonNull()) && !jsonObj.get("syncToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementSyncState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementSyncState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementSyncState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementSyncState.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementSyncState>() {
           @Override
           public void write(JsonWriter out, ConfigManagementSyncState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementSyncState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementSyncState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementSyncState
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementSyncState
   */
  public static ConfigManagementSyncState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementSyncState.class);
  }

  /**
   * Convert an instance of ConfigManagementSyncState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

