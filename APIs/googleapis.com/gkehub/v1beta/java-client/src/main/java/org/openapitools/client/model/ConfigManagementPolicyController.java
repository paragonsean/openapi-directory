/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigManagementPolicyControllerMonitoring;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Policy Controller
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:02.202070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementPolicyController {
  public static final String SERIALIZED_NAME_AUDIT_INTERVAL_SECONDS = "auditIntervalSeconds";
  @SerializedName(SERIALIZED_NAME_AUDIT_INTERVAL_SECONDS)
  private String auditIntervalSeconds;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_EXEMPTABLE_NAMESPACES = "exemptableNamespaces";
  @SerializedName(SERIALIZED_NAME_EXEMPTABLE_NAMESPACES)
  private List<String> exemptableNamespaces = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOG_DENIES_ENABLED = "logDeniesEnabled";
  @SerializedName(SERIALIZED_NAME_LOG_DENIES_ENABLED)
  private Boolean logDeniesEnabled;

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private ConfigManagementPolicyControllerMonitoring monitoring;

  public static final String SERIALIZED_NAME_MUTATION_ENABLED = "mutationEnabled";
  @SerializedName(SERIALIZED_NAME_MUTATION_ENABLED)
  private Boolean mutationEnabled;

  public static final String SERIALIZED_NAME_REFERENTIAL_RULES_ENABLED = "referentialRulesEnabled";
  @SerializedName(SERIALIZED_NAME_REFERENTIAL_RULES_ENABLED)
  private Boolean referentialRulesEnabled;

  public static final String SERIALIZED_NAME_TEMPLATE_LIBRARY_INSTALLED = "templateLibraryInstalled";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_LIBRARY_INSTALLED)
  private Boolean templateLibraryInstalled;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public ConfigManagementPolicyController() {
  }

  public ConfigManagementPolicyController(
     String updateTime
  ) {
    this();
    this.updateTime = updateTime;
  }

  public ConfigManagementPolicyController auditIntervalSeconds(String auditIntervalSeconds) {
    this.auditIntervalSeconds = auditIntervalSeconds;
    return this;
  }

  /**
   * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
   * @return auditIntervalSeconds
   */
  @javax.annotation.Nullable
  public String getAuditIntervalSeconds() {
    return auditIntervalSeconds;
  }

  public void setAuditIntervalSeconds(String auditIntervalSeconds) {
    this.auditIntervalSeconds = auditIntervalSeconds;
  }


  public ConfigManagementPolicyController enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ConfigManagementPolicyController exemptableNamespaces(List<String> exemptableNamespaces) {
    this.exemptableNamespaces = exemptableNamespaces;
    return this;
  }

  public ConfigManagementPolicyController addExemptableNamespacesItem(String exemptableNamespacesItem) {
    if (this.exemptableNamespaces == null) {
      this.exemptableNamespaces = new ArrayList<>();
    }
    this.exemptableNamespaces.add(exemptableNamespacesItem);
    return this;
  }

  /**
   * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
   * @return exemptableNamespaces
   */
  @javax.annotation.Nullable
  public List<String> getExemptableNamespaces() {
    return exemptableNamespaces;
  }

  public void setExemptableNamespaces(List<String> exemptableNamespaces) {
    this.exemptableNamespaces = exemptableNamespaces;
  }


  public ConfigManagementPolicyController logDeniesEnabled(Boolean logDeniesEnabled) {
    this.logDeniesEnabled = logDeniesEnabled;
    return this;
  }

  /**
   * Logs all denies and dry run failures.
   * @return logDeniesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getLogDeniesEnabled() {
    return logDeniesEnabled;
  }

  public void setLogDeniesEnabled(Boolean logDeniesEnabled) {
    this.logDeniesEnabled = logDeniesEnabled;
  }


  public ConfigManagementPolicyController monitoring(ConfigManagementPolicyControllerMonitoring monitoring) {
    this.monitoring = monitoring;
    return this;
  }

  /**
   * Get monitoring
   * @return monitoring
   */
  @javax.annotation.Nullable
  public ConfigManagementPolicyControllerMonitoring getMonitoring() {
    return monitoring;
  }

  public void setMonitoring(ConfigManagementPolicyControllerMonitoring monitoring) {
    this.monitoring = monitoring;
  }


  public ConfigManagementPolicyController mutationEnabled(Boolean mutationEnabled) {
    this.mutationEnabled = mutationEnabled;
    return this;
  }

  /**
   * Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
   * @return mutationEnabled
   */
  @javax.annotation.Nullable
  public Boolean getMutationEnabled() {
    return mutationEnabled;
  }

  public void setMutationEnabled(Boolean mutationEnabled) {
    this.mutationEnabled = mutationEnabled;
  }


  public ConfigManagementPolicyController referentialRulesEnabled(Boolean referentialRulesEnabled) {
    this.referentialRulesEnabled = referentialRulesEnabled;
    return this;
  }

  /**
   * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
   * @return referentialRulesEnabled
   */
  @javax.annotation.Nullable
  public Boolean getReferentialRulesEnabled() {
    return referentialRulesEnabled;
  }

  public void setReferentialRulesEnabled(Boolean referentialRulesEnabled) {
    this.referentialRulesEnabled = referentialRulesEnabled;
  }


  public ConfigManagementPolicyController templateLibraryInstalled(Boolean templateLibraryInstalled) {
    this.templateLibraryInstalled = templateLibraryInstalled;
    return this;
  }

  /**
   * Installs the default template library along with Policy Controller.
   * @return templateLibraryInstalled
   */
  @javax.annotation.Nullable
  public Boolean getTemplateLibraryInstalled() {
    return templateLibraryInstalled;
  }

  public void setTemplateLibraryInstalled(Boolean templateLibraryInstalled) {
    this.templateLibraryInstalled = templateLibraryInstalled;
  }


  /**
   * Output only. Last time this membership spec was updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementPolicyController configManagementPolicyController = (ConfigManagementPolicyController) o;
    return Objects.equals(this.auditIntervalSeconds, configManagementPolicyController.auditIntervalSeconds) &&
        Objects.equals(this.enabled, configManagementPolicyController.enabled) &&
        Objects.equals(this.exemptableNamespaces, configManagementPolicyController.exemptableNamespaces) &&
        Objects.equals(this.logDeniesEnabled, configManagementPolicyController.logDeniesEnabled) &&
        Objects.equals(this.monitoring, configManagementPolicyController.monitoring) &&
        Objects.equals(this.mutationEnabled, configManagementPolicyController.mutationEnabled) &&
        Objects.equals(this.referentialRulesEnabled, configManagementPolicyController.referentialRulesEnabled) &&
        Objects.equals(this.templateLibraryInstalled, configManagementPolicyController.templateLibraryInstalled) &&
        Objects.equals(this.updateTime, configManagementPolicyController.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(auditIntervalSeconds, enabled, exemptableNamespaces, logDeniesEnabled, monitoring, mutationEnabled, referentialRulesEnabled, templateLibraryInstalled, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementPolicyController {\n");
    sb.append("    auditIntervalSeconds: ").append(toIndentedString(auditIntervalSeconds)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    exemptableNamespaces: ").append(toIndentedString(exemptableNamespaces)).append("\n");
    sb.append("    logDeniesEnabled: ").append(toIndentedString(logDeniesEnabled)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    mutationEnabled: ").append(toIndentedString(mutationEnabled)).append("\n");
    sb.append("    referentialRulesEnabled: ").append(toIndentedString(referentialRulesEnabled)).append("\n");
    sb.append("    templateLibraryInstalled: ").append(toIndentedString(templateLibraryInstalled)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auditIntervalSeconds");
    openapiFields.add("enabled");
    openapiFields.add("exemptableNamespaces");
    openapiFields.add("logDeniesEnabled");
    openapiFields.add("monitoring");
    openapiFields.add("mutationEnabled");
    openapiFields.add("referentialRulesEnabled");
    openapiFields.add("templateLibraryInstalled");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementPolicyController
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementPolicyController.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementPolicyController is not found in the empty JSON string", ConfigManagementPolicyController.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementPolicyController.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementPolicyController` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("auditIntervalSeconds") != null && !jsonObj.get("auditIntervalSeconds").isJsonNull()) && !jsonObj.get("auditIntervalSeconds").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auditIntervalSeconds` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auditIntervalSeconds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("exemptableNamespaces") != null && !jsonObj.get("exemptableNamespaces").isJsonNull() && !jsonObj.get("exemptableNamespaces").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exemptableNamespaces` to be an array in the JSON string but got `%s`", jsonObj.get("exemptableNamespaces").toString()));
      }
      // validate the optional field `monitoring`
      if (jsonObj.get("monitoring") != null && !jsonObj.get("monitoring").isJsonNull()) {
        ConfigManagementPolicyControllerMonitoring.validateJsonElement(jsonObj.get("monitoring"));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementPolicyController.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementPolicyController' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementPolicyController> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementPolicyController.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementPolicyController>() {
           @Override
           public void write(JsonWriter out, ConfigManagementPolicyController value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementPolicyController read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementPolicyController given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementPolicyController
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementPolicyController
   */
  public static ConfigManagementPolicyController fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementPolicyController.class);
  }

  /**
   * Convert an instance of ConfigManagementPolicyController to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

