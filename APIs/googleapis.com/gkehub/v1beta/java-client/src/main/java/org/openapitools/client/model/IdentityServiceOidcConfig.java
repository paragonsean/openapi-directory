/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for OIDC Auth flow.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:31:02.202070-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IdentityServiceOidcConfig {
  public static final String SERIALIZED_NAME_CERTIFICATE_AUTHORITY_DATA = "certificateAuthorityData";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_AUTHORITY_DATA)
  private String certificateAuthorityData;

  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_SECRET = "clientSecret";
  @SerializedName(SERIALIZED_NAME_CLIENT_SECRET)
  private String clientSecret;

  public static final String SERIALIZED_NAME_DEPLOY_CLOUD_CONSOLE_PROXY = "deployCloudConsoleProxy";
  @SerializedName(SERIALIZED_NAME_DEPLOY_CLOUD_CONSOLE_PROXY)
  private Boolean deployCloudConsoleProxy;

  public static final String SERIALIZED_NAME_ENABLE_ACCESS_TOKEN = "enableAccessToken";
  @SerializedName(SERIALIZED_NAME_ENABLE_ACCESS_TOKEN)
  private Boolean enableAccessToken;

  public static final String SERIALIZED_NAME_ENCRYPTED_CLIENT_SECRET = "encryptedClientSecret";
  @SerializedName(SERIALIZED_NAME_ENCRYPTED_CLIENT_SECRET)
  private byte[] encryptedClientSecret;

  public static final String SERIALIZED_NAME_EXTRA_PARAMS = "extraParams";
  @SerializedName(SERIALIZED_NAME_EXTRA_PARAMS)
  private String extraParams;

  public static final String SERIALIZED_NAME_GROUP_PREFIX = "groupPrefix";
  @SerializedName(SERIALIZED_NAME_GROUP_PREFIX)
  private String groupPrefix;

  public static final String SERIALIZED_NAME_GROUPS_CLAIM = "groupsClaim";
  @SerializedName(SERIALIZED_NAME_GROUPS_CLAIM)
  private String groupsClaim;

  public static final String SERIALIZED_NAME_ISSUER_URI = "issuerUri";
  @SerializedName(SERIALIZED_NAME_ISSUER_URI)
  private String issuerUri;

  public static final String SERIALIZED_NAME_KUBECTL_REDIRECT_URI = "kubectlRedirectUri";
  @SerializedName(SERIALIZED_NAME_KUBECTL_REDIRECT_URI)
  private String kubectlRedirectUri;

  public static final String SERIALIZED_NAME_SCOPES = "scopes";
  @SerializedName(SERIALIZED_NAME_SCOPES)
  private String scopes;

  public static final String SERIALIZED_NAME_USER_CLAIM = "userClaim";
  @SerializedName(SERIALIZED_NAME_USER_CLAIM)
  private String userClaim;

  public static final String SERIALIZED_NAME_USER_PREFIX = "userPrefix";
  @SerializedName(SERIALIZED_NAME_USER_PREFIX)
  private String userPrefix;

  public IdentityServiceOidcConfig() {
  }

  public IdentityServiceOidcConfig(
     byte[] encryptedClientSecret
  ) {
    this();
    this.encryptedClientSecret = encryptedClientSecret;
  }

  public IdentityServiceOidcConfig certificateAuthorityData(String certificateAuthorityData) {
    this.certificateAuthorityData = certificateAuthorityData;
    return this;
  }

  /**
   * PEM-encoded CA for OIDC provider.
   * @return certificateAuthorityData
   */
  @javax.annotation.Nullable
  public String getCertificateAuthorityData() {
    return certificateAuthorityData;
  }

  public void setCertificateAuthorityData(String certificateAuthorityData) {
    this.certificateAuthorityData = certificateAuthorityData;
  }


  public IdentityServiceOidcConfig clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * ID for OIDC client application.
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public IdentityServiceOidcConfig clientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
    return this;
  }

  /**
   * Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
   * @return clientSecret
   */
  @javax.annotation.Nullable
  public String getClientSecret() {
    return clientSecret;
  }

  public void setClientSecret(String clientSecret) {
    this.clientSecret = clientSecret;
  }


  public IdentityServiceOidcConfig deployCloudConsoleProxy(Boolean deployCloudConsoleProxy) {
    this.deployCloudConsoleProxy = deployCloudConsoleProxy;
    return this;
  }

  /**
   * Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
   * @return deployCloudConsoleProxy
   */
  @javax.annotation.Nullable
  public Boolean getDeployCloudConsoleProxy() {
    return deployCloudConsoleProxy;
  }

  public void setDeployCloudConsoleProxy(Boolean deployCloudConsoleProxy) {
    this.deployCloudConsoleProxy = deployCloudConsoleProxy;
  }


  public IdentityServiceOidcConfig enableAccessToken(Boolean enableAccessToken) {
    this.enableAccessToken = enableAccessToken;
    return this;
  }

  /**
   * Enable access token.
   * @return enableAccessToken
   */
  @javax.annotation.Nullable
  public Boolean getEnableAccessToken() {
    return enableAccessToken;
  }

  public void setEnableAccessToken(Boolean enableAccessToken) {
    this.enableAccessToken = enableAccessToken;
  }


  /**
   * Output only. Encrypted OIDC Client secret
   * @return encryptedClientSecret
   */
  @javax.annotation.Nullable
  public byte[] getEncryptedClientSecret() {
    return encryptedClientSecret;
  }



  public IdentityServiceOidcConfig extraParams(String extraParams) {
    this.extraParams = extraParams;
    return this;
  }

  /**
   * Comma-separated list of key-value pairs.
   * @return extraParams
   */
  @javax.annotation.Nullable
  public String getExtraParams() {
    return extraParams;
  }

  public void setExtraParams(String extraParams) {
    this.extraParams = extraParams;
  }


  public IdentityServiceOidcConfig groupPrefix(String groupPrefix) {
    this.groupPrefix = groupPrefix;
    return this;
  }

  /**
   * Prefix to prepend to group name.
   * @return groupPrefix
   */
  @javax.annotation.Nullable
  public String getGroupPrefix() {
    return groupPrefix;
  }

  public void setGroupPrefix(String groupPrefix) {
    this.groupPrefix = groupPrefix;
  }


  public IdentityServiceOidcConfig groupsClaim(String groupsClaim) {
    this.groupsClaim = groupsClaim;
    return this;
  }

  /**
   * Claim in OIDC ID token that holds group information.
   * @return groupsClaim
   */
  @javax.annotation.Nullable
  public String getGroupsClaim() {
    return groupsClaim;
  }

  public void setGroupsClaim(String groupsClaim) {
    this.groupsClaim = groupsClaim;
  }


  public IdentityServiceOidcConfig issuerUri(String issuerUri) {
    this.issuerUri = issuerUri;
    return this;
  }

  /**
   * URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
   * @return issuerUri
   */
  @javax.annotation.Nullable
  public String getIssuerUri() {
    return issuerUri;
  }

  public void setIssuerUri(String issuerUri) {
    this.issuerUri = issuerUri;
  }


  public IdentityServiceOidcConfig kubectlRedirectUri(String kubectlRedirectUri) {
    this.kubectlRedirectUri = kubectlRedirectUri;
    return this;
  }

  /**
   * Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
   * @return kubectlRedirectUri
   */
  @javax.annotation.Nullable
  public String getKubectlRedirectUri() {
    return kubectlRedirectUri;
  }

  public void setKubectlRedirectUri(String kubectlRedirectUri) {
    this.kubectlRedirectUri = kubectlRedirectUri;
  }


  public IdentityServiceOidcConfig scopes(String scopes) {
    this.scopes = scopes;
    return this;
  }

  /**
   * Comma-separated list of identifiers.
   * @return scopes
   */
  @javax.annotation.Nullable
  public String getScopes() {
    return scopes;
  }

  public void setScopes(String scopes) {
    this.scopes = scopes;
  }


  public IdentityServiceOidcConfig userClaim(String userClaim) {
    this.userClaim = userClaim;
    return this;
  }

  /**
   * Claim in OIDC ID token that holds username.
   * @return userClaim
   */
  @javax.annotation.Nullable
  public String getUserClaim() {
    return userClaim;
  }

  public void setUserClaim(String userClaim) {
    this.userClaim = userClaim;
  }


  public IdentityServiceOidcConfig userPrefix(String userPrefix) {
    this.userPrefix = userPrefix;
    return this;
  }

  /**
   * Prefix to prepend to user name.
   * @return userPrefix
   */
  @javax.annotation.Nullable
  public String getUserPrefix() {
    return userPrefix;
  }

  public void setUserPrefix(String userPrefix) {
    this.userPrefix = userPrefix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IdentityServiceOidcConfig identityServiceOidcConfig = (IdentityServiceOidcConfig) o;
    return Objects.equals(this.certificateAuthorityData, identityServiceOidcConfig.certificateAuthorityData) &&
        Objects.equals(this.clientId, identityServiceOidcConfig.clientId) &&
        Objects.equals(this.clientSecret, identityServiceOidcConfig.clientSecret) &&
        Objects.equals(this.deployCloudConsoleProxy, identityServiceOidcConfig.deployCloudConsoleProxy) &&
        Objects.equals(this.enableAccessToken, identityServiceOidcConfig.enableAccessToken) &&
        Arrays.equals(this.encryptedClientSecret, identityServiceOidcConfig.encryptedClientSecret) &&
        Objects.equals(this.extraParams, identityServiceOidcConfig.extraParams) &&
        Objects.equals(this.groupPrefix, identityServiceOidcConfig.groupPrefix) &&
        Objects.equals(this.groupsClaim, identityServiceOidcConfig.groupsClaim) &&
        Objects.equals(this.issuerUri, identityServiceOidcConfig.issuerUri) &&
        Objects.equals(this.kubectlRedirectUri, identityServiceOidcConfig.kubectlRedirectUri) &&
        Objects.equals(this.scopes, identityServiceOidcConfig.scopes) &&
        Objects.equals(this.userClaim, identityServiceOidcConfig.userClaim) &&
        Objects.equals(this.userPrefix, identityServiceOidcConfig.userPrefix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateAuthorityData, clientId, clientSecret, deployCloudConsoleProxy, enableAccessToken, Arrays.hashCode(encryptedClientSecret), extraParams, groupPrefix, groupsClaim, issuerUri, kubectlRedirectUri, scopes, userClaim, userPrefix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IdentityServiceOidcConfig {\n");
    sb.append("    certificateAuthorityData: ").append(toIndentedString(certificateAuthorityData)).append("\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientSecret: ").append(toIndentedString(clientSecret)).append("\n");
    sb.append("    deployCloudConsoleProxy: ").append(toIndentedString(deployCloudConsoleProxy)).append("\n");
    sb.append("    enableAccessToken: ").append(toIndentedString(enableAccessToken)).append("\n");
    sb.append("    encryptedClientSecret: ").append(toIndentedString(encryptedClientSecret)).append("\n");
    sb.append("    extraParams: ").append(toIndentedString(extraParams)).append("\n");
    sb.append("    groupPrefix: ").append(toIndentedString(groupPrefix)).append("\n");
    sb.append("    groupsClaim: ").append(toIndentedString(groupsClaim)).append("\n");
    sb.append("    issuerUri: ").append(toIndentedString(issuerUri)).append("\n");
    sb.append("    kubectlRedirectUri: ").append(toIndentedString(kubectlRedirectUri)).append("\n");
    sb.append("    scopes: ").append(toIndentedString(scopes)).append("\n");
    sb.append("    userClaim: ").append(toIndentedString(userClaim)).append("\n");
    sb.append("    userPrefix: ").append(toIndentedString(userPrefix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("certificateAuthorityData");
    openapiFields.add("clientId");
    openapiFields.add("clientSecret");
    openapiFields.add("deployCloudConsoleProxy");
    openapiFields.add("enableAccessToken");
    openapiFields.add("encryptedClientSecret");
    openapiFields.add("extraParams");
    openapiFields.add("groupPrefix");
    openapiFields.add("groupsClaim");
    openapiFields.add("issuerUri");
    openapiFields.add("kubectlRedirectUri");
    openapiFields.add("scopes");
    openapiFields.add("userClaim");
    openapiFields.add("userPrefix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IdentityServiceOidcConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IdentityServiceOidcConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IdentityServiceOidcConfig is not found in the empty JSON string", IdentityServiceOidcConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IdentityServiceOidcConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IdentityServiceOidcConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificateAuthorityData") != null && !jsonObj.get("certificateAuthorityData").isJsonNull()) && !jsonObj.get("certificateAuthorityData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateAuthorityData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateAuthorityData").toString()));
      }
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientSecret") != null && !jsonObj.get("clientSecret").isJsonNull()) && !jsonObj.get("clientSecret").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientSecret` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientSecret").toString()));
      }
      if ((jsonObj.get("extraParams") != null && !jsonObj.get("extraParams").isJsonNull()) && !jsonObj.get("extraParams").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extraParams` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extraParams").toString()));
      }
      if ((jsonObj.get("groupPrefix") != null && !jsonObj.get("groupPrefix").isJsonNull()) && !jsonObj.get("groupPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupPrefix").toString()));
      }
      if ((jsonObj.get("groupsClaim") != null && !jsonObj.get("groupsClaim").isJsonNull()) && !jsonObj.get("groupsClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupsClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupsClaim").toString()));
      }
      if ((jsonObj.get("issuerUri") != null && !jsonObj.get("issuerUri").isJsonNull()) && !jsonObj.get("issuerUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuerUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuerUri").toString()));
      }
      if ((jsonObj.get("kubectlRedirectUri") != null && !jsonObj.get("kubectlRedirectUri").isJsonNull()) && !jsonObj.get("kubectlRedirectUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kubectlRedirectUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kubectlRedirectUri").toString()));
      }
      if ((jsonObj.get("scopes") != null && !jsonObj.get("scopes").isJsonNull()) && !jsonObj.get("scopes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scopes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scopes").toString()));
      }
      if ((jsonObj.get("userClaim") != null && !jsonObj.get("userClaim").isJsonNull()) && !jsonObj.get("userClaim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userClaim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userClaim").toString()));
      }
      if ((jsonObj.get("userPrefix") != null && !jsonObj.get("userPrefix").isJsonNull()) && !jsonObj.get("userPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userPrefix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IdentityServiceOidcConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IdentityServiceOidcConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IdentityServiceOidcConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IdentityServiceOidcConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IdentityServiceOidcConfig>() {
           @Override
           public void write(JsonWriter out, IdentityServiceOidcConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IdentityServiceOidcConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IdentityServiceOidcConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IdentityServiceOidcConfig
   * @throws IOException if the JSON string is invalid with respect to IdentityServiceOidcConfig
   */
  public static IdentityServiceOidcConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IdentityServiceOidcConfig.class);
  }

  /**
   * Convert an instance of IdentityServiceOidcConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

