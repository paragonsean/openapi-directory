/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Feature;
import org.openapitools.client.model.Fleet;
import org.openapitools.client.model.GenerateConnectManifestResponse;
import org.openapitools.client.model.GenerateMembershipRBACRoleBindingYAMLResponse;
import org.openapitools.client.model.ListFeaturesResponse;
import org.openapitools.client.model.ListFleetsResponse;
import org.openapitools.client.model.ListLocationsResponse;
import org.openapitools.client.model.ListMembershipBindingsResponse;
import org.openapitools.client.model.ListMembershipsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListScopeNamespacesResponse;
import org.openapitools.client.model.ListScopeRBACRoleBindingsResponse;
import org.openapitools.client.model.ListScopesResponse;
import org.openapitools.client.model.Membership;
import org.openapitools.client.model.MembershipBinding;
import org.openapitools.client.model.Namespace;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.RBACRoleBinding;
import org.openapitools.client.model.Scope;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Adds a new Feature.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsFeaturesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String featureId = null;
        String requestId = null;
        Feature feature = null;
        Operation response = api.gkehubProjectsLocationsFeaturesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, featureId, requestId, feature);
        // TODO: test validations
    }

    /**
     * Lists Features in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsFeaturesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFeaturesResponse response = api.gkehubProjectsLocationsFeaturesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a fleet.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsFleetsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Fleet fleet = null;
        Operation response = api.gkehubProjectsLocationsFleetsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, fleet);
        // TODO: test validations
    }

    /**
     * Returns all fleets within an organization or a project that the caller has access to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsFleetsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFleetsResponse response = api.gkehubProjectsLocationsFleetsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists information about the supported locations for this service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListLocationsResponse response = api.gkehubProjectsLocationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a MembershipBinding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsMembershipsBindingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String membershipBindingId = null;
        MembershipBinding membershipBinding = null;
        Operation response = api.gkehubProjectsLocationsMembershipsBindingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, membershipBindingId, membershipBinding);
        // TODO: test validations
    }

    /**
     * Lists MembershipBindings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsMembershipsBindingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMembershipBindingsResponse response = api.gkehubProjectsLocationsMembershipsBindingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new Membership. **This is currently only supported for GKE clusters on Google Cloud**. To register other clusters, follow the instructions at https://cloud.google.com/anthos/multicluster-management/connect/registering-a-cluster.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsMembershipsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String membershipId = null;
        String requestId = null;
        Membership membership = null;
        Operation response = api.gkehubProjectsLocationsMembershipsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, membershipId, requestId, membership);
        // TODO: test validations
    }

    /**
     * Generates the manifest for deployment of the GKE connect agent. **This method is used internally by Google-provided libraries.** Most clients should not need to call this method directly.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsMembershipsGenerateConnectManifestTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String imagePullSecretContent = null;
        Boolean isUpgrade = null;
        String namespace = null;
        String proxy = null;
        String registry = null;
        String version = null;
        GenerateConnectManifestResponse response = api.gkehubProjectsLocationsMembershipsGenerateConnectManifest(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, imagePullSecretContent, isUpgrade, namespace, proxy, registry, version);
        // TODO: test validations
    }

    /**
     * Lists Memberships in a given project and location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsMembershipsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListMembershipsResponse response = api.gkehubProjectsLocationsMembershipsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Generates a YAML of the RBAC policies for the specified RoleBinding and its associated impersonation resources.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsMembershipsRbacrolebindingsGenerateMembershipRBACRoleBindingYAMLTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String rbacrolebindingId = null;
        RBACRoleBinding rbACRoleBinding = null;
        GenerateMembershipRBACRoleBindingYAMLResponse response = api.gkehubProjectsLocationsMembershipsRbacrolebindingsGenerateMembershipRBACRoleBindingYAML(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rbacrolebindingId, rbACRoleBinding);
        // TODO: test validations
    }

    /**
     * Starts asynchronous cancellation on a long-running operation. The server makes a best effort to cancel the operation, but success is not guaranteed. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;. Clients can use Operations.GetOperation or other methods to check whether the cancellation succeeded or whether the operation completed despite cancellation. On successful cancellation, the operation is not deleted; instead, it becomes an operation with an Operation.error value with a google.rpc.Status.code of 1, corresponding to &#x60;Code.CANCELLED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsOperationsCancelTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Object response = api.gkehubProjectsLocationsOperationsCancel(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.gkehubProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a Scope.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String scopeId = null;
        Scope scope = null;
        Operation response = api.gkehubProjectsLocationsScopesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, scopeId, scope);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer optionsRequestedPolicyVersion = null;
        Policy response = api.gkehubProjectsLocationsScopesGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, optionsRequestedPolicyVersion);
        // TODO: test validations
    }

    /**
     * Lists Scopes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListScopesResponse response = api.gkehubProjectsLocationsScopesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a fleet namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesNamespacesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String scopeNamespaceId = null;
        Namespace namespace = null;
        Operation response = api.gkehubProjectsLocationsScopesNamespacesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, scopeNamespaceId, namespace);
        // TODO: test validations
    }

    /**
     * Lists fleet namespaces.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesNamespacesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListScopeNamespacesResponse response = api.gkehubProjectsLocationsScopesNamespacesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a Scope RBACRoleBinding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesRbacrolebindingsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String rbacrolebindingId = null;
        RBACRoleBinding rbACRoleBinding = null;
        Operation response = api.gkehubProjectsLocationsScopesRbacrolebindingsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rbacrolebindingId, rbACRoleBinding);
        // TODO: test validations
    }

    /**
     * Deletes a Scope RBACRoleBinding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesRbacrolebindingsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean force = null;
        String requestId = null;
        Operation response = api.gkehubProjectsLocationsScopesRbacrolebindingsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, force, requestId);
        // TODO: test validations
    }

    /**
     * Returns the details of a Scope RBACRoleBinding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesRbacrolebindingsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RBACRoleBinding response = api.gkehubProjectsLocationsScopesRbacrolebindingsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all Scope RBACRoleBindings.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesRbacrolebindingsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListScopeRBACRoleBindingsResponse response = api.gkehubProjectsLocationsScopesRbacrolebindingsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a Scope RBACRoleBinding.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesRbacrolebindingsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        RBACRoleBinding rbACRoleBinding = null;
        Operation response = api.gkehubProjectsLocationsScopesRbacrolebindingsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, rbACRoleBinding);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.gkehubProjectsLocationsScopesSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void gkehubProjectsLocationsScopesTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.gkehubProjectsLocationsScopesTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

}
