/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PolicyControllerOnClusterState model module.
 * @module model/PolicyControllerOnClusterState
 * @version v1beta
 */
class PolicyControllerOnClusterState {
    /**
     * Constructs a new <code>PolicyControllerOnClusterState</code>.
     * OnClusterState represents the state of a sub-component of Policy Controller.
     * @alias module:model/PolicyControllerOnClusterState
     */
    constructor() { 
        
        PolicyControllerOnClusterState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyControllerOnClusterState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyControllerOnClusterState} obj Optional instance to populate.
     * @return {module:model/PolicyControllerOnClusterState} The populated <code>PolicyControllerOnClusterState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyControllerOnClusterState();

            if (data.hasOwnProperty('details')) {
                obj['details'] = ApiClient.convertToType(data['details'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyControllerOnClusterState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyControllerOnClusterState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['details'] && !(typeof data['details'] === 'string' || data['details'] instanceof String)) {
            throw new Error("Expected the field `details` to be a primitive type in the JSON string but got " + data['details']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Surface potential errors or information logs.
 * @member {String} details
 */
PolicyControllerOnClusterState.prototype['details'] = undefined;

/**
 * The lifecycle state of this component.
 * @member {module:model/PolicyControllerOnClusterState.StateEnum} state
 */
PolicyControllerOnClusterState.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
PolicyControllerOnClusterState['StateEnum'] = {

    /**
     * value: "LIFECYCLE_STATE_UNSPECIFIED"
     * @const
     */
    "LIFECYCLE_STATE_UNSPECIFIED": "LIFECYCLE_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLING"
     * @const
     */
    "INSTALLING": "INSTALLING",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "UPDATING"
     * @const
     */
    "UPDATING": "UPDATING",

    /**
     * value: "DECOMMISSIONING"
     * @const
     */
    "DECOMMISSIONING": "DECOMMISSIONING",

    /**
     * value: "CLUSTER_ERROR"
     * @const
     */
    "CLUSTER_ERROR": "CLUSTER_ERROR",

    /**
     * value: "HUB_ERROR"
     * @const
     */
    "HUB_ERROR": "HUB_ERROR",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED",

    /**
     * value: "DETACHED"
     * @const
     */
    "DETACHED": "DETACHED"
};



export default PolicyControllerOnClusterState;

