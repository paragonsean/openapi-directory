/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementErrorResource from './ConfigManagementErrorResource';

/**
 * The ConfigManagementSyncError model module.
 * @module model/ConfigManagementSyncError
 * @version v1beta
 */
class ConfigManagementSyncError {
    /**
     * Constructs a new <code>ConfigManagementSyncError</code>.
     * An ACM created error representing a problem syncing configurations
     * @alias module:model/ConfigManagementSyncError
     */
    constructor() { 
        
        ConfigManagementSyncError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementSyncError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementSyncError} obj Optional instance to populate.
     * @return {module:model/ConfigManagementSyncError} The populated <code>ConfigManagementSyncError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementSyncError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('errorMessage')) {
                obj['errorMessage'] = ApiClient.convertToType(data['errorMessage'], 'String');
            }
            if (data.hasOwnProperty('errorResources')) {
                obj['errorResources'] = ApiClient.convertToType(data['errorResources'], [ConfigManagementErrorResource]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementSyncError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementSyncError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['errorMessage'] && !(typeof data['errorMessage'] === 'string' || data['errorMessage'] instanceof String)) {
            throw new Error("Expected the field `errorMessage` to be a primitive type in the JSON string but got " + data['errorMessage']);
        }
        if (data['errorResources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errorResources'])) {
                throw new Error("Expected the field `errorResources` to be an array in the JSON data but got " + data['errorResources']);
            }
            // validate the optional field `errorResources` (array)
            for (const item of data['errorResources']) {
                ConfigManagementErrorResource.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * An ACM defined error code
 * @member {String} code
 */
ConfigManagementSyncError.prototype['code'] = undefined;

/**
 * A description of the error
 * @member {String} errorMessage
 */
ConfigManagementSyncError.prototype['errorMessage'] = undefined;

/**
 * A list of config(s) associated with the error, if any
 * @member {Array.<module:model/ConfigManagementErrorResource>} errorResources
 */
ConfigManagementSyncError.prototype['errorResources'] = undefined;






export default ConfigManagementSyncError;

