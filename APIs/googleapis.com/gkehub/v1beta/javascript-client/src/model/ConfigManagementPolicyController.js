/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementPolicyControllerMonitoring from './ConfigManagementPolicyControllerMonitoring';

/**
 * The ConfigManagementPolicyController model module.
 * @module model/ConfigManagementPolicyController
 * @version v1beta
 */
class ConfigManagementPolicyController {
    /**
     * Constructs a new <code>ConfigManagementPolicyController</code>.
     * Configuration for Policy Controller
     * @alias module:model/ConfigManagementPolicyController
     */
    constructor() { 
        
        ConfigManagementPolicyController.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementPolicyController</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementPolicyController} obj Optional instance to populate.
     * @return {module:model/ConfigManagementPolicyController} The populated <code>ConfigManagementPolicyController</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementPolicyController();

            if (data.hasOwnProperty('auditIntervalSeconds')) {
                obj['auditIntervalSeconds'] = ApiClient.convertToType(data['auditIntervalSeconds'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('exemptableNamespaces')) {
                obj['exemptableNamespaces'] = ApiClient.convertToType(data['exemptableNamespaces'], ['String']);
            }
            if (data.hasOwnProperty('logDeniesEnabled')) {
                obj['logDeniesEnabled'] = ApiClient.convertToType(data['logDeniesEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('monitoring')) {
                obj['monitoring'] = ConfigManagementPolicyControllerMonitoring.constructFromObject(data['monitoring']);
            }
            if (data.hasOwnProperty('mutationEnabled')) {
                obj['mutationEnabled'] = ApiClient.convertToType(data['mutationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('referentialRulesEnabled')) {
                obj['referentialRulesEnabled'] = ApiClient.convertToType(data['referentialRulesEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('templateLibraryInstalled')) {
                obj['templateLibraryInstalled'] = ApiClient.convertToType(data['templateLibraryInstalled'], 'Boolean');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementPolicyController</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementPolicyController</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['auditIntervalSeconds'] && !(typeof data['auditIntervalSeconds'] === 'string' || data['auditIntervalSeconds'] instanceof String)) {
            throw new Error("Expected the field `auditIntervalSeconds` to be a primitive type in the JSON string but got " + data['auditIntervalSeconds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exemptableNamespaces'])) {
            throw new Error("Expected the field `exemptableNamespaces` to be an array in the JSON data but got " + data['exemptableNamespaces']);
        }
        // validate the optional field `monitoring`
        if (data['monitoring']) { // data not null
          ConfigManagementPolicyControllerMonitoring.validateJSON(data['monitoring']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
 * @member {String} auditIntervalSeconds
 */
ConfigManagementPolicyController.prototype['auditIntervalSeconds'] = undefined;

/**
 * Enables the installation of Policy Controller. If false, the rest of PolicyController fields take no effect.
 * @member {Boolean} enabled
 */
ConfigManagementPolicyController.prototype['enabled'] = undefined;

/**
 * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
 * @member {Array.<String>} exemptableNamespaces
 */
ConfigManagementPolicyController.prototype['exemptableNamespaces'] = undefined;

/**
 * Logs all denies and dry run failures.
 * @member {Boolean} logDeniesEnabled
 */
ConfigManagementPolicyController.prototype['logDeniesEnabled'] = undefined;

/**
 * @member {module:model/ConfigManagementPolicyControllerMonitoring} monitoring
 */
ConfigManagementPolicyController.prototype['monitoring'] = undefined;

/**
 * Enable or disable mutation in policy controller. If true, mutation CRDs, webhook and controller deployment will be deployed to the cluster.
 * @member {Boolean} mutationEnabled
 */
ConfigManagementPolicyController.prototype['mutationEnabled'] = undefined;

/**
 * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
 * @member {Boolean} referentialRulesEnabled
 */
ConfigManagementPolicyController.prototype['referentialRulesEnabled'] = undefined;

/**
 * Installs the default template library along with Policy Controller.
 * @member {Boolean} templateLibraryInstalled
 */
ConfigManagementPolicyController.prototype['templateLibraryInstalled'] = undefined;

/**
 * Output only. Last time this membership spec was updated.
 * @member {String} updateTime
 */
ConfigManagementPolicyController.prototype['updateTime'] = undefined;






export default ConfigManagementPolicyController;

