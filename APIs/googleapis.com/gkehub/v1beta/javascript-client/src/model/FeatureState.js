/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeatureState model module.
 * @module model/FeatureState
 * @version v1beta
 */
class FeatureState {
    /**
     * Constructs a new <code>FeatureState</code>.
     * FeatureState describes the high-level state of a Feature. It may be used to describe a Feature&#39;s state at the environ-level, or per-membershop, depending on the context.
     * @alias module:model/FeatureState
     */
    constructor() { 
        
        FeatureState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeatureState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeatureState} obj Optional instance to populate.
     * @return {module:model/FeatureState} The populated <code>FeatureState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeatureState();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeatureState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeatureState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * The high-level, machine-readable status of this Feature.
 * @member {module:model/FeatureState.CodeEnum} code
 */
FeatureState.prototype['code'] = undefined;

/**
 * A human-readable description of the current status.
 * @member {String} description
 */
FeatureState.prototype['description'] = undefined;

/**
 * The time this status and any related Feature-specific details were updated.
 * @member {String} updateTime
 */
FeatureState.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
FeatureState['CodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "WARNING"
     * @const
     */
    "WARNING": "WARNING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default FeatureState;

