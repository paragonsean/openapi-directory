/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IdentityServiceOidcConfig model module.
 * @module model/IdentityServiceOidcConfig
 * @version v1beta
 */
class IdentityServiceOidcConfig {
    /**
     * Constructs a new <code>IdentityServiceOidcConfig</code>.
     * Configuration for OIDC Auth flow.
     * @alias module:model/IdentityServiceOidcConfig
     */
    constructor() { 
        
        IdentityServiceOidcConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IdentityServiceOidcConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IdentityServiceOidcConfig} obj Optional instance to populate.
     * @return {module:model/IdentityServiceOidcConfig} The populated <code>IdentityServiceOidcConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IdentityServiceOidcConfig();

            if (data.hasOwnProperty('certificateAuthorityData')) {
                obj['certificateAuthorityData'] = ApiClient.convertToType(data['certificateAuthorityData'], 'String');
            }
            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientSecret')) {
                obj['clientSecret'] = ApiClient.convertToType(data['clientSecret'], 'String');
            }
            if (data.hasOwnProperty('deployCloudConsoleProxy')) {
                obj['deployCloudConsoleProxy'] = ApiClient.convertToType(data['deployCloudConsoleProxy'], 'Boolean');
            }
            if (data.hasOwnProperty('enableAccessToken')) {
                obj['enableAccessToken'] = ApiClient.convertToType(data['enableAccessToken'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptedClientSecret')) {
                obj['encryptedClientSecret'] = ApiClient.convertToType(data['encryptedClientSecret'], 'Blob');
            }
            if (data.hasOwnProperty('extraParams')) {
                obj['extraParams'] = ApiClient.convertToType(data['extraParams'], 'String');
            }
            if (data.hasOwnProperty('groupPrefix')) {
                obj['groupPrefix'] = ApiClient.convertToType(data['groupPrefix'], 'String');
            }
            if (data.hasOwnProperty('groupsClaim')) {
                obj['groupsClaim'] = ApiClient.convertToType(data['groupsClaim'], 'String');
            }
            if (data.hasOwnProperty('issuerUri')) {
                obj['issuerUri'] = ApiClient.convertToType(data['issuerUri'], 'String');
            }
            if (data.hasOwnProperty('kubectlRedirectUri')) {
                obj['kubectlRedirectUri'] = ApiClient.convertToType(data['kubectlRedirectUri'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], 'String');
            }
            if (data.hasOwnProperty('userClaim')) {
                obj['userClaim'] = ApiClient.convertToType(data['userClaim'], 'String');
            }
            if (data.hasOwnProperty('userPrefix')) {
                obj['userPrefix'] = ApiClient.convertToType(data['userPrefix'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IdentityServiceOidcConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IdentityServiceOidcConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['certificateAuthorityData'] && !(typeof data['certificateAuthorityData'] === 'string' || data['certificateAuthorityData'] instanceof String)) {
            throw new Error("Expected the field `certificateAuthorityData` to be a primitive type in the JSON string but got " + data['certificateAuthorityData']);
        }
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientSecret'] && !(typeof data['clientSecret'] === 'string' || data['clientSecret'] instanceof String)) {
            throw new Error("Expected the field `clientSecret` to be a primitive type in the JSON string but got " + data['clientSecret']);
        }
        // ensure the json data is a string
        if (data['extraParams'] && !(typeof data['extraParams'] === 'string' || data['extraParams'] instanceof String)) {
            throw new Error("Expected the field `extraParams` to be a primitive type in the JSON string but got " + data['extraParams']);
        }
        // ensure the json data is a string
        if (data['groupPrefix'] && !(typeof data['groupPrefix'] === 'string' || data['groupPrefix'] instanceof String)) {
            throw new Error("Expected the field `groupPrefix` to be a primitive type in the JSON string but got " + data['groupPrefix']);
        }
        // ensure the json data is a string
        if (data['groupsClaim'] && !(typeof data['groupsClaim'] === 'string' || data['groupsClaim'] instanceof String)) {
            throw new Error("Expected the field `groupsClaim` to be a primitive type in the JSON string but got " + data['groupsClaim']);
        }
        // ensure the json data is a string
        if (data['issuerUri'] && !(typeof data['issuerUri'] === 'string' || data['issuerUri'] instanceof String)) {
            throw new Error("Expected the field `issuerUri` to be a primitive type in the JSON string but got " + data['issuerUri']);
        }
        // ensure the json data is a string
        if (data['kubectlRedirectUri'] && !(typeof data['kubectlRedirectUri'] === 'string' || data['kubectlRedirectUri'] instanceof String)) {
            throw new Error("Expected the field `kubectlRedirectUri` to be a primitive type in the JSON string but got " + data['kubectlRedirectUri']);
        }
        // ensure the json data is a string
        if (data['scopes'] && !(typeof data['scopes'] === 'string' || data['scopes'] instanceof String)) {
            throw new Error("Expected the field `scopes` to be a primitive type in the JSON string but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['userClaim'] && !(typeof data['userClaim'] === 'string' || data['userClaim'] instanceof String)) {
            throw new Error("Expected the field `userClaim` to be a primitive type in the JSON string but got " + data['userClaim']);
        }
        // ensure the json data is a string
        if (data['userPrefix'] && !(typeof data['userPrefix'] === 'string' || data['userPrefix'] instanceof String)) {
            throw new Error("Expected the field `userPrefix` to be a primitive type in the JSON string but got " + data['userPrefix']);
        }

        return true;
    }


}



/**
 * PEM-encoded CA for OIDC provider.
 * @member {String} certificateAuthorityData
 */
IdentityServiceOidcConfig.prototype['certificateAuthorityData'] = undefined;

/**
 * ID for OIDC client application.
 * @member {String} clientId
 */
IdentityServiceOidcConfig.prototype['clientId'] = undefined;

/**
 * Input only. Unencrypted OIDC client secret will be passed to the GKE Hub CLH.
 * @member {String} clientSecret
 */
IdentityServiceOidcConfig.prototype['clientSecret'] = undefined;

/**
 * Flag to denote if reverse proxy is used to connect to auth provider. This flag should be set to true when provider is not reachable by Google Cloud Console.
 * @member {Boolean} deployCloudConsoleProxy
 */
IdentityServiceOidcConfig.prototype['deployCloudConsoleProxy'] = undefined;

/**
 * Enable access token.
 * @member {Boolean} enableAccessToken
 */
IdentityServiceOidcConfig.prototype['enableAccessToken'] = undefined;

/**
 * Output only. Encrypted OIDC Client secret
 * @member {Blob} encryptedClientSecret
 */
IdentityServiceOidcConfig.prototype['encryptedClientSecret'] = undefined;

/**
 * Comma-separated list of key-value pairs.
 * @member {String} extraParams
 */
IdentityServiceOidcConfig.prototype['extraParams'] = undefined;

/**
 * Prefix to prepend to group name.
 * @member {String} groupPrefix
 */
IdentityServiceOidcConfig.prototype['groupPrefix'] = undefined;

/**
 * Claim in OIDC ID token that holds group information.
 * @member {String} groupsClaim
 */
IdentityServiceOidcConfig.prototype['groupsClaim'] = undefined;

/**
 * URI for the OIDC provider. This should point to the level below .well-known/openid-configuration.
 * @member {String} issuerUri
 */
IdentityServiceOidcConfig.prototype['issuerUri'] = undefined;

/**
 * Registered redirect uri to redirect users going through OAuth flow using kubectl plugin.
 * @member {String} kubectlRedirectUri
 */
IdentityServiceOidcConfig.prototype['kubectlRedirectUri'] = undefined;

/**
 * Comma-separated list of identifiers.
 * @member {String} scopes
 */
IdentityServiceOidcConfig.prototype['scopes'] = undefined;

/**
 * Claim in OIDC ID token that holds username.
 * @member {String} userClaim
 */
IdentityServiceOidcConfig.prototype['userClaim'] = undefined;

/**
 * Prefix to prepend to user name.
 * @member {String} userPrefix
 */
IdentityServiceOidcConfig.prototype['userPrefix'] = undefined;






export default IdentityServiceOidcConfig;

