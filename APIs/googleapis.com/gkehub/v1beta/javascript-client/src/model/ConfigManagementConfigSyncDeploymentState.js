/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigManagementConfigSyncDeploymentState model module.
 * @module model/ConfigManagementConfigSyncDeploymentState
 * @version v1beta
 */
class ConfigManagementConfigSyncDeploymentState {
    /**
     * Constructs a new <code>ConfigManagementConfigSyncDeploymentState</code>.
     * The state of ConfigSync&#39;s deployment on a cluster
     * @alias module:model/ConfigManagementConfigSyncDeploymentState
     */
    constructor() { 
        
        ConfigManagementConfigSyncDeploymentState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementConfigSyncDeploymentState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementConfigSyncDeploymentState} obj Optional instance to populate.
     * @return {module:model/ConfigManagementConfigSyncDeploymentState} The populated <code>ConfigManagementConfigSyncDeploymentState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementConfigSyncDeploymentState();

            if (data.hasOwnProperty('admissionWebhook')) {
                obj['admissionWebhook'] = ApiClient.convertToType(data['admissionWebhook'], 'String');
            }
            if (data.hasOwnProperty('gitSync')) {
                obj['gitSync'] = ApiClient.convertToType(data['gitSync'], 'String');
            }
            if (data.hasOwnProperty('importer')) {
                obj['importer'] = ApiClient.convertToType(data['importer'], 'String');
            }
            if (data.hasOwnProperty('monitor')) {
                obj['monitor'] = ApiClient.convertToType(data['monitor'], 'String');
            }
            if (data.hasOwnProperty('reconcilerManager')) {
                obj['reconcilerManager'] = ApiClient.convertToType(data['reconcilerManager'], 'String');
            }
            if (data.hasOwnProperty('rootReconciler')) {
                obj['rootReconciler'] = ApiClient.convertToType(data['rootReconciler'], 'String');
            }
            if (data.hasOwnProperty('syncer')) {
                obj['syncer'] = ApiClient.convertToType(data['syncer'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementConfigSyncDeploymentState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementConfigSyncDeploymentState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['admissionWebhook'] && !(typeof data['admissionWebhook'] === 'string' || data['admissionWebhook'] instanceof String)) {
            throw new Error("Expected the field `admissionWebhook` to be a primitive type in the JSON string but got " + data['admissionWebhook']);
        }
        // ensure the json data is a string
        if (data['gitSync'] && !(typeof data['gitSync'] === 'string' || data['gitSync'] instanceof String)) {
            throw new Error("Expected the field `gitSync` to be a primitive type in the JSON string but got " + data['gitSync']);
        }
        // ensure the json data is a string
        if (data['importer'] && !(typeof data['importer'] === 'string' || data['importer'] instanceof String)) {
            throw new Error("Expected the field `importer` to be a primitive type in the JSON string but got " + data['importer']);
        }
        // ensure the json data is a string
        if (data['monitor'] && !(typeof data['monitor'] === 'string' || data['monitor'] instanceof String)) {
            throw new Error("Expected the field `monitor` to be a primitive type in the JSON string but got " + data['monitor']);
        }
        // ensure the json data is a string
        if (data['reconcilerManager'] && !(typeof data['reconcilerManager'] === 'string' || data['reconcilerManager'] instanceof String)) {
            throw new Error("Expected the field `reconcilerManager` to be a primitive type in the JSON string but got " + data['reconcilerManager']);
        }
        // ensure the json data is a string
        if (data['rootReconciler'] && !(typeof data['rootReconciler'] === 'string' || data['rootReconciler'] instanceof String)) {
            throw new Error("Expected the field `rootReconciler` to be a primitive type in the JSON string but got " + data['rootReconciler']);
        }
        // ensure the json data is a string
        if (data['syncer'] && !(typeof data['syncer'] === 'string' || data['syncer'] instanceof String)) {
            throw new Error("Expected the field `syncer` to be a primitive type in the JSON string but got " + data['syncer']);
        }

        return true;
    }


}



/**
 * Deployment state of admission-webhook
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.AdmissionWebhookEnum} admissionWebhook
 */
ConfigManagementConfigSyncDeploymentState.prototype['admissionWebhook'] = undefined;

/**
 * Deployment state of the git-sync pod
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.GitSyncEnum} gitSync
 */
ConfigManagementConfigSyncDeploymentState.prototype['gitSync'] = undefined;

/**
 * Deployment state of the importer pod
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.ImporterEnum} importer
 */
ConfigManagementConfigSyncDeploymentState.prototype['importer'] = undefined;

/**
 * Deployment state of the monitor pod
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.MonitorEnum} monitor
 */
ConfigManagementConfigSyncDeploymentState.prototype['monitor'] = undefined;

/**
 * Deployment state of reconciler-manager pod
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.ReconcilerManagerEnum} reconcilerManager
 */
ConfigManagementConfigSyncDeploymentState.prototype['reconcilerManager'] = undefined;

/**
 * Deployment state of root-reconciler
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.RootReconcilerEnum} rootReconciler
 */
ConfigManagementConfigSyncDeploymentState.prototype['rootReconciler'] = undefined;

/**
 * Deployment state of the syncer pod
 * @member {module:model/ConfigManagementConfigSyncDeploymentState.SyncerEnum} syncer
 */
ConfigManagementConfigSyncDeploymentState.prototype['syncer'] = undefined;





/**
 * Allowed values for the <code>admissionWebhook</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['AdmissionWebhookEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};


/**
 * Allowed values for the <code>gitSync</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['GitSyncEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};


/**
 * Allowed values for the <code>importer</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['ImporterEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};


/**
 * Allowed values for the <code>monitor</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['MonitorEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};


/**
 * Allowed values for the <code>reconcilerManager</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['ReconcilerManagerEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};


/**
 * Allowed values for the <code>rootReconciler</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['RootReconcilerEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};


/**
 * Allowed values for the <code>syncer</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncDeploymentState['SyncerEnum'] = {

    /**
     * value: "DEPLOYMENT_STATE_UNSPECIFIED"
     * @const
     */
    "DEPLOYMENT_STATE_UNSPECIFIED": "DEPLOYMENT_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING"
};



export default ConfigManagementConfigSyncDeploymentState;

