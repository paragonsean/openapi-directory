/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementSyncError from './ConfigManagementSyncError';

/**
 * The ConfigManagementSyncState model module.
 * @module model/ConfigManagementSyncState
 * @version v1beta
 */
class ConfigManagementSyncState {
    /**
     * Constructs a new <code>ConfigManagementSyncState</code>.
     * State indicating an ACM&#39;s progress syncing configurations to a cluster
     * @alias module:model/ConfigManagementSyncState
     */
    constructor() { 
        
        ConfigManagementSyncState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementSyncState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementSyncState} obj Optional instance to populate.
     * @return {module:model/ConfigManagementSyncState} The populated <code>ConfigManagementSyncState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementSyncState();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ConfigManagementSyncError]);
            }
            if (data.hasOwnProperty('importToken')) {
                obj['importToken'] = ApiClient.convertToType(data['importToken'], 'String');
            }
            if (data.hasOwnProperty('lastSync')) {
                obj['lastSync'] = ApiClient.convertToType(data['lastSync'], 'String');
            }
            if (data.hasOwnProperty('lastSyncTime')) {
                obj['lastSyncTime'] = ApiClient.convertToType(data['lastSyncTime'], 'String');
            }
            if (data.hasOwnProperty('sourceToken')) {
                obj['sourceToken'] = ApiClient.convertToType(data['sourceToken'], 'String');
            }
            if (data.hasOwnProperty('syncToken')) {
                obj['syncToken'] = ApiClient.convertToType(data['syncToken'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementSyncState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementSyncState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ConfigManagementSyncError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['importToken'] && !(typeof data['importToken'] === 'string' || data['importToken'] instanceof String)) {
            throw new Error("Expected the field `importToken` to be a primitive type in the JSON string but got " + data['importToken']);
        }
        // ensure the json data is a string
        if (data['lastSync'] && !(typeof data['lastSync'] === 'string' || data['lastSync'] instanceof String)) {
            throw new Error("Expected the field `lastSync` to be a primitive type in the JSON string but got " + data['lastSync']);
        }
        // ensure the json data is a string
        if (data['lastSyncTime'] && !(typeof data['lastSyncTime'] === 'string' || data['lastSyncTime'] instanceof String)) {
            throw new Error("Expected the field `lastSyncTime` to be a primitive type in the JSON string but got " + data['lastSyncTime']);
        }
        // ensure the json data is a string
        if (data['sourceToken'] && !(typeof data['sourceToken'] === 'string' || data['sourceToken'] instanceof String)) {
            throw new Error("Expected the field `sourceToken` to be a primitive type in the JSON string but got " + data['sourceToken']);
        }
        // ensure the json data is a string
        if (data['syncToken'] && !(typeof data['syncToken'] === 'string' || data['syncToken'] instanceof String)) {
            throw new Error("Expected the field `syncToken` to be a primitive type in the JSON string but got " + data['syncToken']);
        }

        return true;
    }


}



/**
 * Sync status code
 * @member {module:model/ConfigManagementSyncState.CodeEnum} code
 */
ConfigManagementSyncState.prototype['code'] = undefined;

/**
 * A list of errors resulting from problematic configs. This list will be truncated after 100 errors, although it is unlikely for that many errors to simultaneously exist.
 * @member {Array.<module:model/ConfigManagementSyncError>} errors
 */
ConfigManagementSyncState.prototype['errors'] = undefined;

/**
 * Token indicating the state of the importer.
 * @member {String} importToken
 */
ConfigManagementSyncState.prototype['importToken'] = undefined;

/**
 * Deprecated: use last_sync_time instead. Timestamp of when ACM last successfully synced the repo The time format is specified in https://golang.org/pkg/time/#Time.String
 * @member {String} lastSync
 */
ConfigManagementSyncState.prototype['lastSync'] = undefined;

/**
 * Timestamp type of when ACM last successfully synced the repo
 * @member {String} lastSyncTime
 */
ConfigManagementSyncState.prototype['lastSyncTime'] = undefined;

/**
 * Token indicating the state of the repo.
 * @member {String} sourceToken
 */
ConfigManagementSyncState.prototype['sourceToken'] = undefined;

/**
 * Token indicating the state of the syncer.
 * @member {String} syncToken
 */
ConfigManagementSyncState.prototype['syncToken'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementSyncState['CodeEnum'] = {

    /**
     * value: "SYNC_CODE_UNSPECIFIED"
     * @const
     */
    "SYNC_CODE_UNSPECIFIED": "SYNC_CODE_UNSPECIFIED",

    /**
     * value: "SYNCED"
     * @const
     */
    "SYNCED": "SYNCED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR",

    /**
     * value: "NOT_CONFIGURED"
     * @const
     */
    "NOT_CONFIGURED": "NOT_CONFIGURED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "UNAUTHORIZED"
     * @const
     */
    "UNAUTHORIZED": "UNAUTHORIZED",

    /**
     * value: "UNREACHABLE"
     * @const
     */
    "UNREACHABLE": "UNREACHABLE"
};



export default ConfigManagementSyncState;

