/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScope.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScope::OAIScope(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScope::OAIScope() {
    this->initializeModel();
}

OAIScope::~OAIScope() {}

void OAIScope::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_namespace_labels_isSet = false;
    m_namespace_labels_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_uid_isSet = false;
    m_uid_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIScope::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScope::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_namespace_labels_isValid = ::OpenAPI::fromJsonValue(m_namespace_labels, json[QString("namespaceLabels")]);
    m_namespace_labels_isSet = !json[QString("namespaceLabels")].isNull() && m_namespace_labels_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_uid_isValid = ::OpenAPI::fromJsonValue(m_uid, json[QString("uid")]);
    m_uid_isSet = !json[QString("uid")].isNull() && m_uid_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIScope::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScope::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namespace_labels.size() > 0) {
        obj.insert(QString("namespaceLabels"), ::OpenAPI::toJsonValue(m_namespace_labels));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_uid_isSet) {
        obj.insert(QString("uid"), ::OpenAPI::toJsonValue(m_uid));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIScope::getCreateTime() const {
    return m_create_time;
}
void OAIScope::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIScope::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIScope::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIScope::getDeleteTime() const {
    return m_delete_time;
}
void OAIScope::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIScope::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIScope::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QMap<QString, QString> OAIScope::getLabels() const {
    return m_labels;
}
void OAIScope::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIScope::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIScope::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIScope::getName() const {
    return m_name;
}
void OAIScope::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIScope::is_name_Set() const{
    return m_name_isSet;
}

bool OAIScope::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIScope::getNamespaceLabels() const {
    return m_namespace_labels;
}
void OAIScope::setNamespaceLabels(const QMap<QString, QString> &namespace_labels) {
    m_namespace_labels = namespace_labels;
    m_namespace_labels_isSet = true;
}

bool OAIScope::is_namespace_labels_Set() const{
    return m_namespace_labels_isSet;
}

bool OAIScope::is_namespace_labels_Valid() const{
    return m_namespace_labels_isValid;
}

OAIScopeLifecycleState OAIScope::getState() const {
    return m_state;
}
void OAIScope::setState(const OAIScopeLifecycleState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIScope::is_state_Set() const{
    return m_state_isSet;
}

bool OAIScope::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIScope::getUid() const {
    return m_uid;
}
void OAIScope::setUid(const QString &uid) {
    m_uid = uid;
    m_uid_isSet = true;
}

bool OAIScope::is_uid_Set() const{
    return m_uid_isSet;
}

bool OAIScope::is_uid_Valid() const{
    return m_uid_isValid;
}

QString OAIScope::getUpdateTime() const {
    return m_update_time;
}
void OAIScope::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIScope::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIScope::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIScope::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_uid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScope::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
