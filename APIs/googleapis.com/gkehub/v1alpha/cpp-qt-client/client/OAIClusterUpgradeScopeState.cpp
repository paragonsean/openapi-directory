/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradeScopeState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradeScopeState::OAIClusterUpgradeScopeState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradeScopeState::OAIClusterUpgradeScopeState() {
    this->initializeModel();
}

OAIClusterUpgradeScopeState::~OAIClusterUpgradeScopeState() {}

void OAIClusterUpgradeScopeState::initializeModel() {

    m_downstream_scopes_isSet = false;
    m_downstream_scopes_isValid = false;

    m_gke_state_isSet = false;
    m_gke_state_isValid = false;

    m_ignored_isSet = false;
    m_ignored_isValid = false;
}

void OAIClusterUpgradeScopeState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradeScopeState::fromJsonObject(QJsonObject json) {

    m_downstream_scopes_isValid = ::OpenAPI::fromJsonValue(m_downstream_scopes, json[QString("downstreamScopes")]);
    m_downstream_scopes_isSet = !json[QString("downstreamScopes")].isNull() && m_downstream_scopes_isValid;

    m_gke_state_isValid = ::OpenAPI::fromJsonValue(m_gke_state, json[QString("gkeState")]);
    m_gke_state_isSet = !json[QString("gkeState")].isNull() && m_gke_state_isValid;

    m_ignored_isValid = ::OpenAPI::fromJsonValue(m_ignored, json[QString("ignored")]);
    m_ignored_isSet = !json[QString("ignored")].isNull() && m_ignored_isValid;
}

QString OAIClusterUpgradeScopeState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradeScopeState::asJsonObject() const {
    QJsonObject obj;
    if (m_downstream_scopes.size() > 0) {
        obj.insert(QString("downstreamScopes"), ::OpenAPI::toJsonValue(m_downstream_scopes));
    }
    if (m_gke_state.isSet()) {
        obj.insert(QString("gkeState"), ::OpenAPI::toJsonValue(m_gke_state));
    }
    if (m_ignored.size() > 0) {
        obj.insert(QString("ignored"), ::OpenAPI::toJsonValue(m_ignored));
    }
    return obj;
}

QList<QString> OAIClusterUpgradeScopeState::getDownstreamScopes() const {
    return m_downstream_scopes;
}
void OAIClusterUpgradeScopeState::setDownstreamScopes(const QList<QString> &downstream_scopes) {
    m_downstream_scopes = downstream_scopes;
    m_downstream_scopes_isSet = true;
}

bool OAIClusterUpgradeScopeState::is_downstream_scopes_Set() const{
    return m_downstream_scopes_isSet;
}

bool OAIClusterUpgradeScopeState::is_downstream_scopes_Valid() const{
    return m_downstream_scopes_isValid;
}

OAIClusterUpgradeGKEUpgradeFeatureState OAIClusterUpgradeScopeState::getGkeState() const {
    return m_gke_state;
}
void OAIClusterUpgradeScopeState::setGkeState(const OAIClusterUpgradeGKEUpgradeFeatureState &gke_state) {
    m_gke_state = gke_state;
    m_gke_state_isSet = true;
}

bool OAIClusterUpgradeScopeState::is_gke_state_Set() const{
    return m_gke_state_isSet;
}

bool OAIClusterUpgradeScopeState::is_gke_state_Valid() const{
    return m_gke_state_isValid;
}

QMap<QString, OAIClusterUpgradeIgnoredMembership> OAIClusterUpgradeScopeState::getIgnored() const {
    return m_ignored;
}
void OAIClusterUpgradeScopeState::setIgnored(const QMap<QString, OAIClusterUpgradeIgnoredMembership> &ignored) {
    m_ignored = ignored;
    m_ignored_isSet = true;
}

bool OAIClusterUpgradeScopeState::is_ignored_Set() const{
    return m_ignored_isSet;
}

bool OAIClusterUpgradeScopeState::is_ignored_Valid() const{
    return m_ignored_isValid;
}

bool OAIClusterUpgradeScopeState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_downstream_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignored.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradeScopeState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
