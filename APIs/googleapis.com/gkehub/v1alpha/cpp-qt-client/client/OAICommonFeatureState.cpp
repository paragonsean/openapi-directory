/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommonFeatureState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommonFeatureState::OAICommonFeatureState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommonFeatureState::OAICommonFeatureState() {
    this->initializeModel();
}

OAICommonFeatureState::~OAICommonFeatureState() {}

void OAICommonFeatureState::initializeModel() {

    m_appdevexperience_isSet = false;
    m_appdevexperience_isValid = false;

    m_clusterupgrade_isSet = false;
    m_clusterupgrade_isValid = false;

    m_fleetobservability_isSet = false;
    m_fleetobservability_isValid = false;

    m_namespaceactuation_isSet = false;
    m_namespaceactuation_isValid = false;

    m_servicemesh_isSet = false;
    m_servicemesh_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAICommonFeatureState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommonFeatureState::fromJsonObject(QJsonObject json) {

    m_appdevexperience_isValid = ::OpenAPI::fromJsonValue(m_appdevexperience, json[QString("appdevexperience")]);
    m_appdevexperience_isSet = !json[QString("appdevexperience")].isNull() && m_appdevexperience_isValid;

    m_clusterupgrade_isValid = ::OpenAPI::fromJsonValue(m_clusterupgrade, json[QString("clusterupgrade")]);
    m_clusterupgrade_isSet = !json[QString("clusterupgrade")].isNull() && m_clusterupgrade_isValid;

    m_fleetobservability_isValid = ::OpenAPI::fromJsonValue(m_fleetobservability, json[QString("fleetobservability")]);
    m_fleetobservability_isSet = !json[QString("fleetobservability")].isNull() && m_fleetobservability_isValid;

    m_namespaceactuation_isValid = ::OpenAPI::fromJsonValue(m_namespaceactuation, json[QString("namespaceactuation")]);
    m_namespaceactuation_isSet = !json[QString("namespaceactuation")].isNull() && m_namespaceactuation_isValid;

    m_servicemesh_isValid = ::OpenAPI::fromJsonValue(m_servicemesh, json[QString("servicemesh")]);
    m_servicemesh_isSet = !json[QString("servicemesh")].isNull() && m_servicemesh_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAICommonFeatureState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommonFeatureState::asJsonObject() const {
    QJsonObject obj;
    if (m_appdevexperience.isSet()) {
        obj.insert(QString("appdevexperience"), ::OpenAPI::toJsonValue(m_appdevexperience));
    }
    if (m_clusterupgrade.isSet()) {
        obj.insert(QString("clusterupgrade"), ::OpenAPI::toJsonValue(m_clusterupgrade));
    }
    if (m_fleetobservability.isSet()) {
        obj.insert(QString("fleetobservability"), ::OpenAPI::toJsonValue(m_fleetobservability));
    }
    if (m_namespaceactuation_isSet) {
        obj.insert(QString("namespaceactuation"), ::OpenAPI::toJsonValue(m_namespaceactuation));
    }
    if (m_servicemesh.isSet()) {
        obj.insert(QString("servicemesh"), ::OpenAPI::toJsonValue(m_servicemesh));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIAppDevExperienceFeatureState OAICommonFeatureState::getAppdevexperience() const {
    return m_appdevexperience;
}
void OAICommonFeatureState::setAppdevexperience(const OAIAppDevExperienceFeatureState &appdevexperience) {
    m_appdevexperience = appdevexperience;
    m_appdevexperience_isSet = true;
}

bool OAICommonFeatureState::is_appdevexperience_Set() const{
    return m_appdevexperience_isSet;
}

bool OAICommonFeatureState::is_appdevexperience_Valid() const{
    return m_appdevexperience_isValid;
}

OAIClusterUpgradeFleetState OAICommonFeatureState::getClusterupgrade() const {
    return m_clusterupgrade;
}
void OAICommonFeatureState::setClusterupgrade(const OAIClusterUpgradeFleetState &clusterupgrade) {
    m_clusterupgrade = clusterupgrade;
    m_clusterupgrade_isSet = true;
}

bool OAICommonFeatureState::is_clusterupgrade_Set() const{
    return m_clusterupgrade_isSet;
}

bool OAICommonFeatureState::is_clusterupgrade_Valid() const{
    return m_clusterupgrade_isValid;
}

OAIFleetObservabilityFeatureState OAICommonFeatureState::getFleetobservability() const {
    return m_fleetobservability;
}
void OAICommonFeatureState::setFleetobservability(const OAIFleetObservabilityFeatureState &fleetobservability) {
    m_fleetobservability = fleetobservability;
    m_fleetobservability_isSet = true;
}

bool OAICommonFeatureState::is_fleetobservability_Set() const{
    return m_fleetobservability_isSet;
}

bool OAICommonFeatureState::is_fleetobservability_Valid() const{
    return m_fleetobservability_isValid;
}

OAIObject OAICommonFeatureState::getNamespaceactuation() const {
    return m_namespaceactuation;
}
void OAICommonFeatureState::setNamespaceactuation(const OAIObject &namespaceactuation) {
    m_namespaceactuation = namespaceactuation;
    m_namespaceactuation_isSet = true;
}

bool OAICommonFeatureState::is_namespaceactuation_Set() const{
    return m_namespaceactuation_isSet;
}

bool OAICommonFeatureState::is_namespaceactuation_Valid() const{
    return m_namespaceactuation_isValid;
}

OAIServiceMeshFeatureState OAICommonFeatureState::getServicemesh() const {
    return m_servicemesh;
}
void OAICommonFeatureState::setServicemesh(const OAIServiceMeshFeatureState &servicemesh) {
    m_servicemesh = servicemesh;
    m_servicemesh_isSet = true;
}

bool OAICommonFeatureState::is_servicemesh_Set() const{
    return m_servicemesh_isSet;
}

bool OAICommonFeatureState::is_servicemesh_Valid() const{
    return m_servicemesh_isValid;
}

OAIFeatureState OAICommonFeatureState::getState() const {
    return m_state;
}
void OAICommonFeatureState::setState(const OAIFeatureState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAICommonFeatureState::is_state_Set() const{
    return m_state_isSet;
}

bool OAICommonFeatureState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAICommonFeatureState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appdevexperience.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusterupgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleetobservability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaceactuation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_servicemesh.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommonFeatureState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
