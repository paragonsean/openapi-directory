/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityServiceMembershipState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityServiceMembershipState::OAIIdentityServiceMembershipState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityServiceMembershipState::OAIIdentityServiceMembershipState() {
    this->initializeModel();
}

OAIIdentityServiceMembershipState::~OAIIdentityServiceMembershipState() {}

void OAIIdentityServiceMembershipState::initializeModel() {

    m_failure_reason_isSet = false;
    m_failure_reason_isValid = false;

    m_installed_version_isSet = false;
    m_installed_version_isValid = false;

    m_member_config_isSet = false;
    m_member_config_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIIdentityServiceMembershipState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityServiceMembershipState::fromJsonObject(QJsonObject json) {

    m_failure_reason_isValid = ::OpenAPI::fromJsonValue(m_failure_reason, json[QString("failureReason")]);
    m_failure_reason_isSet = !json[QString("failureReason")].isNull() && m_failure_reason_isValid;

    m_installed_version_isValid = ::OpenAPI::fromJsonValue(m_installed_version, json[QString("installedVersion")]);
    m_installed_version_isSet = !json[QString("installedVersion")].isNull() && m_installed_version_isValid;

    m_member_config_isValid = ::OpenAPI::fromJsonValue(m_member_config, json[QString("memberConfig")]);
    m_member_config_isSet = !json[QString("memberConfig")].isNull() && m_member_config_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIIdentityServiceMembershipState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityServiceMembershipState::asJsonObject() const {
    QJsonObject obj;
    if (m_failure_reason_isSet) {
        obj.insert(QString("failureReason"), ::OpenAPI::toJsonValue(m_failure_reason));
    }
    if (m_installed_version_isSet) {
        obj.insert(QString("installedVersion"), ::OpenAPI::toJsonValue(m_installed_version));
    }
    if (m_member_config.isSet()) {
        obj.insert(QString("memberConfig"), ::OpenAPI::toJsonValue(m_member_config));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAIIdentityServiceMembershipState::getFailureReason() const {
    return m_failure_reason;
}
void OAIIdentityServiceMembershipState::setFailureReason(const QString &failure_reason) {
    m_failure_reason = failure_reason;
    m_failure_reason_isSet = true;
}

bool OAIIdentityServiceMembershipState::is_failure_reason_Set() const{
    return m_failure_reason_isSet;
}

bool OAIIdentityServiceMembershipState::is_failure_reason_Valid() const{
    return m_failure_reason_isValid;
}

QString OAIIdentityServiceMembershipState::getInstalledVersion() const {
    return m_installed_version;
}
void OAIIdentityServiceMembershipState::setInstalledVersion(const QString &installed_version) {
    m_installed_version = installed_version;
    m_installed_version_isSet = true;
}

bool OAIIdentityServiceMembershipState::is_installed_version_Set() const{
    return m_installed_version_isSet;
}

bool OAIIdentityServiceMembershipState::is_installed_version_Valid() const{
    return m_installed_version_isValid;
}

OAIIdentityServiceMembershipSpec OAIIdentityServiceMembershipState::getMemberConfig() const {
    return m_member_config;
}
void OAIIdentityServiceMembershipState::setMemberConfig(const OAIIdentityServiceMembershipSpec &member_config) {
    m_member_config = member_config;
    m_member_config_isSet = true;
}

bool OAIIdentityServiceMembershipState::is_member_config_Set() const{
    return m_member_config_isSet;
}

bool OAIIdentityServiceMembershipState::is_member_config_Valid() const{
    return m_member_config_isValid;
}

QString OAIIdentityServiceMembershipState::getState() const {
    return m_state;
}
void OAIIdentityServiceMembershipState::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIdentityServiceMembershipState::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIdentityServiceMembershipState::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIIdentityServiceMembershipState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_failure_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installed_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_member_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityServiceMembershipState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
