/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIdentityServiceOidcConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIdentityServiceOidcConfig::OAIIdentityServiceOidcConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIdentityServiceOidcConfig::OAIIdentityServiceOidcConfig() {
    this->initializeModel();
}

OAIIdentityServiceOidcConfig::~OAIIdentityServiceOidcConfig() {}

void OAIIdentityServiceOidcConfig::initializeModel() {

    m_certificate_authority_data_isSet = false;
    m_certificate_authority_data_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_deploy_cloud_console_proxy_isSet = false;
    m_deploy_cloud_console_proxy_isValid = false;

    m_enable_access_token_isSet = false;
    m_enable_access_token_isValid = false;

    m_encrypted_client_secret_isSet = false;
    m_encrypted_client_secret_isValid = false;

    m_extra_params_isSet = false;
    m_extra_params_isValid = false;

    m_group_prefix_isSet = false;
    m_group_prefix_isValid = false;

    m_groups_claim_isSet = false;
    m_groups_claim_isValid = false;

    m_issuer_uri_isSet = false;
    m_issuer_uri_isValid = false;

    m_kubectl_redirect_uri_isSet = false;
    m_kubectl_redirect_uri_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_user_claim_isSet = false;
    m_user_claim_isValid = false;

    m_user_prefix_isSet = false;
    m_user_prefix_isValid = false;
}

void OAIIdentityServiceOidcConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIdentityServiceOidcConfig::fromJsonObject(QJsonObject json) {

    m_certificate_authority_data_isValid = ::OpenAPI::fromJsonValue(m_certificate_authority_data, json[QString("certificateAuthorityData")]);
    m_certificate_authority_data_isSet = !json[QString("certificateAuthorityData")].isNull() && m_certificate_authority_data_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;

    m_deploy_cloud_console_proxy_isValid = ::OpenAPI::fromJsonValue(m_deploy_cloud_console_proxy, json[QString("deployCloudConsoleProxy")]);
    m_deploy_cloud_console_proxy_isSet = !json[QString("deployCloudConsoleProxy")].isNull() && m_deploy_cloud_console_proxy_isValid;

    m_enable_access_token_isValid = ::OpenAPI::fromJsonValue(m_enable_access_token, json[QString("enableAccessToken")]);
    m_enable_access_token_isSet = !json[QString("enableAccessToken")].isNull() && m_enable_access_token_isValid;

    m_encrypted_client_secret_isValid = ::OpenAPI::fromJsonValue(m_encrypted_client_secret, json[QString("encryptedClientSecret")]);
    m_encrypted_client_secret_isSet = !json[QString("encryptedClientSecret")].isNull() && m_encrypted_client_secret_isValid;

    m_extra_params_isValid = ::OpenAPI::fromJsonValue(m_extra_params, json[QString("extraParams")]);
    m_extra_params_isSet = !json[QString("extraParams")].isNull() && m_extra_params_isValid;

    m_group_prefix_isValid = ::OpenAPI::fromJsonValue(m_group_prefix, json[QString("groupPrefix")]);
    m_group_prefix_isSet = !json[QString("groupPrefix")].isNull() && m_group_prefix_isValid;

    m_groups_claim_isValid = ::OpenAPI::fromJsonValue(m_groups_claim, json[QString("groupsClaim")]);
    m_groups_claim_isSet = !json[QString("groupsClaim")].isNull() && m_groups_claim_isValid;

    m_issuer_uri_isValid = ::OpenAPI::fromJsonValue(m_issuer_uri, json[QString("issuerUri")]);
    m_issuer_uri_isSet = !json[QString("issuerUri")].isNull() && m_issuer_uri_isValid;

    m_kubectl_redirect_uri_isValid = ::OpenAPI::fromJsonValue(m_kubectl_redirect_uri, json[QString("kubectlRedirectUri")]);
    m_kubectl_redirect_uri_isSet = !json[QString("kubectlRedirectUri")].isNull() && m_kubectl_redirect_uri_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_user_claim_isValid = ::OpenAPI::fromJsonValue(m_user_claim, json[QString("userClaim")]);
    m_user_claim_isSet = !json[QString("userClaim")].isNull() && m_user_claim_isValid;

    m_user_prefix_isValid = ::OpenAPI::fromJsonValue(m_user_prefix, json[QString("userPrefix")]);
    m_user_prefix_isSet = !json[QString("userPrefix")].isNull() && m_user_prefix_isValid;
}

QString OAIIdentityServiceOidcConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIdentityServiceOidcConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_authority_data_isSet) {
        obj.insert(QString("certificateAuthorityData"), ::OpenAPI::toJsonValue(m_certificate_authority_data));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_deploy_cloud_console_proxy_isSet) {
        obj.insert(QString("deployCloudConsoleProxy"), ::OpenAPI::toJsonValue(m_deploy_cloud_console_proxy));
    }
    if (m_enable_access_token_isSet) {
        obj.insert(QString("enableAccessToken"), ::OpenAPI::toJsonValue(m_enable_access_token));
    }
    if (m_encrypted_client_secret_isSet) {
        obj.insert(QString("encryptedClientSecret"), ::OpenAPI::toJsonValue(m_encrypted_client_secret));
    }
    if (m_extra_params_isSet) {
        obj.insert(QString("extraParams"), ::OpenAPI::toJsonValue(m_extra_params));
    }
    if (m_group_prefix_isSet) {
        obj.insert(QString("groupPrefix"), ::OpenAPI::toJsonValue(m_group_prefix));
    }
    if (m_groups_claim_isSet) {
        obj.insert(QString("groupsClaim"), ::OpenAPI::toJsonValue(m_groups_claim));
    }
    if (m_issuer_uri_isSet) {
        obj.insert(QString("issuerUri"), ::OpenAPI::toJsonValue(m_issuer_uri));
    }
    if (m_kubectl_redirect_uri_isSet) {
        obj.insert(QString("kubectlRedirectUri"), ::OpenAPI::toJsonValue(m_kubectl_redirect_uri));
    }
    if (m_scopes_isSet) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_user_claim_isSet) {
        obj.insert(QString("userClaim"), ::OpenAPI::toJsonValue(m_user_claim));
    }
    if (m_user_prefix_isSet) {
        obj.insert(QString("userPrefix"), ::OpenAPI::toJsonValue(m_user_prefix));
    }
    return obj;
}

QString OAIIdentityServiceOidcConfig::getCertificateAuthorityData() const {
    return m_certificate_authority_data;
}
void OAIIdentityServiceOidcConfig::setCertificateAuthorityData(const QString &certificate_authority_data) {
    m_certificate_authority_data = certificate_authority_data;
    m_certificate_authority_data_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_certificate_authority_data_Set() const{
    return m_certificate_authority_data_isSet;
}

bool OAIIdentityServiceOidcConfig::is_certificate_authority_data_Valid() const{
    return m_certificate_authority_data_isValid;
}

QString OAIIdentityServiceOidcConfig::getClientId() const {
    return m_client_id;
}
void OAIIdentityServiceOidcConfig::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIIdentityServiceOidcConfig::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIIdentityServiceOidcConfig::getClientSecret() const {
    return m_client_secret;
}
void OAIIdentityServiceOidcConfig::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIIdentityServiceOidcConfig::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIIdentityServiceOidcConfig::isDeployCloudConsoleProxy() const {
    return m_deploy_cloud_console_proxy;
}
void OAIIdentityServiceOidcConfig::setDeployCloudConsoleProxy(const bool &deploy_cloud_console_proxy) {
    m_deploy_cloud_console_proxy = deploy_cloud_console_proxy;
    m_deploy_cloud_console_proxy_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_deploy_cloud_console_proxy_Set() const{
    return m_deploy_cloud_console_proxy_isSet;
}

bool OAIIdentityServiceOidcConfig::is_deploy_cloud_console_proxy_Valid() const{
    return m_deploy_cloud_console_proxy_isValid;
}

bool OAIIdentityServiceOidcConfig::isEnableAccessToken() const {
    return m_enable_access_token;
}
void OAIIdentityServiceOidcConfig::setEnableAccessToken(const bool &enable_access_token) {
    m_enable_access_token = enable_access_token;
    m_enable_access_token_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_enable_access_token_Set() const{
    return m_enable_access_token_isSet;
}

bool OAIIdentityServiceOidcConfig::is_enable_access_token_Valid() const{
    return m_enable_access_token_isValid;
}

QByteArray OAIIdentityServiceOidcConfig::getEncryptedClientSecret() const {
    return m_encrypted_client_secret;
}
void OAIIdentityServiceOidcConfig::setEncryptedClientSecret(const QByteArray &encrypted_client_secret) {
    m_encrypted_client_secret = encrypted_client_secret;
    m_encrypted_client_secret_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_encrypted_client_secret_Set() const{
    return m_encrypted_client_secret_isSet;
}

bool OAIIdentityServiceOidcConfig::is_encrypted_client_secret_Valid() const{
    return m_encrypted_client_secret_isValid;
}

QString OAIIdentityServiceOidcConfig::getExtraParams() const {
    return m_extra_params;
}
void OAIIdentityServiceOidcConfig::setExtraParams(const QString &extra_params) {
    m_extra_params = extra_params;
    m_extra_params_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_extra_params_Set() const{
    return m_extra_params_isSet;
}

bool OAIIdentityServiceOidcConfig::is_extra_params_Valid() const{
    return m_extra_params_isValid;
}

QString OAIIdentityServiceOidcConfig::getGroupPrefix() const {
    return m_group_prefix;
}
void OAIIdentityServiceOidcConfig::setGroupPrefix(const QString &group_prefix) {
    m_group_prefix = group_prefix;
    m_group_prefix_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_group_prefix_Set() const{
    return m_group_prefix_isSet;
}

bool OAIIdentityServiceOidcConfig::is_group_prefix_Valid() const{
    return m_group_prefix_isValid;
}

QString OAIIdentityServiceOidcConfig::getGroupsClaim() const {
    return m_groups_claim;
}
void OAIIdentityServiceOidcConfig::setGroupsClaim(const QString &groups_claim) {
    m_groups_claim = groups_claim;
    m_groups_claim_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_groups_claim_Set() const{
    return m_groups_claim_isSet;
}

bool OAIIdentityServiceOidcConfig::is_groups_claim_Valid() const{
    return m_groups_claim_isValid;
}

QString OAIIdentityServiceOidcConfig::getIssuerUri() const {
    return m_issuer_uri;
}
void OAIIdentityServiceOidcConfig::setIssuerUri(const QString &issuer_uri) {
    m_issuer_uri = issuer_uri;
    m_issuer_uri_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_issuer_uri_Set() const{
    return m_issuer_uri_isSet;
}

bool OAIIdentityServiceOidcConfig::is_issuer_uri_Valid() const{
    return m_issuer_uri_isValid;
}

QString OAIIdentityServiceOidcConfig::getKubectlRedirectUri() const {
    return m_kubectl_redirect_uri;
}
void OAIIdentityServiceOidcConfig::setKubectlRedirectUri(const QString &kubectl_redirect_uri) {
    m_kubectl_redirect_uri = kubectl_redirect_uri;
    m_kubectl_redirect_uri_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_kubectl_redirect_uri_Set() const{
    return m_kubectl_redirect_uri_isSet;
}

bool OAIIdentityServiceOidcConfig::is_kubectl_redirect_uri_Valid() const{
    return m_kubectl_redirect_uri_isValid;
}

QString OAIIdentityServiceOidcConfig::getScopes() const {
    return m_scopes;
}
void OAIIdentityServiceOidcConfig::setScopes(const QString &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIIdentityServiceOidcConfig::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIIdentityServiceOidcConfig::getUserClaim() const {
    return m_user_claim;
}
void OAIIdentityServiceOidcConfig::setUserClaim(const QString &user_claim) {
    m_user_claim = user_claim;
    m_user_claim_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_user_claim_Set() const{
    return m_user_claim_isSet;
}

bool OAIIdentityServiceOidcConfig::is_user_claim_Valid() const{
    return m_user_claim_isValid;
}

QString OAIIdentityServiceOidcConfig::getUserPrefix() const {
    return m_user_prefix;
}
void OAIIdentityServiceOidcConfig::setUserPrefix(const QString &user_prefix) {
    m_user_prefix = user_prefix;
    m_user_prefix_isSet = true;
}

bool OAIIdentityServiceOidcConfig::is_user_prefix_Set() const{
    return m_user_prefix_isSet;
}

bool OAIIdentityServiceOidcConfig::is_user_prefix_Valid() const{
    return m_user_prefix_isValid;
}

bool OAIIdentityServiceOidcConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_authority_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deploy_cloud_console_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypted_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extra_params_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_groups_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuer_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kubectl_redirect_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_claim_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIdentityServiceOidcConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
