/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyControllerPolicyContentState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyControllerPolicyContentState::OAIPolicyControllerPolicyContentState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyControllerPolicyContentState::OAIPolicyControllerPolicyContentState() {
    this->initializeModel();
}

OAIPolicyControllerPolicyContentState::~OAIPolicyControllerPolicyContentState() {}

void OAIPolicyControllerPolicyContentState::initializeModel() {

    m_bundle_states_isSet = false;
    m_bundle_states_isValid = false;

    m_referential_sync_config_state_isSet = false;
    m_referential_sync_config_state_isValid = false;

    m_template_library_state_isSet = false;
    m_template_library_state_isValid = false;
}

void OAIPolicyControllerPolicyContentState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyControllerPolicyContentState::fromJsonObject(QJsonObject json) {

    m_bundle_states_isValid = ::OpenAPI::fromJsonValue(m_bundle_states, json[QString("bundleStates")]);
    m_bundle_states_isSet = !json[QString("bundleStates")].isNull() && m_bundle_states_isValid;

    m_referential_sync_config_state_isValid = ::OpenAPI::fromJsonValue(m_referential_sync_config_state, json[QString("referentialSyncConfigState")]);
    m_referential_sync_config_state_isSet = !json[QString("referentialSyncConfigState")].isNull() && m_referential_sync_config_state_isValid;

    m_template_library_state_isValid = ::OpenAPI::fromJsonValue(m_template_library_state, json[QString("templateLibraryState")]);
    m_template_library_state_isSet = !json[QString("templateLibraryState")].isNull() && m_template_library_state_isValid;
}

QString OAIPolicyControllerPolicyContentState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyControllerPolicyContentState::asJsonObject() const {
    QJsonObject obj;
    if (m_bundle_states.size() > 0) {
        obj.insert(QString("bundleStates"), ::OpenAPI::toJsonValue(m_bundle_states));
    }
    if (m_referential_sync_config_state.isSet()) {
        obj.insert(QString("referentialSyncConfigState"), ::OpenAPI::toJsonValue(m_referential_sync_config_state));
    }
    if (m_template_library_state.isSet()) {
        obj.insert(QString("templateLibraryState"), ::OpenAPI::toJsonValue(m_template_library_state));
    }
    return obj;
}

QMap<QString, OAIPolicyControllerOnClusterState> OAIPolicyControllerPolicyContentState::getBundleStates() const {
    return m_bundle_states;
}
void OAIPolicyControllerPolicyContentState::setBundleStates(const QMap<QString, OAIPolicyControllerOnClusterState> &bundle_states) {
    m_bundle_states = bundle_states;
    m_bundle_states_isSet = true;
}

bool OAIPolicyControllerPolicyContentState::is_bundle_states_Set() const{
    return m_bundle_states_isSet;
}

bool OAIPolicyControllerPolicyContentState::is_bundle_states_Valid() const{
    return m_bundle_states_isValid;
}

OAIPolicyControllerOnClusterState OAIPolicyControllerPolicyContentState::getReferentialSyncConfigState() const {
    return m_referential_sync_config_state;
}
void OAIPolicyControllerPolicyContentState::setReferentialSyncConfigState(const OAIPolicyControllerOnClusterState &referential_sync_config_state) {
    m_referential_sync_config_state = referential_sync_config_state;
    m_referential_sync_config_state_isSet = true;
}

bool OAIPolicyControllerPolicyContentState::is_referential_sync_config_state_Set() const{
    return m_referential_sync_config_state_isSet;
}

bool OAIPolicyControllerPolicyContentState::is_referential_sync_config_state_Valid() const{
    return m_referential_sync_config_state_isValid;
}

OAIPolicyControllerOnClusterState OAIPolicyControllerPolicyContentState::getTemplateLibraryState() const {
    return m_template_library_state;
}
void OAIPolicyControllerPolicyContentState::setTemplateLibraryState(const OAIPolicyControllerOnClusterState &template_library_state) {
    m_template_library_state = template_library_state;
    m_template_library_state_isSet = true;
}

bool OAIPolicyControllerPolicyContentState::is_template_library_state_Set() const{
    return m_template_library_state_isSet;
}

bool OAIPolicyControllerPolicyContentState::is_template_library_state_Valid() const{
    return m_template_library_state_isValid;
}

bool OAIPolicyControllerPolicyContentState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bundle_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_referential_sync_config_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_library_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyControllerPolicyContentState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
