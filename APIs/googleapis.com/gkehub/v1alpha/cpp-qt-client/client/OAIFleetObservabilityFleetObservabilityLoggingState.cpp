/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFleetObservabilityFleetObservabilityLoggingState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFleetObservabilityFleetObservabilityLoggingState::OAIFleetObservabilityFleetObservabilityLoggingState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFleetObservabilityFleetObservabilityLoggingState::OAIFleetObservabilityFleetObservabilityLoggingState() {
    this->initializeModel();
}

OAIFleetObservabilityFleetObservabilityLoggingState::~OAIFleetObservabilityFleetObservabilityLoggingState() {}

void OAIFleetObservabilityFleetObservabilityLoggingState::initializeModel() {

    m_default_log_isSet = false;
    m_default_log_isValid = false;

    m_scope_log_isSet = false;
    m_scope_log_isValid = false;
}

void OAIFleetObservabilityFleetObservabilityLoggingState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFleetObservabilityFleetObservabilityLoggingState::fromJsonObject(QJsonObject json) {

    m_default_log_isValid = ::OpenAPI::fromJsonValue(m_default_log, json[QString("defaultLog")]);
    m_default_log_isSet = !json[QString("defaultLog")].isNull() && m_default_log_isValid;

    m_scope_log_isValid = ::OpenAPI::fromJsonValue(m_scope_log, json[QString("scopeLog")]);
    m_scope_log_isSet = !json[QString("scopeLog")].isNull() && m_scope_log_isValid;
}

QString OAIFleetObservabilityFleetObservabilityLoggingState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFleetObservabilityFleetObservabilityLoggingState::asJsonObject() const {
    QJsonObject obj;
    if (m_default_log.isSet()) {
        obj.insert(QString("defaultLog"), ::OpenAPI::toJsonValue(m_default_log));
    }
    if (m_scope_log.isSet()) {
        obj.insert(QString("scopeLog"), ::OpenAPI::toJsonValue(m_scope_log));
    }
    return obj;
}

OAIFleetObservabilityFleetObservabilityBaseFeatureState OAIFleetObservabilityFleetObservabilityLoggingState::getDefaultLog() const {
    return m_default_log;
}
void OAIFleetObservabilityFleetObservabilityLoggingState::setDefaultLog(const OAIFleetObservabilityFleetObservabilityBaseFeatureState &default_log) {
    m_default_log = default_log;
    m_default_log_isSet = true;
}

bool OAIFleetObservabilityFleetObservabilityLoggingState::is_default_log_Set() const{
    return m_default_log_isSet;
}

bool OAIFleetObservabilityFleetObservabilityLoggingState::is_default_log_Valid() const{
    return m_default_log_isValid;
}

OAIFleetObservabilityFleetObservabilityBaseFeatureState OAIFleetObservabilityFleetObservabilityLoggingState::getScopeLog() const {
    return m_scope_log;
}
void OAIFleetObservabilityFleetObservabilityLoggingState::setScopeLog(const OAIFleetObservabilityFleetObservabilityBaseFeatureState &scope_log) {
    m_scope_log = scope_log;
    m_scope_log_isSet = true;
}

bool OAIFleetObservabilityFleetObservabilityLoggingState::is_scope_log_Set() const{
    return m_scope_log_isSet;
}

bool OAIFleetObservabilityFleetObservabilityLoggingState::is_scope_log_Valid() const{
    return m_scope_log_isValid;
}

bool OAIFleetObservabilityFleetObservabilityLoggingState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_log.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope_log.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFleetObservabilityFleetObservabilityLoggingState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
