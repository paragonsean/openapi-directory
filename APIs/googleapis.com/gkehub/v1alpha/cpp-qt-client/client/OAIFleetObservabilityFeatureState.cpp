/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFleetObservabilityFeatureState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFleetObservabilityFeatureState::OAIFleetObservabilityFeatureState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFleetObservabilityFeatureState::OAIFleetObservabilityFeatureState() {
    this->initializeModel();
}

OAIFleetObservabilityFeatureState::~OAIFleetObservabilityFeatureState() {}

void OAIFleetObservabilityFeatureState::initializeModel() {

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_monitoring_isSet = false;
    m_monitoring_isValid = false;
}

void OAIFleetObservabilityFeatureState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFleetObservabilityFeatureState::fromJsonObject(QJsonObject json) {

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_monitoring_isValid = ::OpenAPI::fromJsonValue(m_monitoring, json[QString("monitoring")]);
    m_monitoring_isSet = !json[QString("monitoring")].isNull() && m_monitoring_isValid;
}

QString OAIFleetObservabilityFeatureState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFleetObservabilityFeatureState::asJsonObject() const {
    QJsonObject obj;
    if (m_logging.isSet()) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_monitoring.isSet()) {
        obj.insert(QString("monitoring"), ::OpenAPI::toJsonValue(m_monitoring));
    }
    return obj;
}

OAIFleetObservabilityFleetObservabilityLoggingState OAIFleetObservabilityFeatureState::getLogging() const {
    return m_logging;
}
void OAIFleetObservabilityFeatureState::setLogging(const OAIFleetObservabilityFleetObservabilityLoggingState &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIFleetObservabilityFeatureState::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIFleetObservabilityFeatureState::is_logging_Valid() const{
    return m_logging_isValid;
}

OAIFleetObservabilityFleetObservabilityMonitoringState OAIFleetObservabilityFeatureState::getMonitoring() const {
    return m_monitoring;
}
void OAIFleetObservabilityFeatureState::setMonitoring(const OAIFleetObservabilityFleetObservabilityMonitoringState &monitoring) {
    m_monitoring = monitoring;
    m_monitoring_isSet = true;
}

bool OAIFleetObservabilityFeatureState::is_monitoring_Set() const{
    return m_monitoring_isSet;
}

bool OAIFleetObservabilityFeatureState::is_monitoring_Valid() const{
    return m_monitoring_isValid;
}

bool OAIFleetObservabilityFeatureState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_logging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFleetObservabilityFeatureState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
