/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradeScopeSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradeScopeSpec::OAIClusterUpgradeScopeSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradeScopeSpec::OAIClusterUpgradeScopeSpec() {
    this->initializeModel();
}

OAIClusterUpgradeScopeSpec::~OAIClusterUpgradeScopeSpec() {}

void OAIClusterUpgradeScopeSpec::initializeModel() {

    m_gke_upgrade_overrides_isSet = false;
    m_gke_upgrade_overrides_isValid = false;

    m_post_conditions_isSet = false;
    m_post_conditions_isValid = false;

    m_upstream_scopes_isSet = false;
    m_upstream_scopes_isValid = false;
}

void OAIClusterUpgradeScopeSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradeScopeSpec::fromJsonObject(QJsonObject json) {

    m_gke_upgrade_overrides_isValid = ::OpenAPI::fromJsonValue(m_gke_upgrade_overrides, json[QString("gkeUpgradeOverrides")]);
    m_gke_upgrade_overrides_isSet = !json[QString("gkeUpgradeOverrides")].isNull() && m_gke_upgrade_overrides_isValid;

    m_post_conditions_isValid = ::OpenAPI::fromJsonValue(m_post_conditions, json[QString("postConditions")]);
    m_post_conditions_isSet = !json[QString("postConditions")].isNull() && m_post_conditions_isValid;

    m_upstream_scopes_isValid = ::OpenAPI::fromJsonValue(m_upstream_scopes, json[QString("upstreamScopes")]);
    m_upstream_scopes_isSet = !json[QString("upstreamScopes")].isNull() && m_upstream_scopes_isValid;
}

QString OAIClusterUpgradeScopeSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradeScopeSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_gke_upgrade_overrides.size() > 0) {
        obj.insert(QString("gkeUpgradeOverrides"), ::OpenAPI::toJsonValue(m_gke_upgrade_overrides));
    }
    if (m_post_conditions.isSet()) {
        obj.insert(QString("postConditions"), ::OpenAPI::toJsonValue(m_post_conditions));
    }
    if (m_upstream_scopes.size() > 0) {
        obj.insert(QString("upstreamScopes"), ::OpenAPI::toJsonValue(m_upstream_scopes));
    }
    return obj;
}

QList<OAIClusterUpgradeGKEUpgradeOverride> OAIClusterUpgradeScopeSpec::getGkeUpgradeOverrides() const {
    return m_gke_upgrade_overrides;
}
void OAIClusterUpgradeScopeSpec::setGkeUpgradeOverrides(const QList<OAIClusterUpgradeGKEUpgradeOverride> &gke_upgrade_overrides) {
    m_gke_upgrade_overrides = gke_upgrade_overrides;
    m_gke_upgrade_overrides_isSet = true;
}

bool OAIClusterUpgradeScopeSpec::is_gke_upgrade_overrides_Set() const{
    return m_gke_upgrade_overrides_isSet;
}

bool OAIClusterUpgradeScopeSpec::is_gke_upgrade_overrides_Valid() const{
    return m_gke_upgrade_overrides_isValid;
}

OAIClusterUpgradePostConditions OAIClusterUpgradeScopeSpec::getPostConditions() const {
    return m_post_conditions;
}
void OAIClusterUpgradeScopeSpec::setPostConditions(const OAIClusterUpgradePostConditions &post_conditions) {
    m_post_conditions = post_conditions;
    m_post_conditions_isSet = true;
}

bool OAIClusterUpgradeScopeSpec::is_post_conditions_Set() const{
    return m_post_conditions_isSet;
}

bool OAIClusterUpgradeScopeSpec::is_post_conditions_Valid() const{
    return m_post_conditions_isValid;
}

QList<QString> OAIClusterUpgradeScopeSpec::getUpstreamScopes() const {
    return m_upstream_scopes;
}
void OAIClusterUpgradeScopeSpec::setUpstreamScopes(const QList<QString> &upstream_scopes) {
    m_upstream_scopes = upstream_scopes;
    m_upstream_scopes_isSet = true;
}

bool OAIClusterUpgradeScopeSpec::is_upstream_scopes_Set() const{
    return m_upstream_scopes_isSet;
}

bool OAIClusterUpgradeScopeSpec::is_upstream_scopes_Valid() const{
    return m_upstream_scopes_isValid;
}

bool OAIClusterUpgradeScopeSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gke_upgrade_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradeScopeSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
