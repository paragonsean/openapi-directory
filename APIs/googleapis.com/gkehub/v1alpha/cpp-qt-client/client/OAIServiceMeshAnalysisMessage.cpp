/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceMeshAnalysisMessage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceMeshAnalysisMessage::OAIServiceMeshAnalysisMessage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceMeshAnalysisMessage::OAIServiceMeshAnalysisMessage() {
    this->initializeModel();
}

OAIServiceMeshAnalysisMessage::~OAIServiceMeshAnalysisMessage() {}

void OAIServiceMeshAnalysisMessage::initializeModel() {

    m_args_isSet = false;
    m_args_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_message_base_isSet = false;
    m_message_base_isValid = false;

    m_resource_paths_isSet = false;
    m_resource_paths_isValid = false;
}

void OAIServiceMeshAnalysisMessage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceMeshAnalysisMessage::fromJsonObject(QJsonObject json) {

    m_args_isValid = ::OpenAPI::fromJsonValue(m_args, json[QString("args")]);
    m_args_isSet = !json[QString("args")].isNull() && m_args_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_message_base_isValid = ::OpenAPI::fromJsonValue(m_message_base, json[QString("messageBase")]);
    m_message_base_isSet = !json[QString("messageBase")].isNull() && m_message_base_isValid;

    m_resource_paths_isValid = ::OpenAPI::fromJsonValue(m_resource_paths, json[QString("resourcePaths")]);
    m_resource_paths_isSet = !json[QString("resourcePaths")].isNull() && m_resource_paths_isValid;
}

QString OAIServiceMeshAnalysisMessage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceMeshAnalysisMessage::asJsonObject() const {
    QJsonObject obj;
    if (m_args.size() > 0) {
        obj.insert(QString("args"), ::OpenAPI::toJsonValue(m_args));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_message_base.isSet()) {
        obj.insert(QString("messageBase"), ::OpenAPI::toJsonValue(m_message_base));
    }
    if (m_resource_paths.size() > 0) {
        obj.insert(QString("resourcePaths"), ::OpenAPI::toJsonValue(m_resource_paths));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIServiceMeshAnalysisMessage::getArgs() const {
    return m_args;
}
void OAIServiceMeshAnalysisMessage::setArgs(const QMap<QString, QJsonValue> &args) {
    m_args = args;
    m_args_isSet = true;
}

bool OAIServiceMeshAnalysisMessage::is_args_Set() const{
    return m_args_isSet;
}

bool OAIServiceMeshAnalysisMessage::is_args_Valid() const{
    return m_args_isValid;
}

QString OAIServiceMeshAnalysisMessage::getDescription() const {
    return m_description;
}
void OAIServiceMeshAnalysisMessage::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIServiceMeshAnalysisMessage::is_description_Set() const{
    return m_description_isSet;
}

bool OAIServiceMeshAnalysisMessage::is_description_Valid() const{
    return m_description_isValid;
}

OAIServiceMeshAnalysisMessageBase OAIServiceMeshAnalysisMessage::getMessageBase() const {
    return m_message_base;
}
void OAIServiceMeshAnalysisMessage::setMessageBase(const OAIServiceMeshAnalysisMessageBase &message_base) {
    m_message_base = message_base;
    m_message_base_isSet = true;
}

bool OAIServiceMeshAnalysisMessage::is_message_base_Set() const{
    return m_message_base_isSet;
}

bool OAIServiceMeshAnalysisMessage::is_message_base_Valid() const{
    return m_message_base_isValid;
}

QList<QString> OAIServiceMeshAnalysisMessage::getResourcePaths() const {
    return m_resource_paths;
}
void OAIServiceMeshAnalysisMessage::setResourcePaths(const QList<QString> &resource_paths) {
    m_resource_paths = resource_paths;
    m_resource_paths_isSet = true;
}

bool OAIServiceMeshAnalysisMessage::is_resource_paths_Set() const{
    return m_resource_paths_isSet;
}

bool OAIServiceMeshAnalysisMessage::is_resource_paths_Valid() const{
    return m_resource_paths_isValid;
}

bool OAIServiceMeshAnalysisMessage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_args.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_base.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_paths.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceMeshAnalysisMessage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
