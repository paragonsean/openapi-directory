/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClusterUpgradeFleetSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClusterUpgradeFleetSpec::OAIClusterUpgradeFleetSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClusterUpgradeFleetSpec::OAIClusterUpgradeFleetSpec() {
    this->initializeModel();
}

OAIClusterUpgradeFleetSpec::~OAIClusterUpgradeFleetSpec() {}

void OAIClusterUpgradeFleetSpec::initializeModel() {

    m_gke_upgrade_overrides_isSet = false;
    m_gke_upgrade_overrides_isValid = false;

    m_post_conditions_isSet = false;
    m_post_conditions_isValid = false;

    m_upstream_fleets_isSet = false;
    m_upstream_fleets_isValid = false;
}

void OAIClusterUpgradeFleetSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClusterUpgradeFleetSpec::fromJsonObject(QJsonObject json) {

    m_gke_upgrade_overrides_isValid = ::OpenAPI::fromJsonValue(m_gke_upgrade_overrides, json[QString("gkeUpgradeOverrides")]);
    m_gke_upgrade_overrides_isSet = !json[QString("gkeUpgradeOverrides")].isNull() && m_gke_upgrade_overrides_isValid;

    m_post_conditions_isValid = ::OpenAPI::fromJsonValue(m_post_conditions, json[QString("postConditions")]);
    m_post_conditions_isSet = !json[QString("postConditions")].isNull() && m_post_conditions_isValid;

    m_upstream_fleets_isValid = ::OpenAPI::fromJsonValue(m_upstream_fleets, json[QString("upstreamFleets")]);
    m_upstream_fleets_isSet = !json[QString("upstreamFleets")].isNull() && m_upstream_fleets_isValid;
}

QString OAIClusterUpgradeFleetSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClusterUpgradeFleetSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_gke_upgrade_overrides.size() > 0) {
        obj.insert(QString("gkeUpgradeOverrides"), ::OpenAPI::toJsonValue(m_gke_upgrade_overrides));
    }
    if (m_post_conditions.isSet()) {
        obj.insert(QString("postConditions"), ::OpenAPI::toJsonValue(m_post_conditions));
    }
    if (m_upstream_fleets.size() > 0) {
        obj.insert(QString("upstreamFleets"), ::OpenAPI::toJsonValue(m_upstream_fleets));
    }
    return obj;
}

QList<OAIClusterUpgradeGKEUpgradeOverride> OAIClusterUpgradeFleetSpec::getGkeUpgradeOverrides() const {
    return m_gke_upgrade_overrides;
}
void OAIClusterUpgradeFleetSpec::setGkeUpgradeOverrides(const QList<OAIClusterUpgradeGKEUpgradeOverride> &gke_upgrade_overrides) {
    m_gke_upgrade_overrides = gke_upgrade_overrides;
    m_gke_upgrade_overrides_isSet = true;
}

bool OAIClusterUpgradeFleetSpec::is_gke_upgrade_overrides_Set() const{
    return m_gke_upgrade_overrides_isSet;
}

bool OAIClusterUpgradeFleetSpec::is_gke_upgrade_overrides_Valid() const{
    return m_gke_upgrade_overrides_isValid;
}

OAIClusterUpgradePostConditions OAIClusterUpgradeFleetSpec::getPostConditions() const {
    return m_post_conditions;
}
void OAIClusterUpgradeFleetSpec::setPostConditions(const OAIClusterUpgradePostConditions &post_conditions) {
    m_post_conditions = post_conditions;
    m_post_conditions_isSet = true;
}

bool OAIClusterUpgradeFleetSpec::is_post_conditions_Set() const{
    return m_post_conditions_isSet;
}

bool OAIClusterUpgradeFleetSpec::is_post_conditions_Valid() const{
    return m_post_conditions_isValid;
}

QList<QString> OAIClusterUpgradeFleetSpec::getUpstreamFleets() const {
    return m_upstream_fleets;
}
void OAIClusterUpgradeFleetSpec::setUpstreamFleets(const QList<QString> &upstream_fleets) {
    m_upstream_fleets = upstream_fleets;
    m_upstream_fleets_isSet = true;
}

bool OAIClusterUpgradeFleetSpec::is_upstream_fleets_Set() const{
    return m_upstream_fleets_isSet;
}

bool OAIClusterUpgradeFleetSpec::is_upstream_fleets_Valid() const{
    return m_upstream_fleets_isValid;
}

bool OAIClusterUpgradeFleetSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gke_upgrade_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_conditions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_upstream_fleets.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClusterUpgradeFleetSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
