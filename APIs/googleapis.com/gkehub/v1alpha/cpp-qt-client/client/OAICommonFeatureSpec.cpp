/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICommonFeatureSpec.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICommonFeatureSpec::OAICommonFeatureSpec(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICommonFeatureSpec::OAICommonFeatureSpec() {
    this->initializeModel();
}

OAICommonFeatureSpec::~OAICommonFeatureSpec() {}

void OAICommonFeatureSpec::initializeModel() {

    m_anthosobservability_isSet = false;
    m_anthosobservability_isValid = false;

    m_appdevexperience_isSet = false;
    m_appdevexperience_isValid = false;

    m_cloudauditlogging_isSet = false;
    m_cloudauditlogging_isValid = false;

    m_clusterupgrade_isSet = false;
    m_clusterupgrade_isValid = false;

    m_dataplanev2_isSet = false;
    m_dataplanev2_isValid = false;

    m_fleetobservability_isSet = false;
    m_fleetobservability_isValid = false;

    m_multiclusteringress_isSet = false;
    m_multiclusteringress_isValid = false;

    m_namespaceactuation_isSet = false;
    m_namespaceactuation_isValid = false;

    m_workloadcertificate_isSet = false;
    m_workloadcertificate_isValid = false;
}

void OAICommonFeatureSpec::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICommonFeatureSpec::fromJsonObject(QJsonObject json) {

    m_anthosobservability_isValid = ::OpenAPI::fromJsonValue(m_anthosobservability, json[QString("anthosobservability")]);
    m_anthosobservability_isSet = !json[QString("anthosobservability")].isNull() && m_anthosobservability_isValid;

    m_appdevexperience_isValid = ::OpenAPI::fromJsonValue(m_appdevexperience, json[QString("appdevexperience")]);
    m_appdevexperience_isSet = !json[QString("appdevexperience")].isNull() && m_appdevexperience_isValid;

    m_cloudauditlogging_isValid = ::OpenAPI::fromJsonValue(m_cloudauditlogging, json[QString("cloudauditlogging")]);
    m_cloudauditlogging_isSet = !json[QString("cloudauditlogging")].isNull() && m_cloudauditlogging_isValid;

    m_clusterupgrade_isValid = ::OpenAPI::fromJsonValue(m_clusterupgrade, json[QString("clusterupgrade")]);
    m_clusterupgrade_isSet = !json[QString("clusterupgrade")].isNull() && m_clusterupgrade_isValid;

    m_dataplanev2_isValid = ::OpenAPI::fromJsonValue(m_dataplanev2, json[QString("dataplanev2")]);
    m_dataplanev2_isSet = !json[QString("dataplanev2")].isNull() && m_dataplanev2_isValid;

    m_fleetobservability_isValid = ::OpenAPI::fromJsonValue(m_fleetobservability, json[QString("fleetobservability")]);
    m_fleetobservability_isSet = !json[QString("fleetobservability")].isNull() && m_fleetobservability_isValid;

    m_multiclusteringress_isValid = ::OpenAPI::fromJsonValue(m_multiclusteringress, json[QString("multiclusteringress")]);
    m_multiclusteringress_isSet = !json[QString("multiclusteringress")].isNull() && m_multiclusteringress_isValid;

    m_namespaceactuation_isValid = ::OpenAPI::fromJsonValue(m_namespaceactuation, json[QString("namespaceactuation")]);
    m_namespaceactuation_isSet = !json[QString("namespaceactuation")].isNull() && m_namespaceactuation_isValid;

    m_workloadcertificate_isValid = ::OpenAPI::fromJsonValue(m_workloadcertificate, json[QString("workloadcertificate")]);
    m_workloadcertificate_isSet = !json[QString("workloadcertificate")].isNull() && m_workloadcertificate_isValid;
}

QString OAICommonFeatureSpec::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICommonFeatureSpec::asJsonObject() const {
    QJsonObject obj;
    if (m_anthosobservability.isSet()) {
        obj.insert(QString("anthosobservability"), ::OpenAPI::toJsonValue(m_anthosobservability));
    }
    if (m_appdevexperience_isSet) {
        obj.insert(QString("appdevexperience"), ::OpenAPI::toJsonValue(m_appdevexperience));
    }
    if (m_cloudauditlogging.isSet()) {
        obj.insert(QString("cloudauditlogging"), ::OpenAPI::toJsonValue(m_cloudauditlogging));
    }
    if (m_clusterupgrade.isSet()) {
        obj.insert(QString("clusterupgrade"), ::OpenAPI::toJsonValue(m_clusterupgrade));
    }
    if (m_dataplanev2.isSet()) {
        obj.insert(QString("dataplanev2"), ::OpenAPI::toJsonValue(m_dataplanev2));
    }
    if (m_fleetobservability.isSet()) {
        obj.insert(QString("fleetobservability"), ::OpenAPI::toJsonValue(m_fleetobservability));
    }
    if (m_multiclusteringress.isSet()) {
        obj.insert(QString("multiclusteringress"), ::OpenAPI::toJsonValue(m_multiclusteringress));
    }
    if (m_namespaceactuation.isSet()) {
        obj.insert(QString("namespaceactuation"), ::OpenAPI::toJsonValue(m_namespaceactuation));
    }
    if (m_workloadcertificate.isSet()) {
        obj.insert(QString("workloadcertificate"), ::OpenAPI::toJsonValue(m_workloadcertificate));
    }
    return obj;
}

OAIAnthosObservabilityFeatureSpec OAICommonFeatureSpec::getAnthosobservability() const {
    return m_anthosobservability;
}
void OAICommonFeatureSpec::setAnthosobservability(const OAIAnthosObservabilityFeatureSpec &anthosobservability) {
    m_anthosobservability = anthosobservability;
    m_anthosobservability_isSet = true;
}

bool OAICommonFeatureSpec::is_anthosobservability_Set() const{
    return m_anthosobservability_isSet;
}

bool OAICommonFeatureSpec::is_anthosobservability_Valid() const{
    return m_anthosobservability_isValid;
}

OAIObject OAICommonFeatureSpec::getAppdevexperience() const {
    return m_appdevexperience;
}
void OAICommonFeatureSpec::setAppdevexperience(const OAIObject &appdevexperience) {
    m_appdevexperience = appdevexperience;
    m_appdevexperience_isSet = true;
}

bool OAICommonFeatureSpec::is_appdevexperience_Set() const{
    return m_appdevexperience_isSet;
}

bool OAICommonFeatureSpec::is_appdevexperience_Valid() const{
    return m_appdevexperience_isValid;
}

OAICloudAuditLoggingFeatureSpec OAICommonFeatureSpec::getCloudauditlogging() const {
    return m_cloudauditlogging;
}
void OAICommonFeatureSpec::setCloudauditlogging(const OAICloudAuditLoggingFeatureSpec &cloudauditlogging) {
    m_cloudauditlogging = cloudauditlogging;
    m_cloudauditlogging_isSet = true;
}

bool OAICommonFeatureSpec::is_cloudauditlogging_Set() const{
    return m_cloudauditlogging_isSet;
}

bool OAICommonFeatureSpec::is_cloudauditlogging_Valid() const{
    return m_cloudauditlogging_isValid;
}

OAIClusterUpgradeFleetSpec OAICommonFeatureSpec::getClusterupgrade() const {
    return m_clusterupgrade;
}
void OAICommonFeatureSpec::setClusterupgrade(const OAIClusterUpgradeFleetSpec &clusterupgrade) {
    m_clusterupgrade = clusterupgrade;
    m_clusterupgrade_isSet = true;
}

bool OAICommonFeatureSpec::is_clusterupgrade_Set() const{
    return m_clusterupgrade_isSet;
}

bool OAICommonFeatureSpec::is_clusterupgrade_Valid() const{
    return m_clusterupgrade_isValid;
}

OAIDataplaneV2FeatureSpec OAICommonFeatureSpec::getDataplanev2() const {
    return m_dataplanev2;
}
void OAICommonFeatureSpec::setDataplanev2(const OAIDataplaneV2FeatureSpec &dataplanev2) {
    m_dataplanev2 = dataplanev2;
    m_dataplanev2_isSet = true;
}

bool OAICommonFeatureSpec::is_dataplanev2_Set() const{
    return m_dataplanev2_isSet;
}

bool OAICommonFeatureSpec::is_dataplanev2_Valid() const{
    return m_dataplanev2_isValid;
}

OAIFleetObservabilityFeatureSpec OAICommonFeatureSpec::getFleetobservability() const {
    return m_fleetobservability;
}
void OAICommonFeatureSpec::setFleetobservability(const OAIFleetObservabilityFeatureSpec &fleetobservability) {
    m_fleetobservability = fleetobservability;
    m_fleetobservability_isSet = true;
}

bool OAICommonFeatureSpec::is_fleetobservability_Set() const{
    return m_fleetobservability_isSet;
}

bool OAICommonFeatureSpec::is_fleetobservability_Valid() const{
    return m_fleetobservability_isValid;
}

OAIMultiClusterIngressFeatureSpec OAICommonFeatureSpec::getMulticlusteringress() const {
    return m_multiclusteringress;
}
void OAICommonFeatureSpec::setMulticlusteringress(const OAIMultiClusterIngressFeatureSpec &multiclusteringress) {
    m_multiclusteringress = multiclusteringress;
    m_multiclusteringress_isSet = true;
}

bool OAICommonFeatureSpec::is_multiclusteringress_Set() const{
    return m_multiclusteringress_isSet;
}

bool OAICommonFeatureSpec::is_multiclusteringress_Valid() const{
    return m_multiclusteringress_isValid;
}

OAINamespaceActuationFeatureSpec OAICommonFeatureSpec::getNamespaceactuation() const {
    return m_namespaceactuation;
}
void OAICommonFeatureSpec::setNamespaceactuation(const OAINamespaceActuationFeatureSpec &namespaceactuation) {
    m_namespaceactuation = namespaceactuation;
    m_namespaceactuation_isSet = true;
}

bool OAICommonFeatureSpec::is_namespaceactuation_Set() const{
    return m_namespaceactuation_isSet;
}

bool OAICommonFeatureSpec::is_namespaceactuation_Valid() const{
    return m_namespaceactuation_isValid;
}

OAIFeatureSpec OAICommonFeatureSpec::getWorkloadcertificate() const {
    return m_workloadcertificate;
}
void OAICommonFeatureSpec::setWorkloadcertificate(const OAIFeatureSpec &workloadcertificate) {
    m_workloadcertificate = workloadcertificate;
    m_workloadcertificate_isSet = true;
}

bool OAICommonFeatureSpec::is_workloadcertificate_Set() const{
    return m_workloadcertificate_isSet;
}

bool OAICommonFeatureSpec::is_workloadcertificate_Valid() const{
    return m_workloadcertificate_isValid;
}

bool OAICommonFeatureSpec::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_anthosobservability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_appdevexperience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloudauditlogging.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusterupgrade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dataplanev2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fleetobservability.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiclusteringress.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespaceactuation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workloadcertificate.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICommonFeatureSpec::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
