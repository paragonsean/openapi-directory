/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigManagementErrorResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigManagementErrorResource::OAIConfigManagementErrorResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigManagementErrorResource::OAIConfigManagementErrorResource() {
    this->initializeModel();
}

OAIConfigManagementErrorResource::~OAIConfigManagementErrorResource() {}

void OAIConfigManagementErrorResource::initializeModel() {

    m_resource_gvk_isSet = false;
    m_resource_gvk_isValid = false;

    m_resource_name_isSet = false;
    m_resource_name_isValid = false;

    m_resource_namespace_isSet = false;
    m_resource_namespace_isValid = false;

    m_source_path_isSet = false;
    m_source_path_isValid = false;
}

void OAIConfigManagementErrorResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigManagementErrorResource::fromJsonObject(QJsonObject json) {

    m_resource_gvk_isValid = ::OpenAPI::fromJsonValue(m_resource_gvk, json[QString("resourceGvk")]);
    m_resource_gvk_isSet = !json[QString("resourceGvk")].isNull() && m_resource_gvk_isValid;

    m_resource_name_isValid = ::OpenAPI::fromJsonValue(m_resource_name, json[QString("resourceName")]);
    m_resource_name_isSet = !json[QString("resourceName")].isNull() && m_resource_name_isValid;

    m_resource_namespace_isValid = ::OpenAPI::fromJsonValue(m_resource_namespace, json[QString("resourceNamespace")]);
    m_resource_namespace_isSet = !json[QString("resourceNamespace")].isNull() && m_resource_namespace_isValid;

    m_source_path_isValid = ::OpenAPI::fromJsonValue(m_source_path, json[QString("sourcePath")]);
    m_source_path_isSet = !json[QString("sourcePath")].isNull() && m_source_path_isValid;
}

QString OAIConfigManagementErrorResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigManagementErrorResource::asJsonObject() const {
    QJsonObject obj;
    if (m_resource_gvk.isSet()) {
        obj.insert(QString("resourceGvk"), ::OpenAPI::toJsonValue(m_resource_gvk));
    }
    if (m_resource_name_isSet) {
        obj.insert(QString("resourceName"), ::OpenAPI::toJsonValue(m_resource_name));
    }
    if (m_resource_namespace_isSet) {
        obj.insert(QString("resourceNamespace"), ::OpenAPI::toJsonValue(m_resource_namespace));
    }
    if (m_source_path_isSet) {
        obj.insert(QString("sourcePath"), ::OpenAPI::toJsonValue(m_source_path));
    }
    return obj;
}

OAIConfigManagementGroupVersionKind OAIConfigManagementErrorResource::getResourceGvk() const {
    return m_resource_gvk;
}
void OAIConfigManagementErrorResource::setResourceGvk(const OAIConfigManagementGroupVersionKind &resource_gvk) {
    m_resource_gvk = resource_gvk;
    m_resource_gvk_isSet = true;
}

bool OAIConfigManagementErrorResource::is_resource_gvk_Set() const{
    return m_resource_gvk_isSet;
}

bool OAIConfigManagementErrorResource::is_resource_gvk_Valid() const{
    return m_resource_gvk_isValid;
}

QString OAIConfigManagementErrorResource::getResourceName() const {
    return m_resource_name;
}
void OAIConfigManagementErrorResource::setResourceName(const QString &resource_name) {
    m_resource_name = resource_name;
    m_resource_name_isSet = true;
}

bool OAIConfigManagementErrorResource::is_resource_name_Set() const{
    return m_resource_name_isSet;
}

bool OAIConfigManagementErrorResource::is_resource_name_Valid() const{
    return m_resource_name_isValid;
}

QString OAIConfigManagementErrorResource::getResourceNamespace() const {
    return m_resource_namespace;
}
void OAIConfigManagementErrorResource::setResourceNamespace(const QString &resource_namespace) {
    m_resource_namespace = resource_namespace;
    m_resource_namespace_isSet = true;
}

bool OAIConfigManagementErrorResource::is_resource_namespace_Set() const{
    return m_resource_namespace_isSet;
}

bool OAIConfigManagementErrorResource::is_resource_namespace_Valid() const{
    return m_resource_namespace_isValid;
}

QString OAIConfigManagementErrorResource::getSourcePath() const {
    return m_source_path;
}
void OAIConfigManagementErrorResource::setSourcePath(const QString &source_path) {
    m_source_path = source_path;
    m_source_path_isSet = true;
}

bool OAIConfigManagementErrorResource::is_source_path_Set() const{
    return m_source_path_isSet;
}

bool OAIConfigManagementErrorResource::is_source_path_Valid() const{
    return m_source_path_isValid;
}

bool OAIConfigManagementErrorResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resource_gvk.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_path_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigManagementErrorResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
