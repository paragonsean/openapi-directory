/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDefaultClusterConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDefaultClusterConfig::OAIDefaultClusterConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDefaultClusterConfig::OAIDefaultClusterConfig() {
    this->initializeModel();
}

OAIDefaultClusterConfig::~OAIDefaultClusterConfig() {}

void OAIDefaultClusterConfig::initializeModel() {

    m_binary_authorization_config_isSet = false;
    m_binary_authorization_config_isValid = false;

    m_security_posture_config_isSet = false;
    m_security_posture_config_isValid = false;
}

void OAIDefaultClusterConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDefaultClusterConfig::fromJsonObject(QJsonObject json) {

    m_binary_authorization_config_isValid = ::OpenAPI::fromJsonValue(m_binary_authorization_config, json[QString("binaryAuthorizationConfig")]);
    m_binary_authorization_config_isSet = !json[QString("binaryAuthorizationConfig")].isNull() && m_binary_authorization_config_isValid;

    m_security_posture_config_isValid = ::OpenAPI::fromJsonValue(m_security_posture_config, json[QString("securityPostureConfig")]);
    m_security_posture_config_isSet = !json[QString("securityPostureConfig")].isNull() && m_security_posture_config_isValid;
}

QString OAIDefaultClusterConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDefaultClusterConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_binary_authorization_config.isSet()) {
        obj.insert(QString("binaryAuthorizationConfig"), ::OpenAPI::toJsonValue(m_binary_authorization_config));
    }
    if (m_security_posture_config.isSet()) {
        obj.insert(QString("securityPostureConfig"), ::OpenAPI::toJsonValue(m_security_posture_config));
    }
    return obj;
}

OAIBinaryAuthorizationConfig OAIDefaultClusterConfig::getBinaryAuthorizationConfig() const {
    return m_binary_authorization_config;
}
void OAIDefaultClusterConfig::setBinaryAuthorizationConfig(const OAIBinaryAuthorizationConfig &binary_authorization_config) {
    m_binary_authorization_config = binary_authorization_config;
    m_binary_authorization_config_isSet = true;
}

bool OAIDefaultClusterConfig::is_binary_authorization_config_Set() const{
    return m_binary_authorization_config_isSet;
}

bool OAIDefaultClusterConfig::is_binary_authorization_config_Valid() const{
    return m_binary_authorization_config_isValid;
}

OAISecurityPostureConfig OAIDefaultClusterConfig::getSecurityPostureConfig() const {
    return m_security_posture_config;
}
void OAIDefaultClusterConfig::setSecurityPostureConfig(const OAISecurityPostureConfig &security_posture_config) {
    m_security_posture_config = security_posture_config;
    m_security_posture_config_isSet = true;
}

bool OAIDefaultClusterConfig::is_security_posture_config_Set() const{
    return m_security_posture_config_isSet;
}

bool OAIDefaultClusterConfig::is_security_posture_config_Valid() const{
    return m_security_posture_config_isValid;
}

bool OAIDefaultClusterConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_binary_authorization_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_posture_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDefaultClusterConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
