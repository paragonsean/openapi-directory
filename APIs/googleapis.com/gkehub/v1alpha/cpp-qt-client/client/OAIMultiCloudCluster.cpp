/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMultiCloudCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMultiCloudCluster::OAIMultiCloudCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMultiCloudCluster::OAIMultiCloudCluster() {
    this->initializeModel();
}

OAIMultiCloudCluster::~OAIMultiCloudCluster() {}

void OAIMultiCloudCluster::initializeModel() {

    m_cluster_missing_isSet = false;
    m_cluster_missing_isValid = false;

    m_resource_link_isSet = false;
    m_resource_link_isValid = false;
}

void OAIMultiCloudCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMultiCloudCluster::fromJsonObject(QJsonObject json) {

    m_cluster_missing_isValid = ::OpenAPI::fromJsonValue(m_cluster_missing, json[QString("clusterMissing")]);
    m_cluster_missing_isSet = !json[QString("clusterMissing")].isNull() && m_cluster_missing_isValid;

    m_resource_link_isValid = ::OpenAPI::fromJsonValue(m_resource_link, json[QString("resourceLink")]);
    m_resource_link_isSet = !json[QString("resourceLink")].isNull() && m_resource_link_isValid;
}

QString OAIMultiCloudCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMultiCloudCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_missing_isSet) {
        obj.insert(QString("clusterMissing"), ::OpenAPI::toJsonValue(m_cluster_missing));
    }
    if (m_resource_link_isSet) {
        obj.insert(QString("resourceLink"), ::OpenAPI::toJsonValue(m_resource_link));
    }
    return obj;
}

bool OAIMultiCloudCluster::isClusterMissing() const {
    return m_cluster_missing;
}
void OAIMultiCloudCluster::setClusterMissing(const bool &cluster_missing) {
    m_cluster_missing = cluster_missing;
    m_cluster_missing_isSet = true;
}

bool OAIMultiCloudCluster::is_cluster_missing_Set() const{
    return m_cluster_missing_isSet;
}

bool OAIMultiCloudCluster::is_cluster_missing_Valid() const{
    return m_cluster_missing_isValid;
}

QString OAIMultiCloudCluster::getResourceLink() const {
    return m_resource_link;
}
void OAIMultiCloudCluster::setResourceLink(const QString &resource_link) {
    m_resource_link = resource_link;
    m_resource_link_isSet = true;
}

bool OAIMultiCloudCluster::is_resource_link_Set() const{
    return m_resource_link_isSet;
}

bool OAIMultiCloudCluster::is_resource_link_Valid() const{
    return m_resource_link_isValid;
}

bool OAIMultiCloudCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMultiCloudCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
