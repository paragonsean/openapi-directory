/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClusterUpgradeGKEUpgradeOverride;
import org.openapitools.client.model.ClusterUpgradePostConditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * **ClusterUpgrade**: The configuration for the fleet-level ClusterUpgrade feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradeFleetSpec {
  public static final String SERIALIZED_NAME_GKE_UPGRADE_OVERRIDES = "gkeUpgradeOverrides";
  @SerializedName(SERIALIZED_NAME_GKE_UPGRADE_OVERRIDES)
  private List<ClusterUpgradeGKEUpgradeOverride> gkeUpgradeOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_CONDITIONS = "postConditions";
  @SerializedName(SERIALIZED_NAME_POST_CONDITIONS)
  private ClusterUpgradePostConditions postConditions;

  public static final String SERIALIZED_NAME_UPSTREAM_FLEETS = "upstreamFleets";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_FLEETS)
  private List<String> upstreamFleets = new ArrayList<>();

  public ClusterUpgradeFleetSpec() {
  }

  public ClusterUpgradeFleetSpec gkeUpgradeOverrides(List<ClusterUpgradeGKEUpgradeOverride> gkeUpgradeOverrides) {
    this.gkeUpgradeOverrides = gkeUpgradeOverrides;
    return this;
  }

  public ClusterUpgradeFleetSpec addGkeUpgradeOverridesItem(ClusterUpgradeGKEUpgradeOverride gkeUpgradeOverridesItem) {
    if (this.gkeUpgradeOverrides == null) {
      this.gkeUpgradeOverrides = new ArrayList<>();
    }
    this.gkeUpgradeOverrides.add(gkeUpgradeOverridesItem);
    return this;
  }

  /**
   * Allow users to override some properties of each GKE upgrade.
   * @return gkeUpgradeOverrides
   */
  @javax.annotation.Nullable
  public List<ClusterUpgradeGKEUpgradeOverride> getGkeUpgradeOverrides() {
    return gkeUpgradeOverrides;
  }

  public void setGkeUpgradeOverrides(List<ClusterUpgradeGKEUpgradeOverride> gkeUpgradeOverrides) {
    this.gkeUpgradeOverrides = gkeUpgradeOverrides;
  }


  public ClusterUpgradeFleetSpec postConditions(ClusterUpgradePostConditions postConditions) {
    this.postConditions = postConditions;
    return this;
  }

  /**
   * Get postConditions
   * @return postConditions
   */
  @javax.annotation.Nullable
  public ClusterUpgradePostConditions getPostConditions() {
    return postConditions;
  }

  public void setPostConditions(ClusterUpgradePostConditions postConditions) {
    this.postConditions = postConditions;
  }


  public ClusterUpgradeFleetSpec upstreamFleets(List<String> upstreamFleets) {
    this.upstreamFleets = upstreamFleets;
    return this;
  }

  public ClusterUpgradeFleetSpec addUpstreamFleetsItem(String upstreamFleetsItem) {
    if (this.upstreamFleets == null) {
      this.upstreamFleets = new ArrayList<>();
    }
    this.upstreamFleets.add(upstreamFleetsItem);
    return this;
  }

  /**
   * This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.
   * @return upstreamFleets
   */
  @javax.annotation.Nullable
  public List<String> getUpstreamFleets() {
    return upstreamFleets;
  }

  public void setUpstreamFleets(List<String> upstreamFleets) {
    this.upstreamFleets = upstreamFleets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradeFleetSpec clusterUpgradeFleetSpec = (ClusterUpgradeFleetSpec) o;
    return Objects.equals(this.gkeUpgradeOverrides, clusterUpgradeFleetSpec.gkeUpgradeOverrides) &&
        Objects.equals(this.postConditions, clusterUpgradeFleetSpec.postConditions) &&
        Objects.equals(this.upstreamFleets, clusterUpgradeFleetSpec.upstreamFleets);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gkeUpgradeOverrides, postConditions, upstreamFleets);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradeFleetSpec {\n");
    sb.append("    gkeUpgradeOverrides: ").append(toIndentedString(gkeUpgradeOverrides)).append("\n");
    sb.append("    postConditions: ").append(toIndentedString(postConditions)).append("\n");
    sb.append("    upstreamFleets: ").append(toIndentedString(upstreamFleets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gkeUpgradeOverrides");
    openapiFields.add("postConditions");
    openapiFields.add("upstreamFleets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradeFleetSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradeFleetSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradeFleetSpec is not found in the empty JSON string", ClusterUpgradeFleetSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradeFleetSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradeFleetSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("gkeUpgradeOverrides") != null && !jsonObj.get("gkeUpgradeOverrides").isJsonNull()) {
        JsonArray jsonArraygkeUpgradeOverrides = jsonObj.getAsJsonArray("gkeUpgradeOverrides");
        if (jsonArraygkeUpgradeOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gkeUpgradeOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gkeUpgradeOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("gkeUpgradeOverrides").toString()));
          }

          // validate the optional field `gkeUpgradeOverrides` (array)
          for (int i = 0; i < jsonArraygkeUpgradeOverrides.size(); i++) {
            ClusterUpgradeGKEUpgradeOverride.validateJsonElement(jsonArraygkeUpgradeOverrides.get(i));
          };
        }
      }
      // validate the optional field `postConditions`
      if (jsonObj.get("postConditions") != null && !jsonObj.get("postConditions").isJsonNull()) {
        ClusterUpgradePostConditions.validateJsonElement(jsonObj.get("postConditions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("upstreamFleets") != null && !jsonObj.get("upstreamFleets").isJsonNull() && !jsonObj.get("upstreamFleets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upstreamFleets` to be an array in the JSON string but got `%s`", jsonObj.get("upstreamFleets").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradeFleetSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradeFleetSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradeFleetSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradeFleetSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradeFleetSpec>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradeFleetSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradeFleetSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradeFleetSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradeFleetSpec
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradeFleetSpec
   */
  public static ClusterUpgradeFleetSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradeFleetSpec.class);
  }

  /**
   * Convert an instance of ClusterUpgradeFleetSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

