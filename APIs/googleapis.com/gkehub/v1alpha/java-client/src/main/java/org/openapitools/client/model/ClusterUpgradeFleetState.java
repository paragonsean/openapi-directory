/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ClusterUpgradeGKEUpgradeFeatureState;
import org.openapitools.client.model.ClusterUpgradeIgnoredMembership;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * **ClusterUpgrade**: The state for the fleet-level ClusterUpgrade feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradeFleetState {
  public static final String SERIALIZED_NAME_DOWNSTREAM_FLEETS = "downstreamFleets";
  @SerializedName(SERIALIZED_NAME_DOWNSTREAM_FLEETS)
  private List<String> downstreamFleets = new ArrayList<>();

  public static final String SERIALIZED_NAME_GKE_STATE = "gkeState";
  @SerializedName(SERIALIZED_NAME_GKE_STATE)
  private ClusterUpgradeGKEUpgradeFeatureState gkeState;

  public static final String SERIALIZED_NAME_IGNORED = "ignored";
  @SerializedName(SERIALIZED_NAME_IGNORED)
  private Map<String, ClusterUpgradeIgnoredMembership> ignored = new HashMap<>();

  public ClusterUpgradeFleetState() {
  }

  public ClusterUpgradeFleetState downstreamFleets(List<String> downstreamFleets) {
    this.downstreamFleets = downstreamFleets;
    return this;
  }

  public ClusterUpgradeFleetState addDownstreamFleetsItem(String downstreamFleetsItem) {
    if (this.downstreamFleets == null) {
      this.downstreamFleets = new ArrayList<>();
    }
    this.downstreamFleets.add(downstreamFleetsItem);
    return this;
  }

  /**
   * This fleets whose upstream_fleets contain the current fleet. The fleet name should be either fleet project number or id.
   * @return downstreamFleets
   */
  @javax.annotation.Nullable
  public List<String> getDownstreamFleets() {
    return downstreamFleets;
  }

  public void setDownstreamFleets(List<String> downstreamFleets) {
    this.downstreamFleets = downstreamFleets;
  }


  public ClusterUpgradeFleetState gkeState(ClusterUpgradeGKEUpgradeFeatureState gkeState) {
    this.gkeState = gkeState;
    return this;
  }

  /**
   * Get gkeState
   * @return gkeState
   */
  @javax.annotation.Nullable
  public ClusterUpgradeGKEUpgradeFeatureState getGkeState() {
    return gkeState;
  }

  public void setGkeState(ClusterUpgradeGKEUpgradeFeatureState gkeState) {
    this.gkeState = gkeState;
  }


  public ClusterUpgradeFleetState ignored(Map<String, ClusterUpgradeIgnoredMembership> ignored) {
    this.ignored = ignored;
    return this;
  }

  public ClusterUpgradeFleetState putIgnoredItem(String key, ClusterUpgradeIgnoredMembership ignoredItem) {
    if (this.ignored == null) {
      this.ignored = new HashMap<>();
    }
    this.ignored.put(key, ignoredItem);
    return this;
  }

  /**
   * A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: &#x60;projects/{p}/locations/{l}/membership/{m}&#x60;.
   * @return ignored
   */
  @javax.annotation.Nullable
  public Map<String, ClusterUpgradeIgnoredMembership> getIgnored() {
    return ignored;
  }

  public void setIgnored(Map<String, ClusterUpgradeIgnoredMembership> ignored) {
    this.ignored = ignored;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradeFleetState clusterUpgradeFleetState = (ClusterUpgradeFleetState) o;
    return Objects.equals(this.downstreamFleets, clusterUpgradeFleetState.downstreamFleets) &&
        Objects.equals(this.gkeState, clusterUpgradeFleetState.gkeState) &&
        Objects.equals(this.ignored, clusterUpgradeFleetState.ignored);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downstreamFleets, gkeState, ignored);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradeFleetState {\n");
    sb.append("    downstreamFleets: ").append(toIndentedString(downstreamFleets)).append("\n");
    sb.append("    gkeState: ").append(toIndentedString(gkeState)).append("\n");
    sb.append("    ignored: ").append(toIndentedString(ignored)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downstreamFleets");
    openapiFields.add("gkeState");
    openapiFields.add("ignored");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradeFleetState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradeFleetState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradeFleetState is not found in the empty JSON string", ClusterUpgradeFleetState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradeFleetState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradeFleetState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("downstreamFleets") != null && !jsonObj.get("downstreamFleets").isJsonNull() && !jsonObj.get("downstreamFleets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `downstreamFleets` to be an array in the JSON string but got `%s`", jsonObj.get("downstreamFleets").toString()));
      }
      // validate the optional field `gkeState`
      if (jsonObj.get("gkeState") != null && !jsonObj.get("gkeState").isJsonNull()) {
        ClusterUpgradeGKEUpgradeFeatureState.validateJsonElement(jsonObj.get("gkeState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradeFleetState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradeFleetState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradeFleetState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradeFleetState.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradeFleetState>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradeFleetState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradeFleetState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradeFleetState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradeFleetState
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradeFleetState
   */
  public static ClusterUpgradeFleetState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradeFleetState.class);
  }

  /**
   * Convert an instance of ClusterUpgradeFleetState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

