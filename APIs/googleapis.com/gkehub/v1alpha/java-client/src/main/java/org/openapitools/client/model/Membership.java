/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Authority;
import org.openapitools.client.model.MembershipEndpoint;
import org.openapitools.client.model.MembershipState;
import org.openapitools.client.model.MonitoringConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Membership contains information about a member cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Membership {
  public static final String SERIALIZED_NAME_AUTHORITY = "authority";
  @SerializedName(SERIALIZED_NAME_AUTHORITY)
  private Authority authority;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DELETE_TIME = "deleteTime";
  @SerializedName(SERIALIZED_NAME_DELETE_TIME)
  private String deleteTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private MembershipEndpoint endpoint;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  private String externalId;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private Map<String, String> labels = new HashMap<>();

  public static final String SERIALIZED_NAME_LAST_CONNECTION_TIME = "lastConnectionTime";
  @SerializedName(SERIALIZED_NAME_LAST_CONNECTION_TIME)
  private String lastConnectionTime;

  public static final String SERIALIZED_NAME_MONITORING_CONFIG = "monitoringConfig";
  @SerializedName(SERIALIZED_NAME_MONITORING_CONFIG)
  private MonitoringConfig monitoringConfig;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private MembershipState state;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Membership() {
  }

  public Membership(
     String createTime, 
     String deleteTime, 
     String description, 
     String lastConnectionTime, 
     String name, 
     String uniqueId, 
     String updateTime
  ) {
    this();
    this.createTime = createTime;
    this.deleteTime = deleteTime;
    this.description = description;
    this.lastConnectionTime = lastConnectionTime;
    this.name = name;
    this.uniqueId = uniqueId;
    this.updateTime = updateTime;
  }

  public Membership authority(Authority authority) {
    this.authority = authority;
    return this;
  }

  /**
   * Get authority
   * @return authority
   */
  @javax.annotation.Nullable
  public Authority getAuthority() {
    return authority;
  }

  public void setAuthority(Authority authority) {
    this.authority = authority;
  }


  /**
   * Output only. When the Membership was created.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. When the Membership was deleted.
   * @return deleteTime
   */
  @javax.annotation.Nullable
  public String getDeleteTime() {
    return deleteTime;
  }



  /**
   * Output only. Description of this membership, limited to 63 characters. Must match the regex: &#x60;a-zA-Z0-9*&#x60; This field is present for legacy purposes.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public Membership endpoint(MembershipEndpoint endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * Get endpoint
   * @return endpoint
   */
  @javax.annotation.Nullable
  public MembershipEndpoint getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(MembershipEndpoint endpoint) {
    this.endpoint = endpoint;
  }


  public Membership externalId(String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * Optional. An externally-generated and managed ID for this Membership. This ID may be modified after creation, but this is not recommended. The ID must match the regex: &#x60;a-zA-Z0-9*&#x60; If this Membership represents a Kubernetes cluster, this value should be set to the UID of the &#x60;kube-system&#x60; namespace object.
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(String externalId) {
    this.externalId = externalId;
  }


  public Membership labels(Map<String, String> labels) {
    this.labels = labels;
    return this;
  }

  public Membership putLabelsItem(String key, String labelsItem) {
    if (this.labels == null) {
      this.labels = new HashMap<>();
    }
    this.labels.put(key, labelsItem);
    return this;
  }

  /**
   * Optional. Labels for this membership.
   * @return labels
   */
  @javax.annotation.Nullable
  public Map<String, String> getLabels() {
    return labels;
  }

  public void setLabels(Map<String, String> labels) {
    this.labels = labels;
  }


  /**
   * Output only. For clusters using Connect, the timestamp of the most recent connection established with Google Cloud. This time is updated every several minutes, not continuously. For clusters that do not use GKE Connect, or that have never connected successfully, this field will be unset.
   * @return lastConnectionTime
   */
  @javax.annotation.Nullable
  public String getLastConnectionTime() {
    return lastConnectionTime;
  }



  public Membership monitoringConfig(MonitoringConfig monitoringConfig) {
    this.monitoringConfig = monitoringConfig;
    return this;
  }

  /**
   * Get monitoringConfig
   * @return monitoringConfig
   */
  @javax.annotation.Nullable
  public MonitoringConfig getMonitoringConfig() {
    return monitoringConfig;
  }

  public void setMonitoringConfig(MonitoringConfig monitoringConfig) {
    this.monitoringConfig = monitoringConfig;
  }


  /**
   * Output only. The full, unique name of this Membership resource in the format &#x60;projects/_*_/locations/_*_/memberships/{membership_id}&#x60;, set during creation. &#x60;membership_id&#x60; must be a valid RFC 1123 compliant DNS label: 1. At most 63 characters in length 2. It must consist of lower case alphanumeric characters or &#x60;-&#x60; 3. It must start and end with an alphanumeric character Which can be expressed as the regex: &#x60;[a-z0-9]([-a-z0-9]*[a-z0-9])?&#x60;, with a maximum length of 63 characters.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Membership state(MembershipState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public MembershipState getState() {
    return state;
  }

  public void setState(MembershipState state) {
    this.state = state;
  }


  /**
   * Output only. Google-generated UUID for this resource. This is unique across all Membership resources. If a Membership resource is deleted and another resource with the same name is created, it gets a different unique_id.
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }



  /**
   * Output only. When the Membership was last updated.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Membership membership = (Membership) o;
    return Objects.equals(this.authority, membership.authority) &&
        Objects.equals(this.createTime, membership.createTime) &&
        Objects.equals(this.deleteTime, membership.deleteTime) &&
        Objects.equals(this.description, membership.description) &&
        Objects.equals(this.endpoint, membership.endpoint) &&
        Objects.equals(this.externalId, membership.externalId) &&
        Objects.equals(this.labels, membership.labels) &&
        Objects.equals(this.lastConnectionTime, membership.lastConnectionTime) &&
        Objects.equals(this.monitoringConfig, membership.monitoringConfig) &&
        Objects.equals(this.name, membership.name) &&
        Objects.equals(this.state, membership.state) &&
        Objects.equals(this.uniqueId, membership.uniqueId) &&
        Objects.equals(this.updateTime, membership.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authority, createTime, deleteTime, description, endpoint, externalId, labels, lastConnectionTime, monitoringConfig, name, state, uniqueId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Membership {\n");
    sb.append("    authority: ").append(toIndentedString(authority)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    deleteTime: ").append(toIndentedString(deleteTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    lastConnectionTime: ").append(toIndentedString(lastConnectionTime)).append("\n");
    sb.append("    monitoringConfig: ").append(toIndentedString(monitoringConfig)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authority");
    openapiFields.add("createTime");
    openapiFields.add("deleteTime");
    openapiFields.add("description");
    openapiFields.add("endpoint");
    openapiFields.add("externalId");
    openapiFields.add("labels");
    openapiFields.add("lastConnectionTime");
    openapiFields.add("monitoringConfig");
    openapiFields.add("name");
    openapiFields.add("state");
    openapiFields.add("uniqueId");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Membership
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Membership.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Membership is not found in the empty JSON string", Membership.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Membership.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Membership` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `authority`
      if (jsonObj.get("authority") != null && !jsonObj.get("authority").isJsonNull()) {
        Authority.validateJsonElement(jsonObj.get("authority"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("deleteTime") != null && !jsonObj.get("deleteTime").isJsonNull()) && !jsonObj.get("deleteTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deleteTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deleteTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `endpoint`
      if (jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) {
        MembershipEndpoint.validateJsonElement(jsonObj.get("endpoint"));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("lastConnectionTime") != null && !jsonObj.get("lastConnectionTime").isJsonNull()) && !jsonObj.get("lastConnectionTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastConnectionTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastConnectionTime").toString()));
      }
      // validate the optional field `monitoringConfig`
      if (jsonObj.get("monitoringConfig") != null && !jsonObj.get("monitoringConfig").isJsonNull()) {
        MonitoringConfig.validateJsonElement(jsonObj.get("monitoringConfig"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        MembershipState.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Membership.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Membership' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Membership> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Membership.class));

       return (TypeAdapter<T>) new TypeAdapter<Membership>() {
           @Override
           public void write(JsonWriter out, Membership value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Membership read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Membership given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Membership
   * @throws IOException if the JSON string is invalid with respect to Membership
   */
  public static Membership fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Membership.class);
  }

  /**
   * Convert an instance of Membership to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

