/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Authority {
  public static final String SERIALIZED_NAME_IDENTITY_PROVIDER = "identityProvider";
  @SerializedName(SERIALIZED_NAME_IDENTITY_PROVIDER)
  private String identityProvider;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_OIDC_JWKS = "oidcJwks";
  @SerializedName(SERIALIZED_NAME_OIDC_JWKS)
  private byte[] oidcJwks;

  public static final String SERIALIZED_NAME_WORKLOAD_IDENTITY_POOL = "workloadIdentityPool";
  @SerializedName(SERIALIZED_NAME_WORKLOAD_IDENTITY_POOL)
  private String workloadIdentityPool;

  public Authority() {
  }

  public Authority(
     String identityProvider, 
     String workloadIdentityPool
  ) {
    this();
    this.identityProvider = identityProvider;
    this.workloadIdentityPool = workloadIdentityPool;
  }

  /**
   * Output only. An identity provider that reflects the &#x60;issuer&#x60; in the workload identity pool.
   * @return identityProvider
   */
  @javax.annotation.Nullable
  public String getIdentityProvider() {
    return identityProvider;
  }



  public Authority issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Optional. A JSON Web Token (JWT) issuer URI. &#x60;issuer&#x60; must start with &#x60;https://&#x60; and be a valid URL with length &lt;2000 characters, it must use &#x60;location&#x60; rather than &#x60;zone&#x60; for GKE clusters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing &#x60;issuer&#x60; disables Workload Identity. &#x60;issuer&#x60; cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public Authority oidcJwks(byte[] oidcJwks) {
    this.oidcJwks = oidcJwks;
    return this;
  }

  /**
   * Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on &#x60;issuer&#x60;, and instead OIDC tokens will be validated using this field.
   * @return oidcJwks
   */
  @javax.annotation.Nullable
  public byte[] getOidcJwks() {
    return oidcJwks;
  }

  public void setOidcJwks(byte[] oidcJwks) {
    this.oidcJwks = oidcJwks;
  }


  /**
   * Output only. The name of the workload identity pool in which &#x60;issuer&#x60; will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is &#x60;{PROJECT_ID}.hub.id.goog&#x60;, although this is subject to change in newer versions of this API.
   * @return workloadIdentityPool
   */
  @javax.annotation.Nullable
  public String getWorkloadIdentityPool() {
    return workloadIdentityPool;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Authority authority = (Authority) o;
    return Objects.equals(this.identityProvider, authority.identityProvider) &&
        Objects.equals(this.issuer, authority.issuer) &&
        Arrays.equals(this.oidcJwks, authority.oidcJwks) &&
        Objects.equals(this.workloadIdentityPool, authority.workloadIdentityPool);
  }

  @Override
  public int hashCode() {
    return Objects.hash(identityProvider, issuer, Arrays.hashCode(oidcJwks), workloadIdentityPool);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Authority {\n");
    sb.append("    identityProvider: ").append(toIndentedString(identityProvider)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    oidcJwks: ").append(toIndentedString(oidcJwks)).append("\n");
    sb.append("    workloadIdentityPool: ").append(toIndentedString(workloadIdentityPool)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("identityProvider");
    openapiFields.add("issuer");
    openapiFields.add("oidcJwks");
    openapiFields.add("workloadIdentityPool");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Authority
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Authority.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Authority is not found in the empty JSON string", Authority.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Authority.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Authority` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("identityProvider") != null && !jsonObj.get("identityProvider").isJsonNull()) && !jsonObj.get("identityProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `identityProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("identityProvider").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("workloadIdentityPool") != null && !jsonObj.get("workloadIdentityPool").isJsonNull()) && !jsonObj.get("workloadIdentityPool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workloadIdentityPool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workloadIdentityPool").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Authority.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Authority' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Authority> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Authority.class));

       return (TypeAdapter<T>) new TypeAdapter<Authority>() {
           @Override
           public void write(JsonWriter out, Authority value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Authority read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Authority given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Authority
   * @throws IOException if the JSON string is invalid with respect to Authority
   */
  public static Authority fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Authority.class);
  }

  /**
   * Convert an instance of Authority to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

