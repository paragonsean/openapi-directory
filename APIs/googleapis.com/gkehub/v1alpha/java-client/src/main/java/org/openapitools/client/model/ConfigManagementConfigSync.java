/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigManagementGitConfig;
import org.openapitools.client.model.ConfigManagementOciConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for Config Sync
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementConfigSync {
  public static final String SERIALIZED_NAME_ALLOW_VERTICAL_SCALE = "allowVerticalScale";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_ALLOW_VERTICAL_SCALE)
  private Boolean allowVerticalScale;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_GIT = "git";
  @SerializedName(SERIALIZED_NAME_GIT)
  private ConfigManagementGitConfig git;

  public static final String SERIALIZED_NAME_METRICS_GCP_SERVICE_ACCOUNT_EMAIL = "metricsGcpServiceAccountEmail";
  @SerializedName(SERIALIZED_NAME_METRICS_GCP_SERVICE_ACCOUNT_EMAIL)
  private String metricsGcpServiceAccountEmail;

  public static final String SERIALIZED_NAME_OCI = "oci";
  @SerializedName(SERIALIZED_NAME_OCI)
  private ConfigManagementOciConfig oci;

  public static final String SERIALIZED_NAME_PREVENT_DRIFT = "preventDrift";
  @SerializedName(SERIALIZED_NAME_PREVENT_DRIFT)
  private Boolean preventDrift;

  public static final String SERIALIZED_NAME_SOURCE_FORMAT = "sourceFormat";
  @SerializedName(SERIALIZED_NAME_SOURCE_FORMAT)
  private String sourceFormat;

  public ConfigManagementConfigSync() {
  }

  @Deprecated
  public ConfigManagementConfigSync allowVerticalScale(Boolean allowVerticalScale) {
    this.allowVerticalScale = allowVerticalScale;
    return this;
  }

  /**
   * Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.
   * @return allowVerticalScale
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getAllowVerticalScale() {
    return allowVerticalScale;
  }

  @Deprecated
  public void setAllowVerticalScale(Boolean allowVerticalScale) {
    this.allowVerticalScale = allowVerticalScale;
  }


  public ConfigManagementConfigSync enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public ConfigManagementConfigSync git(ConfigManagementGitConfig git) {
    this.git = git;
    return this;
  }

  /**
   * Get git
   * @return git
   */
  @javax.annotation.Nullable
  public ConfigManagementGitConfig getGit() {
    return git;
  }

  public void setGit(ConfigManagementGitConfig git) {
    this.git = git;
  }


  public ConfigManagementConfigSync metricsGcpServiceAccountEmail(String metricsGcpServiceAccountEmail) {
    this.metricsGcpServiceAccountEmail = metricsGcpServiceAccountEmail;
    return this;
  }

  /**
   * The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount &#x60;default&#x60; in the namespace &#x60;config-management-monitoring&#x60; should be bound to the GSA.
   * @return metricsGcpServiceAccountEmail
   */
  @javax.annotation.Nullable
  public String getMetricsGcpServiceAccountEmail() {
    return metricsGcpServiceAccountEmail;
  }

  public void setMetricsGcpServiceAccountEmail(String metricsGcpServiceAccountEmail) {
    this.metricsGcpServiceAccountEmail = metricsGcpServiceAccountEmail;
  }


  public ConfigManagementConfigSync oci(ConfigManagementOciConfig oci) {
    this.oci = oci;
    return this;
  }

  /**
   * Get oci
   * @return oci
   */
  @javax.annotation.Nullable
  public ConfigManagementOciConfig getOci() {
    return oci;
  }

  public void setOci(ConfigManagementOciConfig oci) {
    this.oci = oci;
  }


  public ConfigManagementConfigSync preventDrift(Boolean preventDrift) {
    this.preventDrift = preventDrift;
    return this;
  }

  /**
   * Set to true to enable the Config Sync admission webhook to prevent drifts. If set to &#x60;false&#x60;, disables the Config Sync admission webhook and does not prevent drifts.
   * @return preventDrift
   */
  @javax.annotation.Nullable
  public Boolean getPreventDrift() {
    return preventDrift;
  }

  public void setPreventDrift(Boolean preventDrift) {
    this.preventDrift = preventDrift;
  }


  public ConfigManagementConfigSync sourceFormat(String sourceFormat) {
    this.sourceFormat = sourceFormat;
    return this;
  }

  /**
   * Specifies whether the Config Sync Repo is in \&quot;hierarchical\&quot; or \&quot;unstructured\&quot; mode.
   * @return sourceFormat
   */
  @javax.annotation.Nullable
  public String getSourceFormat() {
    return sourceFormat;
  }

  public void setSourceFormat(String sourceFormat) {
    this.sourceFormat = sourceFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementConfigSync configManagementConfigSync = (ConfigManagementConfigSync) o;
    return Objects.equals(this.allowVerticalScale, configManagementConfigSync.allowVerticalScale) &&
        Objects.equals(this.enabled, configManagementConfigSync.enabled) &&
        Objects.equals(this.git, configManagementConfigSync.git) &&
        Objects.equals(this.metricsGcpServiceAccountEmail, configManagementConfigSync.metricsGcpServiceAccountEmail) &&
        Objects.equals(this.oci, configManagementConfigSync.oci) &&
        Objects.equals(this.preventDrift, configManagementConfigSync.preventDrift) &&
        Objects.equals(this.sourceFormat, configManagementConfigSync.sourceFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowVerticalScale, enabled, git, metricsGcpServiceAccountEmail, oci, preventDrift, sourceFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementConfigSync {\n");
    sb.append("    allowVerticalScale: ").append(toIndentedString(allowVerticalScale)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    git: ").append(toIndentedString(git)).append("\n");
    sb.append("    metricsGcpServiceAccountEmail: ").append(toIndentedString(metricsGcpServiceAccountEmail)).append("\n");
    sb.append("    oci: ").append(toIndentedString(oci)).append("\n");
    sb.append("    preventDrift: ").append(toIndentedString(preventDrift)).append("\n");
    sb.append("    sourceFormat: ").append(toIndentedString(sourceFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowVerticalScale");
    openapiFields.add("enabled");
    openapiFields.add("git");
    openapiFields.add("metricsGcpServiceAccountEmail");
    openapiFields.add("oci");
    openapiFields.add("preventDrift");
    openapiFields.add("sourceFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementConfigSync
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementConfigSync.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementConfigSync is not found in the empty JSON string", ConfigManagementConfigSync.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementConfigSync.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementConfigSync` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `git`
      if (jsonObj.get("git") != null && !jsonObj.get("git").isJsonNull()) {
        ConfigManagementGitConfig.validateJsonElement(jsonObj.get("git"));
      }
      if ((jsonObj.get("metricsGcpServiceAccountEmail") != null && !jsonObj.get("metricsGcpServiceAccountEmail").isJsonNull()) && !jsonObj.get("metricsGcpServiceAccountEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `metricsGcpServiceAccountEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("metricsGcpServiceAccountEmail").toString()));
      }
      // validate the optional field `oci`
      if (jsonObj.get("oci") != null && !jsonObj.get("oci").isJsonNull()) {
        ConfigManagementOciConfig.validateJsonElement(jsonObj.get("oci"));
      }
      if ((jsonObj.get("sourceFormat") != null && !jsonObj.get("sourceFormat").isJsonNull()) && !jsonObj.get("sourceFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceFormat").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementConfigSync.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementConfigSync' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementConfigSync> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementConfigSync.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementConfigSync>() {
           @Override
           public void write(JsonWriter out, ConfigManagementConfigSync value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementConfigSync read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementConfigSync given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementConfigSync
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementConfigSync
   */
  public static ConfigManagementConfigSync fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementConfigSync.class);
  }

  /**
   * Convert an instance of ConfigManagementConfigSync to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

