/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigManagementMembershipSpec;
import org.openapitools.client.model.IdentityServiceMembershipSpec;
import org.openapitools.client.model.PolicyControllerMembershipSpec;
import org.openapitools.client.model.ServiceMeshMembershipSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommonFleetDefaultMemberConfigSpec contains default configuration information for memberships of a fleet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommonFleetDefaultMemberConfigSpec {
  public static final String SERIALIZED_NAME_CONFIGMANAGEMENT = "configmanagement";
  @SerializedName(SERIALIZED_NAME_CONFIGMANAGEMENT)
  private ConfigManagementMembershipSpec configmanagement;

  public static final String SERIALIZED_NAME_IDENTITYSERVICE = "identityservice";
  @SerializedName(SERIALIZED_NAME_IDENTITYSERVICE)
  private IdentityServiceMembershipSpec identityservice;

  public static final String SERIALIZED_NAME_MESH = "mesh";
  @SerializedName(SERIALIZED_NAME_MESH)
  private ServiceMeshMembershipSpec mesh;

  public static final String SERIALIZED_NAME_POLICYCONTROLLER = "policycontroller";
  @SerializedName(SERIALIZED_NAME_POLICYCONTROLLER)
  private PolicyControllerMembershipSpec policycontroller;

  public CommonFleetDefaultMemberConfigSpec() {
  }

  public CommonFleetDefaultMemberConfigSpec configmanagement(ConfigManagementMembershipSpec configmanagement) {
    this.configmanagement = configmanagement;
    return this;
  }

  /**
   * Get configmanagement
   * @return configmanagement
   */
  @javax.annotation.Nullable
  public ConfigManagementMembershipSpec getConfigmanagement() {
    return configmanagement;
  }

  public void setConfigmanagement(ConfigManagementMembershipSpec configmanagement) {
    this.configmanagement = configmanagement;
  }


  public CommonFleetDefaultMemberConfigSpec identityservice(IdentityServiceMembershipSpec identityservice) {
    this.identityservice = identityservice;
    return this;
  }

  /**
   * Get identityservice
   * @return identityservice
   */
  @javax.annotation.Nullable
  public IdentityServiceMembershipSpec getIdentityservice() {
    return identityservice;
  }

  public void setIdentityservice(IdentityServiceMembershipSpec identityservice) {
    this.identityservice = identityservice;
  }


  public CommonFleetDefaultMemberConfigSpec mesh(ServiceMeshMembershipSpec mesh) {
    this.mesh = mesh;
    return this;
  }

  /**
   * Get mesh
   * @return mesh
   */
  @javax.annotation.Nullable
  public ServiceMeshMembershipSpec getMesh() {
    return mesh;
  }

  public void setMesh(ServiceMeshMembershipSpec mesh) {
    this.mesh = mesh;
  }


  public CommonFleetDefaultMemberConfigSpec policycontroller(PolicyControllerMembershipSpec policycontroller) {
    this.policycontroller = policycontroller;
    return this;
  }

  /**
   * Get policycontroller
   * @return policycontroller
   */
  @javax.annotation.Nullable
  public PolicyControllerMembershipSpec getPolicycontroller() {
    return policycontroller;
  }

  public void setPolicycontroller(PolicyControllerMembershipSpec policycontroller) {
    this.policycontroller = policycontroller;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonFleetDefaultMemberConfigSpec commonFleetDefaultMemberConfigSpec = (CommonFleetDefaultMemberConfigSpec) o;
    return Objects.equals(this.configmanagement, commonFleetDefaultMemberConfigSpec.configmanagement) &&
        Objects.equals(this.identityservice, commonFleetDefaultMemberConfigSpec.identityservice) &&
        Objects.equals(this.mesh, commonFleetDefaultMemberConfigSpec.mesh) &&
        Objects.equals(this.policycontroller, commonFleetDefaultMemberConfigSpec.policycontroller);
  }

  @Override
  public int hashCode() {
    return Objects.hash(configmanagement, identityservice, mesh, policycontroller);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonFleetDefaultMemberConfigSpec {\n");
    sb.append("    configmanagement: ").append(toIndentedString(configmanagement)).append("\n");
    sb.append("    identityservice: ").append(toIndentedString(identityservice)).append("\n");
    sb.append("    mesh: ").append(toIndentedString(mesh)).append("\n");
    sb.append("    policycontroller: ").append(toIndentedString(policycontroller)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("configmanagement");
    openapiFields.add("identityservice");
    openapiFields.add("mesh");
    openapiFields.add("policycontroller");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonFleetDefaultMemberConfigSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonFleetDefaultMemberConfigSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonFleetDefaultMemberConfigSpec is not found in the empty JSON string", CommonFleetDefaultMemberConfigSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonFleetDefaultMemberConfigSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonFleetDefaultMemberConfigSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `configmanagement`
      if (jsonObj.get("configmanagement") != null && !jsonObj.get("configmanagement").isJsonNull()) {
        ConfigManagementMembershipSpec.validateJsonElement(jsonObj.get("configmanagement"));
      }
      // validate the optional field `identityservice`
      if (jsonObj.get("identityservice") != null && !jsonObj.get("identityservice").isJsonNull()) {
        IdentityServiceMembershipSpec.validateJsonElement(jsonObj.get("identityservice"));
      }
      // validate the optional field `mesh`
      if (jsonObj.get("mesh") != null && !jsonObj.get("mesh").isJsonNull()) {
        ServiceMeshMembershipSpec.validateJsonElement(jsonObj.get("mesh"));
      }
      // validate the optional field `policycontroller`
      if (jsonObj.get("policycontroller") != null && !jsonObj.get("policycontroller").isJsonNull()) {
        PolicyControllerMembershipSpec.validateJsonElement(jsonObj.get("policycontroller"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonFleetDefaultMemberConfigSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonFleetDefaultMemberConfigSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonFleetDefaultMemberConfigSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonFleetDefaultMemberConfigSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonFleetDefaultMemberConfigSpec>() {
           @Override
           public void write(JsonWriter out, CommonFleetDefaultMemberConfigSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonFleetDefaultMemberConfigSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonFleetDefaultMemberConfigSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonFleetDefaultMemberConfigSpec
   * @throws IOException if the JSON string is invalid with respect to CommonFleetDefaultMemberConfigSpec
   */
  public static CommonFleetDefaultMemberConfigSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonFleetDefaultMemberConfigSpec.class);
  }

  /**
   * Convert an instance of CommonFleetDefaultMemberConfigSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

