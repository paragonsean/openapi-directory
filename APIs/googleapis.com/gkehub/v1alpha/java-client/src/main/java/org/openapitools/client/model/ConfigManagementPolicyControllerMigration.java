/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * State for the migration of PolicyController from ACM -&gt; PoCo Hub.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementPolicyControllerMigration {
  public static final String SERIALIZED_NAME_COPY_TIME = "copyTime";
  @SerializedName(SERIALIZED_NAME_COPY_TIME)
  private String copyTime;

  /**
   * Stage of the migration.
   */
  @JsonAdapter(StageEnum.Adapter.class)
  public enum StageEnum {
    STAGE_UNSPECIFIED("STAGE_UNSPECIFIED"),
    
    ACM_MANAGED("ACM_MANAGED"),
    
    POCO_MANAGED("POCO_MANAGED");

    private String value;

    StageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StageEnum fromValue(String value) {
      for (StageEnum b : StageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  private StageEnum stage;

  public ConfigManagementPolicyControllerMigration() {
  }

  public ConfigManagementPolicyControllerMigration copyTime(String copyTime) {
    this.copyTime = copyTime;
    return this;
  }

  /**
   * Last time this membership spec was copied to PoCo feature.
   * @return copyTime
   */
  @javax.annotation.Nullable
  public String getCopyTime() {
    return copyTime;
  }

  public void setCopyTime(String copyTime) {
    this.copyTime = copyTime;
  }


  public ConfigManagementPolicyControllerMigration stage(StageEnum stage) {
    this.stage = stage;
    return this;
  }

  /**
   * Stage of the migration.
   * @return stage
   */
  @javax.annotation.Nullable
  public StageEnum getStage() {
    return stage;
  }

  public void setStage(StageEnum stage) {
    this.stage = stage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementPolicyControllerMigration configManagementPolicyControllerMigration = (ConfigManagementPolicyControllerMigration) o;
    return Objects.equals(this.copyTime, configManagementPolicyControllerMigration.copyTime) &&
        Objects.equals(this.stage, configManagementPolicyControllerMigration.stage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(copyTime, stage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementPolicyControllerMigration {\n");
    sb.append("    copyTime: ").append(toIndentedString(copyTime)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("copyTime");
    openapiFields.add("stage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementPolicyControllerMigration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementPolicyControllerMigration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementPolicyControllerMigration is not found in the empty JSON string", ConfigManagementPolicyControllerMigration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementPolicyControllerMigration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementPolicyControllerMigration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("copyTime") != null && !jsonObj.get("copyTime").isJsonNull()) && !jsonObj.get("copyTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `copyTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("copyTime").toString()));
      }
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      // validate the optional field `stage`
      if (jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) {
        StageEnum.validateJsonElement(jsonObj.get("stage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementPolicyControllerMigration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementPolicyControllerMigration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementPolicyControllerMigration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementPolicyControllerMigration.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementPolicyControllerMigration>() {
           @Override
           public void write(JsonWriter out, ConfigManagementPolicyControllerMigration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementPolicyControllerMigration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementPolicyControllerMigration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementPolicyControllerMigration
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementPolicyControllerMigration
   */
  public static ConfigManagementPolicyControllerMigration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementPolicyControllerMigration.class);
  }

  /**
   * Convert an instance of ConfigManagementPolicyControllerMigration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

