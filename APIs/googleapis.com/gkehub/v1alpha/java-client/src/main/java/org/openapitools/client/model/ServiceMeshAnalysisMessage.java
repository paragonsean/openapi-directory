/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ServiceMeshAnalysisMessageBase;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AnalysisMessage is a single message produced by an analyzer, and it used to communicate to the end user about the state of their Service Mesh configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServiceMeshAnalysisMessage {
  public static final String SERIALIZED_NAME_ARGS = "args";
  @SerializedName(SERIALIZED_NAME_ARGS)
  private Map<String, Object> args = new HashMap<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_MESSAGE_BASE = "messageBase";
  @SerializedName(SERIALIZED_NAME_MESSAGE_BASE)
  private ServiceMeshAnalysisMessageBase messageBase;

  public static final String SERIALIZED_NAME_RESOURCE_PATHS = "resourcePaths";
  @SerializedName(SERIALIZED_NAME_RESOURCE_PATHS)
  private List<String> resourcePaths = new ArrayList<>();

  public ServiceMeshAnalysisMessage() {
  }

  public ServiceMeshAnalysisMessage args(Map<String, Object> args) {
    this.args = args;
    return this;
  }

  public ServiceMeshAnalysisMessage putArgsItem(String key, Object argsItem) {
    if (this.args == null) {
      this.args = new HashMap<>();
    }
    this.args.put(key, argsItem);
    return this;
  }

  /**
   * A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.
   * @return args
   */
  @javax.annotation.Nullable
  public Map<String, Object> getArgs() {
    return args;
  }

  public void setArgs(Map<String, Object> args) {
    this.args = args;
  }


  public ServiceMeshAnalysisMessage description(String description) {
    this.description = description;
    return this;
  }

  /**
   * A human readable description of what the error means. It is suitable for non-internationalize display purposes.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ServiceMeshAnalysisMessage messageBase(ServiceMeshAnalysisMessageBase messageBase) {
    this.messageBase = messageBase;
    return this;
  }

  /**
   * Get messageBase
   * @return messageBase
   */
  @javax.annotation.Nullable
  public ServiceMeshAnalysisMessageBase getMessageBase() {
    return messageBase;
  }

  public void setMessageBase(ServiceMeshAnalysisMessageBase messageBase) {
    this.messageBase = messageBase;
  }


  public ServiceMeshAnalysisMessage resourcePaths(List<String> resourcePaths) {
    this.resourcePaths = resourcePaths;
    return this;
  }

  public ServiceMeshAnalysisMessage addResourcePathsItem(String resourcePathsItem) {
    if (this.resourcePaths == null) {
      this.resourcePaths = new ArrayList<>();
    }
    this.resourcePaths.add(resourcePathsItem);
    return this;
  }

  /**
   * A list of strings specifying the resource identifiers that were the cause of message generation. A \&quot;path\&quot; here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE/)?RESOURCETYPE/NAME if the cause is a resource in a cluster
   * @return resourcePaths
   */
  @javax.annotation.Nullable
  public List<String> getResourcePaths() {
    return resourcePaths;
  }

  public void setResourcePaths(List<String> resourcePaths) {
    this.resourcePaths = resourcePaths;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceMeshAnalysisMessage serviceMeshAnalysisMessage = (ServiceMeshAnalysisMessage) o;
    return Objects.equals(this.args, serviceMeshAnalysisMessage.args) &&
        Objects.equals(this.description, serviceMeshAnalysisMessage.description) &&
        Objects.equals(this.messageBase, serviceMeshAnalysisMessage.messageBase) &&
        Objects.equals(this.resourcePaths, serviceMeshAnalysisMessage.resourcePaths);
  }

  @Override
  public int hashCode() {
    return Objects.hash(args, description, messageBase, resourcePaths);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceMeshAnalysisMessage {\n");
    sb.append("    args: ").append(toIndentedString(args)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    messageBase: ").append(toIndentedString(messageBase)).append("\n");
    sb.append("    resourcePaths: ").append(toIndentedString(resourcePaths)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("args");
    openapiFields.add("description");
    openapiFields.add("messageBase");
    openapiFields.add("resourcePaths");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceMeshAnalysisMessage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceMeshAnalysisMessage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceMeshAnalysisMessage is not found in the empty JSON string", ServiceMeshAnalysisMessage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceMeshAnalysisMessage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceMeshAnalysisMessage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `messageBase`
      if (jsonObj.get("messageBase") != null && !jsonObj.get("messageBase").isJsonNull()) {
        ServiceMeshAnalysisMessageBase.validateJsonElement(jsonObj.get("messageBase"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resourcePaths") != null && !jsonObj.get("resourcePaths").isJsonNull() && !jsonObj.get("resourcePaths").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourcePaths` to be an array in the JSON string but got `%s`", jsonObj.get("resourcePaths").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceMeshAnalysisMessage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceMeshAnalysisMessage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceMeshAnalysisMessage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceMeshAnalysisMessage.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceMeshAnalysisMessage>() {
           @Override
           public void write(JsonWriter out, ServiceMeshAnalysisMessage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceMeshAnalysisMessage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceMeshAnalysisMessage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceMeshAnalysisMessage
   * @throws IOException if the JSON string is invalid with respect to ServiceMeshAnalysisMessage
   */
  public static ServiceMeshAnalysisMessage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceMeshAnalysisMessage.class);
  }

  /**
   * Convert an instance of ServiceMeshAnalysisMessage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

