/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ResourceManifest;
import org.openapitools.client.model.ResourceOptions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * KubernetesResource contains the YAML manifests and configuration for Membership Kubernetes resources in the cluster. After CreateMembership or UpdateMembership, these resources should be re-applied in the cluster.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class KubernetesResource {
  public static final String SERIALIZED_NAME_CONNECT_RESOURCES = "connectResources";
  @SerializedName(SERIALIZED_NAME_CONNECT_RESOURCES)
  private List<ResourceManifest> connectResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEMBERSHIP_CR_MANIFEST = "membershipCrManifest";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_CR_MANIFEST)
  private String membershipCrManifest;

  public static final String SERIALIZED_NAME_MEMBERSHIP_RESOURCES = "membershipResources";
  @SerializedName(SERIALIZED_NAME_MEMBERSHIP_RESOURCES)
  private List<ResourceManifest> membershipResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_OPTIONS = "resourceOptions";
  @SerializedName(SERIALIZED_NAME_RESOURCE_OPTIONS)
  private ResourceOptions resourceOptions;

  public KubernetesResource() {
  }

  public KubernetesResource(
     List<ResourceManifest> connectResources, 
     List<ResourceManifest> membershipResources
  ) {
    this();
    this.connectResources = connectResources;
    this.membershipResources = membershipResources;
  }

  /**
   * Output only. The Kubernetes resources for installing the GKE Connect agent This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
   * @return connectResources
   */
  @javax.annotation.Nullable
  public List<ResourceManifest> getConnectResources() {
    return connectResources;
  }



  public KubernetesResource membershipCrManifest(String membershipCrManifest) {
    this.membershipCrManifest = membershipCrManifest;
    return this;
  }

  /**
   * Input only. The YAML representation of the Membership CR. This field is ignored for GKE clusters where Hub can read the CR directly. Callers should provide the CR that is currently present in the cluster during CreateMembership or UpdateMembership, or leave this field empty if none exists. The CR manifest is used to validate the cluster has not been registered with another Membership.
   * @return membershipCrManifest
   */
  @javax.annotation.Nullable
  public String getMembershipCrManifest() {
    return membershipCrManifest;
  }

  public void setMembershipCrManifest(String membershipCrManifest) {
    this.membershipCrManifest = membershipCrManifest;
  }


  /**
   * Output only. Additional Kubernetes resources that need to be applied to the cluster after Membership creation, and after every update. This field is only populated in the Membership returned from a successful long-running operation from CreateMembership or UpdateMembership. It is not populated during normal GetMembership or ListMemberships requests. To get the resource manifest after the initial registration, the caller should make a UpdateMembership call with an empty field mask.
   * @return membershipResources
   */
  @javax.annotation.Nullable
  public List<ResourceManifest> getMembershipResources() {
    return membershipResources;
  }



  public KubernetesResource resourceOptions(ResourceOptions resourceOptions) {
    this.resourceOptions = resourceOptions;
    return this;
  }

  /**
   * Get resourceOptions
   * @return resourceOptions
   */
  @javax.annotation.Nullable
  public ResourceOptions getResourceOptions() {
    return resourceOptions;
  }

  public void setResourceOptions(ResourceOptions resourceOptions) {
    this.resourceOptions = resourceOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KubernetesResource kubernetesResource = (KubernetesResource) o;
    return Objects.equals(this.connectResources, kubernetesResource.connectResources) &&
        Objects.equals(this.membershipCrManifest, kubernetesResource.membershipCrManifest) &&
        Objects.equals(this.membershipResources, kubernetesResource.membershipResources) &&
        Objects.equals(this.resourceOptions, kubernetesResource.resourceOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectResources, membershipCrManifest, membershipResources, resourceOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KubernetesResource {\n");
    sb.append("    connectResources: ").append(toIndentedString(connectResources)).append("\n");
    sb.append("    membershipCrManifest: ").append(toIndentedString(membershipCrManifest)).append("\n");
    sb.append("    membershipResources: ").append(toIndentedString(membershipResources)).append("\n");
    sb.append("    resourceOptions: ").append(toIndentedString(resourceOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectResources");
    openapiFields.add("membershipCrManifest");
    openapiFields.add("membershipResources");
    openapiFields.add("resourceOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KubernetesResource
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KubernetesResource.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KubernetesResource is not found in the empty JSON string", KubernetesResource.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KubernetesResource.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KubernetesResource` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("connectResources") != null && !jsonObj.get("connectResources").isJsonNull()) {
        JsonArray jsonArrayconnectResources = jsonObj.getAsJsonArray("connectResources");
        if (jsonArrayconnectResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("connectResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `connectResources` to be an array in the JSON string but got `%s`", jsonObj.get("connectResources").toString()));
          }

          // validate the optional field `connectResources` (array)
          for (int i = 0; i < jsonArrayconnectResources.size(); i++) {
            ResourceManifest.validateJsonElement(jsonArrayconnectResources.get(i));
          };
        }
      }
      if ((jsonObj.get("membershipCrManifest") != null && !jsonObj.get("membershipCrManifest").isJsonNull()) && !jsonObj.get("membershipCrManifest").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `membershipCrManifest` to be a primitive type in the JSON string but got `%s`", jsonObj.get("membershipCrManifest").toString()));
      }
      if (jsonObj.get("membershipResources") != null && !jsonObj.get("membershipResources").isJsonNull()) {
        JsonArray jsonArraymembershipResources = jsonObj.getAsJsonArray("membershipResources");
        if (jsonArraymembershipResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("membershipResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `membershipResources` to be an array in the JSON string but got `%s`", jsonObj.get("membershipResources").toString()));
          }

          // validate the optional field `membershipResources` (array)
          for (int i = 0; i < jsonArraymembershipResources.size(); i++) {
            ResourceManifest.validateJsonElement(jsonArraymembershipResources.get(i));
          };
        }
      }
      // validate the optional field `resourceOptions`
      if (jsonObj.get("resourceOptions") != null && !jsonObj.get("resourceOptions").isJsonNull()) {
        ResourceOptions.validateJsonElement(jsonObj.get("resourceOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KubernetesResource.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KubernetesResource' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KubernetesResource> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KubernetesResource.class));

       return (TypeAdapter<T>) new TypeAdapter<KubernetesResource>() {
           @Override
           public void write(JsonWriter out, KubernetesResource value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KubernetesResource read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KubernetesResource given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KubernetesResource
   * @throws IOException if the JSON string is invalid with respect to KubernetesResource
   */
  public static KubernetesResource fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KubernetesResource.class);
  }

  /**
   * Convert an instance of KubernetesResource to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

