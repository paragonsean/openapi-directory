/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MonitoringConfig informs Fleet-based applications/services/UIs how the metrics for the underlying cluster is reported to cloud monitoring services. It can be set from empty to non-empty, but can&#39;t be mutated directly to prevent accidentally breaking the constinousty of metrics.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoringConfig {
  public static final String SERIALIZED_NAME_CLUSTER = "cluster";
  @SerializedName(SERIALIZED_NAME_CLUSTER)
  private String cluster;

  public static final String SERIALIZED_NAME_CLUSTER_HASH = "clusterHash";
  @SerializedName(SERIALIZED_NAME_CLUSTER_HASH)
  private String clusterHash;

  public static final String SERIALIZED_NAME_KUBERNETES_METRICS_PREFIX = "kubernetesMetricsPrefix";
  @SerializedName(SERIALIZED_NAME_KUBERNETES_METRICS_PREFIX)
  private String kubernetesMetricsPrefix;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PROJECT_ID = "projectId";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private String projectId;

  public MonitoringConfig() {
  }

  public MonitoringConfig cluster(String cluster) {
    this.cluster = cluster;
    return this;
  }

  /**
   * Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., \&quot;awsClusters/cluster_1\&quot;.
   * @return cluster
   */
  @javax.annotation.Nullable
  public String getCluster() {
    return cluster;
  }

  public void setCluster(String cluster) {
    this.cluster = cluster;
  }


  public MonitoringConfig clusterHash(String clusterHash) {
    this.clusterHash = clusterHash;
    return this;
  }

  /**
   * Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.
   * @return clusterHash
   */
  @javax.annotation.Nullable
  public String getClusterHash() {
    return clusterHash;
  }

  public void setClusterHash(String clusterHash) {
    this.clusterHash = clusterHash;
  }


  public MonitoringConfig kubernetesMetricsPrefix(String kubernetesMetricsPrefix) {
    this.kubernetesMetricsPrefix = kubernetesMetricsPrefix;
    return this;
  }

  /**
   * Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.
   * @return kubernetesMetricsPrefix
   */
  @javax.annotation.Nullable
  public String getKubernetesMetricsPrefix() {
    return kubernetesMetricsPrefix;
  }

  public void setKubernetesMetricsPrefix(String kubernetesMetricsPrefix) {
    this.kubernetesMetricsPrefix = kubernetesMetricsPrefix;
  }


  public MonitoringConfig location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Optional. Location used to report Metrics
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public MonitoringConfig projectId(String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Optional. Project used to report Metrics
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(String projectId) {
    this.projectId = projectId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringConfig monitoringConfig = (MonitoringConfig) o;
    return Objects.equals(this.cluster, monitoringConfig.cluster) &&
        Objects.equals(this.clusterHash, monitoringConfig.clusterHash) &&
        Objects.equals(this.kubernetesMetricsPrefix, monitoringConfig.kubernetesMetricsPrefix) &&
        Objects.equals(this.location, monitoringConfig.location) &&
        Objects.equals(this.projectId, monitoringConfig.projectId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cluster, clusterHash, kubernetesMetricsPrefix, location, projectId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringConfig {\n");
    sb.append("    cluster: ").append(toIndentedString(cluster)).append("\n");
    sb.append("    clusterHash: ").append(toIndentedString(clusterHash)).append("\n");
    sb.append("    kubernetesMetricsPrefix: ").append(toIndentedString(kubernetesMetricsPrefix)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cluster");
    openapiFields.add("clusterHash");
    openapiFields.add("kubernetesMetricsPrefix");
    openapiFields.add("location");
    openapiFields.add("projectId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoringConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoringConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoringConfig is not found in the empty JSON string", MonitoringConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoringConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoringConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cluster") != null && !jsonObj.get("cluster").isJsonNull()) && !jsonObj.get("cluster").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cluster` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cluster").toString()));
      }
      if ((jsonObj.get("clusterHash") != null && !jsonObj.get("clusterHash").isJsonNull()) && !jsonObj.get("clusterHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterHash").toString()));
      }
      if ((jsonObj.get("kubernetesMetricsPrefix") != null && !jsonObj.get("kubernetesMetricsPrefix").isJsonNull()) && !jsonObj.get("kubernetesMetricsPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kubernetesMetricsPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kubernetesMetricsPrefix").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("projectId") != null && !jsonObj.get("projectId").isJsonNull()) && !jsonObj.get("projectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("projectId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoringConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoringConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoringConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoringConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoringConfig>() {
           @Override
           public void write(JsonWriter out, MonitoringConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoringConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoringConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoringConfig
   * @throws IOException if the JSON string is invalid with respect to MonitoringConfig
   */
  public static MonitoringConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoringConfig.class);
  }

  /**
   * Convert an instance of MonitoringConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

