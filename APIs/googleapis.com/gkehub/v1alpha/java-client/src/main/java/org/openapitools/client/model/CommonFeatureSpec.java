/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnthosObservabilityFeatureSpec;
import org.openapitools.client.model.CloudAuditLoggingFeatureSpec;
import org.openapitools.client.model.ClusterUpgradeFleetSpec;
import org.openapitools.client.model.DataplaneV2FeatureSpec;
import org.openapitools.client.model.FeatureSpec;
import org.openapitools.client.model.FleetObservabilityFeatureSpec;
import org.openapitools.client.model.MultiClusterIngressFeatureSpec;
import org.openapitools.client.model.NamespaceActuationFeatureSpec;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CommonFeatureSpec contains Hub-wide configuration information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CommonFeatureSpec {
  public static final String SERIALIZED_NAME_ANTHOSOBSERVABILITY = "anthosobservability";
  @SerializedName(SERIALIZED_NAME_ANTHOSOBSERVABILITY)
  private AnthosObservabilityFeatureSpec anthosobservability;

  public static final String SERIALIZED_NAME_APPDEVEXPERIENCE = "appdevexperience";
  @SerializedName(SERIALIZED_NAME_APPDEVEXPERIENCE)
  private Object appdevexperience;

  public static final String SERIALIZED_NAME_CLOUDAUDITLOGGING = "cloudauditlogging";
  @SerializedName(SERIALIZED_NAME_CLOUDAUDITLOGGING)
  private CloudAuditLoggingFeatureSpec cloudauditlogging;

  public static final String SERIALIZED_NAME_CLUSTERUPGRADE = "clusterupgrade";
  @SerializedName(SERIALIZED_NAME_CLUSTERUPGRADE)
  private ClusterUpgradeFleetSpec clusterupgrade;

  public static final String SERIALIZED_NAME_DATAPLANEV2 = "dataplanev2";
  @SerializedName(SERIALIZED_NAME_DATAPLANEV2)
  private DataplaneV2FeatureSpec dataplanev2;

  public static final String SERIALIZED_NAME_FLEETOBSERVABILITY = "fleetobservability";
  @SerializedName(SERIALIZED_NAME_FLEETOBSERVABILITY)
  private FleetObservabilityFeatureSpec fleetobservability;

  public static final String SERIALIZED_NAME_MULTICLUSTERINGRESS = "multiclusteringress";
  @SerializedName(SERIALIZED_NAME_MULTICLUSTERINGRESS)
  private MultiClusterIngressFeatureSpec multiclusteringress;

  public static final String SERIALIZED_NAME_NAMESPACEACTUATION = "namespaceactuation";
  @SerializedName(SERIALIZED_NAME_NAMESPACEACTUATION)
  private NamespaceActuationFeatureSpec namespaceactuation;

  public static final String SERIALIZED_NAME_WORKLOADCERTIFICATE = "workloadcertificate";
  @SerializedName(SERIALIZED_NAME_WORKLOADCERTIFICATE)
  private FeatureSpec workloadcertificate;

  public CommonFeatureSpec() {
  }

  public CommonFeatureSpec anthosobservability(AnthosObservabilityFeatureSpec anthosobservability) {
    this.anthosobservability = anthosobservability;
    return this;
  }

  /**
   * Get anthosobservability
   * @return anthosobservability
   */
  @javax.annotation.Nullable
  public AnthosObservabilityFeatureSpec getAnthosobservability() {
    return anthosobservability;
  }

  public void setAnthosobservability(AnthosObservabilityFeatureSpec anthosobservability) {
    this.anthosobservability = anthosobservability;
  }


  public CommonFeatureSpec appdevexperience(Object appdevexperience) {
    this.appdevexperience = appdevexperience;
    return this;
  }

  /**
   * Spec for App Dev Experience Feature.
   * @return appdevexperience
   */
  @javax.annotation.Nullable
  public Object getAppdevexperience() {
    return appdevexperience;
  }

  public void setAppdevexperience(Object appdevexperience) {
    this.appdevexperience = appdevexperience;
  }


  public CommonFeatureSpec cloudauditlogging(CloudAuditLoggingFeatureSpec cloudauditlogging) {
    this.cloudauditlogging = cloudauditlogging;
    return this;
  }

  /**
   * Get cloudauditlogging
   * @return cloudauditlogging
   */
  @javax.annotation.Nullable
  public CloudAuditLoggingFeatureSpec getCloudauditlogging() {
    return cloudauditlogging;
  }

  public void setCloudauditlogging(CloudAuditLoggingFeatureSpec cloudauditlogging) {
    this.cloudauditlogging = cloudauditlogging;
  }


  public CommonFeatureSpec clusterupgrade(ClusterUpgradeFleetSpec clusterupgrade) {
    this.clusterupgrade = clusterupgrade;
    return this;
  }

  /**
   * Get clusterupgrade
   * @return clusterupgrade
   */
  @javax.annotation.Nullable
  public ClusterUpgradeFleetSpec getClusterupgrade() {
    return clusterupgrade;
  }

  public void setClusterupgrade(ClusterUpgradeFleetSpec clusterupgrade) {
    this.clusterupgrade = clusterupgrade;
  }


  public CommonFeatureSpec dataplanev2(DataplaneV2FeatureSpec dataplanev2) {
    this.dataplanev2 = dataplanev2;
    return this;
  }

  /**
   * Get dataplanev2
   * @return dataplanev2
   */
  @javax.annotation.Nullable
  public DataplaneV2FeatureSpec getDataplanev2() {
    return dataplanev2;
  }

  public void setDataplanev2(DataplaneV2FeatureSpec dataplanev2) {
    this.dataplanev2 = dataplanev2;
  }


  public CommonFeatureSpec fleetobservability(FleetObservabilityFeatureSpec fleetobservability) {
    this.fleetobservability = fleetobservability;
    return this;
  }

  /**
   * Get fleetobservability
   * @return fleetobservability
   */
  @javax.annotation.Nullable
  public FleetObservabilityFeatureSpec getFleetobservability() {
    return fleetobservability;
  }

  public void setFleetobservability(FleetObservabilityFeatureSpec fleetobservability) {
    this.fleetobservability = fleetobservability;
  }


  public CommonFeatureSpec multiclusteringress(MultiClusterIngressFeatureSpec multiclusteringress) {
    this.multiclusteringress = multiclusteringress;
    return this;
  }

  /**
   * Get multiclusteringress
   * @return multiclusteringress
   */
  @javax.annotation.Nullable
  public MultiClusterIngressFeatureSpec getMulticlusteringress() {
    return multiclusteringress;
  }

  public void setMulticlusteringress(MultiClusterIngressFeatureSpec multiclusteringress) {
    this.multiclusteringress = multiclusteringress;
  }


  public CommonFeatureSpec namespaceactuation(NamespaceActuationFeatureSpec namespaceactuation) {
    this.namespaceactuation = namespaceactuation;
    return this;
  }

  /**
   * Get namespaceactuation
   * @return namespaceactuation
   */
  @javax.annotation.Nullable
  public NamespaceActuationFeatureSpec getNamespaceactuation() {
    return namespaceactuation;
  }

  public void setNamespaceactuation(NamespaceActuationFeatureSpec namespaceactuation) {
    this.namespaceactuation = namespaceactuation;
  }


  public CommonFeatureSpec workloadcertificate(FeatureSpec workloadcertificate) {
    this.workloadcertificate = workloadcertificate;
    return this;
  }

  /**
   * Get workloadcertificate
   * @return workloadcertificate
   */
  @javax.annotation.Nullable
  public FeatureSpec getWorkloadcertificate() {
    return workloadcertificate;
  }

  public void setWorkloadcertificate(FeatureSpec workloadcertificate) {
    this.workloadcertificate = workloadcertificate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonFeatureSpec commonFeatureSpec = (CommonFeatureSpec) o;
    return Objects.equals(this.anthosobservability, commonFeatureSpec.anthosobservability) &&
        Objects.equals(this.appdevexperience, commonFeatureSpec.appdevexperience) &&
        Objects.equals(this.cloudauditlogging, commonFeatureSpec.cloudauditlogging) &&
        Objects.equals(this.clusterupgrade, commonFeatureSpec.clusterupgrade) &&
        Objects.equals(this.dataplanev2, commonFeatureSpec.dataplanev2) &&
        Objects.equals(this.fleetobservability, commonFeatureSpec.fleetobservability) &&
        Objects.equals(this.multiclusteringress, commonFeatureSpec.multiclusteringress) &&
        Objects.equals(this.namespaceactuation, commonFeatureSpec.namespaceactuation) &&
        Objects.equals(this.workloadcertificate, commonFeatureSpec.workloadcertificate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anthosobservability, appdevexperience, cloudauditlogging, clusterupgrade, dataplanev2, fleetobservability, multiclusteringress, namespaceactuation, workloadcertificate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonFeatureSpec {\n");
    sb.append("    anthosobservability: ").append(toIndentedString(anthosobservability)).append("\n");
    sb.append("    appdevexperience: ").append(toIndentedString(appdevexperience)).append("\n");
    sb.append("    cloudauditlogging: ").append(toIndentedString(cloudauditlogging)).append("\n");
    sb.append("    clusterupgrade: ").append(toIndentedString(clusterupgrade)).append("\n");
    sb.append("    dataplanev2: ").append(toIndentedString(dataplanev2)).append("\n");
    sb.append("    fleetobservability: ").append(toIndentedString(fleetobservability)).append("\n");
    sb.append("    multiclusteringress: ").append(toIndentedString(multiclusteringress)).append("\n");
    sb.append("    namespaceactuation: ").append(toIndentedString(namespaceactuation)).append("\n");
    sb.append("    workloadcertificate: ").append(toIndentedString(workloadcertificate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anthosobservability");
    openapiFields.add("appdevexperience");
    openapiFields.add("cloudauditlogging");
    openapiFields.add("clusterupgrade");
    openapiFields.add("dataplanev2");
    openapiFields.add("fleetobservability");
    openapiFields.add("multiclusteringress");
    openapiFields.add("namespaceactuation");
    openapiFields.add("workloadcertificate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CommonFeatureSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CommonFeatureSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CommonFeatureSpec is not found in the empty JSON string", CommonFeatureSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CommonFeatureSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CommonFeatureSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `anthosobservability`
      if (jsonObj.get("anthosobservability") != null && !jsonObj.get("anthosobservability").isJsonNull()) {
        AnthosObservabilityFeatureSpec.validateJsonElement(jsonObj.get("anthosobservability"));
      }
      // validate the optional field `cloudauditlogging`
      if (jsonObj.get("cloudauditlogging") != null && !jsonObj.get("cloudauditlogging").isJsonNull()) {
        CloudAuditLoggingFeatureSpec.validateJsonElement(jsonObj.get("cloudauditlogging"));
      }
      // validate the optional field `clusterupgrade`
      if (jsonObj.get("clusterupgrade") != null && !jsonObj.get("clusterupgrade").isJsonNull()) {
        ClusterUpgradeFleetSpec.validateJsonElement(jsonObj.get("clusterupgrade"));
      }
      // validate the optional field `dataplanev2`
      if (jsonObj.get("dataplanev2") != null && !jsonObj.get("dataplanev2").isJsonNull()) {
        DataplaneV2FeatureSpec.validateJsonElement(jsonObj.get("dataplanev2"));
      }
      // validate the optional field `fleetobservability`
      if (jsonObj.get("fleetobservability") != null && !jsonObj.get("fleetobservability").isJsonNull()) {
        FleetObservabilityFeatureSpec.validateJsonElement(jsonObj.get("fleetobservability"));
      }
      // validate the optional field `multiclusteringress`
      if (jsonObj.get("multiclusteringress") != null && !jsonObj.get("multiclusteringress").isJsonNull()) {
        MultiClusterIngressFeatureSpec.validateJsonElement(jsonObj.get("multiclusteringress"));
      }
      // validate the optional field `namespaceactuation`
      if (jsonObj.get("namespaceactuation") != null && !jsonObj.get("namespaceactuation").isJsonNull()) {
        NamespaceActuationFeatureSpec.validateJsonElement(jsonObj.get("namespaceactuation"));
      }
      // validate the optional field `workloadcertificate`
      if (jsonObj.get("workloadcertificate") != null && !jsonObj.get("workloadcertificate").isJsonNull()) {
        FeatureSpec.validateJsonElement(jsonObj.get("workloadcertificate"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CommonFeatureSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CommonFeatureSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CommonFeatureSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CommonFeatureSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<CommonFeatureSpec>() {
           @Override
           public void write(JsonWriter out, CommonFeatureSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CommonFeatureSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CommonFeatureSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CommonFeatureSpec
   * @throws IOException if the JSON string is invalid with respect to CommonFeatureSpec
   */
  public static CommonFeatureSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CommonFeatureSpec.class);
  }

  /**
   * Convert an instance of CommonFeatureSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

