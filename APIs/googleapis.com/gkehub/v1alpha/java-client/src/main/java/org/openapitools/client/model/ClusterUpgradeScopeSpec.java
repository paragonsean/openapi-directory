/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ClusterUpgradeGKEUpgradeOverride;
import org.openapitools.client.model.ClusterUpgradePostConditions;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * **ClusterUpgrade**: The configuration for the scope-level ClusterUpgrade feature.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ClusterUpgradeScopeSpec {
  public static final String SERIALIZED_NAME_GKE_UPGRADE_OVERRIDES = "gkeUpgradeOverrides";
  @SerializedName(SERIALIZED_NAME_GKE_UPGRADE_OVERRIDES)
  private List<ClusterUpgradeGKEUpgradeOverride> gkeUpgradeOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_POST_CONDITIONS = "postConditions";
  @SerializedName(SERIALIZED_NAME_POST_CONDITIONS)
  private ClusterUpgradePostConditions postConditions;

  public static final String SERIALIZED_NAME_UPSTREAM_SCOPES = "upstreamScopes";
  @SerializedName(SERIALIZED_NAME_UPSTREAM_SCOPES)
  private List<String> upstreamScopes = new ArrayList<>();

  public ClusterUpgradeScopeSpec() {
  }

  public ClusterUpgradeScopeSpec gkeUpgradeOverrides(List<ClusterUpgradeGKEUpgradeOverride> gkeUpgradeOverrides) {
    this.gkeUpgradeOverrides = gkeUpgradeOverrides;
    return this;
  }

  public ClusterUpgradeScopeSpec addGkeUpgradeOverridesItem(ClusterUpgradeGKEUpgradeOverride gkeUpgradeOverridesItem) {
    if (this.gkeUpgradeOverrides == null) {
      this.gkeUpgradeOverrides = new ArrayList<>();
    }
    this.gkeUpgradeOverrides.add(gkeUpgradeOverridesItem);
    return this;
  }

  /**
   * Allow users to override some properties of each GKE upgrade.
   * @return gkeUpgradeOverrides
   */
  @javax.annotation.Nullable
  public List<ClusterUpgradeGKEUpgradeOverride> getGkeUpgradeOverrides() {
    return gkeUpgradeOverrides;
  }

  public void setGkeUpgradeOverrides(List<ClusterUpgradeGKEUpgradeOverride> gkeUpgradeOverrides) {
    this.gkeUpgradeOverrides = gkeUpgradeOverrides;
  }


  public ClusterUpgradeScopeSpec postConditions(ClusterUpgradePostConditions postConditions) {
    this.postConditions = postConditions;
    return this;
  }

  /**
   * Get postConditions
   * @return postConditions
   */
  @javax.annotation.Nullable
  public ClusterUpgradePostConditions getPostConditions() {
    return postConditions;
  }

  public void setPostConditions(ClusterUpgradePostConditions postConditions) {
    this.postConditions = postConditions;
  }


  public ClusterUpgradeScopeSpec upstreamScopes(List<String> upstreamScopes) {
    this.upstreamScopes = upstreamScopes;
    return this;
  }

  public ClusterUpgradeScopeSpec addUpstreamScopesItem(String upstreamScopesItem) {
    if (this.upstreamScopes == null) {
      this.upstreamScopes = new ArrayList<>();
    }
    this.upstreamScopes.add(upstreamScopesItem);
    return this;
  }

  /**
   * This scope consumes upgrades that have COMPLETE status code in the upstream scopes. See UpgradeStatus.Code for code definitions. The scope name should be in the form: &#x60;projects/{p}/locations/global/scopes/{s}&#x60; Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature&#39;s project. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream scope.
   * @return upstreamScopes
   */
  @javax.annotation.Nullable
  public List<String> getUpstreamScopes() {
    return upstreamScopes;
  }

  public void setUpstreamScopes(List<String> upstreamScopes) {
    this.upstreamScopes = upstreamScopes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ClusterUpgradeScopeSpec clusterUpgradeScopeSpec = (ClusterUpgradeScopeSpec) o;
    return Objects.equals(this.gkeUpgradeOverrides, clusterUpgradeScopeSpec.gkeUpgradeOverrides) &&
        Objects.equals(this.postConditions, clusterUpgradeScopeSpec.postConditions) &&
        Objects.equals(this.upstreamScopes, clusterUpgradeScopeSpec.upstreamScopes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gkeUpgradeOverrides, postConditions, upstreamScopes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ClusterUpgradeScopeSpec {\n");
    sb.append("    gkeUpgradeOverrides: ").append(toIndentedString(gkeUpgradeOverrides)).append("\n");
    sb.append("    postConditions: ").append(toIndentedString(postConditions)).append("\n");
    sb.append("    upstreamScopes: ").append(toIndentedString(upstreamScopes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gkeUpgradeOverrides");
    openapiFields.add("postConditions");
    openapiFields.add("upstreamScopes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ClusterUpgradeScopeSpec
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ClusterUpgradeScopeSpec.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ClusterUpgradeScopeSpec is not found in the empty JSON string", ClusterUpgradeScopeSpec.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ClusterUpgradeScopeSpec.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ClusterUpgradeScopeSpec` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("gkeUpgradeOverrides") != null && !jsonObj.get("gkeUpgradeOverrides").isJsonNull()) {
        JsonArray jsonArraygkeUpgradeOverrides = jsonObj.getAsJsonArray("gkeUpgradeOverrides");
        if (jsonArraygkeUpgradeOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gkeUpgradeOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gkeUpgradeOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("gkeUpgradeOverrides").toString()));
          }

          // validate the optional field `gkeUpgradeOverrides` (array)
          for (int i = 0; i < jsonArraygkeUpgradeOverrides.size(); i++) {
            ClusterUpgradeGKEUpgradeOverride.validateJsonElement(jsonArraygkeUpgradeOverrides.get(i));
          };
        }
      }
      // validate the optional field `postConditions`
      if (jsonObj.get("postConditions") != null && !jsonObj.get("postConditions").isJsonNull()) {
        ClusterUpgradePostConditions.validateJsonElement(jsonObj.get("postConditions"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("upstreamScopes") != null && !jsonObj.get("upstreamScopes").isJsonNull() && !jsonObj.get("upstreamScopes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `upstreamScopes` to be an array in the JSON string but got `%s`", jsonObj.get("upstreamScopes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ClusterUpgradeScopeSpec.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ClusterUpgradeScopeSpec' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ClusterUpgradeScopeSpec> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ClusterUpgradeScopeSpec.class));

       return (TypeAdapter<T>) new TypeAdapter<ClusterUpgradeScopeSpec>() {
           @Override
           public void write(JsonWriter out, ClusterUpgradeScopeSpec value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ClusterUpgradeScopeSpec read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ClusterUpgradeScopeSpec given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ClusterUpgradeScopeSpec
   * @throws IOException if the JSON string is invalid with respect to ClusterUpgradeScopeSpec
   */
  public static ClusterUpgradeScopeSpec fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ClusterUpgradeScopeSpec.class);
  }

  /**
   * Convert an instance of ClusterUpgradeScopeSpec to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

