/*
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * State of Policy Controller installation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:30:59.609206-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigManagementGatekeeperDeploymentState {
  /**
   * Status of gatekeeper-audit deployment.
   */
  @JsonAdapter(GatekeeperAuditEnum.Adapter.class)
  public enum GatekeeperAuditEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    GatekeeperAuditEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatekeeperAuditEnum fromValue(String value) {
      for (GatekeeperAuditEnum b : GatekeeperAuditEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatekeeperAuditEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatekeeperAuditEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatekeeperAuditEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatekeeperAuditEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatekeeperAuditEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATEKEEPER_AUDIT = "gatekeeperAudit";
  @SerializedName(SERIALIZED_NAME_GATEKEEPER_AUDIT)
  private GatekeeperAuditEnum gatekeeperAudit;

  /**
   * Status of gatekeeper-controller-manager pod.
   */
  @JsonAdapter(GatekeeperControllerManagerStateEnum.Adapter.class)
  public enum GatekeeperControllerManagerStateEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    GatekeeperControllerManagerStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatekeeperControllerManagerStateEnum fromValue(String value) {
      for (GatekeeperControllerManagerStateEnum b : GatekeeperControllerManagerStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatekeeperControllerManagerStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatekeeperControllerManagerStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatekeeperControllerManagerStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatekeeperControllerManagerStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatekeeperControllerManagerStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATEKEEPER_CONTROLLER_MANAGER_STATE = "gatekeeperControllerManagerState";
  @SerializedName(SERIALIZED_NAME_GATEKEEPER_CONTROLLER_MANAGER_STATE)
  private GatekeeperControllerManagerStateEnum gatekeeperControllerManagerState;

  /**
   * Status of the pod serving the mutation webhook.
   */
  @JsonAdapter(GatekeeperMutationEnum.Adapter.class)
  public enum GatekeeperMutationEnum {
    DEPLOYMENT_STATE_UNSPECIFIED("DEPLOYMENT_STATE_UNSPECIFIED"),
    
    NOT_INSTALLED("NOT_INSTALLED"),
    
    INSTALLED("INSTALLED"),
    
    ERROR("ERROR"),
    
    PENDING("PENDING");

    private String value;

    GatekeeperMutationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GatekeeperMutationEnum fromValue(String value) {
      for (GatekeeperMutationEnum b : GatekeeperMutationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GatekeeperMutationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GatekeeperMutationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GatekeeperMutationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GatekeeperMutationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GatekeeperMutationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GATEKEEPER_MUTATION = "gatekeeperMutation";
  @SerializedName(SERIALIZED_NAME_GATEKEEPER_MUTATION)
  private GatekeeperMutationEnum gatekeeperMutation;

  public ConfigManagementGatekeeperDeploymentState() {
  }

  public ConfigManagementGatekeeperDeploymentState gatekeeperAudit(GatekeeperAuditEnum gatekeeperAudit) {
    this.gatekeeperAudit = gatekeeperAudit;
    return this;
  }

  /**
   * Status of gatekeeper-audit deployment.
   * @return gatekeeperAudit
   */
  @javax.annotation.Nullable
  public GatekeeperAuditEnum getGatekeeperAudit() {
    return gatekeeperAudit;
  }

  public void setGatekeeperAudit(GatekeeperAuditEnum gatekeeperAudit) {
    this.gatekeeperAudit = gatekeeperAudit;
  }


  public ConfigManagementGatekeeperDeploymentState gatekeeperControllerManagerState(GatekeeperControllerManagerStateEnum gatekeeperControllerManagerState) {
    this.gatekeeperControllerManagerState = gatekeeperControllerManagerState;
    return this;
  }

  /**
   * Status of gatekeeper-controller-manager pod.
   * @return gatekeeperControllerManagerState
   */
  @javax.annotation.Nullable
  public GatekeeperControllerManagerStateEnum getGatekeeperControllerManagerState() {
    return gatekeeperControllerManagerState;
  }

  public void setGatekeeperControllerManagerState(GatekeeperControllerManagerStateEnum gatekeeperControllerManagerState) {
    this.gatekeeperControllerManagerState = gatekeeperControllerManagerState;
  }


  public ConfigManagementGatekeeperDeploymentState gatekeeperMutation(GatekeeperMutationEnum gatekeeperMutation) {
    this.gatekeeperMutation = gatekeeperMutation;
    return this;
  }

  /**
   * Status of the pod serving the mutation webhook.
   * @return gatekeeperMutation
   */
  @javax.annotation.Nullable
  public GatekeeperMutationEnum getGatekeeperMutation() {
    return gatekeeperMutation;
  }

  public void setGatekeeperMutation(GatekeeperMutationEnum gatekeeperMutation) {
    this.gatekeeperMutation = gatekeeperMutation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigManagementGatekeeperDeploymentState configManagementGatekeeperDeploymentState = (ConfigManagementGatekeeperDeploymentState) o;
    return Objects.equals(this.gatekeeperAudit, configManagementGatekeeperDeploymentState.gatekeeperAudit) &&
        Objects.equals(this.gatekeeperControllerManagerState, configManagementGatekeeperDeploymentState.gatekeeperControllerManagerState) &&
        Objects.equals(this.gatekeeperMutation, configManagementGatekeeperDeploymentState.gatekeeperMutation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gatekeeperAudit, gatekeeperControllerManagerState, gatekeeperMutation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigManagementGatekeeperDeploymentState {\n");
    sb.append("    gatekeeperAudit: ").append(toIndentedString(gatekeeperAudit)).append("\n");
    sb.append("    gatekeeperControllerManagerState: ").append(toIndentedString(gatekeeperControllerManagerState)).append("\n");
    sb.append("    gatekeeperMutation: ").append(toIndentedString(gatekeeperMutation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gatekeeperAudit");
    openapiFields.add("gatekeeperControllerManagerState");
    openapiFields.add("gatekeeperMutation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigManagementGatekeeperDeploymentState
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigManagementGatekeeperDeploymentState.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigManagementGatekeeperDeploymentState is not found in the empty JSON string", ConfigManagementGatekeeperDeploymentState.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigManagementGatekeeperDeploymentState.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigManagementGatekeeperDeploymentState` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gatekeeperAudit") != null && !jsonObj.get("gatekeeperAudit").isJsonNull()) && !jsonObj.get("gatekeeperAudit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatekeeperAudit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatekeeperAudit").toString()));
      }
      // validate the optional field `gatekeeperAudit`
      if (jsonObj.get("gatekeeperAudit") != null && !jsonObj.get("gatekeeperAudit").isJsonNull()) {
        GatekeeperAuditEnum.validateJsonElement(jsonObj.get("gatekeeperAudit"));
      }
      if ((jsonObj.get("gatekeeperControllerManagerState") != null && !jsonObj.get("gatekeeperControllerManagerState").isJsonNull()) && !jsonObj.get("gatekeeperControllerManagerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatekeeperControllerManagerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatekeeperControllerManagerState").toString()));
      }
      // validate the optional field `gatekeeperControllerManagerState`
      if (jsonObj.get("gatekeeperControllerManagerState") != null && !jsonObj.get("gatekeeperControllerManagerState").isJsonNull()) {
        GatekeeperControllerManagerStateEnum.validateJsonElement(jsonObj.get("gatekeeperControllerManagerState"));
      }
      if ((jsonObj.get("gatekeeperMutation") != null && !jsonObj.get("gatekeeperMutation").isJsonNull()) && !jsonObj.get("gatekeeperMutation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gatekeeperMutation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gatekeeperMutation").toString()));
      }
      // validate the optional field `gatekeeperMutation`
      if (jsonObj.get("gatekeeperMutation") != null && !jsonObj.get("gatekeeperMutation").isJsonNull()) {
        GatekeeperMutationEnum.validateJsonElement(jsonObj.get("gatekeeperMutation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigManagementGatekeeperDeploymentState.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigManagementGatekeeperDeploymentState' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigManagementGatekeeperDeploymentState> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigManagementGatekeeperDeploymentState.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigManagementGatekeeperDeploymentState>() {
           @Override
           public void write(JsonWriter out, ConfigManagementGatekeeperDeploymentState value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigManagementGatekeeperDeploymentState read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigManagementGatekeeperDeploymentState given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigManagementGatekeeperDeploymentState
   * @throws IOException if the JSON string is invalid with respect to ConfigManagementGatekeeperDeploymentState
   */
  public static ConfigManagementGatekeeperDeploymentState fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigManagementGatekeeperDeploymentState.class);
  }

  /**
   * Convert an instance of ConfigManagementGatekeeperDeploymentState to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

