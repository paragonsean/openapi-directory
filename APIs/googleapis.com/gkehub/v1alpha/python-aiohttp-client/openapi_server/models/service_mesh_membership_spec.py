# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceMeshMembershipSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, control_plane: str=None, default_channel: str=None, management: str=None):
        """ServiceMeshMembershipSpec - a model defined in OpenAPI

        :param control_plane: The control_plane of this ServiceMeshMembershipSpec.
        :param default_channel: The default_channel of this ServiceMeshMembershipSpec.
        :param management: The management of this ServiceMeshMembershipSpec.
        """
        self.openapi_types = {
            'control_plane': str,
            'default_channel': str,
            'management': str
        }

        self.attribute_map = {
            'control_plane': 'controlPlane',
            'default_channel': 'defaultChannel',
            'management': 'management'
        }

        self._control_plane = control_plane
        self._default_channel = default_channel
        self._management = management

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMeshMembershipSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMeshMembershipSpec of this ServiceMeshMembershipSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def control_plane(self):
        """Gets the control_plane of this ServiceMeshMembershipSpec.

        Deprecated: use `management` instead Enables automatic control plane management.

        :return: The control_plane of this ServiceMeshMembershipSpec.
        :rtype: str
        """
        return self._control_plane

    @control_plane.setter
    def control_plane(self, control_plane):
        """Sets the control_plane of this ServiceMeshMembershipSpec.

        Deprecated: use `management` instead Enables automatic control plane management.

        :param control_plane: The control_plane of this ServiceMeshMembershipSpec.
        :type control_plane: str
        """
        allowed_values = ["CONTROL_PLANE_MANAGEMENT_UNSPECIFIED", "AUTOMATIC", "MANUAL"]  # noqa: E501
        if control_plane not in allowed_values:
            raise ValueError(
                "Invalid value for `control_plane` ({0}), must be one of {1}"
                .format(control_plane, allowed_values)
            )

        self._control_plane = control_plane

    @property
    def default_channel(self):
        """Gets the default_channel of this ServiceMeshMembershipSpec.

        Determines which release channel to use for default injection and service mesh APIs.

        :return: The default_channel of this ServiceMeshMembershipSpec.
        :rtype: str
        """
        return self._default_channel

    @default_channel.setter
    def default_channel(self, default_channel):
        """Sets the default_channel of this ServiceMeshMembershipSpec.

        Determines which release channel to use for default injection and service mesh APIs.

        :param default_channel: The default_channel of this ServiceMeshMembershipSpec.
        :type default_channel: str
        """
        allowed_values = ["CHANNEL_UNSPECIFIED", "RAPID", "REGULAR", "STABLE"]  # noqa: E501
        if default_channel not in allowed_values:
            raise ValueError(
                "Invalid value for `default_channel` ({0}), must be one of {1}"
                .format(default_channel, allowed_values)
            )

        self._default_channel = default_channel

    @property
    def management(self):
        """Gets the management of this ServiceMeshMembershipSpec.

        Enables automatic Service Mesh management.

        :return: The management of this ServiceMeshMembershipSpec.
        :rtype: str
        """
        return self._management

    @management.setter
    def management(self, management):
        """Sets the management of this ServiceMeshMembershipSpec.

        Enables automatic Service Mesh management.

        :param management: The management of this ServiceMeshMembershipSpec.
        :type management: str
        """
        allowed_values = ["MANAGEMENT_UNSPECIFIED", "MANAGEMENT_AUTOMATIC", "MANAGEMENT_MANUAL"]  # noqa: E501
        if management not in allowed_values:
            raise ValueError(
                "Invalid value for `management` ({0}), must be one of {1}"
                .format(management, allowed_values)
            )

        self._management = management
