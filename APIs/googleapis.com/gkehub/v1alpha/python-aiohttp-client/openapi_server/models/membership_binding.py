# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.membership_binding_lifecycle_state import MembershipBindingLifecycleState
from openapi_server import util


class MembershipBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, labels: Dict[str, str]=None, name: str=None, scope: str=None, state: MembershipBindingLifecycleState=None, uid: str=None, update_time: str=None):
        """MembershipBinding - a model defined in OpenAPI

        :param create_time: The create_time of this MembershipBinding.
        :param delete_time: The delete_time of this MembershipBinding.
        :param labels: The labels of this MembershipBinding.
        :param name: The name of this MembershipBinding.
        :param scope: The scope of this MembershipBinding.
        :param state: The state of this MembershipBinding.
        :param uid: The uid of this MembershipBinding.
        :param update_time: The update_time of this MembershipBinding.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'labels': Dict[str, str],
            'name': str,
            'scope': str,
            'state': MembershipBindingLifecycleState,
            'uid': str,
            'update_time': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'labels': 'labels',
            'name': 'name',
            'scope': 'scope',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._labels = labels
        self._name = name
        self._scope = scope
        self._state = state
        self._uid = uid
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipBinding of this MembershipBinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this MembershipBinding.

        Output only. When the membership binding was created.

        :return: The create_time of this MembershipBinding.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this MembershipBinding.

        Output only. When the membership binding was created.

        :param create_time: The create_time of this MembershipBinding.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this MembershipBinding.

        Output only. When the membership binding was deleted.

        :return: The delete_time of this MembershipBinding.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this MembershipBinding.

        Output only. When the membership binding was deleted.

        :param delete_time: The delete_time of this MembershipBinding.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def labels(self):
        """Gets the labels of this MembershipBinding.

        Optional. Labels for this MembershipBinding.

        :return: The labels of this MembershipBinding.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this MembershipBinding.

        Optional. Labels for this MembershipBinding.

        :param labels: The labels of this MembershipBinding.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this MembershipBinding.

        The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`

        :return: The name of this MembershipBinding.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MembershipBinding.

        The resource name for the membershipbinding itself `projects/{project}/locations/{location}/memberships/{membership}/bindings/{membershipbinding}`

        :param name: The name of this MembershipBinding.
        :type name: str
        """

        self._name = name

    @property
    def scope(self):
        """Gets the scope of this MembershipBinding.

        A Scope resource name in the format `projects/*/locations/*/scopes/*`.

        :return: The scope of this MembershipBinding.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this MembershipBinding.

        A Scope resource name in the format `projects/*/locations/*/scopes/*`.

        :param scope: The scope of this MembershipBinding.
        :type scope: str
        """

        self._scope = scope

    @property
    def state(self):
        """Gets the state of this MembershipBinding.


        :return: The state of this MembershipBinding.
        :rtype: MembershipBindingLifecycleState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this MembershipBinding.


        :param state: The state of this MembershipBinding.
        :type state: MembershipBindingLifecycleState
        """

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this MembershipBinding.

        Output only. Google-generated UUID for this resource. This is unique across all membershipbinding resources. If a membershipbinding resource is deleted and another resource with the same name is created, it gets a different uid.

        :return: The uid of this MembershipBinding.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this MembershipBinding.

        Output only. Google-generated UUID for this resource. This is unique across all membershipbinding resources. If a membershipbinding resource is deleted and another resource with the same name is created, it gets a different uid.

        :param uid: The uid of this MembershipBinding.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this MembershipBinding.

        Output only. When the membership binding was last updated.

        :return: The update_time of this MembershipBinding.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this MembershipBinding.

        Output only. When the membership binding was last updated.

        :param update_time: The update_time of this MembershipBinding.
        :type update_time: str
        """

        self._update_time = update_time
