# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_membership_spec import ConfigManagementMembershipSpec
from openapi_server.models.identity_service_membership_spec import IdentityServiceMembershipSpec
from openapi_server.models.policy_controller_membership_spec import PolicyControllerMembershipSpec
from openapi_server.models.service_mesh_membership_spec import ServiceMeshMembershipSpec
from openapi_server import util


class CommonFleetDefaultMemberConfigSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configmanagement: ConfigManagementMembershipSpec=None, identityservice: IdentityServiceMembershipSpec=None, mesh: ServiceMeshMembershipSpec=None, policycontroller: PolicyControllerMembershipSpec=None):
        """CommonFleetDefaultMemberConfigSpec - a model defined in OpenAPI

        :param configmanagement: The configmanagement of this CommonFleetDefaultMemberConfigSpec.
        :param identityservice: The identityservice of this CommonFleetDefaultMemberConfigSpec.
        :param mesh: The mesh of this CommonFleetDefaultMemberConfigSpec.
        :param policycontroller: The policycontroller of this CommonFleetDefaultMemberConfigSpec.
        """
        self.openapi_types = {
            'configmanagement': ConfigManagementMembershipSpec,
            'identityservice': IdentityServiceMembershipSpec,
            'mesh': ServiceMeshMembershipSpec,
            'policycontroller': PolicyControllerMembershipSpec
        }

        self.attribute_map = {
            'configmanagement': 'configmanagement',
            'identityservice': 'identityservice',
            'mesh': 'mesh',
            'policycontroller': 'policycontroller'
        }

        self._configmanagement = configmanagement
        self._identityservice = identityservice
        self._mesh = mesh
        self._policycontroller = policycontroller

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonFleetDefaultMemberConfigSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonFleetDefaultMemberConfigSpec of this CommonFleetDefaultMemberConfigSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configmanagement(self):
        """Gets the configmanagement of this CommonFleetDefaultMemberConfigSpec.


        :return: The configmanagement of this CommonFleetDefaultMemberConfigSpec.
        :rtype: ConfigManagementMembershipSpec
        """
        return self._configmanagement

    @configmanagement.setter
    def configmanagement(self, configmanagement):
        """Sets the configmanagement of this CommonFleetDefaultMemberConfigSpec.


        :param configmanagement: The configmanagement of this CommonFleetDefaultMemberConfigSpec.
        :type configmanagement: ConfigManagementMembershipSpec
        """

        self._configmanagement = configmanagement

    @property
    def identityservice(self):
        """Gets the identityservice of this CommonFleetDefaultMemberConfigSpec.


        :return: The identityservice of this CommonFleetDefaultMemberConfigSpec.
        :rtype: IdentityServiceMembershipSpec
        """
        return self._identityservice

    @identityservice.setter
    def identityservice(self, identityservice):
        """Sets the identityservice of this CommonFleetDefaultMemberConfigSpec.


        :param identityservice: The identityservice of this CommonFleetDefaultMemberConfigSpec.
        :type identityservice: IdentityServiceMembershipSpec
        """

        self._identityservice = identityservice

    @property
    def mesh(self):
        """Gets the mesh of this CommonFleetDefaultMemberConfigSpec.


        :return: The mesh of this CommonFleetDefaultMemberConfigSpec.
        :rtype: ServiceMeshMembershipSpec
        """
        return self._mesh

    @mesh.setter
    def mesh(self, mesh):
        """Sets the mesh of this CommonFleetDefaultMemberConfigSpec.


        :param mesh: The mesh of this CommonFleetDefaultMemberConfigSpec.
        :type mesh: ServiceMeshMembershipSpec
        """

        self._mesh = mesh

    @property
    def policycontroller(self):
        """Gets the policycontroller of this CommonFleetDefaultMemberConfigSpec.


        :return: The policycontroller of this CommonFleetDefaultMemberConfigSpec.
        :rtype: PolicyControllerMembershipSpec
        """
        return self._policycontroller

    @policycontroller.setter
    def policycontroller(self, policycontroller):
        """Sets the policycontroller of this CommonFleetDefaultMemberConfigSpec.


        :param policycontroller: The policycontroller of this CommonFleetDefaultMemberConfigSpec.
        :type policycontroller: PolicyControllerMembershipSpec
        """

        self._policycontroller = policycontroller
