# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_error_resource import ConfigManagementErrorResource
from openapi_server import util


class ConfigManagementSyncError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, error_message: str=None, error_resources: List[ConfigManagementErrorResource]=None):
        """ConfigManagementSyncError - a model defined in OpenAPI

        :param code: The code of this ConfigManagementSyncError.
        :param error_message: The error_message of this ConfigManagementSyncError.
        :param error_resources: The error_resources of this ConfigManagementSyncError.
        """
        self.openapi_types = {
            'code': str,
            'error_message': str,
            'error_resources': List[ConfigManagementErrorResource]
        }

        self.attribute_map = {
            'code': 'code',
            'error_message': 'errorMessage',
            'error_resources': 'errorResources'
        }

        self._code = code
        self._error_message = error_message
        self._error_resources = error_resources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementSyncError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementSyncError of this ConfigManagementSyncError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this ConfigManagementSyncError.

        An ACM defined error code

        :return: The code of this ConfigManagementSyncError.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this ConfigManagementSyncError.

        An ACM defined error code

        :param code: The code of this ConfigManagementSyncError.
        :type code: str
        """

        self._code = code

    @property
    def error_message(self):
        """Gets the error_message of this ConfigManagementSyncError.

        A description of the error

        :return: The error_message of this ConfigManagementSyncError.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this ConfigManagementSyncError.

        A description of the error

        :param error_message: The error_message of this ConfigManagementSyncError.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def error_resources(self):
        """Gets the error_resources of this ConfigManagementSyncError.

        A list of config(s) associated with the error, if any

        :return: The error_resources of this ConfigManagementSyncError.
        :rtype: List[ConfigManagementErrorResource]
        """
        return self._error_resources

    @error_resources.setter
    def error_resources(self, error_resources):
        """Sets the error_resources of this ConfigManagementSyncError.

        A list of config(s) associated with the error, if any

        :param error_resources: The error_resources of this ConfigManagementSyncError.
        :type error_resources: List[ConfigManagementErrorResource]
        """

        self._error_resources = error_resources
