# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespaceActuationFeatureSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actuation_mode: str=None):
        """NamespaceActuationFeatureSpec - a model defined in OpenAPI

        :param actuation_mode: The actuation_mode of this NamespaceActuationFeatureSpec.
        """
        self.openapi_types = {
            'actuation_mode': str
        }

        self.attribute_map = {
            'actuation_mode': 'actuationMode'
        }

        self._actuation_mode = actuation_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespaceActuationFeatureSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamespaceActuationFeatureSpec of this NamespaceActuationFeatureSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actuation_mode(self):
        """Gets the actuation_mode of this NamespaceActuationFeatureSpec.

        actuation_mode controls the behavior of the controller

        :return: The actuation_mode of this NamespaceActuationFeatureSpec.
        :rtype: str
        """
        return self._actuation_mode

    @actuation_mode.setter
    def actuation_mode(self, actuation_mode):
        """Sets the actuation_mode of this NamespaceActuationFeatureSpec.

        actuation_mode controls the behavior of the controller

        :param actuation_mode: The actuation_mode of this NamespaceActuationFeatureSpec.
        :type actuation_mode: str
        """
        allowed_values = ["ACTUATION_MODE_UNSPECIFIED", "ACTUATION_MODE_CREATE_AND_DELETE_IF_CREATED", "ACTUATION_MODE_ADD_AND_REMOVE_FLEET_LABELS"]  # noqa: E501
        if actuation_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `actuation_mode` ({0}), must be one of {1}"
                .format(actuation_mode, allowed_values)
            )

        self._actuation_mode = actuation_mode
