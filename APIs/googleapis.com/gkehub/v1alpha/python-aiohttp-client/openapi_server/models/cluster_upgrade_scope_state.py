# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_upgrade_gke_upgrade_feature_state import ClusterUpgradeGKEUpgradeFeatureState
from openapi_server.models.cluster_upgrade_ignored_membership import ClusterUpgradeIgnoredMembership
from openapi_server import util


class ClusterUpgradeScopeState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, downstream_scopes: List[str]=None, gke_state: ClusterUpgradeGKEUpgradeFeatureState=None, ignored: Dict[str, ClusterUpgradeIgnoredMembership]=None):
        """ClusterUpgradeScopeState - a model defined in OpenAPI

        :param downstream_scopes: The downstream_scopes of this ClusterUpgradeScopeState.
        :param gke_state: The gke_state of this ClusterUpgradeScopeState.
        :param ignored: The ignored of this ClusterUpgradeScopeState.
        """
        self.openapi_types = {
            'downstream_scopes': List[str],
            'gke_state': ClusterUpgradeGKEUpgradeFeatureState,
            'ignored': Dict[str, ClusterUpgradeIgnoredMembership]
        }

        self.attribute_map = {
            'downstream_scopes': 'downstreamScopes',
            'gke_state': 'gkeState',
            'ignored': 'ignored'
        }

        self._downstream_scopes = downstream_scopes
        self._gke_state = gke_state
        self._ignored = ignored

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeScopeState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeScopeState of this ClusterUpgradeScopeState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def downstream_scopes(self):
        """Gets the downstream_scopes of this ClusterUpgradeScopeState.

        This scopes whose upstream_scopes contain the current scope. The scope name should be in the form: `projects/{p}/locations/gloobal/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.

        :return: The downstream_scopes of this ClusterUpgradeScopeState.
        :rtype: List[str]
        """
        return self._downstream_scopes

    @downstream_scopes.setter
    def downstream_scopes(self, downstream_scopes):
        """Sets the downstream_scopes of this ClusterUpgradeScopeState.

        This scopes whose upstream_scopes contain the current scope. The scope name should be in the form: `projects/{p}/locations/gloobal/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project.

        :param downstream_scopes: The downstream_scopes of this ClusterUpgradeScopeState.
        :type downstream_scopes: List[str]
        """

        self._downstream_scopes = downstream_scopes

    @property
    def gke_state(self):
        """Gets the gke_state of this ClusterUpgradeScopeState.


        :return: The gke_state of this ClusterUpgradeScopeState.
        :rtype: ClusterUpgradeGKEUpgradeFeatureState
        """
        return self._gke_state

    @gke_state.setter
    def gke_state(self, gke_state):
        """Sets the gke_state of this ClusterUpgradeScopeState.


        :param gke_state: The gke_state of this ClusterUpgradeScopeState.
        :type gke_state: ClusterUpgradeGKEUpgradeFeatureState
        """

        self._gke_state = gke_state

    @property
    def ignored(self):
        """Gets the ignored of this ClusterUpgradeScopeState.

        A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.

        :return: The ignored of this ClusterUpgradeScopeState.
        :rtype: Dict[str, ClusterUpgradeIgnoredMembership]
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this ClusterUpgradeScopeState.

        A list of memberships ignored by the feature. For example, manually upgraded clusters can be ignored if they are newer than the default versions of its release channel. The membership resource is in the format: `projects/{p}/locations/{l}/membership/{m}`.

        :param ignored: The ignored of this ClusterUpgradeScopeState.
        :type ignored: Dict[str, ClusterUpgradeIgnoredMembership]
        """

        self._ignored = ignored
