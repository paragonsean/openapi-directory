# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_mesh_analysis_message import ServiceMeshAnalysisMessage
from openapi_server import util


class ServiceMeshFeatureState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_messages: List[ServiceMeshAnalysisMessage]=None):
        """ServiceMeshFeatureState - a model defined in OpenAPI

        :param analysis_messages: The analysis_messages of this ServiceMeshFeatureState.
        """
        self.openapi_types = {
            'analysis_messages': List[ServiceMeshAnalysisMessage]
        }

        self.attribute_map = {
            'analysis_messages': 'analysisMessages'
        }

        self._analysis_messages = analysis_messages

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMeshFeatureState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMeshFeatureState of this ServiceMeshFeatureState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_messages(self):
        """Gets the analysis_messages of this ServiceMeshFeatureState.

        Output only. Results of running Service Mesh analyzers.

        :return: The analysis_messages of this ServiceMeshFeatureState.
        :rtype: List[ServiceMeshAnalysisMessage]
        """
        return self._analysis_messages

    @analysis_messages.setter
    def analysis_messages(self, analysis_messages):
        """Sets the analysis_messages of this ServiceMeshFeatureState.

        Output only. Results of running Service Mesh analyzers.

        :param analysis_messages: The analysis_messages of this ServiceMeshFeatureState.
        :type analysis_messages: List[ServiceMeshAnalysisMessage]
        """

        self._analysis_messages = analysis_messages
