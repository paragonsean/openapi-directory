# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_mesh_analysis_message_base import ServiceMeshAnalysisMessageBase
from openapi_server import util


class ServiceMeshAnalysisMessage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args: Dict[str, object]=None, description: str=None, message_base: ServiceMeshAnalysisMessageBase=None, resource_paths: List[str]=None):
        """ServiceMeshAnalysisMessage - a model defined in OpenAPI

        :param args: The args of this ServiceMeshAnalysisMessage.
        :param description: The description of this ServiceMeshAnalysisMessage.
        :param message_base: The message_base of this ServiceMeshAnalysisMessage.
        :param resource_paths: The resource_paths of this ServiceMeshAnalysisMessage.
        """
        self.openapi_types = {
            'args': Dict[str, object],
            'description': str,
            'message_base': ServiceMeshAnalysisMessageBase,
            'resource_paths': List[str]
        }

        self.attribute_map = {
            'args': 'args',
            'description': 'description',
            'message_base': 'messageBase',
            'resource_paths': 'resourcePaths'
        }

        self._args = args
        self._description = description
        self._message_base = message_base
        self._resource_paths = resource_paths

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMeshAnalysisMessage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMeshAnalysisMessage of this ServiceMeshAnalysisMessage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self):
        """Gets the args of this ServiceMeshAnalysisMessage.

        A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.

        :return: The args of this ServiceMeshAnalysisMessage.
        :rtype: Dict[str, object]
        """
        return self._args

    @args.setter
    def args(self, args):
        """Sets the args of this ServiceMeshAnalysisMessage.

        A UI can combine these args with a template (based on message_base.type) to produce an internationalized message.

        :param args: The args of this ServiceMeshAnalysisMessage.
        :type args: Dict[str, object]
        """

        self._args = args

    @property
    def description(self):
        """Gets the description of this ServiceMeshAnalysisMessage.

        A human readable description of what the error means. It is suitable for non-internationalize display purposes.

        :return: The description of this ServiceMeshAnalysisMessage.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ServiceMeshAnalysisMessage.

        A human readable description of what the error means. It is suitable for non-internationalize display purposes.

        :param description: The description of this ServiceMeshAnalysisMessage.
        :type description: str
        """

        self._description = description

    @property
    def message_base(self):
        """Gets the message_base of this ServiceMeshAnalysisMessage.


        :return: The message_base of this ServiceMeshAnalysisMessage.
        :rtype: ServiceMeshAnalysisMessageBase
        """
        return self._message_base

    @message_base.setter
    def message_base(self, message_base):
        """Sets the message_base of this ServiceMeshAnalysisMessage.


        :param message_base: The message_base of this ServiceMeshAnalysisMessage.
        :type message_base: ServiceMeshAnalysisMessageBase
        """

        self._message_base = message_base

    @property
    def resource_paths(self):
        """Gets the resource_paths of this ServiceMeshAnalysisMessage.

        A list of strings specifying the resource identifiers that were the cause of message generation. A \"path\" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE/)?RESOURCETYPE/NAME if the cause is a resource in a cluster

        :return: The resource_paths of this ServiceMeshAnalysisMessage.
        :rtype: List[str]
        """
        return self._resource_paths

    @resource_paths.setter
    def resource_paths(self, resource_paths):
        """Sets the resource_paths of this ServiceMeshAnalysisMessage.

        A list of strings specifying the resource identifiers that were the cause of message generation. A \"path\" here may be: * MEMBERSHIP_ID if the cause is a specific member cluster * MEMBERSHIP_ID/(NAMESPACE/)?RESOURCETYPE/NAME if the cause is a resource in a cluster

        :param resource_paths: The resource_paths of this ServiceMeshAnalysisMessage.
        :type resource_paths: List[str]
        """

        self._resource_paths = resource_paths
