# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_upgrade_gke_upgrade_feature_condition import ClusterUpgradeGKEUpgradeFeatureCondition
from openapi_server.models.cluster_upgrade_gke_upgrade_state import ClusterUpgradeGKEUpgradeState
from openapi_server import util


class ClusterUpgradeGKEUpgradeFeatureState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions: List[ClusterUpgradeGKEUpgradeFeatureCondition]=None, upgrade_state: List[ClusterUpgradeGKEUpgradeState]=None):
        """ClusterUpgradeGKEUpgradeFeatureState - a model defined in OpenAPI

        :param conditions: The conditions of this ClusterUpgradeGKEUpgradeFeatureState.
        :param upgrade_state: The upgrade_state of this ClusterUpgradeGKEUpgradeFeatureState.
        """
        self.openapi_types = {
            'conditions': List[ClusterUpgradeGKEUpgradeFeatureCondition],
            'upgrade_state': List[ClusterUpgradeGKEUpgradeState]
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'upgrade_state': 'upgradeState'
        }

        self._conditions = conditions
        self._upgrade_state = upgrade_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeGKEUpgradeFeatureState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeGKEUpgradeFeatureState of this ClusterUpgradeGKEUpgradeFeatureState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self):
        """Gets the conditions of this ClusterUpgradeGKEUpgradeFeatureState.

        Current conditions of the feature.

        :return: The conditions of this ClusterUpgradeGKEUpgradeFeatureState.
        :rtype: List[ClusterUpgradeGKEUpgradeFeatureCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ClusterUpgradeGKEUpgradeFeatureState.

        Current conditions of the feature.

        :param conditions: The conditions of this ClusterUpgradeGKEUpgradeFeatureState.
        :type conditions: List[ClusterUpgradeGKEUpgradeFeatureCondition]
        """

        self._conditions = conditions

    @property
    def upgrade_state(self):
        """Gets the upgrade_state of this ClusterUpgradeGKEUpgradeFeatureState.

        Upgrade state. It will eventually replace `state`.

        :return: The upgrade_state of this ClusterUpgradeGKEUpgradeFeatureState.
        :rtype: List[ClusterUpgradeGKEUpgradeState]
        """
        return self._upgrade_state

    @upgrade_state.setter
    def upgrade_state(self, upgrade_state):
        """Sets the upgrade_state of this ClusterUpgradeGKEUpgradeFeatureState.

        Upgrade state. It will eventually replace `state`.

        :param upgrade_state: The upgrade_state of this ClusterUpgradeGKEUpgradeFeatureState.
        :type upgrade_state: List[ClusterUpgradeGKEUpgradeState]
        """

        self._upgrade_state = upgrade_state
