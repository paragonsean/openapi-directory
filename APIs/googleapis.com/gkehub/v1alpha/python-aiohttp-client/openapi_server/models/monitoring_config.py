# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MonitoringConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster: str=None, cluster_hash: str=None, kubernetes_metrics_prefix: str=None, location: str=None, project_id: str=None):
        """MonitoringConfig - a model defined in OpenAPI

        :param cluster: The cluster of this MonitoringConfig.
        :param cluster_hash: The cluster_hash of this MonitoringConfig.
        :param kubernetes_metrics_prefix: The kubernetes_metrics_prefix of this MonitoringConfig.
        :param location: The location of this MonitoringConfig.
        :param project_id: The project_id of this MonitoringConfig.
        """
        self.openapi_types = {
            'cluster': str,
            'cluster_hash': str,
            'kubernetes_metrics_prefix': str,
            'location': str,
            'project_id': str
        }

        self.attribute_map = {
            'cluster': 'cluster',
            'cluster_hash': 'clusterHash',
            'kubernetes_metrics_prefix': 'kubernetesMetricsPrefix',
            'location': 'location',
            'project_id': 'projectId'
        }

        self._cluster = cluster
        self._cluster_hash = cluster_hash
        self._kubernetes_metrics_prefix = kubernetes_metrics_prefix
        self._location = location
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MonitoringConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MonitoringConfig of this MonitoringConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster(self):
        """Gets the cluster of this MonitoringConfig.

        Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., \"awsClusters/cluster_1\".

        :return: The cluster of this MonitoringConfig.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this MonitoringConfig.

        Optional. Cluster name used to report metrics. For Anthos on VMWare/Baremetal/MultiCloud clusters, it would be in format {cluster_type}/{cluster_name}, e.g., \"awsClusters/cluster_1\".

        :param cluster: The cluster of this MonitoringConfig.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def cluster_hash(self):
        """Gets the cluster_hash of this MonitoringConfig.

        Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.

        :return: The cluster_hash of this MonitoringConfig.
        :rtype: str
        """
        return self._cluster_hash

    @cluster_hash.setter
    def cluster_hash(self, cluster_hash):
        """Sets the cluster_hash of this MonitoringConfig.

        Optional. For GKE and Multicloud clusters, this is the UUID of the cluster resource. For VMWare and Baremetal clusters, this is the kube-system UID.

        :param cluster_hash: The cluster_hash of this MonitoringConfig.
        :type cluster_hash: str
        """

        self._cluster_hash = cluster_hash

    @property
    def kubernetes_metrics_prefix(self):
        """Gets the kubernetes_metrics_prefix of this MonitoringConfig.

        Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.

        :return: The kubernetes_metrics_prefix of this MonitoringConfig.
        :rtype: str
        """
        return self._kubernetes_metrics_prefix

    @kubernetes_metrics_prefix.setter
    def kubernetes_metrics_prefix(self, kubernetes_metrics_prefix):
        """Sets the kubernetes_metrics_prefix of this MonitoringConfig.

        Optional. Kubernetes system metrics, if available, are written to this prefix. This defaults to kubernetes.io for GKE, and kubernetes.io/anthos for Anthos eventually. Noted: Anthos MultiCloud will have kubernetes.io prefix today but will migration to be under kubernetes.io/anthos.

        :param kubernetes_metrics_prefix: The kubernetes_metrics_prefix of this MonitoringConfig.
        :type kubernetes_metrics_prefix: str
        """

        self._kubernetes_metrics_prefix = kubernetes_metrics_prefix

    @property
    def location(self):
        """Gets the location of this MonitoringConfig.

        Optional. Location used to report Metrics

        :return: The location of this MonitoringConfig.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this MonitoringConfig.

        Optional. Location used to report Metrics

        :param location: The location of this MonitoringConfig.
        :type location: str
        """

        self._location = location

    @property
    def project_id(self):
        """Gets the project_id of this MonitoringConfig.

        Optional. Project used to report Metrics

        :return: The project_id of this MonitoringConfig.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this MonitoringConfig.

        Optional. Project used to report Metrics

        :param project_id: The project_id of this MonitoringConfig.
        :type project_id: str
        """

        self._project_id = project_id
