# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_upgrade_ignored_membership import ClusterUpgradeIgnoredMembership
from openapi_server.models.cluster_upgrade_membership_gke_upgrade_state import ClusterUpgradeMembershipGKEUpgradeState
from openapi_server import util


class ClusterUpgradeMembershipState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignored: ClusterUpgradeIgnoredMembership=None, scopes: List[str]=None, upgrades: List[ClusterUpgradeMembershipGKEUpgradeState]=None):
        """ClusterUpgradeMembershipState - a model defined in OpenAPI

        :param ignored: The ignored of this ClusterUpgradeMembershipState.
        :param scopes: The scopes of this ClusterUpgradeMembershipState.
        :param upgrades: The upgrades of this ClusterUpgradeMembershipState.
        """
        self.openapi_types = {
            'ignored': ClusterUpgradeIgnoredMembership,
            'scopes': List[str],
            'upgrades': List[ClusterUpgradeMembershipGKEUpgradeState]
        }

        self.attribute_map = {
            'ignored': 'ignored',
            'scopes': 'scopes',
            'upgrades': 'upgrades'
        }

        self._ignored = ignored
        self._scopes = scopes
        self._upgrades = upgrades

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeMembershipState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeMembershipState of this ClusterUpgradeMembershipState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignored(self):
        """Gets the ignored of this ClusterUpgradeMembershipState.


        :return: The ignored of this ClusterUpgradeMembershipState.
        :rtype: ClusterUpgradeIgnoredMembership
        """
        return self._ignored

    @ignored.setter
    def ignored(self, ignored):
        """Sets the ignored of this ClusterUpgradeMembershipState.


        :param ignored: The ignored of this ClusterUpgradeMembershipState.
        :type ignored: ClusterUpgradeIgnoredMembership
        """

        self._ignored = ignored

    @property
    def scopes(self):
        """Gets the scopes of this ClusterUpgradeMembershipState.

        Fully qualified scope names that this clusters is bound to which also have rollout sequencing enabled.

        :return: The scopes of this ClusterUpgradeMembershipState.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this ClusterUpgradeMembershipState.

        Fully qualified scope names that this clusters is bound to which also have rollout sequencing enabled.

        :param scopes: The scopes of this ClusterUpgradeMembershipState.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def upgrades(self):
        """Gets the upgrades of this ClusterUpgradeMembershipState.

        Actual upgrade state against desired.

        :return: The upgrades of this ClusterUpgradeMembershipState.
        :rtype: List[ClusterUpgradeMembershipGKEUpgradeState]
        """
        return self._upgrades

    @upgrades.setter
    def upgrades(self, upgrades):
        """Sets the upgrades of this ClusterUpgradeMembershipState.

        Actual upgrade state against desired.

        :param upgrades: The upgrades of this ClusterUpgradeMembershipState.
        :type upgrades: List[ClusterUpgradeMembershipGKEUpgradeState]
        """

        self._upgrades = upgrades
