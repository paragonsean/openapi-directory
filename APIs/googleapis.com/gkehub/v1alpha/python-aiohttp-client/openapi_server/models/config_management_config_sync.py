# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_git_config import ConfigManagementGitConfig
from openapi_server.models.config_management_oci_config import ConfigManagementOciConfig
from openapi_server import util


class ConfigManagementConfigSync(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_vertical_scale: bool=None, enabled: bool=None, git: ConfigManagementGitConfig=None, metrics_gcp_service_account_email: str=None, oci: ConfigManagementOciConfig=None, prevent_drift: bool=None, source_format: str=None):
        """ConfigManagementConfigSync - a model defined in OpenAPI

        :param allow_vertical_scale: The allow_vertical_scale of this ConfigManagementConfigSync.
        :param enabled: The enabled of this ConfigManagementConfigSync.
        :param git: The git of this ConfigManagementConfigSync.
        :param metrics_gcp_service_account_email: The metrics_gcp_service_account_email of this ConfigManagementConfigSync.
        :param oci: The oci of this ConfigManagementConfigSync.
        :param prevent_drift: The prevent_drift of this ConfigManagementConfigSync.
        :param source_format: The source_format of this ConfigManagementConfigSync.
        """
        self.openapi_types = {
            'allow_vertical_scale': bool,
            'enabled': bool,
            'git': ConfigManagementGitConfig,
            'metrics_gcp_service_account_email': str,
            'oci': ConfigManagementOciConfig,
            'prevent_drift': bool,
            'source_format': str
        }

        self.attribute_map = {
            'allow_vertical_scale': 'allowVerticalScale',
            'enabled': 'enabled',
            'git': 'git',
            'metrics_gcp_service_account_email': 'metricsGcpServiceAccountEmail',
            'oci': 'oci',
            'prevent_drift': 'preventDrift',
            'source_format': 'sourceFormat'
        }

        self._allow_vertical_scale = allow_vertical_scale
        self._enabled = enabled
        self._git = git
        self._metrics_gcp_service_account_email = metrics_gcp_service_account_email
        self._oci = oci
        self._prevent_drift = prevent_drift
        self._source_format = source_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementConfigSync':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementConfigSync of this ConfigManagementConfigSync.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_vertical_scale(self):
        """Gets the allow_vertical_scale of this ConfigManagementConfigSync.

        Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.

        :return: The allow_vertical_scale of this ConfigManagementConfigSync.
        :rtype: bool
        """
        return self._allow_vertical_scale

    @allow_vertical_scale.setter
    def allow_vertical_scale(self, allow_vertical_scale):
        """Sets the allow_vertical_scale of this ConfigManagementConfigSync.

        Set to true to allow the vertical scaling. Defaults to false which disallows vertical scaling. This field is deprecated.

        :param allow_vertical_scale: The allow_vertical_scale of this ConfigManagementConfigSync.
        :type allow_vertical_scale: bool
        """

        self._allow_vertical_scale = allow_vertical_scale

    @property
    def enabled(self):
        """Gets the enabled of this ConfigManagementConfigSync.

        Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.

        :return: The enabled of this ConfigManagementConfigSync.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this ConfigManagementConfigSync.

        Enables the installation of ConfigSync. If set to true, ConfigSync resources will be created and the other ConfigSync fields will be applied if exist. If set to false, all other ConfigSync fields will be ignored, ConfigSync resources will be deleted. If omitted, ConfigSync resources will be managed depends on the presence of the git or oci field.

        :param enabled: The enabled of this ConfigManagementConfigSync.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def git(self):
        """Gets the git of this ConfigManagementConfigSync.


        :return: The git of this ConfigManagementConfigSync.
        :rtype: ConfigManagementGitConfig
        """
        return self._git

    @git.setter
    def git(self, git):
        """Sets the git of this ConfigManagementConfigSync.


        :param git: The git of this ConfigManagementConfigSync.
        :type git: ConfigManagementGitConfig
        """

        self._git = git

    @property
    def metrics_gcp_service_account_email(self):
        """Gets the metrics_gcp_service_account_email of this ConfigManagementConfigSync.

        The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.

        :return: The metrics_gcp_service_account_email of this ConfigManagementConfigSync.
        :rtype: str
        """
        return self._metrics_gcp_service_account_email

    @metrics_gcp_service_account_email.setter
    def metrics_gcp_service_account_email(self, metrics_gcp_service_account_email):
        """Sets the metrics_gcp_service_account_email of this ConfigManagementConfigSync.

        The Email of the Google Cloud Service Account (GSA) used for exporting Config Sync metrics to Cloud Monitoring and Cloud Monarch when Workload Identity is enabled. The GSA should have the Monitoring Metric Writer (roles/monitoring.metricWriter) IAM role. The Kubernetes ServiceAccount `default` in the namespace `config-management-monitoring` should be bound to the GSA.

        :param metrics_gcp_service_account_email: The metrics_gcp_service_account_email of this ConfigManagementConfigSync.
        :type metrics_gcp_service_account_email: str
        """

        self._metrics_gcp_service_account_email = metrics_gcp_service_account_email

    @property
    def oci(self):
        """Gets the oci of this ConfigManagementConfigSync.


        :return: The oci of this ConfigManagementConfigSync.
        :rtype: ConfigManagementOciConfig
        """
        return self._oci

    @oci.setter
    def oci(self, oci):
        """Sets the oci of this ConfigManagementConfigSync.


        :param oci: The oci of this ConfigManagementConfigSync.
        :type oci: ConfigManagementOciConfig
        """

        self._oci = oci

    @property
    def prevent_drift(self):
        """Gets the prevent_drift of this ConfigManagementConfigSync.

        Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.

        :return: The prevent_drift of this ConfigManagementConfigSync.
        :rtype: bool
        """
        return self._prevent_drift

    @prevent_drift.setter
    def prevent_drift(self, prevent_drift):
        """Sets the prevent_drift of this ConfigManagementConfigSync.

        Set to true to enable the Config Sync admission webhook to prevent drifts. If set to `false`, disables the Config Sync admission webhook and does not prevent drifts.

        :param prevent_drift: The prevent_drift of this ConfigManagementConfigSync.
        :type prevent_drift: bool
        """

        self._prevent_drift = prevent_drift

    @property
    def source_format(self):
        """Gets the source_format of this ConfigManagementConfigSync.

        Specifies whether the Config Sync Repo is in \"hierarchical\" or \"unstructured\" mode.

        :return: The source_format of this ConfigManagementConfigSync.
        :rtype: str
        """
        return self._source_format

    @source_format.setter
    def source_format(self, source_format):
        """Sets the source_format of this ConfigManagementConfigSync.

        Specifies whether the Config Sync Repo is in \"hierarchical\" or \"unstructured\" mode.

        :param source_format: The source_format of this ConfigManagementConfigSync.
        :type source_format: str
        """

        self._source_format = source_format
