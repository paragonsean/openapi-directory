# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConfigManagementGitConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gcp_service_account_email: str=None, https_proxy: str=None, policy_dir: str=None, secret_type: str=None, sync_branch: str=None, sync_repo: str=None, sync_rev: str=None, sync_wait_secs: str=None):
        """ConfigManagementGitConfig - a model defined in OpenAPI

        :param gcp_service_account_email: The gcp_service_account_email of this ConfigManagementGitConfig.
        :param https_proxy: The https_proxy of this ConfigManagementGitConfig.
        :param policy_dir: The policy_dir of this ConfigManagementGitConfig.
        :param secret_type: The secret_type of this ConfigManagementGitConfig.
        :param sync_branch: The sync_branch of this ConfigManagementGitConfig.
        :param sync_repo: The sync_repo of this ConfigManagementGitConfig.
        :param sync_rev: The sync_rev of this ConfigManagementGitConfig.
        :param sync_wait_secs: The sync_wait_secs of this ConfigManagementGitConfig.
        """
        self.openapi_types = {
            'gcp_service_account_email': str,
            'https_proxy': str,
            'policy_dir': str,
            'secret_type': str,
            'sync_branch': str,
            'sync_repo': str,
            'sync_rev': str,
            'sync_wait_secs': str
        }

        self.attribute_map = {
            'gcp_service_account_email': 'gcpServiceAccountEmail',
            'https_proxy': 'httpsProxy',
            'policy_dir': 'policyDir',
            'secret_type': 'secretType',
            'sync_branch': 'syncBranch',
            'sync_repo': 'syncRepo',
            'sync_rev': 'syncRev',
            'sync_wait_secs': 'syncWaitSecs'
        }

        self._gcp_service_account_email = gcp_service_account_email
        self._https_proxy = https_proxy
        self._policy_dir = policy_dir
        self._secret_type = secret_type
        self._sync_branch = sync_branch
        self._sync_repo = sync_repo
        self._sync_rev = sync_rev
        self._sync_wait_secs = sync_wait_secs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementGitConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementGitConfig of this ConfigManagementGitConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gcp_service_account_email(self):
        """Gets the gcp_service_account_email of this ConfigManagementGitConfig.

        The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.

        :return: The gcp_service_account_email of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._gcp_service_account_email

    @gcp_service_account_email.setter
    def gcp_service_account_email(self, gcp_service_account_email):
        """Sets the gcp_service_account_email of this ConfigManagementGitConfig.

        The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.

        :param gcp_service_account_email: The gcp_service_account_email of this ConfigManagementGitConfig.
        :type gcp_service_account_email: str
        """

        self._gcp_service_account_email = gcp_service_account_email

    @property
    def https_proxy(self):
        """Gets the https_proxy of this ConfigManagementGitConfig.

        URL for the HTTPS proxy to be used when communicating with the Git repo.

        :return: The https_proxy of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._https_proxy

    @https_proxy.setter
    def https_proxy(self, https_proxy):
        """Sets the https_proxy of this ConfigManagementGitConfig.

        URL for the HTTPS proxy to be used when communicating with the Git repo.

        :param https_proxy: The https_proxy of this ConfigManagementGitConfig.
        :type https_proxy: str
        """

        self._https_proxy = https_proxy

    @property
    def policy_dir(self):
        """Gets the policy_dir of this ConfigManagementGitConfig.

        The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.

        :return: The policy_dir of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._policy_dir

    @policy_dir.setter
    def policy_dir(self, policy_dir):
        """Sets the policy_dir of this ConfigManagementGitConfig.

        The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.

        :param policy_dir: The policy_dir of this ConfigManagementGitConfig.
        :type policy_dir: str
        """

        self._policy_dir = policy_dir

    @property
    def secret_type(self):
        """Gets the secret_type of this ConfigManagementGitConfig.

        Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.

        :return: The secret_type of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._secret_type

    @secret_type.setter
    def secret_type(self, secret_type):
        """Sets the secret_type of this ConfigManagementGitConfig.

        Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.

        :param secret_type: The secret_type of this ConfigManagementGitConfig.
        :type secret_type: str
        """

        self._secret_type = secret_type

    @property
    def sync_branch(self):
        """Gets the sync_branch of this ConfigManagementGitConfig.

        The branch of the repository to sync from. Default: master.

        :return: The sync_branch of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._sync_branch

    @sync_branch.setter
    def sync_branch(self, sync_branch):
        """Sets the sync_branch of this ConfigManagementGitConfig.

        The branch of the repository to sync from. Default: master.

        :param sync_branch: The sync_branch of this ConfigManagementGitConfig.
        :type sync_branch: str
        """

        self._sync_branch = sync_branch

    @property
    def sync_repo(self):
        """Gets the sync_repo of this ConfigManagementGitConfig.

        The URL of the Git repository to use as the source of truth.

        :return: The sync_repo of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._sync_repo

    @sync_repo.setter
    def sync_repo(self, sync_repo):
        """Sets the sync_repo of this ConfigManagementGitConfig.

        The URL of the Git repository to use as the source of truth.

        :param sync_repo: The sync_repo of this ConfigManagementGitConfig.
        :type sync_repo: str
        """

        self._sync_repo = sync_repo

    @property
    def sync_rev(self):
        """Gets the sync_rev of this ConfigManagementGitConfig.

        Git revision (tag or hash) to check out. Default HEAD.

        :return: The sync_rev of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._sync_rev

    @sync_rev.setter
    def sync_rev(self, sync_rev):
        """Sets the sync_rev of this ConfigManagementGitConfig.

        Git revision (tag or hash) to check out. Default HEAD.

        :param sync_rev: The sync_rev of this ConfigManagementGitConfig.
        :type sync_rev: str
        """

        self._sync_rev = sync_rev

    @property
    def sync_wait_secs(self):
        """Gets the sync_wait_secs of this ConfigManagementGitConfig.

        Period in seconds between consecutive syncs. Default: 15.

        :return: The sync_wait_secs of this ConfigManagementGitConfig.
        :rtype: str
        """
        return self._sync_wait_secs

    @sync_wait_secs.setter
    def sync_wait_secs(self, sync_wait_secs):
        """Sets the sync_wait_secs of this ConfigManagementGitConfig.

        Period in seconds between consecutive syncs. Default: 15.

        :param sync_wait_secs: The sync_wait_secs of this ConfigManagementGitConfig.
        :type sync_wait_secs: str
        """

        self._sync_wait_secs = sync_wait_secs
