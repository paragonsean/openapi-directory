# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyControllerToleration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effect: str=None, key: str=None, operator: str=None, value: str=None):
        """PolicyControllerToleration - a model defined in OpenAPI

        :param effect: The effect of this PolicyControllerToleration.
        :param key: The key of this PolicyControllerToleration.
        :param operator: The operator of this PolicyControllerToleration.
        :param value: The value of this PolicyControllerToleration.
        """
        self.openapi_types = {
            'effect': str,
            'key': str,
            'operator': str,
            'value': str
        }

        self.attribute_map = {
            'effect': 'effect',
            'key': 'key',
            'operator': 'operator',
            'value': 'value'
        }

        self._effect = effect
        self._key = key
        self._operator = operator
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerToleration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerToleration of this PolicyControllerToleration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effect(self):
        """Gets the effect of this PolicyControllerToleration.

        Matches a taint effect.

        :return: The effect of this PolicyControllerToleration.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect):
        """Sets the effect of this PolicyControllerToleration.

        Matches a taint effect.

        :param effect: The effect of this PolicyControllerToleration.
        :type effect: str
        """

        self._effect = effect

    @property
    def key(self):
        """Gets the key of this PolicyControllerToleration.

        Matches a taint key (not necessarily unique).

        :return: The key of this PolicyControllerToleration.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PolicyControllerToleration.

        Matches a taint key (not necessarily unique).

        :param key: The key of this PolicyControllerToleration.
        :type key: str
        """

        self._key = key

    @property
    def operator(self):
        """Gets the operator of this PolicyControllerToleration.

        Matches a taint operator.

        :return: The operator of this PolicyControllerToleration.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this PolicyControllerToleration.

        Matches a taint operator.

        :param operator: The operator of this PolicyControllerToleration.
        :type operator: str
        """

        self._operator = operator

    @property
    def value(self):
        """Gets the value of this PolicyControllerToleration.

        Matches a taint value.

        :return: The value of this PolicyControllerToleration.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PolicyControllerToleration.

        Matches a taint value.

        :param value: The value of this PolicyControllerToleration.
        :type value: str
        """

        self._value = value
