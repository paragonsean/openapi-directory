# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, update_time: str=None):
        """FeatureState - a model defined in OpenAPI

        :param code: The code of this FeatureState.
        :param description: The description of this FeatureState.
        :param update_time: The update_time of this FeatureState.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'update_time': str
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'update_time': 'updateTime'
        }

        self._code = code
        self._description = description
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeatureState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeatureState of this FeatureState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this FeatureState.

        The high-level, machine-readable status of this Feature.

        :return: The code of this FeatureState.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this FeatureState.

        The high-level, machine-readable status of this Feature.

        :param code: The code of this FeatureState.
        :type code: str
        """
        allowed_values = ["CODE_UNSPECIFIED", "OK", "WARNING", "ERROR"]  # noqa: E501
        if code not in allowed_values:
            raise ValueError(
                "Invalid value for `code` ({0}), must be one of {1}"
                .format(code, allowed_values)
            )

        self._code = code

    @property
    def description(self):
        """Gets the description of this FeatureState.

        A human-readable description of the current status.

        :return: The description of this FeatureState.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this FeatureState.

        A human-readable description of the current status.

        :param description: The description of this FeatureState.
        :type description: str
        """

        self._description = description

    @property
    def update_time(self):
        """Gets the update_time of this FeatureState.

        The time this status and any related Feature-specific details were updated.

        :return: The update_time of this FeatureState.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this FeatureState.

        The time this status and any related Feature-specific details were updated.

        :param update_time: The update_time of this FeatureState.
        :type update_time: str
        """

        self._update_time = update_time
