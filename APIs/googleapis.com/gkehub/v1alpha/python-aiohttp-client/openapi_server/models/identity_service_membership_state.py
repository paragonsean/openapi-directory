# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.identity_service_membership_spec import IdentityServiceMembershipSpec
from openapi_server import util


class IdentityServiceMembershipState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, failure_reason: str=None, installed_version: str=None, member_config: IdentityServiceMembershipSpec=None, state: str=None):
        """IdentityServiceMembershipState - a model defined in OpenAPI

        :param failure_reason: The failure_reason of this IdentityServiceMembershipState.
        :param installed_version: The installed_version of this IdentityServiceMembershipState.
        :param member_config: The member_config of this IdentityServiceMembershipState.
        :param state: The state of this IdentityServiceMembershipState.
        """
        self.openapi_types = {
            'failure_reason': str,
            'installed_version': str,
            'member_config': IdentityServiceMembershipSpec,
            'state': str
        }

        self.attribute_map = {
            'failure_reason': 'failureReason',
            'installed_version': 'installedVersion',
            'member_config': 'memberConfig',
            'state': 'state'
        }

        self._failure_reason = failure_reason
        self._installed_version = installed_version
        self._member_config = member_config
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IdentityServiceMembershipState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IdentityServiceMembershipState of this IdentityServiceMembershipState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def failure_reason(self):
        """Gets the failure_reason of this IdentityServiceMembershipState.

        The reason of the failure.

        :return: The failure_reason of this IdentityServiceMembershipState.
        :rtype: str
        """
        return self._failure_reason

    @failure_reason.setter
    def failure_reason(self, failure_reason):
        """Sets the failure_reason of this IdentityServiceMembershipState.

        The reason of the failure.

        :param failure_reason: The failure_reason of this IdentityServiceMembershipState.
        :type failure_reason: str
        """

        self._failure_reason = failure_reason

    @property
    def installed_version(self):
        """Gets the installed_version of this IdentityServiceMembershipState.

        Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.

        :return: The installed_version of this IdentityServiceMembershipState.
        :rtype: str
        """
        return self._installed_version

    @installed_version.setter
    def installed_version(self, installed_version):
        """Sets the installed_version of this IdentityServiceMembershipState.

        Installed AIS version. This is the AIS version installed on this member. The values makes sense iff state is OK.

        :param installed_version: The installed_version of this IdentityServiceMembershipState.
        :type installed_version: str
        """

        self._installed_version = installed_version

    @property
    def member_config(self):
        """Gets the member_config of this IdentityServiceMembershipState.


        :return: The member_config of this IdentityServiceMembershipState.
        :rtype: IdentityServiceMembershipSpec
        """
        return self._member_config

    @member_config.setter
    def member_config(self, member_config):
        """Sets the member_config of this IdentityServiceMembershipState.


        :param member_config: The member_config of this IdentityServiceMembershipState.
        :type member_config: IdentityServiceMembershipSpec
        """

        self._member_config = member_config

    @property
    def state(self):
        """Gets the state of this IdentityServiceMembershipState.

        Deployment state on this member

        :return: The state of this IdentityServiceMembershipState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this IdentityServiceMembershipState.

        Deployment state on this member

        :param state: The state of this IdentityServiceMembershipState.
        :type state: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "OK", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
