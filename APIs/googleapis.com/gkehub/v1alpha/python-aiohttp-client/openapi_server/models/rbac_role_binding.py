# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rbac_role_binding_lifecycle_state import RBACRoleBindingLifecycleState
from openapi_server.models.role import Role
from openapi_server import util


class RBACRoleBinding(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, delete_time: str=None, group: str=None, labels: Dict[str, str]=None, name: str=None, role: Role=None, state: RBACRoleBindingLifecycleState=None, uid: str=None, update_time: str=None, user: str=None):
        """RBACRoleBinding - a model defined in OpenAPI

        :param create_time: The create_time of this RBACRoleBinding.
        :param delete_time: The delete_time of this RBACRoleBinding.
        :param group: The group of this RBACRoleBinding.
        :param labels: The labels of this RBACRoleBinding.
        :param name: The name of this RBACRoleBinding.
        :param role: The role of this RBACRoleBinding.
        :param state: The state of this RBACRoleBinding.
        :param uid: The uid of this RBACRoleBinding.
        :param update_time: The update_time of this RBACRoleBinding.
        :param user: The user of this RBACRoleBinding.
        """
        self.openapi_types = {
            'create_time': str,
            'delete_time': str,
            'group': str,
            'labels': Dict[str, str],
            'name': str,
            'role': Role,
            'state': RBACRoleBindingLifecycleState,
            'uid': str,
            'update_time': str,
            'user': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'delete_time': 'deleteTime',
            'group': 'group',
            'labels': 'labels',
            'name': 'name',
            'role': 'role',
            'state': 'state',
            'uid': 'uid',
            'update_time': 'updateTime',
            'user': 'user'
        }

        self._create_time = create_time
        self._delete_time = delete_time
        self._group = group
        self._labels = labels
        self._name = name
        self._role = role
        self._state = state
        self._uid = uid
        self._update_time = update_time
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RBACRoleBinding':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RBACRoleBinding of this RBACRoleBinding.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this RBACRoleBinding.

        Output only. When the rbacrolebinding was created.

        :return: The create_time of this RBACRoleBinding.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this RBACRoleBinding.

        Output only. When the rbacrolebinding was created.

        :param create_time: The create_time of this RBACRoleBinding.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def delete_time(self):
        """Gets the delete_time of this RBACRoleBinding.

        Output only. When the rbacrolebinding was deleted.

        :return: The delete_time of this RBACRoleBinding.
        :rtype: str
        """
        return self._delete_time

    @delete_time.setter
    def delete_time(self, delete_time):
        """Sets the delete_time of this RBACRoleBinding.

        Output only. When the rbacrolebinding was deleted.

        :param delete_time: The delete_time of this RBACRoleBinding.
        :type delete_time: str
        """

        self._delete_time = delete_time

    @property
    def group(self):
        """Gets the group of this RBACRoleBinding.

        group is the group, as seen by the kubernetes cluster.

        :return: The group of this RBACRoleBinding.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this RBACRoleBinding.

        group is the group, as seen by the kubernetes cluster.

        :param group: The group of this RBACRoleBinding.
        :type group: str
        """

        self._group = group

    @property
    def labels(self):
        """Gets the labels of this RBACRoleBinding.

        Optional. Labels for this RBACRolebinding.

        :return: The labels of this RBACRoleBinding.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this RBACRoleBinding.

        Optional. Labels for this RBACRolebinding.

        :param labels: The labels of this RBACRoleBinding.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this RBACRoleBinding.

        The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`

        :return: The name of this RBACRoleBinding.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RBACRoleBinding.

        The resource name for the rbacrolebinding `projects/{project}/locations/{location}/scopes/{scope}/rbacrolebindings/{rbacrolebinding}` or `projects/{project}/locations/{location}/memberships/{membership}/rbacrolebindings/{rbacrolebinding}`

        :param name: The name of this RBACRoleBinding.
        :type name: str
        """

        self._name = name

    @property
    def role(self):
        """Gets the role of this RBACRoleBinding.


        :return: The role of this RBACRoleBinding.
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RBACRoleBinding.


        :param role: The role of this RBACRoleBinding.
        :type role: Role
        """

        self._role = role

    @property
    def state(self):
        """Gets the state of this RBACRoleBinding.


        :return: The state of this RBACRoleBinding.
        :rtype: RBACRoleBindingLifecycleState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RBACRoleBinding.


        :param state: The state of this RBACRoleBinding.
        :type state: RBACRoleBindingLifecycleState
        """

        self._state = state

    @property
    def uid(self):
        """Gets the uid of this RBACRoleBinding.

        Output only. Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.

        :return: The uid of this RBACRoleBinding.
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this RBACRoleBinding.

        Output only. Google-generated UUID for this resource. This is unique across all rbacrolebinding resources. If a rbacrolebinding resource is deleted and another resource with the same name is created, it gets a different uid.

        :param uid: The uid of this RBACRoleBinding.
        :type uid: str
        """

        self._uid = uid

    @property
    def update_time(self):
        """Gets the update_time of this RBACRoleBinding.

        Output only. When the rbacrolebinding was last updated.

        :return: The update_time of this RBACRoleBinding.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this RBACRoleBinding.

        Output only. When the rbacrolebinding was last updated.

        :param update_time: The update_time of this RBACRoleBinding.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user(self):
        """Gets the user of this RBACRoleBinding.

        user is the name of the user as seen by the kubernetes cluster, example \"alice\" or \"alice@domain.tld\"

        :return: The user of this RBACRoleBinding.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this RBACRoleBinding.

        user is the name of the user as seen by the kubernetes cluster, example \"alice\" or \"alice@domain.tld\"

        :param user: The user of this RBACRoleBinding.
        :type user: str
        """

        self._user = user
