# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_management_install_error import ConfigManagementInstallError
from openapi_server import util


class ConfigManagementOperatorState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deployment_state: str=None, errors: List[ConfigManagementInstallError]=None, version: str=None):
        """ConfigManagementOperatorState - a model defined in OpenAPI

        :param deployment_state: The deployment_state of this ConfigManagementOperatorState.
        :param errors: The errors of this ConfigManagementOperatorState.
        :param version: The version of this ConfigManagementOperatorState.
        """
        self.openapi_types = {
            'deployment_state': str,
            'errors': List[ConfigManagementInstallError],
            'version': str
        }

        self.attribute_map = {
            'deployment_state': 'deploymentState',
            'errors': 'errors',
            'version': 'version'
        }

        self._deployment_state = deployment_state
        self._errors = errors
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigManagementOperatorState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigManagementOperatorState of this ConfigManagementOperatorState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deployment_state(self):
        """Gets the deployment_state of this ConfigManagementOperatorState.

        The state of the Operator's deployment

        :return: The deployment_state of this ConfigManagementOperatorState.
        :rtype: str
        """
        return self._deployment_state

    @deployment_state.setter
    def deployment_state(self, deployment_state):
        """Sets the deployment_state of this ConfigManagementOperatorState.

        The state of the Operator's deployment

        :param deployment_state: The deployment_state of this ConfigManagementOperatorState.
        :type deployment_state: str
        """
        allowed_values = ["DEPLOYMENT_STATE_UNSPECIFIED", "NOT_INSTALLED", "INSTALLED", "ERROR", "PENDING"]  # noqa: E501
        if deployment_state not in allowed_values:
            raise ValueError(
                "Invalid value for `deployment_state` ({0}), must be one of {1}"
                .format(deployment_state, allowed_values)
            )

        self._deployment_state = deployment_state

    @property
    def errors(self):
        """Gets the errors of this ConfigManagementOperatorState.

        Install errors.

        :return: The errors of this ConfigManagementOperatorState.
        :rtype: List[ConfigManagementInstallError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this ConfigManagementOperatorState.

        Install errors.

        :param errors: The errors of this ConfigManagementOperatorState.
        :type errors: List[ConfigManagementInstallError]
        """

        self._errors = errors

    @property
    def version(self):
        """Gets the version of this ConfigManagementOperatorState.

        The semenatic version number of the operator

        :return: The version of this ConfigManagementOperatorState.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ConfigManagementOperatorState.

        The semenatic version number of the operator

        :param version: The version of this ConfigManagementOperatorState.
        :type version: str
        """

        self._version = version
