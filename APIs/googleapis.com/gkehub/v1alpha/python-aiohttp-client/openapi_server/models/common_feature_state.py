# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_dev_experience_feature_state import AppDevExperienceFeatureState
from openapi_server.models.cluster_upgrade_fleet_state import ClusterUpgradeFleetState
from openapi_server.models.feature_state import FeatureState
from openapi_server.models.fleet_observability_feature_state import FleetObservabilityFeatureState
from openapi_server.models.service_mesh_feature_state import ServiceMeshFeatureState
from openapi_server import util


class CommonFeatureState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appdevexperience: AppDevExperienceFeatureState=None, clusterupgrade: ClusterUpgradeFleetState=None, fleetobservability: FleetObservabilityFeatureState=None, namespaceactuation: object=None, servicemesh: ServiceMeshFeatureState=None, state: FeatureState=None):
        """CommonFeatureState - a model defined in OpenAPI

        :param appdevexperience: The appdevexperience of this CommonFeatureState.
        :param clusterupgrade: The clusterupgrade of this CommonFeatureState.
        :param fleetobservability: The fleetobservability of this CommonFeatureState.
        :param namespaceactuation: The namespaceactuation of this CommonFeatureState.
        :param servicemesh: The servicemesh of this CommonFeatureState.
        :param state: The state of this CommonFeatureState.
        """
        self.openapi_types = {
            'appdevexperience': AppDevExperienceFeatureState,
            'clusterupgrade': ClusterUpgradeFleetState,
            'fleetobservability': FleetObservabilityFeatureState,
            'namespaceactuation': object,
            'servicemesh': ServiceMeshFeatureState,
            'state': FeatureState
        }

        self.attribute_map = {
            'appdevexperience': 'appdevexperience',
            'clusterupgrade': 'clusterupgrade',
            'fleetobservability': 'fleetobservability',
            'namespaceactuation': 'namespaceactuation',
            'servicemesh': 'servicemesh',
            'state': 'state'
        }

        self._appdevexperience = appdevexperience
        self._clusterupgrade = clusterupgrade
        self._fleetobservability = fleetobservability
        self._namespaceactuation = namespaceactuation
        self._servicemesh = servicemesh
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonFeatureState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonFeatureState of this CommonFeatureState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appdevexperience(self):
        """Gets the appdevexperience of this CommonFeatureState.


        :return: The appdevexperience of this CommonFeatureState.
        :rtype: AppDevExperienceFeatureState
        """
        return self._appdevexperience

    @appdevexperience.setter
    def appdevexperience(self, appdevexperience):
        """Sets the appdevexperience of this CommonFeatureState.


        :param appdevexperience: The appdevexperience of this CommonFeatureState.
        :type appdevexperience: AppDevExperienceFeatureState
        """

        self._appdevexperience = appdevexperience

    @property
    def clusterupgrade(self):
        """Gets the clusterupgrade of this CommonFeatureState.


        :return: The clusterupgrade of this CommonFeatureState.
        :rtype: ClusterUpgradeFleetState
        """
        return self._clusterupgrade

    @clusterupgrade.setter
    def clusterupgrade(self, clusterupgrade):
        """Sets the clusterupgrade of this CommonFeatureState.


        :param clusterupgrade: The clusterupgrade of this CommonFeatureState.
        :type clusterupgrade: ClusterUpgradeFleetState
        """

        self._clusterupgrade = clusterupgrade

    @property
    def fleetobservability(self):
        """Gets the fleetobservability of this CommonFeatureState.


        :return: The fleetobservability of this CommonFeatureState.
        :rtype: FleetObservabilityFeatureState
        """
        return self._fleetobservability

    @fleetobservability.setter
    def fleetobservability(self, fleetobservability):
        """Sets the fleetobservability of this CommonFeatureState.


        :param fleetobservability: The fleetobservability of this CommonFeatureState.
        :type fleetobservability: FleetObservabilityFeatureState
        """

        self._fleetobservability = fleetobservability

    @property
    def namespaceactuation(self):
        """Gets the namespaceactuation of this CommonFeatureState.

        NamespaceActuation Feature State.

        :return: The namespaceactuation of this CommonFeatureState.
        :rtype: object
        """
        return self._namespaceactuation

    @namespaceactuation.setter
    def namespaceactuation(self, namespaceactuation):
        """Sets the namespaceactuation of this CommonFeatureState.

        NamespaceActuation Feature State.

        :param namespaceactuation: The namespaceactuation of this CommonFeatureState.
        :type namespaceactuation: object
        """

        self._namespaceactuation = namespaceactuation

    @property
    def servicemesh(self):
        """Gets the servicemesh of this CommonFeatureState.


        :return: The servicemesh of this CommonFeatureState.
        :rtype: ServiceMeshFeatureState
        """
        return self._servicemesh

    @servicemesh.setter
    def servicemesh(self, servicemesh):
        """Sets the servicemesh of this CommonFeatureState.


        :param servicemesh: The servicemesh of this CommonFeatureState.
        :type servicemesh: ServiceMeshFeatureState
        """

        self._servicemesh = servicemesh

    @property
    def state(self):
        """Gets the state of this CommonFeatureState.


        :return: The state of this CommonFeatureState.
        :rtype: FeatureState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CommonFeatureState.


        :param state: The state of this CommonFeatureState.
        :type state: FeatureState
        """

        self._state = state
