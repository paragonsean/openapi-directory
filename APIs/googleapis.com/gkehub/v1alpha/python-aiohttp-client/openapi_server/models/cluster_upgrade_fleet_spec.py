# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_upgrade_gke_upgrade_override import ClusterUpgradeGKEUpgradeOverride
from openapi_server.models.cluster_upgrade_post_conditions import ClusterUpgradePostConditions
from openapi_server import util


class ClusterUpgradeFleetSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gke_upgrade_overrides: List[ClusterUpgradeGKEUpgradeOverride]=None, post_conditions: ClusterUpgradePostConditions=None, upstream_fleets: List[str]=None):
        """ClusterUpgradeFleetSpec - a model defined in OpenAPI

        :param gke_upgrade_overrides: The gke_upgrade_overrides of this ClusterUpgradeFleetSpec.
        :param post_conditions: The post_conditions of this ClusterUpgradeFleetSpec.
        :param upstream_fleets: The upstream_fleets of this ClusterUpgradeFleetSpec.
        """
        self.openapi_types = {
            'gke_upgrade_overrides': List[ClusterUpgradeGKEUpgradeOverride],
            'post_conditions': ClusterUpgradePostConditions,
            'upstream_fleets': List[str]
        }

        self.attribute_map = {
            'gke_upgrade_overrides': 'gkeUpgradeOverrides',
            'post_conditions': 'postConditions',
            'upstream_fleets': 'upstreamFleets'
        }

        self._gke_upgrade_overrides = gke_upgrade_overrides
        self._post_conditions = post_conditions
        self._upstream_fleets = upstream_fleets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeFleetSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeFleetSpec of this ClusterUpgradeFleetSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gke_upgrade_overrides(self):
        """Gets the gke_upgrade_overrides of this ClusterUpgradeFleetSpec.

        Allow users to override some properties of each GKE upgrade.

        :return: The gke_upgrade_overrides of this ClusterUpgradeFleetSpec.
        :rtype: List[ClusterUpgradeGKEUpgradeOverride]
        """
        return self._gke_upgrade_overrides

    @gke_upgrade_overrides.setter
    def gke_upgrade_overrides(self, gke_upgrade_overrides):
        """Sets the gke_upgrade_overrides of this ClusterUpgradeFleetSpec.

        Allow users to override some properties of each GKE upgrade.

        :param gke_upgrade_overrides: The gke_upgrade_overrides of this ClusterUpgradeFleetSpec.
        :type gke_upgrade_overrides: List[ClusterUpgradeGKEUpgradeOverride]
        """

        self._gke_upgrade_overrides = gke_upgrade_overrides

    @property
    def post_conditions(self):
        """Gets the post_conditions of this ClusterUpgradeFleetSpec.


        :return: The post_conditions of this ClusterUpgradeFleetSpec.
        :rtype: ClusterUpgradePostConditions
        """
        return self._post_conditions

    @post_conditions.setter
    def post_conditions(self, post_conditions):
        """Sets the post_conditions of this ClusterUpgradeFleetSpec.


        :param post_conditions: The post_conditions of this ClusterUpgradeFleetSpec.
        :type post_conditions: ClusterUpgradePostConditions
        """

        self._post_conditions = post_conditions

    @property
    def upstream_fleets(self):
        """Gets the upstream_fleets of this ClusterUpgradeFleetSpec.

        This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.

        :return: The upstream_fleets of this ClusterUpgradeFleetSpec.
        :rtype: List[str]
        """
        return self._upstream_fleets

    @upstream_fleets.setter
    def upstream_fleets(self, upstream_fleets):
        """Sets the upstream_fleets of this ClusterUpgradeFleetSpec.

        This fleet consumes upgrades that have COMPLETE status code in the upstream fleets. See UpgradeStatus.Code for code definitions. The fleet name should be either fleet project number or id. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream fleet.

        :param upstream_fleets: The upstream_fleets of this ClusterUpgradeFleetSpec.
        :type upstream_fleets: List[str]
        """

        self._upstream_fleets = upstream_fleets
