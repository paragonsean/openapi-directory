# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_mesh_analysis_message import ServiceMeshAnalysisMessage
from openapi_server.models.service_mesh_control_plane_management import ServiceMeshControlPlaneManagement
from openapi_server.models.service_mesh_data_plane_management import ServiceMeshDataPlaneManagement
from openapi_server import util


class ServiceMeshMembershipState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, analysis_messages: List[ServiceMeshAnalysisMessage]=None, config_api_version: str=None, control_plane_management: ServiceMeshControlPlaneManagement=None, data_plane_management: ServiceMeshDataPlaneManagement=None):
        """ServiceMeshMembershipState - a model defined in OpenAPI

        :param analysis_messages: The analysis_messages of this ServiceMeshMembershipState.
        :param config_api_version: The config_api_version of this ServiceMeshMembershipState.
        :param control_plane_management: The control_plane_management of this ServiceMeshMembershipState.
        :param data_plane_management: The data_plane_management of this ServiceMeshMembershipState.
        """
        self.openapi_types = {
            'analysis_messages': List[ServiceMeshAnalysisMessage],
            'config_api_version': str,
            'control_plane_management': ServiceMeshControlPlaneManagement,
            'data_plane_management': ServiceMeshDataPlaneManagement
        }

        self.attribute_map = {
            'analysis_messages': 'analysisMessages',
            'config_api_version': 'configApiVersion',
            'control_plane_management': 'controlPlaneManagement',
            'data_plane_management': 'dataPlaneManagement'
        }

        self._analysis_messages = analysis_messages
        self._config_api_version = config_api_version
        self._control_plane_management = control_plane_management
        self._data_plane_management = data_plane_management

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceMeshMembershipState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceMeshMembershipState of this ServiceMeshMembershipState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def analysis_messages(self):
        """Gets the analysis_messages of this ServiceMeshMembershipState.

        Output only. Results of running Service Mesh analyzers.

        :return: The analysis_messages of this ServiceMeshMembershipState.
        :rtype: List[ServiceMeshAnalysisMessage]
        """
        return self._analysis_messages

    @analysis_messages.setter
    def analysis_messages(self, analysis_messages):
        """Sets the analysis_messages of this ServiceMeshMembershipState.

        Output only. Results of running Service Mesh analyzers.

        :param analysis_messages: The analysis_messages of this ServiceMeshMembershipState.
        :type analysis_messages: List[ServiceMeshAnalysisMessage]
        """

        self._analysis_messages = analysis_messages

    @property
    def config_api_version(self):
        """Gets the config_api_version of this ServiceMeshMembershipState.

        The API version (i.e. Istio CRD version) for configuring service mesh in this cluster. This version is influenced by the `default_channel` field.

        :return: The config_api_version of this ServiceMeshMembershipState.
        :rtype: str
        """
        return self._config_api_version

    @config_api_version.setter
    def config_api_version(self, config_api_version):
        """Sets the config_api_version of this ServiceMeshMembershipState.

        The API version (i.e. Istio CRD version) for configuring service mesh in this cluster. This version is influenced by the `default_channel` field.

        :param config_api_version: The config_api_version of this ServiceMeshMembershipState.
        :type config_api_version: str
        """

        self._config_api_version = config_api_version

    @property
    def control_plane_management(self):
        """Gets the control_plane_management of this ServiceMeshMembershipState.


        :return: The control_plane_management of this ServiceMeshMembershipState.
        :rtype: ServiceMeshControlPlaneManagement
        """
        return self._control_plane_management

    @control_plane_management.setter
    def control_plane_management(self, control_plane_management):
        """Sets the control_plane_management of this ServiceMeshMembershipState.


        :param control_plane_management: The control_plane_management of this ServiceMeshMembershipState.
        :type control_plane_management: ServiceMeshControlPlaneManagement
        """

        self._control_plane_management = control_plane_management

    @property
    def data_plane_management(self):
        """Gets the data_plane_management of this ServiceMeshMembershipState.


        :return: The data_plane_management of this ServiceMeshMembershipState.
        :rtype: ServiceMeshDataPlaneManagement
        """
        return self._data_plane_management

    @data_plane_management.setter
    def data_plane_management(self, data_plane_management):
        """Sets the data_plane_management of this ServiceMeshMembershipState.


        :param data_plane_management: The data_plane_management of this ServiceMeshMembershipState.
        :type data_plane_management: ServiceMeshDataPlaneManagement
        """

        self._data_plane_management = data_plane_management
