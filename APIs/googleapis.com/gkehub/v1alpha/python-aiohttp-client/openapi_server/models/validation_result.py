# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidationResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, result: str=None, success: bool=None, validator: str=None):
        """ValidationResult - a model defined in OpenAPI

        :param result: The result of this ValidationResult.
        :param success: The success of this ValidationResult.
        :param validator: The validator of this ValidationResult.
        """
        self.openapi_types = {
            'result': str,
            'success': bool,
            'validator': str
        }

        self.attribute_map = {
            'result': 'result',
            'success': 'success',
            'validator': 'validator'
        }

        self._result = result
        self._success = success
        self._validator = validator

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidationResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ValidationResult of this ValidationResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self):
        """Gets the result of this ValidationResult.

        Additional information for the validation.

        :return: The result of this ValidationResult.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ValidationResult.

        Additional information for the validation.

        :param result: The result of this ValidationResult.
        :type result: str
        """

        self._result = result

    @property
    def success(self):
        """Gets the success of this ValidationResult.

        Whether the validation is passed or not.

        :return: The success of this ValidationResult.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ValidationResult.

        Whether the validation is passed or not.

        :param success: The success of this ValidationResult.
        :type success: bool
        """

        self._success = success

    @property
    def validator(self):
        """Gets the validator of this ValidationResult.

        Validator type to validate membership with.

        :return: The validator of this ValidationResult.
        :rtype: str
        """
        return self._validator

    @validator.setter
    def validator(self, validator):
        """Sets the validator of this ValidationResult.

        Validator type to validate membership with.

        :param validator: The validator of this ValidationResult.
        :type validator: str
        """
        allowed_values = ["VALIDATOR_TYPE_UNSPECIFIED", "MEMBERSHIP_ID", "CROSS_PROJECT_PERMISSION"]  # noqa: E501
        if validator not in allowed_values:
            raise ValueError(
                "Invalid value for `validator` ({0}), must be one of {1}"
                .format(validator, allowed_values)
            )

        self._validator = validator
