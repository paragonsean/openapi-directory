# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MembershipSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, certificate_management: str=None):
        """MembershipSpec - a model defined in OpenAPI

        :param certificate_management: The certificate_management of this MembershipSpec.
        """
        self.openapi_types = {
            'certificate_management': str
        }

        self.attribute_map = {
            'certificate_management': 'certificateManagement'
        }

        self._certificate_management = certificate_management

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MembershipSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MembershipSpec of this MembershipSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def certificate_management(self):
        """Gets the certificate_management of this MembershipSpec.

        Specifies workload certificate management.

        :return: The certificate_management of this MembershipSpec.
        :rtype: str
        """
        return self._certificate_management

    @certificate_management.setter
    def certificate_management(self, certificate_management):
        """Sets the certificate_management of this MembershipSpec.

        Specifies workload certificate management.

        :param certificate_management: The certificate_management of this MembershipSpec.
        :type certificate_management: str
        """
        allowed_values = ["CERTIFICATE_MANAGEMENT_UNSPECIFIED", "DISABLED", "ENABLED"]  # noqa: E501
        if certificate_management not in allowed_values:
            raise ValueError(
                "Invalid value for `certificate_management` ({0}), must be one of {1}"
                .format(certificate_management, allowed_values)
            )

        self._certificate_management = certificate_management
