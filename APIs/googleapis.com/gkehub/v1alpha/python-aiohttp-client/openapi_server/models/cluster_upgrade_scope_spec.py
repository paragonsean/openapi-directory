# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_upgrade_gke_upgrade_override import ClusterUpgradeGKEUpgradeOverride
from openapi_server.models.cluster_upgrade_post_conditions import ClusterUpgradePostConditions
from openapi_server import util


class ClusterUpgradeScopeSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gke_upgrade_overrides: List[ClusterUpgradeGKEUpgradeOverride]=None, post_conditions: ClusterUpgradePostConditions=None, upstream_scopes: List[str]=None):
        """ClusterUpgradeScopeSpec - a model defined in OpenAPI

        :param gke_upgrade_overrides: The gke_upgrade_overrides of this ClusterUpgradeScopeSpec.
        :param post_conditions: The post_conditions of this ClusterUpgradeScopeSpec.
        :param upstream_scopes: The upstream_scopes of this ClusterUpgradeScopeSpec.
        """
        self.openapi_types = {
            'gke_upgrade_overrides': List[ClusterUpgradeGKEUpgradeOverride],
            'post_conditions': ClusterUpgradePostConditions,
            'upstream_scopes': List[str]
        }

        self.attribute_map = {
            'gke_upgrade_overrides': 'gkeUpgradeOverrides',
            'post_conditions': 'postConditions',
            'upstream_scopes': 'upstreamScopes'
        }

        self._gke_upgrade_overrides = gke_upgrade_overrides
        self._post_conditions = post_conditions
        self._upstream_scopes = upstream_scopes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterUpgradeScopeSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterUpgradeScopeSpec of this ClusterUpgradeScopeSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gke_upgrade_overrides(self):
        """Gets the gke_upgrade_overrides of this ClusterUpgradeScopeSpec.

        Allow users to override some properties of each GKE upgrade.

        :return: The gke_upgrade_overrides of this ClusterUpgradeScopeSpec.
        :rtype: List[ClusterUpgradeGKEUpgradeOverride]
        """
        return self._gke_upgrade_overrides

    @gke_upgrade_overrides.setter
    def gke_upgrade_overrides(self, gke_upgrade_overrides):
        """Sets the gke_upgrade_overrides of this ClusterUpgradeScopeSpec.

        Allow users to override some properties of each GKE upgrade.

        :param gke_upgrade_overrides: The gke_upgrade_overrides of this ClusterUpgradeScopeSpec.
        :type gke_upgrade_overrides: List[ClusterUpgradeGKEUpgradeOverride]
        """

        self._gke_upgrade_overrides = gke_upgrade_overrides

    @property
    def post_conditions(self):
        """Gets the post_conditions of this ClusterUpgradeScopeSpec.


        :return: The post_conditions of this ClusterUpgradeScopeSpec.
        :rtype: ClusterUpgradePostConditions
        """
        return self._post_conditions

    @post_conditions.setter
    def post_conditions(self, post_conditions):
        """Sets the post_conditions of this ClusterUpgradeScopeSpec.


        :param post_conditions: The post_conditions of this ClusterUpgradeScopeSpec.
        :type post_conditions: ClusterUpgradePostConditions
        """

        self._post_conditions = post_conditions

    @property
    def upstream_scopes(self):
        """Gets the upstream_scopes of this ClusterUpgradeScopeSpec.

        This scope consumes upgrades that have COMPLETE status code in the upstream scopes. See UpgradeStatus.Code for code definitions. The scope name should be in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream scope.

        :return: The upstream_scopes of this ClusterUpgradeScopeSpec.
        :rtype: List[str]
        """
        return self._upstream_scopes

    @upstream_scopes.setter
    def upstream_scopes(self, upstream_scopes):
        """Sets the upstream_scopes of this ClusterUpgradeScopeSpec.

        This scope consumes upgrades that have COMPLETE status code in the upstream scopes. See UpgradeStatus.Code for code definitions. The scope name should be in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream scope.

        :param upstream_scopes: The upstream_scopes of this ClusterUpgradeScopeSpec.
        :type upstream_scopes: List[str]
        """

        self._upstream_scopes = upstream_scopes
