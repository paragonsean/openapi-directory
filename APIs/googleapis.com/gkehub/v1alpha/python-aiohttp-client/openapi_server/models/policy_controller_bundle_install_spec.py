# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PolicyControllerBundleInstallSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exempted_namespaces: List[str]=None):
        """PolicyControllerBundleInstallSpec - a model defined in OpenAPI

        :param exempted_namespaces: The exempted_namespaces of this PolicyControllerBundleInstallSpec.
        """
        self.openapi_types = {
            'exempted_namespaces': List[str]
        }

        self.attribute_map = {
            'exempted_namespaces': 'exemptedNamespaces'
        }

        self._exempted_namespaces = exempted_namespaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyControllerBundleInstallSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyControllerBundleInstallSpec of this PolicyControllerBundleInstallSpec.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exempted_namespaces(self):
        """Gets the exempted_namespaces of this PolicyControllerBundleInstallSpec.

        The set of namespaces to be exempted from the bundle.

        :return: The exempted_namespaces of this PolicyControllerBundleInstallSpec.
        :rtype: List[str]
        """
        return self._exempted_namespaces

    @exempted_namespaces.setter
    def exempted_namespaces(self, exempted_namespaces):
        """Sets the exempted_namespaces of this PolicyControllerBundleInstallSpec.

        The set of namespaces to be exempted from the bundle.

        :param exempted_namespaces: The exempted_namespaces of this PolicyControllerBundleInstallSpec.
        :type exempted_namespaces: List[str]
        """

        self._exempted_namespaces = exempted_namespaces
