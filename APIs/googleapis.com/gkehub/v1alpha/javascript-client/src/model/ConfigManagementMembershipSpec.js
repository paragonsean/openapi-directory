/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementBinauthzConfig from './ConfigManagementBinauthzConfig';
import ConfigManagementConfigSync from './ConfigManagementConfigSync';
import ConfigManagementHierarchyControllerConfig from './ConfigManagementHierarchyControllerConfig';
import ConfigManagementPolicyController from './ConfigManagementPolicyController';

/**
 * The ConfigManagementMembershipSpec model module.
 * @module model/ConfigManagementMembershipSpec
 * @version v1alpha
 */
class ConfigManagementMembershipSpec {
    /**
     * Constructs a new <code>ConfigManagementMembershipSpec</code>.
     * **Anthos Config Management**: Configuration for a single cluster. Intended to parallel the ConfigManagement CR.
     * @alias module:model/ConfigManagementMembershipSpec
     */
    constructor() { 
        
        ConfigManagementMembershipSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementMembershipSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementMembershipSpec} obj Optional instance to populate.
     * @return {module:model/ConfigManagementMembershipSpec} The populated <code>ConfigManagementMembershipSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementMembershipSpec();

            if (data.hasOwnProperty('binauthz')) {
                obj['binauthz'] = ConfigManagementBinauthzConfig.constructFromObject(data['binauthz']);
            }
            if (data.hasOwnProperty('cluster')) {
                obj['cluster'] = ApiClient.convertToType(data['cluster'], 'String');
            }
            if (data.hasOwnProperty('configSync')) {
                obj['configSync'] = ConfigManagementConfigSync.constructFromObject(data['configSync']);
            }
            if (data.hasOwnProperty('hierarchyController')) {
                obj['hierarchyController'] = ConfigManagementHierarchyControllerConfig.constructFromObject(data['hierarchyController']);
            }
            if (data.hasOwnProperty('management')) {
                obj['management'] = ApiClient.convertToType(data['management'], 'String');
            }
            if (data.hasOwnProperty('policyController')) {
                obj['policyController'] = ConfigManagementPolicyController.constructFromObject(data['policyController']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementMembershipSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementMembershipSpec</code>.
     */
    static validateJSON(data) {
        // validate the optional field `binauthz`
        if (data['binauthz']) { // data not null
          ConfigManagementBinauthzConfig.validateJSON(data['binauthz']);
        }
        // ensure the json data is a string
        if (data['cluster'] && !(typeof data['cluster'] === 'string' || data['cluster'] instanceof String)) {
            throw new Error("Expected the field `cluster` to be a primitive type in the JSON string but got " + data['cluster']);
        }
        // validate the optional field `configSync`
        if (data['configSync']) { // data not null
          ConfigManagementConfigSync.validateJSON(data['configSync']);
        }
        // validate the optional field `hierarchyController`
        if (data['hierarchyController']) { // data not null
          ConfigManagementHierarchyControllerConfig.validateJSON(data['hierarchyController']);
        }
        // ensure the json data is a string
        if (data['management'] && !(typeof data['management'] === 'string' || data['management'] instanceof String)) {
            throw new Error("Expected the field `management` to be a primitive type in the JSON string but got " + data['management']);
        }
        // validate the optional field `policyController`
        if (data['policyController']) { // data not null
          ConfigManagementPolicyController.validateJSON(data['policyController']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigManagementBinauthzConfig} binauthz
 */
ConfigManagementMembershipSpec.prototype['binauthz'] = undefined;

/**
 * The user-specified cluster name used by Config Sync cluster-name-selector annotation or ClusterSelector, for applying configs to only a subset of clusters. Omit this field if the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector. Set this field if a name different from the cluster's fleet membership name is used by Config Sync cluster-name-selector annotation or ClusterSelector.
 * @member {String} cluster
 */
ConfigManagementMembershipSpec.prototype['cluster'] = undefined;

/**
 * @member {module:model/ConfigManagementConfigSync} configSync
 */
ConfigManagementMembershipSpec.prototype['configSync'] = undefined;

/**
 * @member {module:model/ConfigManagementHierarchyControllerConfig} hierarchyController
 */
ConfigManagementMembershipSpec.prototype['hierarchyController'] = undefined;

/**
 * Enables automatic Feature management.
 * @member {module:model/ConfigManagementMembershipSpec.ManagementEnum} management
 */
ConfigManagementMembershipSpec.prototype['management'] = undefined;

/**
 * @member {module:model/ConfigManagementPolicyController} policyController
 */
ConfigManagementMembershipSpec.prototype['policyController'] = undefined;

/**
 * Version of ACM installed.
 * @member {String} version
 */
ConfigManagementMembershipSpec.prototype['version'] = undefined;





/**
 * Allowed values for the <code>management</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementMembershipSpec['ManagementEnum'] = {

    /**
     * value: "MANAGEMENT_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "MANAGEMENT_UNSPECIFIED",

    /**
     * value: "MANAGEMENT_AUTOMATIC"
     * @const
     */
    "AUTOMATIC": "MANAGEMENT_AUTOMATIC",

    /**
     * value: "MANAGEMENT_MANUAL"
     * @const
     */
    "MANUAL": "MANAGEMENT_MANUAL"
};



export default ConfigManagementMembershipSpec;

