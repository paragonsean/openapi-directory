/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyControllerMonitoringConfig from './PolicyControllerMonitoringConfig';
import PolicyControllerPolicyContentSpec from './PolicyControllerPolicyContentSpec';
import PolicyControllerPolicyControllerDeploymentConfig from './PolicyControllerPolicyControllerDeploymentConfig';

/**
 * The PolicyControllerHubConfig model module.
 * @module model/PolicyControllerHubConfig
 * @version v1alpha
 */
class PolicyControllerHubConfig {
    /**
     * Constructs a new <code>PolicyControllerHubConfig</code>.
     * Configuration for Policy Controller
     * @alias module:model/PolicyControllerHubConfig
     */
    constructor() { 
        
        PolicyControllerHubConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyControllerHubConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyControllerHubConfig} obj Optional instance to populate.
     * @return {module:model/PolicyControllerHubConfig} The populated <code>PolicyControllerHubConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyControllerHubConfig();

            if (data.hasOwnProperty('auditIntervalSeconds')) {
                obj['auditIntervalSeconds'] = ApiClient.convertToType(data['auditIntervalSeconds'], 'String');
            }
            if (data.hasOwnProperty('constraintViolationLimit')) {
                obj['constraintViolationLimit'] = ApiClient.convertToType(data['constraintViolationLimit'], 'String');
            }
            if (data.hasOwnProperty('deploymentConfigs')) {
                obj['deploymentConfigs'] = ApiClient.convertToType(data['deploymentConfigs'], {'String': PolicyControllerPolicyControllerDeploymentConfig});
            }
            if (data.hasOwnProperty('exemptableNamespaces')) {
                obj['exemptableNamespaces'] = ApiClient.convertToType(data['exemptableNamespaces'], ['String']);
            }
            if (data.hasOwnProperty('installSpec')) {
                obj['installSpec'] = ApiClient.convertToType(data['installSpec'], 'String');
            }
            if (data.hasOwnProperty('logDeniesEnabled')) {
                obj['logDeniesEnabled'] = ApiClient.convertToType(data['logDeniesEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('monitoring')) {
                obj['monitoring'] = PolicyControllerMonitoringConfig.constructFromObject(data['monitoring']);
            }
            if (data.hasOwnProperty('mutationEnabled')) {
                obj['mutationEnabled'] = ApiClient.convertToType(data['mutationEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('policyContent')) {
                obj['policyContent'] = PolicyControllerPolicyContentSpec.constructFromObject(data['policyContent']);
            }
            if (data.hasOwnProperty('referentialRulesEnabled')) {
                obj['referentialRulesEnabled'] = ApiClient.convertToType(data['referentialRulesEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyControllerHubConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyControllerHubConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['auditIntervalSeconds'] && !(typeof data['auditIntervalSeconds'] === 'string' || data['auditIntervalSeconds'] instanceof String)) {
            throw new Error("Expected the field `auditIntervalSeconds` to be a primitive type in the JSON string but got " + data['auditIntervalSeconds']);
        }
        // ensure the json data is a string
        if (data['constraintViolationLimit'] && !(typeof data['constraintViolationLimit'] === 'string' || data['constraintViolationLimit'] instanceof String)) {
            throw new Error("Expected the field `constraintViolationLimit` to be a primitive type in the JSON string but got " + data['constraintViolationLimit']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['exemptableNamespaces'])) {
            throw new Error("Expected the field `exemptableNamespaces` to be an array in the JSON data but got " + data['exemptableNamespaces']);
        }
        // ensure the json data is a string
        if (data['installSpec'] && !(typeof data['installSpec'] === 'string' || data['installSpec'] instanceof String)) {
            throw new Error("Expected the field `installSpec` to be a primitive type in the JSON string but got " + data['installSpec']);
        }
        // validate the optional field `monitoring`
        if (data['monitoring']) { // data not null
          PolicyControllerMonitoringConfig.validateJSON(data['monitoring']);
        }
        // validate the optional field `policyContent`
        if (data['policyContent']) { // data not null
          PolicyControllerPolicyContentSpec.validateJSON(data['policyContent']);
        }

        return true;
    }


}



/**
 * Sets the interval for Policy Controller Audit Scans (in seconds). When set to 0, this disables audit functionality altogether.
 * @member {String} auditIntervalSeconds
 */
PolicyControllerHubConfig.prototype['auditIntervalSeconds'] = undefined;

/**
 * The maximum number of audit violations to be stored in a constraint. If not set, the internal default (currently 20) will be used.
 * @member {String} constraintViolationLimit
 */
PolicyControllerHubConfig.prototype['constraintViolationLimit'] = undefined;

/**
 * Map of deployment configs to deployments (\"admission\", \"audit\", \"mutation').
 * @member {Object.<String, module:model/PolicyControllerPolicyControllerDeploymentConfig>} deploymentConfigs
 */
PolicyControllerHubConfig.prototype['deploymentConfigs'] = undefined;

/**
 * The set of namespaces that are excluded from Policy Controller checks. Namespaces do not need to currently exist on the cluster.
 * @member {Array.<String>} exemptableNamespaces
 */
PolicyControllerHubConfig.prototype['exemptableNamespaces'] = undefined;

/**
 * The install_spec represents the intended state specified by the latest request that mutated install_spec in the feature spec, not the lifecycle state of the feature observed by the Hub feature controller that is reported in the feature state.
 * @member {module:model/PolicyControllerHubConfig.InstallSpecEnum} installSpec
 */
PolicyControllerHubConfig.prototype['installSpec'] = undefined;

/**
 * Logs all denies and dry run failures.
 * @member {Boolean} logDeniesEnabled
 */
PolicyControllerHubConfig.prototype['logDeniesEnabled'] = undefined;

/**
 * @member {module:model/PolicyControllerMonitoringConfig} monitoring
 */
PolicyControllerHubConfig.prototype['monitoring'] = undefined;

/**
 * Enables the ability to mutate resources using Policy Controller.
 * @member {Boolean} mutationEnabled
 */
PolicyControllerHubConfig.prototype['mutationEnabled'] = undefined;

/**
 * @member {module:model/PolicyControllerPolicyContentSpec} policyContent
 */
PolicyControllerHubConfig.prototype['policyContent'] = undefined;

/**
 * Enables the ability to use Constraint Templates that reference to objects other than the object currently being evaluated.
 * @member {Boolean} referentialRulesEnabled
 */
PolicyControllerHubConfig.prototype['referentialRulesEnabled'] = undefined;





/**
 * Allowed values for the <code>installSpec</code> property.
 * @enum {String}
 * @readonly
 */
PolicyControllerHubConfig['InstallSpecEnum'] = {

    /**
     * value: "INSTALL_SPEC_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "INSTALL_SPEC_UNSPECIFIED",

    /**
     * value: "INSTALL_SPEC_NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "INSTALL_SPEC_NOT_INSTALLED",

    /**
     * value: "INSTALL_SPEC_ENABLED"
     * @const
     */
    "ENABLED": "INSTALL_SPEC_ENABLED",

    /**
     * value: "INSTALL_SPEC_SUSPENDED"
     * @const
     */
    "SUSPENDED": "INSTALL_SPEC_SUSPENDED",

    /**
     * value: "INSTALL_SPEC_DETACHED"
     * @const
     */
    "DETACHED": "INSTALL_SPEC_DETACHED"
};



export default PolicyControllerHubConfig;

