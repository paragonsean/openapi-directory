/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FleetObservabilityFeatureError from './FleetObservabilityFeatureError';

/**
 * The FleetObservabilityFleetObservabilityBaseFeatureState model module.
 * @module model/FleetObservabilityFleetObservabilityBaseFeatureState
 * @version v1alpha
 */
class FleetObservabilityFleetObservabilityBaseFeatureState {
    /**
     * Constructs a new <code>FleetObservabilityFleetObservabilityBaseFeatureState</code>.
     * Base state for fleet observability feature.
     * @alias module:model/FleetObservabilityFleetObservabilityBaseFeatureState
     */
    constructor() { 
        
        FleetObservabilityFleetObservabilityBaseFeatureState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FleetObservabilityFleetObservabilityBaseFeatureState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FleetObservabilityFleetObservabilityBaseFeatureState} obj Optional instance to populate.
     * @return {module:model/FleetObservabilityFleetObservabilityBaseFeatureState} The populated <code>FleetObservabilityFleetObservabilityBaseFeatureState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FleetObservabilityFleetObservabilityBaseFeatureState();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [FleetObservabilityFeatureError]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FleetObservabilityFleetObservabilityBaseFeatureState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FleetObservabilityFleetObservabilityBaseFeatureState</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                FleetObservabilityFeatureError.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * The high-level, machine-readable status of this Feature.
 * @member {module:model/FleetObservabilityFleetObservabilityBaseFeatureState.CodeEnum} code
 */
FleetObservabilityFleetObservabilityBaseFeatureState.prototype['code'] = undefined;

/**
 * Errors after reconciling the monitoring and logging feature if the code is not OK.
 * @member {Array.<module:model/FleetObservabilityFeatureError>} errors
 */
FleetObservabilityFleetObservabilityBaseFeatureState.prototype['errors'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
FleetObservabilityFleetObservabilityBaseFeatureState['CodeEnum'] = {

    /**
     * value: "CODE_UNSPECIFIED"
     * @const
     */
    "CODE_UNSPECIFIED": "CODE_UNSPECIFIED",

    /**
     * value: "OK"
     * @const
     */
    "OK": "OK",

    /**
     * value: "ERROR"
     * @const
     */
    "ERROR": "ERROR"
};



export default FleetObservabilityFleetObservabilityBaseFeatureState;

