/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementGroupVersionKind from './ConfigManagementGroupVersionKind';

/**
 * The ConfigManagementErrorResource model module.
 * @module model/ConfigManagementErrorResource
 * @version v1alpha
 */
class ConfigManagementErrorResource {
    /**
     * Constructs a new <code>ConfigManagementErrorResource</code>.
     * Model for a config file in the git repo with an associated Sync error
     * @alias module:model/ConfigManagementErrorResource
     */
    constructor() { 
        
        ConfigManagementErrorResource.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementErrorResource</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementErrorResource} obj Optional instance to populate.
     * @return {module:model/ConfigManagementErrorResource} The populated <code>ConfigManagementErrorResource</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementErrorResource();

            if (data.hasOwnProperty('resourceGvk')) {
                obj['resourceGvk'] = ConfigManagementGroupVersionKind.constructFromObject(data['resourceGvk']);
            }
            if (data.hasOwnProperty('resourceName')) {
                obj['resourceName'] = ApiClient.convertToType(data['resourceName'], 'String');
            }
            if (data.hasOwnProperty('resourceNamespace')) {
                obj['resourceNamespace'] = ApiClient.convertToType(data['resourceNamespace'], 'String');
            }
            if (data.hasOwnProperty('sourcePath')) {
                obj['sourcePath'] = ApiClient.convertToType(data['sourcePath'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementErrorResource</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementErrorResource</code>.
     */
    static validateJSON(data) {
        // validate the optional field `resourceGvk`
        if (data['resourceGvk']) { // data not null
          ConfigManagementGroupVersionKind.validateJSON(data['resourceGvk']);
        }
        // ensure the json data is a string
        if (data['resourceName'] && !(typeof data['resourceName'] === 'string' || data['resourceName'] instanceof String)) {
            throw new Error("Expected the field `resourceName` to be a primitive type in the JSON string but got " + data['resourceName']);
        }
        // ensure the json data is a string
        if (data['resourceNamespace'] && !(typeof data['resourceNamespace'] === 'string' || data['resourceNamespace'] instanceof String)) {
            throw new Error("Expected the field `resourceNamespace` to be a primitive type in the JSON string but got " + data['resourceNamespace']);
        }
        // ensure the json data is a string
        if (data['sourcePath'] && !(typeof data['sourcePath'] === 'string' || data['sourcePath'] instanceof String)) {
            throw new Error("Expected the field `sourcePath` to be a primitive type in the JSON string but got " + data['sourcePath']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigManagementGroupVersionKind} resourceGvk
 */
ConfigManagementErrorResource.prototype['resourceGvk'] = undefined;

/**
 * Metadata name of the resource that is causing an error
 * @member {String} resourceName
 */
ConfigManagementErrorResource.prototype['resourceName'] = undefined;

/**
 * Namespace of the resource that is causing an error
 * @member {String} resourceNamespace
 */
ConfigManagementErrorResource.prototype['resourceNamespace'] = undefined;

/**
 * Path in the git repo of the erroneous config
 * @member {String} sourcePath
 */
ConfigManagementErrorResource.prototype['sourcePath'] = undefined;






export default ConfigManagementErrorResource;

