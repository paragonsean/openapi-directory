/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigManagementGitConfig model module.
 * @module model/ConfigManagementGitConfig
 * @version v1alpha
 */
class ConfigManagementGitConfig {
    /**
     * Constructs a new <code>ConfigManagementGitConfig</code>.
     * Git repo configuration for a single cluster.
     * @alias module:model/ConfigManagementGitConfig
     */
    constructor() { 
        
        ConfigManagementGitConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementGitConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementGitConfig} obj Optional instance to populate.
     * @return {module:model/ConfigManagementGitConfig} The populated <code>ConfigManagementGitConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementGitConfig();

            if (data.hasOwnProperty('gcpServiceAccountEmail')) {
                obj['gcpServiceAccountEmail'] = ApiClient.convertToType(data['gcpServiceAccountEmail'], 'String');
            }
            if (data.hasOwnProperty('httpsProxy')) {
                obj['httpsProxy'] = ApiClient.convertToType(data['httpsProxy'], 'String');
            }
            if (data.hasOwnProperty('policyDir')) {
                obj['policyDir'] = ApiClient.convertToType(data['policyDir'], 'String');
            }
            if (data.hasOwnProperty('secretType')) {
                obj['secretType'] = ApiClient.convertToType(data['secretType'], 'String');
            }
            if (data.hasOwnProperty('syncBranch')) {
                obj['syncBranch'] = ApiClient.convertToType(data['syncBranch'], 'String');
            }
            if (data.hasOwnProperty('syncRepo')) {
                obj['syncRepo'] = ApiClient.convertToType(data['syncRepo'], 'String');
            }
            if (data.hasOwnProperty('syncRev')) {
                obj['syncRev'] = ApiClient.convertToType(data['syncRev'], 'String');
            }
            if (data.hasOwnProperty('syncWaitSecs')) {
                obj['syncWaitSecs'] = ApiClient.convertToType(data['syncWaitSecs'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementGitConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementGitConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['gcpServiceAccountEmail'] && !(typeof data['gcpServiceAccountEmail'] === 'string' || data['gcpServiceAccountEmail'] instanceof String)) {
            throw new Error("Expected the field `gcpServiceAccountEmail` to be a primitive type in the JSON string but got " + data['gcpServiceAccountEmail']);
        }
        // ensure the json data is a string
        if (data['httpsProxy'] && !(typeof data['httpsProxy'] === 'string' || data['httpsProxy'] instanceof String)) {
            throw new Error("Expected the field `httpsProxy` to be a primitive type in the JSON string but got " + data['httpsProxy']);
        }
        // ensure the json data is a string
        if (data['policyDir'] && !(typeof data['policyDir'] === 'string' || data['policyDir'] instanceof String)) {
            throw new Error("Expected the field `policyDir` to be a primitive type in the JSON string but got " + data['policyDir']);
        }
        // ensure the json data is a string
        if (data['secretType'] && !(typeof data['secretType'] === 'string' || data['secretType'] instanceof String)) {
            throw new Error("Expected the field `secretType` to be a primitive type in the JSON string but got " + data['secretType']);
        }
        // ensure the json data is a string
        if (data['syncBranch'] && !(typeof data['syncBranch'] === 'string' || data['syncBranch'] instanceof String)) {
            throw new Error("Expected the field `syncBranch` to be a primitive type in the JSON string but got " + data['syncBranch']);
        }
        // ensure the json data is a string
        if (data['syncRepo'] && !(typeof data['syncRepo'] === 'string' || data['syncRepo'] instanceof String)) {
            throw new Error("Expected the field `syncRepo` to be a primitive type in the JSON string but got " + data['syncRepo']);
        }
        // ensure the json data is a string
        if (data['syncRev'] && !(typeof data['syncRev'] === 'string' || data['syncRev'] instanceof String)) {
            throw new Error("Expected the field `syncRev` to be a primitive type in the JSON string but got " + data['syncRev']);
        }
        // ensure the json data is a string
        if (data['syncWaitSecs'] && !(typeof data['syncWaitSecs'] === 'string' || data['syncWaitSecs'] instanceof String)) {
            throw new Error("Expected the field `syncWaitSecs` to be a primitive type in the JSON string but got " + data['syncWaitSecs']);
        }

        return true;
    }


}



/**
 * The Google Cloud Service Account Email used for auth when secret_type is gcpServiceAccount.
 * @member {String} gcpServiceAccountEmail
 */
ConfigManagementGitConfig.prototype['gcpServiceAccountEmail'] = undefined;

/**
 * URL for the HTTPS proxy to be used when communicating with the Git repo.
 * @member {String} httpsProxy
 */
ConfigManagementGitConfig.prototype['httpsProxy'] = undefined;

/**
 * The path within the Git repository that represents the top level of the repo to sync. Default: the root directory of the repository.
 * @member {String} policyDir
 */
ConfigManagementGitConfig.prototype['policyDir'] = undefined;

/**
 * Type of secret configured for access to the Git repo. Must be one of ssh, cookiefile, gcenode, token, gcpserviceaccount or none. The validation of this is case-sensitive. Required.
 * @member {String} secretType
 */
ConfigManagementGitConfig.prototype['secretType'] = undefined;

/**
 * The branch of the repository to sync from. Default: master.
 * @member {String} syncBranch
 */
ConfigManagementGitConfig.prototype['syncBranch'] = undefined;

/**
 * The URL of the Git repository to use as the source of truth.
 * @member {String} syncRepo
 */
ConfigManagementGitConfig.prototype['syncRepo'] = undefined;

/**
 * Git revision (tag or hash) to check out. Default HEAD.
 * @member {String} syncRev
 */
ConfigManagementGitConfig.prototype['syncRev'] = undefined;

/**
 * Period in seconds between consecutive syncs. Default: 15.
 * @member {String} syncWaitSecs
 */
ConfigManagementGitConfig.prototype['syncWaitSecs'] = undefined;






export default ConfigManagementGitConfig;

