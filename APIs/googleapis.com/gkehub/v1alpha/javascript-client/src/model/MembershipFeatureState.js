/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AppDevExperienceFeatureState from './AppDevExperienceFeatureState';
import ClusterUpgradeMembershipState from './ClusterUpgradeMembershipState';
import ConfigManagementMembershipState from './ConfigManagementMembershipState';
import FeatureState from './FeatureState';
import IdentityServiceMembershipState from './IdentityServiceMembershipState';
import MeteringMembershipState from './MeteringMembershipState';
import PolicyControllerMembershipState from './PolicyControllerMembershipState';
import ServiceMeshMembershipState from './ServiceMeshMembershipState';

/**
 * The MembershipFeatureState model module.
 * @module model/MembershipFeatureState
 * @version v1alpha
 */
class MembershipFeatureState {
    /**
     * Constructs a new <code>MembershipFeatureState</code>.
     * MembershipFeatureState contains Feature status information for a single Membership.
     * @alias module:model/MembershipFeatureState
     */
    constructor() { 
        
        MembershipFeatureState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MembershipFeatureState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MembershipFeatureState} obj Optional instance to populate.
     * @return {module:model/MembershipFeatureState} The populated <code>MembershipFeatureState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MembershipFeatureState();

            if (data.hasOwnProperty('appdevexperience')) {
                obj['appdevexperience'] = AppDevExperienceFeatureState.constructFromObject(data['appdevexperience']);
            }
            if (data.hasOwnProperty('clusterupgrade')) {
                obj['clusterupgrade'] = ClusterUpgradeMembershipState.constructFromObject(data['clusterupgrade']);
            }
            if (data.hasOwnProperty('configmanagement')) {
                obj['configmanagement'] = ConfigManagementMembershipState.constructFromObject(data['configmanagement']);
            }
            if (data.hasOwnProperty('fleetobservability')) {
                obj['fleetobservability'] = ApiClient.convertToType(data['fleetobservability'], Object);
            }
            if (data.hasOwnProperty('identityservice')) {
                obj['identityservice'] = IdentityServiceMembershipState.constructFromObject(data['identityservice']);
            }
            if (data.hasOwnProperty('metering')) {
                obj['metering'] = MeteringMembershipState.constructFromObject(data['metering']);
            }
            if (data.hasOwnProperty('namespaceactuation')) {
                obj['namespaceactuation'] = ApiClient.convertToType(data['namespaceactuation'], Object);
            }
            if (data.hasOwnProperty('policycontroller')) {
                obj['policycontroller'] = PolicyControllerMembershipState.constructFromObject(data['policycontroller']);
            }
            if (data.hasOwnProperty('servicemesh')) {
                obj['servicemesh'] = ServiceMeshMembershipState.constructFromObject(data['servicemesh']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = FeatureState.constructFromObject(data['state']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MembershipFeatureState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MembershipFeatureState</code>.
     */
    static validateJSON(data) {
        // validate the optional field `appdevexperience`
        if (data['appdevexperience']) { // data not null
          AppDevExperienceFeatureState.validateJSON(data['appdevexperience']);
        }
        // validate the optional field `clusterupgrade`
        if (data['clusterupgrade']) { // data not null
          ClusterUpgradeMembershipState.validateJSON(data['clusterupgrade']);
        }
        // validate the optional field `configmanagement`
        if (data['configmanagement']) { // data not null
          ConfigManagementMembershipState.validateJSON(data['configmanagement']);
        }
        // validate the optional field `identityservice`
        if (data['identityservice']) { // data not null
          IdentityServiceMembershipState.validateJSON(data['identityservice']);
        }
        // validate the optional field `metering`
        if (data['metering']) { // data not null
          MeteringMembershipState.validateJSON(data['metering']);
        }
        // validate the optional field `policycontroller`
        if (data['policycontroller']) { // data not null
          PolicyControllerMembershipState.validateJSON(data['policycontroller']);
        }
        // validate the optional field `servicemesh`
        if (data['servicemesh']) { // data not null
          ServiceMeshMembershipState.validateJSON(data['servicemesh']);
        }
        // validate the optional field `state`
        if (data['state']) { // data not null
          FeatureState.validateJSON(data['state']);
        }

        return true;
    }


}



/**
 * @member {module:model/AppDevExperienceFeatureState} appdevexperience
 */
MembershipFeatureState.prototype['appdevexperience'] = undefined;

/**
 * @member {module:model/ClusterUpgradeMembershipState} clusterupgrade
 */
MembershipFeatureState.prototype['clusterupgrade'] = undefined;

/**
 * @member {module:model/ConfigManagementMembershipState} configmanagement
 */
MembershipFeatureState.prototype['configmanagement'] = undefined;

/**
 * **FleetObservability**: Membership-specific Feature state for fleetobservability.
 * @member {Object} fleetobservability
 */
MembershipFeatureState.prototype['fleetobservability'] = undefined;

/**
 * @member {module:model/IdentityServiceMembershipState} identityservice
 */
MembershipFeatureState.prototype['identityservice'] = undefined;

/**
 * @member {module:model/MeteringMembershipState} metering
 */
MembershipFeatureState.prototype['metering'] = undefined;

/**
 * **Namespace Actuation**: An empty state left as an example membership-specific Feature state.
 * @member {Object} namespaceactuation
 */
MembershipFeatureState.prototype['namespaceactuation'] = undefined;

/**
 * @member {module:model/PolicyControllerMembershipState} policycontroller
 */
MembershipFeatureState.prototype['policycontroller'] = undefined;

/**
 * @member {module:model/ServiceMeshMembershipState} servicemesh
 */
MembershipFeatureState.prototype['servicemesh'] = undefined;

/**
 * @member {module:model/FeatureState} state
 */
MembershipFeatureState.prototype['state'] = undefined;






export default MembershipFeatureState;

