/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ConfigManagementConfigSyncDeploymentState from './ConfigManagementConfigSyncDeploymentState';
import ConfigManagementConfigSyncError from './ConfigManagementConfigSyncError';
import ConfigManagementConfigSyncVersion from './ConfigManagementConfigSyncVersion';
import ConfigManagementSyncState from './ConfigManagementSyncState';

/**
 * The ConfigManagementConfigSyncState model module.
 * @module model/ConfigManagementConfigSyncState
 * @version v1alpha
 */
class ConfigManagementConfigSyncState {
    /**
     * Constructs a new <code>ConfigManagementConfigSyncState</code>.
     * State information for ConfigSync
     * @alias module:model/ConfigManagementConfigSyncState
     */
    constructor() { 
        
        ConfigManagementConfigSyncState.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigManagementConfigSyncState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigManagementConfigSyncState} obj Optional instance to populate.
     * @return {module:model/ConfigManagementConfigSyncState} The populated <code>ConfigManagementConfigSyncState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigManagementConfigSyncState();

            if (data.hasOwnProperty('deploymentState')) {
                obj['deploymentState'] = ConfigManagementConfigSyncDeploymentState.constructFromObject(data['deploymentState']);
            }
            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ConfigManagementConfigSyncError]);
            }
            if (data.hasOwnProperty('reposyncCrd')) {
                obj['reposyncCrd'] = ApiClient.convertToType(data['reposyncCrd'], 'String');
            }
            if (data.hasOwnProperty('rootsyncCrd')) {
                obj['rootsyncCrd'] = ApiClient.convertToType(data['rootsyncCrd'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('syncState')) {
                obj['syncState'] = ConfigManagementSyncState.constructFromObject(data['syncState']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ConfigManagementConfigSyncVersion.constructFromObject(data['version']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigManagementConfigSyncState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigManagementConfigSyncState</code>.
     */
    static validateJSON(data) {
        // validate the optional field `deploymentState`
        if (data['deploymentState']) { // data not null
          ConfigManagementConfigSyncDeploymentState.validateJSON(data['deploymentState']);
        }
        if (data['errors']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['errors'])) {
                throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
            }
            // validate the optional field `errors` (array)
            for (const item of data['errors']) {
                ConfigManagementConfigSyncError.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reposyncCrd'] && !(typeof data['reposyncCrd'] === 'string' || data['reposyncCrd'] instanceof String)) {
            throw new Error("Expected the field `reposyncCrd` to be a primitive type in the JSON string but got " + data['reposyncCrd']);
        }
        // ensure the json data is a string
        if (data['rootsyncCrd'] && !(typeof data['rootsyncCrd'] === 'string' || data['rootsyncCrd'] instanceof String)) {
            throw new Error("Expected the field `rootsyncCrd` to be a primitive type in the JSON string but got " + data['rootsyncCrd']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `syncState`
        if (data['syncState']) { // data not null
          ConfigManagementSyncState.validateJSON(data['syncState']);
        }
        // validate the optional field `version`
        if (data['version']) { // data not null
          ConfigManagementConfigSyncVersion.validateJSON(data['version']);
        }

        return true;
    }


}



/**
 * @member {module:model/ConfigManagementConfigSyncDeploymentState} deploymentState
 */
ConfigManagementConfigSyncState.prototype['deploymentState'] = undefined;

/**
 * Errors pertaining to the installation of Config Sync.
 * @member {Array.<module:model/ConfigManagementConfigSyncError>} errors
 */
ConfigManagementConfigSyncState.prototype['errors'] = undefined;

/**
 * The state of the Reposync CRD
 * @member {module:model/ConfigManagementConfigSyncState.ReposyncCrdEnum} reposyncCrd
 */
ConfigManagementConfigSyncState.prototype['reposyncCrd'] = undefined;

/**
 * The state of the RootSync CRD
 * @member {module:model/ConfigManagementConfigSyncState.RootsyncCrdEnum} rootsyncCrd
 */
ConfigManagementConfigSyncState.prototype['rootsyncCrd'] = undefined;

/**
 * The state of CS This field summarizes the other fields in this message.
 * @member {module:model/ConfigManagementConfigSyncState.StateEnum} state
 */
ConfigManagementConfigSyncState.prototype['state'] = undefined;

/**
 * @member {module:model/ConfigManagementSyncState} syncState
 */
ConfigManagementConfigSyncState.prototype['syncState'] = undefined;

/**
 * @member {module:model/ConfigManagementConfigSyncVersion} version
 */
ConfigManagementConfigSyncState.prototype['version'] = undefined;





/**
 * Allowed values for the <code>reposyncCrd</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncState['ReposyncCrdEnum'] = {

    /**
     * value: "CRD_STATE_UNSPECIFIED"
     * @const
     */
    "CRD_STATE_UNSPECIFIED": "CRD_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "TERMINATING"
     * @const
     */
    "TERMINATING": "TERMINATING",

    /**
     * value: "INSTALLING"
     * @const
     */
    "INSTALLING": "INSTALLING"
};


/**
 * Allowed values for the <code>rootsyncCrd</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncState['RootsyncCrdEnum'] = {

    /**
     * value: "CRD_STATE_UNSPECIFIED"
     * @const
     */
    "CRD_STATE_UNSPECIFIED": "CRD_STATE_UNSPECIFIED",

    /**
     * value: "NOT_INSTALLED"
     * @const
     */
    "NOT_INSTALLED": "NOT_INSTALLED",

    /**
     * value: "INSTALLED"
     * @const
     */
    "INSTALLED": "INSTALLED",

    /**
     * value: "TERMINATING"
     * @const
     */
    "TERMINATING": "TERMINATING",

    /**
     * value: "INSTALLING"
     * @const
     */
    "INSTALLING": "INSTALLING"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ConfigManagementConfigSyncState['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "CONFIG_SYNC_NOT_INSTALLED"
     * @const
     */
    "CONFIG_SYNC_NOT_INSTALLED": "CONFIG_SYNC_NOT_INSTALLED",

    /**
     * value: "CONFIG_SYNC_INSTALLED"
     * @const
     */
    "CONFIG_SYNC_INSTALLED": "CONFIG_SYNC_INSTALLED",

    /**
     * value: "CONFIG_SYNC_ERROR"
     * @const
     */
    "CONFIG_SYNC_ERROR": "CONFIG_SYNC_ERROR",

    /**
     * value: "CONFIG_SYNC_PENDING"
     * @const
     */
    "CONFIG_SYNC_PENDING": "CONFIG_SYNC_PENDING"
};



export default ConfigManagementConfigSyncState;

