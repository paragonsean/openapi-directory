/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ClusterUpgradeGKEUpgradeOverride from './ClusterUpgradeGKEUpgradeOverride';
import ClusterUpgradePostConditions from './ClusterUpgradePostConditions';

/**
 * The ClusterUpgradeScopeSpec model module.
 * @module model/ClusterUpgradeScopeSpec
 * @version v1alpha
 */
class ClusterUpgradeScopeSpec {
    /**
     * Constructs a new <code>ClusterUpgradeScopeSpec</code>.
     * **ClusterUpgrade**: The configuration for the scope-level ClusterUpgrade feature.
     * @alias module:model/ClusterUpgradeScopeSpec
     */
    constructor() { 
        
        ClusterUpgradeScopeSpec.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ClusterUpgradeScopeSpec</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ClusterUpgradeScopeSpec} obj Optional instance to populate.
     * @return {module:model/ClusterUpgradeScopeSpec} The populated <code>ClusterUpgradeScopeSpec</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ClusterUpgradeScopeSpec();

            if (data.hasOwnProperty('gkeUpgradeOverrides')) {
                obj['gkeUpgradeOverrides'] = ApiClient.convertToType(data['gkeUpgradeOverrides'], [ClusterUpgradeGKEUpgradeOverride]);
            }
            if (data.hasOwnProperty('postConditions')) {
                obj['postConditions'] = ClusterUpgradePostConditions.constructFromObject(data['postConditions']);
            }
            if (data.hasOwnProperty('upstreamScopes')) {
                obj['upstreamScopes'] = ApiClient.convertToType(data['upstreamScopes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ClusterUpgradeScopeSpec</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ClusterUpgradeScopeSpec</code>.
     */
    static validateJSON(data) {
        if (data['gkeUpgradeOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gkeUpgradeOverrides'])) {
                throw new Error("Expected the field `gkeUpgradeOverrides` to be an array in the JSON data but got " + data['gkeUpgradeOverrides']);
            }
            // validate the optional field `gkeUpgradeOverrides` (array)
            for (const item of data['gkeUpgradeOverrides']) {
                ClusterUpgradeGKEUpgradeOverride.validateJSON(item);
            };
        }
        // validate the optional field `postConditions`
        if (data['postConditions']) { // data not null
          ClusterUpgradePostConditions.validateJSON(data['postConditions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['upstreamScopes'])) {
            throw new Error("Expected the field `upstreamScopes` to be an array in the JSON data but got " + data['upstreamScopes']);
        }

        return true;
    }


}



/**
 * Allow users to override some properties of each GKE upgrade.
 * @member {Array.<module:model/ClusterUpgradeGKEUpgradeOverride>} gkeUpgradeOverrides
 */
ClusterUpgradeScopeSpec.prototype['gkeUpgradeOverrides'] = undefined;

/**
 * @member {module:model/ClusterUpgradePostConditions} postConditions
 */
ClusterUpgradeScopeSpec.prototype['postConditions'] = undefined;

/**
 * This scope consumes upgrades that have COMPLETE status code in the upstream scopes. See UpgradeStatus.Code for code definitions. The scope name should be in the form: `projects/{p}/locations/global/scopes/{s}` Where {p} is the project, {s} is a valid Scope in this project. {p} WILL match the Feature's project. This is defined as repeated for future proof reasons. Initial implementation will enforce at most one upstream scope.
 * @member {Array.<String>} upstreamScopes
 */
ClusterUpgradeScopeSpec.prototype['upstreamScopes'] = undefined;






export default ClusterUpgradeScopeSpec;

