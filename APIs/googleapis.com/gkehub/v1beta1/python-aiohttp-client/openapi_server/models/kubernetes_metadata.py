# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KubernetesMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kubernetes_api_server_version: str=None, memory_mb: int=None, node_count: int=None, node_provider_id: str=None, update_time: str=None, vcpu_count: int=None):
        """KubernetesMetadata - a model defined in OpenAPI

        :param kubernetes_api_server_version: The kubernetes_api_server_version of this KubernetesMetadata.
        :param memory_mb: The memory_mb of this KubernetesMetadata.
        :param node_count: The node_count of this KubernetesMetadata.
        :param node_provider_id: The node_provider_id of this KubernetesMetadata.
        :param update_time: The update_time of this KubernetesMetadata.
        :param vcpu_count: The vcpu_count of this KubernetesMetadata.
        """
        self.openapi_types = {
            'kubernetes_api_server_version': str,
            'memory_mb': int,
            'node_count': int,
            'node_provider_id': str,
            'update_time': str,
            'vcpu_count': int
        }

        self.attribute_map = {
            'kubernetes_api_server_version': 'kubernetesApiServerVersion',
            'memory_mb': 'memoryMb',
            'node_count': 'nodeCount',
            'node_provider_id': 'nodeProviderId',
            'update_time': 'updateTime',
            'vcpu_count': 'vcpuCount'
        }

        self._kubernetes_api_server_version = kubernetes_api_server_version
        self._memory_mb = memory_mb
        self._node_count = node_count
        self._node_provider_id = node_provider_id
        self._update_time = update_time
        self._vcpu_count = vcpu_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KubernetesMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KubernetesMetadata of this KubernetesMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kubernetes_api_server_version(self):
        """Gets the kubernetes_api_server_version of this KubernetesMetadata.

        Output only. Kubernetes API server version string as reported by '/version'.

        :return: The kubernetes_api_server_version of this KubernetesMetadata.
        :rtype: str
        """
        return self._kubernetes_api_server_version

    @kubernetes_api_server_version.setter
    def kubernetes_api_server_version(self, kubernetes_api_server_version):
        """Sets the kubernetes_api_server_version of this KubernetesMetadata.

        Output only. Kubernetes API server version string as reported by '/version'.

        :param kubernetes_api_server_version: The kubernetes_api_server_version of this KubernetesMetadata.
        :type kubernetes_api_server_version: str
        """

        self._kubernetes_api_server_version = kubernetes_api_server_version

    @property
    def memory_mb(self):
        """Gets the memory_mb of this KubernetesMetadata.

        Output only. The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.

        :return: The memory_mb of this KubernetesMetadata.
        :rtype: int
        """
        return self._memory_mb

    @memory_mb.setter
    def memory_mb(self, memory_mb):
        """Sets the memory_mb of this KubernetesMetadata.

        Output only. The total memory capacity as reported by the sum of all Kubernetes nodes resources, defined in MB.

        :param memory_mb: The memory_mb of this KubernetesMetadata.
        :type memory_mb: int
        """

        self._memory_mb = memory_mb

    @property
    def node_count(self):
        """Gets the node_count of this KubernetesMetadata.

        Output only. Node count as reported by Kubernetes nodes resources.

        :return: The node_count of this KubernetesMetadata.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this KubernetesMetadata.

        Output only. Node count as reported by Kubernetes nodes resources.

        :param node_count: The node_count of this KubernetesMetadata.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def node_provider_id(self):
        """Gets the node_provider_id of this KubernetesMetadata.

        Output only. Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.

        :return: The node_provider_id of this KubernetesMetadata.
        :rtype: str
        """
        return self._node_provider_id

    @node_provider_id.setter
    def node_provider_id(self, node_provider_id):
        """Sets the node_provider_id of this KubernetesMetadata.

        Output only. Node providerID as reported by the first node in the list of nodes on the Kubernetes endpoint. On Kubernetes platforms that support zero-node clusters (like GKE-on-GCP), the node_count will be zero and the node_provider_id will be empty.

        :param node_provider_id: The node_provider_id of this KubernetesMetadata.
        :type node_provider_id: str
        """

        self._node_provider_id = node_provider_id

    @property
    def update_time(self):
        """Gets the update_time of this KubernetesMetadata.

        Output only. The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.

        :return: The update_time of this KubernetesMetadata.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this KubernetesMetadata.

        Output only. The time at which these details were last updated. This update_time is different from the Membership-level update_time since EndpointDetails are updated internally for API consumers.

        :param update_time: The update_time of this KubernetesMetadata.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def vcpu_count(self):
        """Gets the vcpu_count of this KubernetesMetadata.

        Output only. vCPU count as reported by Kubernetes nodes resources.

        :return: The vcpu_count of this KubernetesMetadata.
        :rtype: int
        """
        return self._vcpu_count

    @vcpu_count.setter
    def vcpu_count(self, vcpu_count):
        """Sets the vcpu_count of this KubernetesMetadata.

        Output only. vCPU count as reported by Kubernetes nodes resources.

        :param vcpu_count: The vcpu_count of this KubernetesMetadata.
        :type vcpu_count: int
        """

        self._vcpu_count = vcpu_count
