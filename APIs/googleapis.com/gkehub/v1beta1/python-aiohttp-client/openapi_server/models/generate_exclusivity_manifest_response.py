# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateExclusivityManifestResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cr_manifest: str=None, crd_manifest: str=None):
        """GenerateExclusivityManifestResponse - a model defined in OpenAPI

        :param cr_manifest: The cr_manifest of this GenerateExclusivityManifestResponse.
        :param crd_manifest: The crd_manifest of this GenerateExclusivityManifestResponse.
        """
        self.openapi_types = {
            'cr_manifest': str,
            'crd_manifest': str
        }

        self.attribute_map = {
            'cr_manifest': 'crManifest',
            'crd_manifest': 'crdManifest'
        }

        self._cr_manifest = cr_manifest
        self._crd_manifest = crd_manifest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateExclusivityManifestResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateExclusivityManifestResponse of this GenerateExclusivityManifestResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cr_manifest(self):
        """Gets the cr_manifest of this GenerateExclusivityManifestResponse.

        The YAML manifest of the membership CR to apply if a new version of the CR is available. Empty if no update needs to be applied.

        :return: The cr_manifest of this GenerateExclusivityManifestResponse.
        :rtype: str
        """
        return self._cr_manifest

    @cr_manifest.setter
    def cr_manifest(self, cr_manifest):
        """Sets the cr_manifest of this GenerateExclusivityManifestResponse.

        The YAML manifest of the membership CR to apply if a new version of the CR is available. Empty if no update needs to be applied.

        :param cr_manifest: The cr_manifest of this GenerateExclusivityManifestResponse.
        :type cr_manifest: str
        """

        self._cr_manifest = cr_manifest

    @property
    def crd_manifest(self):
        """Gets the crd_manifest of this GenerateExclusivityManifestResponse.

        The YAML manifest of the membership CRD to apply if a newer version of the CRD is available. Empty if no update needs to be applied.

        :return: The crd_manifest of this GenerateExclusivityManifestResponse.
        :rtype: str
        """
        return self._crd_manifest

    @crd_manifest.setter
    def crd_manifest(self, crd_manifest):
        """Sets the crd_manifest of this GenerateExclusivityManifestResponse.

        The YAML manifest of the membership CRD to apply if a newer version of the CRD is available. Empty if no update needs to be applied.

        :param crd_manifest: The crd_manifest of this GenerateExclusivityManifestResponse.
        :type crd_manifest: str
        """

        self._crd_manifest = crd_manifest
