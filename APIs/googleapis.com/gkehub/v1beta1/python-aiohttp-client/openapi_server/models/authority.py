# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Authority(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identity_provider: str=None, issuer: str=None, oidc_jwks: str=None, workload_identity_pool: str=None):
        """Authority - a model defined in OpenAPI

        :param identity_provider: The identity_provider of this Authority.
        :param issuer: The issuer of this Authority.
        :param oidc_jwks: The oidc_jwks of this Authority.
        :param workload_identity_pool: The workload_identity_pool of this Authority.
        """
        self.openapi_types = {
            'identity_provider': str,
            'issuer': str,
            'oidc_jwks': str,
            'workload_identity_pool': str
        }

        self.attribute_map = {
            'identity_provider': 'identityProvider',
            'issuer': 'issuer',
            'oidc_jwks': 'oidcJwks',
            'workload_identity_pool': 'workloadIdentityPool'
        }

        self._identity_provider = identity_provider
        self._issuer = issuer
        self._oidc_jwks = oidc_jwks
        self._workload_identity_pool = workload_identity_pool

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Authority':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Authority of this Authority.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identity_provider(self):
        """Gets the identity_provider of this Authority.

        Output only. An identity provider that reflects the `issuer` in the workload identity pool.

        :return: The identity_provider of this Authority.
        :rtype: str
        """
        return self._identity_provider

    @identity_provider.setter
    def identity_provider(self, identity_provider):
        """Sets the identity_provider of this Authority.

        Output only. An identity provider that reflects the `issuer` in the workload identity pool.

        :param identity_provider: The identity_provider of this Authority.
        :type identity_provider: str
        """

        self._identity_provider = identity_provider

    @property
    def issuer(self):
        """Gets the issuer of this Authority.

        Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).

        :return: The issuer of this Authority.
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this Authority.

        Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).

        :param issuer: The issuer of this Authority.
        :type issuer: str
        """

        self._issuer = issuer

    @property
    def oidc_jwks(self):
        """Gets the oidc_jwks of this Authority.

        Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.

        :return: The oidc_jwks of this Authority.
        :rtype: str
        """
        return self._oidc_jwks

    @oidc_jwks.setter
    def oidc_jwks(self, oidc_jwks):
        """Sets the oidc_jwks of this Authority.

        Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.

        :param oidc_jwks: The oidc_jwks of this Authority.
        :type oidc_jwks: str
        """

        self._oidc_jwks = oidc_jwks

    @property
    def workload_identity_pool(self):
        """Gets the workload_identity_pool of this Authority.

        Output only. The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.

        :return: The workload_identity_pool of this Authority.
        :rtype: str
        """
        return self._workload_identity_pool

    @workload_identity_pool.setter
    def workload_identity_pool(self, workload_identity_pool):
        """Sets the workload_identity_pool of this Authority.

        Output only. The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.

        :param workload_identity_pool: The workload_identity_pool of this Authority.
        :type workload_identity_pool: str
        """

        self._workload_identity_pool = workload_identity_pool
