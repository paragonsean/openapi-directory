/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Authority model module.
 * @module model/Authority
 * @version v1beta1
 */
class Authority {
    /**
     * Constructs a new <code>Authority</code>.
     * Authority encodes how Google will recognize identities from this Membership. See the workload identity documentation for more details: https://cloud.google.com/kubernetes-engine/docs/how-to/workload-identity
     * @alias module:model/Authority
     */
    constructor() { 
        
        Authority.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Authority</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Authority} obj Optional instance to populate.
     * @return {module:model/Authority} The populated <code>Authority</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Authority();

            if (data.hasOwnProperty('identityProvider')) {
                obj['identityProvider'] = ApiClient.convertToType(data['identityProvider'], 'String');
            }
            if (data.hasOwnProperty('issuer')) {
                obj['issuer'] = ApiClient.convertToType(data['issuer'], 'String');
            }
            if (data.hasOwnProperty('oidcJwks')) {
                obj['oidcJwks'] = ApiClient.convertToType(data['oidcJwks'], 'Blob');
            }
            if (data.hasOwnProperty('workloadIdentityPool')) {
                obj['workloadIdentityPool'] = ApiClient.convertToType(data['workloadIdentityPool'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Authority</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Authority</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['identityProvider'] && !(typeof data['identityProvider'] === 'string' || data['identityProvider'] instanceof String)) {
            throw new Error("Expected the field `identityProvider` to be a primitive type in the JSON string but got " + data['identityProvider']);
        }
        // ensure the json data is a string
        if (data['issuer'] && !(typeof data['issuer'] === 'string' || data['issuer'] instanceof String)) {
            throw new Error("Expected the field `issuer` to be a primitive type in the JSON string but got " + data['issuer']);
        }
        // ensure the json data is a string
        if (data['workloadIdentityPool'] && !(typeof data['workloadIdentityPool'] === 'string' || data['workloadIdentityPool'] instanceof String)) {
            throw new Error("Expected the field `workloadIdentityPool` to be a primitive type in the JSON string but got " + data['workloadIdentityPool']);
        }

        return true;
    }


}



/**
 * Output only. An identity provider that reflects the `issuer` in the workload identity pool.
 * @member {String} identityProvider
 */
Authority.prototype['identityProvider'] = undefined;

/**
 * Optional. A JSON Web Token (JWT) issuer URI. `issuer` must start with `https://` and be a valid URL with length <2000 characters. If set, then Google will allow valid OIDC tokens from this issuer to authenticate within the workload_identity_pool. OIDC discovery will be performed on this URI to validate tokens from the issuer. Clearing `issuer` disables Workload Identity. `issuer` cannot be directly modified; it must be cleared (and Workload Identity disabled) before using a new issuer (and re-enabling Workload Identity).
 * @member {String} issuer
 */
Authority.prototype['issuer'] = undefined;

/**
 * Optional. OIDC verification keys for this Membership in JWKS format (RFC 7517). When this field is set, OIDC discovery will NOT be performed on `issuer`, and instead OIDC tokens will be validated using this field.
 * @member {Blob} oidcJwks
 */
Authority.prototype['oidcJwks'] = undefined;

/**
 * Output only. The name of the workload identity pool in which `issuer` will be recognized. There is a single Workload Identity Pool per Hub that is shared between all Memberships that belong to that Hub. For a Hub hosted in {PROJECT_ID}, the workload pool format is `{PROJECT_ID}.hub.id.goog`, although this is subject to change in newer versions of this API.
 * @member {String} workloadIdentityPool
 */
Authority.prototype['workloadIdentityPool'] = undefined;






export default Authority;

