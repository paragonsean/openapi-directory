/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateExclusivityManifestResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateExclusivityManifestResponse::OAIGenerateExclusivityManifestResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateExclusivityManifestResponse::OAIGenerateExclusivityManifestResponse() {
    this->initializeModel();
}

OAIGenerateExclusivityManifestResponse::~OAIGenerateExclusivityManifestResponse() {}

void OAIGenerateExclusivityManifestResponse::initializeModel() {

    m_cr_manifest_isSet = false;
    m_cr_manifest_isValid = false;

    m_crd_manifest_isSet = false;
    m_crd_manifest_isValid = false;
}

void OAIGenerateExclusivityManifestResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateExclusivityManifestResponse::fromJsonObject(QJsonObject json) {

    m_cr_manifest_isValid = ::OpenAPI::fromJsonValue(m_cr_manifest, json[QString("crManifest")]);
    m_cr_manifest_isSet = !json[QString("crManifest")].isNull() && m_cr_manifest_isValid;

    m_crd_manifest_isValid = ::OpenAPI::fromJsonValue(m_crd_manifest, json[QString("crdManifest")]);
    m_crd_manifest_isSet = !json[QString("crdManifest")].isNull() && m_crd_manifest_isValid;
}

QString OAIGenerateExclusivityManifestResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateExclusivityManifestResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cr_manifest_isSet) {
        obj.insert(QString("crManifest"), ::OpenAPI::toJsonValue(m_cr_manifest));
    }
    if (m_crd_manifest_isSet) {
        obj.insert(QString("crdManifest"), ::OpenAPI::toJsonValue(m_crd_manifest));
    }
    return obj;
}

QString OAIGenerateExclusivityManifestResponse::getCrManifest() const {
    return m_cr_manifest;
}
void OAIGenerateExclusivityManifestResponse::setCrManifest(const QString &cr_manifest) {
    m_cr_manifest = cr_manifest;
    m_cr_manifest_isSet = true;
}

bool OAIGenerateExclusivityManifestResponse::is_cr_manifest_Set() const{
    return m_cr_manifest_isSet;
}

bool OAIGenerateExclusivityManifestResponse::is_cr_manifest_Valid() const{
    return m_cr_manifest_isValid;
}

QString OAIGenerateExclusivityManifestResponse::getCrdManifest() const {
    return m_crd_manifest;
}
void OAIGenerateExclusivityManifestResponse::setCrdManifest(const QString &crd_manifest) {
    m_crd_manifest = crd_manifest;
    m_crd_manifest_isSet = true;
}

bool OAIGenerateExclusivityManifestResponse::is_crd_manifest_Set() const{
    return m_crd_manifest_isSet;
}

bool OAIGenerateExclusivityManifestResponse::is_crd_manifest_Valid() const{
    return m_crd_manifest_isValid;
}

bool OAIGenerateExclusivityManifestResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cr_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crd_manifest_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateExclusivityManifestResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
