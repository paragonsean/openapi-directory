/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMembershipEndpoint.h
 *
 * MembershipEndpoint contains information needed to contact a Kubernetes API, endpoint and any additional Kubernetes metadata.
 */

#ifndef OAIMembershipEndpoint_H
#define OAIMembershipEndpoint_H

#include <QJsonObject>

#include "OAIApplianceCluster.h"
#include "OAIEdgeCluster.h"
#include "OAIGkeCluster.h"
#include "OAIKubernetesMetadata.h"
#include "OAIKubernetesResource.h"
#include "OAIMultiCloudCluster.h"
#include "OAIOnPremCluster.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIApplianceCluster;
class OAIEdgeCluster;
class OAIGkeCluster;
class OAIKubernetesMetadata;
class OAIKubernetesResource;
class OAIMultiCloudCluster;
class OAIOnPremCluster;

class OAIMembershipEndpoint : public OAIObject {
public:
    OAIMembershipEndpoint();
    OAIMembershipEndpoint(QString json);
    ~OAIMembershipEndpoint() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIApplianceCluster getApplianceCluster() const;
    void setApplianceCluster(const OAIApplianceCluster &appliance_cluster);
    bool is_appliance_cluster_Set() const;
    bool is_appliance_cluster_Valid() const;

    OAIEdgeCluster getEdgeCluster() const;
    void setEdgeCluster(const OAIEdgeCluster &edge_cluster);
    bool is_edge_cluster_Set() const;
    bool is_edge_cluster_Valid() const;

    OAIGkeCluster getGkeCluster() const;
    void setGkeCluster(const OAIGkeCluster &gke_cluster);
    bool is_gke_cluster_Set() const;
    bool is_gke_cluster_Valid() const;

    OAIKubernetesMetadata getKubernetesMetadata() const;
    void setKubernetesMetadata(const OAIKubernetesMetadata &kubernetes_metadata);
    bool is_kubernetes_metadata_Set() const;
    bool is_kubernetes_metadata_Valid() const;

    OAIKubernetesResource getKubernetesResource() const;
    void setKubernetesResource(const OAIKubernetesResource &kubernetes_resource);
    bool is_kubernetes_resource_Set() const;
    bool is_kubernetes_resource_Valid() const;

    OAIMultiCloudCluster getMultiCloudCluster() const;
    void setMultiCloudCluster(const OAIMultiCloudCluster &multi_cloud_cluster);
    bool is_multi_cloud_cluster_Set() const;
    bool is_multi_cloud_cluster_Valid() const;

    OAIOnPremCluster getOnPremCluster() const;
    void setOnPremCluster(const OAIOnPremCluster &on_prem_cluster);
    bool is_on_prem_cluster_Set() const;
    bool is_on_prem_cluster_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIApplianceCluster m_appliance_cluster;
    bool m_appliance_cluster_isSet;
    bool m_appliance_cluster_isValid;

    OAIEdgeCluster m_edge_cluster;
    bool m_edge_cluster_isSet;
    bool m_edge_cluster_isValid;

    OAIGkeCluster m_gke_cluster;
    bool m_gke_cluster_isSet;
    bool m_gke_cluster_isValid;

    OAIKubernetesMetadata m_kubernetes_metadata;
    bool m_kubernetes_metadata_isSet;
    bool m_kubernetes_metadata_isValid;

    OAIKubernetesResource m_kubernetes_resource;
    bool m_kubernetes_resource_isSet;
    bool m_kubernetes_resource_isValid;

    OAIMultiCloudCluster m_multi_cloud_cluster;
    bool m_multi_cloud_cluster_isSet;
    bool m_multi_cloud_cluster_isValid;

    OAIOnPremCluster m_on_prem_cluster;
    bool m_on_prem_cluster_isSet;
    bool m_on_prem_cluster_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMembershipEndpoint)

#endif // OAIMembershipEndpoint_H
