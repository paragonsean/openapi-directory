/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMembership.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMembership::OAIMembership(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMembership::OAIMembership() {
    this->initializeModel();
}

OAIMembership::~OAIMembership() {}

void OAIMembership::initializeModel() {

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_delete_time_isSet = false;
    m_delete_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_infrastructure_type_isSet = false;
    m_infrastructure_type_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_last_connection_time_isSet = false;
    m_last_connection_time_isValid = false;

    m_monitoring_config_isSet = false;
    m_monitoring_config_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_unique_id_isSet = false;
    m_unique_id_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIMembership::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMembership::fromJsonObject(QJsonObject json) {

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_delete_time_isValid = ::OpenAPI::fromJsonValue(m_delete_time, json[QString("deleteTime")]);
    m_delete_time_isSet = !json[QString("deleteTime")].isNull() && m_delete_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_infrastructure_type_isValid = ::OpenAPI::fromJsonValue(m_infrastructure_type, json[QString("infrastructureType")]);
    m_infrastructure_type_isSet = !json[QString("infrastructureType")].isNull() && m_infrastructure_type_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_last_connection_time_isValid = ::OpenAPI::fromJsonValue(m_last_connection_time, json[QString("lastConnectionTime")]);
    m_last_connection_time_isSet = !json[QString("lastConnectionTime")].isNull() && m_last_connection_time_isValid;

    m_monitoring_config_isValid = ::OpenAPI::fromJsonValue(m_monitoring_config, json[QString("monitoringConfig")]);
    m_monitoring_config_isSet = !json[QString("monitoringConfig")].isNull() && m_monitoring_config_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_unique_id_isValid = ::OpenAPI::fromJsonValue(m_unique_id, json[QString("uniqueId")]);
    m_unique_id_isSet = !json[QString("uniqueId")].isNull() && m_unique_id_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIMembership::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMembership::asJsonObject() const {
    QJsonObject obj;
    if (m_authority.isSet()) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_delete_time_isSet) {
        obj.insert(QString("deleteTime"), ::OpenAPI::toJsonValue(m_delete_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_endpoint.isSet()) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_infrastructure_type_isSet) {
        obj.insert(QString("infrastructureType"), ::OpenAPI::toJsonValue(m_infrastructure_type));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_last_connection_time_isSet) {
        obj.insert(QString("lastConnectionTime"), ::OpenAPI::toJsonValue(m_last_connection_time));
    }
    if (m_monitoring_config.isSet()) {
        obj.insert(QString("monitoringConfig"), ::OpenAPI::toJsonValue(m_monitoring_config));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_unique_id_isSet) {
        obj.insert(QString("uniqueId"), ::OpenAPI::toJsonValue(m_unique_id));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

OAIAuthority OAIMembership::getAuthority() const {
    return m_authority;
}
void OAIMembership::setAuthority(const OAIAuthority &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAIMembership::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAIMembership::is_authority_Valid() const{
    return m_authority_isValid;
}

QString OAIMembership::getCreateTime() const {
    return m_create_time;
}
void OAIMembership::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIMembership::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIMembership::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIMembership::getDeleteTime() const {
    return m_delete_time;
}
void OAIMembership::setDeleteTime(const QString &delete_time) {
    m_delete_time = delete_time;
    m_delete_time_isSet = true;
}

bool OAIMembership::is_delete_time_Set() const{
    return m_delete_time_isSet;
}

bool OAIMembership::is_delete_time_Valid() const{
    return m_delete_time_isValid;
}

QString OAIMembership::getDescription() const {
    return m_description;
}
void OAIMembership::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIMembership::is_description_Set() const{
    return m_description_isSet;
}

bool OAIMembership::is_description_Valid() const{
    return m_description_isValid;
}

OAIMembershipEndpoint OAIMembership::getEndpoint() const {
    return m_endpoint;
}
void OAIMembership::setEndpoint(const OAIMembershipEndpoint &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIMembership::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIMembership::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIMembership::getExternalId() const {
    return m_external_id;
}
void OAIMembership::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIMembership::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIMembership::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIMembership::getInfrastructureType() const {
    return m_infrastructure_type;
}
void OAIMembership::setInfrastructureType(const QString &infrastructure_type) {
    m_infrastructure_type = infrastructure_type;
    m_infrastructure_type_isSet = true;
}

bool OAIMembership::is_infrastructure_type_Set() const{
    return m_infrastructure_type_isSet;
}

bool OAIMembership::is_infrastructure_type_Valid() const{
    return m_infrastructure_type_isValid;
}

QMap<QString, QString> OAIMembership::getLabels() const {
    return m_labels;
}
void OAIMembership::setLabels(const QMap<QString, QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIMembership::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIMembership::is_labels_Valid() const{
    return m_labels_isValid;
}

QString OAIMembership::getLastConnectionTime() const {
    return m_last_connection_time;
}
void OAIMembership::setLastConnectionTime(const QString &last_connection_time) {
    m_last_connection_time = last_connection_time;
    m_last_connection_time_isSet = true;
}

bool OAIMembership::is_last_connection_time_Set() const{
    return m_last_connection_time_isSet;
}

bool OAIMembership::is_last_connection_time_Valid() const{
    return m_last_connection_time_isValid;
}

OAIMonitoringConfig OAIMembership::getMonitoringConfig() const {
    return m_monitoring_config;
}
void OAIMembership::setMonitoringConfig(const OAIMonitoringConfig &monitoring_config) {
    m_monitoring_config = monitoring_config;
    m_monitoring_config_isSet = true;
}

bool OAIMembership::is_monitoring_config_Set() const{
    return m_monitoring_config_isSet;
}

bool OAIMembership::is_monitoring_config_Valid() const{
    return m_monitoring_config_isValid;
}

QString OAIMembership::getName() const {
    return m_name;
}
void OAIMembership::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMembership::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMembership::is_name_Valid() const{
    return m_name_isValid;
}

OAIMembershipState OAIMembership::getState() const {
    return m_state;
}
void OAIMembership::setState(const OAIMembershipState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIMembership::is_state_Set() const{
    return m_state_isSet;
}

bool OAIMembership::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIMembership::getUniqueId() const {
    return m_unique_id;
}
void OAIMembership::setUniqueId(const QString &unique_id) {
    m_unique_id = unique_id;
    m_unique_id_isSet = true;
}

bool OAIMembership::is_unique_id_Set() const{
    return m_unique_id_isSet;
}

bool OAIMembership::is_unique_id_Valid() const{
    return m_unique_id_isValid;
}

QString OAIMembership::getUpdateTime() const {
    return m_update_time;
}
void OAIMembership::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIMembership::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIMembership::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIMembership::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authority.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrastructure_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_connection_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitoring_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_unique_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMembership::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
