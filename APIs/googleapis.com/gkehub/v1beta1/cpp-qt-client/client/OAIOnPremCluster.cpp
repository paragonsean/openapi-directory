/**
 * GKE Hub API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOnPremCluster.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOnPremCluster::OAIOnPremCluster(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOnPremCluster::OAIOnPremCluster() {
    this->initializeModel();
}

OAIOnPremCluster::~OAIOnPremCluster() {}

void OAIOnPremCluster::initializeModel() {

    m_admin_cluster_isSet = false;
    m_admin_cluster_isValid = false;

    m_cluster_missing_isSet = false;
    m_cluster_missing_isValid = false;

    m_cluster_type_isSet = false;
    m_cluster_type_isValid = false;

    m_resource_link_isSet = false;
    m_resource_link_isValid = false;
}

void OAIOnPremCluster::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOnPremCluster::fromJsonObject(QJsonObject json) {

    m_admin_cluster_isValid = ::OpenAPI::fromJsonValue(m_admin_cluster, json[QString("adminCluster")]);
    m_admin_cluster_isSet = !json[QString("adminCluster")].isNull() && m_admin_cluster_isValid;

    m_cluster_missing_isValid = ::OpenAPI::fromJsonValue(m_cluster_missing, json[QString("clusterMissing")]);
    m_cluster_missing_isSet = !json[QString("clusterMissing")].isNull() && m_cluster_missing_isValid;

    m_cluster_type_isValid = ::OpenAPI::fromJsonValue(m_cluster_type, json[QString("clusterType")]);
    m_cluster_type_isSet = !json[QString("clusterType")].isNull() && m_cluster_type_isValid;

    m_resource_link_isValid = ::OpenAPI::fromJsonValue(m_resource_link, json[QString("resourceLink")]);
    m_resource_link_isSet = !json[QString("resourceLink")].isNull() && m_resource_link_isValid;
}

QString OAIOnPremCluster::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOnPremCluster::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_cluster_isSet) {
        obj.insert(QString("adminCluster"), ::OpenAPI::toJsonValue(m_admin_cluster));
    }
    if (m_cluster_missing_isSet) {
        obj.insert(QString("clusterMissing"), ::OpenAPI::toJsonValue(m_cluster_missing));
    }
    if (m_cluster_type_isSet) {
        obj.insert(QString("clusterType"), ::OpenAPI::toJsonValue(m_cluster_type));
    }
    if (m_resource_link_isSet) {
        obj.insert(QString("resourceLink"), ::OpenAPI::toJsonValue(m_resource_link));
    }
    return obj;
}

bool OAIOnPremCluster::isAdminCluster() const {
    return m_admin_cluster;
}
void OAIOnPremCluster::setAdminCluster(const bool &admin_cluster) {
    m_admin_cluster = admin_cluster;
    m_admin_cluster_isSet = true;
}

bool OAIOnPremCluster::is_admin_cluster_Set() const{
    return m_admin_cluster_isSet;
}

bool OAIOnPremCluster::is_admin_cluster_Valid() const{
    return m_admin_cluster_isValid;
}

bool OAIOnPremCluster::isClusterMissing() const {
    return m_cluster_missing;
}
void OAIOnPremCluster::setClusterMissing(const bool &cluster_missing) {
    m_cluster_missing = cluster_missing;
    m_cluster_missing_isSet = true;
}

bool OAIOnPremCluster::is_cluster_missing_Set() const{
    return m_cluster_missing_isSet;
}

bool OAIOnPremCluster::is_cluster_missing_Valid() const{
    return m_cluster_missing_isValid;
}

QString OAIOnPremCluster::getClusterType() const {
    return m_cluster_type;
}
void OAIOnPremCluster::setClusterType(const QString &cluster_type) {
    m_cluster_type = cluster_type;
    m_cluster_type_isSet = true;
}

bool OAIOnPremCluster::is_cluster_type_Set() const{
    return m_cluster_type_isSet;
}

bool OAIOnPremCluster::is_cluster_type_Valid() const{
    return m_cluster_type_isValid;
}

QString OAIOnPremCluster::getResourceLink() const {
    return m_resource_link;
}
void OAIOnPremCluster::setResourceLink(const QString &resource_link) {
    m_resource_link = resource_link;
    m_resource_link_isSet = true;
}

bool OAIOnPremCluster::is_resource_link_Set() const{
    return m_resource_link_isSet;
}

bool OAIOnPremCluster::is_resource_link_Valid() const{
    return m_resource_link_isValid;
}

bool OAIOnPremCluster::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_missing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_link_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOnPremCluster::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
