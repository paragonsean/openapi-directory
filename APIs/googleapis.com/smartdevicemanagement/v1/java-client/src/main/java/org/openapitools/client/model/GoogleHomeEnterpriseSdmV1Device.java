/*
 * Smart Device Management API
 * Allow select enterprise partners to access, control, and manage Google and Nest devices programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.GoogleHomeEnterpriseSdmV1ParentRelation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Device resource represents an instance of enterprise managed device in the property.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:39:55.848563-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GoogleHomeEnterpriseSdmV1Device {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARENT_RELATIONS = "parentRelations";
  @SerializedName(SERIALIZED_NAME_PARENT_RELATIONS)
  private List<GoogleHomeEnterpriseSdmV1ParentRelation> parentRelations = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRAITS = "traits";
  @SerializedName(SERIALIZED_NAME_TRAITS)
  private Map<String, Object> traits = new HashMap<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public GoogleHomeEnterpriseSdmV1Device() {
  }

  public GoogleHomeEnterpriseSdmV1Device(
     Map<String, Object> traits, 
     String type
  ) {
    this();
    this.traits = traits;
    this.type = type;
  }

  public GoogleHomeEnterpriseSdmV1Device name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Required. The resource name of the device. For example: \&quot;enterprises/XYZ/devices/123\&quot;.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GoogleHomeEnterpriseSdmV1Device parentRelations(List<GoogleHomeEnterpriseSdmV1ParentRelation> parentRelations) {
    this.parentRelations = parentRelations;
    return this;
  }

  public GoogleHomeEnterpriseSdmV1Device addParentRelationsItem(GoogleHomeEnterpriseSdmV1ParentRelation parentRelationsItem) {
    if (this.parentRelations == null) {
      this.parentRelations = new ArrayList<>();
    }
    this.parentRelations.add(parentRelationsItem);
    return this;
  }

  /**
   * Assignee details of the device.
   * @return parentRelations
   */
  @javax.annotation.Nullable
  public List<GoogleHomeEnterpriseSdmV1ParentRelation> getParentRelations() {
    return parentRelations;
  }

  public void setParentRelations(List<GoogleHomeEnterpriseSdmV1ParentRelation> parentRelations) {
    this.parentRelations = parentRelations;
  }


  /**
   * Output only. Device traits.
   * @return traits
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTraits() {
    return traits;
  }



  /**
   * Output only. Type of the device for general display purposes. For example: \&quot;THERMOSTAT\&quot;. The device type should not be used to deduce or infer functionality of the actual device it is assigned to. Instead, use the returned traits for the device.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleHomeEnterpriseSdmV1Device googleHomeEnterpriseSdmV1Device = (GoogleHomeEnterpriseSdmV1Device) o;
    return Objects.equals(this.name, googleHomeEnterpriseSdmV1Device.name) &&
        Objects.equals(this.parentRelations, googleHomeEnterpriseSdmV1Device.parentRelations) &&
        Objects.equals(this.traits, googleHomeEnterpriseSdmV1Device.traits) &&
        Objects.equals(this.type, googleHomeEnterpriseSdmV1Device.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, parentRelations, traits, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleHomeEnterpriseSdmV1Device {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parentRelations: ").append(toIndentedString(parentRelations)).append("\n");
    sb.append("    traits: ").append(toIndentedString(traits)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("parentRelations");
    openapiFields.add("traits");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleHomeEnterpriseSdmV1Device
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleHomeEnterpriseSdmV1Device.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleHomeEnterpriseSdmV1Device is not found in the empty JSON string", GoogleHomeEnterpriseSdmV1Device.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GoogleHomeEnterpriseSdmV1Device.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GoogleHomeEnterpriseSdmV1Device` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("parentRelations") != null && !jsonObj.get("parentRelations").isJsonNull()) {
        JsonArray jsonArrayparentRelations = jsonObj.getAsJsonArray("parentRelations");
        if (jsonArrayparentRelations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("parentRelations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `parentRelations` to be an array in the JSON string but got `%s`", jsonObj.get("parentRelations").toString()));
          }

          // validate the optional field `parentRelations` (array)
          for (int i = 0; i < jsonArrayparentRelations.size(); i++) {
            GoogleHomeEnterpriseSdmV1ParentRelation.validateJsonElement(jsonArrayparentRelations.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleHomeEnterpriseSdmV1Device.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleHomeEnterpriseSdmV1Device' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleHomeEnterpriseSdmV1Device> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleHomeEnterpriseSdmV1Device.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleHomeEnterpriseSdmV1Device>() {
           @Override
           public void write(JsonWriter out, GoogleHomeEnterpriseSdmV1Device value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleHomeEnterpriseSdmV1Device read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleHomeEnterpriseSdmV1Device given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleHomeEnterpriseSdmV1Device
   * @throws IOException if the JSON string is invalid with respect to GoogleHomeEnterpriseSdmV1Device
   */
  public static GoogleHomeEnterpriseSdmV1Device fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleHomeEnterpriseSdmV1Device.class);
  }

  /**
   * Convert an instance of GoogleHomeEnterpriseSdmV1Device to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

