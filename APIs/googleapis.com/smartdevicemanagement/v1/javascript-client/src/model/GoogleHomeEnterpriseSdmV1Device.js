/**
 * Smart Device Management API
 * Allow select enterprise partners to access, control, and manage Google and Nest devices programmatically.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleHomeEnterpriseSdmV1ParentRelation from './GoogleHomeEnterpriseSdmV1ParentRelation';

/**
 * The GoogleHomeEnterpriseSdmV1Device model module.
 * @module model/GoogleHomeEnterpriseSdmV1Device
 * @version v1
 */
class GoogleHomeEnterpriseSdmV1Device {
    /**
     * Constructs a new <code>GoogleHomeEnterpriseSdmV1Device</code>.
     * Device resource represents an instance of enterprise managed device in the property.
     * @alias module:model/GoogleHomeEnterpriseSdmV1Device
     */
    constructor() { 
        
        GoogleHomeEnterpriseSdmV1Device.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleHomeEnterpriseSdmV1Device</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleHomeEnterpriseSdmV1Device} obj Optional instance to populate.
     * @return {module:model/GoogleHomeEnterpriseSdmV1Device} The populated <code>GoogleHomeEnterpriseSdmV1Device</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleHomeEnterpriseSdmV1Device();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parentRelations')) {
                obj['parentRelations'] = ApiClient.convertToType(data['parentRelations'], [GoogleHomeEnterpriseSdmV1ParentRelation]);
            }
            if (data.hasOwnProperty('traits')) {
                obj['traits'] = ApiClient.convertToType(data['traits'], {'String': Object});
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleHomeEnterpriseSdmV1Device</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleHomeEnterpriseSdmV1Device</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parentRelations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parentRelations'])) {
                throw new Error("Expected the field `parentRelations` to be an array in the JSON data but got " + data['parentRelations']);
            }
            // validate the optional field `parentRelations` (array)
            for (const item of data['parentRelations']) {
                GoogleHomeEnterpriseSdmV1ParentRelation.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Required. The resource name of the device. For example: \"enterprises/XYZ/devices/123\".
 * @member {String} name
 */
GoogleHomeEnterpriseSdmV1Device.prototype['name'] = undefined;

/**
 * Assignee details of the device.
 * @member {Array.<module:model/GoogleHomeEnterpriseSdmV1ParentRelation>} parentRelations
 */
GoogleHomeEnterpriseSdmV1Device.prototype['parentRelations'] = undefined;

/**
 * Output only. Device traits.
 * @member {Object.<String, Object>} traits
 */
GoogleHomeEnterpriseSdmV1Device.prototype['traits'] = undefined;

/**
 * Output only. Type of the device for general display purposes. For example: \"THERMOSTAT\". The device type should not be used to deduce or infer functionality of the actual device it is assigned to. Instead, use the returned traits for the device.
 * @member {String} type
 */
GoogleHomeEnterpriseSdmV1Device.prototype['type'] = undefined;






export default GoogleHomeEnterpriseSdmV1Device;

