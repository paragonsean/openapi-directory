/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuota.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuota::OAIQuota(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuota::OAIQuota() {
    this->initializeModel();
}

OAIQuota::~OAIQuota() {}

void OAIQuota::initializeModel() {

    m_limits_isSet = false;
    m_limits_isValid = false;

    m_metric_rules_isSet = false;
    m_metric_rules_isValid = false;
}

void OAIQuota::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuota::fromJsonObject(QJsonObject json) {

    m_limits_isValid = ::OpenAPI::fromJsonValue(m_limits, json[QString("limits")]);
    m_limits_isSet = !json[QString("limits")].isNull() && m_limits_isValid;

    m_metric_rules_isValid = ::OpenAPI::fromJsonValue(m_metric_rules, json[QString("metricRules")]);
    m_metric_rules_isSet = !json[QString("metricRules")].isNull() && m_metric_rules_isValid;
}

QString OAIQuota::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuota::asJsonObject() const {
    QJsonObject obj;
    if (m_limits.size() > 0) {
        obj.insert(QString("limits"), ::OpenAPI::toJsonValue(m_limits));
    }
    if (m_metric_rules.size() > 0) {
        obj.insert(QString("metricRules"), ::OpenAPI::toJsonValue(m_metric_rules));
    }
    return obj;
}

QList<OAIQuotaLimit> OAIQuota::getLimits() const {
    return m_limits;
}
void OAIQuota::setLimits(const QList<OAIQuotaLimit> &limits) {
    m_limits = limits;
    m_limits_isSet = true;
}

bool OAIQuota::is_limits_Set() const{
    return m_limits_isSet;
}

bool OAIQuota::is_limits_Valid() const{
    return m_limits_isValid;
}

QList<OAIMetricRule> OAIQuota::getMetricRules() const {
    return m_metric_rules;
}
void OAIQuota::setMetricRules(const QList<OAIMetricRule> &metric_rules) {
    m_metric_rules = metric_rules;
    m_metric_rules_isSet = true;
}

bool OAIQuota::is_metric_rules_Set() const{
    return m_metric_rules_isSet;
}

bool OAIQuota::is_metric_rules_Valid() const{
    return m_metric_rules_isValid;
}

bool OAIQuota::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuota::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
