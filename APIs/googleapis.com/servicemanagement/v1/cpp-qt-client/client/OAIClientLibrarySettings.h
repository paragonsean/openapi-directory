/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClientLibrarySettings.h
 *
 * Details about how and where to publish client libraries.
 */

#ifndef OAIClientLibrarySettings_H
#define OAIClientLibrarySettings_H

#include <QJsonObject>

#include "OAICppSettings.h"
#include "OAIDotnetSettings.h"
#include "OAIGoSettings.h"
#include "OAIJavaSettings.h"
#include "OAINodeSettings.h"
#include "OAIPhpSettings.h"
#include "OAIPythonSettings.h"
#include "OAIRubySettings.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICppSettings;
class OAIDotnetSettings;
class OAIGoSettings;
class OAIJavaSettings;
class OAINodeSettings;
class OAIPhpSettings;
class OAIPythonSettings;
class OAIRubySettings;

class OAIClientLibrarySettings : public OAIObject {
public:
    OAIClientLibrarySettings();
    OAIClientLibrarySettings(QString json);
    ~OAIClientLibrarySettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICppSettings getCppSettings() const;
    void setCppSettings(const OAICppSettings &cpp_settings);
    bool is_cpp_settings_Set() const;
    bool is_cpp_settings_Valid() const;

    OAIDotnetSettings getDotnetSettings() const;
    void setDotnetSettings(const OAIDotnetSettings &dotnet_settings);
    bool is_dotnet_settings_Set() const;
    bool is_dotnet_settings_Valid() const;

    OAIGoSettings getGoSettings() const;
    void setGoSettings(const OAIGoSettings &go_settings);
    bool is_go_settings_Set() const;
    bool is_go_settings_Valid() const;

    OAIJavaSettings getJavaSettings() const;
    void setJavaSettings(const OAIJavaSettings &java_settings);
    bool is_java_settings_Set() const;
    bool is_java_settings_Valid() const;

    QString getLaunchStage() const;
    void setLaunchStage(const QString &launch_stage);
    bool is_launch_stage_Set() const;
    bool is_launch_stage_Valid() const;

    OAINodeSettings getNodeSettings() const;
    void setNodeSettings(const OAINodeSettings &node_settings);
    bool is_node_settings_Set() const;
    bool is_node_settings_Valid() const;

    OAIPhpSettings getPhpSettings() const;
    void setPhpSettings(const OAIPhpSettings &php_settings);
    bool is_php_settings_Set() const;
    bool is_php_settings_Valid() const;

    OAIPythonSettings getPythonSettings() const;
    void setPythonSettings(const OAIPythonSettings &python_settings);
    bool is_python_settings_Set() const;
    bool is_python_settings_Valid() const;

    bool isRestNumericEnums() const;
    void setRestNumericEnums(const bool &rest_numeric_enums);
    bool is_rest_numeric_enums_Set() const;
    bool is_rest_numeric_enums_Valid() const;

    OAIRubySettings getRubySettings() const;
    void setRubySettings(const OAIRubySettings &ruby_settings);
    bool is_ruby_settings_Set() const;
    bool is_ruby_settings_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICppSettings m_cpp_settings;
    bool m_cpp_settings_isSet;
    bool m_cpp_settings_isValid;

    OAIDotnetSettings m_dotnet_settings;
    bool m_dotnet_settings_isSet;
    bool m_dotnet_settings_isValid;

    OAIGoSettings m_go_settings;
    bool m_go_settings_isSet;
    bool m_go_settings_isValid;

    OAIJavaSettings m_java_settings;
    bool m_java_settings_isSet;
    bool m_java_settings_isValid;

    QString m_launch_stage;
    bool m_launch_stage_isSet;
    bool m_launch_stage_isValid;

    OAINodeSettings m_node_settings;
    bool m_node_settings_isSet;
    bool m_node_settings_isValid;

    OAIPhpSettings m_php_settings;
    bool m_php_settings_isSet;
    bool m_php_settings_isValid;

    OAIPythonSettings m_python_settings;
    bool m_python_settings_isSet;
    bool m_python_settings_isValid;

    bool m_rest_numeric_enums;
    bool m_rest_numeric_enums_isSet;
    bool m_rest_numeric_enums_isValid;

    OAIRubySettings m_ruby_settings;
    bool m_ruby_settings_isSet;
    bool m_ruby_settings_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClientLibrarySettings)

#endif // OAIClientLibrarySettings_H
