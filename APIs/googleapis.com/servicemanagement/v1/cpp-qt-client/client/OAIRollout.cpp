/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRollout.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRollout::OAIRollout(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRollout::OAIRollout() {
    this->initializeModel();
}

OAIRollout::~OAIRollout() {}

void OAIRollout::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_delete_service_strategy_isSet = false;
    m_delete_service_strategy_isValid = false;

    m_rollout_id_isSet = false;
    m_rollout_id_isValid = false;

    m_service_name_isSet = false;
    m_service_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_traffic_percent_strategy_isSet = false;
    m_traffic_percent_strategy_isValid = false;
}

void OAIRollout::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRollout::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_delete_service_strategy_isValid = ::OpenAPI::fromJsonValue(m_delete_service_strategy, json[QString("deleteServiceStrategy")]);
    m_delete_service_strategy_isSet = !json[QString("deleteServiceStrategy")].isNull() && m_delete_service_strategy_isValid;

    m_rollout_id_isValid = ::OpenAPI::fromJsonValue(m_rollout_id, json[QString("rolloutId")]);
    m_rollout_id_isSet = !json[QString("rolloutId")].isNull() && m_rollout_id_isValid;

    m_service_name_isValid = ::OpenAPI::fromJsonValue(m_service_name, json[QString("serviceName")]);
    m_service_name_isSet = !json[QString("serviceName")].isNull() && m_service_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_traffic_percent_strategy_isValid = ::OpenAPI::fromJsonValue(m_traffic_percent_strategy, json[QString("trafficPercentStrategy")]);
    m_traffic_percent_strategy_isSet = !json[QString("trafficPercentStrategy")].isNull() && m_traffic_percent_strategy_isValid;
}

QString OAIRollout::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRollout::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_delete_service_strategy_isSet) {
        obj.insert(QString("deleteServiceStrategy"), ::OpenAPI::toJsonValue(m_delete_service_strategy));
    }
    if (m_rollout_id_isSet) {
        obj.insert(QString("rolloutId"), ::OpenAPI::toJsonValue(m_rollout_id));
    }
    if (m_service_name_isSet) {
        obj.insert(QString("serviceName"), ::OpenAPI::toJsonValue(m_service_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_traffic_percent_strategy.isSet()) {
        obj.insert(QString("trafficPercentStrategy"), ::OpenAPI::toJsonValue(m_traffic_percent_strategy));
    }
    return obj;
}

QString OAIRollout::getCreateTime() const {
    return m_create_time;
}
void OAIRollout::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIRollout::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIRollout::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIRollout::getCreatedBy() const {
    return m_created_by;
}
void OAIRollout::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIRollout::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIRollout::is_created_by_Valid() const{
    return m_created_by_isValid;
}

OAIObject OAIRollout::getDeleteServiceStrategy() const {
    return m_delete_service_strategy;
}
void OAIRollout::setDeleteServiceStrategy(const OAIObject &delete_service_strategy) {
    m_delete_service_strategy = delete_service_strategy;
    m_delete_service_strategy_isSet = true;
}

bool OAIRollout::is_delete_service_strategy_Set() const{
    return m_delete_service_strategy_isSet;
}

bool OAIRollout::is_delete_service_strategy_Valid() const{
    return m_delete_service_strategy_isValid;
}

QString OAIRollout::getRolloutId() const {
    return m_rollout_id;
}
void OAIRollout::setRolloutId(const QString &rollout_id) {
    m_rollout_id = rollout_id;
    m_rollout_id_isSet = true;
}

bool OAIRollout::is_rollout_id_Set() const{
    return m_rollout_id_isSet;
}

bool OAIRollout::is_rollout_id_Valid() const{
    return m_rollout_id_isValid;
}

QString OAIRollout::getServiceName() const {
    return m_service_name;
}
void OAIRollout::setServiceName(const QString &service_name) {
    m_service_name = service_name;
    m_service_name_isSet = true;
}

bool OAIRollout::is_service_name_Set() const{
    return m_service_name_isSet;
}

bool OAIRollout::is_service_name_Valid() const{
    return m_service_name_isValid;
}

QString OAIRollout::getStatus() const {
    return m_status;
}
void OAIRollout::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRollout::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRollout::is_status_Valid() const{
    return m_status_isValid;
}

OAITrafficPercentStrategy OAIRollout::getTrafficPercentStrategy() const {
    return m_traffic_percent_strategy;
}
void OAIRollout::setTrafficPercentStrategy(const OAITrafficPercentStrategy &traffic_percent_strategy) {
    m_traffic_percent_strategy = traffic_percent_strategy;
    m_traffic_percent_strategy_isSet = true;
}

bool OAIRollout::is_traffic_percent_strategy_Set() const{
    return m_traffic_percent_strategy_isSet;
}

bool OAIRollout::is_traffic_percent_strategy_Valid() const{
    return m_traffic_percent_strategy_isValid;
}

bool OAIRollout::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_service_strategy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_traffic_percent_strategy.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRollout::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
