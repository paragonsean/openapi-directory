/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfigChange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfigChange::OAIConfigChange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfigChange::OAIConfigChange() {
    this->initializeModel();
}

OAIConfigChange::~OAIConfigChange() {}

void OAIConfigChange::initializeModel() {

    m_advices_isSet = false;
    m_advices_isValid = false;

    m_change_type_isSet = false;
    m_change_type_isValid = false;

    m_element_isSet = false;
    m_element_isValid = false;

    m_new_value_isSet = false;
    m_new_value_isValid = false;

    m_old_value_isSet = false;
    m_old_value_isValid = false;
}

void OAIConfigChange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfigChange::fromJsonObject(QJsonObject json) {

    m_advices_isValid = ::OpenAPI::fromJsonValue(m_advices, json[QString("advices")]);
    m_advices_isSet = !json[QString("advices")].isNull() && m_advices_isValid;

    m_change_type_isValid = ::OpenAPI::fromJsonValue(m_change_type, json[QString("changeType")]);
    m_change_type_isSet = !json[QString("changeType")].isNull() && m_change_type_isValid;

    m_element_isValid = ::OpenAPI::fromJsonValue(m_element, json[QString("element")]);
    m_element_isSet = !json[QString("element")].isNull() && m_element_isValid;

    m_new_value_isValid = ::OpenAPI::fromJsonValue(m_new_value, json[QString("newValue")]);
    m_new_value_isSet = !json[QString("newValue")].isNull() && m_new_value_isValid;

    m_old_value_isValid = ::OpenAPI::fromJsonValue(m_old_value, json[QString("oldValue")]);
    m_old_value_isSet = !json[QString("oldValue")].isNull() && m_old_value_isValid;
}

QString OAIConfigChange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfigChange::asJsonObject() const {
    QJsonObject obj;
    if (m_advices.size() > 0) {
        obj.insert(QString("advices"), ::OpenAPI::toJsonValue(m_advices));
    }
    if (m_change_type_isSet) {
        obj.insert(QString("changeType"), ::OpenAPI::toJsonValue(m_change_type));
    }
    if (m_element_isSet) {
        obj.insert(QString("element"), ::OpenAPI::toJsonValue(m_element));
    }
    if (m_new_value_isSet) {
        obj.insert(QString("newValue"), ::OpenAPI::toJsonValue(m_new_value));
    }
    if (m_old_value_isSet) {
        obj.insert(QString("oldValue"), ::OpenAPI::toJsonValue(m_old_value));
    }
    return obj;
}

QList<OAIAdvice> OAIConfigChange::getAdvices() const {
    return m_advices;
}
void OAIConfigChange::setAdvices(const QList<OAIAdvice> &advices) {
    m_advices = advices;
    m_advices_isSet = true;
}

bool OAIConfigChange::is_advices_Set() const{
    return m_advices_isSet;
}

bool OAIConfigChange::is_advices_Valid() const{
    return m_advices_isValid;
}

QString OAIConfigChange::getChangeType() const {
    return m_change_type;
}
void OAIConfigChange::setChangeType(const QString &change_type) {
    m_change_type = change_type;
    m_change_type_isSet = true;
}

bool OAIConfigChange::is_change_type_Set() const{
    return m_change_type_isSet;
}

bool OAIConfigChange::is_change_type_Valid() const{
    return m_change_type_isValid;
}

QString OAIConfigChange::getElement() const {
    return m_element;
}
void OAIConfigChange::setElement(const QString &element) {
    m_element = element;
    m_element_isSet = true;
}

bool OAIConfigChange::is_element_Set() const{
    return m_element_isSet;
}

bool OAIConfigChange::is_element_Valid() const{
    return m_element_isValid;
}

QString OAIConfigChange::getNewValue() const {
    return m_new_value;
}
void OAIConfigChange::setNewValue(const QString &new_value) {
    m_new_value = new_value;
    m_new_value_isSet = true;
}

bool OAIConfigChange::is_new_value_Set() const{
    return m_new_value_isSet;
}

bool OAIConfigChange::is_new_value_Valid() const{
    return m_new_value_isValid;
}

QString OAIConfigChange::getOldValue() const {
    return m_old_value;
}
void OAIConfigChange::setOldValue(const QString &old_value) {
    m_old_value = old_value;
    m_old_value_isSet = true;
}

bool OAIConfigChange::is_old_value_Set() const{
    return m_old_value_isSet;
}

bool OAIConfigChange::is_old_value_Valid() const{
    return m_old_value_isValid;
}

bool OAIConfigChange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfigChange::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
