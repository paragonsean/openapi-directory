/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowErrorDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowErrorDetails::OAIFlowErrorDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowErrorDetails::OAIFlowErrorDetails() {
    this->initializeModel();
}

OAIFlowErrorDetails::~OAIFlowErrorDetails() {}

void OAIFlowErrorDetails::initializeModel() {

    m_exception_type_isSet = false;
    m_exception_type_isValid = false;

    m_flow_step_id_isSet = false;
    m_flow_step_id_isValid = false;
}

void OAIFlowErrorDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowErrorDetails::fromJsonObject(QJsonObject json) {

    m_exception_type_isValid = ::OpenAPI::fromJsonValue(m_exception_type, json[QString("exceptionType")]);
    m_exception_type_isSet = !json[QString("exceptionType")].isNull() && m_exception_type_isValid;

    m_flow_step_id_isValid = ::OpenAPI::fromJsonValue(m_flow_step_id, json[QString("flowStepId")]);
    m_flow_step_id_isSet = !json[QString("flowStepId")].isNull() && m_flow_step_id_isValid;
}

QString OAIFlowErrorDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowErrorDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_exception_type_isSet) {
        obj.insert(QString("exceptionType"), ::OpenAPI::toJsonValue(m_exception_type));
    }
    if (m_flow_step_id_isSet) {
        obj.insert(QString("flowStepId"), ::OpenAPI::toJsonValue(m_flow_step_id));
    }
    return obj;
}

QString OAIFlowErrorDetails::getExceptionType() const {
    return m_exception_type;
}
void OAIFlowErrorDetails::setExceptionType(const QString &exception_type) {
    m_exception_type = exception_type;
    m_exception_type_isSet = true;
}

bool OAIFlowErrorDetails::is_exception_type_Set() const{
    return m_exception_type_isSet;
}

bool OAIFlowErrorDetails::is_exception_type_Valid() const{
    return m_exception_type_isValid;
}

QString OAIFlowErrorDetails::getFlowStepId() const {
    return m_flow_step_id;
}
void OAIFlowErrorDetails::setFlowStepId(const QString &flow_step_id) {
    m_flow_step_id = flow_step_id;
    m_flow_step_id_isSet = true;
}

bool OAIFlowErrorDetails::is_flow_step_id_Set() const{
    return m_flow_step_id_isSet;
}

bool OAIFlowErrorDetails::is_flow_step_id_Valid() const{
    return m_flow_step_id_isValid;
}

bool OAIFlowErrorDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exception_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_flow_step_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowErrorDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
