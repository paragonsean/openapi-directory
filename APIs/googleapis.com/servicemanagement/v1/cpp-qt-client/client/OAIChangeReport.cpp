/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIChangeReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIChangeReport::OAIChangeReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIChangeReport::OAIChangeReport() {
    this->initializeModel();
}

OAIChangeReport::~OAIChangeReport() {}

void OAIChangeReport::initializeModel() {

    m_config_changes_isSet = false;
    m_config_changes_isValid = false;
}

void OAIChangeReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIChangeReport::fromJsonObject(QJsonObject json) {

    m_config_changes_isValid = ::OpenAPI::fromJsonValue(m_config_changes, json[QString("configChanges")]);
    m_config_changes_isSet = !json[QString("configChanges")].isNull() && m_config_changes_isValid;
}

QString OAIChangeReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIChangeReport::asJsonObject() const {
    QJsonObject obj;
    if (m_config_changes.size() > 0) {
        obj.insert(QString("configChanges"), ::OpenAPI::toJsonValue(m_config_changes));
    }
    return obj;
}

QList<OAIConfigChange> OAIChangeReport::getConfigChanges() const {
    return m_config_changes;
}
void OAIChangeReport::setConfigChanges(const QList<OAIConfigChange> &config_changes) {
    m_config_changes = config_changes;
    m_config_changes_isSet = true;
}

bool OAIChangeReport::is_config_changes_Set() const{
    return m_config_changes_isSet;
}

bool OAIChangeReport::is_config_changes_Valid() const{
    return m_config_changes_isValid;
}

bool OAIChangeReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_config_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIChangeReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
