/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMethod.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMethod::OAIMethod(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMethod::OAIMethod() {
    this->initializeModel();
}

OAIMethod::~OAIMethod() {}

void OAIMethod::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_request_streaming_isSet = false;
    m_request_streaming_isValid = false;

    m_request_type_url_isSet = false;
    m_request_type_url_isValid = false;

    m_response_streaming_isSet = false;
    m_response_streaming_isValid = false;

    m_response_type_url_isSet = false;
    m_response_type_url_isValid = false;

    m_syntax_isSet = false;
    m_syntax_isValid = false;
}

void OAIMethod::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMethod::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_request_streaming_isValid = ::OpenAPI::fromJsonValue(m_request_streaming, json[QString("requestStreaming")]);
    m_request_streaming_isSet = !json[QString("requestStreaming")].isNull() && m_request_streaming_isValid;

    m_request_type_url_isValid = ::OpenAPI::fromJsonValue(m_request_type_url, json[QString("requestTypeUrl")]);
    m_request_type_url_isSet = !json[QString("requestTypeUrl")].isNull() && m_request_type_url_isValid;

    m_response_streaming_isValid = ::OpenAPI::fromJsonValue(m_response_streaming, json[QString("responseStreaming")]);
    m_response_streaming_isSet = !json[QString("responseStreaming")].isNull() && m_response_streaming_isValid;

    m_response_type_url_isValid = ::OpenAPI::fromJsonValue(m_response_type_url, json[QString("responseTypeUrl")]);
    m_response_type_url_isSet = !json[QString("responseTypeUrl")].isNull() && m_response_type_url_isValid;

    m_syntax_isValid = ::OpenAPI::fromJsonValue(m_syntax, json[QString("syntax")]);
    m_syntax_isSet = !json[QString("syntax")].isNull() && m_syntax_isValid;
}

QString OAIMethod::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMethod::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_request_streaming_isSet) {
        obj.insert(QString("requestStreaming"), ::OpenAPI::toJsonValue(m_request_streaming));
    }
    if (m_request_type_url_isSet) {
        obj.insert(QString("requestTypeUrl"), ::OpenAPI::toJsonValue(m_request_type_url));
    }
    if (m_response_streaming_isSet) {
        obj.insert(QString("responseStreaming"), ::OpenAPI::toJsonValue(m_response_streaming));
    }
    if (m_response_type_url_isSet) {
        obj.insert(QString("responseTypeUrl"), ::OpenAPI::toJsonValue(m_response_type_url));
    }
    if (m_syntax_isSet) {
        obj.insert(QString("syntax"), ::OpenAPI::toJsonValue(m_syntax));
    }
    return obj;
}

QString OAIMethod::getName() const {
    return m_name;
}
void OAIMethod::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMethod::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMethod::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOption> OAIMethod::getOptions() const {
    return m_options;
}
void OAIMethod::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIMethod::is_options_Set() const{
    return m_options_isSet;
}

bool OAIMethod::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIMethod::isRequestStreaming() const {
    return m_request_streaming;
}
void OAIMethod::setRequestStreaming(const bool &request_streaming) {
    m_request_streaming = request_streaming;
    m_request_streaming_isSet = true;
}

bool OAIMethod::is_request_streaming_Set() const{
    return m_request_streaming_isSet;
}

bool OAIMethod::is_request_streaming_Valid() const{
    return m_request_streaming_isValid;
}

QString OAIMethod::getRequestTypeUrl() const {
    return m_request_type_url;
}
void OAIMethod::setRequestTypeUrl(const QString &request_type_url) {
    m_request_type_url = request_type_url;
    m_request_type_url_isSet = true;
}

bool OAIMethod::is_request_type_url_Set() const{
    return m_request_type_url_isSet;
}

bool OAIMethod::is_request_type_url_Valid() const{
    return m_request_type_url_isValid;
}

bool OAIMethod::isResponseStreaming() const {
    return m_response_streaming;
}
void OAIMethod::setResponseStreaming(const bool &response_streaming) {
    m_response_streaming = response_streaming;
    m_response_streaming_isSet = true;
}

bool OAIMethod::is_response_streaming_Set() const{
    return m_response_streaming_isSet;
}

bool OAIMethod::is_response_streaming_Valid() const{
    return m_response_streaming_isValid;
}

QString OAIMethod::getResponseTypeUrl() const {
    return m_response_type_url;
}
void OAIMethod::setResponseTypeUrl(const QString &response_type_url) {
    m_response_type_url = response_type_url;
    m_response_type_url_isSet = true;
}

bool OAIMethod::is_response_type_url_Set() const{
    return m_response_type_url_isSet;
}

bool OAIMethod::is_response_type_url_Valid() const{
    return m_response_type_url_isValid;
}

QString OAIMethod::getSyntax() const {
    return m_syntax;
}
void OAIMethod::setSyntax(const QString &syntax) {
    m_syntax = syntax;
    m_syntax_isSet = true;
}

bool OAIMethod::is_syntax_Set() const{
    return m_syntax_isSet;
}

bool OAIMethod::is_syntax_Valid() const{
    return m_syntax_isValid;
}

bool OAIMethod::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_streaming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_request_type_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_streaming_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_type_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_syntax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMethod::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
