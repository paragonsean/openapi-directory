/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDocumentation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDocumentation::OAIDocumentation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDocumentation::OAIDocumentation() {
    this->initializeModel();
}

OAIDocumentation::~OAIDocumentation() {}

void OAIDocumentation::initializeModel() {

    m_documentation_root_url_isSet = false;
    m_documentation_root_url_isValid = false;

    m_overview_isSet = false;
    m_overview_isValid = false;

    m_pages_isSet = false;
    m_pages_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_section_overrides_isSet = false;
    m_section_overrides_isValid = false;

    m_service_root_url_isSet = false;
    m_service_root_url_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;
}

void OAIDocumentation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDocumentation::fromJsonObject(QJsonObject json) {

    m_documentation_root_url_isValid = ::OpenAPI::fromJsonValue(m_documentation_root_url, json[QString("documentationRootUrl")]);
    m_documentation_root_url_isSet = !json[QString("documentationRootUrl")].isNull() && m_documentation_root_url_isValid;

    m_overview_isValid = ::OpenAPI::fromJsonValue(m_overview, json[QString("overview")]);
    m_overview_isSet = !json[QString("overview")].isNull() && m_overview_isValid;

    m_pages_isValid = ::OpenAPI::fromJsonValue(m_pages, json[QString("pages")]);
    m_pages_isSet = !json[QString("pages")].isNull() && m_pages_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_section_overrides_isValid = ::OpenAPI::fromJsonValue(m_section_overrides, json[QString("sectionOverrides")]);
    m_section_overrides_isSet = !json[QString("sectionOverrides")].isNull() && m_section_overrides_isValid;

    m_service_root_url_isValid = ::OpenAPI::fromJsonValue(m_service_root_url, json[QString("serviceRootUrl")]);
    m_service_root_url_isSet = !json[QString("serviceRootUrl")].isNull() && m_service_root_url_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;
}

QString OAIDocumentation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDocumentation::asJsonObject() const {
    QJsonObject obj;
    if (m_documentation_root_url_isSet) {
        obj.insert(QString("documentationRootUrl"), ::OpenAPI::toJsonValue(m_documentation_root_url));
    }
    if (m_overview_isSet) {
        obj.insert(QString("overview"), ::OpenAPI::toJsonValue(m_overview));
    }
    if (m_pages.size() > 0) {
        obj.insert(QString("pages"), ::OpenAPI::toJsonValue(m_pages));
    }
    if (m_rules.size() > 0) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_section_overrides.size() > 0) {
        obj.insert(QString("sectionOverrides"), ::OpenAPI::toJsonValue(m_section_overrides));
    }
    if (m_service_root_url_isSet) {
        obj.insert(QString("serviceRootUrl"), ::OpenAPI::toJsonValue(m_service_root_url));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    return obj;
}

QString OAIDocumentation::getDocumentationRootUrl() const {
    return m_documentation_root_url;
}
void OAIDocumentation::setDocumentationRootUrl(const QString &documentation_root_url) {
    m_documentation_root_url = documentation_root_url;
    m_documentation_root_url_isSet = true;
}

bool OAIDocumentation::is_documentation_root_url_Set() const{
    return m_documentation_root_url_isSet;
}

bool OAIDocumentation::is_documentation_root_url_Valid() const{
    return m_documentation_root_url_isValid;
}

QString OAIDocumentation::getOverview() const {
    return m_overview;
}
void OAIDocumentation::setOverview(const QString &overview) {
    m_overview = overview;
    m_overview_isSet = true;
}

bool OAIDocumentation::is_overview_Set() const{
    return m_overview_isSet;
}

bool OAIDocumentation::is_overview_Valid() const{
    return m_overview_isValid;
}

QList<OAIPage> OAIDocumentation::getPages() const {
    return m_pages;
}
void OAIDocumentation::setPages(const QList<OAIPage> &pages) {
    m_pages = pages;
    m_pages_isSet = true;
}

bool OAIDocumentation::is_pages_Set() const{
    return m_pages_isSet;
}

bool OAIDocumentation::is_pages_Valid() const{
    return m_pages_isValid;
}

QList<OAIDocumentationRule> OAIDocumentation::getRules() const {
    return m_rules;
}
void OAIDocumentation::setRules(const QList<OAIDocumentationRule> &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAIDocumentation::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAIDocumentation::is_rules_Valid() const{
    return m_rules_isValid;
}

QList<OAIPage> OAIDocumentation::getSectionOverrides() const {
    return m_section_overrides;
}
void OAIDocumentation::setSectionOverrides(const QList<OAIPage> &section_overrides) {
    m_section_overrides = section_overrides;
    m_section_overrides_isSet = true;
}

bool OAIDocumentation::is_section_overrides_Set() const{
    return m_section_overrides_isSet;
}

bool OAIDocumentation::is_section_overrides_Valid() const{
    return m_section_overrides_isValid;
}

QString OAIDocumentation::getServiceRootUrl() const {
    return m_service_root_url;
}
void OAIDocumentation::setServiceRootUrl(const QString &service_root_url) {
    m_service_root_url = service_root_url;
    m_service_root_url_isSet = true;
}

bool OAIDocumentation::is_service_root_url_Set() const{
    return m_service_root_url_isSet;
}

bool OAIDocumentation::is_service_root_url_Valid() const{
    return m_service_root_url_isValid;
}

QString OAIDocumentation::getSummary() const {
    return m_summary;
}
void OAIDocumentation::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIDocumentation::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIDocumentation::is_summary_Valid() const{
    return m_summary_isValid;
}

bool OAIDocumentation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_documentation_root_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overview_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_overrides.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_root_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDocumentation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
