/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDiagnostic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDiagnostic::OAIDiagnostic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDiagnostic::OAIDiagnostic() {
    this->initializeModel();
}

OAIDiagnostic::~OAIDiagnostic() {}

void OAIDiagnostic::initializeModel() {

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIDiagnostic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDiagnostic::fromJsonObject(QJsonObject json) {

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIDiagnostic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDiagnostic::asJsonObject() const {
    QJsonObject obj;
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIDiagnostic::getKind() const {
    return m_kind;
}
void OAIDiagnostic::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIDiagnostic::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIDiagnostic::is_kind_Valid() const{
    return m_kind_isValid;
}

QString OAIDiagnostic::getLocation() const {
    return m_location;
}
void OAIDiagnostic::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIDiagnostic::is_location_Set() const{
    return m_location_isSet;
}

bool OAIDiagnostic::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIDiagnostic::getMessage() const {
    return m_message;
}
void OAIDiagnostic::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIDiagnostic::is_message_Set() const{
    return m_message_isSet;
}

bool OAIDiagnostic::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIDiagnostic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDiagnostic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
