/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnumValue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnumValue::OAIEnumValue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnumValue::OAIEnumValue() {
    this->initializeModel();
}

OAIEnumValue::~OAIEnumValue() {}

void OAIEnumValue::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIEnumValue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnumValue::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("number")]);
    m_number_isSet = !json[QString("number")].isNull() && m_number_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;
}

QString OAIEnumValue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnumValue::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_isSet) {
        obj.insert(QString("number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIEnumValue::getName() const {
    return m_name;
}
void OAIEnumValue::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEnumValue::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEnumValue::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIEnumValue::getNumber() const {
    return m_number;
}
void OAIEnumValue::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIEnumValue::is_number_Set() const{
    return m_number_isSet;
}

bool OAIEnumValue::is_number_Valid() const{
    return m_number_isValid;
}

QList<OAIOption> OAIEnumValue::getOptions() const {
    return m_options;
}
void OAIEnumValue::setOptions(const QList<OAIOption> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIEnumValue::is_options_Set() const{
    return m_options_isSet;
}

bool OAIEnumValue::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIEnumValue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnumValue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
