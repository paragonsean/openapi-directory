/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIApi.h
 *
 * Api is a light-weight descriptor for an API Interface. Interfaces are also described as \&quot;protocol buffer services\&quot; in some contexts, such as by the \&quot;service\&quot; keyword in a .proto file, but they are different from API Services, which represent a concrete implementation of an interface as opposed to simply a description of methods and bindings. They are also sometimes simply referred to as \&quot;APIs\&quot; in other contexts, such as the name of this message itself. See https://cloud.google.com/apis/design/glossary for detailed terminology.
 */

#ifndef OAIApi_H
#define OAIApi_H

#include <QJsonObject>

#include "OAIMethod.h"
#include "OAIMixin.h"
#include "OAIOption.h"
#include "OAISourceContext.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMethod;
class OAIMixin;
class OAIOption;
class OAISourceContext;

class OAIApi : public OAIObject {
public:
    OAIApi();
    OAIApi(QString json);
    ~OAIApi() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIMethod> getMethods() const;
    void setMethods(const QList<OAIMethod> &methods);
    bool is_methods_Set() const;
    bool is_methods_Valid() const;

    QList<OAIMixin> getMixins() const;
    void setMixins(const QList<OAIMixin> &mixins);
    bool is_mixins_Set() const;
    bool is_mixins_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QList<OAIOption> getOptions() const;
    void setOptions(const QList<OAIOption> &options);
    bool is_options_Set() const;
    bool is_options_Valid() const;

    OAISourceContext getSourceContext() const;
    void setSourceContext(const OAISourceContext &source_context);
    bool is_source_context_Set() const;
    bool is_source_context_Valid() const;

    QString getSyntax() const;
    void setSyntax(const QString &syntax);
    bool is_syntax_Set() const;
    bool is_syntax_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIMethod> m_methods;
    bool m_methods_isSet;
    bool m_methods_isValid;

    QList<OAIMixin> m_mixins;
    bool m_mixins_isSet;
    bool m_mixins_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QList<OAIOption> m_options;
    bool m_options_isSet;
    bool m_options_isValid;

    OAISourceContext m_source_context;
    bool m_source_context_isSet;
    bool m_source_context_isValid;

    QString m_syntax;
    bool m_syntax_isSet;
    bool m_syntax_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIApi)

#endif // OAIApi_H
