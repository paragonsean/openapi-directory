/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGenerateConfigReportRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGenerateConfigReportRequest::OAIGenerateConfigReportRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGenerateConfigReportRequest::OAIGenerateConfigReportRequest() {
    this->initializeModel();
}

OAIGenerateConfigReportRequest::~OAIGenerateConfigReportRequest() {}

void OAIGenerateConfigReportRequest::initializeModel() {

    m_new_config_isSet = false;
    m_new_config_isValid = false;

    m_old_config_isSet = false;
    m_old_config_isValid = false;
}

void OAIGenerateConfigReportRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGenerateConfigReportRequest::fromJsonObject(QJsonObject json) {

    m_new_config_isValid = ::OpenAPI::fromJsonValue(m_new_config, json[QString("newConfig")]);
    m_new_config_isSet = !json[QString("newConfig")].isNull() && m_new_config_isValid;

    m_old_config_isValid = ::OpenAPI::fromJsonValue(m_old_config, json[QString("oldConfig")]);
    m_old_config_isSet = !json[QString("oldConfig")].isNull() && m_old_config_isValid;
}

QString OAIGenerateConfigReportRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGenerateConfigReportRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_new_config.size() > 0) {
        obj.insert(QString("newConfig"), ::OpenAPI::toJsonValue(m_new_config));
    }
    if (m_old_config.size() > 0) {
        obj.insert(QString("oldConfig"), ::OpenAPI::toJsonValue(m_old_config));
    }
    return obj;
}

QMap<QString, QJsonValue> OAIGenerateConfigReportRequest::getNewConfig() const {
    return m_new_config;
}
void OAIGenerateConfigReportRequest::setNewConfig(const QMap<QString, QJsonValue> &new_config) {
    m_new_config = new_config;
    m_new_config_isSet = true;
}

bool OAIGenerateConfigReportRequest::is_new_config_Set() const{
    return m_new_config_isSet;
}

bool OAIGenerateConfigReportRequest::is_new_config_Valid() const{
    return m_new_config_isValid;
}

QMap<QString, QJsonValue> OAIGenerateConfigReportRequest::getOldConfig() const {
    return m_old_config;
}
void OAIGenerateConfigReportRequest::setOldConfig(const QMap<QString, QJsonValue> &old_config) {
    m_old_config = old_config;
    m_old_config_isSet = true;
}

bool OAIGenerateConfigReportRequest::is_old_config_Set() const{
    return m_old_config_isSet;
}

bool OAIGenerateConfigReportRequest::is_old_config_Valid() const{
    return m_old_config_isValid;
}

bool OAIGenerateConfigReportRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_config.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGenerateConfigReportRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
