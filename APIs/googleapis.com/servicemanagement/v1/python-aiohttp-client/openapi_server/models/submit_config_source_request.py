# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_source import ConfigSource
from openapi_server import util


class SubmitConfigSourceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_source: ConfigSource=None, validate_only: bool=None):
        """SubmitConfigSourceRequest - a model defined in OpenAPI

        :param config_source: The config_source of this SubmitConfigSourceRequest.
        :param validate_only: The validate_only of this SubmitConfigSourceRequest.
        """
        self.openapi_types = {
            'config_source': ConfigSource,
            'validate_only': bool
        }

        self.attribute_map = {
            'config_source': 'configSource',
            'validate_only': 'validateOnly'
        }

        self._config_source = config_source
        self._validate_only = validate_only

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubmitConfigSourceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubmitConfigSourceRequest of this SubmitConfigSourceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_source(self):
        """Gets the config_source of this SubmitConfigSourceRequest.


        :return: The config_source of this SubmitConfigSourceRequest.
        :rtype: ConfigSource
        """
        return self._config_source

    @config_source.setter
    def config_source(self, config_source):
        """Sets the config_source of this SubmitConfigSourceRequest.


        :param config_source: The config_source of this SubmitConfigSourceRequest.
        :type config_source: ConfigSource
        """

        self._config_source = config_source

    @property
    def validate_only(self):
        """Gets the validate_only of this SubmitConfigSourceRequest.

        Optional. If set, this will result in the generation of a `google.api.Service` configuration based on the `ConfigSource` provided, but the generated config and the sources will NOT be persisted.

        :return: The validate_only of this SubmitConfigSourceRequest.
        :rtype: bool
        """
        return self._validate_only

    @validate_only.setter
    def validate_only(self, validate_only):
        """Sets the validate_only of this SubmitConfigSourceRequest.

        Optional. If set, this will result in the generation of a `google.api.Service` configuration based on the `ConfigSource` provided, but the generated config and the sources will NOT be persisted.

        :param validate_only: The validate_only of this SubmitConfigSourceRequest.
        :type validate_only: bool
        """

        self._validate_only = validate_only
