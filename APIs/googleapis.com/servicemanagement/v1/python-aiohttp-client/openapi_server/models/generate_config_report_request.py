# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GenerateConfigReportRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, new_config: Dict[str, object]=None, old_config: Dict[str, object]=None):
        """GenerateConfigReportRequest - a model defined in OpenAPI

        :param new_config: The new_config of this GenerateConfigReportRequest.
        :param old_config: The old_config of this GenerateConfigReportRequest.
        """
        self.openapi_types = {
            'new_config': Dict[str, object],
            'old_config': Dict[str, object]
        }

        self.attribute_map = {
            'new_config': 'newConfig',
            'old_config': 'oldConfig'
        }

        self._new_config = new_config
        self._old_config = old_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GenerateConfigReportRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GenerateConfigReportRequest of this GenerateConfigReportRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def new_config(self):
        """Gets the new_config of this GenerateConfigReportRequest.

        Required. Service configuration for which we want to generate the report. For this version of API, the supported types are google.api.servicemanagement.v1.ConfigRef, google.api.servicemanagement.v1.ConfigSource, and google.api.Service

        :return: The new_config of this GenerateConfigReportRequest.
        :rtype: Dict[str, object]
        """
        return self._new_config

    @new_config.setter
    def new_config(self, new_config):
        """Sets the new_config of this GenerateConfigReportRequest.

        Required. Service configuration for which we want to generate the report. For this version of API, the supported types are google.api.servicemanagement.v1.ConfigRef, google.api.servicemanagement.v1.ConfigSource, and google.api.Service

        :param new_config: The new_config of this GenerateConfigReportRequest.
        :type new_config: Dict[str, object]
        """

        self._new_config = new_config

    @property
    def old_config(self):
        """Gets the old_config of this GenerateConfigReportRequest.

        Optional. Service configuration against which the comparison will be done. For this version of API, the supported types are google.api.servicemanagement.v1.ConfigRef, google.api.servicemanagement.v1.ConfigSource, and google.api.Service

        :return: The old_config of this GenerateConfigReportRequest.
        :rtype: Dict[str, object]
        """
        return self._old_config

    @old_config.setter
    def old_config(self, old_config):
        """Sets the old_config of this GenerateConfigReportRequest.

        Optional. Service configuration against which the comparison will be done. For this version of API, the supported types are google.api.servicemanagement.v1.ConfigRef, google.api.servicemanagement.v1.ConfigSource, and google.api.Service

        :param old_config: The old_config of this GenerateConfigReportRequest.
        :type old_config: Dict[str, object]
        """

        self._old_config = old_config
