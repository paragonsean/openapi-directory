# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.advice import Advice
from openapi_server import util


class ConfigChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advices: List[Advice]=None, change_type: str=None, element: str=None, new_value: str=None, old_value: str=None):
        """ConfigChange - a model defined in OpenAPI

        :param advices: The advices of this ConfigChange.
        :param change_type: The change_type of this ConfigChange.
        :param element: The element of this ConfigChange.
        :param new_value: The new_value of this ConfigChange.
        :param old_value: The old_value of this ConfigChange.
        """
        self.openapi_types = {
            'advices': List[Advice],
            'change_type': str,
            'element': str,
            'new_value': str,
            'old_value': str
        }

        self.attribute_map = {
            'advices': 'advices',
            'change_type': 'changeType',
            'element': 'element',
            'new_value': 'newValue',
            'old_value': 'oldValue'
        }

        self._advices = advices
        self._change_type = change_type
        self._element = element
        self._new_value = new_value
        self._old_value = old_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigChange of this ConfigChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advices(self):
        """Gets the advices of this ConfigChange.

        Collection of advice provided for this change, useful for determining the possible impact of this change.

        :return: The advices of this ConfigChange.
        :rtype: List[Advice]
        """
        return self._advices

    @advices.setter
    def advices(self, advices):
        """Sets the advices of this ConfigChange.

        Collection of advice provided for this change, useful for determining the possible impact of this change.

        :param advices: The advices of this ConfigChange.
        :type advices: List[Advice]
        """

        self._advices = advices

    @property
    def change_type(self):
        """Gets the change_type of this ConfigChange.

        The type for this change, either ADDED, REMOVED, or MODIFIED.

        :return: The change_type of this ConfigChange.
        :rtype: str
        """
        return self._change_type

    @change_type.setter
    def change_type(self, change_type):
        """Sets the change_type of this ConfigChange.

        The type for this change, either ADDED, REMOVED, or MODIFIED.

        :param change_type: The change_type of this ConfigChange.
        :type change_type: str
        """
        allowed_values = ["CHANGE_TYPE_UNSPECIFIED", "ADDED", "REMOVED", "MODIFIED"]  # noqa: E501
        if change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `change_type` ({0}), must be one of {1}"
                .format(change_type, allowed_values)
            )

        self._change_type = change_type

    @property
    def element(self):
        """Gets the element of this ConfigChange.

        Object hierarchy path to the change, with levels separated by a '.' character. For repeated fields, an applicable unique identifier field is used for the index (usually selector, name, or id). For maps, the term 'key' is used. If the field has no unique identifier, the numeric index is used. Examples: - visibility.rules[selector==\"google.LibraryService.ListBooks\"].restriction - quota.metric_rules[selector==\"google\"].metric_costs[key==\"reads\"].value - logging.producer_destinations[0]

        :return: The element of this ConfigChange.
        :rtype: str
        """
        return self._element

    @element.setter
    def element(self, element):
        """Sets the element of this ConfigChange.

        Object hierarchy path to the change, with levels separated by a '.' character. For repeated fields, an applicable unique identifier field is used for the index (usually selector, name, or id). For maps, the term 'key' is used. If the field has no unique identifier, the numeric index is used. Examples: - visibility.rules[selector==\"google.LibraryService.ListBooks\"].restriction - quota.metric_rules[selector==\"google\"].metric_costs[key==\"reads\"].value - logging.producer_destinations[0]

        :param element: The element of this ConfigChange.
        :type element: str
        """

        self._element = element

    @property
    def new_value(self):
        """Gets the new_value of this ConfigChange.

        Value of the changed object in the new Service configuration, in JSON format. This field will not be populated if ChangeType == REMOVED.

        :return: The new_value of this ConfigChange.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ConfigChange.

        Value of the changed object in the new Service configuration, in JSON format. This field will not be populated if ChangeType == REMOVED.

        :param new_value: The new_value of this ConfigChange.
        :type new_value: str
        """

        self._new_value = new_value

    @property
    def old_value(self):
        """Gets the old_value of this ConfigChange.

        Value of the changed object in the old Service configuration, in JSON format. This field will not be populated if ChangeType == ADDED.

        :return: The old_value of this ConfigChange.
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this ConfigChange.

        Value of the changed object in the old Service configuration, in JSON format. This field will not be populated if ChangeType == ADDED.

        :param old_value: The old_value of this ConfigChange.
        :type old_value: str
        """

        self._old_value = old_value
