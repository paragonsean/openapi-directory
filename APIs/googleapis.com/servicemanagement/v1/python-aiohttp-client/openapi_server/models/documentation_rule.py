# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DocumentationRule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecation_description: str=None, description: str=None, disable_replacement_words: str=None, selector: str=None):
        """DocumentationRule - a model defined in OpenAPI

        :param deprecation_description: The deprecation_description of this DocumentationRule.
        :param description: The description of this DocumentationRule.
        :param disable_replacement_words: The disable_replacement_words of this DocumentationRule.
        :param selector: The selector of this DocumentationRule.
        """
        self.openapi_types = {
            'deprecation_description': str,
            'description': str,
            'disable_replacement_words': str,
            'selector': str
        }

        self.attribute_map = {
            'deprecation_description': 'deprecationDescription',
            'description': 'description',
            'disable_replacement_words': 'disableReplacementWords',
            'selector': 'selector'
        }

        self._deprecation_description = deprecation_description
        self._description = description
        self._disable_replacement_words = disable_replacement_words
        self._selector = selector

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DocumentationRule':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DocumentationRule of this DocumentationRule.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecation_description(self):
        """Gets the deprecation_description of this DocumentationRule.

        Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.

        :return: The deprecation_description of this DocumentationRule.
        :rtype: str
        """
        return self._deprecation_description

    @deprecation_description.setter
    def deprecation_description(self, deprecation_description):
        """Sets the deprecation_description of this DocumentationRule.

        Deprecation description of the selected element(s). It can be provided if an element is marked as `deprecated`.

        :param deprecation_description: The deprecation_description of this DocumentationRule.
        :type deprecation_description: str
        """

        self._deprecation_description = deprecation_description

    @property
    def description(self):
        """Gets the description of this DocumentationRule.

        Description of the selected proto element (e.g. a message, a method, a 'service' definition, or a field). Defaults to leading & trailing comments taken from the proto source definition of the proto element.

        :return: The description of this DocumentationRule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentationRule.

        Description of the selected proto element (e.g. a message, a method, a 'service' definition, or a field). Defaults to leading & trailing comments taken from the proto source definition of the proto element.

        :param description: The description of this DocumentationRule.
        :type description: str
        """

        self._description = description

    @property
    def disable_replacement_words(self):
        """Gets the disable_replacement_words of this DocumentationRule.

        String of comma or space separated case-sensitive words for which method/field name replacement will be disabled by go/api-docgen.

        :return: The disable_replacement_words of this DocumentationRule.
        :rtype: str
        """
        return self._disable_replacement_words

    @disable_replacement_words.setter
    def disable_replacement_words(self, disable_replacement_words):
        """Sets the disable_replacement_words of this DocumentationRule.

        String of comma or space separated case-sensitive words for which method/field name replacement will be disabled by go/api-docgen.

        :param disable_replacement_words: The disable_replacement_words of this DocumentationRule.
        :type disable_replacement_words: str
        """

        self._disable_replacement_words = disable_replacement_words

    @property
    def selector(self):
        """Gets the selector of this DocumentationRule.

        The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in \"*\", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \"foo.*\" is ok, but not \"foo.b*\" or \"foo.*.bar\". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \"*\" is used.

        :return: The selector of this DocumentationRule.
        :rtype: str
        """
        return self._selector

    @selector.setter
    def selector(self, selector):
        """Sets the selector of this DocumentationRule.

        The selector is a comma-separated list of patterns for any element such as a method, a field, an enum value. Each pattern is a qualified name of the element which may end in \"*\", indicating a wildcard. Wildcards are only allowed at the end and for a whole component of the qualified name, i.e. \"foo.*\" is ok, but not \"foo.b*\" or \"foo.*.bar\". A wildcard will match one or more components. To specify a default for all applicable elements, the whole pattern \"*\" is used.

        :param selector: The selector of this DocumentationRule.
        :type selector: str
        """

        self._selector = selector
