# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.config_file import ConfigFile
from openapi_server import util


class ConfigSource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, files: List[ConfigFile]=None, id: str=None):
        """ConfigSource - a model defined in OpenAPI

        :param files: The files of this ConfigSource.
        :param id: The id of this ConfigSource.
        """
        self.openapi_types = {
            'files': List[ConfigFile],
            'id': str
        }

        self.attribute_map = {
            'files': 'files',
            'id': 'id'
        }

        self._files = files
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigSource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConfigSource of this ConfigSource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def files(self):
        """Gets the files of this ConfigSource.

        Set of source configuration files that are used to generate a service configuration (`google.api.Service`).

        :return: The files of this ConfigSource.
        :rtype: List[ConfigFile]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ConfigSource.

        Set of source configuration files that are used to generate a service configuration (`google.api.Service`).

        :param files: The files of this ConfigSource.
        :type files: List[ConfigFile]
        """

        self._files = files

    @property
    def id(self):
        """Gets the id of this ConfigSource.

        A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. If empty, the server may choose to generate one instead.

        :return: The id of this ConfigSource.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigSource.

        A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. If empty, the server may choose to generate one instead.

        :param id: The id of this ConfigSource.
        :type id: str
        """

        self._id = id
