# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Diagnostic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind: str=None, location: str=None, message: str=None):
        """Diagnostic - a model defined in OpenAPI

        :param kind: The kind of this Diagnostic.
        :param location: The location of this Diagnostic.
        :param message: The message of this Diagnostic.
        """
        self.openapi_types = {
            'kind': str,
            'location': str,
            'message': str
        }

        self.attribute_map = {
            'kind': 'kind',
            'location': 'location',
            'message': 'message'
        }

        self._kind = kind
        self._location = location
        self._message = message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Diagnostic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Diagnostic of this Diagnostic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self):
        """Gets the kind of this Diagnostic.

        The kind of diagnostic information provided.

        :return: The kind of this Diagnostic.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Diagnostic.

        The kind of diagnostic information provided.

        :param kind: The kind of this Diagnostic.
        :type kind: str
        """
        allowed_values = ["WARNING", "ERROR"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def location(self):
        """Gets the location of this Diagnostic.

        File name and line number of the error or warning.

        :return: The location of this Diagnostic.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Diagnostic.

        File name and line number of the error or warning.

        :param location: The location of this Diagnostic.
        :type location: str
        """

        self._location = location

    @property
    def message(self):
        """Gets the message of this Diagnostic.

        Message describing the error or warning.

        :return: The message of this Diagnostic.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Diagnostic.

        Message describing the error or warning.

        :param message: The message of this Diagnostic.
        :type message: str
        """

        self._message = message
