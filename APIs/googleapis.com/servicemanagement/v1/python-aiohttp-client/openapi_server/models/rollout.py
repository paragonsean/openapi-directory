# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.traffic_percent_strategy import TrafficPercentStrategy
from openapi_server import util


class Rollout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, created_by: str=None, delete_service_strategy: object=None, rollout_id: str=None, service_name: str=None, status: str=None, traffic_percent_strategy: TrafficPercentStrategy=None):
        """Rollout - a model defined in OpenAPI

        :param create_time: The create_time of this Rollout.
        :param created_by: The created_by of this Rollout.
        :param delete_service_strategy: The delete_service_strategy of this Rollout.
        :param rollout_id: The rollout_id of this Rollout.
        :param service_name: The service_name of this Rollout.
        :param status: The status of this Rollout.
        :param traffic_percent_strategy: The traffic_percent_strategy of this Rollout.
        """
        self.openapi_types = {
            'create_time': str,
            'created_by': str,
            'delete_service_strategy': object,
            'rollout_id': str,
            'service_name': str,
            'status': str,
            'traffic_percent_strategy': TrafficPercentStrategy
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'created_by': 'createdBy',
            'delete_service_strategy': 'deleteServiceStrategy',
            'rollout_id': 'rolloutId',
            'service_name': 'serviceName',
            'status': 'status',
            'traffic_percent_strategy': 'trafficPercentStrategy'
        }

        self._create_time = create_time
        self._created_by = created_by
        self._delete_service_strategy = delete_service_strategy
        self._rollout_id = rollout_id
        self._service_name = service_name
        self._status = status
        self._traffic_percent_strategy = traffic_percent_strategy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Rollout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rollout of this Rollout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Rollout.

        Creation time of the rollout. Readonly.

        :return: The create_time of this Rollout.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Rollout.

        Creation time of the rollout. Readonly.

        :param create_time: The create_time of this Rollout.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def created_by(self):
        """Gets the created_by of this Rollout.

        The user who created the Rollout. Readonly.

        :return: The created_by of this Rollout.
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Rollout.

        The user who created the Rollout. Readonly.

        :param created_by: The created_by of this Rollout.
        :type created_by: str
        """

        self._created_by = created_by

    @property
    def delete_service_strategy(self):
        """Gets the delete_service_strategy of this Rollout.

        Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.

        :return: The delete_service_strategy of this Rollout.
        :rtype: object
        """
        return self._delete_service_strategy

    @delete_service_strategy.setter
    def delete_service_strategy(self, delete_service_strategy):
        """Sets the delete_service_strategy of this Rollout.

        Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.

        :param delete_service_strategy: The delete_service_strategy of this Rollout.
        :type delete_service_strategy: object
        """

        self._delete_service_strategy = delete_service_strategy

    @property
    def rollout_id(self):
        """Gets the rollout_id of this Rollout.

        Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where \"date\" is the create date in ISO 8601 format. \"revision number\" is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is '2016-02-16r1'

        :return: The rollout_id of this Rollout.
        :rtype: str
        """
        return self._rollout_id

    @rollout_id.setter
    def rollout_id(self, rollout_id):
        """Sets the rollout_id of this Rollout.

        Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, '.', '_' and '-' are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where \"date\" is the create date in ISO 8601 format. \"revision number\" is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is '2016-02-16r1'

        :param rollout_id: The rollout_id of this Rollout.
        :type rollout_id: str
        """

        self._rollout_id = rollout_id

    @property
    def service_name(self):
        """Gets the service_name of this Rollout.

        The name of the service associated with this Rollout.

        :return: The service_name of this Rollout.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name):
        """Sets the service_name of this Rollout.

        The name of the service associated with this Rollout.

        :param service_name: The service_name of this Rollout.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def status(self):
        """Gets the status of this Rollout.

        The status of this rollout. Readonly. In case of a failed rollout, the system will automatically rollback to the current Rollout version. Readonly.

        :return: The status of this Rollout.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Rollout.

        The status of this rollout. Readonly. In case of a failed rollout, the system will automatically rollback to the current Rollout version. Readonly.

        :param status: The status of this Rollout.
        :type status: str
        """
        allowed_values = ["ROLLOUT_STATUS_UNSPECIFIED", "IN_PROGRESS", "SUCCESS", "CANCELLED", "FAILED", "PENDING", "FAILED_ROLLED_BACK"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def traffic_percent_strategy(self):
        """Gets the traffic_percent_strategy of this Rollout.


        :return: The traffic_percent_strategy of this Rollout.
        :rtype: TrafficPercentStrategy
        """
        return self._traffic_percent_strategy

    @traffic_percent_strategy.setter
    def traffic_percent_strategy(self, traffic_percent_strategy):
        """Sets the traffic_percent_strategy of this Rollout.


        :param traffic_percent_strategy: The traffic_percent_strategy of this Rollout.
        :type traffic_percent_strategy: TrafficPercentStrategy
        """

        self._traffic_percent_strategy = traffic_percent_strategy
