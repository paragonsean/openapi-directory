# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.logging_destination import LoggingDestination
from openapi_server import util


class Logging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consumer_destinations: List[LoggingDestination]=None, producer_destinations: List[LoggingDestination]=None):
        """Logging - a model defined in OpenAPI

        :param consumer_destinations: The consumer_destinations of this Logging.
        :param producer_destinations: The producer_destinations of this Logging.
        """
        self.openapi_types = {
            'consumer_destinations': List[LoggingDestination],
            'producer_destinations': List[LoggingDestination]
        }

        self.attribute_map = {
            'consumer_destinations': 'consumerDestinations',
            'producer_destinations': 'producerDestinations'
        }

        self._consumer_destinations = consumer_destinations
        self._producer_destinations = producer_destinations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Logging':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Logging of this Logging.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consumer_destinations(self):
        """Gets the consumer_destinations of this Logging.

        Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.

        :return: The consumer_destinations of this Logging.
        :rtype: List[LoggingDestination]
        """
        return self._consumer_destinations

    @consumer_destinations.setter
    def consumer_destinations(self, consumer_destinations):
        """Sets the consumer_destinations of this Logging.

        Logging configurations for sending logs to the consumer project. There can be multiple consumer destinations, each one must have a different monitored resource type. A log can be used in at most one consumer destination.

        :param consumer_destinations: The consumer_destinations of this Logging.
        :type consumer_destinations: List[LoggingDestination]
        """

        self._consumer_destinations = consumer_destinations

    @property
    def producer_destinations(self):
        """Gets the producer_destinations of this Logging.

        Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.

        :return: The producer_destinations of this Logging.
        :rtype: List[LoggingDestination]
        """
        return self._producer_destinations

    @producer_destinations.setter
    def producer_destinations(self, producer_destinations):
        """Sets the producer_destinations of this Logging.

        Logging configurations for sending logs to the producer project. There can be multiple producer destinations, each one must have a different monitored resource type. A log can be used in at most one producer destination.

        :param producer_destinations: The producer_destinations of this Logging.
        :type producer_destinations: List[LoggingDestination]
        """

        self._producer_destinations = producer_destinations
