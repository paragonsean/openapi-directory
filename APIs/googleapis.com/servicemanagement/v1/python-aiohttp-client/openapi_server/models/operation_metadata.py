# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.step import Step
from openapi_server import util


class OperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, progress_percentage: int=None, resource_names: List[str]=None, start_time: str=None, steps: List[Step]=None):
        """OperationMetadata - a model defined in OpenAPI

        :param progress_percentage: The progress_percentage of this OperationMetadata.
        :param resource_names: The resource_names of this OperationMetadata.
        :param start_time: The start_time of this OperationMetadata.
        :param steps: The steps of this OperationMetadata.
        """
        self.openapi_types = {
            'progress_percentage': int,
            'resource_names': List[str],
            'start_time': str,
            'steps': List[Step]
        }

        self.attribute_map = {
            'progress_percentage': 'progressPercentage',
            'resource_names': 'resourceNames',
            'start_time': 'startTime',
            'steps': 'steps'
        }

        self._progress_percentage = progress_percentage
        self._resource_names = resource_names
        self._start_time = start_time
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetadata of this OperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def progress_percentage(self):
        """Gets the progress_percentage of this OperationMetadata.

        Percentage of completion of this operation, ranging from 0 to 100.

        :return: The progress_percentage of this OperationMetadata.
        :rtype: int
        """
        return self._progress_percentage

    @progress_percentage.setter
    def progress_percentage(self, progress_percentage):
        """Sets the progress_percentage of this OperationMetadata.

        Percentage of completion of this operation, ranging from 0 to 100.

        :param progress_percentage: The progress_percentage of this OperationMetadata.
        :type progress_percentage: int
        """

        self._progress_percentage = progress_percentage

    @property
    def resource_names(self):
        """Gets the resource_names of this OperationMetadata.

        The full name of the resources that this operation is directly associated with.

        :return: The resource_names of this OperationMetadata.
        :rtype: List[str]
        """
        return self._resource_names

    @resource_names.setter
    def resource_names(self, resource_names):
        """Sets the resource_names of this OperationMetadata.

        The full name of the resources that this operation is directly associated with.

        :param resource_names: The resource_names of this OperationMetadata.
        :type resource_names: List[str]
        """

        self._resource_names = resource_names

    @property
    def start_time(self):
        """Gets the start_time of this OperationMetadata.

        The start time of the operation.

        :return: The start_time of this OperationMetadata.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OperationMetadata.

        The start time of the operation.

        :param start_time: The start_time of this OperationMetadata.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def steps(self):
        """Gets the steps of this OperationMetadata.

        Detailed status information for each step. The order is undetermined.

        :return: The steps of this OperationMetadata.
        :rtype: List[Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this OperationMetadata.

        Detailed status information for each step. The order is undetermined.

        :param steps: The steps of this OperationMetadata.
        :type steps: List[Step]
        """

        self._steps = steps
