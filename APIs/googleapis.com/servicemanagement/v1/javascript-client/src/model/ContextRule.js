/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ContextRule model module.
 * @module model/ContextRule
 * @version v1
 */
class ContextRule {
    /**
     * Constructs a new <code>ContextRule</code>.
     * A context rule provides information about the context for an individual API element.
     * @alias module:model/ContextRule
     */
    constructor() { 
        
        ContextRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ContextRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContextRule} obj Optional instance to populate.
     * @return {module:model/ContextRule} The populated <code>ContextRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContextRule();

            if (data.hasOwnProperty('allowedRequestExtensions')) {
                obj['allowedRequestExtensions'] = ApiClient.convertToType(data['allowedRequestExtensions'], ['String']);
            }
            if (data.hasOwnProperty('allowedResponseExtensions')) {
                obj['allowedResponseExtensions'] = ApiClient.convertToType(data['allowedResponseExtensions'], ['String']);
            }
            if (data.hasOwnProperty('provided')) {
                obj['provided'] = ApiClient.convertToType(data['provided'], ['String']);
            }
            if (data.hasOwnProperty('requested')) {
                obj['requested'] = ApiClient.convertToType(data['requested'], ['String']);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContextRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContextRule</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['allowedRequestExtensions'])) {
            throw new Error("Expected the field `allowedRequestExtensions` to be an array in the JSON data but got " + data['allowedRequestExtensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allowedResponseExtensions'])) {
            throw new Error("Expected the field `allowedResponseExtensions` to be an array in the JSON data but got " + data['allowedResponseExtensions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['provided'])) {
            throw new Error("Expected the field `provided` to be an array in the JSON data but got " + data['provided']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['requested'])) {
            throw new Error("Expected the field `requested` to be an array in the JSON data but got " + data['requested']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * A list of full type names or extension IDs of extensions allowed in grpc side channel from client to backend.
 * @member {Array.<String>} allowedRequestExtensions
 */
ContextRule.prototype['allowedRequestExtensions'] = undefined;

/**
 * A list of full type names or extension IDs of extensions allowed in grpc side channel from backend to client.
 * @member {Array.<String>} allowedResponseExtensions
 */
ContextRule.prototype['allowedResponseExtensions'] = undefined;

/**
 * A list of full type names of provided contexts.
 * @member {Array.<String>} provided
 */
ContextRule.prototype['provided'] = undefined;

/**
 * A list of full type names of requested contexts.
 * @member {Array.<String>} requested
 */
ContextRule.prototype['requested'] = undefined;

/**
 * Selects the methods to which this rule applies. Refer to selector for syntax details.
 * @member {String} selector
 */
ContextRule.prototype['selector'] = undefined;






export default ContextRule;

