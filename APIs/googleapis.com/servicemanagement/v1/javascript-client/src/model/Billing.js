/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BillingDestination from './BillingDestination';

/**
 * The Billing model module.
 * @module model/Billing
 * @version v1
 */
class Billing {
    /**
     * Constructs a new <code>Billing</code>.
     * Billing related configuration of the service. The following example shows how to configure monitored resources and metrics for billing, &#x60;consumer_destinations&#x60; is the only supported destination and the monitored resources need at least one label key &#x60;cloud.googleapis.com/location&#x60; to indicate the location of the billing usage, using different monitored resources between monitoring and billing is recommended so they can be evolved independently: monitored_resources: - type: library.googleapis.com/billing_branch labels: - key: cloud.googleapis.com/location description: | Predefined label to support billing location restriction. - key: city description: | Custom label to define the city where the library branch is located in. - key: name description: Custom label to define the name of the library branch. metrics: - name: library.googleapis.com/book/borrowed_count metric_kind: DELTA value_type: INT64 unit: \&quot;1\&quot; billing: consumer_destinations: - monitored_resource: library.googleapis.com/billing_branch metrics: - library.googleapis.com/book/borrowed_count
     * @alias module:model/Billing
     */
    constructor() { 
        
        Billing.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Billing</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Billing} obj Optional instance to populate.
     * @return {module:model/Billing} The populated <code>Billing</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Billing();

            if (data.hasOwnProperty('consumerDestinations')) {
                obj['consumerDestinations'] = ApiClient.convertToType(data['consumerDestinations'], [BillingDestination]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Billing</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Billing</code>.
     */
    static validateJSON(data) {
        if (data['consumerDestinations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['consumerDestinations'])) {
                throw new Error("Expected the field `consumerDestinations` to be an array in the JSON data but got " + data['consumerDestinations']);
            }
            // validate the optional field `consumerDestinations` (array)
            for (const item of data['consumerDestinations']) {
                BillingDestination.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Billing configurations for sending metrics to the consumer project. There can be multiple consumer destinations per service, each one must have a different monitored resource type. A metric can be used in at most one consumer destination.
 * @member {Array.<module:model/BillingDestination>} consumerDestinations
 */
Billing.prototype['consumerDestinations'] = undefined;






export default Billing;

