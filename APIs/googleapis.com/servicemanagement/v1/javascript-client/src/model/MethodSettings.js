/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import LongRunning from './LongRunning';

/**
 * The MethodSettings model module.
 * @module model/MethodSettings
 * @version v1
 */
class MethodSettings {
    /**
     * Constructs a new <code>MethodSettings</code>.
     * Describes the generator configuration for a method.
     * @alias module:model/MethodSettings
     */
    constructor() { 
        
        MethodSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MethodSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MethodSettings} obj Optional instance to populate.
     * @return {module:model/MethodSettings} The populated <code>MethodSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MethodSettings();

            if (data.hasOwnProperty('autoPopulatedFields')) {
                obj['autoPopulatedFields'] = ApiClient.convertToType(data['autoPopulatedFields'], ['String']);
            }
            if (data.hasOwnProperty('longRunning')) {
                obj['longRunning'] = LongRunning.constructFromObject(data['longRunning']);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MethodSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MethodSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['autoPopulatedFields'])) {
            throw new Error("Expected the field `autoPopulatedFields` to be an array in the JSON data but got " + data['autoPopulatedFields']);
        }
        // validate the optional field `longRunning`
        if (data['longRunning']) { // data not null
          LongRunning.validateJSON(data['longRunning']);
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * List of top-level fields of the request message, that should be automatically populated by the client libraries based on their (google.api.field_info).format. Currently supported format: UUID4. Example of a YAML configuration: publishing: method_settings: - selector: google.example.v1.ExampleService.CreateExample auto_populated_fields: - request_id
 * @member {Array.<String>} autoPopulatedFields
 */
MethodSettings.prototype['autoPopulatedFields'] = undefined;

/**
 * @member {module:model/LongRunning} longRunning
 */
MethodSettings.prototype['longRunning'] = undefined;

/**
 * The fully qualified name of the method, for which the options below apply. This is used to find the method to apply the options.
 * @member {String} selector
 */
MethodSettings.prototype['selector'] = undefined;






export default MethodSettings;

