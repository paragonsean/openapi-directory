/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChangeReport from './ChangeReport';
import Diagnostic from './Diagnostic';

/**
 * The GenerateConfigReportResponse model module.
 * @module model/GenerateConfigReportResponse
 * @version v1
 */
class GenerateConfigReportResponse {
    /**
     * Constructs a new <code>GenerateConfigReportResponse</code>.
     * Response message for GenerateConfigReport method.
     * @alias module:model/GenerateConfigReportResponse
     */
    constructor() { 
        
        GenerateConfigReportResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GenerateConfigReportResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GenerateConfigReportResponse} obj Optional instance to populate.
     * @return {module:model/GenerateConfigReportResponse} The populated <code>GenerateConfigReportResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GenerateConfigReportResponse();

            if (data.hasOwnProperty('changeReports')) {
                obj['changeReports'] = ApiClient.convertToType(data['changeReports'], [ChangeReport]);
            }
            if (data.hasOwnProperty('diagnostics')) {
                obj['diagnostics'] = ApiClient.convertToType(data['diagnostics'], [Diagnostic]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('serviceName')) {
                obj['serviceName'] = ApiClient.convertToType(data['serviceName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GenerateConfigReportResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GenerateConfigReportResponse</code>.
     */
    static validateJSON(data) {
        if (data['changeReports']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['changeReports'])) {
                throw new Error("Expected the field `changeReports` to be an array in the JSON data but got " + data['changeReports']);
            }
            // validate the optional field `changeReports` (array)
            for (const item of data['changeReports']) {
                ChangeReport.validateJSON(item);
            };
        }
        if (data['diagnostics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['diagnostics'])) {
                throw new Error("Expected the field `diagnostics` to be an array in the JSON data but got " + data['diagnostics']);
            }
            // validate the optional field `diagnostics` (array)
            for (const item of data['diagnostics']) {
                Diagnostic.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['serviceName'] && !(typeof data['serviceName'] === 'string' || data['serviceName'] instanceof String)) {
            throw new Error("Expected the field `serviceName` to be a primitive type in the JSON string but got " + data['serviceName']);
        }

        return true;
    }


}



/**
 * list of ChangeReport, each corresponding to comparison between two service configurations.
 * @member {Array.<module:model/ChangeReport>} changeReports
 */
GenerateConfigReportResponse.prototype['changeReports'] = undefined;

/**
 * Errors / Linter warnings associated with the service definition this report belongs to.
 * @member {Array.<module:model/Diagnostic>} diagnostics
 */
GenerateConfigReportResponse.prototype['diagnostics'] = undefined;

/**
 * ID of the service configuration this report belongs to.
 * @member {String} id
 */
GenerateConfigReportResponse.prototype['id'] = undefined;

/**
 * Name of the service this report belongs to.
 * @member {String} serviceName
 */
GenerateConfigReportResponse.prototype['serviceName'] = undefined;






export default GenerateConfigReportResponse;

