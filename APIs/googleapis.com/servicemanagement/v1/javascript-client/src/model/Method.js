/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Option from './Option';

/**
 * The Method model module.
 * @module model/Method
 * @version v1
 */
class Method {
    /**
     * Constructs a new <code>Method</code>.
     * Method represents a method of an API interface.
     * @alias module:model/Method
     */
    constructor() { 
        
        Method.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Method</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Method} obj Optional instance to populate.
     * @return {module:model/Method} The populated <code>Method</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Method();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = ApiClient.convertToType(data['options'], [Option]);
            }
            if (data.hasOwnProperty('requestStreaming')) {
                obj['requestStreaming'] = ApiClient.convertToType(data['requestStreaming'], 'Boolean');
            }
            if (data.hasOwnProperty('requestTypeUrl')) {
                obj['requestTypeUrl'] = ApiClient.convertToType(data['requestTypeUrl'], 'String');
            }
            if (data.hasOwnProperty('responseStreaming')) {
                obj['responseStreaming'] = ApiClient.convertToType(data['responseStreaming'], 'Boolean');
            }
            if (data.hasOwnProperty('responseTypeUrl')) {
                obj['responseTypeUrl'] = ApiClient.convertToType(data['responseTypeUrl'], 'String');
            }
            if (data.hasOwnProperty('syntax')) {
                obj['syntax'] = ApiClient.convertToType(data['syntax'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Method</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Method</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['options']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['options'])) {
                throw new Error("Expected the field `options` to be an array in the JSON data but got " + data['options']);
            }
            // validate the optional field `options` (array)
            for (const item of data['options']) {
                Option.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['requestTypeUrl'] && !(typeof data['requestTypeUrl'] === 'string' || data['requestTypeUrl'] instanceof String)) {
            throw new Error("Expected the field `requestTypeUrl` to be a primitive type in the JSON string but got " + data['requestTypeUrl']);
        }
        // ensure the json data is a string
        if (data['responseTypeUrl'] && !(typeof data['responseTypeUrl'] === 'string' || data['responseTypeUrl'] instanceof String)) {
            throw new Error("Expected the field `responseTypeUrl` to be a primitive type in the JSON string but got " + data['responseTypeUrl']);
        }
        // ensure the json data is a string
        if (data['syntax'] && !(typeof data['syntax'] === 'string' || data['syntax'] instanceof String)) {
            throw new Error("Expected the field `syntax` to be a primitive type in the JSON string but got " + data['syntax']);
        }

        return true;
    }


}



/**
 * The simple name of this method.
 * @member {String} name
 */
Method.prototype['name'] = undefined;

/**
 * Any metadata attached to the method.
 * @member {Array.<module:model/Option>} options
 */
Method.prototype['options'] = undefined;

/**
 * If true, the request is streamed.
 * @member {Boolean} requestStreaming
 */
Method.prototype['requestStreaming'] = undefined;

/**
 * A URL of the input message type.
 * @member {String} requestTypeUrl
 */
Method.prototype['requestTypeUrl'] = undefined;

/**
 * If true, the response is streamed.
 * @member {Boolean} responseStreaming
 */
Method.prototype['responseStreaming'] = undefined;

/**
 * The URL of the output message type.
 * @member {String} responseTypeUrl
 */
Method.prototype['responseTypeUrl'] = undefined;

/**
 * The source syntax of this method.
 * @member {module:model/Method.SyntaxEnum} syntax
 */
Method.prototype['syntax'] = undefined;





/**
 * Allowed values for the <code>syntax</code> property.
 * @enum {String}
 * @readonly
 */
Method['SyntaxEnum'] = {

    /**
     * value: "SYNTAX_PROTO2"
     * @const
     */
    "PROTO2": "SYNTAX_PROTO2",

    /**
     * value: "SYNTAX_PROTO3"
     * @const
     */
    "PROTO3": "SYNTAX_PROTO3",

    /**
     * value: "SYNTAX_EDITIONS"
     * @const
     */
    "EDITIONS": "SYNTAX_EDITIONS"
};



export default Method;

