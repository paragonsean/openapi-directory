/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConfigFile model module.
 * @module model/ConfigFile
 * @version v1
 */
class ConfigFile {
    /**
     * Constructs a new <code>ConfigFile</code>.
     * Generic specification of a source configuration file
     * @alias module:model/ConfigFile
     */
    constructor() { 
        
        ConfigFile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigFile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigFile} obj Optional instance to populate.
     * @return {module:model/ConfigFile} The populated <code>ConfigFile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigFile();

            if (data.hasOwnProperty('fileContents')) {
                obj['fileContents'] = ApiClient.convertToType(data['fileContents'], 'Blob');
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('fileType')) {
                obj['fileType'] = ApiClient.convertToType(data['fileType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigFile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigFile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['fileType'] && !(typeof data['fileType'] === 'string' || data['fileType'] instanceof String)) {
            throw new Error("Expected the field `fileType` to be a primitive type in the JSON string but got " + data['fileType']);
        }

        return true;
    }


}



/**
 * The bytes that constitute the file.
 * @member {Blob} fileContents
 */
ConfigFile.prototype['fileContents'] = undefined;

/**
 * The file name of the configuration file (full or relative path).
 * @member {String} filePath
 */
ConfigFile.prototype['filePath'] = undefined;

/**
 * The type of configuration file this represents.
 * @member {module:model/ConfigFile.FileTypeEnum} fileType
 */
ConfigFile.prototype['fileType'] = undefined;





/**
 * Allowed values for the <code>fileType</code> property.
 * @enum {String}
 * @readonly
 */
ConfigFile['FileTypeEnum'] = {

    /**
     * value: "FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "FILE_TYPE_UNSPECIFIED": "FILE_TYPE_UNSPECIFIED",

    /**
     * value: "SERVICE_CONFIG_YAML"
     * @const
     */
    "SERVICE_CONFIG_YAML": "SERVICE_CONFIG_YAML",

    /**
     * value: "OPEN_API_JSON"
     * @const
     */
    "OPEN_API_JSON": "OPEN_API_JSON",

    /**
     * value: "OPEN_API_YAML"
     * @const
     */
    "OPEN_API_YAML": "OPEN_API_YAML",

    /**
     * value: "FILE_DESCRIPTOR_SET_PROTO"
     * @const
     */
    "FILE_DESCRIPTOR_SET_PROTO": "FILE_DESCRIPTOR_SET_PROTO",

    /**
     * value: "PROTO_FILE"
     * @const
     */
    "PROTO_FILE": "PROTO_FILE"
};



export default ConfigFile;

