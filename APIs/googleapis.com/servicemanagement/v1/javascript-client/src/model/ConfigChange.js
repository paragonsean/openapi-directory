/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Advice from './Advice';

/**
 * The ConfigChange model module.
 * @module model/ConfigChange
 * @version v1
 */
class ConfigChange {
    /**
     * Constructs a new <code>ConfigChange</code>.
     * Output generated from semantically comparing two versions of a service configuration. Includes detailed information about a field that have changed with applicable advice about potential consequences for the change, such as backwards-incompatibility.
     * @alias module:model/ConfigChange
     */
    constructor() { 
        
        ConfigChange.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConfigChange</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConfigChange} obj Optional instance to populate.
     * @return {module:model/ConfigChange} The populated <code>ConfigChange</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConfigChange();

            if (data.hasOwnProperty('advices')) {
                obj['advices'] = ApiClient.convertToType(data['advices'], [Advice]);
            }
            if (data.hasOwnProperty('changeType')) {
                obj['changeType'] = ApiClient.convertToType(data['changeType'], 'String');
            }
            if (data.hasOwnProperty('element')) {
                obj['element'] = ApiClient.convertToType(data['element'], 'String');
            }
            if (data.hasOwnProperty('newValue')) {
                obj['newValue'] = ApiClient.convertToType(data['newValue'], 'String');
            }
            if (data.hasOwnProperty('oldValue')) {
                obj['oldValue'] = ApiClient.convertToType(data['oldValue'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConfigChange</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConfigChange</code>.
     */
    static validateJSON(data) {
        if (data['advices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['advices'])) {
                throw new Error("Expected the field `advices` to be an array in the JSON data but got " + data['advices']);
            }
            // validate the optional field `advices` (array)
            for (const item of data['advices']) {
                Advice.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['changeType'] && !(typeof data['changeType'] === 'string' || data['changeType'] instanceof String)) {
            throw new Error("Expected the field `changeType` to be a primitive type in the JSON string but got " + data['changeType']);
        }
        // ensure the json data is a string
        if (data['element'] && !(typeof data['element'] === 'string' || data['element'] instanceof String)) {
            throw new Error("Expected the field `element` to be a primitive type in the JSON string but got " + data['element']);
        }
        // ensure the json data is a string
        if (data['newValue'] && !(typeof data['newValue'] === 'string' || data['newValue'] instanceof String)) {
            throw new Error("Expected the field `newValue` to be a primitive type in the JSON string but got " + data['newValue']);
        }
        // ensure the json data is a string
        if (data['oldValue'] && !(typeof data['oldValue'] === 'string' || data['oldValue'] instanceof String)) {
            throw new Error("Expected the field `oldValue` to be a primitive type in the JSON string but got " + data['oldValue']);
        }

        return true;
    }


}



/**
 * Collection of advice provided for this change, useful for determining the possible impact of this change.
 * @member {Array.<module:model/Advice>} advices
 */
ConfigChange.prototype['advices'] = undefined;

/**
 * The type for this change, either ADDED, REMOVED, or MODIFIED.
 * @member {module:model/ConfigChange.ChangeTypeEnum} changeType
 */
ConfigChange.prototype['changeType'] = undefined;

/**
 * Object hierarchy path to the change, with levels separated by a '.' character. For repeated fields, an applicable unique identifier field is used for the index (usually selector, name, or id). For maps, the term 'key' is used. If the field has no unique identifier, the numeric index is used. Examples: - visibility.rules[selector==\"google.LibraryService.ListBooks\"].restriction - quota.metric_rules[selector==\"google\"].metric_costs[key==\"reads\"].value - logging.producer_destinations[0]
 * @member {String} element
 */
ConfigChange.prototype['element'] = undefined;

/**
 * Value of the changed object in the new Service configuration, in JSON format. This field will not be populated if ChangeType == REMOVED.
 * @member {String} newValue
 */
ConfigChange.prototype['newValue'] = undefined;

/**
 * Value of the changed object in the old Service configuration, in JSON format. This field will not be populated if ChangeType == ADDED.
 * @member {String} oldValue
 */
ConfigChange.prototype['oldValue'] = undefined;





/**
 * Allowed values for the <code>changeType</code> property.
 * @enum {String}
 * @readonly
 */
ConfigChange['ChangeTypeEnum'] = {

    /**
     * value: "CHANGE_TYPE_UNSPECIFIED"
     * @const
     */
    "CHANGE_TYPE_UNSPECIFIED": "CHANGE_TYPE_UNSPECIFIED",

    /**
     * value: "ADDED"
     * @const
     */
    "ADDED": "ADDED",

    /**
     * value: "REMOVED"
     * @const
     */
    "REMOVED": "REMOVED",

    /**
     * value: "MODIFIED"
     * @const
     */
    "MODIFIED": "MODIFIED"
};



export default ConfigChange;

