/**
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthRequirement from './AuthRequirement';
import OAuthRequirements from './OAuthRequirements';

/**
 * The AuthenticationRule model module.
 * @module model/AuthenticationRule
 * @version v1
 */
class AuthenticationRule {
    /**
     * Constructs a new <code>AuthenticationRule</code>.
     * Authentication rules for the service. By default, if a method has any authentication requirements, every request must include a valid credential matching one of the requirements. It&#39;s an error to include more than one kind of credential in a single request. If a method doesn&#39;t have any auth requirements, request credentials will be ignored.
     * @alias module:model/AuthenticationRule
     */
    constructor() { 
        
        AuthenticationRule.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AuthenticationRule</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AuthenticationRule} obj Optional instance to populate.
     * @return {module:model/AuthenticationRule} The populated <code>AuthenticationRule</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AuthenticationRule();

            if (data.hasOwnProperty('allowWithoutCredential')) {
                obj['allowWithoutCredential'] = ApiClient.convertToType(data['allowWithoutCredential'], 'Boolean');
            }
            if (data.hasOwnProperty('oauth')) {
                obj['oauth'] = OAuthRequirements.constructFromObject(data['oauth']);
            }
            if (data.hasOwnProperty('requirements')) {
                obj['requirements'] = ApiClient.convertToType(data['requirements'], [AuthRequirement]);
            }
            if (data.hasOwnProperty('selector')) {
                obj['selector'] = ApiClient.convertToType(data['selector'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AuthenticationRule</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AuthenticationRule</code>.
     */
    static validateJSON(data) {
        // validate the optional field `oauth`
        if (data['oauth']) { // data not null
          OAuthRequirements.validateJSON(data['oauth']);
        }
        if (data['requirements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['requirements'])) {
                throw new Error("Expected the field `requirements` to be an array in the JSON data but got " + data['requirements']);
            }
            // validate the optional field `requirements` (array)
            for (const item of data['requirements']) {
                AuthRequirement.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['selector'] && !(typeof data['selector'] === 'string' || data['selector'] instanceof String)) {
            throw new Error("Expected the field `selector` to be a primitive type in the JSON string but got " + data['selector']);
        }

        return true;
    }


}



/**
 * If true, the service accepts API keys without any other credential. This flag only applies to HTTP and gRPC requests.
 * @member {Boolean} allowWithoutCredential
 */
AuthenticationRule.prototype['allowWithoutCredential'] = undefined;

/**
 * @member {module:model/OAuthRequirements} oauth
 */
AuthenticationRule.prototype['oauth'] = undefined;

/**
 * Requirements for additional authentication providers.
 * @member {Array.<module:model/AuthRequirement>} requirements
 */
AuthenticationRule.prototype['requirements'] = undefined;

/**
 * Selects the methods to which this rule applies. Refer to selector for syntax details.
 * @member {String} selector
 */
AuthenticationRule.prototype['selector'] = undefined;






export default AuthenticationRule;

