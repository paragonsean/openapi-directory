/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Advice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Output generated from semantically comparing two versions of a service configuration. Includes detailed information about a field that have changed with applicable advice about potential consequences for the change, such as backwards-incompatibility.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:08.497622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigChange {
  public static final String SERIALIZED_NAME_ADVICES = "advices";
  @SerializedName(SERIALIZED_NAME_ADVICES)
  private List<Advice> advices = new ArrayList<>();

  /**
   * The type for this change, either ADDED, REMOVED, or MODIFIED.
   */
  @JsonAdapter(ChangeTypeEnum.Adapter.class)
  public enum ChangeTypeEnum {
    CHANGE_TYPE_UNSPECIFIED("CHANGE_TYPE_UNSPECIFIED"),
    
    ADDED("ADDED"),
    
    REMOVED("REMOVED"),
    
    MODIFIED("MODIFIED");

    private String value;

    ChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ChangeTypeEnum fromValue(String value) {
      for (ChangeTypeEnum b : ChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CHANGE_TYPE = "changeType";
  @SerializedName(SERIALIZED_NAME_CHANGE_TYPE)
  private ChangeTypeEnum changeType;

  public static final String SERIALIZED_NAME_ELEMENT = "element";
  @SerializedName(SERIALIZED_NAME_ELEMENT)
  private String element;

  public static final String SERIALIZED_NAME_NEW_VALUE = "newValue";
  @SerializedName(SERIALIZED_NAME_NEW_VALUE)
  private String newValue;

  public static final String SERIALIZED_NAME_OLD_VALUE = "oldValue";
  @SerializedName(SERIALIZED_NAME_OLD_VALUE)
  private String oldValue;

  public ConfigChange() {
  }

  public ConfigChange advices(List<Advice> advices) {
    this.advices = advices;
    return this;
  }

  public ConfigChange addAdvicesItem(Advice advicesItem) {
    if (this.advices == null) {
      this.advices = new ArrayList<>();
    }
    this.advices.add(advicesItem);
    return this;
  }

  /**
   * Collection of advice provided for this change, useful for determining the possible impact of this change.
   * @return advices
   */
  @javax.annotation.Nullable
  public List<Advice> getAdvices() {
    return advices;
  }

  public void setAdvices(List<Advice> advices) {
    this.advices = advices;
  }


  public ConfigChange changeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
    return this;
  }

  /**
   * The type for this change, either ADDED, REMOVED, or MODIFIED.
   * @return changeType
   */
  @javax.annotation.Nullable
  public ChangeTypeEnum getChangeType() {
    return changeType;
  }

  public void setChangeType(ChangeTypeEnum changeType) {
    this.changeType = changeType;
  }


  public ConfigChange element(String element) {
    this.element = element;
    return this;
  }

  /**
   * Object hierarchy path to the change, with levels separated by a &#39;.&#39; character. For repeated fields, an applicable unique identifier field is used for the index (usually selector, name, or id). For maps, the term &#39;key&#39; is used. If the field has no unique identifier, the numeric index is used. Examples: - visibility.rules[selector&#x3D;&#x3D;\&quot;google.LibraryService.ListBooks\&quot;].restriction - quota.metric_rules[selector&#x3D;&#x3D;\&quot;google\&quot;].metric_costs[key&#x3D;&#x3D;\&quot;reads\&quot;].value - logging.producer_destinations[0]
   * @return element
   */
  @javax.annotation.Nullable
  public String getElement() {
    return element;
  }

  public void setElement(String element) {
    this.element = element;
  }


  public ConfigChange newValue(String newValue) {
    this.newValue = newValue;
    return this;
  }

  /**
   * Value of the changed object in the new Service configuration, in JSON format. This field will not be populated if ChangeType &#x3D;&#x3D; REMOVED.
   * @return newValue
   */
  @javax.annotation.Nullable
  public String getNewValue() {
    return newValue;
  }

  public void setNewValue(String newValue) {
    this.newValue = newValue;
  }


  public ConfigChange oldValue(String oldValue) {
    this.oldValue = oldValue;
    return this;
  }

  /**
   * Value of the changed object in the old Service configuration, in JSON format. This field will not be populated if ChangeType &#x3D;&#x3D; ADDED.
   * @return oldValue
   */
  @javax.annotation.Nullable
  public String getOldValue() {
    return oldValue;
  }

  public void setOldValue(String oldValue) {
    this.oldValue = oldValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigChange configChange = (ConfigChange) o;
    return Objects.equals(this.advices, configChange.advices) &&
        Objects.equals(this.changeType, configChange.changeType) &&
        Objects.equals(this.element, configChange.element) &&
        Objects.equals(this.newValue, configChange.newValue) &&
        Objects.equals(this.oldValue, configChange.oldValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advices, changeType, element, newValue, oldValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigChange {\n");
    sb.append("    advices: ").append(toIndentedString(advices)).append("\n");
    sb.append("    changeType: ").append(toIndentedString(changeType)).append("\n");
    sb.append("    element: ").append(toIndentedString(element)).append("\n");
    sb.append("    newValue: ").append(toIndentedString(newValue)).append("\n");
    sb.append("    oldValue: ").append(toIndentedString(oldValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advices");
    openapiFields.add("changeType");
    openapiFields.add("element");
    openapiFields.add("newValue");
    openapiFields.add("oldValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigChange
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigChange.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigChange is not found in the empty JSON string", ConfigChange.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigChange.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigChange` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("advices") != null && !jsonObj.get("advices").isJsonNull()) {
        JsonArray jsonArrayadvices = jsonObj.getAsJsonArray("advices");
        if (jsonArrayadvices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("advices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `advices` to be an array in the JSON string but got `%s`", jsonObj.get("advices").toString()));
          }

          // validate the optional field `advices` (array)
          for (int i = 0; i < jsonArrayadvices.size(); i++) {
            Advice.validateJsonElement(jsonArrayadvices.get(i));
          };
        }
      }
      if ((jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) && !jsonObj.get("changeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changeType").toString()));
      }
      // validate the optional field `changeType`
      if (jsonObj.get("changeType") != null && !jsonObj.get("changeType").isJsonNull()) {
        ChangeTypeEnum.validateJsonElement(jsonObj.get("changeType"));
      }
      if ((jsonObj.get("element") != null && !jsonObj.get("element").isJsonNull()) && !jsonObj.get("element").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `element` to be a primitive type in the JSON string but got `%s`", jsonObj.get("element").toString()));
      }
      if ((jsonObj.get("newValue") != null && !jsonObj.get("newValue").isJsonNull()) && !jsonObj.get("newValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newValue").toString()));
      }
      if ((jsonObj.get("oldValue") != null && !jsonObj.get("oldValue").isJsonNull()) && !jsonObj.get("oldValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigChange.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigChange' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigChange> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigChange.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigChange>() {
           @Override
           public void write(JsonWriter out, ConfigChange value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigChange read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigChange given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigChange
   * @throws IOException if the JSON string is invalid with respect to ConfigChange
   */
  public static ConfigChange fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigChange.class);
  }

  /**
   * Convert an instance of ConfigChange to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

