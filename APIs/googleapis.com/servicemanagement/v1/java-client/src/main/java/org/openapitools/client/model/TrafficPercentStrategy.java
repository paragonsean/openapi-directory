/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Strategy that specifies how clients of Google Service Controller want to send traffic to use different config versions. This is generally used by API proxy to split traffic based on your configured percentage for each config version. One example of how to gradually rollout a new service configuration using this strategy: Day 1 Rollout { id: \&quot;example.googleapis.com/rollout_20160206\&quot; traffic_percent_strategy { percentages: { \&quot;example.googleapis.com/20160201\&quot;: 70.00 \&quot;example.googleapis.com/20160206\&quot;: 30.00 } } } Day 2 Rollout { id: \&quot;example.googleapis.com/rollout_20160207\&quot; traffic_percent_strategy: { percentages: { \&quot;example.googleapis.com/20160206\&quot;: 100.00 } } }
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:08.497622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TrafficPercentStrategy {
  public static final String SERIALIZED_NAME_PERCENTAGES = "percentages";
  @SerializedName(SERIALIZED_NAME_PERCENTAGES)
  private Map<String, Double> percentages = new HashMap<>();

  public TrafficPercentStrategy() {
  }

  public TrafficPercentStrategy percentages(Map<String, Double> percentages) {
    this.percentages = percentages;
    return this;
  }

  public TrafficPercentStrategy putPercentagesItem(String key, Double percentagesItem) {
    if (this.percentages == null) {
      this.percentages = new HashMap<>();
    }
    this.percentages.put(key, percentagesItem);
    return this;
  }

  /**
   * Maps service configuration IDs to their corresponding traffic percentage. Key is the service configuration ID, Value is the traffic percentage which must be greater than 0.0 and the sum must equal to 100.0.
   * @return percentages
   */
  @javax.annotation.Nullable
  public Map<String, Double> getPercentages() {
    return percentages;
  }

  public void setPercentages(Map<String, Double> percentages) {
    this.percentages = percentages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrafficPercentStrategy trafficPercentStrategy = (TrafficPercentStrategy) o;
    return Objects.equals(this.percentages, trafficPercentStrategy.percentages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(percentages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrafficPercentStrategy {\n");
    sb.append("    percentages: ").append(toIndentedString(percentages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("percentages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TrafficPercentStrategy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrafficPercentStrategy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrafficPercentStrategy is not found in the empty JSON string", TrafficPercentStrategy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrafficPercentStrategy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrafficPercentStrategy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrafficPercentStrategy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrafficPercentStrategy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrafficPercentStrategy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrafficPercentStrategy.class));

       return (TypeAdapter<T>) new TypeAdapter<TrafficPercentStrategy>() {
           @Override
           public void write(JsonWriter out, TrafficPercentStrategy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrafficPercentStrategy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TrafficPercentStrategy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TrafficPercentStrategy
   * @throws IOException if the JSON string is invalid with respect to TrafficPercentStrategy
   */
  public static TrafficPercentStrategy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrafficPercentStrategy.class);
  }

  /**
   * Convert an instance of TrafficPercentStrategy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

