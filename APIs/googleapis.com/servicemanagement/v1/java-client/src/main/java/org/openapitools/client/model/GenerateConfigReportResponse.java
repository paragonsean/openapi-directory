/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ChangeReport;
import org.openapitools.client.model.Diagnostic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response message for GenerateConfigReport method.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:08.497622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GenerateConfigReportResponse {
  public static final String SERIALIZED_NAME_CHANGE_REPORTS = "changeReports";
  @SerializedName(SERIALIZED_NAME_CHANGE_REPORTS)
  private List<ChangeReport> changeReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_DIAGNOSTICS = "diagnostics";
  @SerializedName(SERIALIZED_NAME_DIAGNOSTICS)
  private List<Diagnostic> diagnostics = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  public GenerateConfigReportResponse() {
  }

  public GenerateConfigReportResponse changeReports(List<ChangeReport> changeReports) {
    this.changeReports = changeReports;
    return this;
  }

  public GenerateConfigReportResponse addChangeReportsItem(ChangeReport changeReportsItem) {
    if (this.changeReports == null) {
      this.changeReports = new ArrayList<>();
    }
    this.changeReports.add(changeReportsItem);
    return this;
  }

  /**
   * list of ChangeReport, each corresponding to comparison between two service configurations.
   * @return changeReports
   */
  @javax.annotation.Nullable
  public List<ChangeReport> getChangeReports() {
    return changeReports;
  }

  public void setChangeReports(List<ChangeReport> changeReports) {
    this.changeReports = changeReports;
  }


  public GenerateConfigReportResponse diagnostics(List<Diagnostic> diagnostics) {
    this.diagnostics = diagnostics;
    return this;
  }

  public GenerateConfigReportResponse addDiagnosticsItem(Diagnostic diagnosticsItem) {
    if (this.diagnostics == null) {
      this.diagnostics = new ArrayList<>();
    }
    this.diagnostics.add(diagnosticsItem);
    return this;
  }

  /**
   * Errors / Linter warnings associated with the service definition this report belongs to.
   * @return diagnostics
   */
  @javax.annotation.Nullable
  public List<Diagnostic> getDiagnostics() {
    return diagnostics;
  }

  public void setDiagnostics(List<Diagnostic> diagnostics) {
    this.diagnostics = diagnostics;
  }


  public GenerateConfigReportResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the service configuration this report belongs to.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public GenerateConfigReportResponse serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * Name of the service this report belongs to.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateConfigReportResponse generateConfigReportResponse = (GenerateConfigReportResponse) o;
    return Objects.equals(this.changeReports, generateConfigReportResponse.changeReports) &&
        Objects.equals(this.diagnostics, generateConfigReportResponse.diagnostics) &&
        Objects.equals(this.id, generateConfigReportResponse.id) &&
        Objects.equals(this.serviceName, generateConfigReportResponse.serviceName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changeReports, diagnostics, id, serviceName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateConfigReportResponse {\n");
    sb.append("    changeReports: ").append(toIndentedString(changeReports)).append("\n");
    sb.append("    diagnostics: ").append(toIndentedString(diagnostics)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changeReports");
    openapiFields.add("diagnostics");
    openapiFields.add("id");
    openapiFields.add("serviceName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateConfigReportResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GenerateConfigReportResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateConfigReportResponse is not found in the empty JSON string", GenerateConfigReportResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateConfigReportResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateConfigReportResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("changeReports") != null && !jsonObj.get("changeReports").isJsonNull()) {
        JsonArray jsonArraychangeReports = jsonObj.getAsJsonArray("changeReports");
        if (jsonArraychangeReports != null) {
          // ensure the json data is an array
          if (!jsonObj.get("changeReports").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `changeReports` to be an array in the JSON string but got `%s`", jsonObj.get("changeReports").toString()));
          }

          // validate the optional field `changeReports` (array)
          for (int i = 0; i < jsonArraychangeReports.size(); i++) {
            ChangeReport.validateJsonElement(jsonArraychangeReports.get(i));
          };
        }
      }
      if (jsonObj.get("diagnostics") != null && !jsonObj.get("diagnostics").isJsonNull()) {
        JsonArray jsonArraydiagnostics = jsonObj.getAsJsonArray("diagnostics");
        if (jsonArraydiagnostics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("diagnostics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `diagnostics` to be an array in the JSON string but got `%s`", jsonObj.get("diagnostics").toString()));
          }

          // validate the optional field `diagnostics` (array)
          for (int i = 0; i < jsonArraydiagnostics.size(); i++) {
            Diagnostic.validateJsonElement(jsonArraydiagnostics.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateConfigReportResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateConfigReportResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateConfigReportResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateConfigReportResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateConfigReportResponse>() {
           @Override
           public void write(JsonWriter out, GenerateConfigReportResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateConfigReportResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateConfigReportResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateConfigReportResponse
   * @throws IOException if the JSON string is invalid with respect to GenerateConfigReportResponse
   */
  public static GenerateConfigReportResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateConfigReportResponse.class);
  }

  /**
   * Convert an instance of GenerateConfigReportResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

