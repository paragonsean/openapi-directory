/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Api;
import org.openapitools.client.model.Authentication;
import org.openapitools.client.model.Backend;
import org.openapitools.client.model.Billing;
import org.openapitools.client.model.Context;
import org.openapitools.client.model.Control;
import org.openapitools.client.model.CustomError;
import org.openapitools.client.model.Documentation;
import org.openapitools.client.model.Endpoint;
import org.openapitools.client.model.Http;
import org.openapitools.client.model.LogDescriptor;
import org.openapitools.client.model.Logging;
import org.openapitools.client.model.MetricDescriptor;
import org.openapitools.client.model.ModelEnum;
import org.openapitools.client.model.MonitoredResourceDescriptor;
import org.openapitools.client.model.Monitoring;
import org.openapitools.client.model.Publishing;
import org.openapitools.client.model.Quota;
import org.openapitools.client.model.SourceInfo;
import org.openapitools.client.model.SystemParameters;
import org.openapitools.client.model.Type;
import org.openapitools.client.model.Usage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * &#x60;Service&#x60; is the root object of Google API service configuration (service config). It describes the basic information about a logical service, such as the service name and the user-facing title, and delegates other aspects to sub-sections. Each sub-section is either a proto message or a repeated proto message that configures a specific aspect, such as auth. For more information, see each proto message definition. Example: type: google.api.Service name: calendar.googleapis.com title: Google Calendar API apis: - name: google.calendar.v3.Calendar visibility: rules: - selector: \&quot;google.calendar.v3.*\&quot; restriction: PREVIEW backend: rules: - selector: \&quot;google.calendar.v3.*\&quot; address: calendar.example.com authentication: providers: - id: google_calendar_auth jwks_uri: https://www.googleapis.com/oauth2/v1/certs issuer: https://securetoken.google.com rules: - selector: \&quot;*\&quot; requirements: provider_id: google_calendar_auth
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:08.497622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Service {
  public static final String SERIALIZED_NAME_APIS = "apis";
  @SerializedName(SERIALIZED_NAME_APIS)
  private List<Api> apis = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION = "authentication";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION)
  private Authentication authentication;

  public static final String SERIALIZED_NAME_BACKEND = "backend";
  @SerializedName(SERIALIZED_NAME_BACKEND)
  private Backend backend;

  public static final String SERIALIZED_NAME_BILLING = "billing";
  @SerializedName(SERIALIZED_NAME_BILLING)
  private Billing billing;

  public static final String SERIALIZED_NAME_CONFIG_VERSION = "configVersion";
  @SerializedName(SERIALIZED_NAME_CONFIG_VERSION)
  private Integer configVersion;

  public static final String SERIALIZED_NAME_CONTEXT = "context";
  @SerializedName(SERIALIZED_NAME_CONTEXT)
  private Context context;

  public static final String SERIALIZED_NAME_CONTROL = "control";
  @SerializedName(SERIALIZED_NAME_CONTROL)
  private Control control;

  public static final String SERIALIZED_NAME_CUSTOM_ERROR = "customError";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ERROR)
  private CustomError customError;

  public static final String SERIALIZED_NAME_DOCUMENTATION = "documentation";
  @SerializedName(SERIALIZED_NAME_DOCUMENTATION)
  private Documentation documentation;

  public static final String SERIALIZED_NAME_ENDPOINTS = "endpoints";
  @SerializedName(SERIALIZED_NAME_ENDPOINTS)
  private List<Endpoint> endpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENUMS = "enums";
  @SerializedName(SERIALIZED_NAME_ENUMS)
  private List<ModelEnum> enums = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP = "http";
  @SerializedName(SERIALIZED_NAME_HTTP)
  private Http http;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOGGING = "logging";
  @SerializedName(SERIALIZED_NAME_LOGGING)
  private Logging logging;

  public static final String SERIALIZED_NAME_LOGS = "logs";
  @SerializedName(SERIALIZED_NAME_LOGS)
  private List<LogDescriptor> logs = new ArrayList<>();

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private List<MetricDescriptor> metrics = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITORED_RESOURCES = "monitoredResources";
  @SerializedName(SERIALIZED_NAME_MONITORED_RESOURCES)
  private List<MonitoredResourceDescriptor> monitoredResources = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITORING = "monitoring";
  @SerializedName(SERIALIZED_NAME_MONITORING)
  private Monitoring monitoring;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCER_PROJECT_ID = "producerProjectId";
  @SerializedName(SERIALIZED_NAME_PRODUCER_PROJECT_ID)
  private String producerProjectId;

  public static final String SERIALIZED_NAME_PUBLISHING = "publishing";
  @SerializedName(SERIALIZED_NAME_PUBLISHING)
  private Publishing publishing;

  public static final String SERIALIZED_NAME_QUOTA = "quota";
  @SerializedName(SERIALIZED_NAME_QUOTA)
  private Quota quota;

  public static final String SERIALIZED_NAME_SOURCE_INFO = "sourceInfo";
  @SerializedName(SERIALIZED_NAME_SOURCE_INFO)
  private SourceInfo sourceInfo;

  public static final String SERIALIZED_NAME_SYSTEM_PARAMETERS = "systemParameters";
  @SerializedName(SERIALIZED_NAME_SYSTEM_PARAMETERS)
  private SystemParameters systemParameters;

  public static final String SERIALIZED_NAME_SYSTEM_TYPES = "systemTypes";
  @SerializedName(SERIALIZED_NAME_SYSTEM_TYPES)
  private List<Type> systemTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPES = "types";
  @SerializedName(SERIALIZED_NAME_TYPES)
  private List<Type> types = new ArrayList<>();

  public static final String SERIALIZED_NAME_USAGE = "usage";
  @SerializedName(SERIALIZED_NAME_USAGE)
  private Usage usage;

  public Service() {
  }

  public Service apis(List<Api> apis) {
    this.apis = apis;
    return this;
  }

  public Service addApisItem(Api apisItem) {
    if (this.apis == null) {
      this.apis = new ArrayList<>();
    }
    this.apis.add(apisItem);
    return this;
  }

  /**
   * A list of API interfaces exported by this service. Only the &#x60;name&#x60; field of the google.protobuf.Api needs to be provided by the configuration author, as the remaining fields will be derived from the IDL during the normalization process. It is an error to specify an API interface here which cannot be resolved against the associated IDL files.
   * @return apis
   */
  @javax.annotation.Nullable
  public List<Api> getApis() {
    return apis;
  }

  public void setApis(List<Api> apis) {
    this.apis = apis;
  }


  public Service authentication(Authentication authentication) {
    this.authentication = authentication;
    return this;
  }

  /**
   * Get authentication
   * @return authentication
   */
  @javax.annotation.Nullable
  public Authentication getAuthentication() {
    return authentication;
  }

  public void setAuthentication(Authentication authentication) {
    this.authentication = authentication;
  }


  public Service backend(Backend backend) {
    this.backend = backend;
    return this;
  }

  /**
   * Get backend
   * @return backend
   */
  @javax.annotation.Nullable
  public Backend getBackend() {
    return backend;
  }

  public void setBackend(Backend backend) {
    this.backend = backend;
  }


  public Service billing(Billing billing) {
    this.billing = billing;
    return this;
  }

  /**
   * Get billing
   * @return billing
   */
  @javax.annotation.Nullable
  public Billing getBilling() {
    return billing;
  }

  public void setBilling(Billing billing) {
    this.billing = billing;
  }


  public Service configVersion(Integer configVersion) {
    this.configVersion = configVersion;
    return this;
  }

  /**
   * Obsolete. Do not use. This field has no semantic meaning. The service config compiler always sets this field to &#x60;3&#x60;.
   * @return configVersion
   */
  @javax.annotation.Nullable
  public Integer getConfigVersion() {
    return configVersion;
  }

  public void setConfigVersion(Integer configVersion) {
    this.configVersion = configVersion;
  }


  public Service context(Context context) {
    this.context = context;
    return this;
  }

  /**
   * Get context
   * @return context
   */
  @javax.annotation.Nullable
  public Context getContext() {
    return context;
  }

  public void setContext(Context context) {
    this.context = context;
  }


  public Service control(Control control) {
    this.control = control;
    return this;
  }

  /**
   * Get control
   * @return control
   */
  @javax.annotation.Nullable
  public Control getControl() {
    return control;
  }

  public void setControl(Control control) {
    this.control = control;
  }


  public Service customError(CustomError customError) {
    this.customError = customError;
    return this;
  }

  /**
   * Get customError
   * @return customError
   */
  @javax.annotation.Nullable
  public CustomError getCustomError() {
    return customError;
  }

  public void setCustomError(CustomError customError) {
    this.customError = customError;
  }


  public Service documentation(Documentation documentation) {
    this.documentation = documentation;
    return this;
  }

  /**
   * Get documentation
   * @return documentation
   */
  @javax.annotation.Nullable
  public Documentation getDocumentation() {
    return documentation;
  }

  public void setDocumentation(Documentation documentation) {
    this.documentation = documentation;
  }


  public Service endpoints(List<Endpoint> endpoints) {
    this.endpoints = endpoints;
    return this;
  }

  public Service addEndpointsItem(Endpoint endpointsItem) {
    if (this.endpoints == null) {
      this.endpoints = new ArrayList<>();
    }
    this.endpoints.add(endpointsItem);
    return this;
  }

  /**
   * Configuration for network endpoints. If this is empty, then an endpoint with the same name as the service is automatically generated to service all defined APIs.
   * @return endpoints
   */
  @javax.annotation.Nullable
  public List<Endpoint> getEndpoints() {
    return endpoints;
  }

  public void setEndpoints(List<Endpoint> endpoints) {
    this.endpoints = endpoints;
  }


  public Service enums(List<ModelEnum> enums) {
    this.enums = enums;
    return this;
  }

  public Service addEnumsItem(ModelEnum enumsItem) {
    if (this.enums == null) {
      this.enums = new ArrayList<>();
    }
    this.enums.add(enumsItem);
    return this;
  }

  /**
   * A list of all enum types included in this API service. Enums referenced directly or indirectly by the &#x60;apis&#x60; are automatically included. Enums which are not referenced but shall be included should be listed here by name by the configuration author. Example: enums: - name: google.someapi.v1.SomeEnum
   * @return enums
   */
  @javax.annotation.Nullable
  public List<ModelEnum> getEnums() {
    return enums;
  }

  public void setEnums(List<ModelEnum> enums) {
    this.enums = enums;
  }


  public Service http(Http http) {
    this.http = http;
    return this;
  }

  /**
   * Get http
   * @return http
   */
  @javax.annotation.Nullable
  public Http getHttp() {
    return http;
  }

  public void setHttp(Http http) {
    this.http = http;
  }


  public Service id(String id) {
    this.id = id;
    return this;
  }

  /**
   * A unique ID for a specific instance of this message, typically assigned by the client for tracking purpose. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If empty, the server may choose to generate one instead.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Service logging(Logging logging) {
    this.logging = logging;
    return this;
  }

  /**
   * Get logging
   * @return logging
   */
  @javax.annotation.Nullable
  public Logging getLogging() {
    return logging;
  }

  public void setLogging(Logging logging) {
    this.logging = logging;
  }


  public Service logs(List<LogDescriptor> logs) {
    this.logs = logs;
    return this;
  }

  public Service addLogsItem(LogDescriptor logsItem) {
    if (this.logs == null) {
      this.logs = new ArrayList<>();
    }
    this.logs.add(logsItem);
    return this;
  }

  /**
   * Defines the logs used by this service.
   * @return logs
   */
  @javax.annotation.Nullable
  public List<LogDescriptor> getLogs() {
    return logs;
  }

  public void setLogs(List<LogDescriptor> logs) {
    this.logs = logs;
  }


  public Service metrics(List<MetricDescriptor> metrics) {
    this.metrics = metrics;
    return this;
  }

  public Service addMetricsItem(MetricDescriptor metricsItem) {
    if (this.metrics == null) {
      this.metrics = new ArrayList<>();
    }
    this.metrics.add(metricsItem);
    return this;
  }

  /**
   * Defines the metrics used by this service.
   * @return metrics
   */
  @javax.annotation.Nullable
  public List<MetricDescriptor> getMetrics() {
    return metrics;
  }

  public void setMetrics(List<MetricDescriptor> metrics) {
    this.metrics = metrics;
  }


  public Service monitoredResources(List<MonitoredResourceDescriptor> monitoredResources) {
    this.monitoredResources = monitoredResources;
    return this;
  }

  public Service addMonitoredResourcesItem(MonitoredResourceDescriptor monitoredResourcesItem) {
    if (this.monitoredResources == null) {
      this.monitoredResources = new ArrayList<>();
    }
    this.monitoredResources.add(monitoredResourcesItem);
    return this;
  }

  /**
   * Defines the monitored resources used by this service. This is required by the Service.monitoring and Service.logging configurations.
   * @return monitoredResources
   */
  @javax.annotation.Nullable
  public List<MonitoredResourceDescriptor> getMonitoredResources() {
    return monitoredResources;
  }

  public void setMonitoredResources(List<MonitoredResourceDescriptor> monitoredResources) {
    this.monitoredResources = monitoredResources;
  }


  public Service monitoring(Monitoring monitoring) {
    this.monitoring = monitoring;
    return this;
  }

  /**
   * Get monitoring
   * @return monitoring
   */
  @javax.annotation.Nullable
  public Monitoring getMonitoring() {
    return monitoring;
  }

  public void setMonitoring(Monitoring monitoring) {
    this.monitoring = monitoring;
  }


  public Service name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The service name, which is a DNS-like logical identifier for the service, such as &#x60;calendar.googleapis.com&#x60;. The service name typically goes through DNS verification to make sure the owner of the service also owns the DNS name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Service producerProjectId(String producerProjectId) {
    this.producerProjectId = producerProjectId;
    return this;
  }

  /**
   * The Google project that owns this service.
   * @return producerProjectId
   */
  @javax.annotation.Nullable
  public String getProducerProjectId() {
    return producerProjectId;
  }

  public void setProducerProjectId(String producerProjectId) {
    this.producerProjectId = producerProjectId;
  }


  public Service publishing(Publishing publishing) {
    this.publishing = publishing;
    return this;
  }

  /**
   * Get publishing
   * @return publishing
   */
  @javax.annotation.Nullable
  public Publishing getPublishing() {
    return publishing;
  }

  public void setPublishing(Publishing publishing) {
    this.publishing = publishing;
  }


  public Service quota(Quota quota) {
    this.quota = quota;
    return this;
  }

  /**
   * Get quota
   * @return quota
   */
  @javax.annotation.Nullable
  public Quota getQuota() {
    return quota;
  }

  public void setQuota(Quota quota) {
    this.quota = quota;
  }


  public Service sourceInfo(SourceInfo sourceInfo) {
    this.sourceInfo = sourceInfo;
    return this;
  }

  /**
   * Get sourceInfo
   * @return sourceInfo
   */
  @javax.annotation.Nullable
  public SourceInfo getSourceInfo() {
    return sourceInfo;
  }

  public void setSourceInfo(SourceInfo sourceInfo) {
    this.sourceInfo = sourceInfo;
  }


  public Service systemParameters(SystemParameters systemParameters) {
    this.systemParameters = systemParameters;
    return this;
  }

  /**
   * Get systemParameters
   * @return systemParameters
   */
  @javax.annotation.Nullable
  public SystemParameters getSystemParameters() {
    return systemParameters;
  }

  public void setSystemParameters(SystemParameters systemParameters) {
    this.systemParameters = systemParameters;
  }


  public Service systemTypes(List<Type> systemTypes) {
    this.systemTypes = systemTypes;
    return this;
  }

  public Service addSystemTypesItem(Type systemTypesItem) {
    if (this.systemTypes == null) {
      this.systemTypes = new ArrayList<>();
    }
    this.systemTypes.add(systemTypesItem);
    return this;
  }

  /**
   * A list of all proto message types included in this API service. It serves similar purpose as [google.api.Service.types], except that these types are not needed by user-defined APIs. Therefore, they will not show up in the generated discovery doc. This field should only be used to define system APIs in ESF.
   * @return systemTypes
   */
  @javax.annotation.Nullable
  public List<Type> getSystemTypes() {
    return systemTypes;
  }

  public void setSystemTypes(List<Type> systemTypes) {
    this.systemTypes = systemTypes;
  }


  public Service title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The product title for this service, it is the name displayed in Google Cloud Console.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Service types(List<Type> types) {
    this.types = types;
    return this;
  }

  public Service addTypesItem(Type typesItem) {
    if (this.types == null) {
      this.types = new ArrayList<>();
    }
    this.types.add(typesItem);
    return this;
  }

  /**
   * A list of all proto message types included in this API service. Types referenced directly or indirectly by the &#x60;apis&#x60; are automatically included. Messages which are not referenced but shall be included, such as types used by the &#x60;google.protobuf.Any&#x60; type, should be listed here by name by the configuration author. Example: types: - name: google.protobuf.Int32
   * @return types
   */
  @javax.annotation.Nullable
  public List<Type> getTypes() {
    return types;
  }

  public void setTypes(List<Type> types) {
    this.types = types;
  }


  public Service usage(Usage usage) {
    this.usage = usage;
    return this;
  }

  /**
   * Get usage
   * @return usage
   */
  @javax.annotation.Nullable
  public Usage getUsage() {
    return usage;
  }

  public void setUsage(Usage usage) {
    this.usage = usage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Service service = (Service) o;
    return Objects.equals(this.apis, service.apis) &&
        Objects.equals(this.authentication, service.authentication) &&
        Objects.equals(this.backend, service.backend) &&
        Objects.equals(this.billing, service.billing) &&
        Objects.equals(this.configVersion, service.configVersion) &&
        Objects.equals(this.context, service.context) &&
        Objects.equals(this.control, service.control) &&
        Objects.equals(this.customError, service.customError) &&
        Objects.equals(this.documentation, service.documentation) &&
        Objects.equals(this.endpoints, service.endpoints) &&
        Objects.equals(this.enums, service.enums) &&
        Objects.equals(this.http, service.http) &&
        Objects.equals(this.id, service.id) &&
        Objects.equals(this.logging, service.logging) &&
        Objects.equals(this.logs, service.logs) &&
        Objects.equals(this.metrics, service.metrics) &&
        Objects.equals(this.monitoredResources, service.monitoredResources) &&
        Objects.equals(this.monitoring, service.monitoring) &&
        Objects.equals(this.name, service.name) &&
        Objects.equals(this.producerProjectId, service.producerProjectId) &&
        Objects.equals(this.publishing, service.publishing) &&
        Objects.equals(this.quota, service.quota) &&
        Objects.equals(this.sourceInfo, service.sourceInfo) &&
        Objects.equals(this.systemParameters, service.systemParameters) &&
        Objects.equals(this.systemTypes, service.systemTypes) &&
        Objects.equals(this.title, service.title) &&
        Objects.equals(this.types, service.types) &&
        Objects.equals(this.usage, service.usage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apis, authentication, backend, billing, configVersion, context, control, customError, documentation, endpoints, enums, http, id, logging, logs, metrics, monitoredResources, monitoring, name, producerProjectId, publishing, quota, sourceInfo, systemParameters, systemTypes, title, types, usage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Service {\n");
    sb.append("    apis: ").append(toIndentedString(apis)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("    backend: ").append(toIndentedString(backend)).append("\n");
    sb.append("    billing: ").append(toIndentedString(billing)).append("\n");
    sb.append("    configVersion: ").append(toIndentedString(configVersion)).append("\n");
    sb.append("    context: ").append(toIndentedString(context)).append("\n");
    sb.append("    control: ").append(toIndentedString(control)).append("\n");
    sb.append("    customError: ").append(toIndentedString(customError)).append("\n");
    sb.append("    documentation: ").append(toIndentedString(documentation)).append("\n");
    sb.append("    endpoints: ").append(toIndentedString(endpoints)).append("\n");
    sb.append("    enums: ").append(toIndentedString(enums)).append("\n");
    sb.append("    http: ").append(toIndentedString(http)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("    logs: ").append(toIndentedString(logs)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    monitoredResources: ").append(toIndentedString(monitoredResources)).append("\n");
    sb.append("    monitoring: ").append(toIndentedString(monitoring)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    producerProjectId: ").append(toIndentedString(producerProjectId)).append("\n");
    sb.append("    publishing: ").append(toIndentedString(publishing)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    sourceInfo: ").append(toIndentedString(sourceInfo)).append("\n");
    sb.append("    systemParameters: ").append(toIndentedString(systemParameters)).append("\n");
    sb.append("    systemTypes: ").append(toIndentedString(systemTypes)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    types: ").append(toIndentedString(types)).append("\n");
    sb.append("    usage: ").append(toIndentedString(usage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apis");
    openapiFields.add("authentication");
    openapiFields.add("backend");
    openapiFields.add("billing");
    openapiFields.add("configVersion");
    openapiFields.add("context");
    openapiFields.add("control");
    openapiFields.add("customError");
    openapiFields.add("documentation");
    openapiFields.add("endpoints");
    openapiFields.add("enums");
    openapiFields.add("http");
    openapiFields.add("id");
    openapiFields.add("logging");
    openapiFields.add("logs");
    openapiFields.add("metrics");
    openapiFields.add("monitoredResources");
    openapiFields.add("monitoring");
    openapiFields.add("name");
    openapiFields.add("producerProjectId");
    openapiFields.add("publishing");
    openapiFields.add("quota");
    openapiFields.add("sourceInfo");
    openapiFields.add("systemParameters");
    openapiFields.add("systemTypes");
    openapiFields.add("title");
    openapiFields.add("types");
    openapiFields.add("usage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Service
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Service.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Service is not found in the empty JSON string", Service.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Service.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Service` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("apis") != null && !jsonObj.get("apis").isJsonNull()) {
        JsonArray jsonArrayapis = jsonObj.getAsJsonArray("apis");
        if (jsonArrayapis != null) {
          // ensure the json data is an array
          if (!jsonObj.get("apis").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `apis` to be an array in the JSON string but got `%s`", jsonObj.get("apis").toString()));
          }

          // validate the optional field `apis` (array)
          for (int i = 0; i < jsonArrayapis.size(); i++) {
            Api.validateJsonElement(jsonArrayapis.get(i));
          };
        }
      }
      // validate the optional field `authentication`
      if (jsonObj.get("authentication") != null && !jsonObj.get("authentication").isJsonNull()) {
        Authentication.validateJsonElement(jsonObj.get("authentication"));
      }
      // validate the optional field `backend`
      if (jsonObj.get("backend") != null && !jsonObj.get("backend").isJsonNull()) {
        Backend.validateJsonElement(jsonObj.get("backend"));
      }
      // validate the optional field `billing`
      if (jsonObj.get("billing") != null && !jsonObj.get("billing").isJsonNull()) {
        Billing.validateJsonElement(jsonObj.get("billing"));
      }
      // validate the optional field `context`
      if (jsonObj.get("context") != null && !jsonObj.get("context").isJsonNull()) {
        Context.validateJsonElement(jsonObj.get("context"));
      }
      // validate the optional field `control`
      if (jsonObj.get("control") != null && !jsonObj.get("control").isJsonNull()) {
        Control.validateJsonElement(jsonObj.get("control"));
      }
      // validate the optional field `customError`
      if (jsonObj.get("customError") != null && !jsonObj.get("customError").isJsonNull()) {
        CustomError.validateJsonElement(jsonObj.get("customError"));
      }
      // validate the optional field `documentation`
      if (jsonObj.get("documentation") != null && !jsonObj.get("documentation").isJsonNull()) {
        Documentation.validateJsonElement(jsonObj.get("documentation"));
      }
      if (jsonObj.get("endpoints") != null && !jsonObj.get("endpoints").isJsonNull()) {
        JsonArray jsonArrayendpoints = jsonObj.getAsJsonArray("endpoints");
        if (jsonArrayendpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("endpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `endpoints` to be an array in the JSON string but got `%s`", jsonObj.get("endpoints").toString()));
          }

          // validate the optional field `endpoints` (array)
          for (int i = 0; i < jsonArrayendpoints.size(); i++) {
            Endpoint.validateJsonElement(jsonArrayendpoints.get(i));
          };
        }
      }
      if (jsonObj.get("enums") != null && !jsonObj.get("enums").isJsonNull()) {
        JsonArray jsonArrayenums = jsonObj.getAsJsonArray("enums");
        if (jsonArrayenums != null) {
          // ensure the json data is an array
          if (!jsonObj.get("enums").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `enums` to be an array in the JSON string but got `%s`", jsonObj.get("enums").toString()));
          }

          // validate the optional field `enums` (array)
          for (int i = 0; i < jsonArrayenums.size(); i++) {
            ModelEnum.validateJsonElement(jsonArrayenums.get(i));
          };
        }
      }
      // validate the optional field `http`
      if (jsonObj.get("http") != null && !jsonObj.get("http").isJsonNull()) {
        Http.validateJsonElement(jsonObj.get("http"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `logging`
      if (jsonObj.get("logging") != null && !jsonObj.get("logging").isJsonNull()) {
        Logging.validateJsonElement(jsonObj.get("logging"));
      }
      if (jsonObj.get("logs") != null && !jsonObj.get("logs").isJsonNull()) {
        JsonArray jsonArraylogs = jsonObj.getAsJsonArray("logs");
        if (jsonArraylogs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("logs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `logs` to be an array in the JSON string but got `%s`", jsonObj.get("logs").toString()));
          }

          // validate the optional field `logs` (array)
          for (int i = 0; i < jsonArraylogs.size(); i++) {
            LogDescriptor.validateJsonElement(jsonArraylogs.get(i));
          };
        }
      }
      if (jsonObj.get("metrics") != null && !jsonObj.get("metrics").isJsonNull()) {
        JsonArray jsonArraymetrics = jsonObj.getAsJsonArray("metrics");
        if (jsonArraymetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metrics` to be an array in the JSON string but got `%s`", jsonObj.get("metrics").toString()));
          }

          // validate the optional field `metrics` (array)
          for (int i = 0; i < jsonArraymetrics.size(); i++) {
            MetricDescriptor.validateJsonElement(jsonArraymetrics.get(i));
          };
        }
      }
      if (jsonObj.get("monitoredResources") != null && !jsonObj.get("monitoredResources").isJsonNull()) {
        JsonArray jsonArraymonitoredResources = jsonObj.getAsJsonArray("monitoredResources");
        if (jsonArraymonitoredResources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monitoredResources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monitoredResources` to be an array in the JSON string but got `%s`", jsonObj.get("monitoredResources").toString()));
          }

          // validate the optional field `monitoredResources` (array)
          for (int i = 0; i < jsonArraymonitoredResources.size(); i++) {
            MonitoredResourceDescriptor.validateJsonElement(jsonArraymonitoredResources.get(i));
          };
        }
      }
      // validate the optional field `monitoring`
      if (jsonObj.get("monitoring") != null && !jsonObj.get("monitoring").isJsonNull()) {
        Monitoring.validateJsonElement(jsonObj.get("monitoring"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("producerProjectId") != null && !jsonObj.get("producerProjectId").isJsonNull()) && !jsonObj.get("producerProjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `producerProjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("producerProjectId").toString()));
      }
      // validate the optional field `publishing`
      if (jsonObj.get("publishing") != null && !jsonObj.get("publishing").isJsonNull()) {
        Publishing.validateJsonElement(jsonObj.get("publishing"));
      }
      // validate the optional field `quota`
      if (jsonObj.get("quota") != null && !jsonObj.get("quota").isJsonNull()) {
        Quota.validateJsonElement(jsonObj.get("quota"));
      }
      // validate the optional field `sourceInfo`
      if (jsonObj.get("sourceInfo") != null && !jsonObj.get("sourceInfo").isJsonNull()) {
        SourceInfo.validateJsonElement(jsonObj.get("sourceInfo"));
      }
      // validate the optional field `systemParameters`
      if (jsonObj.get("systemParameters") != null && !jsonObj.get("systemParameters").isJsonNull()) {
        SystemParameters.validateJsonElement(jsonObj.get("systemParameters"));
      }
      if (jsonObj.get("systemTypes") != null && !jsonObj.get("systemTypes").isJsonNull()) {
        JsonArray jsonArraysystemTypes = jsonObj.getAsJsonArray("systemTypes");
        if (jsonArraysystemTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("systemTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `systemTypes` to be an array in the JSON string but got `%s`", jsonObj.get("systemTypes").toString()));
          }

          // validate the optional field `systemTypes` (array)
          for (int i = 0; i < jsonArraysystemTypes.size(); i++) {
            Type.validateJsonElement(jsonArraysystemTypes.get(i));
          };
        }
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("types") != null && !jsonObj.get("types").isJsonNull()) {
        JsonArray jsonArraytypes = jsonObj.getAsJsonArray("types");
        if (jsonArraytypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("types").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `types` to be an array in the JSON string but got `%s`", jsonObj.get("types").toString()));
          }

          // validate the optional field `types` (array)
          for (int i = 0; i < jsonArraytypes.size(); i++) {
            Type.validateJsonElement(jsonArraytypes.get(i));
          };
        }
      }
      // validate the optional field `usage`
      if (jsonObj.get("usage") != null && !jsonObj.get("usage").isJsonNull()) {
        Usage.validateJsonElement(jsonObj.get("usage"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Service.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Service' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Service> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Service.class));

       return (TypeAdapter<T>) new TypeAdapter<Service>() {
           @Override
           public void write(JsonWriter out, Service value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Service read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Service given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Service
   * @throws IOException if the JSON string is invalid with respect to Service
   */
  public static Service fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Service.class);
  }

  /**
   * Convert an instance of Service to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

