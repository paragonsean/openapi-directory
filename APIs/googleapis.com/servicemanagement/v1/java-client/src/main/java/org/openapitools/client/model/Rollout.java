/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.TrafficPercentStrategy;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A rollout resource that defines how service configuration versions are pushed to control plane systems. Typically, you create a new version of the service config, and then create a Rollout to push the service config.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:08.497622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Rollout {
  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_CREATED_BY = "createdBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_DELETE_SERVICE_STRATEGY = "deleteServiceStrategy";
  @SerializedName(SERIALIZED_NAME_DELETE_SERVICE_STRATEGY)
  private Object deleteServiceStrategy;

  public static final String SERIALIZED_NAME_ROLLOUT_ID = "rolloutId";
  @SerializedName(SERIALIZED_NAME_ROLLOUT_ID)
  private String rolloutId;

  public static final String SERIALIZED_NAME_SERVICE_NAME = "serviceName";
  @SerializedName(SERIALIZED_NAME_SERVICE_NAME)
  private String serviceName;

  /**
   * The status of this rollout. Readonly. In case of a failed rollout, the system will automatically rollback to the current Rollout version. Readonly.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ROLLOUT_STATUS_UNSPECIFIED("ROLLOUT_STATUS_UNSPECIFIED"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    SUCCESS("SUCCESS"),
    
    CANCELLED("CANCELLED"),
    
    FAILED("FAILED"),
    
    PENDING("PENDING"),
    
    FAILED_ROLLED_BACK("FAILED_ROLLED_BACK");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TRAFFIC_PERCENT_STRATEGY = "trafficPercentStrategy";
  @SerializedName(SERIALIZED_NAME_TRAFFIC_PERCENT_STRATEGY)
  private TrafficPercentStrategy trafficPercentStrategy;

  public Rollout() {
  }

  public Rollout createTime(String createTime) {
    this.createTime = createTime;
    return this;
  }

  /**
   * Creation time of the rollout. Readonly.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }

  public void setCreateTime(String createTime) {
    this.createTime = createTime;
  }


  public Rollout createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The user who created the Rollout. Readonly.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Rollout deleteServiceStrategy(Object deleteServiceStrategy) {
    this.deleteServiceStrategy = deleteServiceStrategy;
    return this;
  }

  /**
   * Strategy used to delete a service. This strategy is a placeholder only used by the system generated rollout to delete a service.
   * @return deleteServiceStrategy
   */
  @javax.annotation.Nullable
  public Object getDeleteServiceStrategy() {
    return deleteServiceStrategy;
  }

  public void setDeleteServiceStrategy(Object deleteServiceStrategy) {
    this.deleteServiceStrategy = deleteServiceStrategy;
  }


  public Rollout rolloutId(String rolloutId) {
    this.rolloutId = rolloutId;
    return this;
  }

  /**
   * Optional. Unique identifier of this Rollout. Must be no longer than 63 characters and only lower case letters, digits, &#39;.&#39;, &#39;_&#39; and &#39;-&#39; are allowed. If not specified by client, the server will generate one. The generated id will have the form of , where \&quot;date\&quot; is the create date in ISO 8601 format. \&quot;revision number\&quot; is a monotonically increasing positive number that is reset every day for each service. An example of the generated rollout_id is &#39;2016-02-16r1&#39;
   * @return rolloutId
   */
  @javax.annotation.Nullable
  public String getRolloutId() {
    return rolloutId;
  }

  public void setRolloutId(String rolloutId) {
    this.rolloutId = rolloutId;
  }


  public Rollout serviceName(String serviceName) {
    this.serviceName = serviceName;
    return this;
  }

  /**
   * The name of the service associated with this Rollout.
   * @return serviceName
   */
  @javax.annotation.Nullable
  public String getServiceName() {
    return serviceName;
  }

  public void setServiceName(String serviceName) {
    this.serviceName = serviceName;
  }


  public Rollout status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The status of this rollout. Readonly. In case of a failed rollout, the system will automatically rollback to the current Rollout version. Readonly.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Rollout trafficPercentStrategy(TrafficPercentStrategy trafficPercentStrategy) {
    this.trafficPercentStrategy = trafficPercentStrategy;
    return this;
  }

  /**
   * Get trafficPercentStrategy
   * @return trafficPercentStrategy
   */
  @javax.annotation.Nullable
  public TrafficPercentStrategy getTrafficPercentStrategy() {
    return trafficPercentStrategy;
  }

  public void setTrafficPercentStrategy(TrafficPercentStrategy trafficPercentStrategy) {
    this.trafficPercentStrategy = trafficPercentStrategy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rollout rollout = (Rollout) o;
    return Objects.equals(this.createTime, rollout.createTime) &&
        Objects.equals(this.createdBy, rollout.createdBy) &&
        Objects.equals(this.deleteServiceStrategy, rollout.deleteServiceStrategy) &&
        Objects.equals(this.rolloutId, rollout.rolloutId) &&
        Objects.equals(this.serviceName, rollout.serviceName) &&
        Objects.equals(this.status, rollout.status) &&
        Objects.equals(this.trafficPercentStrategy, rollout.trafficPercentStrategy);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createTime, createdBy, deleteServiceStrategy, rolloutId, serviceName, status, trafficPercentStrategy);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rollout {\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    deleteServiceStrategy: ").append(toIndentedString(deleteServiceStrategy)).append("\n");
    sb.append("    rolloutId: ").append(toIndentedString(rolloutId)).append("\n");
    sb.append("    serviceName: ").append(toIndentedString(serviceName)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trafficPercentStrategy: ").append(toIndentedString(trafficPercentStrategy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createTime");
    openapiFields.add("createdBy");
    openapiFields.add("deleteServiceStrategy");
    openapiFields.add("rolloutId");
    openapiFields.add("serviceName");
    openapiFields.add("status");
    openapiFields.add("trafficPercentStrategy");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Rollout
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Rollout.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Rollout is not found in the empty JSON string", Rollout.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Rollout.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Rollout` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("createdBy") != null && !jsonObj.get("createdBy").isJsonNull()) && !jsonObj.get("createdBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdBy").toString()));
      }
      if ((jsonObj.get("rolloutId") != null && !jsonObj.get("rolloutId").isJsonNull()) && !jsonObj.get("rolloutId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rolloutId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rolloutId").toString()));
      }
      if ((jsonObj.get("serviceName") != null && !jsonObj.get("serviceName").isJsonNull()) && !jsonObj.get("serviceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceName").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `trafficPercentStrategy`
      if (jsonObj.get("trafficPercentStrategy") != null && !jsonObj.get("trafficPercentStrategy").isJsonNull()) {
        TrafficPercentStrategy.validateJsonElement(jsonObj.get("trafficPercentStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Rollout.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Rollout' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Rollout> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Rollout.class));

       return (TypeAdapter<T>) new TypeAdapter<Rollout>() {
           @Override
           public void write(JsonWriter out, Rollout value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Rollout read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Rollout given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Rollout
   * @throws IOException if the JSON string is invalid with respect to Rollout
   */
  public static Rollout fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Rollout.class);
  }

  /**
   * Convert an instance of Rollout to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

