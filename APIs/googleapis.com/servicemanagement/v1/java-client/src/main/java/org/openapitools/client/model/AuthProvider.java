/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JwtLocation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for an authentication provider, including support for [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:08.497622-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AuthProvider {
  public static final String SERIALIZED_NAME_AUDIENCES = "audiences";
  @SerializedName(SERIALIZED_NAME_AUDIENCES)
  private String audiences;

  public static final String SERIALIZED_NAME_AUTHORIZATION_URL = "authorizationUrl";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATION_URL)
  private String authorizationUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  private String issuer;

  public static final String SERIALIZED_NAME_JWKS_URI = "jwksUri";
  @SerializedName(SERIALIZED_NAME_JWKS_URI)
  private String jwksUri;

  public static final String SERIALIZED_NAME_JWT_LOCATIONS = "jwtLocations";
  @SerializedName(SERIALIZED_NAME_JWT_LOCATIONS)
  private List<JwtLocation> jwtLocations = new ArrayList<>();

  public AuthProvider() {
  }

  public AuthProvider audiences(String audiences) {
    this.audiences = audiences;
    return this;
  }

  /**
   * The list of JWT [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3). that are allowed to access. A JWT containing any of these audiences will be accepted. When this setting is absent, JWTs with audiences: - \&quot;https://[service.name]/[google.protobuf.Api.name]\&quot; - \&quot;https://[service.name]/\&quot; will be accepted. For example, if no audiences are in the setting, LibraryService API will accept JWTs with the following audiences: - https://library-example.googleapis.com/google.example.library.v1.LibraryService - https://library-example.googleapis.com/ Example: audiences: bookstore_android.apps.googleusercontent.com, bookstore_web.apps.googleusercontent.com
   * @return audiences
   */
  @javax.annotation.Nullable
  public String getAudiences() {
    return audiences;
  }

  public void setAudiences(String audiences) {
    this.audiences = audiences;
  }


  public AuthProvider authorizationUrl(String authorizationUrl) {
    this.authorizationUrl = authorizationUrl;
    return this;
  }

  /**
   * Redirect URL if JWT token is required but not present or is expired. Implement authorizationUrl of securityDefinitions in OpenAPI spec.
   * @return authorizationUrl
   */
  @javax.annotation.Nullable
  public String getAuthorizationUrl() {
    return authorizationUrl;
  }

  public void setAuthorizationUrl(String authorizationUrl) {
    this.authorizationUrl = authorizationUrl;
  }


  public AuthProvider id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique identifier of the auth provider. It will be referred to by &#x60;AuthRequirement.provider_id&#x60;. Example: \&quot;bookstore_auth\&quot;.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AuthProvider issuer(String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Identifies the principal that issued the JWT. See https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1 Usually a URL or an email address. Example: https://securetoken.google.com Example: 1234567-compute@developer.gserviceaccount.com
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(String issuer) {
    this.issuer = issuer;
  }


  public AuthProvider jwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
    return this;
  }

  /**
   * URL of the provider&#39;s public key set to validate signature of the JWT. See [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata). Optional if the key set document: - can be retrieved from [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html) of the issuer. - can be inferred from the email domain of the issuer (e.g. a Google service account). Example: https://www.googleapis.com/oauth2/v1/certs
   * @return jwksUri
   */
  @javax.annotation.Nullable
  public String getJwksUri() {
    return jwksUri;
  }

  public void setJwksUri(String jwksUri) {
    this.jwksUri = jwksUri;
  }


  public AuthProvider jwtLocations(List<JwtLocation> jwtLocations) {
    this.jwtLocations = jwtLocations;
    return this;
  }

  public AuthProvider addJwtLocationsItem(JwtLocation jwtLocationsItem) {
    if (this.jwtLocations == null) {
      this.jwtLocations = new ArrayList<>();
    }
    this.jwtLocations.add(jwtLocationsItem);
    return this;
  }

  /**
   * Defines the locations to extract the JWT. For now it is only used by the Cloud Endpoints to store the OpenAPI extension [x-google-jwt-locations] (https://cloud.google.com/endpoints/docs/openapi/openapi-extensions#x-google-jwt-locations) JWT locations can be one of HTTP headers, URL query parameters or cookies. The rule is that the first match wins. If not specified, default to use following 3 locations: 1) Authorization: Bearer 2) x-goog-iap-jwt-assertion 3) access_token query parameter Default locations can be specified as followings: jwt_locations: - header: Authorization value_prefix: \&quot;Bearer \&quot; - header: x-goog-iap-jwt-assertion - query: access_token
   * @return jwtLocations
   */
  @javax.annotation.Nullable
  public List<JwtLocation> getJwtLocations() {
    return jwtLocations;
  }

  public void setJwtLocations(List<JwtLocation> jwtLocations) {
    this.jwtLocations = jwtLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthProvider authProvider = (AuthProvider) o;
    return Objects.equals(this.audiences, authProvider.audiences) &&
        Objects.equals(this.authorizationUrl, authProvider.authorizationUrl) &&
        Objects.equals(this.id, authProvider.id) &&
        Objects.equals(this.issuer, authProvider.issuer) &&
        Objects.equals(this.jwksUri, authProvider.jwksUri) &&
        Objects.equals(this.jwtLocations, authProvider.jwtLocations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audiences, authorizationUrl, id, issuer, jwksUri, jwtLocations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthProvider {\n");
    sb.append("    audiences: ").append(toIndentedString(audiences)).append("\n");
    sb.append("    authorizationUrl: ").append(toIndentedString(authorizationUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    jwksUri: ").append(toIndentedString(jwksUri)).append("\n");
    sb.append("    jwtLocations: ").append(toIndentedString(jwtLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audiences");
    openapiFields.add("authorizationUrl");
    openapiFields.add("id");
    openapiFields.add("issuer");
    openapiFields.add("jwksUri");
    openapiFields.add("jwtLocations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthProvider is not found in the empty JSON string", AuthProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audiences") != null && !jsonObj.get("audiences").isJsonNull()) && !jsonObj.get("audiences").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audiences` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audiences").toString()));
      }
      if ((jsonObj.get("authorizationUrl") != null && !jsonObj.get("authorizationUrl").isJsonNull()) && !jsonObj.get("authorizationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `authorizationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("authorizationUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("jwksUri") != null && !jsonObj.get("jwksUri").isJsonNull()) && !jsonObj.get("jwksUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jwksUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jwksUri").toString()));
      }
      if (jsonObj.get("jwtLocations") != null && !jsonObj.get("jwtLocations").isJsonNull()) {
        JsonArray jsonArrayjwtLocations = jsonObj.getAsJsonArray("jwtLocations");
        if (jsonArrayjwtLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jwtLocations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jwtLocations` to be an array in the JSON string but got `%s`", jsonObj.get("jwtLocations").toString()));
          }

          // validate the optional field `jwtLocations` (array)
          for (int i = 0; i < jsonArrayjwtLocations.size(); i++) {
            JwtLocation.validateJsonElement(jsonArrayjwtLocations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthProvider>() {
           @Override
           public void write(JsonWriter out, AuthProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthProvider
   * @throws IOException if the JSON string is invalid with respect to AuthProvider
   */
  public static AuthProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthProvider.class);
  }

  /**
   * Convert an instance of AuthProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

