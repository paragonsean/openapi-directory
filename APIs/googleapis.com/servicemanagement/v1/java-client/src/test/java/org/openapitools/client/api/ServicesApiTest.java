/*
 * Service Management API
 * Google Service Management allows service producers to publish their services on Google Cloud Platform so that they can be discovered and used by service consumers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenerateConfigReportRequest;
import org.openapitools.client.model.GenerateConfigReportResponse;
import org.openapitools.client.model.GetIamPolicyRequest;
import org.openapitools.client.model.ListServiceConfigsResponse;
import org.openapitools.client.model.ListServiceRolloutsResponse;
import org.openapitools.client.model.ListServicesResponse;
import org.openapitools.client.model.ManagedService;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.Policy;
import org.openapitools.client.model.Rollout;
import org.openapitools.client.model.Service;
import org.openapitools.client.model.SetIamPolicyRequest;
import org.openapitools.client.model.SubmitConfigSourceRequest;
import org.openapitools.client.model.TestIamPermissionsRequest;
import org.openapitools.client.model.TestIamPermissionsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServicesApi
 */
@Disabled
public class ServicesApiTest {

    private final ServicesApi api = new ServicesApi();

    /**
     * Creates a new service configuration (version) for a managed service. This method only stores the service configuration. To roll out the service configuration to backend systems please call CreateServiceRollout. Only the 100 most recent service configurations and ones referenced by existing rollouts are kept for each service. The rest will be deleted eventually.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConfigsCreateTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Service service = null;
        Service response = api.servicemanagementServicesConfigsCreate(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, service);
        // TODO: test validations
    }

    /**
     * Gets a service configuration (version) for a managed service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConfigsGetTest() throws ApiException {
        String serviceName = null;
        String configId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        Service response = api.servicemanagementServicesConfigsGet(serviceName, configId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * Lists the history of the service configuration for a managed service, from the newest to the oldest.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConfigsListTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceConfigsResponse response = api.servicemanagementServicesConfigsList(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a new service configuration (version) for a managed service based on user-supplied configuration source files (for example: OpenAPI Specification). This method stores the source configurations as well as the generated service configuration. To rollout the service configuration to other services, please call CreateServiceRollout. Only the 100 most recent configuration sources and ones referenced by existing service configurtions are kept for each service. The rest will be deleted eventually. Operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConfigsSubmitTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SubmitConfigSourceRequest submitConfigSourceRequest = null;
        Operation response = api.servicemanagementServicesConfigsSubmit(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, submitConfigSourceRequest);
        // TODO: test validations
    }

    /**
     * Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConsumersGetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetIamPolicyRequest getIamPolicyRequest = null;
        Policy response = api.servicemanagementServicesConsumersGetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, getIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Sets the access control policy on the specified resource. Replaces any existing policy. Can return &#x60;NOT_FOUND&#x60;, &#x60;INVALID_ARGUMENT&#x60;, and &#x60;PERMISSION_DENIED&#x60; errors.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConsumersSetIamPolicyTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SetIamPolicyRequest setIamPolicyRequest = null;
        Policy response = api.servicemanagementServicesConsumersSetIamPolicy(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, setIamPolicyRequest);
        // TODO: test validations
    }

    /**
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesConsumersTestIamPermissionsTest() throws ApiException {
        String resource = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        TestIamPermissionsRequest testIamPermissionsRequest = null;
        TestIamPermissionsResponse response = api.servicemanagementServicesConsumersTestIamPermissions(resource, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, testIamPermissionsRequest);
        // TODO: test validations
    }

    /**
     * Creates a new managed service. A managed service is immutable, and is subject to mandatory 30-day data retention. You cannot move a service or recreate it within 30 days after deletion. One producer project can own no more than 500 services. For security and reliability purposes, a production service should be hosted in a dedicated producer project. Operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManagedService managedService = null;
        Operation response = api.servicemanagementServicesCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, managedService);
        // TODO: test validations
    }

    /**
     * Deletes a managed service. This method will change the service to the &#x60;Soft-Delete&#x60; state for 30 days. Within this period, service producers may call UndeleteService to restore the service. After 30 days, the service will be permanently deleted. Operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesDeleteTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.servicemanagementServicesDelete(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Generates and returns a report (errors, warnings and changes from existing configurations) associated with GenerateConfigReportRequest.new_value If GenerateConfigReportRequest.old_value is specified, GenerateConfigReportRequest will contain a single ChangeReport based on the comparison between GenerateConfigReportRequest.new_value and GenerateConfigReportRequest.old_value. If GenerateConfigReportRequest.old_value is not specified, this method will compare GenerateConfigReportRequest.new_value with the last pushed service configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesGenerateConfigReportTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GenerateConfigReportRequest generateConfigReportRequest = null;
        GenerateConfigReportResponse response = api.servicemanagementServicesGenerateConfigReport($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, generateConfigReportRequest);
        // TODO: test validations
    }

    /**
     * Gets a managed service. Authentication is required unless the service is public.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesGetTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ManagedService response = api.servicemanagementServicesGet(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets a service configuration (version) for a managed service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesGetConfigTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String configId = null;
        String view = null;
        Service response = api.servicemanagementServicesGetConfig(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, configId, view);
        // TODO: test validations
    }

    /**
     * Lists managed services. Returns all public services. For authenticated users, also returns all services the calling user has \&quot;servicemanagement.services.get\&quot; permission for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String consumerId = null;
        Integer pageSize = null;
        String pageToken = null;
        String producerProjectId = null;
        ListServicesResponse response = api.servicemanagementServicesList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, consumerId, pageSize, pageToken, producerProjectId);
        // TODO: test validations
    }

    /**
     * Creates a new service configuration rollout. Based on rollout, the Google Service Management will roll out the service configurations to different backend services. For example, the logging configuration will be pushed to Google Cloud Logging. Please note that any previous pending and running Rollouts and associated Operations will be automatically cancelled so that the latest Rollout will not be blocked by previous Rollouts. Only the 100 most recent (in any state) and the last 10 successful (if not already part of the set of 100 most recent) rollouts are kept for each service. The rest will be deleted eventually. Operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesRolloutsCreateTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Rollout rollout = null;
        Operation response = api.servicemanagementServicesRolloutsCreate(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, rollout);
        // TODO: test validations
    }

    /**
     * Gets a service configuration rollout.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesRolloutsGetTest() throws ApiException {
        String serviceName = null;
        String rolloutId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Rollout response = api.servicemanagementServicesRolloutsGet(serviceName, rolloutId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the history of the service configuration rollouts for a managed service, from the newest to the oldest.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesRolloutsListTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListServiceRolloutsResponse response = api.servicemanagementServicesRolloutsList(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Revives a previously deleted managed service. The method restores the service using the configuration at the time the service was deleted. The target service must exist and must have been deleted within the last 30 days. Operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicemanagementServicesUndeleteTest() throws ApiException {
        String serviceName = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.servicemanagementServicesUndelete(serviceName, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
