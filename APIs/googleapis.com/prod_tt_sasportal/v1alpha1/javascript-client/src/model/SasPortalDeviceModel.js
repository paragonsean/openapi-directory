/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SasPortalDeviceModel model module.
 * @module model/SasPortalDeviceModel
 * @version v1alpha1
 */
class SasPortalDeviceModel {
    /**
     * Constructs a new <code>SasPortalDeviceModel</code>.
     * Information about the model of the device.
     * @alias module:model/SasPortalDeviceModel
     */
    constructor() { 
        
        SasPortalDeviceModel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SasPortalDeviceModel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SasPortalDeviceModel} obj Optional instance to populate.
     * @return {module:model/SasPortalDeviceModel} The populated <code>SasPortalDeviceModel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SasPortalDeviceModel();

            if (data.hasOwnProperty('firmwareVersion')) {
                obj['firmwareVersion'] = ApiClient.convertToType(data['firmwareVersion'], 'String');
            }
            if (data.hasOwnProperty('hardwareVersion')) {
                obj['hardwareVersion'] = ApiClient.convertToType(data['hardwareVersion'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('softwareVersion')) {
                obj['softwareVersion'] = ApiClient.convertToType(data['softwareVersion'], 'String');
            }
            if (data.hasOwnProperty('vendor')) {
                obj['vendor'] = ApiClient.convertToType(data['vendor'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SasPortalDeviceModel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SasPortalDeviceModel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['firmwareVersion'] && !(typeof data['firmwareVersion'] === 'string' || data['firmwareVersion'] instanceof String)) {
            throw new Error("Expected the field `firmwareVersion` to be a primitive type in the JSON string but got " + data['firmwareVersion']);
        }
        // ensure the json data is a string
        if (data['hardwareVersion'] && !(typeof data['hardwareVersion'] === 'string' || data['hardwareVersion'] instanceof String)) {
            throw new Error("Expected the field `hardwareVersion` to be a primitive type in the JSON string but got " + data['hardwareVersion']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['softwareVersion'] && !(typeof data['softwareVersion'] === 'string' || data['softwareVersion'] instanceof String)) {
            throw new Error("Expected the field `softwareVersion` to be a primitive type in the JSON string but got " + data['softwareVersion']);
        }
        // ensure the json data is a string
        if (data['vendor'] && !(typeof data['vendor'] === 'string' || data['vendor'] instanceof String)) {
            throw new Error("Expected the field `vendor` to be a primitive type in the JSON string but got " + data['vendor']);
        }

        return true;
    }


}



/**
 * The firmware version of the device.
 * @member {String} firmwareVersion
 */
SasPortalDeviceModel.prototype['firmwareVersion'] = undefined;

/**
 * The hardware version of the device.
 * @member {String} hardwareVersion
 */
SasPortalDeviceModel.prototype['hardwareVersion'] = undefined;

/**
 * The name of the device model.
 * @member {String} name
 */
SasPortalDeviceModel.prototype['name'] = undefined;

/**
 * The software version of the device.
 * @member {String} softwareVersion
 */
SasPortalDeviceModel.prototype['softwareVersion'] = undefined;

/**
 * The name of the device vendor.
 * @member {String} vendor
 */
SasPortalDeviceModel.prototype['vendor'] = undefined;






export default SasPortalDeviceModel;

