/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SasPortalDeviceAirInterface from './SasPortalDeviceAirInterface';
import SasPortalDeviceModel from './SasPortalDeviceModel';
import SasPortalInstallationParams from './SasPortalInstallationParams';

/**
 * The SasPortalDeviceConfig model module.
 * @module model/SasPortalDeviceConfig
 * @version v1alpha1
 */
class SasPortalDeviceConfig {
    /**
     * Constructs a new <code>SasPortalDeviceConfig</code>.
     * Information about the device configuration.
     * @alias module:model/SasPortalDeviceConfig
     */
    constructor() { 
        
        SasPortalDeviceConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SasPortalDeviceConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SasPortalDeviceConfig} obj Optional instance to populate.
     * @return {module:model/SasPortalDeviceConfig} The populated <code>SasPortalDeviceConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SasPortalDeviceConfig();

            if (data.hasOwnProperty('airInterface')) {
                obj['airInterface'] = SasPortalDeviceAirInterface.constructFromObject(data['airInterface']);
            }
            if (data.hasOwnProperty('callSign')) {
                obj['callSign'] = ApiClient.convertToType(data['callSign'], 'String');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('installationParams')) {
                obj['installationParams'] = SasPortalInstallationParams.constructFromObject(data['installationParams']);
            }
            if (data.hasOwnProperty('isSigned')) {
                obj['isSigned'] = ApiClient.convertToType(data['isSigned'], 'Boolean');
            }
            if (data.hasOwnProperty('measurementCapabilities')) {
                obj['measurementCapabilities'] = ApiClient.convertToType(data['measurementCapabilities'], ['String']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = SasPortalDeviceModel.constructFromObject(data['model']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SasPortalDeviceConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SasPortalDeviceConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `airInterface`
        if (data['airInterface']) { // data not null
          SasPortalDeviceAirInterface.validateJSON(data['airInterface']);
        }
        // ensure the json data is a string
        if (data['callSign'] && !(typeof data['callSign'] === 'string' || data['callSign'] instanceof String)) {
            throw new Error("Expected the field `callSign` to be a primitive type in the JSON string but got " + data['callSign']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `installationParams`
        if (data['installationParams']) { // data not null
          SasPortalInstallationParams.validateJSON(data['installationParams']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['measurementCapabilities'])) {
            throw new Error("Expected the field `measurementCapabilities` to be an array in the JSON data but got " + data['measurementCapabilities']);
        }
        // validate the optional field `model`
        if (data['model']) { // data not null
          SasPortalDeviceModel.validateJSON(data['model']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * @member {module:model/SasPortalDeviceAirInterface} airInterface
 */
SasPortalDeviceConfig.prototype['airInterface'] = undefined;

/**
 * The call sign of the device operator.
 * @member {String} callSign
 */
SasPortalDeviceConfig.prototype['callSign'] = undefined;

/**
 * FCC category of the device.
 * @member {module:model/SasPortalDeviceConfig.CategoryEnum} category
 */
SasPortalDeviceConfig.prototype['category'] = undefined;

/**
 * @member {module:model/SasPortalInstallationParams} installationParams
 */
SasPortalDeviceConfig.prototype['installationParams'] = undefined;

/**
 * Output only. Whether the configuration has been signed by a CPI.
 * @member {Boolean} isSigned
 */
SasPortalDeviceConfig.prototype['isSigned'] = undefined;

/**
 * Measurement reporting capabilities of the device.
 * @member {Array.<module:model/SasPortalDeviceConfig.MeasurementCapabilitiesEnum>} measurementCapabilities
 */
SasPortalDeviceConfig.prototype['measurementCapabilities'] = undefined;

/**
 * @member {module:model/SasPortalDeviceModel} model
 */
SasPortalDeviceConfig.prototype['model'] = undefined;

/**
 * State of the configuration.
 * @member {module:model/SasPortalDeviceConfig.StateEnum} state
 */
SasPortalDeviceConfig.prototype['state'] = undefined;

/**
 * Output only. The last time the device configuration was edited.
 * @member {String} updateTime
 */
SasPortalDeviceConfig.prototype['updateTime'] = undefined;

/**
 * The identifier of a device user.
 * @member {String} userId
 */
SasPortalDeviceConfig.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>category</code> property.
 * @enum {String}
 * @readonly
 */
SasPortalDeviceConfig['CategoryEnum'] = {

    /**
     * value: "DEVICE_CATEGORY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "DEVICE_CATEGORY_UNSPECIFIED",

    /**
     * value: "DEVICE_CATEGORY_A"
     * @const
     */
    "A": "DEVICE_CATEGORY_A",

    /**
     * value: "DEVICE_CATEGORY_B"
     * @const
     */
    "B": "DEVICE_CATEGORY_B"
};


/**
 * Allowed values for the <code>measurementCapabilities</code> property.
 * @enum {String}
 * @readonly
 */
SasPortalDeviceConfig['MeasurementCapabilitiesEnum'] = {

    /**
     * value: "MEASUREMENT_CAPABILITY_UNSPECIFIED"
     * @const
     */
    "UNSPECIFIED": "MEASUREMENT_CAPABILITY_UNSPECIFIED",

    /**
     * value: "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT"
     * @const
     */
    "RECEIVED_POWER_WITH_GRANT": "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITH_GRANT",

    /**
     * value: "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT"
     * @const
     */
    "RECEIVED_POWER_WITHOUT_GRANT": "MEASUREMENT_CAPABILITY_RECEIVED_POWER_WITHOUT_GRANT"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
SasPortalDeviceConfig['StateEnum'] = {

    /**
     * value: "DEVICE_CONFIG_STATE_UNSPECIFIED"
     * @const
     */
    "DEVICE_CONFIG_STATE_UNSPECIFIED": "DEVICE_CONFIG_STATE_UNSPECIFIED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "FINAL"
     * @const
     */
    "FINAL": "FINAL"
};



export default SasPortalDeviceConfig;

