/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalCreateSignedDeviceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalCreateSignedDeviceRequest::OAISasPortalCreateSignedDeviceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalCreateSignedDeviceRequest::OAISasPortalCreateSignedDeviceRequest() {
    this->initializeModel();
}

OAISasPortalCreateSignedDeviceRequest::~OAISasPortalCreateSignedDeviceRequest() {}

void OAISasPortalCreateSignedDeviceRequest::initializeModel() {

    m_encoded_device_isSet = false;
    m_encoded_device_isValid = false;

    m_installer_id_isSet = false;
    m_installer_id_isValid = false;
}

void OAISasPortalCreateSignedDeviceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalCreateSignedDeviceRequest::fromJsonObject(QJsonObject json) {

    m_encoded_device_isValid = ::OpenAPI::fromJsonValue(m_encoded_device, json[QString("encodedDevice")]);
    m_encoded_device_isSet = !json[QString("encodedDevice")].isNull() && m_encoded_device_isValid;

    m_installer_id_isValid = ::OpenAPI::fromJsonValue(m_installer_id, json[QString("installerId")]);
    m_installer_id_isSet = !json[QString("installerId")].isNull() && m_installer_id_isValid;
}

QString OAISasPortalCreateSignedDeviceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalCreateSignedDeviceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_encoded_device_isSet) {
        obj.insert(QString("encodedDevice"), ::OpenAPI::toJsonValue(m_encoded_device));
    }
    if (m_installer_id_isSet) {
        obj.insert(QString("installerId"), ::OpenAPI::toJsonValue(m_installer_id));
    }
    return obj;
}

QByteArray OAISasPortalCreateSignedDeviceRequest::getEncodedDevice() const {
    return m_encoded_device;
}
void OAISasPortalCreateSignedDeviceRequest::setEncodedDevice(const QByteArray &encoded_device) {
    m_encoded_device = encoded_device;
    m_encoded_device_isSet = true;
}

bool OAISasPortalCreateSignedDeviceRequest::is_encoded_device_Set() const{
    return m_encoded_device_isSet;
}

bool OAISasPortalCreateSignedDeviceRequest::is_encoded_device_Valid() const{
    return m_encoded_device_isValid;
}

QString OAISasPortalCreateSignedDeviceRequest::getInstallerId() const {
    return m_installer_id;
}
void OAISasPortalCreateSignedDeviceRequest::setInstallerId(const QString &installer_id) {
    m_installer_id = installer_id;
    m_installer_id_isSet = true;
}

bool OAISasPortalCreateSignedDeviceRequest::is_installer_id_Set() const{
    return m_installer_id_isSet;
}

bool OAISasPortalCreateSignedDeviceRequest::is_installer_id_Valid() const{
    return m_installer_id_isValid;
}

bool OAISasPortalCreateSignedDeviceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encoded_device_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_installer_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalCreateSignedDeviceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
