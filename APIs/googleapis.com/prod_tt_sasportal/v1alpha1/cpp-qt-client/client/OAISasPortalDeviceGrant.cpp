/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalDeviceGrant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalDeviceGrant::OAISasPortalDeviceGrant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalDeviceGrant::OAISasPortalDeviceGrant() {
    this->initializeModel();
}

OAISasPortalDeviceGrant::~OAISasPortalDeviceGrant() {}

void OAISasPortalDeviceGrant::initializeModel() {

    m_channel_type_isSet = false;
    m_channel_type_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_frequency_range_isSet = false;
    m_frequency_range_isValid = false;

    m_grant_id_isSet = false;
    m_grant_id_isValid = false;

    m_last_heartbeat_transmit_expire_time_isSet = false;
    m_last_heartbeat_transmit_expire_time_isValid = false;

    m_max_eirp_isSet = false;
    m_max_eirp_isValid = false;

    m_move_list_isSet = false;
    m_move_list_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_suspension_reason_isSet = false;
    m_suspension_reason_isValid = false;
}

void OAISasPortalDeviceGrant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalDeviceGrant::fromJsonObject(QJsonObject json) {

    m_channel_type_isValid = ::OpenAPI::fromJsonValue(m_channel_type, json[QString("channelType")]);
    m_channel_type_isSet = !json[QString("channelType")].isNull() && m_channel_type_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_frequency_range_isValid = ::OpenAPI::fromJsonValue(m_frequency_range, json[QString("frequencyRange")]);
    m_frequency_range_isSet = !json[QString("frequencyRange")].isNull() && m_frequency_range_isValid;

    m_grant_id_isValid = ::OpenAPI::fromJsonValue(m_grant_id, json[QString("grantId")]);
    m_grant_id_isSet = !json[QString("grantId")].isNull() && m_grant_id_isValid;

    m_last_heartbeat_transmit_expire_time_isValid = ::OpenAPI::fromJsonValue(m_last_heartbeat_transmit_expire_time, json[QString("lastHeartbeatTransmitExpireTime")]);
    m_last_heartbeat_transmit_expire_time_isSet = !json[QString("lastHeartbeatTransmitExpireTime")].isNull() && m_last_heartbeat_transmit_expire_time_isValid;

    m_max_eirp_isValid = ::OpenAPI::fromJsonValue(m_max_eirp, json[QString("maxEirp")]);
    m_max_eirp_isSet = !json[QString("maxEirp")].isNull() && m_max_eirp_isValid;

    m_move_list_isValid = ::OpenAPI::fromJsonValue(m_move_list, json[QString("moveList")]);
    m_move_list_isSet = !json[QString("moveList")].isNull() && m_move_list_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_suspension_reason_isValid = ::OpenAPI::fromJsonValue(m_suspension_reason, json[QString("suspensionReason")]);
    m_suspension_reason_isSet = !json[QString("suspensionReason")].isNull() && m_suspension_reason_isValid;
}

QString OAISasPortalDeviceGrant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalDeviceGrant::asJsonObject() const {
    QJsonObject obj;
    if (m_channel_type_isSet) {
        obj.insert(QString("channelType"), ::OpenAPI::toJsonValue(m_channel_type));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_frequency_range.isSet()) {
        obj.insert(QString("frequencyRange"), ::OpenAPI::toJsonValue(m_frequency_range));
    }
    if (m_grant_id_isSet) {
        obj.insert(QString("grantId"), ::OpenAPI::toJsonValue(m_grant_id));
    }
    if (m_last_heartbeat_transmit_expire_time_isSet) {
        obj.insert(QString("lastHeartbeatTransmitExpireTime"), ::OpenAPI::toJsonValue(m_last_heartbeat_transmit_expire_time));
    }
    if (m_max_eirp_isSet) {
        obj.insert(QString("maxEirp"), ::OpenAPI::toJsonValue(m_max_eirp));
    }
    if (m_move_list.size() > 0) {
        obj.insert(QString("moveList"), ::OpenAPI::toJsonValue(m_move_list));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_suspension_reason.size() > 0) {
        obj.insert(QString("suspensionReason"), ::OpenAPI::toJsonValue(m_suspension_reason));
    }
    return obj;
}

QString OAISasPortalDeviceGrant::getChannelType() const {
    return m_channel_type;
}
void OAISasPortalDeviceGrant::setChannelType(const QString &channel_type) {
    m_channel_type = channel_type;
    m_channel_type_isSet = true;
}

bool OAISasPortalDeviceGrant::is_channel_type_Set() const{
    return m_channel_type_isSet;
}

bool OAISasPortalDeviceGrant::is_channel_type_Valid() const{
    return m_channel_type_isValid;
}

QString OAISasPortalDeviceGrant::getExpireTime() const {
    return m_expire_time;
}
void OAISasPortalDeviceGrant::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAISasPortalDeviceGrant::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAISasPortalDeviceGrant::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

OAISasPortalFrequencyRange OAISasPortalDeviceGrant::getFrequencyRange() const {
    return m_frequency_range;
}
void OAISasPortalDeviceGrant::setFrequencyRange(const OAISasPortalFrequencyRange &frequency_range) {
    m_frequency_range = frequency_range;
    m_frequency_range_isSet = true;
}

bool OAISasPortalDeviceGrant::is_frequency_range_Set() const{
    return m_frequency_range_isSet;
}

bool OAISasPortalDeviceGrant::is_frequency_range_Valid() const{
    return m_frequency_range_isValid;
}

QString OAISasPortalDeviceGrant::getGrantId() const {
    return m_grant_id;
}
void OAISasPortalDeviceGrant::setGrantId(const QString &grant_id) {
    m_grant_id = grant_id;
    m_grant_id_isSet = true;
}

bool OAISasPortalDeviceGrant::is_grant_id_Set() const{
    return m_grant_id_isSet;
}

bool OAISasPortalDeviceGrant::is_grant_id_Valid() const{
    return m_grant_id_isValid;
}

QString OAISasPortalDeviceGrant::getLastHeartbeatTransmitExpireTime() const {
    return m_last_heartbeat_transmit_expire_time;
}
void OAISasPortalDeviceGrant::setLastHeartbeatTransmitExpireTime(const QString &last_heartbeat_transmit_expire_time) {
    m_last_heartbeat_transmit_expire_time = last_heartbeat_transmit_expire_time;
    m_last_heartbeat_transmit_expire_time_isSet = true;
}

bool OAISasPortalDeviceGrant::is_last_heartbeat_transmit_expire_time_Set() const{
    return m_last_heartbeat_transmit_expire_time_isSet;
}

bool OAISasPortalDeviceGrant::is_last_heartbeat_transmit_expire_time_Valid() const{
    return m_last_heartbeat_transmit_expire_time_isValid;
}

double OAISasPortalDeviceGrant::getMaxEirp() const {
    return m_max_eirp;
}
void OAISasPortalDeviceGrant::setMaxEirp(const double &max_eirp) {
    m_max_eirp = max_eirp;
    m_max_eirp_isSet = true;
}

bool OAISasPortalDeviceGrant::is_max_eirp_Set() const{
    return m_max_eirp_isSet;
}

bool OAISasPortalDeviceGrant::is_max_eirp_Valid() const{
    return m_max_eirp_isValid;
}

QList<OAISasPortalDpaMoveList> OAISasPortalDeviceGrant::getMoveList() const {
    return m_move_list;
}
void OAISasPortalDeviceGrant::setMoveList(const QList<OAISasPortalDpaMoveList> &move_list) {
    m_move_list = move_list;
    m_move_list_isSet = true;
}

bool OAISasPortalDeviceGrant::is_move_list_Set() const{
    return m_move_list_isSet;
}

bool OAISasPortalDeviceGrant::is_move_list_Valid() const{
    return m_move_list_isValid;
}

QString OAISasPortalDeviceGrant::getState() const {
    return m_state;
}
void OAISasPortalDeviceGrant::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISasPortalDeviceGrant::is_state_Set() const{
    return m_state_isSet;
}

bool OAISasPortalDeviceGrant::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAISasPortalDeviceGrant::getSuspensionReason() const {
    return m_suspension_reason;
}
void OAISasPortalDeviceGrant::setSuspensionReason(const QList<QString> &suspension_reason) {
    m_suspension_reason = suspension_reason;
    m_suspension_reason_isSet = true;
}

bool OAISasPortalDeviceGrant::is_suspension_reason_Set() const{
    return m_suspension_reason_isSet;
}

bool OAISasPortalDeviceGrant::is_suspension_reason_Valid() const{
    return m_suspension_reason_isValid;
}

bool OAISasPortalDeviceGrant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_channel_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_range.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_heartbeat_transmit_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_eirp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspension_reason.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalDeviceGrant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
