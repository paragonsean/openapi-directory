/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalSetPolicyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalSetPolicyRequest::OAISasPortalSetPolicyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalSetPolicyRequest::OAISasPortalSetPolicyRequest() {
    this->initializeModel();
}

OAISasPortalSetPolicyRequest::~OAISasPortalSetPolicyRequest() {}

void OAISasPortalSetPolicyRequest::initializeModel() {

    m_disable_notification_isSet = false;
    m_disable_notification_isValid = false;

    m_policy_isSet = false;
    m_policy_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAISasPortalSetPolicyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalSetPolicyRequest::fromJsonObject(QJsonObject json) {

    m_disable_notification_isValid = ::OpenAPI::fromJsonValue(m_disable_notification, json[QString("disableNotification")]);
    m_disable_notification_isSet = !json[QString("disableNotification")].isNull() && m_disable_notification_isValid;

    m_policy_isValid = ::OpenAPI::fromJsonValue(m_policy, json[QString("policy")]);
    m_policy_isSet = !json[QString("policy")].isNull() && m_policy_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAISasPortalSetPolicyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalSetPolicyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_disable_notification_isSet) {
        obj.insert(QString("disableNotification"), ::OpenAPI::toJsonValue(m_disable_notification));
    }
    if (m_policy.isSet()) {
        obj.insert(QString("policy"), ::OpenAPI::toJsonValue(m_policy));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

bool OAISasPortalSetPolicyRequest::isDisableNotification() const {
    return m_disable_notification;
}
void OAISasPortalSetPolicyRequest::setDisableNotification(const bool &disable_notification) {
    m_disable_notification = disable_notification;
    m_disable_notification_isSet = true;
}

bool OAISasPortalSetPolicyRequest::is_disable_notification_Set() const{
    return m_disable_notification_isSet;
}

bool OAISasPortalSetPolicyRequest::is_disable_notification_Valid() const{
    return m_disable_notification_isValid;
}

OAISasPortalPolicy OAISasPortalSetPolicyRequest::getPolicy() const {
    return m_policy;
}
void OAISasPortalSetPolicyRequest::setPolicy(const OAISasPortalPolicy &policy) {
    m_policy = policy;
    m_policy_isSet = true;
}

bool OAISasPortalSetPolicyRequest::is_policy_Set() const{
    return m_policy_isSet;
}

bool OAISasPortalSetPolicyRequest::is_policy_Valid() const{
    return m_policy_isValid;
}

QString OAISasPortalSetPolicyRequest::getResource() const {
    return m_resource;
}
void OAISasPortalSetPolicyRequest::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAISasPortalSetPolicyRequest::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAISasPortalSetPolicyRequest::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAISasPortalSetPolicyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disable_notification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalSetPolicyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
