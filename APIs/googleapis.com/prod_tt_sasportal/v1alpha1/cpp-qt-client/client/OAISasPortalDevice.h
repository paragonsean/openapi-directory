/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISasPortalDevice.h
 *
 * 
 */

#ifndef OAISasPortalDevice_H
#define OAISasPortalDevice_H

#include <QJsonObject>

#include "OAISasPortalChannelWithScore.h"
#include "OAISasPortalDeviceConfig.h"
#include "OAISasPortalDeviceGrant.h"
#include "OAISasPortalDeviceMetadata.h"
#include "OAISasPortalFrequencyRange.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAISasPortalDeviceConfig;
class OAISasPortalChannelWithScore;
class OAISasPortalDeviceMetadata;
class OAISasPortalFrequencyRange;
class OAISasPortalDeviceGrant;

class OAISasPortalDevice : public OAIObject {
public:
    OAISasPortalDevice();
    OAISasPortalDevice(QString json);
    ~OAISasPortalDevice() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAISasPortalDeviceConfig getActiveConfig() const;
    void setActiveConfig(const OAISasPortalDeviceConfig &active_config);
    bool is_active_config_Set() const;
    bool is_active_config_Valid() const;

    Q_DECL_DEPRECATED QList<OAISasPortalChannelWithScore> getCurrentChannels() const;
    Q_DECL_DEPRECATED void setCurrentChannels(const QList<OAISasPortalChannelWithScore> &current_channels);
    Q_DECL_DEPRECATED bool is_current_channels_Set() const;
    Q_DECL_DEPRECATED bool is_current_channels_Valid() const;

    OAISasPortalDeviceMetadata getDeviceMetadata() const;
    void setDeviceMetadata(const OAISasPortalDeviceMetadata &device_metadata);
    bool is_device_metadata_Set() const;
    bool is_device_metadata_Valid() const;

    QString getDisplayName() const;
    void setDisplayName(const QString &display_name);
    bool is_display_name_Set() const;
    bool is_display_name_Valid() const;

    QString getFccId() const;
    void setFccId(const QString &fcc_id);
    bool is_fcc_id_Set() const;
    bool is_fcc_id_Valid() const;

    QList<OAISasPortalFrequencyRange> getGrantRangeAllowlists() const;
    void setGrantRangeAllowlists(const QList<OAISasPortalFrequencyRange> &grant_range_allowlists);
    bool is_grant_range_allowlists_Set() const;
    bool is_grant_range_allowlists_Valid() const;

    QList<OAISasPortalDeviceGrant> getGrants() const;
    void setGrants(const QList<OAISasPortalDeviceGrant> &grants);
    bool is_grants_Set() const;
    bool is_grants_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    OAISasPortalDeviceConfig getPreloadedConfig() const;
    void setPreloadedConfig(const OAISasPortalDeviceConfig &preloaded_config);
    bool is_preloaded_config_Set() const;
    bool is_preloaded_config_Valid() const;

    QString getSerialNumber() const;
    void setSerialNumber(const QString &serial_number);
    bool is_serial_number_Set() const;
    bool is_serial_number_Valid() const;

    QString getState() const;
    void setState(const QString &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAISasPortalDeviceConfig m_active_config;
    bool m_active_config_isSet;
    bool m_active_config_isValid;

    QList<OAISasPortalChannelWithScore> m_current_channels;
    bool m_current_channels_isSet;
    bool m_current_channels_isValid;

    OAISasPortalDeviceMetadata m_device_metadata;
    bool m_device_metadata_isSet;
    bool m_device_metadata_isValid;

    QString m_display_name;
    bool m_display_name_isSet;
    bool m_display_name_isValid;

    QString m_fcc_id;
    bool m_fcc_id_isSet;
    bool m_fcc_id_isValid;

    QList<OAISasPortalFrequencyRange> m_grant_range_allowlists;
    bool m_grant_range_allowlists_isSet;
    bool m_grant_range_allowlists_isValid;

    QList<OAISasPortalDeviceGrant> m_grants;
    bool m_grants_isSet;
    bool m_grants_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    OAISasPortalDeviceConfig m_preloaded_config;
    bool m_preloaded_config_isSet;
    bool m_preloaded_config_isValid;

    QString m_serial_number;
    bool m_serial_number_isSet;
    bool m_serial_number_isValid;

    QString m_state;
    bool m_state_isSet;
    bool m_state_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISasPortalDevice)

#endif // OAISasPortalDevice_H
