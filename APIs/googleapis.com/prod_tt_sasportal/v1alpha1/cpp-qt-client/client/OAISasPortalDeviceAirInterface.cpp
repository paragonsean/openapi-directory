/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalDeviceAirInterface.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalDeviceAirInterface::OAISasPortalDeviceAirInterface(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalDeviceAirInterface::OAISasPortalDeviceAirInterface() {
    this->initializeModel();
}

OAISasPortalDeviceAirInterface::~OAISasPortalDeviceAirInterface() {}

void OAISasPortalDeviceAirInterface::initializeModel() {

    m_radio_technology_isSet = false;
    m_radio_technology_isValid = false;

    m_supported_spec_isSet = false;
    m_supported_spec_isValid = false;
}

void OAISasPortalDeviceAirInterface::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalDeviceAirInterface::fromJsonObject(QJsonObject json) {

    m_radio_technology_isValid = ::OpenAPI::fromJsonValue(m_radio_technology, json[QString("radioTechnology")]);
    m_radio_technology_isSet = !json[QString("radioTechnology")].isNull() && m_radio_technology_isValid;

    m_supported_spec_isValid = ::OpenAPI::fromJsonValue(m_supported_spec, json[QString("supportedSpec")]);
    m_supported_spec_isSet = !json[QString("supportedSpec")].isNull() && m_supported_spec_isValid;
}

QString OAISasPortalDeviceAirInterface::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalDeviceAirInterface::asJsonObject() const {
    QJsonObject obj;
    if (m_radio_technology_isSet) {
        obj.insert(QString("radioTechnology"), ::OpenAPI::toJsonValue(m_radio_technology));
    }
    if (m_supported_spec_isSet) {
        obj.insert(QString("supportedSpec"), ::OpenAPI::toJsonValue(m_supported_spec));
    }
    return obj;
}

QString OAISasPortalDeviceAirInterface::getRadioTechnology() const {
    return m_radio_technology;
}
void OAISasPortalDeviceAirInterface::setRadioTechnology(const QString &radio_technology) {
    m_radio_technology = radio_technology;
    m_radio_technology_isSet = true;
}

bool OAISasPortalDeviceAirInterface::is_radio_technology_Set() const{
    return m_radio_technology_isSet;
}

bool OAISasPortalDeviceAirInterface::is_radio_technology_Valid() const{
    return m_radio_technology_isValid;
}

QString OAISasPortalDeviceAirInterface::getSupportedSpec() const {
    return m_supported_spec;
}
void OAISasPortalDeviceAirInterface::setSupportedSpec(const QString &supported_spec) {
    m_supported_spec = supported_spec;
    m_supported_spec_isSet = true;
}

bool OAISasPortalDeviceAirInterface::is_supported_spec_Set() const{
    return m_supported_spec_isSet;
}

bool OAISasPortalDeviceAirInterface::is_supported_spec_Valid() const{
    return m_supported_spec_isValid;
}

bool OAISasPortalDeviceAirInterface::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_radio_technology_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_spec_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalDeviceAirInterface::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
