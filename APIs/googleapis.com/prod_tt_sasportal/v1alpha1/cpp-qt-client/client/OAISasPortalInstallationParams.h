/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISasPortalInstallationParams.h
 *
 * Information about the device installation parameters.
 */

#ifndef OAISasPortalInstallationParams_H
#define OAISasPortalInstallationParams_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISasPortalInstallationParams : public OAIObject {
public:
    OAISasPortalInstallationParams();
    OAISasPortalInstallationParams(QString json);
    ~OAISasPortalInstallationParams() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAntennaAzimuth() const;
    void setAntennaAzimuth(const qint32 &antenna_azimuth);
    bool is_antenna_azimuth_Set() const;
    bool is_antenna_azimuth_Valid() const;

    qint32 getAntennaBeamwidth() const;
    void setAntennaBeamwidth(const qint32 &antenna_beamwidth);
    bool is_antenna_beamwidth_Set() const;
    bool is_antenna_beamwidth_Valid() const;

    qint32 getAntennaDowntilt() const;
    void setAntennaDowntilt(const qint32 &antenna_downtilt);
    bool is_antenna_downtilt_Set() const;
    bool is_antenna_downtilt_Valid() const;

    qint32 getAntennaGain() const;
    void setAntennaGain(const qint32 &antenna_gain);
    bool is_antenna_gain_Set() const;
    bool is_antenna_gain_Valid() const;

    QString getAntennaModel() const;
    void setAntennaModel(const QString &antenna_model);
    bool is_antenna_model_Set() const;
    bool is_antenna_model_Valid() const;

    bool isCpeCbsdIndication() const;
    void setCpeCbsdIndication(const bool &cpe_cbsd_indication);
    bool is_cpe_cbsd_indication_Set() const;
    bool is_cpe_cbsd_indication_Valid() const;

    qint32 getEirpCapability() const;
    void setEirpCapability(const qint32 &eirp_capability);
    bool is_eirp_capability_Set() const;
    bool is_eirp_capability_Valid() const;

    double getHeight() const;
    void setHeight(const double &height);
    bool is_height_Set() const;
    bool is_height_Valid() const;

    QString getHeightType() const;
    void setHeightType(const QString &height_type);
    bool is_height_type_Set() const;
    bool is_height_type_Valid() const;

    double getHorizontalAccuracy() const;
    void setHorizontalAccuracy(const double &horizontal_accuracy);
    bool is_horizontal_accuracy_Set() const;
    bool is_horizontal_accuracy_Valid() const;

    bool isIndoorDeployment() const;
    void setIndoorDeployment(const bool &indoor_deployment);
    bool is_indoor_deployment_Set() const;
    bool is_indoor_deployment_Valid() const;

    double getLatitude() const;
    void setLatitude(const double &latitude);
    bool is_latitude_Set() const;
    bool is_latitude_Valid() const;

    double getLongitude() const;
    void setLongitude(const double &longitude);
    bool is_longitude_Set() const;
    bool is_longitude_Valid() const;

    double getVerticalAccuracy() const;
    void setVerticalAccuracy(const double &vertical_accuracy);
    bool is_vertical_accuracy_Set() const;
    bool is_vertical_accuracy_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_antenna_azimuth;
    bool m_antenna_azimuth_isSet;
    bool m_antenna_azimuth_isValid;

    qint32 m_antenna_beamwidth;
    bool m_antenna_beamwidth_isSet;
    bool m_antenna_beamwidth_isValid;

    qint32 m_antenna_downtilt;
    bool m_antenna_downtilt_isSet;
    bool m_antenna_downtilt_isValid;

    qint32 m_antenna_gain;
    bool m_antenna_gain_isSet;
    bool m_antenna_gain_isValid;

    QString m_antenna_model;
    bool m_antenna_model_isSet;
    bool m_antenna_model_isValid;

    bool m_cpe_cbsd_indication;
    bool m_cpe_cbsd_indication_isSet;
    bool m_cpe_cbsd_indication_isValid;

    qint32 m_eirp_capability;
    bool m_eirp_capability_isSet;
    bool m_eirp_capability_isValid;

    double m_height;
    bool m_height_isSet;
    bool m_height_isValid;

    QString m_height_type;
    bool m_height_type_isSet;
    bool m_height_type_isValid;

    double m_horizontal_accuracy;
    bool m_horizontal_accuracy_isSet;
    bool m_horizontal_accuracy_isValid;

    bool m_indoor_deployment;
    bool m_indoor_deployment_isSet;
    bool m_indoor_deployment_isValid;

    double m_latitude;
    bool m_latitude_isSet;
    bool m_latitude_isValid;

    double m_longitude;
    bool m_longitude_isSet;
    bool m_longitude_isValid;

    double m_vertical_accuracy;
    bool m_vertical_accuracy_isSet;
    bool m_vertical_accuracy_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISasPortalInstallationParams)

#endif // OAISasPortalInstallationParams_H
