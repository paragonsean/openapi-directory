/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalDeviceMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalDeviceMetadata::OAISasPortalDeviceMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalDeviceMetadata::OAISasPortalDeviceMetadata() {
    this->initializeModel();
}

OAISasPortalDeviceMetadata::~OAISasPortalDeviceMetadata() {}

void OAISasPortalDeviceMetadata::initializeModel() {

    m_antenna_model_isSet = false;
    m_antenna_model_isValid = false;

    m_common_channel_group_isSet = false;
    m_common_channel_group_isValid = false;

    m_interference_coordination_group_isSet = false;
    m_interference_coordination_group_isValid = false;

    m_nrqz_validated_isSet = false;
    m_nrqz_validated_isValid = false;

    m_nrqz_validation_isSet = false;
    m_nrqz_validation_isValid = false;
}

void OAISasPortalDeviceMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalDeviceMetadata::fromJsonObject(QJsonObject json) {

    m_antenna_model_isValid = ::OpenAPI::fromJsonValue(m_antenna_model, json[QString("antennaModel")]);
    m_antenna_model_isSet = !json[QString("antennaModel")].isNull() && m_antenna_model_isValid;

    m_common_channel_group_isValid = ::OpenAPI::fromJsonValue(m_common_channel_group, json[QString("commonChannelGroup")]);
    m_common_channel_group_isSet = !json[QString("commonChannelGroup")].isNull() && m_common_channel_group_isValid;

    m_interference_coordination_group_isValid = ::OpenAPI::fromJsonValue(m_interference_coordination_group, json[QString("interferenceCoordinationGroup")]);
    m_interference_coordination_group_isSet = !json[QString("interferenceCoordinationGroup")].isNull() && m_interference_coordination_group_isValid;

    m_nrqz_validated_isValid = ::OpenAPI::fromJsonValue(m_nrqz_validated, json[QString("nrqzValidated")]);
    m_nrqz_validated_isSet = !json[QString("nrqzValidated")].isNull() && m_nrqz_validated_isValid;

    m_nrqz_validation_isValid = ::OpenAPI::fromJsonValue(m_nrqz_validation, json[QString("nrqzValidation")]);
    m_nrqz_validation_isSet = !json[QString("nrqzValidation")].isNull() && m_nrqz_validation_isValid;
}

QString OAISasPortalDeviceMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalDeviceMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_antenna_model_isSet) {
        obj.insert(QString("antennaModel"), ::OpenAPI::toJsonValue(m_antenna_model));
    }
    if (m_common_channel_group_isSet) {
        obj.insert(QString("commonChannelGroup"), ::OpenAPI::toJsonValue(m_common_channel_group));
    }
    if (m_interference_coordination_group_isSet) {
        obj.insert(QString("interferenceCoordinationGroup"), ::OpenAPI::toJsonValue(m_interference_coordination_group));
    }
    if (m_nrqz_validated_isSet) {
        obj.insert(QString("nrqzValidated"), ::OpenAPI::toJsonValue(m_nrqz_validated));
    }
    if (m_nrqz_validation.isSet()) {
        obj.insert(QString("nrqzValidation"), ::OpenAPI::toJsonValue(m_nrqz_validation));
    }
    return obj;
}

QString OAISasPortalDeviceMetadata::getAntennaModel() const {
    return m_antenna_model;
}
void OAISasPortalDeviceMetadata::setAntennaModel(const QString &antenna_model) {
    m_antenna_model = antenna_model;
    m_antenna_model_isSet = true;
}

bool OAISasPortalDeviceMetadata::is_antenna_model_Set() const{
    return m_antenna_model_isSet;
}

bool OAISasPortalDeviceMetadata::is_antenna_model_Valid() const{
    return m_antenna_model_isValid;
}

QString OAISasPortalDeviceMetadata::getCommonChannelGroup() const {
    return m_common_channel_group;
}
void OAISasPortalDeviceMetadata::setCommonChannelGroup(const QString &common_channel_group) {
    m_common_channel_group = common_channel_group;
    m_common_channel_group_isSet = true;
}

bool OAISasPortalDeviceMetadata::is_common_channel_group_Set() const{
    return m_common_channel_group_isSet;
}

bool OAISasPortalDeviceMetadata::is_common_channel_group_Valid() const{
    return m_common_channel_group_isValid;
}

QString OAISasPortalDeviceMetadata::getInterferenceCoordinationGroup() const {
    return m_interference_coordination_group;
}
void OAISasPortalDeviceMetadata::setInterferenceCoordinationGroup(const QString &interference_coordination_group) {
    m_interference_coordination_group = interference_coordination_group;
    m_interference_coordination_group_isSet = true;
}

bool OAISasPortalDeviceMetadata::is_interference_coordination_group_Set() const{
    return m_interference_coordination_group_isSet;
}

bool OAISasPortalDeviceMetadata::is_interference_coordination_group_Valid() const{
    return m_interference_coordination_group_isValid;
}

bool OAISasPortalDeviceMetadata::isNrqzValidated() const {
    return m_nrqz_validated;
}
void OAISasPortalDeviceMetadata::setNrqzValidated(const bool &nrqz_validated) {
    m_nrqz_validated = nrqz_validated;
    m_nrqz_validated_isSet = true;
}

bool OAISasPortalDeviceMetadata::is_nrqz_validated_Set() const{
    return m_nrqz_validated_isSet;
}

bool OAISasPortalDeviceMetadata::is_nrqz_validated_Valid() const{
    return m_nrqz_validated_isValid;
}

OAISasPortalNrqzValidation OAISasPortalDeviceMetadata::getNrqzValidation() const {
    return m_nrqz_validation;
}
void OAISasPortalDeviceMetadata::setNrqzValidation(const OAISasPortalNrqzValidation &nrqz_validation) {
    m_nrqz_validation = nrqz_validation;
    m_nrqz_validation_isSet = true;
}

bool OAISasPortalDeviceMetadata::is_nrqz_validation_Set() const{
    return m_nrqz_validation_isSet;
}

bool OAISasPortalDeviceMetadata::is_nrqz_validation_Valid() const{
    return m_nrqz_validation_isValid;
}

bool OAISasPortalDeviceMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_antenna_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_common_channel_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interference_coordination_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nrqz_validated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nrqz_validation.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalDeviceMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
