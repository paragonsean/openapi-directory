/**
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISasPortalNrqzValidation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISasPortalNrqzValidation::OAISasPortalNrqzValidation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISasPortalNrqzValidation::OAISasPortalNrqzValidation() {
    this->initializeModel();
}

OAISasPortalNrqzValidation::~OAISasPortalNrqzValidation() {}

void OAISasPortalNrqzValidation::initializeModel() {

    m_case_id_isSet = false;
    m_case_id_isValid = false;

    m_cpi_id_isSet = false;
    m_cpi_id_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAISasPortalNrqzValidation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISasPortalNrqzValidation::fromJsonObject(QJsonObject json) {

    m_case_id_isValid = ::OpenAPI::fromJsonValue(m_case_id, json[QString("caseId")]);
    m_case_id_isSet = !json[QString("caseId")].isNull() && m_case_id_isValid;

    m_cpi_id_isValid = ::OpenAPI::fromJsonValue(m_cpi_id, json[QString("cpiId")]);
    m_cpi_id_isSet = !json[QString("cpiId")].isNull() && m_cpi_id_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAISasPortalNrqzValidation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISasPortalNrqzValidation::asJsonObject() const {
    QJsonObject obj;
    if (m_case_id_isSet) {
        obj.insert(QString("caseId"), ::OpenAPI::toJsonValue(m_case_id));
    }
    if (m_cpi_id_isSet) {
        obj.insert(QString("cpiId"), ::OpenAPI::toJsonValue(m_cpi_id));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QString OAISasPortalNrqzValidation::getCaseId() const {
    return m_case_id;
}
void OAISasPortalNrqzValidation::setCaseId(const QString &case_id) {
    m_case_id = case_id;
    m_case_id_isSet = true;
}

bool OAISasPortalNrqzValidation::is_case_id_Set() const{
    return m_case_id_isSet;
}

bool OAISasPortalNrqzValidation::is_case_id_Valid() const{
    return m_case_id_isValid;
}

QString OAISasPortalNrqzValidation::getCpiId() const {
    return m_cpi_id;
}
void OAISasPortalNrqzValidation::setCpiId(const QString &cpi_id) {
    m_cpi_id = cpi_id;
    m_cpi_id_isSet = true;
}

bool OAISasPortalNrqzValidation::is_cpi_id_Set() const{
    return m_cpi_id_isSet;
}

bool OAISasPortalNrqzValidation::is_cpi_id_Valid() const{
    return m_cpi_id_isValid;
}

double OAISasPortalNrqzValidation::getLatitude() const {
    return m_latitude;
}
void OAISasPortalNrqzValidation::setLatitude(const double &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAISasPortalNrqzValidation::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAISasPortalNrqzValidation::is_latitude_Valid() const{
    return m_latitude_isValid;
}

double OAISasPortalNrqzValidation::getLongitude() const {
    return m_longitude;
}
void OAISasPortalNrqzValidation::setLongitude(const double &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAISasPortalNrqzValidation::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAISasPortalNrqzValidation::is_longitude_Valid() const{
    return m_longitude_isValid;
}

QString OAISasPortalNrqzValidation::getState() const {
    return m_state;
}
void OAISasPortalNrqzValidation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAISasPortalNrqzValidation::is_state_Set() const{
    return m_state_isSet;
}

bool OAISasPortalNrqzValidation::is_state_Valid() const{
    return m_state_isValid;
}

bool OAISasPortalNrqzValidation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_case_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpi_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISasPortalNrqzValidation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
