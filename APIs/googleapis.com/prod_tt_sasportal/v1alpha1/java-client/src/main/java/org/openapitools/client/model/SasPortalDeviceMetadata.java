/*
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SasPortalNrqzValidation;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Device data overridable by both SAS Portal and registration requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:23.398223-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SasPortalDeviceMetadata {
  public static final String SERIALIZED_NAME_ANTENNA_MODEL = "antennaModel";
  @SerializedName(SERIALIZED_NAME_ANTENNA_MODEL)
  private String antennaModel;

  public static final String SERIALIZED_NAME_COMMON_CHANNEL_GROUP = "commonChannelGroup";
  @SerializedName(SERIALIZED_NAME_COMMON_CHANNEL_GROUP)
  private String commonChannelGroup;

  public static final String SERIALIZED_NAME_INTERFERENCE_COORDINATION_GROUP = "interferenceCoordinationGroup";
  @SerializedName(SERIALIZED_NAME_INTERFERENCE_COORDINATION_GROUP)
  private String interferenceCoordinationGroup;

  public static final String SERIALIZED_NAME_NRQZ_VALIDATED = "nrqzValidated";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_NRQZ_VALIDATED)
  private Boolean nrqzValidated;

  public static final String SERIALIZED_NAME_NRQZ_VALIDATION = "nrqzValidation";
  @SerializedName(SERIALIZED_NAME_NRQZ_VALIDATION)
  private SasPortalNrqzValidation nrqzValidation;

  public SasPortalDeviceMetadata() {
  }

  public SasPortalDeviceMetadata(
     Boolean nrqzValidated
  ) {
    this();
    this.nrqzValidated = nrqzValidated;
  }

  public SasPortalDeviceMetadata antennaModel(String antennaModel) {
    this.antennaModel = antennaModel;
    return this;
  }

  /**
   * If populated, the Antenna Model Pattern to use. Format is: &#x60;RecordCreatorId:PatternId&#x60;
   * @return antennaModel
   */
  @javax.annotation.Nullable
  public String getAntennaModel() {
    return antennaModel;
  }

  public void setAntennaModel(String antennaModel) {
    this.antennaModel = antennaModel;
  }


  public SasPortalDeviceMetadata commonChannelGroup(String commonChannelGroup) {
    this.commonChannelGroup = commonChannelGroup;
    return this;
  }

  /**
   * Common Channel Group (CCG). A group of CBSDs in the same ICG requesting a common primary channel assignment. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).
   * @return commonChannelGroup
   */
  @javax.annotation.Nullable
  public String getCommonChannelGroup() {
    return commonChannelGroup;
  }

  public void setCommonChannelGroup(String commonChannelGroup) {
    this.commonChannelGroup = commonChannelGroup;
  }


  public SasPortalDeviceMetadata interferenceCoordinationGroup(String interferenceCoordinationGroup) {
    this.interferenceCoordinationGroup = interferenceCoordinationGroup;
    return this;
  }

  /**
   * Interference Coordination Group (ICG). A group of CBSDs that manage their own interference with the group. For more details, see [CBRSA-TS-2001 V3.0.0](https://ongoalliance.org/wp-content/uploads/2020/02/CBRSA-TS-2001-V3.0.0_Approved-for-publication.pdf).
   * @return interferenceCoordinationGroup
   */
  @javax.annotation.Nullable
  public String getInterferenceCoordinationGroup() {
    return interferenceCoordinationGroup;
  }

  public void setInterferenceCoordinationGroup(String interferenceCoordinationGroup) {
    this.interferenceCoordinationGroup = interferenceCoordinationGroup;
  }


  /**
   * Output only. Set to &#x60;true&#x60; if a CPI has validated that they have coordinated with the National Quiet Zone office.
   * @return nrqzValidated
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getNrqzValidated() {
    return nrqzValidated;
  }



  public SasPortalDeviceMetadata nrqzValidation(SasPortalNrqzValidation nrqzValidation) {
    this.nrqzValidation = nrqzValidation;
    return this;
  }

  /**
   * Get nrqzValidation
   * @return nrqzValidation
   */
  @javax.annotation.Nullable
  public SasPortalNrqzValidation getNrqzValidation() {
    return nrqzValidation;
  }

  public void setNrqzValidation(SasPortalNrqzValidation nrqzValidation) {
    this.nrqzValidation = nrqzValidation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SasPortalDeviceMetadata sasPortalDeviceMetadata = (SasPortalDeviceMetadata) o;
    return Objects.equals(this.antennaModel, sasPortalDeviceMetadata.antennaModel) &&
        Objects.equals(this.commonChannelGroup, sasPortalDeviceMetadata.commonChannelGroup) &&
        Objects.equals(this.interferenceCoordinationGroup, sasPortalDeviceMetadata.interferenceCoordinationGroup) &&
        Objects.equals(this.nrqzValidated, sasPortalDeviceMetadata.nrqzValidated) &&
        Objects.equals(this.nrqzValidation, sasPortalDeviceMetadata.nrqzValidation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antennaModel, commonChannelGroup, interferenceCoordinationGroup, nrqzValidated, nrqzValidation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SasPortalDeviceMetadata {\n");
    sb.append("    antennaModel: ").append(toIndentedString(antennaModel)).append("\n");
    sb.append("    commonChannelGroup: ").append(toIndentedString(commonChannelGroup)).append("\n");
    sb.append("    interferenceCoordinationGroup: ").append(toIndentedString(interferenceCoordinationGroup)).append("\n");
    sb.append("    nrqzValidated: ").append(toIndentedString(nrqzValidated)).append("\n");
    sb.append("    nrqzValidation: ").append(toIndentedString(nrqzValidation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("antennaModel");
    openapiFields.add("commonChannelGroup");
    openapiFields.add("interferenceCoordinationGroup");
    openapiFields.add("nrqzValidated");
    openapiFields.add("nrqzValidation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SasPortalDeviceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SasPortalDeviceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SasPortalDeviceMetadata is not found in the empty JSON string", SasPortalDeviceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SasPortalDeviceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SasPortalDeviceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("antennaModel") != null && !jsonObj.get("antennaModel").isJsonNull()) && !jsonObj.get("antennaModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `antennaModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("antennaModel").toString()));
      }
      if ((jsonObj.get("commonChannelGroup") != null && !jsonObj.get("commonChannelGroup").isJsonNull()) && !jsonObj.get("commonChannelGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commonChannelGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commonChannelGroup").toString()));
      }
      if ((jsonObj.get("interferenceCoordinationGroup") != null && !jsonObj.get("interferenceCoordinationGroup").isJsonNull()) && !jsonObj.get("interferenceCoordinationGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interferenceCoordinationGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interferenceCoordinationGroup").toString()));
      }
      // validate the optional field `nrqzValidation`
      if (jsonObj.get("nrqzValidation") != null && !jsonObj.get("nrqzValidation").isJsonNull()) {
        SasPortalNrqzValidation.validateJsonElement(jsonObj.get("nrqzValidation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SasPortalDeviceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SasPortalDeviceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SasPortalDeviceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SasPortalDeviceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<SasPortalDeviceMetadata>() {
           @Override
           public void write(JsonWriter out, SasPortalDeviceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SasPortalDeviceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SasPortalDeviceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SasPortalDeviceMetadata
   * @throws IOException if the JSON string is invalid with respect to SasPortalDeviceMetadata
   */
  public static SasPortalDeviceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SasPortalDeviceMetadata.class);
  }

  /**
   * Convert an instance of SasPortalDeviceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

