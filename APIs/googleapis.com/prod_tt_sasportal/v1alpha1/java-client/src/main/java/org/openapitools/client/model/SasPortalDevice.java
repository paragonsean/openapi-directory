/*
 * SAS Portal API (Testing)
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1alpha1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SasPortalChannelWithScore;
import org.openapitools.client.model.SasPortalDeviceConfig;
import org.openapitools.client.model.SasPortalDeviceGrant;
import org.openapitools.client.model.SasPortalDeviceMetadata;
import org.openapitools.client.model.SasPortalFrequencyRange;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SasPortalDevice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:46:23.398223-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SasPortalDevice {
  public static final String SERIALIZED_NAME_ACTIVE_CONFIG = "activeConfig";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CONFIG)
  private SasPortalDeviceConfig activeConfig;

  public static final String SERIALIZED_NAME_CURRENT_CHANNELS = "currentChannels";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_CURRENT_CHANNELS)
  private List<SasPortalChannelWithScore> currentChannels = new ArrayList<>();

  public static final String SERIALIZED_NAME_DEVICE_METADATA = "deviceMetadata";
  @SerializedName(SERIALIZED_NAME_DEVICE_METADATA)
  private SasPortalDeviceMetadata deviceMetadata;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FCC_ID = "fccId";
  @SerializedName(SERIALIZED_NAME_FCC_ID)
  private String fccId;

  public static final String SERIALIZED_NAME_GRANT_RANGE_ALLOWLISTS = "grantRangeAllowlists";
  @SerializedName(SERIALIZED_NAME_GRANT_RANGE_ALLOWLISTS)
  private List<SasPortalFrequencyRange> grantRangeAllowlists = new ArrayList<>();

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private List<SasPortalDeviceGrant> grants = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRELOADED_CONFIG = "preloadedConfig";
  @SerializedName(SERIALIZED_NAME_PRELOADED_CONFIG)
  private SasPortalDeviceConfig preloadedConfig;

  public static final String SERIALIZED_NAME_SERIAL_NUMBER = "serialNumber";
  @SerializedName(SERIALIZED_NAME_SERIAL_NUMBER)
  private String serialNumber;

  /**
   * Output only. Device state.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DEVICE_STATE_UNSPECIFIED("DEVICE_STATE_UNSPECIFIED"),
    
    RESERVED("RESERVED"),
    
    REGISTERED("REGISTERED"),
    
    DEREGISTERED("DEREGISTERED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public SasPortalDevice() {
  }

  public SasPortalDevice(
     List<SasPortalChannelWithScore> currentChannels
  ) {
    this();
    this.currentChannels = currentChannels;
  }

  public SasPortalDevice activeConfig(SasPortalDeviceConfig activeConfig) {
    this.activeConfig = activeConfig;
    return this;
  }

  /**
   * Get activeConfig
   * @return activeConfig
   */
  @javax.annotation.Nullable
  public SasPortalDeviceConfig getActiveConfig() {
    return activeConfig;
  }

  public void setActiveConfig(SasPortalDeviceConfig activeConfig) {
    this.activeConfig = activeConfig;
  }


  /**
   * Output only. Current channels with scores.
   * @return currentChannels
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<SasPortalChannelWithScore> getCurrentChannels() {
    return currentChannels;
  }



  public SasPortalDevice deviceMetadata(SasPortalDeviceMetadata deviceMetadata) {
    this.deviceMetadata = deviceMetadata;
    return this;
  }

  /**
   * Get deviceMetadata
   * @return deviceMetadata
   */
  @javax.annotation.Nullable
  public SasPortalDeviceMetadata getDeviceMetadata() {
    return deviceMetadata;
  }

  public void setDeviceMetadata(SasPortalDeviceMetadata deviceMetadata) {
    this.deviceMetadata = deviceMetadata;
  }


  public SasPortalDevice displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Device display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public SasPortalDevice fccId(String fccId) {
    this.fccId = fccId;
    return this;
  }

  /**
   * The FCC identifier of the device. Refer to https://www.fcc.gov/oet/ea/fccid for FccID format. Accept underscores and periods because some test-SAS customers use them.
   * @return fccId
   */
  @javax.annotation.Nullable
  public String getFccId() {
    return fccId;
  }

  public void setFccId(String fccId) {
    this.fccId = fccId;
  }


  public SasPortalDevice grantRangeAllowlists(List<SasPortalFrequencyRange> grantRangeAllowlists) {
    this.grantRangeAllowlists = grantRangeAllowlists;
    return this;
  }

  public SasPortalDevice addGrantRangeAllowlistsItem(SasPortalFrequencyRange grantRangeAllowlistsItem) {
    if (this.grantRangeAllowlists == null) {
      this.grantRangeAllowlists = new ArrayList<>();
    }
    this.grantRangeAllowlists.add(grantRangeAllowlistsItem);
    return this;
  }

  /**
   * Only ranges that are within the allowlists are available for new grants.
   * @return grantRangeAllowlists
   */
  @javax.annotation.Nullable
  public List<SasPortalFrequencyRange> getGrantRangeAllowlists() {
    return grantRangeAllowlists;
  }

  public void setGrantRangeAllowlists(List<SasPortalFrequencyRange> grantRangeAllowlists) {
    this.grantRangeAllowlists = grantRangeAllowlists;
  }


  public SasPortalDevice grants(List<SasPortalDeviceGrant> grants) {
    this.grants = grants;
    return this;
  }

  public SasPortalDevice addGrantsItem(SasPortalDeviceGrant grantsItem) {
    if (this.grants == null) {
      this.grants = new ArrayList<>();
    }
    this.grants.add(grantsItem);
    return this;
  }

  /**
   * Output only. Grants held by the device.
   * @return grants
   */
  @javax.annotation.Nullable
  public List<SasPortalDeviceGrant> getGrants() {
    return grants;
  }

  public void setGrants(List<SasPortalDeviceGrant> grants) {
    this.grants = grants;
  }


  public SasPortalDevice name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Output only. The resource path name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public SasPortalDevice preloadedConfig(SasPortalDeviceConfig preloadedConfig) {
    this.preloadedConfig = preloadedConfig;
    return this;
  }

  /**
   * Get preloadedConfig
   * @return preloadedConfig
   */
  @javax.annotation.Nullable
  public SasPortalDeviceConfig getPreloadedConfig() {
    return preloadedConfig;
  }

  public void setPreloadedConfig(SasPortalDeviceConfig preloadedConfig) {
    this.preloadedConfig = preloadedConfig;
  }


  public SasPortalDevice serialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
    return this;
  }

  /**
   * A serial number assigned to the device by the device manufacturer.
   * @return serialNumber
   */
  @javax.annotation.Nullable
  public String getSerialNumber() {
    return serialNumber;
  }

  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }


  public SasPortalDevice state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Output only. Device state.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SasPortalDevice sasPortalDevice = (SasPortalDevice) o;
    return Objects.equals(this.activeConfig, sasPortalDevice.activeConfig) &&
        Objects.equals(this.currentChannels, sasPortalDevice.currentChannels) &&
        Objects.equals(this.deviceMetadata, sasPortalDevice.deviceMetadata) &&
        Objects.equals(this.displayName, sasPortalDevice.displayName) &&
        Objects.equals(this.fccId, sasPortalDevice.fccId) &&
        Objects.equals(this.grantRangeAllowlists, sasPortalDevice.grantRangeAllowlists) &&
        Objects.equals(this.grants, sasPortalDevice.grants) &&
        Objects.equals(this.name, sasPortalDevice.name) &&
        Objects.equals(this.preloadedConfig, sasPortalDevice.preloadedConfig) &&
        Objects.equals(this.serialNumber, sasPortalDevice.serialNumber) &&
        Objects.equals(this.state, sasPortalDevice.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeConfig, currentChannels, deviceMetadata, displayName, fccId, grantRangeAllowlists, grants, name, preloadedConfig, serialNumber, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SasPortalDevice {\n");
    sb.append("    activeConfig: ").append(toIndentedString(activeConfig)).append("\n");
    sb.append("    currentChannels: ").append(toIndentedString(currentChannels)).append("\n");
    sb.append("    deviceMetadata: ").append(toIndentedString(deviceMetadata)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    fccId: ").append(toIndentedString(fccId)).append("\n");
    sb.append("    grantRangeAllowlists: ").append(toIndentedString(grantRangeAllowlists)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preloadedConfig: ").append(toIndentedString(preloadedConfig)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeConfig");
    openapiFields.add("currentChannels");
    openapiFields.add("deviceMetadata");
    openapiFields.add("displayName");
    openapiFields.add("fccId");
    openapiFields.add("grantRangeAllowlists");
    openapiFields.add("grants");
    openapiFields.add("name");
    openapiFields.add("preloadedConfig");
    openapiFields.add("serialNumber");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SasPortalDevice
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SasPortalDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SasPortalDevice is not found in the empty JSON string", SasPortalDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SasPortalDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SasPortalDevice` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `activeConfig`
      if (jsonObj.get("activeConfig") != null && !jsonObj.get("activeConfig").isJsonNull()) {
        SasPortalDeviceConfig.validateJsonElement(jsonObj.get("activeConfig"));
      }
      if (jsonObj.get("currentChannels") != null && !jsonObj.get("currentChannels").isJsonNull()) {
        JsonArray jsonArraycurrentChannels = jsonObj.getAsJsonArray("currentChannels");
        if (jsonArraycurrentChannels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("currentChannels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `currentChannels` to be an array in the JSON string but got `%s`", jsonObj.get("currentChannels").toString()));
          }

          // validate the optional field `currentChannels` (array)
          for (int i = 0; i < jsonArraycurrentChannels.size(); i++) {
            SasPortalChannelWithScore.validateJsonElement(jsonArraycurrentChannels.get(i));
          };
        }
      }
      // validate the optional field `deviceMetadata`
      if (jsonObj.get("deviceMetadata") != null && !jsonObj.get("deviceMetadata").isJsonNull()) {
        SasPortalDeviceMetadata.validateJsonElement(jsonObj.get("deviceMetadata"));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("fccId") != null && !jsonObj.get("fccId").isJsonNull()) && !jsonObj.get("fccId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fccId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fccId").toString()));
      }
      if (jsonObj.get("grantRangeAllowlists") != null && !jsonObj.get("grantRangeAllowlists").isJsonNull()) {
        JsonArray jsonArraygrantRangeAllowlists = jsonObj.getAsJsonArray("grantRangeAllowlists");
        if (jsonArraygrantRangeAllowlists != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grantRangeAllowlists").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grantRangeAllowlists` to be an array in the JSON string but got `%s`", jsonObj.get("grantRangeAllowlists").toString()));
          }

          // validate the optional field `grantRangeAllowlists` (array)
          for (int i = 0; i < jsonArraygrantRangeAllowlists.size(); i++) {
            SasPortalFrequencyRange.validateJsonElement(jsonArraygrantRangeAllowlists.get(i));
          };
        }
      }
      if (jsonObj.get("grants") != null && !jsonObj.get("grants").isJsonNull()) {
        JsonArray jsonArraygrants = jsonObj.getAsJsonArray("grants");
        if (jsonArraygrants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grants` to be an array in the JSON string but got `%s`", jsonObj.get("grants").toString()));
          }

          // validate the optional field `grants` (array)
          for (int i = 0; i < jsonArraygrants.size(); i++) {
            SasPortalDeviceGrant.validateJsonElement(jsonArraygrants.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `preloadedConfig`
      if (jsonObj.get("preloadedConfig") != null && !jsonObj.get("preloadedConfig").isJsonNull()) {
        SasPortalDeviceConfig.validateJsonElement(jsonObj.get("preloadedConfig"));
      }
      if ((jsonObj.get("serialNumber") != null && !jsonObj.get("serialNumber").isJsonNull()) && !jsonObj.get("serialNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serialNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serialNumber").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SasPortalDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SasPortalDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SasPortalDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SasPortalDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<SasPortalDevice>() {
           @Override
           public void write(JsonWriter out, SasPortalDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SasPortalDevice read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SasPortalDevice given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SasPortalDevice
   * @throws IOException if the JSON string is invalid with respect to SasPortalDevice
   */
  public static SasPortalDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SasPortalDevice.class);
  }

  /**
   * Convert an instance of SasPortalDevice to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

