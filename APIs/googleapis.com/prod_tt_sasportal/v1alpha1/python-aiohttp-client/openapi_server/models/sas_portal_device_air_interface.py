# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SasPortalDeviceAirInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, radio_technology: str=None, supported_spec: str=None):
        """SasPortalDeviceAirInterface - a model defined in OpenAPI

        :param radio_technology: The radio_technology of this SasPortalDeviceAirInterface.
        :param supported_spec: The supported_spec of this SasPortalDeviceAirInterface.
        """
        self.openapi_types = {
            'radio_technology': str,
            'supported_spec': str
        }

        self.attribute_map = {
            'radio_technology': 'radioTechnology',
            'supported_spec': 'supportedSpec'
        }

        self._radio_technology = radio_technology
        self._supported_spec = supported_spec

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalDeviceAirInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalDeviceAirInterface of this SasPortalDeviceAirInterface.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def radio_technology(self):
        """Gets the radio_technology of this SasPortalDeviceAirInterface.

        Conditional. This field specifies the radio access technology that is used for the CBSD.

        :return: The radio_technology of this SasPortalDeviceAirInterface.
        :rtype: str
        """
        return self._radio_technology

    @radio_technology.setter
    def radio_technology(self, radio_technology):
        """Sets the radio_technology of this SasPortalDeviceAirInterface.

        Conditional. This field specifies the radio access technology that is used for the CBSD.

        :param radio_technology: The radio_technology of this SasPortalDeviceAirInterface.
        :type radio_technology: str
        """
        allowed_values = ["RADIO_TECHNOLOGY_UNSPECIFIED", "E_UTRA", "CAMBIUM_NETWORKS", "FOUR_G_BBW_SAA_1", "NR", "DOODLE_CBRS", "CW", "REDLINE", "TARANA_WIRELESS"]  # noqa: E501
        if radio_technology not in allowed_values:
            raise ValueError(
                "Invalid value for `radio_technology` ({0}), must be one of {1}"
                .format(radio_technology, allowed_values)
            )

        self._radio_technology = radio_technology

    @property
    def supported_spec(self):
        """Gets the supported_spec of this SasPortalDeviceAirInterface.

        Optional. This field is related to the `radioTechnology` and provides the air interface specification that the CBSD is compliant with at the time of registration.

        :return: The supported_spec of this SasPortalDeviceAirInterface.
        :rtype: str
        """
        return self._supported_spec

    @supported_spec.setter
    def supported_spec(self, supported_spec):
        """Sets the supported_spec of this SasPortalDeviceAirInterface.

        Optional. This field is related to the `radioTechnology` and provides the air interface specification that the CBSD is compliant with at the time of registration.

        :param supported_spec: The supported_spec of this SasPortalDeviceAirInterface.
        :type supported_spec: str
        """

        self._supported_spec = supported_spec
