# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sas_portal_assignment import SasPortalAssignment
from openapi_server import util


class SasPortalPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignments: List[SasPortalAssignment]=None, etag: str=None):
        """SasPortalPolicy - a model defined in OpenAPI

        :param assignments: The assignments of this SasPortalPolicy.
        :param etag: The etag of this SasPortalPolicy.
        """
        self.openapi_types = {
            'assignments': List[SasPortalAssignment],
            'etag': str
        }

        self.attribute_map = {
            'assignments': 'assignments',
            'etag': 'etag'
        }

        self._assignments = assignments
        self._etag = etag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalPolicy of this SasPortalPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignments(self):
        """Gets the assignments of this SasPortalPolicy.

        List of assignments

        :return: The assignments of this SasPortalPolicy.
        :rtype: List[SasPortalAssignment]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this SasPortalPolicy.

        List of assignments

        :param assignments: The assignments of this SasPortalPolicy.
        :type assignments: List[SasPortalAssignment]
        """

        self._assignments = assignments

    @property
    def etag(self):
        """Gets the etag of this SasPortalPolicy.

        The etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to GetPolicy, and systems are expected to put that etag in the request to SetPolicy to ensure that their change will be applied to the same version of the policy. If no etag is provided in the call to GetPolicy, then the existing policy is overwritten blindly.

        :return: The etag of this SasPortalPolicy.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this SasPortalPolicy.

        The etag is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the etag in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An etag is returned in the response to GetPolicy, and systems are expected to put that etag in the request to SetPolicy to ensure that their change will be applied to the same version of the policy. If no etag is provided in the call to GetPolicy, then the existing policy is overwritten blindly.

        :param etag: The etag of this SasPortalPolicy.
        :type etag: str
        """

        self._etag = etag
