# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sas_portal_status import SasPortalStatus
from openapi_server import util


class SasPortalOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, done: bool=None, error: SasPortalStatus=None, metadata: Dict[str, object]=None, name: str=None, response: Dict[str, object]=None):
        """SasPortalOperation - a model defined in OpenAPI

        :param done: The done of this SasPortalOperation.
        :param error: The error of this SasPortalOperation.
        :param metadata: The metadata of this SasPortalOperation.
        :param name: The name of this SasPortalOperation.
        :param response: The response of this SasPortalOperation.
        """
        self.openapi_types = {
            'done': bool,
            'error': SasPortalStatus,
            'metadata': Dict[str, object],
            'name': str,
            'response': Dict[str, object]
        }

        self.attribute_map = {
            'done': 'done',
            'error': 'error',
            'metadata': 'metadata',
            'name': 'name',
            'response': 'response'
        }

        self._done = done
        self._error = error
        self._metadata = metadata
        self._name = name
        self._response = response

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SasPortalOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SasPortalOperation of this SasPortalOperation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def done(self):
        """Gets the done of this SasPortalOperation.

        If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.

        :return: The done of this SasPortalOperation.
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this SasPortalOperation.

        If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.

        :param done: The done of this SasPortalOperation.
        :type done: bool
        """

        self._done = done

    @property
    def error(self):
        """Gets the error of this SasPortalOperation.


        :return: The error of this SasPortalOperation.
        :rtype: SasPortalStatus
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this SasPortalOperation.


        :param error: The error of this SasPortalOperation.
        :type error: SasPortalStatus
        """

        self._error = error

    @property
    def metadata(self):
        """Gets the metadata of this SasPortalOperation.

        Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.

        :return: The metadata of this SasPortalOperation.
        :rtype: Dict[str, object]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this SasPortalOperation.

        Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.

        :param metadata: The metadata of this SasPortalOperation.
        :type metadata: Dict[str, object]
        """

        self._metadata = metadata

    @property
    def name(self):
        """Gets the name of this SasPortalOperation.

        The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.

        :return: The name of this SasPortalOperation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SasPortalOperation.

        The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.

        :param name: The name of this SasPortalOperation.
        :type name: str
        """

        self._name = name

    @property
    def response(self):
        """Gets the response of this SasPortalOperation.

        The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

        :return: The response of this SasPortalOperation.
        :rtype: Dict[str, object]
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this SasPortalOperation.

        The normal, successful response of the operation. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.

        :param response: The response of this SasPortalOperation.
        :type response: Dict[str, object]
        """

        self._response = response
