/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DriveFile from './DriveFile';
import Form from './Form';
import Link from './Link';
import YouTubeVideo from './YouTubeVideo';

/**
 * The Attachment model module.
 * @module model/Attachment
 * @version v1
 */
class Attachment {
    /**
     * Constructs a new <code>Attachment</code>.
     * Attachment added to student assignment work. When creating attachments, setting the &#x60;form&#x60; field is not supported.
     * @alias module:model/Attachment
     */
    constructor() { 
        
        Attachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attachment} obj Optional instance to populate.
     * @return {module:model/Attachment} The populated <code>Attachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attachment();

            if (data.hasOwnProperty('driveFile')) {
                obj['driveFile'] = DriveFile.constructFromObject(data['driveFile']);
            }
            if (data.hasOwnProperty('form')) {
                obj['form'] = Form.constructFromObject(data['form']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = Link.constructFromObject(data['link']);
            }
            if (data.hasOwnProperty('youTubeVideo')) {
                obj['youTubeVideo'] = YouTubeVideo.constructFromObject(data['youTubeVideo']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attachment</code>.
     */
    static validateJSON(data) {
        // validate the optional field `driveFile`
        if (data['driveFile']) { // data not null
          DriveFile.validateJSON(data['driveFile']);
        }
        // validate the optional field `form`
        if (data['form']) { // data not null
          Form.validateJSON(data['form']);
        }
        // validate the optional field `link`
        if (data['link']) { // data not null
          Link.validateJSON(data['link']);
        }
        // validate the optional field `youTubeVideo`
        if (data['youTubeVideo']) { // data not null
          YouTubeVideo.validateJSON(data['youTubeVideo']);
        }

        return true;
    }


}



/**
 * @member {module:model/DriveFile} driveFile
 */
Attachment.prototype['driveFile'] = undefined;

/**
 * @member {module:model/Form} form
 */
Attachment.prototype['form'] = undefined;

/**
 * @member {module:model/Link} link
 */
Attachment.prototype['link'] = undefined;

/**
 * @member {module:model/YouTubeVideo} youTubeVideo
 */
Attachment.prototype['youTubeVideo'] = undefined;






export default Attachment;

