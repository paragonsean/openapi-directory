/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Assignment from './Assignment';
import GradeCategory from './GradeCategory';
import IndividualStudentsOptions from './IndividualStudentsOptions';
import Material from './Material';
import ModelDate from './ModelDate';
import MultipleChoiceQuestion from './MultipleChoiceQuestion';
import TimeOfDay from './TimeOfDay';

/**
 * The CourseWork model module.
 * @module model/CourseWork
 * @version v1
 */
class CourseWork {
    /**
     * Constructs a new <code>CourseWork</code>.
     * Course work created by a teacher for students of the course.
     * @alias module:model/CourseWork
     */
    constructor() { 
        
        CourseWork.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CourseWork</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CourseWork} obj Optional instance to populate.
     * @return {module:model/CourseWork} The populated <code>CourseWork</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CourseWork();

            if (data.hasOwnProperty('alternateLink')) {
                obj['alternateLink'] = ApiClient.convertToType(data['alternateLink'], 'String');
            }
            if (data.hasOwnProperty('assigneeMode')) {
                obj['assigneeMode'] = ApiClient.convertToType(data['assigneeMode'], 'String');
            }
            if (data.hasOwnProperty('assignment')) {
                obj['assignment'] = Assignment.constructFromObject(data['assignment']);
            }
            if (data.hasOwnProperty('associatedWithDeveloper')) {
                obj['associatedWithDeveloper'] = ApiClient.convertToType(data['associatedWithDeveloper'], 'Boolean');
            }
            if (data.hasOwnProperty('courseId')) {
                obj['courseId'] = ApiClient.convertToType(data['courseId'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('creatorUserId')) {
                obj['creatorUserId'] = ApiClient.convertToType(data['creatorUserId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('dueDate')) {
                obj['dueDate'] = ModelDate.constructFromObject(data['dueDate']);
            }
            if (data.hasOwnProperty('dueTime')) {
                obj['dueTime'] = TimeOfDay.constructFromObject(data['dueTime']);
            }
            if (data.hasOwnProperty('gradeCategory')) {
                obj['gradeCategory'] = GradeCategory.constructFromObject(data['gradeCategory']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('individualStudentsOptions')) {
                obj['individualStudentsOptions'] = IndividualStudentsOptions.constructFromObject(data['individualStudentsOptions']);
            }
            if (data.hasOwnProperty('materials')) {
                obj['materials'] = ApiClient.convertToType(data['materials'], [Material]);
            }
            if (data.hasOwnProperty('maxPoints')) {
                obj['maxPoints'] = ApiClient.convertToType(data['maxPoints'], 'Number');
            }
            if (data.hasOwnProperty('multipleChoiceQuestion')) {
                obj['multipleChoiceQuestion'] = MultipleChoiceQuestion.constructFromObject(data['multipleChoiceQuestion']);
            }
            if (data.hasOwnProperty('scheduledTime')) {
                obj['scheduledTime'] = ApiClient.convertToType(data['scheduledTime'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('submissionModificationMode')) {
                obj['submissionModificationMode'] = ApiClient.convertToType(data['submissionModificationMode'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('topicId')) {
                obj['topicId'] = ApiClient.convertToType(data['topicId'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('workType')) {
                obj['workType'] = ApiClient.convertToType(data['workType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CourseWork</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CourseWork</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternateLink'] && !(typeof data['alternateLink'] === 'string' || data['alternateLink'] instanceof String)) {
            throw new Error("Expected the field `alternateLink` to be a primitive type in the JSON string but got " + data['alternateLink']);
        }
        // ensure the json data is a string
        if (data['assigneeMode'] && !(typeof data['assigneeMode'] === 'string' || data['assigneeMode'] instanceof String)) {
            throw new Error("Expected the field `assigneeMode` to be a primitive type in the JSON string but got " + data['assigneeMode']);
        }
        // validate the optional field `assignment`
        if (data['assignment']) { // data not null
          Assignment.validateJSON(data['assignment']);
        }
        // ensure the json data is a string
        if (data['courseId'] && !(typeof data['courseId'] === 'string' || data['courseId'] instanceof String)) {
            throw new Error("Expected the field `courseId` to be a primitive type in the JSON string but got " + data['courseId']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['creatorUserId'] && !(typeof data['creatorUserId'] === 'string' || data['creatorUserId'] instanceof String)) {
            throw new Error("Expected the field `creatorUserId` to be a primitive type in the JSON string but got " + data['creatorUserId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `dueDate`
        if (data['dueDate']) { // data not null
          ModelDate.validateJSON(data['dueDate']);
        }
        // validate the optional field `dueTime`
        if (data['dueTime']) { // data not null
          TimeOfDay.validateJSON(data['dueTime']);
        }
        // validate the optional field `gradeCategory`
        if (data['gradeCategory']) { // data not null
          GradeCategory.validateJSON(data['gradeCategory']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `individualStudentsOptions`
        if (data['individualStudentsOptions']) { // data not null
          IndividualStudentsOptions.validateJSON(data['individualStudentsOptions']);
        }
        if (data['materials']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['materials'])) {
                throw new Error("Expected the field `materials` to be an array in the JSON data but got " + data['materials']);
            }
            // validate the optional field `materials` (array)
            for (const item of data['materials']) {
                Material.validateJSON(item);
            };
        }
        // validate the optional field `multipleChoiceQuestion`
        if (data['multipleChoiceQuestion']) { // data not null
          MultipleChoiceQuestion.validateJSON(data['multipleChoiceQuestion']);
        }
        // ensure the json data is a string
        if (data['scheduledTime'] && !(typeof data['scheduledTime'] === 'string' || data['scheduledTime'] instanceof String)) {
            throw new Error("Expected the field `scheduledTime` to be a primitive type in the JSON string but got " + data['scheduledTime']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['submissionModificationMode'] && !(typeof data['submissionModificationMode'] === 'string' || data['submissionModificationMode'] instanceof String)) {
            throw new Error("Expected the field `submissionModificationMode` to be a primitive type in the JSON string but got " + data['submissionModificationMode']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['topicId'] && !(typeof data['topicId'] === 'string' || data['topicId'] instanceof String)) {
            throw new Error("Expected the field `topicId` to be a primitive type in the JSON string but got " + data['topicId']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['workType'] && !(typeof data['workType'] === 'string' || data['workType'] instanceof String)) {
            throw new Error("Expected the field `workType` to be a primitive type in the JSON string but got " + data['workType']);
        }

        return true;
    }


}



/**
 * Absolute link to this course work in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.
 * @member {String} alternateLink
 */
CourseWork.prototype['alternateLink'] = undefined;

/**
 * Assignee mode of the coursework. If unspecified, the default value is `ALL_STUDENTS`.
 * @member {module:model/CourseWork.AssigneeModeEnum} assigneeMode
 */
CourseWork.prototype['assigneeMode'] = undefined;

/**
 * @member {module:model/Assignment} assignment
 */
CourseWork.prototype['assignment'] = undefined;

/**
 * Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
 * @member {Boolean} associatedWithDeveloper
 */
CourseWork.prototype['associatedWithDeveloper'] = undefined;

/**
 * Identifier of the course. Read-only.
 * @member {String} courseId
 */
CourseWork.prototype['courseId'] = undefined;

/**
 * Timestamp when this course work was created. Read-only.
 * @member {String} creationTime
 */
CourseWork.prototype['creationTime'] = undefined;

/**
 * Identifier for the user that created the coursework. Read-only.
 * @member {String} creatorUserId
 */
CourseWork.prototype['creatorUserId'] = undefined;

/**
 * Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.
 * @member {String} description
 */
CourseWork.prototype['description'] = undefined;

/**
 * @member {module:model/ModelDate} dueDate
 */
CourseWork.prototype['dueDate'] = undefined;

/**
 * @member {module:model/TimeOfDay} dueTime
 */
CourseWork.prototype['dueTime'] = undefined;

/**
 * @member {module:model/GradeCategory} gradeCategory
 */
CourseWork.prototype['gradeCategory'] = undefined;

/**
 * Classroom-assigned identifier of this course work, unique per course. Read-only.
 * @member {String} id
 */
CourseWork.prototype['id'] = undefined;

/**
 * @member {module:model/IndividualStudentsOptions} individualStudentsOptions
 */
CourseWork.prototype['individualStudentsOptions'] = undefined;

/**
 * Additional materials. CourseWork must have no more than 20 material items.
 * @member {Array.<module:model/Material>} materials
 */
CourseWork.prototype['materials'] = undefined;

/**
 * Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.
 * @member {Number} maxPoints
 */
CourseWork.prototype['maxPoints'] = undefined;

/**
 * @member {module:model/MultipleChoiceQuestion} multipleChoiceQuestion
 */
CourseWork.prototype['multipleChoiceQuestion'] = undefined;

/**
 * Optional timestamp when this course work is scheduled to be published.
 * @member {String} scheduledTime
 */
CourseWork.prototype['scheduledTime'] = undefined;

/**
 * Status of this course work. If unspecified, the default state is `DRAFT`.
 * @member {module:model/CourseWork.StateEnum} state
 */
CourseWork.prototype['state'] = undefined;

/**
 * Setting to determine when students are allowed to modify submissions. If unspecified, the default value is `MODIFIABLE_UNTIL_TURNED_IN`.
 * @member {module:model/CourseWork.SubmissionModificationModeEnum} submissionModificationMode
 */
CourseWork.prototype['submissionModificationMode'] = undefined;

/**
 * Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
 * @member {String} title
 */
CourseWork.prototype['title'] = undefined;

/**
 * Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.
 * @member {String} topicId
 */
CourseWork.prototype['topicId'] = undefined;

/**
 * Timestamp of the most recent change to this course work. Read-only.
 * @member {String} updateTime
 */
CourseWork.prototype['updateTime'] = undefined;

/**
 * Type of this course work. The type is set when the course work is created and cannot be changed.
 * @member {module:model/CourseWork.WorkTypeEnum} workType
 */
CourseWork.prototype['workType'] = undefined;





/**
 * Allowed values for the <code>assigneeMode</code> property.
 * @enum {String}
 * @readonly
 */
CourseWork['AssigneeModeEnum'] = {

    /**
     * value: "ASSIGNEE_MODE_UNSPECIFIED"
     * @const
     */
    "ASSIGNEE_MODE_UNSPECIFIED": "ASSIGNEE_MODE_UNSPECIFIED",

    /**
     * value: "ALL_STUDENTS"
     * @const
     */
    "ALL_STUDENTS": "ALL_STUDENTS",

    /**
     * value: "INDIVIDUAL_STUDENTS"
     * @const
     */
    "INDIVIDUAL_STUDENTS": "INDIVIDUAL_STUDENTS"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
CourseWork['StateEnum'] = {

    /**
     * value: "COURSE_WORK_STATE_UNSPECIFIED"
     * @const
     */
    "COURSE_WORK_STATE_UNSPECIFIED": "COURSE_WORK_STATE_UNSPECIFIED",

    /**
     * value: "PUBLISHED"
     * @const
     */
    "PUBLISHED": "PUBLISHED",

    /**
     * value: "DRAFT"
     * @const
     */
    "DRAFT": "DRAFT",

    /**
     * value: "DELETED"
     * @const
     */
    "DELETED": "DELETED"
};


/**
 * Allowed values for the <code>submissionModificationMode</code> property.
 * @enum {String}
 * @readonly
 */
CourseWork['SubmissionModificationModeEnum'] = {

    /**
     * value: "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED"
     * @const
     */
    "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED": "SUBMISSION_MODIFICATION_MODE_UNSPECIFIED",

    /**
     * value: "MODIFIABLE_UNTIL_TURNED_IN"
     * @const
     */
    "MODIFIABLE_UNTIL_TURNED_IN": "MODIFIABLE_UNTIL_TURNED_IN",

    /**
     * value: "MODIFIABLE"
     * @const
     */
    "MODIFIABLE": "MODIFIABLE"
};


/**
 * Allowed values for the <code>workType</code> property.
 * @enum {String}
 * @readonly
 */
CourseWork['WorkTypeEnum'] = {

    /**
     * value: "COURSE_WORK_TYPE_UNSPECIFIED"
     * @const
     */
    "COURSE_WORK_TYPE_UNSPECIFIED": "COURSE_WORK_TYPE_UNSPECIFIED",

    /**
     * value: "ASSIGNMENT"
     * @const
     */
    "ASSIGNMENT": "ASSIGNMENT",

    /**
     * value: "SHORT_ANSWER_QUESTION"
     * @const
     */
    "SHORT_ANSWER_QUESTION": "SHORT_ANSWER_QUESTION",

    /**
     * value: "MULTIPLE_CHOICE_QUESTION"
     * @const
     */
    "MULTIPLE_CHOICE_QUESTION": "MULTIPLE_CHOICE_QUESTION"
};



export default CourseWork;

