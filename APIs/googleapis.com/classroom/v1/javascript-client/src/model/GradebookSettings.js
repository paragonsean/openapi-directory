/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GradeCategory from './GradeCategory';

/**
 * The GradebookSettings model module.
 * @module model/GradebookSettings
 * @version v1
 */
class GradebookSettings {
    /**
     * Constructs a new <code>GradebookSettings</code>.
     * The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
     * @alias module:model/GradebookSettings
     */
    constructor() { 
        
        GradebookSettings.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GradebookSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GradebookSettings} obj Optional instance to populate.
     * @return {module:model/GradebookSettings} The populated <code>GradebookSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GradebookSettings();

            if (data.hasOwnProperty('calculationType')) {
                obj['calculationType'] = ApiClient.convertToType(data['calculationType'], 'String');
            }
            if (data.hasOwnProperty('displaySetting')) {
                obj['displaySetting'] = ApiClient.convertToType(data['displaySetting'], 'String');
            }
            if (data.hasOwnProperty('gradeCategories')) {
                obj['gradeCategories'] = ApiClient.convertToType(data['gradeCategories'], [GradeCategory]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GradebookSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GradebookSettings</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['calculationType'] && !(typeof data['calculationType'] === 'string' || data['calculationType'] instanceof String)) {
            throw new Error("Expected the field `calculationType` to be a primitive type in the JSON string but got " + data['calculationType']);
        }
        // ensure the json data is a string
        if (data['displaySetting'] && !(typeof data['displaySetting'] === 'string' || data['displaySetting'] instanceof String)) {
            throw new Error("Expected the field `displaySetting` to be a primitive type in the JSON string but got " + data['displaySetting']);
        }
        if (data['gradeCategories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['gradeCategories'])) {
                throw new Error("Expected the field `gradeCategories` to be an array in the JSON data but got " + data['gradeCategories']);
            }
            // validate the optional field `gradeCategories` (array)
            for (const item of data['gradeCategories']) {
                GradeCategory.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Indicates how the overall grade is calculated.
 * @member {module:model/GradebookSettings.CalculationTypeEnum} calculationType
 */
GradebookSettings.prototype['calculationType'] = undefined;

/**
 * Indicates who can see the overall grade..
 * @member {module:model/GradebookSettings.DisplaySettingEnum} displaySetting
 */
GradebookSettings.prototype['displaySetting'] = undefined;

/**
 * Grade categories that are available for coursework in the course.
 * @member {Array.<module:model/GradeCategory>} gradeCategories
 */
GradebookSettings.prototype['gradeCategories'] = undefined;





/**
 * Allowed values for the <code>calculationType</code> property.
 * @enum {String}
 * @readonly
 */
GradebookSettings['CalculationTypeEnum'] = {

    /**
     * value: "CALCULATION_TYPE_UNSPECIFIED"
     * @const
     */
    "CALCULATION_TYPE_UNSPECIFIED": "CALCULATION_TYPE_UNSPECIFIED",

    /**
     * value: "TOTAL_POINTS"
     * @const
     */
    "TOTAL_POINTS": "TOTAL_POINTS",

    /**
     * value: "WEIGHTED_CATEGORIES"
     * @const
     */
    "WEIGHTED_CATEGORIES": "WEIGHTED_CATEGORIES"
};


/**
 * Allowed values for the <code>displaySetting</code> property.
 * @enum {String}
 * @readonly
 */
GradebookSettings['DisplaySettingEnum'] = {

    /**
     * value: "DISPLAY_SETTING_UNSPECIFIED"
     * @const
     */
    "DISPLAY_SETTING_UNSPECIFIED": "DISPLAY_SETTING_UNSPECIFIED",

    /**
     * value: "SHOW_OVERALL_GRADE"
     * @const
     */
    "SHOW_OVERALL_GRADE": "SHOW_OVERALL_GRADE",

    /**
     * value: "HIDE_OVERALL_GRADE"
     * @const
     */
    "HIDE_OVERALL_GRADE": "HIDE_OVERALL_GRADE",

    /**
     * value: "SHOW_TEACHERS_ONLY"
     * @const
     */
    "SHOW_TEACHERS_ONLY": "SHOW_TEACHERS_ONLY"
};



export default GradebookSettings;

