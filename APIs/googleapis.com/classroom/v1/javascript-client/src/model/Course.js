/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CourseMaterialSet from './CourseMaterialSet';
import DriveFolder from './DriveFolder';
import GradebookSettings from './GradebookSettings';

/**
 * The Course model module.
 * @module model/Course
 * @version v1
 */
class Course {
    /**
     * Constructs a new <code>Course</code>.
     * A Course in Classroom.
     * @alias module:model/Course
     */
    constructor() { 
        
        Course.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Course</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Course} obj Optional instance to populate.
     * @return {module:model/Course} The populated <code>Course</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Course();

            if (data.hasOwnProperty('alternateLink')) {
                obj['alternateLink'] = ApiClient.convertToType(data['alternateLink'], 'String');
            }
            if (data.hasOwnProperty('calendarId')) {
                obj['calendarId'] = ApiClient.convertToType(data['calendarId'], 'String');
            }
            if (data.hasOwnProperty('courseGroupEmail')) {
                obj['courseGroupEmail'] = ApiClient.convertToType(data['courseGroupEmail'], 'String');
            }
            if (data.hasOwnProperty('courseMaterialSets')) {
                obj['courseMaterialSets'] = ApiClient.convertToType(data['courseMaterialSets'], [CourseMaterialSet]);
            }
            if (data.hasOwnProperty('courseState')) {
                obj['courseState'] = ApiClient.convertToType(data['courseState'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('descriptionHeading')) {
                obj['descriptionHeading'] = ApiClient.convertToType(data['descriptionHeading'], 'String');
            }
            if (data.hasOwnProperty('enrollmentCode')) {
                obj['enrollmentCode'] = ApiClient.convertToType(data['enrollmentCode'], 'String');
            }
            if (data.hasOwnProperty('gradebookSettings')) {
                obj['gradebookSettings'] = GradebookSettings.constructFromObject(data['gradebookSettings']);
            }
            if (data.hasOwnProperty('guardiansEnabled')) {
                obj['guardiansEnabled'] = ApiClient.convertToType(data['guardiansEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('room')) {
                obj['room'] = ApiClient.convertToType(data['room'], 'String');
            }
            if (data.hasOwnProperty('section')) {
                obj['section'] = ApiClient.convertToType(data['section'], 'String');
            }
            if (data.hasOwnProperty('teacherFolder')) {
                obj['teacherFolder'] = DriveFolder.constructFromObject(data['teacherFolder']);
            }
            if (data.hasOwnProperty('teacherGroupEmail')) {
                obj['teacherGroupEmail'] = ApiClient.convertToType(data['teacherGroupEmail'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Course</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Course</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternateLink'] && !(typeof data['alternateLink'] === 'string' || data['alternateLink'] instanceof String)) {
            throw new Error("Expected the field `alternateLink` to be a primitive type in the JSON string but got " + data['alternateLink']);
        }
        // ensure the json data is a string
        if (data['calendarId'] && !(typeof data['calendarId'] === 'string' || data['calendarId'] instanceof String)) {
            throw new Error("Expected the field `calendarId` to be a primitive type in the JSON string but got " + data['calendarId']);
        }
        // ensure the json data is a string
        if (data['courseGroupEmail'] && !(typeof data['courseGroupEmail'] === 'string' || data['courseGroupEmail'] instanceof String)) {
            throw new Error("Expected the field `courseGroupEmail` to be a primitive type in the JSON string but got " + data['courseGroupEmail']);
        }
        if (data['courseMaterialSets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['courseMaterialSets'])) {
                throw new Error("Expected the field `courseMaterialSets` to be an array in the JSON data but got " + data['courseMaterialSets']);
            }
            // validate the optional field `courseMaterialSets` (array)
            for (const item of data['courseMaterialSets']) {
                CourseMaterialSet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['courseState'] && !(typeof data['courseState'] === 'string' || data['courseState'] instanceof String)) {
            throw new Error("Expected the field `courseState` to be a primitive type in the JSON string but got " + data['courseState']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['descriptionHeading'] && !(typeof data['descriptionHeading'] === 'string' || data['descriptionHeading'] instanceof String)) {
            throw new Error("Expected the field `descriptionHeading` to be a primitive type in the JSON string but got " + data['descriptionHeading']);
        }
        // ensure the json data is a string
        if (data['enrollmentCode'] && !(typeof data['enrollmentCode'] === 'string' || data['enrollmentCode'] instanceof String)) {
            throw new Error("Expected the field `enrollmentCode` to be a primitive type in the JSON string but got " + data['enrollmentCode']);
        }
        // validate the optional field `gradebookSettings`
        if (data['gradebookSettings']) { // data not null
          GradebookSettings.validateJSON(data['gradebookSettings']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['room'] && !(typeof data['room'] === 'string' || data['room'] instanceof String)) {
            throw new Error("Expected the field `room` to be a primitive type in the JSON string but got " + data['room']);
        }
        // ensure the json data is a string
        if (data['section'] && !(typeof data['section'] === 'string' || data['section'] instanceof String)) {
            throw new Error("Expected the field `section` to be a primitive type in the JSON string but got " + data['section']);
        }
        // validate the optional field `teacherFolder`
        if (data['teacherFolder']) { // data not null
          DriveFolder.validateJSON(data['teacherFolder']);
        }
        // ensure the json data is a string
        if (data['teacherGroupEmail'] && !(typeof data['teacherGroupEmail'] === 'string' || data['teacherGroupEmail'] instanceof String)) {
            throw new Error("Expected the field `teacherGroupEmail` to be a primitive type in the JSON string but got " + data['teacherGroupEmail']);
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }

        return true;
    }


}



/**
 * Absolute link to this course in the Classroom web UI. Read-only.
 * @member {String} alternateLink
 */
Course.prototype['alternateLink'] = undefined;

/**
 * The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to `CourseState.ACTIVE` for the first time (at creation time or when it is updated to `ACTIVE` through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.
 * @member {String} calendarId
 */
Course.prototype['calendarId'] = undefined;

/**
 * The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.
 * @member {String} courseGroupEmail
 */
Course.prototype['courseGroupEmail'] = undefined;

/**
 * Sets of materials that appear on the \"about\" page of this course. Read-only.
 * @member {Array.<module:model/CourseMaterialSet>} courseMaterialSets
 */
Course.prototype['courseMaterialSets'] = undefined;

/**
 * State of the course. If unspecified, the default state is `PROVISIONED`.
 * @member {module:model/Course.CourseStateEnum} courseState
 */
Course.prototype['courseState'] = undefined;

/**
 * Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.
 * @member {String} creationTime
 */
Course.prototype['creationTime'] = undefined;

/**
 * Optional description. For example, \"We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!\" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.
 * @member {String} description
 */
Course.prototype['description'] = undefined;

/**
 * Optional heading for the description. For example, \"Welcome to 10th Grade Biology.\" If set, this field must be a valid UTF-8 string and no longer than 3600 characters.
 * @member {String} descriptionHeading
 */
Course.prototype['descriptionHeading'] = undefined;

/**
 * Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.
 * @member {String} enrollmentCode
 */
Course.prototype['enrollmentCode'] = undefined;

/**
 * @member {module:model/GradebookSettings} gradebookSettings
 */
Course.prototype['gradebookSettings'] = undefined;

/**
 * Whether or not guardian notifications are enabled for this course. Read-only.
 * @member {Boolean} guardiansEnabled
 */
Course.prototype['guardiansEnabled'] = undefined;

/**
 * Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.
 * @member {String} id
 */
Course.prototype['id'] = undefined;

/**
 * Name of the course. For example, \"10th Grade Biology\". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.
 * @member {String} name
 */
Course.prototype['name'] = undefined;

/**
 * The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.
 * @member {String} ownerId
 */
Course.prototype['ownerId'] = undefined;

/**
 * Optional room location. For example, \"301\". If set, this field must be a valid UTF-8 string and no longer than 650 characters.
 * @member {String} room
 */
Course.prototype['room'] = undefined;

/**
 * Section of the course. For example, \"Period 2\". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.
 * @member {String} section
 */
Course.prototype['section'] = undefined;

/**
 * @member {module:model/DriveFolder} teacherFolder
 */
Course.prototype['teacherFolder'] = undefined;

/**
 * The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.
 * @member {String} teacherGroupEmail
 */
Course.prototype['teacherGroupEmail'] = undefined;

/**
 * Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.
 * @member {String} updateTime
 */
Course.prototype['updateTime'] = undefined;





/**
 * Allowed values for the <code>courseState</code> property.
 * @enum {String}
 * @readonly
 */
Course['CourseStateEnum'] = {

    /**
     * value: "COURSE_STATE_UNSPECIFIED"
     * @const
     */
    "COURSE_STATE_UNSPECIFIED": "COURSE_STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED",

    /**
     * value: "PROVISIONED"
     * @const
     */
    "PROVISIONED": "PROVISIONED",

    /**
     * value: "DECLINED"
     * @const
     */
    "DECLINED": "DECLINED",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED"
};



export default Course;

