/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AssignmentSubmission from './AssignmentSubmission';
import MultipleChoiceSubmission from './MultipleChoiceSubmission';
import ShortAnswerSubmission from './ShortAnswerSubmission';
import SubmissionHistory from './SubmissionHistory';

/**
 * The StudentSubmission model module.
 * @module model/StudentSubmission
 * @version v1
 */
class StudentSubmission {
    /**
     * Constructs a new <code>StudentSubmission</code>.
     * Student submission for course work. &#x60;StudentSubmission&#x60; items are generated when a &#x60;CourseWork&#x60; item is created. Student submissions that have never been accessed (i.e. with &#x60;state&#x60; &#x3D; NEW) may not have a creation time or update time.
     * @alias module:model/StudentSubmission
     */
    constructor() { 
        
        StudentSubmission.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StudentSubmission</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StudentSubmission} obj Optional instance to populate.
     * @return {module:model/StudentSubmission} The populated <code>StudentSubmission</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StudentSubmission();

            if (data.hasOwnProperty('alternateLink')) {
                obj['alternateLink'] = ApiClient.convertToType(data['alternateLink'], 'String');
            }
            if (data.hasOwnProperty('assignedGrade')) {
                obj['assignedGrade'] = ApiClient.convertToType(data['assignedGrade'], 'Number');
            }
            if (data.hasOwnProperty('assignmentSubmission')) {
                obj['assignmentSubmission'] = AssignmentSubmission.constructFromObject(data['assignmentSubmission']);
            }
            if (data.hasOwnProperty('associatedWithDeveloper')) {
                obj['associatedWithDeveloper'] = ApiClient.convertToType(data['associatedWithDeveloper'], 'Boolean');
            }
            if (data.hasOwnProperty('courseId')) {
                obj['courseId'] = ApiClient.convertToType(data['courseId'], 'String');
            }
            if (data.hasOwnProperty('courseWorkId')) {
                obj['courseWorkId'] = ApiClient.convertToType(data['courseWorkId'], 'String');
            }
            if (data.hasOwnProperty('courseWorkType')) {
                obj['courseWorkType'] = ApiClient.convertToType(data['courseWorkType'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'String');
            }
            if (data.hasOwnProperty('draftGrade')) {
                obj['draftGrade'] = ApiClient.convertToType(data['draftGrade'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('late')) {
                obj['late'] = ApiClient.convertToType(data['late'], 'Boolean');
            }
            if (data.hasOwnProperty('multipleChoiceSubmission')) {
                obj['multipleChoiceSubmission'] = MultipleChoiceSubmission.constructFromObject(data['multipleChoiceSubmission']);
            }
            if (data.hasOwnProperty('shortAnswerSubmission')) {
                obj['shortAnswerSubmission'] = ShortAnswerSubmission.constructFromObject(data['shortAnswerSubmission']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('submissionHistory')) {
                obj['submissionHistory'] = ApiClient.convertToType(data['submissionHistory'], [SubmissionHistory]);
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StudentSubmission</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StudentSubmission</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternateLink'] && !(typeof data['alternateLink'] === 'string' || data['alternateLink'] instanceof String)) {
            throw new Error("Expected the field `alternateLink` to be a primitive type in the JSON string but got " + data['alternateLink']);
        }
        // validate the optional field `assignmentSubmission`
        if (data['assignmentSubmission']) { // data not null
          AssignmentSubmission.validateJSON(data['assignmentSubmission']);
        }
        // ensure the json data is a string
        if (data['courseId'] && !(typeof data['courseId'] === 'string' || data['courseId'] instanceof String)) {
            throw new Error("Expected the field `courseId` to be a primitive type in the JSON string but got " + data['courseId']);
        }
        // ensure the json data is a string
        if (data['courseWorkId'] && !(typeof data['courseWorkId'] === 'string' || data['courseWorkId'] instanceof String)) {
            throw new Error("Expected the field `courseWorkId` to be a primitive type in the JSON string but got " + data['courseWorkId']);
        }
        // ensure the json data is a string
        if (data['courseWorkType'] && !(typeof data['courseWorkType'] === 'string' || data['courseWorkType'] instanceof String)) {
            throw new Error("Expected the field `courseWorkType` to be a primitive type in the JSON string but got " + data['courseWorkType']);
        }
        // ensure the json data is a string
        if (data['creationTime'] && !(typeof data['creationTime'] === 'string' || data['creationTime'] instanceof String)) {
            throw new Error("Expected the field `creationTime` to be a primitive type in the JSON string but got " + data['creationTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `multipleChoiceSubmission`
        if (data['multipleChoiceSubmission']) { // data not null
          MultipleChoiceSubmission.validateJSON(data['multipleChoiceSubmission']);
        }
        // validate the optional field `shortAnswerSubmission`
        if (data['shortAnswerSubmission']) { // data not null
          ShortAnswerSubmission.validateJSON(data['shortAnswerSubmission']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        if (data['submissionHistory']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['submissionHistory'])) {
                throw new Error("Expected the field `submissionHistory` to be an array in the JSON data but got " + data['submissionHistory']);
            }
            // validate the optional field `submissionHistory` (array)
            for (const item of data['submissionHistory']) {
                SubmissionHistory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['updateTime'] && !(typeof data['updateTime'] === 'string' || data['updateTime'] instanceof String)) {
            throw new Error("Expected the field `updateTime` to be a primitive type in the JSON string but got " + data['updateTime']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Absolute link to the submission in the Classroom web UI. Read-only.
 * @member {String} alternateLink
 */
StudentSubmission.prototype['alternateLink'] = undefined;

/**
 * Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.
 * @member {Number} assignedGrade
 */
StudentSubmission.prototype['assignedGrade'] = undefined;

/**
 * @member {module:model/AssignmentSubmission} assignmentSubmission
 */
StudentSubmission.prototype['assignmentSubmission'] = undefined;

/**
 * Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
 * @member {Boolean} associatedWithDeveloper
 */
StudentSubmission.prototype['associatedWithDeveloper'] = undefined;

/**
 * Identifier of the course. Read-only.
 * @member {String} courseId
 */
StudentSubmission.prototype['courseId'] = undefined;

/**
 * Identifier for the course work this corresponds to. Read-only.
 * @member {String} courseWorkId
 */
StudentSubmission.prototype['courseWorkId'] = undefined;

/**
 * Type of course work this submission is for. Read-only.
 * @member {module:model/StudentSubmission.CourseWorkTypeEnum} courseWorkType
 */
StudentSubmission.prototype['courseWorkType'] = undefined;

/**
 * Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.
 * @member {String} creationTime
 */
StudentSubmission.prototype['creationTime'] = undefined;

/**
 * Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.
 * @member {Number} draftGrade
 */
StudentSubmission.prototype['draftGrade'] = undefined;

/**
 * Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.
 * @member {String} id
 */
StudentSubmission.prototype['id'] = undefined;

/**
 * Whether this submission is late. Read-only.
 * @member {Boolean} late
 */
StudentSubmission.prototype['late'] = undefined;

/**
 * @member {module:model/MultipleChoiceSubmission} multipleChoiceSubmission
 */
StudentSubmission.prototype['multipleChoiceSubmission'] = undefined;

/**
 * @member {module:model/ShortAnswerSubmission} shortAnswerSubmission
 */
StudentSubmission.prototype['shortAnswerSubmission'] = undefined;

/**
 * State of this submission. Read-only.
 * @member {module:model/StudentSubmission.StateEnum} state
 */
StudentSubmission.prototype['state'] = undefined;

/**
 * The history of the submission (includes state and grade histories). Read-only.
 * @member {Array.<module:model/SubmissionHistory>} submissionHistory
 */
StudentSubmission.prototype['submissionHistory'] = undefined;

/**
 * Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.
 * @member {String} updateTime
 */
StudentSubmission.prototype['updateTime'] = undefined;

/**
 * Identifier for the student that owns this submission. Read-only.
 * @member {String} userId
 */
StudentSubmission.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>courseWorkType</code> property.
 * @enum {String}
 * @readonly
 */
StudentSubmission['CourseWorkTypeEnum'] = {

    /**
     * value: "COURSE_WORK_TYPE_UNSPECIFIED"
     * @const
     */
    "COURSE_WORK_TYPE_UNSPECIFIED": "COURSE_WORK_TYPE_UNSPECIFIED",

    /**
     * value: "ASSIGNMENT"
     * @const
     */
    "ASSIGNMENT": "ASSIGNMENT",

    /**
     * value: "SHORT_ANSWER_QUESTION"
     * @const
     */
    "SHORT_ANSWER_QUESTION": "SHORT_ANSWER_QUESTION",

    /**
     * value: "MULTIPLE_CHOICE_QUESTION"
     * @const
     */
    "MULTIPLE_CHOICE_QUESTION": "MULTIPLE_CHOICE_QUESTION"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
StudentSubmission['StateEnum'] = {

    /**
     * value: "SUBMISSION_STATE_UNSPECIFIED"
     * @const
     */
    "SUBMISSION_STATE_UNSPECIFIED": "SUBMISSION_STATE_UNSPECIFIED",

    /**
     * value: "NEW"
     * @const
     */
    "NEW": "NEW",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "TURNED_IN"
     * @const
     */
    "TURNED_IN": "TURNED_IN",

    /**
     * value: "RETURNED"
     * @const
     */
    "RETURNED": "RETURNED",

    /**
     * value: "RECLAIMED_BY_STUDENT"
     * @const
     */
    "RECLAIMED_BY_STUDENT": "RECLAIMED_BY_STUDENT"
};



export default StudentSubmission;

