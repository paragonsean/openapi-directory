# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.grade_category import GradeCategory
from openapi_server import util


class GradebookSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calculation_type: str=None, display_setting: str=None, grade_categories: List[GradeCategory]=None):
        """GradebookSettings - a model defined in OpenAPI

        :param calculation_type: The calculation_type of this GradebookSettings.
        :param display_setting: The display_setting of this GradebookSettings.
        :param grade_categories: The grade_categories of this GradebookSettings.
        """
        self.openapi_types = {
            'calculation_type': str,
            'display_setting': str,
            'grade_categories': List[GradeCategory]
        }

        self.attribute_map = {
            'calculation_type': 'calculationType',
            'display_setting': 'displaySetting',
            'grade_categories': 'gradeCategories'
        }

        self._calculation_type = calculation_type
        self._display_setting = display_setting
        self._grade_categories = grade_categories

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GradebookSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GradebookSettings of this GradebookSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calculation_type(self):
        """Gets the calculation_type of this GradebookSettings.

        Indicates how the overall grade is calculated.

        :return: The calculation_type of this GradebookSettings.
        :rtype: str
        """
        return self._calculation_type

    @calculation_type.setter
    def calculation_type(self, calculation_type):
        """Sets the calculation_type of this GradebookSettings.

        Indicates how the overall grade is calculated.

        :param calculation_type: The calculation_type of this GradebookSettings.
        :type calculation_type: str
        """
        allowed_values = ["CALCULATION_TYPE_UNSPECIFIED", "TOTAL_POINTS", "WEIGHTED_CATEGORIES"]  # noqa: E501
        if calculation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `calculation_type` ({0}), must be one of {1}"
                .format(calculation_type, allowed_values)
            )

        self._calculation_type = calculation_type

    @property
    def display_setting(self):
        """Gets the display_setting of this GradebookSettings.

        Indicates who can see the overall grade..

        :return: The display_setting of this GradebookSettings.
        :rtype: str
        """
        return self._display_setting

    @display_setting.setter
    def display_setting(self, display_setting):
        """Sets the display_setting of this GradebookSettings.

        Indicates who can see the overall grade..

        :param display_setting: The display_setting of this GradebookSettings.
        :type display_setting: str
        """
        allowed_values = ["DISPLAY_SETTING_UNSPECIFIED", "SHOW_OVERALL_GRADE", "HIDE_OVERALL_GRADE", "SHOW_TEACHERS_ONLY"]  # noqa: E501
        if display_setting not in allowed_values:
            raise ValueError(
                "Invalid value for `display_setting` ({0}), must be one of {1}"
                .format(display_setting, allowed_values)
            )

        self._display_setting = display_setting

    @property
    def grade_categories(self):
        """Gets the grade_categories of this GradebookSettings.

        Grade categories that are available for coursework in the course.

        :return: The grade_categories of this GradebookSettings.
        :rtype: List[GradeCategory]
        """
        return self._grade_categories

    @grade_categories.setter
    def grade_categories(self, grade_categories):
        """Sets the grade_categories of this GradebookSettings.

        Grade categories that are available for coursework in the course.

        :param grade_categories: The grade_categories of this GradebookSettings.
        :type grade_categories: List[GradeCategory]
        """

        self._grade_categories = grade_categories
