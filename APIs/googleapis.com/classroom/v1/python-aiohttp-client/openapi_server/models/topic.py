# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Topic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_id: str=None, name: str=None, topic_id: str=None, update_time: str=None):
        """Topic - a model defined in OpenAPI

        :param course_id: The course_id of this Topic.
        :param name: The name of this Topic.
        :param topic_id: The topic_id of this Topic.
        :param update_time: The update_time of this Topic.
        """
        self.openapi_types = {
            'course_id': str,
            'name': str,
            'topic_id': str,
            'update_time': str
        }

        self.attribute_map = {
            'course_id': 'courseId',
            'name': 'name',
            'topic_id': 'topicId',
            'update_time': 'updateTime'
        }

        self._course_id = course_id
        self._name = name
        self._topic_id = topic_id
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Topic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Topic of this Topic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_id(self):
        """Gets the course_id of this Topic.

        Identifier of the course. Read-only.

        :return: The course_id of this Topic.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Topic.

        Identifier of the course. Read-only.

        :param course_id: The course_id of this Topic.
        :type course_id: str
        """

        self._course_id = course_id

    @property
    def name(self):
        """Gets the name of this Topic.

        The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.

        :return: The name of this Topic.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Topic.

        The name of the topic, generated by the user. Leading and trailing whitespaces, if any, are trimmed. Also, multiple consecutive whitespaces are collapsed into one inside the name. The result must be a non-empty string. Topic names are case sensitive, and must be no longer than 100 characters.

        :param name: The name of this Topic.
        :type name: str
        """

        self._name = name

    @property
    def topic_id(self):
        """Gets the topic_id of this Topic.

        Unique identifier for the topic. Read-only.

        :return: The topic_id of this Topic.
        :rtype: str
        """
        return self._topic_id

    @topic_id.setter
    def topic_id(self, topic_id):
        """Sets the topic_id of this Topic.

        Unique identifier for the topic. Read-only.

        :param topic_id: The topic_id of this Topic.
        :type topic_id: str
        """

        self._topic_id = topic_id

    @property
    def update_time(self):
        """Gets the update_time of this Topic.

        The time the topic was last updated by the system. Read-only.

        :return: The update_time of this Topic.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Topic.

        The time the topic was last updated by the system. Read-only.

        :param update_time: The update_time of this Topic.
        :type update_time: str
        """

        self._update_time = update_time
