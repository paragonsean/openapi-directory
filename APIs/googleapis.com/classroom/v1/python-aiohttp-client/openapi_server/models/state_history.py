# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StateHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actor_user_id: str=None, state: str=None, state_timestamp: str=None):
        """StateHistory - a model defined in OpenAPI

        :param actor_user_id: The actor_user_id of this StateHistory.
        :param state: The state of this StateHistory.
        :param state_timestamp: The state_timestamp of this StateHistory.
        """
        self.openapi_types = {
            'actor_user_id': str,
            'state': str,
            'state_timestamp': str
        }

        self.attribute_map = {
            'actor_user_id': 'actorUserId',
            'state': 'state',
            'state_timestamp': 'stateTimestamp'
        }

        self._actor_user_id = actor_user_id
        self._state = state
        self._state_timestamp = state_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StateHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StateHistory of this StateHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actor_user_id(self):
        """Gets the actor_user_id of this StateHistory.

        The teacher or student who made the change.

        :return: The actor_user_id of this StateHistory.
        :rtype: str
        """
        return self._actor_user_id

    @actor_user_id.setter
    def actor_user_id(self, actor_user_id):
        """Sets the actor_user_id of this StateHistory.

        The teacher or student who made the change.

        :param actor_user_id: The actor_user_id of this StateHistory.
        :type actor_user_id: str
        """

        self._actor_user_id = actor_user_id

    @property
    def state(self):
        """Gets the state of this StateHistory.

        The workflow pipeline stage.

        :return: The state of this StateHistory.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StateHistory.

        The workflow pipeline stage.

        :param state: The state of this StateHistory.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATED", "TURNED_IN", "RETURNED", "RECLAIMED_BY_STUDENT", "STUDENT_EDITED_AFTER_TURN_IN"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def state_timestamp(self):
        """Gets the state_timestamp of this StateHistory.

        When the submission entered this state.

        :return: The state_timestamp of this StateHistory.
        :rtype: str
        """
        return self._state_timestamp

    @state_timestamp.setter
    def state_timestamp(self, state_timestamp):
        """Sets the state_timestamp of this StateHistory.

        When the submission entered this state.

        :param state_timestamp: The state_timestamp of this StateHistory.
        :type state_timestamp: str
        """

        self._state_timestamp = state_timestamp
