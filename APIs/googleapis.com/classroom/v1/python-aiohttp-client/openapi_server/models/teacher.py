# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_profile import UserProfile
from openapi_server import util


class Teacher(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_id: str=None, profile: UserProfile=None, user_id: str=None):
        """Teacher - a model defined in OpenAPI

        :param course_id: The course_id of this Teacher.
        :param profile: The profile of this Teacher.
        :param user_id: The user_id of this Teacher.
        """
        self.openapi_types = {
            'course_id': str,
            'profile': UserProfile,
            'user_id': str
        }

        self.attribute_map = {
            'course_id': 'courseId',
            'profile': 'profile',
            'user_id': 'userId'
        }

        self._course_id = course_id
        self._profile = profile
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Teacher':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Teacher of this Teacher.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_id(self):
        """Gets the course_id of this Teacher.

        Identifier of the course. Read-only.

        :return: The course_id of this Teacher.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Teacher.

        Identifier of the course. Read-only.

        :param course_id: The course_id of this Teacher.
        :type course_id: str
        """

        self._course_id = course_id

    @property
    def profile(self):
        """Gets the profile of this Teacher.


        :return: The profile of this Teacher.
        :rtype: UserProfile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Teacher.


        :param profile: The profile of this Teacher.
        :type profile: UserProfile
        """

        self._profile = profile

    @property
    def user_id(self):
        """Gets the user_id of this Teacher.

        Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user

        :return: The user_id of this Teacher.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Teacher.

        Identifier of the user. When specified as a parameter of a request, this identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user

        :param user_id: The user_id of this Teacher.
        :type user_id: str
        """

        self._user_id = user_id
