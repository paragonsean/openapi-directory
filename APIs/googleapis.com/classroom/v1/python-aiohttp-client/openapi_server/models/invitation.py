# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Invitation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_id: str=None, id: str=None, role: str=None, user_id: str=None):
        """Invitation - a model defined in OpenAPI

        :param course_id: The course_id of this Invitation.
        :param id: The id of this Invitation.
        :param role: The role of this Invitation.
        :param user_id: The user_id of this Invitation.
        """
        self.openapi_types = {
            'course_id': str,
            'id': str,
            'role': str,
            'user_id': str
        }

        self.attribute_map = {
            'course_id': 'courseId',
            'id': 'id',
            'role': 'role',
            'user_id': 'userId'
        }

        self._course_id = course_id
        self._id = id
        self._role = role
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invitation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invitation of this Invitation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_id(self):
        """Gets the course_id of this Invitation.

        Identifier of the course to invite the user to.

        :return: The course_id of this Invitation.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Invitation.

        Identifier of the course to invite the user to.

        :param course_id: The course_id of this Invitation.
        :type course_id: str
        """

        self._course_id = course_id

    @property
    def id(self):
        """Gets the id of this Invitation.

        Identifier assigned by Classroom. Read-only.

        :return: The id of this Invitation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invitation.

        Identifier assigned by Classroom. Read-only.

        :param id: The id of this Invitation.
        :type id: str
        """

        self._id = id

    @property
    def role(self):
        """Gets the role of this Invitation.

        Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.

        :return: The role of this Invitation.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Invitation.

        Role to invite the user to have. Must not be `COURSE_ROLE_UNSPECIFIED`.

        :param role: The role of this Invitation.
        :type role: str
        """
        allowed_values = ["COURSE_ROLE_UNSPECIFIED", "STUDENT", "TEACHER", "OWNER"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def user_id(self):
        """Gets the user_id of this Invitation.

        Identifier of the invited user. When specified as a parameter of a request, this identifier can be set to one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user

        :return: The user_id of this Invitation.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Invitation.

        Identifier of the invited user. When specified as a parameter of a request, this identifier can be set to one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user

        :param user_id: The user_id of this Invitation.
        :type user_id: str
        """

        self._user_id = user_id
