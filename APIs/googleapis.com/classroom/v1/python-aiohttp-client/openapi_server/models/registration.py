# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_pubsub_topic import CloudPubsubTopic
from openapi_server.models.feed import Feed
from openapi_server import util


class Registration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_pubsub_topic: CloudPubsubTopic=None, expiry_time: str=None, feed: Feed=None, registration_id: str=None):
        """Registration - a model defined in OpenAPI

        :param cloud_pubsub_topic: The cloud_pubsub_topic of this Registration.
        :param expiry_time: The expiry_time of this Registration.
        :param feed: The feed of this Registration.
        :param registration_id: The registration_id of this Registration.
        """
        self.openapi_types = {
            'cloud_pubsub_topic': CloudPubsubTopic,
            'expiry_time': str,
            'feed': Feed,
            'registration_id': str
        }

        self.attribute_map = {
            'cloud_pubsub_topic': 'cloudPubsubTopic',
            'expiry_time': 'expiryTime',
            'feed': 'feed',
            'registration_id': 'registrationId'
        }

        self._cloud_pubsub_topic = cloud_pubsub_topic
        self._expiry_time = expiry_time
        self._feed = feed
        self._registration_id = registration_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Registration':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Registration of this Registration.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_pubsub_topic(self):
        """Gets the cloud_pubsub_topic of this Registration.


        :return: The cloud_pubsub_topic of this Registration.
        :rtype: CloudPubsubTopic
        """
        return self._cloud_pubsub_topic

    @cloud_pubsub_topic.setter
    def cloud_pubsub_topic(self, cloud_pubsub_topic):
        """Sets the cloud_pubsub_topic of this Registration.


        :param cloud_pubsub_topic: The cloud_pubsub_topic of this Registration.
        :type cloud_pubsub_topic: CloudPubsubTopic
        """

        self._cloud_pubsub_topic = cloud_pubsub_topic

    @property
    def expiry_time(self):
        """Gets the expiry_time of this Registration.

        The time until which the `Registration` is effective. This is a read-only field assigned by the server.

        :return: The expiry_time of this Registration.
        :rtype: str
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this Registration.

        The time until which the `Registration` is effective. This is a read-only field assigned by the server.

        :param expiry_time: The expiry_time of this Registration.
        :type expiry_time: str
        """

        self._expiry_time = expiry_time

    @property
    def feed(self):
        """Gets the feed of this Registration.


        :return: The feed of this Registration.
        :rtype: Feed
        """
        return self._feed

    @feed.setter
    def feed(self, feed):
        """Sets the feed of this Registration.


        :param feed: The feed of this Registration.
        :type feed: Feed
        """

        self._feed = feed

    @property
    def registration_id(self):
        """Gets the registration_id of this Registration.

        A server-generated unique identifier for this `Registration`. Read-only.

        :return: The registration_id of this Registration.
        :rtype: str
        """
        return self._registration_id

    @registration_id.setter
    def registration_id(self, registration_id):
        """Sets the registration_id of this Registration.

        A server-generated unique identifier for this `Registration`. Read-only.

        :param registration_id: The registration_id of this Registration.
        :type registration_id: str
        """

        self._registration_id = registration_id
