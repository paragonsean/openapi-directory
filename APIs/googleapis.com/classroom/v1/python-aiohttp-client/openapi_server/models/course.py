# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.course_material_set import CourseMaterialSet
from openapi_server.models.drive_folder import DriveFolder
from openapi_server.models.gradebook_settings import GradebookSettings
from openapi_server import util


class Course(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_link: str=None, calendar_id: str=None, course_group_email: str=None, course_material_sets: List[CourseMaterialSet]=None, course_state: str=None, creation_time: str=None, description: str=None, description_heading: str=None, enrollment_code: str=None, gradebook_settings: GradebookSettings=None, guardians_enabled: bool=None, id: str=None, name: str=None, owner_id: str=None, room: str=None, section: str=None, teacher_folder: DriveFolder=None, teacher_group_email: str=None, update_time: str=None):
        """Course - a model defined in OpenAPI

        :param alternate_link: The alternate_link of this Course.
        :param calendar_id: The calendar_id of this Course.
        :param course_group_email: The course_group_email of this Course.
        :param course_material_sets: The course_material_sets of this Course.
        :param course_state: The course_state of this Course.
        :param creation_time: The creation_time of this Course.
        :param description: The description of this Course.
        :param description_heading: The description_heading of this Course.
        :param enrollment_code: The enrollment_code of this Course.
        :param gradebook_settings: The gradebook_settings of this Course.
        :param guardians_enabled: The guardians_enabled of this Course.
        :param id: The id of this Course.
        :param name: The name of this Course.
        :param owner_id: The owner_id of this Course.
        :param room: The room of this Course.
        :param section: The section of this Course.
        :param teacher_folder: The teacher_folder of this Course.
        :param teacher_group_email: The teacher_group_email of this Course.
        :param update_time: The update_time of this Course.
        """
        self.openapi_types = {
            'alternate_link': str,
            'calendar_id': str,
            'course_group_email': str,
            'course_material_sets': List[CourseMaterialSet],
            'course_state': str,
            'creation_time': str,
            'description': str,
            'description_heading': str,
            'enrollment_code': str,
            'gradebook_settings': GradebookSettings,
            'guardians_enabled': bool,
            'id': str,
            'name': str,
            'owner_id': str,
            'room': str,
            'section': str,
            'teacher_folder': DriveFolder,
            'teacher_group_email': str,
            'update_time': str
        }

        self.attribute_map = {
            'alternate_link': 'alternateLink',
            'calendar_id': 'calendarId',
            'course_group_email': 'courseGroupEmail',
            'course_material_sets': 'courseMaterialSets',
            'course_state': 'courseState',
            'creation_time': 'creationTime',
            'description': 'description',
            'description_heading': 'descriptionHeading',
            'enrollment_code': 'enrollmentCode',
            'gradebook_settings': 'gradebookSettings',
            'guardians_enabled': 'guardiansEnabled',
            'id': 'id',
            'name': 'name',
            'owner_id': 'ownerId',
            'room': 'room',
            'section': 'section',
            'teacher_folder': 'teacherFolder',
            'teacher_group_email': 'teacherGroupEmail',
            'update_time': 'updateTime'
        }

        self._alternate_link = alternate_link
        self._calendar_id = calendar_id
        self._course_group_email = course_group_email
        self._course_material_sets = course_material_sets
        self._course_state = course_state
        self._creation_time = creation_time
        self._description = description
        self._description_heading = description_heading
        self._enrollment_code = enrollment_code
        self._gradebook_settings = gradebook_settings
        self._guardians_enabled = guardians_enabled
        self._id = id
        self._name = name
        self._owner_id = owner_id
        self._room = room
        self._section = section
        self._teacher_folder = teacher_folder
        self._teacher_group_email = teacher_group_email
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Course':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Course of this Course.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_link(self):
        """Gets the alternate_link of this Course.

        Absolute link to this course in the Classroom web UI. Read-only.

        :return: The alternate_link of this Course.
        :rtype: str
        """
        return self._alternate_link

    @alternate_link.setter
    def alternate_link(self, alternate_link):
        """Sets the alternate_link of this Course.

        Absolute link to this course in the Classroom web UI. Read-only.

        :param alternate_link: The alternate_link of this Course.
        :type alternate_link: str
        """

        self._alternate_link = alternate_link

    @property
    def calendar_id(self):
        """Gets the calendar_id of this Course.

        The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to `CourseState.ACTIVE` for the first time (at creation time or when it is updated to `ACTIVE` through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.

        :return: The calendar_id of this Course.
        :rtype: str
        """
        return self._calendar_id

    @calendar_id.setter
    def calendar_id(self, calendar_id):
        """Sets the calendar_id of this Course.

        The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to `CourseState.ACTIVE` for the first time (at creation time or when it is updated to `ACTIVE` through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.

        :param calendar_id: The calendar_id of this Course.
        :type calendar_id: str
        """

        self._calendar_id = calendar_id

    @property
    def course_group_email(self):
        """Gets the course_group_email of this Course.

        The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.

        :return: The course_group_email of this Course.
        :rtype: str
        """
        return self._course_group_email

    @course_group_email.setter
    def course_group_email(self, course_group_email):
        """Sets the course_group_email of this Course.

        The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.

        :param course_group_email: The course_group_email of this Course.
        :type course_group_email: str
        """

        self._course_group_email = course_group_email

    @property
    def course_material_sets(self):
        """Gets the course_material_sets of this Course.

        Sets of materials that appear on the \"about\" page of this course. Read-only.

        :return: The course_material_sets of this Course.
        :rtype: List[CourseMaterialSet]
        """
        return self._course_material_sets

    @course_material_sets.setter
    def course_material_sets(self, course_material_sets):
        """Sets the course_material_sets of this Course.

        Sets of materials that appear on the \"about\" page of this course. Read-only.

        :param course_material_sets: The course_material_sets of this Course.
        :type course_material_sets: List[CourseMaterialSet]
        """

        self._course_material_sets = course_material_sets

    @property
    def course_state(self):
        """Gets the course_state of this Course.

        State of the course. If unspecified, the default state is `PROVISIONED`.

        :return: The course_state of this Course.
        :rtype: str
        """
        return self._course_state

    @course_state.setter
    def course_state(self, course_state):
        """Sets the course_state of this Course.

        State of the course. If unspecified, the default state is `PROVISIONED`.

        :param course_state: The course_state of this Course.
        :type course_state: str
        """
        allowed_values = ["COURSE_STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED", "PROVISIONED", "DECLINED", "SUSPENDED"]  # noqa: E501
        if course_state not in allowed_values:
            raise ValueError(
                "Invalid value for `course_state` ({0}), must be one of {1}"
                .format(course_state, allowed_values)
            )

        self._course_state = course_state

    @property
    def creation_time(self):
        """Gets the creation_time of this Course.

        Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.

        :return: The creation_time of this Course.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Course.

        Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.

        :param creation_time: The creation_time of this Course.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def description(self):
        """Gets the description of this Course.

        Optional description. For example, \"We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!\" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.

        :return: The description of this Course.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Course.

        Optional description. For example, \"We'll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!\" If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.

        :param description: The description of this Course.
        :type description: str
        """

        self._description = description

    @property
    def description_heading(self):
        """Gets the description_heading of this Course.

        Optional heading for the description. For example, \"Welcome to 10th Grade Biology.\" If set, this field must be a valid UTF-8 string and no longer than 3600 characters.

        :return: The description_heading of this Course.
        :rtype: str
        """
        return self._description_heading

    @description_heading.setter
    def description_heading(self, description_heading):
        """Sets the description_heading of this Course.

        Optional heading for the description. For example, \"Welcome to 10th Grade Biology.\" If set, this field must be a valid UTF-8 string and no longer than 3600 characters.

        :param description_heading: The description_heading of this Course.
        :type description_heading: str
        """

        self._description_heading = description_heading

    @property
    def enrollment_code(self):
        """Gets the enrollment_code of this Course.

        Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.

        :return: The enrollment_code of this Course.
        :rtype: str
        """
        return self._enrollment_code

    @enrollment_code.setter
    def enrollment_code(self, enrollment_code):
        """Sets the enrollment_code of this Course.

        Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.

        :param enrollment_code: The enrollment_code of this Course.
        :type enrollment_code: str
        """

        self._enrollment_code = enrollment_code

    @property
    def gradebook_settings(self):
        """Gets the gradebook_settings of this Course.


        :return: The gradebook_settings of this Course.
        :rtype: GradebookSettings
        """
        return self._gradebook_settings

    @gradebook_settings.setter
    def gradebook_settings(self, gradebook_settings):
        """Sets the gradebook_settings of this Course.


        :param gradebook_settings: The gradebook_settings of this Course.
        :type gradebook_settings: GradebookSettings
        """

        self._gradebook_settings = gradebook_settings

    @property
    def guardians_enabled(self):
        """Gets the guardians_enabled of this Course.

        Whether or not guardian notifications are enabled for this course. Read-only.

        :return: The guardians_enabled of this Course.
        :rtype: bool
        """
        return self._guardians_enabled

    @guardians_enabled.setter
    def guardians_enabled(self, guardians_enabled):
        """Sets the guardians_enabled of this Course.

        Whether or not guardian notifications are enabled for this course. Read-only.

        :param guardians_enabled: The guardians_enabled of this Course.
        :type guardians_enabled: bool
        """

        self._guardians_enabled = guardians_enabled

    @property
    def id(self):
        """Gets the id of this Course.

        Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.

        :return: The id of this Course.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Course.

        Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The `id` is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.

        :param id: The id of this Course.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Course.

        Name of the course. For example, \"10th Grade Biology\". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.

        :return: The name of this Course.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Course.

        Name of the course. For example, \"10th Grade Biology\". The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.

        :param name: The name of this Course.
        :type name: str
        """

        self._name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this Course.

        The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.

        :return: The owner_id of this Course.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this Course.

        The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal `\"me\"`, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.

        :param owner_id: The owner_id of this Course.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def room(self):
        """Gets the room of this Course.

        Optional room location. For example, \"301\". If set, this field must be a valid UTF-8 string and no longer than 650 characters.

        :return: The room of this Course.
        :rtype: str
        """
        return self._room

    @room.setter
    def room(self, room):
        """Sets the room of this Course.

        Optional room location. For example, \"301\". If set, this field must be a valid UTF-8 string and no longer than 650 characters.

        :param room: The room of this Course.
        :type room: str
        """

        self._room = room

    @property
    def section(self):
        """Gets the section of this Course.

        Section of the course. For example, \"Period 2\". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.

        :return: The section of this Course.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section):
        """Sets the section of this Course.

        Section of the course. For example, \"Period 2\". If set, this field must be a valid UTF-8 string and no longer than 2800 characters.

        :param section: The section of this Course.
        :type section: str
        """

        self._section = section

    @property
    def teacher_folder(self):
        """Gets the teacher_folder of this Course.


        :return: The teacher_folder of this Course.
        :rtype: DriveFolder
        """
        return self._teacher_folder

    @teacher_folder.setter
    def teacher_folder(self, teacher_folder):
        """Sets the teacher_folder of this Course.


        :param teacher_folder: The teacher_folder of this Course.
        :type teacher_folder: DriveFolder
        """

        self._teacher_folder = teacher_folder

    @property
    def teacher_group_email(self):
        """Gets the teacher_group_email of this Course.

        The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.

        :return: The teacher_group_email of this Course.
        :rtype: str
        """
        return self._teacher_group_email

    @teacher_group_email.setter
    def teacher_group_email(self, teacher_group_email):
        """Sets the teacher_group_email of this Course.

        The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.

        :param teacher_group_email: The teacher_group_email of this Course.
        :type teacher_group_email: str
        """

        self._teacher_group_email = teacher_group_email

    @property
    def update_time(self):
        """Gets the update_time of this Course.

        Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.

        :return: The update_time of this Course.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Course.

        Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.

        :param update_time: The update_time of this Course.
        :type update_time: str
        """

        self._update_time = update_time
