# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.assignment_submission import AssignmentSubmission
from openapi_server.models.multiple_choice_submission import MultipleChoiceSubmission
from openapi_server.models.short_answer_submission import ShortAnswerSubmission
from openapi_server.models.submission_history import SubmissionHistory
from openapi_server import util


class StudentSubmission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_link: str=None, assigned_grade: float=None, assignment_submission: AssignmentSubmission=None, associated_with_developer: bool=None, course_id: str=None, course_work_id: str=None, course_work_type: str=None, creation_time: str=None, draft_grade: float=None, id: str=None, late: bool=None, multiple_choice_submission: MultipleChoiceSubmission=None, short_answer_submission: ShortAnswerSubmission=None, state: str=None, submission_history: List[SubmissionHistory]=None, update_time: str=None, user_id: str=None):
        """StudentSubmission - a model defined in OpenAPI

        :param alternate_link: The alternate_link of this StudentSubmission.
        :param assigned_grade: The assigned_grade of this StudentSubmission.
        :param assignment_submission: The assignment_submission of this StudentSubmission.
        :param associated_with_developer: The associated_with_developer of this StudentSubmission.
        :param course_id: The course_id of this StudentSubmission.
        :param course_work_id: The course_work_id of this StudentSubmission.
        :param course_work_type: The course_work_type of this StudentSubmission.
        :param creation_time: The creation_time of this StudentSubmission.
        :param draft_grade: The draft_grade of this StudentSubmission.
        :param id: The id of this StudentSubmission.
        :param late: The late of this StudentSubmission.
        :param multiple_choice_submission: The multiple_choice_submission of this StudentSubmission.
        :param short_answer_submission: The short_answer_submission of this StudentSubmission.
        :param state: The state of this StudentSubmission.
        :param submission_history: The submission_history of this StudentSubmission.
        :param update_time: The update_time of this StudentSubmission.
        :param user_id: The user_id of this StudentSubmission.
        """
        self.openapi_types = {
            'alternate_link': str,
            'assigned_grade': float,
            'assignment_submission': AssignmentSubmission,
            'associated_with_developer': bool,
            'course_id': str,
            'course_work_id': str,
            'course_work_type': str,
            'creation_time': str,
            'draft_grade': float,
            'id': str,
            'late': bool,
            'multiple_choice_submission': MultipleChoiceSubmission,
            'short_answer_submission': ShortAnswerSubmission,
            'state': str,
            'submission_history': List[SubmissionHistory],
            'update_time': str,
            'user_id': str
        }

        self.attribute_map = {
            'alternate_link': 'alternateLink',
            'assigned_grade': 'assignedGrade',
            'assignment_submission': 'assignmentSubmission',
            'associated_with_developer': 'associatedWithDeveloper',
            'course_id': 'courseId',
            'course_work_id': 'courseWorkId',
            'course_work_type': 'courseWorkType',
            'creation_time': 'creationTime',
            'draft_grade': 'draftGrade',
            'id': 'id',
            'late': 'late',
            'multiple_choice_submission': 'multipleChoiceSubmission',
            'short_answer_submission': 'shortAnswerSubmission',
            'state': 'state',
            'submission_history': 'submissionHistory',
            'update_time': 'updateTime',
            'user_id': 'userId'
        }

        self._alternate_link = alternate_link
        self._assigned_grade = assigned_grade
        self._assignment_submission = assignment_submission
        self._associated_with_developer = associated_with_developer
        self._course_id = course_id
        self._course_work_id = course_work_id
        self._course_work_type = course_work_type
        self._creation_time = creation_time
        self._draft_grade = draft_grade
        self._id = id
        self._late = late
        self._multiple_choice_submission = multiple_choice_submission
        self._short_answer_submission = short_answer_submission
        self._state = state
        self._submission_history = submission_history
        self._update_time = update_time
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StudentSubmission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StudentSubmission of this StudentSubmission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_link(self):
        """Gets the alternate_link of this StudentSubmission.

        Absolute link to the submission in the Classroom web UI. Read-only.

        :return: The alternate_link of this StudentSubmission.
        :rtype: str
        """
        return self._alternate_link

    @alternate_link.setter
    def alternate_link(self, alternate_link):
        """Sets the alternate_link of this StudentSubmission.

        Absolute link to the submission in the Classroom web UI. Read-only.

        :param alternate_link: The alternate_link of this StudentSubmission.
        :type alternate_link: str
        """

        self._alternate_link = alternate_link

    @property
    def assigned_grade(self):
        """Gets the assigned_grade of this StudentSubmission.

        Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.

        :return: The assigned_grade of this StudentSubmission.
        :rtype: float
        """
        return self._assigned_grade

    @assigned_grade.setter
    def assigned_grade(self, assigned_grade):
        """Sets the assigned_grade of this StudentSubmission.

        Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.

        :param assigned_grade: The assigned_grade of this StudentSubmission.
        :type assigned_grade: float
        """

        self._assigned_grade = assigned_grade

    @property
    def assignment_submission(self):
        """Gets the assignment_submission of this StudentSubmission.


        :return: The assignment_submission of this StudentSubmission.
        :rtype: AssignmentSubmission
        """
        return self._assignment_submission

    @assignment_submission.setter
    def assignment_submission(self, assignment_submission):
        """Sets the assignment_submission of this StudentSubmission.


        :param assignment_submission: The assignment_submission of this StudentSubmission.
        :type assignment_submission: AssignmentSubmission
        """

        self._assignment_submission = assignment_submission

    @property
    def associated_with_developer(self):
        """Gets the associated_with_developer of this StudentSubmission.

        Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.

        :return: The associated_with_developer of this StudentSubmission.
        :rtype: bool
        """
        return self._associated_with_developer

    @associated_with_developer.setter
    def associated_with_developer(self, associated_with_developer):
        """Sets the associated_with_developer of this StudentSubmission.

        Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.

        :param associated_with_developer: The associated_with_developer of this StudentSubmission.
        :type associated_with_developer: bool
        """

        self._associated_with_developer = associated_with_developer

    @property
    def course_id(self):
        """Gets the course_id of this StudentSubmission.

        Identifier of the course. Read-only.

        :return: The course_id of this StudentSubmission.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this StudentSubmission.

        Identifier of the course. Read-only.

        :param course_id: The course_id of this StudentSubmission.
        :type course_id: str
        """

        self._course_id = course_id

    @property
    def course_work_id(self):
        """Gets the course_work_id of this StudentSubmission.

        Identifier for the course work this corresponds to. Read-only.

        :return: The course_work_id of this StudentSubmission.
        :rtype: str
        """
        return self._course_work_id

    @course_work_id.setter
    def course_work_id(self, course_work_id):
        """Sets the course_work_id of this StudentSubmission.

        Identifier for the course work this corresponds to. Read-only.

        :param course_work_id: The course_work_id of this StudentSubmission.
        :type course_work_id: str
        """

        self._course_work_id = course_work_id

    @property
    def course_work_type(self):
        """Gets the course_work_type of this StudentSubmission.

        Type of course work this submission is for. Read-only.

        :return: The course_work_type of this StudentSubmission.
        :rtype: str
        """
        return self._course_work_type

    @course_work_type.setter
    def course_work_type(self, course_work_type):
        """Sets the course_work_type of this StudentSubmission.

        Type of course work this submission is for. Read-only.

        :param course_work_type: The course_work_type of this StudentSubmission.
        :type course_work_type: str
        """
        allowed_values = ["COURSE_WORK_TYPE_UNSPECIFIED", "ASSIGNMENT", "SHORT_ANSWER_QUESTION", "MULTIPLE_CHOICE_QUESTION"]  # noqa: E501
        if course_work_type not in allowed_values:
            raise ValueError(
                "Invalid value for `course_work_type` ({0}), must be one of {1}"
                .format(course_work_type, allowed_values)
            )

        self._course_work_type = course_work_type

    @property
    def creation_time(self):
        """Gets the creation_time of this StudentSubmission.

        Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.

        :return: The creation_time of this StudentSubmission.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this StudentSubmission.

        Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.

        :param creation_time: The creation_time of this StudentSubmission.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def draft_grade(self):
        """Gets the draft_grade of this StudentSubmission.

        Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.

        :return: The draft_grade of this StudentSubmission.
        :rtype: float
        """
        return self._draft_grade

    @draft_grade.setter
    def draft_grade(self, draft_grade):
        """Sets the draft_grade of this StudentSubmission.

        Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.

        :param draft_grade: The draft_grade of this StudentSubmission.
        :type draft_grade: float
        """

        self._draft_grade = draft_grade

    @property
    def id(self):
        """Gets the id of this StudentSubmission.

        Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.

        :return: The id of this StudentSubmission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this StudentSubmission.

        Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.

        :param id: The id of this StudentSubmission.
        :type id: str
        """

        self._id = id

    @property
    def late(self):
        """Gets the late of this StudentSubmission.

        Whether this submission is late. Read-only.

        :return: The late of this StudentSubmission.
        :rtype: bool
        """
        return self._late

    @late.setter
    def late(self, late):
        """Sets the late of this StudentSubmission.

        Whether this submission is late. Read-only.

        :param late: The late of this StudentSubmission.
        :type late: bool
        """

        self._late = late

    @property
    def multiple_choice_submission(self):
        """Gets the multiple_choice_submission of this StudentSubmission.


        :return: The multiple_choice_submission of this StudentSubmission.
        :rtype: MultipleChoiceSubmission
        """
        return self._multiple_choice_submission

    @multiple_choice_submission.setter
    def multiple_choice_submission(self, multiple_choice_submission):
        """Sets the multiple_choice_submission of this StudentSubmission.


        :param multiple_choice_submission: The multiple_choice_submission of this StudentSubmission.
        :type multiple_choice_submission: MultipleChoiceSubmission
        """

        self._multiple_choice_submission = multiple_choice_submission

    @property
    def short_answer_submission(self):
        """Gets the short_answer_submission of this StudentSubmission.


        :return: The short_answer_submission of this StudentSubmission.
        :rtype: ShortAnswerSubmission
        """
        return self._short_answer_submission

    @short_answer_submission.setter
    def short_answer_submission(self, short_answer_submission):
        """Sets the short_answer_submission of this StudentSubmission.


        :param short_answer_submission: The short_answer_submission of this StudentSubmission.
        :type short_answer_submission: ShortAnswerSubmission
        """

        self._short_answer_submission = short_answer_submission

    @property
    def state(self):
        """Gets the state of this StudentSubmission.

        State of this submission. Read-only.

        :return: The state of this StudentSubmission.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this StudentSubmission.

        State of this submission. Read-only.

        :param state: The state of this StudentSubmission.
        :type state: str
        """
        allowed_values = ["SUBMISSION_STATE_UNSPECIFIED", "NEW", "CREATED", "TURNED_IN", "RETURNED", "RECLAIMED_BY_STUDENT"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def submission_history(self):
        """Gets the submission_history of this StudentSubmission.

        The history of the submission (includes state and grade histories). Read-only.

        :return: The submission_history of this StudentSubmission.
        :rtype: List[SubmissionHistory]
        """
        return self._submission_history

    @submission_history.setter
    def submission_history(self, submission_history):
        """Sets the submission_history of this StudentSubmission.

        The history of the submission (includes state and grade histories). Read-only.

        :param submission_history: The submission_history of this StudentSubmission.
        :type submission_history: List[SubmissionHistory]
        """

        self._submission_history = submission_history

    @property
    def update_time(self):
        """Gets the update_time of this StudentSubmission.

        Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.

        :return: The update_time of this StudentSubmission.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this StudentSubmission.

        Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.

        :param update_time: The update_time of this StudentSubmission.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def user_id(self):
        """Gets the user_id of this StudentSubmission.

        Identifier for the student that owns this submission. Read-only.

        :return: The user_id of this StudentSubmission.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this StudentSubmission.

        Identifier for the student that owns this submission. Read-only.

        :param user_id: The user_id of this StudentSubmission.
        :type user_id: str
        """

        self._user_id = user_id
