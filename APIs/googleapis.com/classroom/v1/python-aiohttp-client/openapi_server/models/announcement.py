# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.individual_students_options import IndividualStudentsOptions
from openapi_server.models.material import Material
from openapi_server import util


class Announcement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alternate_link: str=None, assignee_mode: str=None, course_id: str=None, creation_time: str=None, creator_user_id: str=None, id: str=None, individual_students_options: IndividualStudentsOptions=None, materials: List[Material]=None, scheduled_time: str=None, state: str=None, text: str=None, update_time: str=None):
        """Announcement - a model defined in OpenAPI

        :param alternate_link: The alternate_link of this Announcement.
        :param assignee_mode: The assignee_mode of this Announcement.
        :param course_id: The course_id of this Announcement.
        :param creation_time: The creation_time of this Announcement.
        :param creator_user_id: The creator_user_id of this Announcement.
        :param id: The id of this Announcement.
        :param individual_students_options: The individual_students_options of this Announcement.
        :param materials: The materials of this Announcement.
        :param scheduled_time: The scheduled_time of this Announcement.
        :param state: The state of this Announcement.
        :param text: The text of this Announcement.
        :param update_time: The update_time of this Announcement.
        """
        self.openapi_types = {
            'alternate_link': str,
            'assignee_mode': str,
            'course_id': str,
            'creation_time': str,
            'creator_user_id': str,
            'id': str,
            'individual_students_options': IndividualStudentsOptions,
            'materials': List[Material],
            'scheduled_time': str,
            'state': str,
            'text': str,
            'update_time': str
        }

        self.attribute_map = {
            'alternate_link': 'alternateLink',
            'assignee_mode': 'assigneeMode',
            'course_id': 'courseId',
            'creation_time': 'creationTime',
            'creator_user_id': 'creatorUserId',
            'id': 'id',
            'individual_students_options': 'individualStudentsOptions',
            'materials': 'materials',
            'scheduled_time': 'scheduledTime',
            'state': 'state',
            'text': 'text',
            'update_time': 'updateTime'
        }

        self._alternate_link = alternate_link
        self._assignee_mode = assignee_mode
        self._course_id = course_id
        self._creation_time = creation_time
        self._creator_user_id = creator_user_id
        self._id = id
        self._individual_students_options = individual_students_options
        self._materials = materials
        self._scheduled_time = scheduled_time
        self._state = state
        self._text = text
        self._update_time = update_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Announcement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Announcement of this Announcement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alternate_link(self):
        """Gets the alternate_link of this Announcement.

        Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.

        :return: The alternate_link of this Announcement.
        :rtype: str
        """
        return self._alternate_link

    @alternate_link.setter
    def alternate_link(self, alternate_link):
        """Sets the alternate_link of this Announcement.

        Absolute link to this announcement in the Classroom web UI. This is only populated if `state` is `PUBLISHED`. Read-only.

        :param alternate_link: The alternate_link of this Announcement.
        :type alternate_link: str
        """

        self._alternate_link = alternate_link

    @property
    def assignee_mode(self):
        """Gets the assignee_mode of this Announcement.

        Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.

        :return: The assignee_mode of this Announcement.
        :rtype: str
        """
        return self._assignee_mode

    @assignee_mode.setter
    def assignee_mode(self, assignee_mode):
        """Sets the assignee_mode of this Announcement.

        Assignee mode of the announcement. If unspecified, the default value is `ALL_STUDENTS`.

        :param assignee_mode: The assignee_mode of this Announcement.
        :type assignee_mode: str
        """
        allowed_values = ["ASSIGNEE_MODE_UNSPECIFIED", "ALL_STUDENTS", "INDIVIDUAL_STUDENTS"]  # noqa: E501
        if assignee_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_mode` ({0}), must be one of {1}"
                .format(assignee_mode, allowed_values)
            )

        self._assignee_mode = assignee_mode

    @property
    def course_id(self):
        """Gets the course_id of this Announcement.

        Identifier of the course. Read-only.

        :return: The course_id of this Announcement.
        :rtype: str
        """
        return self._course_id

    @course_id.setter
    def course_id(self, course_id):
        """Sets the course_id of this Announcement.

        Identifier of the course. Read-only.

        :param course_id: The course_id of this Announcement.
        :type course_id: str
        """

        self._course_id = course_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Announcement.

        Timestamp when this announcement was created. Read-only.

        :return: The creation_time of this Announcement.
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Announcement.

        Timestamp when this announcement was created. Read-only.

        :param creation_time: The creation_time of this Announcement.
        :type creation_time: str
        """

        self._creation_time = creation_time

    @property
    def creator_user_id(self):
        """Gets the creator_user_id of this Announcement.

        Identifier for the user that created the announcement. Read-only.

        :return: The creator_user_id of this Announcement.
        :rtype: str
        """
        return self._creator_user_id

    @creator_user_id.setter
    def creator_user_id(self, creator_user_id):
        """Sets the creator_user_id of this Announcement.

        Identifier for the user that created the announcement. Read-only.

        :param creator_user_id: The creator_user_id of this Announcement.
        :type creator_user_id: str
        """

        self._creator_user_id = creator_user_id

    @property
    def id(self):
        """Gets the id of this Announcement.

        Classroom-assigned identifier of this announcement, unique per course. Read-only.

        :return: The id of this Announcement.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Announcement.

        Classroom-assigned identifier of this announcement, unique per course. Read-only.

        :param id: The id of this Announcement.
        :type id: str
        """

        self._id = id

    @property
    def individual_students_options(self):
        """Gets the individual_students_options of this Announcement.


        :return: The individual_students_options of this Announcement.
        :rtype: IndividualStudentsOptions
        """
        return self._individual_students_options

    @individual_students_options.setter
    def individual_students_options(self, individual_students_options):
        """Sets the individual_students_options of this Announcement.


        :param individual_students_options: The individual_students_options of this Announcement.
        :type individual_students_options: IndividualStudentsOptions
        """

        self._individual_students_options = individual_students_options

    @property
    def materials(self):
        """Gets the materials of this Announcement.

        Additional materials. Announcements must have no more than 20 material items.

        :return: The materials of this Announcement.
        :rtype: List[Material]
        """
        return self._materials

    @materials.setter
    def materials(self, materials):
        """Sets the materials of this Announcement.

        Additional materials. Announcements must have no more than 20 material items.

        :param materials: The materials of this Announcement.
        :type materials: List[Material]
        """

        self._materials = materials

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this Announcement.

        Optional timestamp when this announcement is scheduled to be published.

        :return: The scheduled_time of this Announcement.
        :rtype: str
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this Announcement.

        Optional timestamp when this announcement is scheduled to be published.

        :param scheduled_time: The scheduled_time of this Announcement.
        :type scheduled_time: str
        """

        self._scheduled_time = scheduled_time

    @property
    def state(self):
        """Gets the state of this Announcement.

        Status of this announcement. If unspecified, the default state is `DRAFT`.

        :return: The state of this Announcement.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Announcement.

        Status of this announcement. If unspecified, the default state is `DRAFT`.

        :param state: The state of this Announcement.
        :type state: str
        """
        allowed_values = ["ANNOUNCEMENT_STATE_UNSPECIFIED", "PUBLISHED", "DRAFT", "DELETED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def text(self):
        """Gets the text of this Announcement.

        Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.

        :return: The text of this Announcement.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Announcement.

        Description of this announcement. The text must be a valid UTF-8 string containing no more than 30,000 characters.

        :param text: The text of this Announcement.
        :type text: str
        """

        self._text = text

    @property
    def update_time(self):
        """Gets the update_time of this Announcement.

        Timestamp of the most recent change to this announcement. Read-only.

        :return: The update_time of this Announcement.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Announcement.

        Timestamp of the most recent change to this announcement. Read-only.

        :param update_time: The update_time of this Announcement.
        :type update_time: str
        """

        self._update_time = update_time
