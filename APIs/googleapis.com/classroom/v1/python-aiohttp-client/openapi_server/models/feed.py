# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.course_roster_changes_info import CourseRosterChangesInfo
from openapi_server.models.course_work_changes_info import CourseWorkChangesInfo
from openapi_server import util


class Feed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, course_roster_changes_info: CourseRosterChangesInfo=None, course_work_changes_info: CourseWorkChangesInfo=None, feed_type: str=None):
        """Feed - a model defined in OpenAPI

        :param course_roster_changes_info: The course_roster_changes_info of this Feed.
        :param course_work_changes_info: The course_work_changes_info of this Feed.
        :param feed_type: The feed_type of this Feed.
        """
        self.openapi_types = {
            'course_roster_changes_info': CourseRosterChangesInfo,
            'course_work_changes_info': CourseWorkChangesInfo,
            'feed_type': str
        }

        self.attribute_map = {
            'course_roster_changes_info': 'courseRosterChangesInfo',
            'course_work_changes_info': 'courseWorkChangesInfo',
            'feed_type': 'feedType'
        }

        self._course_roster_changes_info = course_roster_changes_info
        self._course_work_changes_info = course_work_changes_info
        self._feed_type = feed_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feed of this Feed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def course_roster_changes_info(self):
        """Gets the course_roster_changes_info of this Feed.


        :return: The course_roster_changes_info of this Feed.
        :rtype: CourseRosterChangesInfo
        """
        return self._course_roster_changes_info

    @course_roster_changes_info.setter
    def course_roster_changes_info(self, course_roster_changes_info):
        """Sets the course_roster_changes_info of this Feed.


        :param course_roster_changes_info: The course_roster_changes_info of this Feed.
        :type course_roster_changes_info: CourseRosterChangesInfo
        """

        self._course_roster_changes_info = course_roster_changes_info

    @property
    def course_work_changes_info(self):
        """Gets the course_work_changes_info of this Feed.


        :return: The course_work_changes_info of this Feed.
        :rtype: CourseWorkChangesInfo
        """
        return self._course_work_changes_info

    @course_work_changes_info.setter
    def course_work_changes_info(self, course_work_changes_info):
        """Sets the course_work_changes_info of this Feed.


        :param course_work_changes_info: The course_work_changes_info of this Feed.
        :type course_work_changes_info: CourseWorkChangesInfo
        """

        self._course_work_changes_info = course_work_changes_info

    @property
    def feed_type(self):
        """Gets the feed_type of this Feed.

        The type of feed.

        :return: The feed_type of this Feed.
        :rtype: str
        """
        return self._feed_type

    @feed_type.setter
    def feed_type(self, feed_type):
        """Sets the feed_type of this Feed.

        The type of feed.

        :param feed_type: The feed_type of this Feed.
        :type feed_type: str
        """
        allowed_values = ["FEED_TYPE_UNSPECIFIED", "DOMAIN_ROSTER_CHANGES", "COURSE_ROSTER_CHANGES", "COURSE_WORK_CHANGES"]  # noqa: E501
        if feed_type not in allowed_values:
            raise ValueError(
                "Invalid value for `feed_type` ({0}), must be one of {1}"
                .format(feed_type, allowed_values)
            )

        self._feed_type = feed_type
