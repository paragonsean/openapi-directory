# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.global_permission import GlobalPermission
from openapi_server.models.name import Name
from openapi_server import util


class UserProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address: str=None, id: str=None, name: Name=None, permissions: List[GlobalPermission]=None, photo_url: str=None, verified_teacher: bool=None):
        """UserProfile - a model defined in OpenAPI

        :param email_address: The email_address of this UserProfile.
        :param id: The id of this UserProfile.
        :param name: The name of this UserProfile.
        :param permissions: The permissions of this UserProfile.
        :param photo_url: The photo_url of this UserProfile.
        :param verified_teacher: The verified_teacher of this UserProfile.
        """
        self.openapi_types = {
            'email_address': str,
            'id': str,
            'name': Name,
            'permissions': List[GlobalPermission],
            'photo_url': str,
            'verified_teacher': bool
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'id': 'id',
            'name': 'name',
            'permissions': 'permissions',
            'photo_url': 'photoUrl',
            'verified_teacher': 'verifiedTeacher'
        }

        self._email_address = email_address
        self._id = id
        self._name = name
        self._permissions = permissions
        self._photo_url = photo_url
        self._verified_teacher = verified_teacher

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProfile of this UserProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self):
        """Gets the email_address of this UserProfile.

        Email address of the user. Must request `https://www.googleapis.com/auth/classroom.profile.emails` scope for this field to be populated in a response body. Read-only.

        :return: The email_address of this UserProfile.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this UserProfile.

        Email address of the user. Must request `https://www.googleapis.com/auth/classroom.profile.emails` scope for this field to be populated in a response body. Read-only.

        :param email_address: The email_address of this UserProfile.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def id(self):
        """Gets the id of this UserProfile.

        Identifier of the user. Read-only.

        :return: The id of this UserProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserProfile.

        Identifier of the user. Read-only.

        :param id: The id of this UserProfile.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this UserProfile.


        :return: The name of this UserProfile.
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserProfile.


        :param name: The name of this UserProfile.
        :type name: Name
        """

        self._name = name

    @property
    def permissions(self):
        """Gets the permissions of this UserProfile.

        Global permissions of the user. Read-only.

        :return: The permissions of this UserProfile.
        :rtype: List[GlobalPermission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this UserProfile.

        Global permissions of the user. Read-only.

        :param permissions: The permissions of this UserProfile.
        :type permissions: List[GlobalPermission]
        """

        self._permissions = permissions

    @property
    def photo_url(self):
        """Gets the photo_url of this UserProfile.

        URL of user's profile photo. Must request `https://www.googleapis.com/auth/classroom.profile.photos` scope for this field to be populated in a response body. Read-only.

        :return: The photo_url of this UserProfile.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this UserProfile.

        URL of user's profile photo. Must request `https://www.googleapis.com/auth/classroom.profile.photos` scope for this field to be populated in a response body. Read-only.

        :param photo_url: The photo_url of this UserProfile.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def verified_teacher(self):
        """Gets the verified_teacher of this UserProfile.

        Represents whether a Google Workspace for Education user's domain administrator has explicitly verified them as being a teacher. This field is always false if the user is not a member of a Google Workspace for Education domain. Read-only

        :return: The verified_teacher of this UserProfile.
        :rtype: bool
        """
        return self._verified_teacher

    @verified_teacher.setter
    def verified_teacher(self, verified_teacher):
        """Sets the verified_teacher of this UserProfile.

        Represents whether a Google Workspace for Education user's domain administrator has explicitly verified them as being a teacher. This field is always false if the user is not a member of a Google Workspace for Education domain. Read-only

        :param verified_teacher: The verified_teacher of this UserProfile.
        :type verified_teacher: bool
        """

        self._verified_teacher = verified_teacher
