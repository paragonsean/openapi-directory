/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnnouncement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnnouncement::OAIAnnouncement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnnouncement::OAIAnnouncement() {
    this->initializeModel();
}

OAIAnnouncement::~OAIAnnouncement() {}

void OAIAnnouncement::initializeModel() {

    m_alternate_link_isSet = false;
    m_alternate_link_isValid = false;

    m_assignee_mode_isSet = false;
    m_assignee_mode_isValid = false;

    m_course_id_isSet = false;
    m_course_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_user_id_isSet = false;
    m_creator_user_id_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_individual_students_options_isSet = false;
    m_individual_students_options_isValid = false;

    m_materials_isSet = false;
    m_materials_isValid = false;

    m_scheduled_time_isSet = false;
    m_scheduled_time_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAIAnnouncement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnnouncement::fromJsonObject(QJsonObject json) {

    m_alternate_link_isValid = ::OpenAPI::fromJsonValue(m_alternate_link, json[QString("alternateLink")]);
    m_alternate_link_isSet = !json[QString("alternateLink")].isNull() && m_alternate_link_isValid;

    m_assignee_mode_isValid = ::OpenAPI::fromJsonValue(m_assignee_mode, json[QString("assigneeMode")]);
    m_assignee_mode_isSet = !json[QString("assigneeMode")].isNull() && m_assignee_mode_isValid;

    m_course_id_isValid = ::OpenAPI::fromJsonValue(m_course_id, json[QString("courseId")]);
    m_course_id_isSet = !json[QString("courseId")].isNull() && m_course_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_user_id_isValid = ::OpenAPI::fromJsonValue(m_creator_user_id, json[QString("creatorUserId")]);
    m_creator_user_id_isSet = !json[QString("creatorUserId")].isNull() && m_creator_user_id_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_individual_students_options_isValid = ::OpenAPI::fromJsonValue(m_individual_students_options, json[QString("individualStudentsOptions")]);
    m_individual_students_options_isSet = !json[QString("individualStudentsOptions")].isNull() && m_individual_students_options_isValid;

    m_materials_isValid = ::OpenAPI::fromJsonValue(m_materials, json[QString("materials")]);
    m_materials_isSet = !json[QString("materials")].isNull() && m_materials_isValid;

    m_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time, json[QString("scheduledTime")]);
    m_scheduled_time_isSet = !json[QString("scheduledTime")].isNull() && m_scheduled_time_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAIAnnouncement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnnouncement::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_link_isSet) {
        obj.insert(QString("alternateLink"), ::OpenAPI::toJsonValue(m_alternate_link));
    }
    if (m_assignee_mode_isSet) {
        obj.insert(QString("assigneeMode"), ::OpenAPI::toJsonValue(m_assignee_mode));
    }
    if (m_course_id_isSet) {
        obj.insert(QString("courseId"), ::OpenAPI::toJsonValue(m_course_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_user_id_isSet) {
        obj.insert(QString("creatorUserId"), ::OpenAPI::toJsonValue(m_creator_user_id));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_individual_students_options.isSet()) {
        obj.insert(QString("individualStudentsOptions"), ::OpenAPI::toJsonValue(m_individual_students_options));
    }
    if (m_materials.size() > 0) {
        obj.insert(QString("materials"), ::OpenAPI::toJsonValue(m_materials));
    }
    if (m_scheduled_time_isSet) {
        obj.insert(QString("scheduledTime"), ::OpenAPI::toJsonValue(m_scheduled_time));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAIAnnouncement::getAlternateLink() const {
    return m_alternate_link;
}
void OAIAnnouncement::setAlternateLink(const QString &alternate_link) {
    m_alternate_link = alternate_link;
    m_alternate_link_isSet = true;
}

bool OAIAnnouncement::is_alternate_link_Set() const{
    return m_alternate_link_isSet;
}

bool OAIAnnouncement::is_alternate_link_Valid() const{
    return m_alternate_link_isValid;
}

QString OAIAnnouncement::getAssigneeMode() const {
    return m_assignee_mode;
}
void OAIAnnouncement::setAssigneeMode(const QString &assignee_mode) {
    m_assignee_mode = assignee_mode;
    m_assignee_mode_isSet = true;
}

bool OAIAnnouncement::is_assignee_mode_Set() const{
    return m_assignee_mode_isSet;
}

bool OAIAnnouncement::is_assignee_mode_Valid() const{
    return m_assignee_mode_isValid;
}

QString OAIAnnouncement::getCourseId() const {
    return m_course_id;
}
void OAIAnnouncement::setCourseId(const QString &course_id) {
    m_course_id = course_id;
    m_course_id_isSet = true;
}

bool OAIAnnouncement::is_course_id_Set() const{
    return m_course_id_isSet;
}

bool OAIAnnouncement::is_course_id_Valid() const{
    return m_course_id_isValid;
}

QString OAIAnnouncement::getCreationTime() const {
    return m_creation_time;
}
void OAIAnnouncement::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIAnnouncement::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIAnnouncement::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIAnnouncement::getCreatorUserId() const {
    return m_creator_user_id;
}
void OAIAnnouncement::setCreatorUserId(const QString &creator_user_id) {
    m_creator_user_id = creator_user_id;
    m_creator_user_id_isSet = true;
}

bool OAIAnnouncement::is_creator_user_id_Set() const{
    return m_creator_user_id_isSet;
}

bool OAIAnnouncement::is_creator_user_id_Valid() const{
    return m_creator_user_id_isValid;
}

QString OAIAnnouncement::getId() const {
    return m_id;
}
void OAIAnnouncement::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAnnouncement::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAnnouncement::is_id_Valid() const{
    return m_id_isValid;
}

OAIIndividualStudentsOptions OAIAnnouncement::getIndividualStudentsOptions() const {
    return m_individual_students_options;
}
void OAIAnnouncement::setIndividualStudentsOptions(const OAIIndividualStudentsOptions &individual_students_options) {
    m_individual_students_options = individual_students_options;
    m_individual_students_options_isSet = true;
}

bool OAIAnnouncement::is_individual_students_options_Set() const{
    return m_individual_students_options_isSet;
}

bool OAIAnnouncement::is_individual_students_options_Valid() const{
    return m_individual_students_options_isValid;
}

QList<OAIMaterial> OAIAnnouncement::getMaterials() const {
    return m_materials;
}
void OAIAnnouncement::setMaterials(const QList<OAIMaterial> &materials) {
    m_materials = materials;
    m_materials_isSet = true;
}

bool OAIAnnouncement::is_materials_Set() const{
    return m_materials_isSet;
}

bool OAIAnnouncement::is_materials_Valid() const{
    return m_materials_isValid;
}

QString OAIAnnouncement::getScheduledTime() const {
    return m_scheduled_time;
}
void OAIAnnouncement::setScheduledTime(const QString &scheduled_time) {
    m_scheduled_time = scheduled_time;
    m_scheduled_time_isSet = true;
}

bool OAIAnnouncement::is_scheduled_time_Set() const{
    return m_scheduled_time_isSet;
}

bool OAIAnnouncement::is_scheduled_time_Valid() const{
    return m_scheduled_time_isValid;
}

QString OAIAnnouncement::getState() const {
    return m_state;
}
void OAIAnnouncement::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIAnnouncement::is_state_Set() const{
    return m_state_isSet;
}

bool OAIAnnouncement::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIAnnouncement::getText() const {
    return m_text;
}
void OAIAnnouncement::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIAnnouncement::is_text_Set() const{
    return m_text_isSet;
}

bool OAIAnnouncement::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIAnnouncement::getUpdateTime() const {
    return m_update_time;
}
void OAIAnnouncement::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIAnnouncement::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIAnnouncement::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAIAnnouncement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignee_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_individual_students_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_materials.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnnouncement::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
