/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStudentSubmission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStudentSubmission::OAIStudentSubmission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStudentSubmission::OAIStudentSubmission() {
    this->initializeModel();
}

OAIStudentSubmission::~OAIStudentSubmission() {}

void OAIStudentSubmission::initializeModel() {

    m_alternate_link_isSet = false;
    m_alternate_link_isValid = false;

    m_assigned_grade_isSet = false;
    m_assigned_grade_isValid = false;

    m_assignment_submission_isSet = false;
    m_assignment_submission_isValid = false;

    m_associated_with_developer_isSet = false;
    m_associated_with_developer_isValid = false;

    m_course_id_isSet = false;
    m_course_id_isValid = false;

    m_course_work_id_isSet = false;
    m_course_work_id_isValid = false;

    m_course_work_type_isSet = false;
    m_course_work_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_draft_grade_isSet = false;
    m_draft_grade_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_late_isSet = false;
    m_late_isValid = false;

    m_multiple_choice_submission_isSet = false;
    m_multiple_choice_submission_isValid = false;

    m_short_answer_submission_isSet = false;
    m_short_answer_submission_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_submission_history_isSet = false;
    m_submission_history_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIStudentSubmission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStudentSubmission::fromJsonObject(QJsonObject json) {

    m_alternate_link_isValid = ::OpenAPI::fromJsonValue(m_alternate_link, json[QString("alternateLink")]);
    m_alternate_link_isSet = !json[QString("alternateLink")].isNull() && m_alternate_link_isValid;

    m_assigned_grade_isValid = ::OpenAPI::fromJsonValue(m_assigned_grade, json[QString("assignedGrade")]);
    m_assigned_grade_isSet = !json[QString("assignedGrade")].isNull() && m_assigned_grade_isValid;

    m_assignment_submission_isValid = ::OpenAPI::fromJsonValue(m_assignment_submission, json[QString("assignmentSubmission")]);
    m_assignment_submission_isSet = !json[QString("assignmentSubmission")].isNull() && m_assignment_submission_isValid;

    m_associated_with_developer_isValid = ::OpenAPI::fromJsonValue(m_associated_with_developer, json[QString("associatedWithDeveloper")]);
    m_associated_with_developer_isSet = !json[QString("associatedWithDeveloper")].isNull() && m_associated_with_developer_isValid;

    m_course_id_isValid = ::OpenAPI::fromJsonValue(m_course_id, json[QString("courseId")]);
    m_course_id_isSet = !json[QString("courseId")].isNull() && m_course_id_isValid;

    m_course_work_id_isValid = ::OpenAPI::fromJsonValue(m_course_work_id, json[QString("courseWorkId")]);
    m_course_work_id_isSet = !json[QString("courseWorkId")].isNull() && m_course_work_id_isValid;

    m_course_work_type_isValid = ::OpenAPI::fromJsonValue(m_course_work_type, json[QString("courseWorkType")]);
    m_course_work_type_isSet = !json[QString("courseWorkType")].isNull() && m_course_work_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_draft_grade_isValid = ::OpenAPI::fromJsonValue(m_draft_grade, json[QString("draftGrade")]);
    m_draft_grade_isSet = !json[QString("draftGrade")].isNull() && m_draft_grade_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_late_isValid = ::OpenAPI::fromJsonValue(m_late, json[QString("late")]);
    m_late_isSet = !json[QString("late")].isNull() && m_late_isValid;

    m_multiple_choice_submission_isValid = ::OpenAPI::fromJsonValue(m_multiple_choice_submission, json[QString("multipleChoiceSubmission")]);
    m_multiple_choice_submission_isSet = !json[QString("multipleChoiceSubmission")].isNull() && m_multiple_choice_submission_isValid;

    m_short_answer_submission_isValid = ::OpenAPI::fromJsonValue(m_short_answer_submission, json[QString("shortAnswerSubmission")]);
    m_short_answer_submission_isSet = !json[QString("shortAnswerSubmission")].isNull() && m_short_answer_submission_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_submission_history_isValid = ::OpenAPI::fromJsonValue(m_submission_history, json[QString("submissionHistory")]);
    m_submission_history_isSet = !json[QString("submissionHistory")].isNull() && m_submission_history_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIStudentSubmission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStudentSubmission::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_link_isSet) {
        obj.insert(QString("alternateLink"), ::OpenAPI::toJsonValue(m_alternate_link));
    }
    if (m_assigned_grade_isSet) {
        obj.insert(QString("assignedGrade"), ::OpenAPI::toJsonValue(m_assigned_grade));
    }
    if (m_assignment_submission.isSet()) {
        obj.insert(QString("assignmentSubmission"), ::OpenAPI::toJsonValue(m_assignment_submission));
    }
    if (m_associated_with_developer_isSet) {
        obj.insert(QString("associatedWithDeveloper"), ::OpenAPI::toJsonValue(m_associated_with_developer));
    }
    if (m_course_id_isSet) {
        obj.insert(QString("courseId"), ::OpenAPI::toJsonValue(m_course_id));
    }
    if (m_course_work_id_isSet) {
        obj.insert(QString("courseWorkId"), ::OpenAPI::toJsonValue(m_course_work_id));
    }
    if (m_course_work_type_isSet) {
        obj.insert(QString("courseWorkType"), ::OpenAPI::toJsonValue(m_course_work_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_draft_grade_isSet) {
        obj.insert(QString("draftGrade"), ::OpenAPI::toJsonValue(m_draft_grade));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_late_isSet) {
        obj.insert(QString("late"), ::OpenAPI::toJsonValue(m_late));
    }
    if (m_multiple_choice_submission.isSet()) {
        obj.insert(QString("multipleChoiceSubmission"), ::OpenAPI::toJsonValue(m_multiple_choice_submission));
    }
    if (m_short_answer_submission.isSet()) {
        obj.insert(QString("shortAnswerSubmission"), ::OpenAPI::toJsonValue(m_short_answer_submission));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_submission_history.size() > 0) {
        obj.insert(QString("submissionHistory"), ::OpenAPI::toJsonValue(m_submission_history));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIStudentSubmission::getAlternateLink() const {
    return m_alternate_link;
}
void OAIStudentSubmission::setAlternateLink(const QString &alternate_link) {
    m_alternate_link = alternate_link;
    m_alternate_link_isSet = true;
}

bool OAIStudentSubmission::is_alternate_link_Set() const{
    return m_alternate_link_isSet;
}

bool OAIStudentSubmission::is_alternate_link_Valid() const{
    return m_alternate_link_isValid;
}

double OAIStudentSubmission::getAssignedGrade() const {
    return m_assigned_grade;
}
void OAIStudentSubmission::setAssignedGrade(const double &assigned_grade) {
    m_assigned_grade = assigned_grade;
    m_assigned_grade_isSet = true;
}

bool OAIStudentSubmission::is_assigned_grade_Set() const{
    return m_assigned_grade_isSet;
}

bool OAIStudentSubmission::is_assigned_grade_Valid() const{
    return m_assigned_grade_isValid;
}

OAIAssignmentSubmission OAIStudentSubmission::getAssignmentSubmission() const {
    return m_assignment_submission;
}
void OAIStudentSubmission::setAssignmentSubmission(const OAIAssignmentSubmission &assignment_submission) {
    m_assignment_submission = assignment_submission;
    m_assignment_submission_isSet = true;
}

bool OAIStudentSubmission::is_assignment_submission_Set() const{
    return m_assignment_submission_isSet;
}

bool OAIStudentSubmission::is_assignment_submission_Valid() const{
    return m_assignment_submission_isValid;
}

bool OAIStudentSubmission::isAssociatedWithDeveloper() const {
    return m_associated_with_developer;
}
void OAIStudentSubmission::setAssociatedWithDeveloper(const bool &associated_with_developer) {
    m_associated_with_developer = associated_with_developer;
    m_associated_with_developer_isSet = true;
}

bool OAIStudentSubmission::is_associated_with_developer_Set() const{
    return m_associated_with_developer_isSet;
}

bool OAIStudentSubmission::is_associated_with_developer_Valid() const{
    return m_associated_with_developer_isValid;
}

QString OAIStudentSubmission::getCourseId() const {
    return m_course_id;
}
void OAIStudentSubmission::setCourseId(const QString &course_id) {
    m_course_id = course_id;
    m_course_id_isSet = true;
}

bool OAIStudentSubmission::is_course_id_Set() const{
    return m_course_id_isSet;
}

bool OAIStudentSubmission::is_course_id_Valid() const{
    return m_course_id_isValid;
}

QString OAIStudentSubmission::getCourseWorkId() const {
    return m_course_work_id;
}
void OAIStudentSubmission::setCourseWorkId(const QString &course_work_id) {
    m_course_work_id = course_work_id;
    m_course_work_id_isSet = true;
}

bool OAIStudentSubmission::is_course_work_id_Set() const{
    return m_course_work_id_isSet;
}

bool OAIStudentSubmission::is_course_work_id_Valid() const{
    return m_course_work_id_isValid;
}

QString OAIStudentSubmission::getCourseWorkType() const {
    return m_course_work_type;
}
void OAIStudentSubmission::setCourseWorkType(const QString &course_work_type) {
    m_course_work_type = course_work_type;
    m_course_work_type_isSet = true;
}

bool OAIStudentSubmission::is_course_work_type_Set() const{
    return m_course_work_type_isSet;
}

bool OAIStudentSubmission::is_course_work_type_Valid() const{
    return m_course_work_type_isValid;
}

QString OAIStudentSubmission::getCreationTime() const {
    return m_creation_time;
}
void OAIStudentSubmission::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIStudentSubmission::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIStudentSubmission::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

double OAIStudentSubmission::getDraftGrade() const {
    return m_draft_grade;
}
void OAIStudentSubmission::setDraftGrade(const double &draft_grade) {
    m_draft_grade = draft_grade;
    m_draft_grade_isSet = true;
}

bool OAIStudentSubmission::is_draft_grade_Set() const{
    return m_draft_grade_isSet;
}

bool OAIStudentSubmission::is_draft_grade_Valid() const{
    return m_draft_grade_isValid;
}

QString OAIStudentSubmission::getId() const {
    return m_id;
}
void OAIStudentSubmission::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIStudentSubmission::is_id_Set() const{
    return m_id_isSet;
}

bool OAIStudentSubmission::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIStudentSubmission::isLate() const {
    return m_late;
}
void OAIStudentSubmission::setLate(const bool &late) {
    m_late = late;
    m_late_isSet = true;
}

bool OAIStudentSubmission::is_late_Set() const{
    return m_late_isSet;
}

bool OAIStudentSubmission::is_late_Valid() const{
    return m_late_isValid;
}

OAIMultipleChoiceSubmission OAIStudentSubmission::getMultipleChoiceSubmission() const {
    return m_multiple_choice_submission;
}
void OAIStudentSubmission::setMultipleChoiceSubmission(const OAIMultipleChoiceSubmission &multiple_choice_submission) {
    m_multiple_choice_submission = multiple_choice_submission;
    m_multiple_choice_submission_isSet = true;
}

bool OAIStudentSubmission::is_multiple_choice_submission_Set() const{
    return m_multiple_choice_submission_isSet;
}

bool OAIStudentSubmission::is_multiple_choice_submission_Valid() const{
    return m_multiple_choice_submission_isValid;
}

OAIShortAnswerSubmission OAIStudentSubmission::getShortAnswerSubmission() const {
    return m_short_answer_submission;
}
void OAIStudentSubmission::setShortAnswerSubmission(const OAIShortAnswerSubmission &short_answer_submission) {
    m_short_answer_submission = short_answer_submission;
    m_short_answer_submission_isSet = true;
}

bool OAIStudentSubmission::is_short_answer_submission_Set() const{
    return m_short_answer_submission_isSet;
}

bool OAIStudentSubmission::is_short_answer_submission_Valid() const{
    return m_short_answer_submission_isValid;
}

QString OAIStudentSubmission::getState() const {
    return m_state;
}
void OAIStudentSubmission::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIStudentSubmission::is_state_Set() const{
    return m_state_isSet;
}

bool OAIStudentSubmission::is_state_Valid() const{
    return m_state_isValid;
}

QList<OAISubmissionHistory> OAIStudentSubmission::getSubmissionHistory() const {
    return m_submission_history;
}
void OAIStudentSubmission::setSubmissionHistory(const QList<OAISubmissionHistory> &submission_history) {
    m_submission_history = submission_history;
    m_submission_history_isSet = true;
}

bool OAIStudentSubmission::is_submission_history_Set() const{
    return m_submission_history_isSet;
}

bool OAIStudentSubmission::is_submission_history_Valid() const{
    return m_submission_history_isValid;
}

QString OAIStudentSubmission::getUpdateTime() const {
    return m_update_time;
}
void OAIStudentSubmission::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAIStudentSubmission::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAIStudentSubmission::is_update_time_Valid() const{
    return m_update_time_isValid;
}

QString OAIStudentSubmission::getUserId() const {
    return m_user_id;
}
void OAIStudentSubmission::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIStudentSubmission::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIStudentSubmission::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIStudentSubmission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assigned_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assignment_submission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_associated_with_developer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_work_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_work_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_draft_grade_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_late_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiple_choice_submission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_answer_submission.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_history.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStudentSubmission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
