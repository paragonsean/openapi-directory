/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistration::OAIRegistration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistration::OAIRegistration() {
    this->initializeModel();
}

OAIRegistration::~OAIRegistration() {}

void OAIRegistration::initializeModel() {

    m_cloud_pubsub_topic_isSet = false;
    m_cloud_pubsub_topic_isValid = false;

    m_expiry_time_isSet = false;
    m_expiry_time_isValid = false;

    m_feed_isSet = false;
    m_feed_isValid = false;

    m_registration_id_isSet = false;
    m_registration_id_isValid = false;
}

void OAIRegistration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistration::fromJsonObject(QJsonObject json) {

    m_cloud_pubsub_topic_isValid = ::OpenAPI::fromJsonValue(m_cloud_pubsub_topic, json[QString("cloudPubsubTopic")]);
    m_cloud_pubsub_topic_isSet = !json[QString("cloudPubsubTopic")].isNull() && m_cloud_pubsub_topic_isValid;

    m_expiry_time_isValid = ::OpenAPI::fromJsonValue(m_expiry_time, json[QString("expiryTime")]);
    m_expiry_time_isSet = !json[QString("expiryTime")].isNull() && m_expiry_time_isValid;

    m_feed_isValid = ::OpenAPI::fromJsonValue(m_feed, json[QString("feed")]);
    m_feed_isSet = !json[QString("feed")].isNull() && m_feed_isValid;

    m_registration_id_isValid = ::OpenAPI::fromJsonValue(m_registration_id, json[QString("registrationId")]);
    m_registration_id_isSet = !json[QString("registrationId")].isNull() && m_registration_id_isValid;
}

QString OAIRegistration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistration::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_pubsub_topic.isSet()) {
        obj.insert(QString("cloudPubsubTopic"), ::OpenAPI::toJsonValue(m_cloud_pubsub_topic));
    }
    if (m_expiry_time_isSet) {
        obj.insert(QString("expiryTime"), ::OpenAPI::toJsonValue(m_expiry_time));
    }
    if (m_feed.isSet()) {
        obj.insert(QString("feed"), ::OpenAPI::toJsonValue(m_feed));
    }
    if (m_registration_id_isSet) {
        obj.insert(QString("registrationId"), ::OpenAPI::toJsonValue(m_registration_id));
    }
    return obj;
}

OAICloudPubsubTopic OAIRegistration::getCloudPubsubTopic() const {
    return m_cloud_pubsub_topic;
}
void OAIRegistration::setCloudPubsubTopic(const OAICloudPubsubTopic &cloud_pubsub_topic) {
    m_cloud_pubsub_topic = cloud_pubsub_topic;
    m_cloud_pubsub_topic_isSet = true;
}

bool OAIRegistration::is_cloud_pubsub_topic_Set() const{
    return m_cloud_pubsub_topic_isSet;
}

bool OAIRegistration::is_cloud_pubsub_topic_Valid() const{
    return m_cloud_pubsub_topic_isValid;
}

QString OAIRegistration::getExpiryTime() const {
    return m_expiry_time;
}
void OAIRegistration::setExpiryTime(const QString &expiry_time) {
    m_expiry_time = expiry_time;
    m_expiry_time_isSet = true;
}

bool OAIRegistration::is_expiry_time_Set() const{
    return m_expiry_time_isSet;
}

bool OAIRegistration::is_expiry_time_Valid() const{
    return m_expiry_time_isValid;
}

OAIFeed OAIRegistration::getFeed() const {
    return m_feed;
}
void OAIRegistration::setFeed(const OAIFeed &feed) {
    m_feed = feed;
    m_feed_isSet = true;
}

bool OAIRegistration::is_feed_Set() const{
    return m_feed_isSet;
}

bool OAIRegistration::is_feed_Valid() const{
    return m_feed_isValid;
}

QString OAIRegistration::getRegistrationId() const {
    return m_registration_id;
}
void OAIRegistration::setRegistrationId(const QString &registration_id) {
    m_registration_id = registration_id;
    m_registration_id_isSet = true;
}

bool OAIRegistration::is_registration_id_Set() const{
    return m_registration_id_isSet;
}

bool OAIRegistration::is_registration_id_Valid() const{
    return m_registration_id_isValid;
}

bool OAIRegistration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_pubsub_topic.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiry_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_feed.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
