/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedDriveFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedDriveFile::OAISharedDriveFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedDriveFile::OAISharedDriveFile() {
    this->initializeModel();
}

OAISharedDriveFile::~OAISharedDriveFile() {}

void OAISharedDriveFile::initializeModel() {

    m_drive_file_isSet = false;
    m_drive_file_isValid = false;

    m_share_mode_isSet = false;
    m_share_mode_isValid = false;
}

void OAISharedDriveFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedDriveFile::fromJsonObject(QJsonObject json) {

    m_drive_file_isValid = ::OpenAPI::fromJsonValue(m_drive_file, json[QString("driveFile")]);
    m_drive_file_isSet = !json[QString("driveFile")].isNull() && m_drive_file_isValid;

    m_share_mode_isValid = ::OpenAPI::fromJsonValue(m_share_mode, json[QString("shareMode")]);
    m_share_mode_isSet = !json[QString("shareMode")].isNull() && m_share_mode_isValid;
}

QString OAISharedDriveFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedDriveFile::asJsonObject() const {
    QJsonObject obj;
    if (m_drive_file.isSet()) {
        obj.insert(QString("driveFile"), ::OpenAPI::toJsonValue(m_drive_file));
    }
    if (m_share_mode_isSet) {
        obj.insert(QString("shareMode"), ::OpenAPI::toJsonValue(m_share_mode));
    }
    return obj;
}

OAIDriveFile OAISharedDriveFile::getDriveFile() const {
    return m_drive_file;
}
void OAISharedDriveFile::setDriveFile(const OAIDriveFile &drive_file) {
    m_drive_file = drive_file;
    m_drive_file_isSet = true;
}

bool OAISharedDriveFile::is_drive_file_Set() const{
    return m_drive_file_isSet;
}

bool OAISharedDriveFile::is_drive_file_Valid() const{
    return m_drive_file_isValid;
}

QString OAISharedDriveFile::getShareMode() const {
    return m_share_mode;
}
void OAISharedDriveFile::setShareMode(const QString &share_mode) {
    m_share_mode = share_mode;
    m_share_mode_isSet = true;
}

bool OAISharedDriveFile::is_share_mode_Set() const{
    return m_share_mode_isSet;
}

bool OAISharedDriveFile::is_share_mode_Valid() const{
    return m_share_mode_isValid;
}

bool OAISharedDriveFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_drive_file.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedDriveFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
