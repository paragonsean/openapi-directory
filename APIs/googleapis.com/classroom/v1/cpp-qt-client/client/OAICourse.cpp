/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICourse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICourse::OAICourse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICourse::OAICourse() {
    this->initializeModel();
}

OAICourse::~OAICourse() {}

void OAICourse::initializeModel() {

    m_alternate_link_isSet = false;
    m_alternate_link_isValid = false;

    m_calendar_id_isSet = false;
    m_calendar_id_isValid = false;

    m_course_group_email_isSet = false;
    m_course_group_email_isValid = false;

    m_course_material_sets_isSet = false;
    m_course_material_sets_isValid = false;

    m_course_state_isSet = false;
    m_course_state_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_description_heading_isSet = false;
    m_description_heading_isValid = false;

    m_enrollment_code_isSet = false;
    m_enrollment_code_isValid = false;

    m_gradebook_settings_isSet = false;
    m_gradebook_settings_isValid = false;

    m_guardians_enabled_isSet = false;
    m_guardians_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_room_isSet = false;
    m_room_isValid = false;

    m_section_isSet = false;
    m_section_isValid = false;

    m_teacher_folder_isSet = false;
    m_teacher_folder_isValid = false;

    m_teacher_group_email_isSet = false;
    m_teacher_group_email_isValid = false;

    m_update_time_isSet = false;
    m_update_time_isValid = false;
}

void OAICourse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICourse::fromJsonObject(QJsonObject json) {

    m_alternate_link_isValid = ::OpenAPI::fromJsonValue(m_alternate_link, json[QString("alternateLink")]);
    m_alternate_link_isSet = !json[QString("alternateLink")].isNull() && m_alternate_link_isValid;

    m_calendar_id_isValid = ::OpenAPI::fromJsonValue(m_calendar_id, json[QString("calendarId")]);
    m_calendar_id_isSet = !json[QString("calendarId")].isNull() && m_calendar_id_isValid;

    m_course_group_email_isValid = ::OpenAPI::fromJsonValue(m_course_group_email, json[QString("courseGroupEmail")]);
    m_course_group_email_isSet = !json[QString("courseGroupEmail")].isNull() && m_course_group_email_isValid;

    m_course_material_sets_isValid = ::OpenAPI::fromJsonValue(m_course_material_sets, json[QString("courseMaterialSets")]);
    m_course_material_sets_isSet = !json[QString("courseMaterialSets")].isNull() && m_course_material_sets_isValid;

    m_course_state_isValid = ::OpenAPI::fromJsonValue(m_course_state, json[QString("courseState")]);
    m_course_state_isSet = !json[QString("courseState")].isNull() && m_course_state_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_description_heading_isValid = ::OpenAPI::fromJsonValue(m_description_heading, json[QString("descriptionHeading")]);
    m_description_heading_isSet = !json[QString("descriptionHeading")].isNull() && m_description_heading_isValid;

    m_enrollment_code_isValid = ::OpenAPI::fromJsonValue(m_enrollment_code, json[QString("enrollmentCode")]);
    m_enrollment_code_isSet = !json[QString("enrollmentCode")].isNull() && m_enrollment_code_isValid;

    m_gradebook_settings_isValid = ::OpenAPI::fromJsonValue(m_gradebook_settings, json[QString("gradebookSettings")]);
    m_gradebook_settings_isSet = !json[QString("gradebookSettings")].isNull() && m_gradebook_settings_isValid;

    m_guardians_enabled_isValid = ::OpenAPI::fromJsonValue(m_guardians_enabled, json[QString("guardiansEnabled")]);
    m_guardians_enabled_isSet = !json[QString("guardiansEnabled")].isNull() && m_guardians_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_room_isValid = ::OpenAPI::fromJsonValue(m_room, json[QString("room")]);
    m_room_isSet = !json[QString("room")].isNull() && m_room_isValid;

    m_section_isValid = ::OpenAPI::fromJsonValue(m_section, json[QString("section")]);
    m_section_isSet = !json[QString("section")].isNull() && m_section_isValid;

    m_teacher_folder_isValid = ::OpenAPI::fromJsonValue(m_teacher_folder, json[QString("teacherFolder")]);
    m_teacher_folder_isSet = !json[QString("teacherFolder")].isNull() && m_teacher_folder_isValid;

    m_teacher_group_email_isValid = ::OpenAPI::fromJsonValue(m_teacher_group_email, json[QString("teacherGroupEmail")]);
    m_teacher_group_email_isSet = !json[QString("teacherGroupEmail")].isNull() && m_teacher_group_email_isValid;

    m_update_time_isValid = ::OpenAPI::fromJsonValue(m_update_time, json[QString("updateTime")]);
    m_update_time_isSet = !json[QString("updateTime")].isNull() && m_update_time_isValid;
}

QString OAICourse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICourse::asJsonObject() const {
    QJsonObject obj;
    if (m_alternate_link_isSet) {
        obj.insert(QString("alternateLink"), ::OpenAPI::toJsonValue(m_alternate_link));
    }
    if (m_calendar_id_isSet) {
        obj.insert(QString("calendarId"), ::OpenAPI::toJsonValue(m_calendar_id));
    }
    if (m_course_group_email_isSet) {
        obj.insert(QString("courseGroupEmail"), ::OpenAPI::toJsonValue(m_course_group_email));
    }
    if (m_course_material_sets.size() > 0) {
        obj.insert(QString("courseMaterialSets"), ::OpenAPI::toJsonValue(m_course_material_sets));
    }
    if (m_course_state_isSet) {
        obj.insert(QString("courseState"), ::OpenAPI::toJsonValue(m_course_state));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_description_heading_isSet) {
        obj.insert(QString("descriptionHeading"), ::OpenAPI::toJsonValue(m_description_heading));
    }
    if (m_enrollment_code_isSet) {
        obj.insert(QString("enrollmentCode"), ::OpenAPI::toJsonValue(m_enrollment_code));
    }
    if (m_gradebook_settings.isSet()) {
        obj.insert(QString("gradebookSettings"), ::OpenAPI::toJsonValue(m_gradebook_settings));
    }
    if (m_guardians_enabled_isSet) {
        obj.insert(QString("guardiansEnabled"), ::OpenAPI::toJsonValue(m_guardians_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_room_isSet) {
        obj.insert(QString("room"), ::OpenAPI::toJsonValue(m_room));
    }
    if (m_section_isSet) {
        obj.insert(QString("section"), ::OpenAPI::toJsonValue(m_section));
    }
    if (m_teacher_folder.isSet()) {
        obj.insert(QString("teacherFolder"), ::OpenAPI::toJsonValue(m_teacher_folder));
    }
    if (m_teacher_group_email_isSet) {
        obj.insert(QString("teacherGroupEmail"), ::OpenAPI::toJsonValue(m_teacher_group_email));
    }
    if (m_update_time_isSet) {
        obj.insert(QString("updateTime"), ::OpenAPI::toJsonValue(m_update_time));
    }
    return obj;
}

QString OAICourse::getAlternateLink() const {
    return m_alternate_link;
}
void OAICourse::setAlternateLink(const QString &alternate_link) {
    m_alternate_link = alternate_link;
    m_alternate_link_isSet = true;
}

bool OAICourse::is_alternate_link_Set() const{
    return m_alternate_link_isSet;
}

bool OAICourse::is_alternate_link_Valid() const{
    return m_alternate_link_isValid;
}

QString OAICourse::getCalendarId() const {
    return m_calendar_id;
}
void OAICourse::setCalendarId(const QString &calendar_id) {
    m_calendar_id = calendar_id;
    m_calendar_id_isSet = true;
}

bool OAICourse::is_calendar_id_Set() const{
    return m_calendar_id_isSet;
}

bool OAICourse::is_calendar_id_Valid() const{
    return m_calendar_id_isValid;
}

QString OAICourse::getCourseGroupEmail() const {
    return m_course_group_email;
}
void OAICourse::setCourseGroupEmail(const QString &course_group_email) {
    m_course_group_email = course_group_email;
    m_course_group_email_isSet = true;
}

bool OAICourse::is_course_group_email_Set() const{
    return m_course_group_email_isSet;
}

bool OAICourse::is_course_group_email_Valid() const{
    return m_course_group_email_isValid;
}

QList<OAICourseMaterialSet> OAICourse::getCourseMaterialSets() const {
    return m_course_material_sets;
}
void OAICourse::setCourseMaterialSets(const QList<OAICourseMaterialSet> &course_material_sets) {
    m_course_material_sets = course_material_sets;
    m_course_material_sets_isSet = true;
}

bool OAICourse::is_course_material_sets_Set() const{
    return m_course_material_sets_isSet;
}

bool OAICourse::is_course_material_sets_Valid() const{
    return m_course_material_sets_isValid;
}

QString OAICourse::getCourseState() const {
    return m_course_state;
}
void OAICourse::setCourseState(const QString &course_state) {
    m_course_state = course_state;
    m_course_state_isSet = true;
}

bool OAICourse::is_course_state_Set() const{
    return m_course_state_isSet;
}

bool OAICourse::is_course_state_Valid() const{
    return m_course_state_isValid;
}

QString OAICourse::getCreationTime() const {
    return m_creation_time;
}
void OAICourse::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAICourse::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAICourse::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAICourse::getDescription() const {
    return m_description;
}
void OAICourse::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICourse::is_description_Set() const{
    return m_description_isSet;
}

bool OAICourse::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICourse::getDescriptionHeading() const {
    return m_description_heading;
}
void OAICourse::setDescriptionHeading(const QString &description_heading) {
    m_description_heading = description_heading;
    m_description_heading_isSet = true;
}

bool OAICourse::is_description_heading_Set() const{
    return m_description_heading_isSet;
}

bool OAICourse::is_description_heading_Valid() const{
    return m_description_heading_isValid;
}

QString OAICourse::getEnrollmentCode() const {
    return m_enrollment_code;
}
void OAICourse::setEnrollmentCode(const QString &enrollment_code) {
    m_enrollment_code = enrollment_code;
    m_enrollment_code_isSet = true;
}

bool OAICourse::is_enrollment_code_Set() const{
    return m_enrollment_code_isSet;
}

bool OAICourse::is_enrollment_code_Valid() const{
    return m_enrollment_code_isValid;
}

OAIGradebookSettings OAICourse::getGradebookSettings() const {
    return m_gradebook_settings;
}
void OAICourse::setGradebookSettings(const OAIGradebookSettings &gradebook_settings) {
    m_gradebook_settings = gradebook_settings;
    m_gradebook_settings_isSet = true;
}

bool OAICourse::is_gradebook_settings_Set() const{
    return m_gradebook_settings_isSet;
}

bool OAICourse::is_gradebook_settings_Valid() const{
    return m_gradebook_settings_isValid;
}

bool OAICourse::isGuardiansEnabled() const {
    return m_guardians_enabled;
}
void OAICourse::setGuardiansEnabled(const bool &guardians_enabled) {
    m_guardians_enabled = guardians_enabled;
    m_guardians_enabled_isSet = true;
}

bool OAICourse::is_guardians_enabled_Set() const{
    return m_guardians_enabled_isSet;
}

bool OAICourse::is_guardians_enabled_Valid() const{
    return m_guardians_enabled_isValid;
}

QString OAICourse::getId() const {
    return m_id;
}
void OAICourse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICourse::is_id_Set() const{
    return m_id_isSet;
}

bool OAICourse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICourse::getName() const {
    return m_name;
}
void OAICourse::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICourse::is_name_Set() const{
    return m_name_isSet;
}

bool OAICourse::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICourse::getOwnerId() const {
    return m_owner_id;
}
void OAICourse::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAICourse::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAICourse::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAICourse::getRoom() const {
    return m_room;
}
void OAICourse::setRoom(const QString &room) {
    m_room = room;
    m_room_isSet = true;
}

bool OAICourse::is_room_Set() const{
    return m_room_isSet;
}

bool OAICourse::is_room_Valid() const{
    return m_room_isValid;
}

QString OAICourse::getSection() const {
    return m_section;
}
void OAICourse::setSection(const QString &section) {
    m_section = section;
    m_section_isSet = true;
}

bool OAICourse::is_section_Set() const{
    return m_section_isSet;
}

bool OAICourse::is_section_Valid() const{
    return m_section_isValid;
}

OAIDriveFolder OAICourse::getTeacherFolder() const {
    return m_teacher_folder;
}
void OAICourse::setTeacherFolder(const OAIDriveFolder &teacher_folder) {
    m_teacher_folder = teacher_folder;
    m_teacher_folder_isSet = true;
}

bool OAICourse::is_teacher_folder_Set() const{
    return m_teacher_folder_isSet;
}

bool OAICourse::is_teacher_folder_Valid() const{
    return m_teacher_folder_isValid;
}

QString OAICourse::getTeacherGroupEmail() const {
    return m_teacher_group_email;
}
void OAICourse::setTeacherGroupEmail(const QString &teacher_group_email) {
    m_teacher_group_email = teacher_group_email;
    m_teacher_group_email_isSet = true;
}

bool OAICourse::is_teacher_group_email_Set() const{
    return m_teacher_group_email_isSet;
}

bool OAICourse::is_teacher_group_email_Valid() const{
    return m_teacher_group_email_isValid;
}

QString OAICourse::getUpdateTime() const {
    return m_update_time;
}
void OAICourse::setUpdateTime(const QString &update_time) {
    m_update_time = update_time;
    m_update_time_isSet = true;
}

bool OAICourse::is_update_time_Set() const{
    return m_update_time_isSet;
}

bool OAICourse::is_update_time_Valid() const{
    return m_update_time_isValid;
}

bool OAICourse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alternate_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_calendar_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_group_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_material_sets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_course_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_heading_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enrollment_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gradebook_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guardians_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_room_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_section_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_teacher_folder.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_teacher_group_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICourse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
