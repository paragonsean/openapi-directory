/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserProfile::OAIUserProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserProfile::OAIUserProfile() {
    this->initializeModel();
}

OAIUserProfile::~OAIUserProfile() {}

void OAIUserProfile::initializeModel() {

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_verified_teacher_isSet = false;
    m_verified_teacher_isValid = false;
}

void OAIUserProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserProfile::fromJsonObject(QJsonObject json) {

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("photoUrl")]);
    m_photo_url_isSet = !json[QString("photoUrl")].isNull() && m_photo_url_isValid;

    m_verified_teacher_isValid = ::OpenAPI::fromJsonValue(m_verified_teacher, json[QString("verifiedTeacher")]);
    m_verified_teacher_isSet = !json[QString("verifiedTeacher")].isNull() && m_verified_teacher_isValid;
}

QString OAIUserProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name.isSet()) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_permissions.size() > 0) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("photoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_verified_teacher_isSet) {
        obj.insert(QString("verifiedTeacher"), ::OpenAPI::toJsonValue(m_verified_teacher));
    }
    return obj;
}

QString OAIUserProfile::getEmailAddress() const {
    return m_email_address;
}
void OAIUserProfile::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIUserProfile::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIUserProfile::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QString OAIUserProfile::getId() const {
    return m_id;
}
void OAIUserProfile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserProfile::is_id_Valid() const{
    return m_id_isValid;
}

OAIName OAIUserProfile::getName() const {
    return m_name;
}
void OAIUserProfile::setName(const OAIName &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserProfile::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserProfile::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIGlobalPermission> OAIUserProfile::getPermissions() const {
    return m_permissions;
}
void OAIUserProfile::setPermissions(const QList<OAIGlobalPermission> &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIUserProfile::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIUserProfile::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIUserProfile::getPhotoUrl() const {
    return m_photo_url;
}
void OAIUserProfile::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIUserProfile::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIUserProfile::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

bool OAIUserProfile::isVerifiedTeacher() const {
    return m_verified_teacher;
}
void OAIUserProfile::setVerifiedTeacher(const bool &verified_teacher) {
    m_verified_teacher = verified_teacher;
    m_verified_teacher_isSet = true;
}

bool OAIUserProfile::is_verified_teacher_Set() const{
    return m_verified_teacher_isSet;
}

bool OAIUserProfile::is_verified_teacher_Valid() const{
    return m_verified_teacher_isValid;
}

bool OAIUserProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verified_teacher_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
