/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuardianInvitation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuardianInvitation::OAIGuardianInvitation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuardianInvitation::OAIGuardianInvitation() {
    this->initializeModel();
}

OAIGuardianInvitation::~OAIGuardianInvitation() {}

void OAIGuardianInvitation::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_invitation_id_isSet = false;
    m_invitation_id_isValid = false;

    m_invited_email_address_isSet = false;
    m_invited_email_address_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_student_id_isSet = false;
    m_student_id_isValid = false;
}

void OAIGuardianInvitation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuardianInvitation::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_invitation_id, json[QString("invitationId")]);
    m_invitation_id_isSet = !json[QString("invitationId")].isNull() && m_invitation_id_isValid;

    m_invited_email_address_isValid = ::OpenAPI::fromJsonValue(m_invited_email_address, json[QString("invitedEmailAddress")]);
    m_invited_email_address_isSet = !json[QString("invitedEmailAddress")].isNull() && m_invited_email_address_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_student_id_isValid = ::OpenAPI::fromJsonValue(m_student_id, json[QString("studentId")]);
    m_student_id_isSet = !json[QString("studentId")].isNull() && m_student_id_isValid;
}

QString OAIGuardianInvitation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuardianInvitation::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_invitation_id_isSet) {
        obj.insert(QString("invitationId"), ::OpenAPI::toJsonValue(m_invitation_id));
    }
    if (m_invited_email_address_isSet) {
        obj.insert(QString("invitedEmailAddress"), ::OpenAPI::toJsonValue(m_invited_email_address));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_student_id_isSet) {
        obj.insert(QString("studentId"), ::OpenAPI::toJsonValue(m_student_id));
    }
    return obj;
}

QString OAIGuardianInvitation::getCreationTime() const {
    return m_creation_time;
}
void OAIGuardianInvitation::setCreationTime(const QString &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIGuardianInvitation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIGuardianInvitation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIGuardianInvitation::getInvitationId() const {
    return m_invitation_id;
}
void OAIGuardianInvitation::setInvitationId(const QString &invitation_id) {
    m_invitation_id = invitation_id;
    m_invitation_id_isSet = true;
}

bool OAIGuardianInvitation::is_invitation_id_Set() const{
    return m_invitation_id_isSet;
}

bool OAIGuardianInvitation::is_invitation_id_Valid() const{
    return m_invitation_id_isValid;
}

QString OAIGuardianInvitation::getInvitedEmailAddress() const {
    return m_invited_email_address;
}
void OAIGuardianInvitation::setInvitedEmailAddress(const QString &invited_email_address) {
    m_invited_email_address = invited_email_address;
    m_invited_email_address_isSet = true;
}

bool OAIGuardianInvitation::is_invited_email_address_Set() const{
    return m_invited_email_address_isSet;
}

bool OAIGuardianInvitation::is_invited_email_address_Valid() const{
    return m_invited_email_address_isValid;
}

QString OAIGuardianInvitation::getState() const {
    return m_state;
}
void OAIGuardianInvitation::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIGuardianInvitation::is_state_Set() const{
    return m_state_isSet;
}

bool OAIGuardianInvitation::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIGuardianInvitation::getStudentId() const {
    return m_student_id;
}
void OAIGuardianInvitation::setStudentId(const QString &student_id) {
    m_student_id = student_id;
    m_student_id_isSet = true;
}

bool OAIGuardianInvitation::is_student_id_Set() const{
    return m_student_id_isSet;
}

bool OAIGuardianInvitation::is_student_id_Valid() const{
    return m_student_id_isValid;
}

bool OAIGuardianInvitation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invited_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_student_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuardianInvitation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
