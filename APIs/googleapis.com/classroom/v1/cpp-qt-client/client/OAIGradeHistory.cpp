/**
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGradeHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGradeHistory::OAIGradeHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGradeHistory::OAIGradeHistory() {
    this->initializeModel();
}

OAIGradeHistory::~OAIGradeHistory() {}

void OAIGradeHistory::initializeModel() {

    m_actor_user_id_isSet = false;
    m_actor_user_id_isValid = false;

    m_grade_change_type_isSet = false;
    m_grade_change_type_isValid = false;

    m_grade_timestamp_isSet = false;
    m_grade_timestamp_isValid = false;

    m_max_points_isSet = false;
    m_max_points_isValid = false;

    m_points_earned_isSet = false;
    m_points_earned_isValid = false;
}

void OAIGradeHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGradeHistory::fromJsonObject(QJsonObject json) {

    m_actor_user_id_isValid = ::OpenAPI::fromJsonValue(m_actor_user_id, json[QString("actorUserId")]);
    m_actor_user_id_isSet = !json[QString("actorUserId")].isNull() && m_actor_user_id_isValid;

    m_grade_change_type_isValid = ::OpenAPI::fromJsonValue(m_grade_change_type, json[QString("gradeChangeType")]);
    m_grade_change_type_isSet = !json[QString("gradeChangeType")].isNull() && m_grade_change_type_isValid;

    m_grade_timestamp_isValid = ::OpenAPI::fromJsonValue(m_grade_timestamp, json[QString("gradeTimestamp")]);
    m_grade_timestamp_isSet = !json[QString("gradeTimestamp")].isNull() && m_grade_timestamp_isValid;

    m_max_points_isValid = ::OpenAPI::fromJsonValue(m_max_points, json[QString("maxPoints")]);
    m_max_points_isSet = !json[QString("maxPoints")].isNull() && m_max_points_isValid;

    m_points_earned_isValid = ::OpenAPI::fromJsonValue(m_points_earned, json[QString("pointsEarned")]);
    m_points_earned_isSet = !json[QString("pointsEarned")].isNull() && m_points_earned_isValid;
}

QString OAIGradeHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGradeHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_actor_user_id_isSet) {
        obj.insert(QString("actorUserId"), ::OpenAPI::toJsonValue(m_actor_user_id));
    }
    if (m_grade_change_type_isSet) {
        obj.insert(QString("gradeChangeType"), ::OpenAPI::toJsonValue(m_grade_change_type));
    }
    if (m_grade_timestamp_isSet) {
        obj.insert(QString("gradeTimestamp"), ::OpenAPI::toJsonValue(m_grade_timestamp));
    }
    if (m_max_points_isSet) {
        obj.insert(QString("maxPoints"), ::OpenAPI::toJsonValue(m_max_points));
    }
    if (m_points_earned_isSet) {
        obj.insert(QString("pointsEarned"), ::OpenAPI::toJsonValue(m_points_earned));
    }
    return obj;
}

QString OAIGradeHistory::getActorUserId() const {
    return m_actor_user_id;
}
void OAIGradeHistory::setActorUserId(const QString &actor_user_id) {
    m_actor_user_id = actor_user_id;
    m_actor_user_id_isSet = true;
}

bool OAIGradeHistory::is_actor_user_id_Set() const{
    return m_actor_user_id_isSet;
}

bool OAIGradeHistory::is_actor_user_id_Valid() const{
    return m_actor_user_id_isValid;
}

QString OAIGradeHistory::getGradeChangeType() const {
    return m_grade_change_type;
}
void OAIGradeHistory::setGradeChangeType(const QString &grade_change_type) {
    m_grade_change_type = grade_change_type;
    m_grade_change_type_isSet = true;
}

bool OAIGradeHistory::is_grade_change_type_Set() const{
    return m_grade_change_type_isSet;
}

bool OAIGradeHistory::is_grade_change_type_Valid() const{
    return m_grade_change_type_isValid;
}

QString OAIGradeHistory::getGradeTimestamp() const {
    return m_grade_timestamp;
}
void OAIGradeHistory::setGradeTimestamp(const QString &grade_timestamp) {
    m_grade_timestamp = grade_timestamp;
    m_grade_timestamp_isSet = true;
}

bool OAIGradeHistory::is_grade_timestamp_Set() const{
    return m_grade_timestamp_isSet;
}

bool OAIGradeHistory::is_grade_timestamp_Valid() const{
    return m_grade_timestamp_isValid;
}

double OAIGradeHistory::getMaxPoints() const {
    return m_max_points;
}
void OAIGradeHistory::setMaxPoints(const double &max_points) {
    m_max_points = max_points;
    m_max_points_isSet = true;
}

bool OAIGradeHistory::is_max_points_Set() const{
    return m_max_points_isSet;
}

bool OAIGradeHistory::is_max_points_Valid() const{
    return m_max_points_isValid;
}

double OAIGradeHistory::getPointsEarned() const {
    return m_points_earned;
}
void OAIGradeHistory::setPointsEarned(const double &points_earned) {
    m_points_earned = points_earned;
    m_points_earned_isSet = true;
}

bool OAIGradeHistory::is_points_earned_Set() const{
    return m_points_earned_isSet;
}

bool OAIGradeHistory::is_points_earned_Valid() const{
    return m_points_earned_isValid;
}

bool OAIGradeHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actor_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_change_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_points_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_points_earned_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGradeHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
