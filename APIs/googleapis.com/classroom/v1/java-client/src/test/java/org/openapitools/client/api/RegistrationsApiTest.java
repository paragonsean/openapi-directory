/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Registration;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RegistrationsApi
 */
@Disabled
public class RegistrationsApiTest {

    private final RegistrationsApi api = new RegistrationsApi();

    /**
     * Creates a &#x60;Registration&#x60;, causing Classroom to start sending notifications from the provided &#x60;feed&#x60; to the destination provided in &#x60;cloudPubSubTopic&#x60;. Returns the created &#x60;Registration&#x60;. Currently, this will be the same as the argument, but with server-assigned fields such as &#x60;expiry_time&#x60; and &#x60;id&#x60; filled in. Note that any value specified for the &#x60;expiry_time&#x60; or &#x60;id&#x60; fields will be ignored. While Classroom may validate the &#x60;cloudPubSubTopic&#x60; and return errors on a best effort basis, it is the caller&#39;s responsibility to ensure that it exists and that Classroom has permission to publish to it. This method may return the following error codes: * &#x60;PERMISSION_DENIED&#x60; if: * the authenticated user does not have permission to receive notifications from the requested field; or * the current user has not granted access to the current Cloud project with the appropriate scope for the requested feed. Note that domain-wide delegation of authority is not currently supported for this purpose. If the request has the appropriate scope, but no grant exists, a Request Errors is returned. * another access error is encountered. * &#x60;INVALID_ARGUMENT&#x60; if: * no &#x60;cloudPubsubTopic&#x60; is specified, or the specified &#x60;cloudPubsubTopic&#x60; is not valid; or * no &#x60;feed&#x60; is specified, or the specified &#x60;feed&#x60; is not valid. * &#x60;NOT_FOUND&#x60; if: * the specified &#x60;feed&#x60; cannot be located, or the requesting user does not have permission to determine whether or not it exists; or * the specified &#x60;cloudPubsubTopic&#x60; cannot be located, or Classroom has not been granted permission to publish to it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void classroomRegistrationsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Registration registration = null;
        Registration response = api.classroomRegistrationsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, registration);
        // TODO: test validations
    }

    /**
     * Deletes a &#x60;Registration&#x60;, causing Classroom to stop sending notifications for that &#x60;Registration&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void classroomRegistrationsDeleteTest() throws ApiException {
        String registrationId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.classroomRegistrationsDelete(registrationId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

}
