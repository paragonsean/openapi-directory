/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The history of each grade on this submission.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GradeHistory {
  public static final String SERIALIZED_NAME_ACTOR_USER_ID = "actorUserId";
  @SerializedName(SERIALIZED_NAME_ACTOR_USER_ID)
  private String actorUserId;

  /**
   * The type of grade change at this time in the submission grade history.
   */
  @JsonAdapter(GradeChangeTypeEnum.Adapter.class)
  public enum GradeChangeTypeEnum {
    UNKNOWN_GRADE_CHANGE_TYPE("UNKNOWN_GRADE_CHANGE_TYPE"),
    
    DRAFT_GRADE_POINTS_EARNED_CHANGE("DRAFT_GRADE_POINTS_EARNED_CHANGE"),
    
    ASSIGNED_GRADE_POINTS_EARNED_CHANGE("ASSIGNED_GRADE_POINTS_EARNED_CHANGE"),
    
    MAX_POINTS_CHANGE("MAX_POINTS_CHANGE");

    private String value;

    GradeChangeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GradeChangeTypeEnum fromValue(String value) {
      for (GradeChangeTypeEnum b : GradeChangeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GradeChangeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GradeChangeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GradeChangeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GradeChangeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GradeChangeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRADE_CHANGE_TYPE = "gradeChangeType";
  @SerializedName(SERIALIZED_NAME_GRADE_CHANGE_TYPE)
  private GradeChangeTypeEnum gradeChangeType;

  public static final String SERIALIZED_NAME_GRADE_TIMESTAMP = "gradeTimestamp";
  @SerializedName(SERIALIZED_NAME_GRADE_TIMESTAMP)
  private String gradeTimestamp;

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private Double maxPoints;

  public static final String SERIALIZED_NAME_POINTS_EARNED = "pointsEarned";
  @SerializedName(SERIALIZED_NAME_POINTS_EARNED)
  private Double pointsEarned;

  public GradeHistory() {
  }

  public GradeHistory actorUserId(String actorUserId) {
    this.actorUserId = actorUserId;
    return this;
  }

  /**
   * The teacher who made the grade change.
   * @return actorUserId
   */
  @javax.annotation.Nullable
  public String getActorUserId() {
    return actorUserId;
  }

  public void setActorUserId(String actorUserId) {
    this.actorUserId = actorUserId;
  }


  public GradeHistory gradeChangeType(GradeChangeTypeEnum gradeChangeType) {
    this.gradeChangeType = gradeChangeType;
    return this;
  }

  /**
   * The type of grade change at this time in the submission grade history.
   * @return gradeChangeType
   */
  @javax.annotation.Nullable
  public GradeChangeTypeEnum getGradeChangeType() {
    return gradeChangeType;
  }

  public void setGradeChangeType(GradeChangeTypeEnum gradeChangeType) {
    this.gradeChangeType = gradeChangeType;
  }


  public GradeHistory gradeTimestamp(String gradeTimestamp) {
    this.gradeTimestamp = gradeTimestamp;
    return this;
  }

  /**
   * When the grade of the submission was changed.
   * @return gradeTimestamp
   */
  @javax.annotation.Nullable
  public String getGradeTimestamp() {
    return gradeTimestamp;
  }

  public void setGradeTimestamp(String gradeTimestamp) {
    this.gradeTimestamp = gradeTimestamp;
  }


  public GradeHistory maxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * The denominator of the grade at this time in the submission grade history.
   * @return maxPoints
   */
  @javax.annotation.Nullable
  public Double getMaxPoints() {
    return maxPoints;
  }

  public void setMaxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
  }


  public GradeHistory pointsEarned(Double pointsEarned) {
    this.pointsEarned = pointsEarned;
    return this;
  }

  /**
   * The numerator of the grade at this time in the submission grade history.
   * @return pointsEarned
   */
  @javax.annotation.Nullable
  public Double getPointsEarned() {
    return pointsEarned;
  }

  public void setPointsEarned(Double pointsEarned) {
    this.pointsEarned = pointsEarned;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradeHistory gradeHistory = (GradeHistory) o;
    return Objects.equals(this.actorUserId, gradeHistory.actorUserId) &&
        Objects.equals(this.gradeChangeType, gradeHistory.gradeChangeType) &&
        Objects.equals(this.gradeTimestamp, gradeHistory.gradeTimestamp) &&
        Objects.equals(this.maxPoints, gradeHistory.maxPoints) &&
        Objects.equals(this.pointsEarned, gradeHistory.pointsEarned);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actorUserId, gradeChangeType, gradeTimestamp, maxPoints, pointsEarned);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradeHistory {\n");
    sb.append("    actorUserId: ").append(toIndentedString(actorUserId)).append("\n");
    sb.append("    gradeChangeType: ").append(toIndentedString(gradeChangeType)).append("\n");
    sb.append("    gradeTimestamp: ").append(toIndentedString(gradeTimestamp)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    pointsEarned: ").append(toIndentedString(pointsEarned)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actorUserId");
    openapiFields.add("gradeChangeType");
    openapiFields.add("gradeTimestamp");
    openapiFields.add("maxPoints");
    openapiFields.add("pointsEarned");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GradeHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GradeHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradeHistory is not found in the empty JSON string", GradeHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GradeHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradeHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actorUserId") != null && !jsonObj.get("actorUserId").isJsonNull()) && !jsonObj.get("actorUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actorUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actorUserId").toString()));
      }
      if ((jsonObj.get("gradeChangeType") != null && !jsonObj.get("gradeChangeType").isJsonNull()) && !jsonObj.get("gradeChangeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradeChangeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradeChangeType").toString()));
      }
      // validate the optional field `gradeChangeType`
      if (jsonObj.get("gradeChangeType") != null && !jsonObj.get("gradeChangeType").isJsonNull()) {
        GradeChangeTypeEnum.validateJsonElement(jsonObj.get("gradeChangeType"));
      }
      if ((jsonObj.get("gradeTimestamp") != null && !jsonObj.get("gradeTimestamp").isJsonNull()) && !jsonObj.get("gradeTimestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gradeTimestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gradeTimestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradeHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradeHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradeHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradeHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<GradeHistory>() {
           @Override
           public void write(JsonWriter out, GradeHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradeHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GradeHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GradeHistory
   * @throws IOException if the JSON string is invalid with respect to GradeHistory
   */
  public static GradeHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradeHistory.class);
  }

  /**
   * Convert an instance of GradeHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

