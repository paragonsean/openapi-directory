/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IndividualStudentsOptions;
import org.openapitools.client.model.Material;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Course work material created by a teacher for students of the course
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CourseWorkMaterial {
  public static final String SERIALIZED_NAME_ALTERNATE_LINK = "alternateLink";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_LINK)
  private String alternateLink;

  /**
   * Assignee mode of the course work material. If unspecified, the default value is &#x60;ALL_STUDENTS&#x60;.
   */
  @JsonAdapter(AssigneeModeEnum.Adapter.class)
  public enum AssigneeModeEnum {
    ASSIGNEE_MODE_UNSPECIFIED("ASSIGNEE_MODE_UNSPECIFIED"),
    
    ALL_STUDENTS("ALL_STUDENTS"),
    
    INDIVIDUAL_STUDENTS("INDIVIDUAL_STUDENTS");

    private String value;

    AssigneeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssigneeModeEnum fromValue(String value) {
      for (AssigneeModeEnum b : AssigneeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssigneeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssigneeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssigneeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNEE_MODE = "assigneeMode";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_MODE)
  private AssigneeModeEnum assigneeMode;

  public static final String SERIALIZED_NAME_COURSE_ID = "courseId";
  @SerializedName(SERIALIZED_NAME_COURSE_ID)
  private String courseId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creatorUserId";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDIVIDUAL_STUDENTS_OPTIONS = "individualStudentsOptions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_STUDENTS_OPTIONS)
  private IndividualStudentsOptions individualStudentsOptions;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<Material> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private String scheduledTime;

  /**
   * Status of this course work material. If unspecified, the default state is &#x60;DRAFT&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    COURSEWORK_MATERIAL_STATE_UNSPECIFIED("COURSEWORK_MATERIAL_STATE_UNSPECIFIED"),
    
    PUBLISHED("PUBLISHED"),
    
    DRAFT("DRAFT"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topicId";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private String topicId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public CourseWorkMaterial() {
  }

  public CourseWorkMaterial alternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
    return this;
  }

  /**
   * Absolute link to this course work material in the Classroom web UI. This is only populated if &#x60;state&#x60; is &#x60;PUBLISHED&#x60;. Read-only.
   * @return alternateLink
   */
  @javax.annotation.Nullable
  public String getAlternateLink() {
    return alternateLink;
  }

  public void setAlternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
  }


  public CourseWorkMaterial assigneeMode(AssigneeModeEnum assigneeMode) {
    this.assigneeMode = assigneeMode;
    return this;
  }

  /**
   * Assignee mode of the course work material. If unspecified, the default value is &#x60;ALL_STUDENTS&#x60;.
   * @return assigneeMode
   */
  @javax.annotation.Nullable
  public AssigneeModeEnum getAssigneeMode() {
    return assigneeMode;
  }

  public void setAssigneeMode(AssigneeModeEnum assigneeMode) {
    this.assigneeMode = assigneeMode;
  }


  public CourseWorkMaterial courseId(String courseId) {
    this.courseId = courseId;
    return this;
  }

  /**
   * Identifier of the course. Read-only.
   * @return courseId
   */
  @javax.annotation.Nullable
  public String getCourseId() {
    return courseId;
  }

  public void setCourseId(String courseId) {
    this.courseId = courseId;
  }


  public CourseWorkMaterial creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Timestamp when this course work material was created. Read-only.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public CourseWorkMaterial creatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
    return this;
  }

  /**
   * Identifier for the user that created the course work material. Read-only.
   * @return creatorUserId
   */
  @javax.annotation.Nullable
  public String getCreatorUserId() {
    return creatorUserId;
  }

  public void setCreatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
  }


  public CourseWorkMaterial description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description of this course work material. The text must be a valid UTF-8 string containing no more than 30,000 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CourseWorkMaterial id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Classroom-assigned identifier of this course work material, unique per course. Read-only.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CourseWorkMaterial individualStudentsOptions(IndividualStudentsOptions individualStudentsOptions) {
    this.individualStudentsOptions = individualStudentsOptions;
    return this;
  }

  /**
   * Get individualStudentsOptions
   * @return individualStudentsOptions
   */
  @javax.annotation.Nullable
  public IndividualStudentsOptions getIndividualStudentsOptions() {
    return individualStudentsOptions;
  }

  public void setIndividualStudentsOptions(IndividualStudentsOptions individualStudentsOptions) {
    this.individualStudentsOptions = individualStudentsOptions;
  }


  public CourseWorkMaterial materials(List<Material> materials) {
    this.materials = materials;
    return this;
  }

  public CourseWorkMaterial addMaterialsItem(Material materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

  /**
   * Additional materials. A course work material must have no more than 20 material items.
   * @return materials
   */
  @javax.annotation.Nullable
  public List<Material> getMaterials() {
    return materials;
  }

  public void setMaterials(List<Material> materials) {
    this.materials = materials;
  }


  public CourseWorkMaterial scheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Optional timestamp when this course work material is scheduled to be published.
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public String getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public CourseWorkMaterial state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Status of this course work material. If unspecified, the default state is &#x60;DRAFT&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public CourseWorkMaterial title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of this course work material. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CourseWorkMaterial topicId(String topicId) {
    this.topicId = topicId;
    return this;
  }

  /**
   * Identifier for the topic that this course work material is associated with. Must match an existing topic in the course.
   * @return topicId
   */
  @javax.annotation.Nullable
  public String getTopicId() {
    return topicId;
  }

  public void setTopicId(String topicId) {
    this.topicId = topicId;
  }


  public CourseWorkMaterial updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Timestamp of the most recent change to this course work material. Read-only.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseWorkMaterial courseWorkMaterial = (CourseWorkMaterial) o;
    return Objects.equals(this.alternateLink, courseWorkMaterial.alternateLink) &&
        Objects.equals(this.assigneeMode, courseWorkMaterial.assigneeMode) &&
        Objects.equals(this.courseId, courseWorkMaterial.courseId) &&
        Objects.equals(this.creationTime, courseWorkMaterial.creationTime) &&
        Objects.equals(this.creatorUserId, courseWorkMaterial.creatorUserId) &&
        Objects.equals(this.description, courseWorkMaterial.description) &&
        Objects.equals(this.id, courseWorkMaterial.id) &&
        Objects.equals(this.individualStudentsOptions, courseWorkMaterial.individualStudentsOptions) &&
        Objects.equals(this.materials, courseWorkMaterial.materials) &&
        Objects.equals(this.scheduledTime, courseWorkMaterial.scheduledTime) &&
        Objects.equals(this.state, courseWorkMaterial.state) &&
        Objects.equals(this.title, courseWorkMaterial.title) &&
        Objects.equals(this.topicId, courseWorkMaterial.topicId) &&
        Objects.equals(this.updateTime, courseWorkMaterial.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateLink, assigneeMode, courseId, creationTime, creatorUserId, description, id, individualStudentsOptions, materials, scheduledTime, state, title, topicId, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseWorkMaterial {\n");
    sb.append("    alternateLink: ").append(toIndentedString(alternateLink)).append("\n");
    sb.append("    assigneeMode: ").append(toIndentedString(assigneeMode)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    individualStudentsOptions: ").append(toIndentedString(individualStudentsOptions)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateLink");
    openapiFields.add("assigneeMode");
    openapiFields.add("courseId");
    openapiFields.add("creationTime");
    openapiFields.add("creatorUserId");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("individualStudentsOptions");
    openapiFields.add("materials");
    openapiFields.add("scheduledTime");
    openapiFields.add("state");
    openapiFields.add("title");
    openapiFields.add("topicId");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CourseWorkMaterial
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CourseWorkMaterial.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourseWorkMaterial is not found in the empty JSON string", CourseWorkMaterial.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CourseWorkMaterial.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CourseWorkMaterial` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateLink") != null && !jsonObj.get("alternateLink").isJsonNull()) && !jsonObj.get("alternateLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateLink").toString()));
      }
      if ((jsonObj.get("assigneeMode") != null && !jsonObj.get("assigneeMode").isJsonNull()) && !jsonObj.get("assigneeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigneeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigneeMode").toString()));
      }
      // validate the optional field `assigneeMode`
      if (jsonObj.get("assigneeMode") != null && !jsonObj.get("assigneeMode").isJsonNull()) {
        AssigneeModeEnum.validateJsonElement(jsonObj.get("assigneeMode"));
      }
      if ((jsonObj.get("courseId") != null && !jsonObj.get("courseId").isJsonNull()) && !jsonObj.get("courseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseId").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("creatorUserId") != null && !jsonObj.get("creatorUserId").isJsonNull()) && !jsonObj.get("creatorUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUserId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `individualStudentsOptions`
      if (jsonObj.get("individualStudentsOptions") != null && !jsonObj.get("individualStudentsOptions").isJsonNull()) {
        IndividualStudentsOptions.validateJsonElement(jsonObj.get("individualStudentsOptions"));
      }
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull()) {
        JsonArray jsonArraymaterials = jsonObj.getAsJsonArray("materials");
        if (jsonArraymaterials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("materials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
          }

          // validate the optional field `materials` (array)
          for (int i = 0; i < jsonArraymaterials.size(); i++) {
            Material.validateJsonElement(jsonArraymaterials.get(i));
          };
        }
      }
      if ((jsonObj.get("scheduledTime") != null && !jsonObj.get("scheduledTime").isJsonNull()) && !jsonObj.get("scheduledTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("topicId") != null && !jsonObj.get("topicId").isJsonNull()) && !jsonObj.get("topicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topicId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourseWorkMaterial.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourseWorkMaterial' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourseWorkMaterial> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourseWorkMaterial.class));

       return (TypeAdapter<T>) new TypeAdapter<CourseWorkMaterial>() {
           @Override
           public void write(JsonWriter out, CourseWorkMaterial value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CourseWorkMaterial read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CourseWorkMaterial given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CourseWorkMaterial
   * @throws IOException if the JSON string is invalid with respect to CourseWorkMaterial
   */
  public static CourseWorkMaterial fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourseWorkMaterial.class);
  }

  /**
   * Convert an instance of CourseWorkMaterial to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

