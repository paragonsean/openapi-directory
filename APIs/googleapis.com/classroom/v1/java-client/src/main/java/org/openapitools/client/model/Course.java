/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CourseMaterialSet;
import org.openapitools.client.model.DriveFolder;
import org.openapitools.client.model.GradebookSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Course in Classroom.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Course {
  public static final String SERIALIZED_NAME_ALTERNATE_LINK = "alternateLink";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_LINK)
  private String alternateLink;

  public static final String SERIALIZED_NAME_CALENDAR_ID = "calendarId";
  @SerializedName(SERIALIZED_NAME_CALENDAR_ID)
  private String calendarId;

  public static final String SERIALIZED_NAME_COURSE_GROUP_EMAIL = "courseGroupEmail";
  @SerializedName(SERIALIZED_NAME_COURSE_GROUP_EMAIL)
  private String courseGroupEmail;

  public static final String SERIALIZED_NAME_COURSE_MATERIAL_SETS = "courseMaterialSets";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_COURSE_MATERIAL_SETS)
  private List<CourseMaterialSet> courseMaterialSets = new ArrayList<>();

  /**
   * State of the course. If unspecified, the default state is &#x60;PROVISIONED&#x60;.
   */
  @JsonAdapter(CourseStateEnum.Adapter.class)
  public enum CourseStateEnum {
    COURSE_STATE_UNSPECIFIED("COURSE_STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    ARCHIVED("ARCHIVED"),
    
    PROVISIONED("PROVISIONED"),
    
    DECLINED("DECLINED"),
    
    SUSPENDED("SUSPENDED");

    private String value;

    CourseStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CourseStateEnum fromValue(String value) {
      for (CourseStateEnum b : CourseStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CourseStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CourseStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CourseStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CourseStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CourseStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COURSE_STATE = "courseState";
  @SerializedName(SERIALIZED_NAME_COURSE_STATE)
  private CourseStateEnum courseState;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_HEADING = "descriptionHeading";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_HEADING)
  private String descriptionHeading;

  public static final String SERIALIZED_NAME_ENROLLMENT_CODE = "enrollmentCode";
  @SerializedName(SERIALIZED_NAME_ENROLLMENT_CODE)
  private String enrollmentCode;

  public static final String SERIALIZED_NAME_GRADEBOOK_SETTINGS = "gradebookSettings";
  @SerializedName(SERIALIZED_NAME_GRADEBOOK_SETTINGS)
  private GradebookSettings gradebookSettings;

  public static final String SERIALIZED_NAME_GUARDIANS_ENABLED = "guardiansEnabled";
  @SerializedName(SERIALIZED_NAME_GUARDIANS_ENABLED)
  private Boolean guardiansEnabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_ROOM = "room";
  @SerializedName(SERIALIZED_NAME_ROOM)
  private String room;

  public static final String SERIALIZED_NAME_SECTION = "section";
  @SerializedName(SERIALIZED_NAME_SECTION)
  private String section;

  public static final String SERIALIZED_NAME_TEACHER_FOLDER = "teacherFolder";
  @SerializedName(SERIALIZED_NAME_TEACHER_FOLDER)
  private DriveFolder teacherFolder;

  public static final String SERIALIZED_NAME_TEACHER_GROUP_EMAIL = "teacherGroupEmail";
  @SerializedName(SERIALIZED_NAME_TEACHER_GROUP_EMAIL)
  private String teacherGroupEmail;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public Course() {
  }

  public Course alternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
    return this;
  }

  /**
   * Absolute link to this course in the Classroom web UI. Read-only.
   * @return alternateLink
   */
  @javax.annotation.Nullable
  public String getAlternateLink() {
    return alternateLink;
  }

  public void setAlternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
  }


  public Course calendarId(String calendarId) {
    this.calendarId = calendarId;
    return this;
  }

  /**
   * The Calendar ID for a calendar that all course members can see, to which Classroom adds events for course work and announcements in the course. The Calendar for a course is created asynchronously when the course is set to &#x60;CourseState.ACTIVE&#x60; for the first time (at creation time or when it is updated to &#x60;ACTIVE&#x60; through the UI or the API). The Calendar ID will not be populated until the creation process is completed. Read-only.
   * @return calendarId
   */
  @javax.annotation.Nullable
  public String getCalendarId() {
    return calendarId;
  }

  public void setCalendarId(String calendarId) {
    this.calendarId = calendarId;
  }


  public Course courseGroupEmail(String courseGroupEmail) {
    this.courseGroupEmail = courseGroupEmail;
    return this;
  }

  /**
   * The email address of a Google group containing all members of the course. This group does not accept email and can only be used for permissions. Read-only.
   * @return courseGroupEmail
   */
  @javax.annotation.Nullable
  public String getCourseGroupEmail() {
    return courseGroupEmail;
  }

  public void setCourseGroupEmail(String courseGroupEmail) {
    this.courseGroupEmail = courseGroupEmail;
  }


  @Deprecated
  public Course courseMaterialSets(List<CourseMaterialSet> courseMaterialSets) {
    this.courseMaterialSets = courseMaterialSets;
    return this;
  }

  public Course addCourseMaterialSetsItem(CourseMaterialSet courseMaterialSetsItem) {
    if (this.courseMaterialSets == null) {
      this.courseMaterialSets = new ArrayList<>();
    }
    this.courseMaterialSets.add(courseMaterialSetsItem);
    return this;
  }

  /**
   * Sets of materials that appear on the \&quot;about\&quot; page of this course. Read-only.
   * @return courseMaterialSets
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<CourseMaterialSet> getCourseMaterialSets() {
    return courseMaterialSets;
  }

  @Deprecated
  public void setCourseMaterialSets(List<CourseMaterialSet> courseMaterialSets) {
    this.courseMaterialSets = courseMaterialSets;
  }


  public Course courseState(CourseStateEnum courseState) {
    this.courseState = courseState;
    return this;
  }

  /**
   * State of the course. If unspecified, the default state is &#x60;PROVISIONED&#x60;.
   * @return courseState
   */
  @javax.annotation.Nullable
  public CourseStateEnum getCourseState() {
    return courseState;
  }

  public void setCourseState(CourseStateEnum courseState) {
    this.courseState = courseState;
  }


  public Course creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Creation time of the course. Specifying this field in a course update mask results in an error. Read-only.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public Course description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description. For example, \&quot;We&#39;ll be learning about the structure of living creatures from a combination of textbooks, guest lectures, and lab work. Expect to be excited!\&quot; If set, this field must be a valid UTF-8 string and no longer than 30,000 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Course descriptionHeading(String descriptionHeading) {
    this.descriptionHeading = descriptionHeading;
    return this;
  }

  /**
   * Optional heading for the description. For example, \&quot;Welcome to 10th Grade Biology.\&quot; If set, this field must be a valid UTF-8 string and no longer than 3600 characters.
   * @return descriptionHeading
   */
  @javax.annotation.Nullable
  public String getDescriptionHeading() {
    return descriptionHeading;
  }

  public void setDescriptionHeading(String descriptionHeading) {
    this.descriptionHeading = descriptionHeading;
  }


  public Course enrollmentCode(String enrollmentCode) {
    this.enrollmentCode = enrollmentCode;
    return this;
  }

  /**
   * Enrollment code to use when joining this course. Specifying this field in a course update mask results in an error. Read-only.
   * @return enrollmentCode
   */
  @javax.annotation.Nullable
  public String getEnrollmentCode() {
    return enrollmentCode;
  }

  public void setEnrollmentCode(String enrollmentCode) {
    this.enrollmentCode = enrollmentCode;
  }


  public Course gradebookSettings(GradebookSettings gradebookSettings) {
    this.gradebookSettings = gradebookSettings;
    return this;
  }

  /**
   * Get gradebookSettings
   * @return gradebookSettings
   */
  @javax.annotation.Nullable
  public GradebookSettings getGradebookSettings() {
    return gradebookSettings;
  }

  public void setGradebookSettings(GradebookSettings gradebookSettings) {
    this.gradebookSettings = gradebookSettings;
  }


  public Course guardiansEnabled(Boolean guardiansEnabled) {
    this.guardiansEnabled = guardiansEnabled;
    return this;
  }

  /**
   * Whether or not guardian notifications are enabled for this course. Read-only.
   * @return guardiansEnabled
   */
  @javax.annotation.Nullable
  public Boolean getGuardiansEnabled() {
    return guardiansEnabled;
  }

  public void setGuardiansEnabled(Boolean guardiansEnabled) {
    this.guardiansEnabled = guardiansEnabled;
  }


  public Course id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier for this course assigned by Classroom. When creating a course, you may optionally set this identifier to an alias string in the request to create a corresponding alias. The &#x60;id&#x60; is still assigned by Classroom and cannot be updated after the course is created. Specifying this field in a course update mask results in an error.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Course name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the course. For example, \&quot;10th Grade Biology\&quot;. The name is required. It must be between 1 and 750 characters and a valid UTF-8 string.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Course ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The identifier of the owner of a course. When specified as a parameter of a create course request, this field is required. The identifier can be one of the following: * the numeric identifier for the user * the email address of the user * the string literal &#x60;\&quot;me\&quot;&#x60;, indicating the requesting user This must be set in a create request. Admins can also specify this field in a patch course request to transfer ownership. In other contexts, it is read-only.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public Course room(String room) {
    this.room = room;
    return this;
  }

  /**
   * Optional room location. For example, \&quot;301\&quot;. If set, this field must be a valid UTF-8 string and no longer than 650 characters.
   * @return room
   */
  @javax.annotation.Nullable
  public String getRoom() {
    return room;
  }

  public void setRoom(String room) {
    this.room = room;
  }


  public Course section(String section) {
    this.section = section;
    return this;
  }

  /**
   * Section of the course. For example, \&quot;Period 2\&quot;. If set, this field must be a valid UTF-8 string and no longer than 2800 characters.
   * @return section
   */
  @javax.annotation.Nullable
  public String getSection() {
    return section;
  }

  public void setSection(String section) {
    this.section = section;
  }


  public Course teacherFolder(DriveFolder teacherFolder) {
    this.teacherFolder = teacherFolder;
    return this;
  }

  /**
   * Get teacherFolder
   * @return teacherFolder
   */
  @javax.annotation.Nullable
  public DriveFolder getTeacherFolder() {
    return teacherFolder;
  }

  public void setTeacherFolder(DriveFolder teacherFolder) {
    this.teacherFolder = teacherFolder;
  }


  public Course teacherGroupEmail(String teacherGroupEmail) {
    this.teacherGroupEmail = teacherGroupEmail;
    return this;
  }

  /**
   * The email address of a Google group containing all teachers of the course. This group does not accept email and can only be used for permissions. Read-only.
   * @return teacherGroupEmail
   */
  @javax.annotation.Nullable
  public String getTeacherGroupEmail() {
    return teacherGroupEmail;
  }

  public void setTeacherGroupEmail(String teacherGroupEmail) {
    this.teacherGroupEmail = teacherGroupEmail;
  }


  public Course updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Time of the most recent update to this course. Specifying this field in a course update mask results in an error. Read-only.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Course course = (Course) o;
    return Objects.equals(this.alternateLink, course.alternateLink) &&
        Objects.equals(this.calendarId, course.calendarId) &&
        Objects.equals(this.courseGroupEmail, course.courseGroupEmail) &&
        Objects.equals(this.courseMaterialSets, course.courseMaterialSets) &&
        Objects.equals(this.courseState, course.courseState) &&
        Objects.equals(this.creationTime, course.creationTime) &&
        Objects.equals(this.description, course.description) &&
        Objects.equals(this.descriptionHeading, course.descriptionHeading) &&
        Objects.equals(this.enrollmentCode, course.enrollmentCode) &&
        Objects.equals(this.gradebookSettings, course.gradebookSettings) &&
        Objects.equals(this.guardiansEnabled, course.guardiansEnabled) &&
        Objects.equals(this.id, course.id) &&
        Objects.equals(this.name, course.name) &&
        Objects.equals(this.ownerId, course.ownerId) &&
        Objects.equals(this.room, course.room) &&
        Objects.equals(this.section, course.section) &&
        Objects.equals(this.teacherFolder, course.teacherFolder) &&
        Objects.equals(this.teacherGroupEmail, course.teacherGroupEmail) &&
        Objects.equals(this.updateTime, course.updateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateLink, calendarId, courseGroupEmail, courseMaterialSets, courseState, creationTime, description, descriptionHeading, enrollmentCode, gradebookSettings, guardiansEnabled, id, name, ownerId, room, section, teacherFolder, teacherGroupEmail, updateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Course {\n");
    sb.append("    alternateLink: ").append(toIndentedString(alternateLink)).append("\n");
    sb.append("    calendarId: ").append(toIndentedString(calendarId)).append("\n");
    sb.append("    courseGroupEmail: ").append(toIndentedString(courseGroupEmail)).append("\n");
    sb.append("    courseMaterialSets: ").append(toIndentedString(courseMaterialSets)).append("\n");
    sb.append("    courseState: ").append(toIndentedString(courseState)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionHeading: ").append(toIndentedString(descriptionHeading)).append("\n");
    sb.append("    enrollmentCode: ").append(toIndentedString(enrollmentCode)).append("\n");
    sb.append("    gradebookSettings: ").append(toIndentedString(gradebookSettings)).append("\n");
    sb.append("    guardiansEnabled: ").append(toIndentedString(guardiansEnabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    room: ").append(toIndentedString(room)).append("\n");
    sb.append("    section: ").append(toIndentedString(section)).append("\n");
    sb.append("    teacherFolder: ").append(toIndentedString(teacherFolder)).append("\n");
    sb.append("    teacherGroupEmail: ").append(toIndentedString(teacherGroupEmail)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateLink");
    openapiFields.add("calendarId");
    openapiFields.add("courseGroupEmail");
    openapiFields.add("courseMaterialSets");
    openapiFields.add("courseState");
    openapiFields.add("creationTime");
    openapiFields.add("description");
    openapiFields.add("descriptionHeading");
    openapiFields.add("enrollmentCode");
    openapiFields.add("gradebookSettings");
    openapiFields.add("guardiansEnabled");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("ownerId");
    openapiFields.add("room");
    openapiFields.add("section");
    openapiFields.add("teacherFolder");
    openapiFields.add("teacherGroupEmail");
    openapiFields.add("updateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Course
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Course.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Course is not found in the empty JSON string", Course.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Course.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Course` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateLink") != null && !jsonObj.get("alternateLink").isJsonNull()) && !jsonObj.get("alternateLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateLink").toString()));
      }
      if ((jsonObj.get("calendarId") != null && !jsonObj.get("calendarId").isJsonNull()) && !jsonObj.get("calendarId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calendarId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calendarId").toString()));
      }
      if ((jsonObj.get("courseGroupEmail") != null && !jsonObj.get("courseGroupEmail").isJsonNull()) && !jsonObj.get("courseGroupEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseGroupEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseGroupEmail").toString()));
      }
      if (jsonObj.get("courseMaterialSets") != null && !jsonObj.get("courseMaterialSets").isJsonNull()) {
        JsonArray jsonArraycourseMaterialSets = jsonObj.getAsJsonArray("courseMaterialSets");
        if (jsonArraycourseMaterialSets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("courseMaterialSets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `courseMaterialSets` to be an array in the JSON string but got `%s`", jsonObj.get("courseMaterialSets").toString()));
          }

          // validate the optional field `courseMaterialSets` (array)
          for (int i = 0; i < jsonArraycourseMaterialSets.size(); i++) {
            CourseMaterialSet.validateJsonElement(jsonArraycourseMaterialSets.get(i));
          };
        }
      }
      if ((jsonObj.get("courseState") != null && !jsonObj.get("courseState").isJsonNull()) && !jsonObj.get("courseState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseState").toString()));
      }
      // validate the optional field `courseState`
      if (jsonObj.get("courseState") != null && !jsonObj.get("courseState").isJsonNull()) {
        CourseStateEnum.validateJsonElement(jsonObj.get("courseState"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("descriptionHeading") != null && !jsonObj.get("descriptionHeading").isJsonNull()) && !jsonObj.get("descriptionHeading").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptionHeading` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptionHeading").toString()));
      }
      if ((jsonObj.get("enrollmentCode") != null && !jsonObj.get("enrollmentCode").isJsonNull()) && !jsonObj.get("enrollmentCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enrollmentCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enrollmentCode").toString()));
      }
      // validate the optional field `gradebookSettings`
      if (jsonObj.get("gradebookSettings") != null && !jsonObj.get("gradebookSettings").isJsonNull()) {
        GradebookSettings.validateJsonElement(jsonObj.get("gradebookSettings"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if ((jsonObj.get("room") != null && !jsonObj.get("room").isJsonNull()) && !jsonObj.get("room").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `room` to be a primitive type in the JSON string but got `%s`", jsonObj.get("room").toString()));
      }
      if ((jsonObj.get("section") != null && !jsonObj.get("section").isJsonNull()) && !jsonObj.get("section").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `section` to be a primitive type in the JSON string but got `%s`", jsonObj.get("section").toString()));
      }
      // validate the optional field `teacherFolder`
      if (jsonObj.get("teacherFolder") != null && !jsonObj.get("teacherFolder").isJsonNull()) {
        DriveFolder.validateJsonElement(jsonObj.get("teacherFolder"));
      }
      if ((jsonObj.get("teacherGroupEmail") != null && !jsonObj.get("teacherGroupEmail").isJsonNull()) && !jsonObj.get("teacherGroupEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `teacherGroupEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("teacherGroupEmail").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Course.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Course' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Course> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Course.class));

       return (TypeAdapter<T>) new TypeAdapter<Course>() {
           @Override
           public void write(JsonWriter out, Course value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Course read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Course given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Course
   * @throws IOException if the JSON string is invalid with respect to Course
   */
  public static Course fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Course.class);
  }

  /**
   * Convert an instance of Course to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

