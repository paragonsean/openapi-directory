/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AssignmentSubmission;
import org.openapitools.client.model.MultipleChoiceSubmission;
import org.openapitools.client.model.ShortAnswerSubmission;
import org.openapitools.client.model.SubmissionHistory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Student submission for course work. &#x60;StudentSubmission&#x60; items are generated when a &#x60;CourseWork&#x60; item is created. Student submissions that have never been accessed (i.e. with &#x60;state&#x60; &#x3D; NEW) may not have a creation time or update time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StudentSubmission {
  public static final String SERIALIZED_NAME_ALTERNATE_LINK = "alternateLink";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_LINK)
  private String alternateLink;

  public static final String SERIALIZED_NAME_ASSIGNED_GRADE = "assignedGrade";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_GRADE)
  private Double assignedGrade;

  public static final String SERIALIZED_NAME_ASSIGNMENT_SUBMISSION = "assignmentSubmission";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT_SUBMISSION)
  private AssignmentSubmission assignmentSubmission;

  public static final String SERIALIZED_NAME_ASSOCIATED_WITH_DEVELOPER = "associatedWithDeveloper";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_WITH_DEVELOPER)
  private Boolean associatedWithDeveloper;

  public static final String SERIALIZED_NAME_COURSE_ID = "courseId";
  @SerializedName(SERIALIZED_NAME_COURSE_ID)
  private String courseId;

  public static final String SERIALIZED_NAME_COURSE_WORK_ID = "courseWorkId";
  @SerializedName(SERIALIZED_NAME_COURSE_WORK_ID)
  private String courseWorkId;

  /**
   * Type of course work this submission is for. Read-only.
   */
  @JsonAdapter(CourseWorkTypeEnum.Adapter.class)
  public enum CourseWorkTypeEnum {
    COURSE_WORK_TYPE_UNSPECIFIED("COURSE_WORK_TYPE_UNSPECIFIED"),
    
    ASSIGNMENT("ASSIGNMENT"),
    
    SHORT_ANSWER_QUESTION("SHORT_ANSWER_QUESTION"),
    
    MULTIPLE_CHOICE_QUESTION("MULTIPLE_CHOICE_QUESTION");

    private String value;

    CourseWorkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CourseWorkTypeEnum fromValue(String value) {
      for (CourseWorkTypeEnum b : CourseWorkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CourseWorkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CourseWorkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CourseWorkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CourseWorkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CourseWorkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COURSE_WORK_TYPE = "courseWorkType";
  @SerializedName(SERIALIZED_NAME_COURSE_WORK_TYPE)
  private CourseWorkTypeEnum courseWorkType;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_DRAFT_GRADE = "draftGrade";
  @SerializedName(SERIALIZED_NAME_DRAFT_GRADE)
  private Double draftGrade;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LATE = "late";
  @SerializedName(SERIALIZED_NAME_LATE)
  private Boolean late;

  public static final String SERIALIZED_NAME_MULTIPLE_CHOICE_SUBMISSION = "multipleChoiceSubmission";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_CHOICE_SUBMISSION)
  private MultipleChoiceSubmission multipleChoiceSubmission;

  public static final String SERIALIZED_NAME_SHORT_ANSWER_SUBMISSION = "shortAnswerSubmission";
  @SerializedName(SERIALIZED_NAME_SHORT_ANSWER_SUBMISSION)
  private ShortAnswerSubmission shortAnswerSubmission;

  /**
   * State of this submission. Read-only.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SUBMISSION_STATE_UNSPECIFIED("SUBMISSION_STATE_UNSPECIFIED"),
    
    NEW("NEW"),
    
    CREATED("CREATED"),
    
    TURNED_IN("TURNED_IN"),
    
    RETURNED("RETURNED"),
    
    RECLAIMED_BY_STUDENT("RECLAIMED_BY_STUDENT");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUBMISSION_HISTORY = "submissionHistory";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_HISTORY)
  private List<SubmissionHistory> submissionHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public StudentSubmission() {
  }

  public StudentSubmission alternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
    return this;
  }

  /**
   * Absolute link to the submission in the Classroom web UI. Read-only.
   * @return alternateLink
   */
  @javax.annotation.Nullable
  public String getAlternateLink() {
    return alternateLink;
  }

  public void setAlternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
  }


  public StudentSubmission assignedGrade(Double assignedGrade) {
    this.assignedGrade = assignedGrade;
    return this;
  }

  /**
   * Optional grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This may be modified only by course teachers.
   * @return assignedGrade
   */
  @javax.annotation.Nullable
  public Double getAssignedGrade() {
    return assignedGrade;
  }

  public void setAssignedGrade(Double assignedGrade) {
    this.assignedGrade = assignedGrade;
  }


  public StudentSubmission assignmentSubmission(AssignmentSubmission assignmentSubmission) {
    this.assignmentSubmission = assignmentSubmission;
    return this;
  }

  /**
   * Get assignmentSubmission
   * @return assignmentSubmission
   */
  @javax.annotation.Nullable
  public AssignmentSubmission getAssignmentSubmission() {
    return assignmentSubmission;
  }

  public void setAssignmentSubmission(AssignmentSubmission assignmentSubmission) {
    this.assignmentSubmission = assignmentSubmission;
  }


  public StudentSubmission associatedWithDeveloper(Boolean associatedWithDeveloper) {
    this.associatedWithDeveloper = associatedWithDeveloper;
    return this;
  }

  /**
   * Whether this student submission is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
   * @return associatedWithDeveloper
   */
  @javax.annotation.Nullable
  public Boolean getAssociatedWithDeveloper() {
    return associatedWithDeveloper;
  }

  public void setAssociatedWithDeveloper(Boolean associatedWithDeveloper) {
    this.associatedWithDeveloper = associatedWithDeveloper;
  }


  public StudentSubmission courseId(String courseId) {
    this.courseId = courseId;
    return this;
  }

  /**
   * Identifier of the course. Read-only.
   * @return courseId
   */
  @javax.annotation.Nullable
  public String getCourseId() {
    return courseId;
  }

  public void setCourseId(String courseId) {
    this.courseId = courseId;
  }


  public StudentSubmission courseWorkId(String courseWorkId) {
    this.courseWorkId = courseWorkId;
    return this;
  }

  /**
   * Identifier for the course work this corresponds to. Read-only.
   * @return courseWorkId
   */
  @javax.annotation.Nullable
  public String getCourseWorkId() {
    return courseWorkId;
  }

  public void setCourseWorkId(String courseWorkId) {
    this.courseWorkId = courseWorkId;
  }


  public StudentSubmission courseWorkType(CourseWorkTypeEnum courseWorkType) {
    this.courseWorkType = courseWorkType;
    return this;
  }

  /**
   * Type of course work this submission is for. Read-only.
   * @return courseWorkType
   */
  @javax.annotation.Nullable
  public CourseWorkTypeEnum getCourseWorkType() {
    return courseWorkType;
  }

  public void setCourseWorkType(CourseWorkTypeEnum courseWorkType) {
    this.courseWorkType = courseWorkType;
  }


  public StudentSubmission creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Creation time of this submission. This may be unset if the student has not accessed this item. Read-only.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public StudentSubmission draftGrade(Double draftGrade) {
    this.draftGrade = draftGrade;
    return this;
  }

  /**
   * Optional pending grade. If unset, no grade was set. This value must be non-negative. Decimal (that is, non-integer) values are allowed, but are rounded to two decimal places. This is only visible to and modifiable by course teachers.
   * @return draftGrade
   */
  @javax.annotation.Nullable
  public Double getDraftGrade() {
    return draftGrade;
  }

  public void setDraftGrade(Double draftGrade) {
    this.draftGrade = draftGrade;
  }


  public StudentSubmission id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Classroom-assigned Identifier for the student submission. This is unique among submissions for the relevant course work. Read-only.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public StudentSubmission late(Boolean late) {
    this.late = late;
    return this;
  }

  /**
   * Whether this submission is late. Read-only.
   * @return late
   */
  @javax.annotation.Nullable
  public Boolean getLate() {
    return late;
  }

  public void setLate(Boolean late) {
    this.late = late;
  }


  public StudentSubmission multipleChoiceSubmission(MultipleChoiceSubmission multipleChoiceSubmission) {
    this.multipleChoiceSubmission = multipleChoiceSubmission;
    return this;
  }

  /**
   * Get multipleChoiceSubmission
   * @return multipleChoiceSubmission
   */
  @javax.annotation.Nullable
  public MultipleChoiceSubmission getMultipleChoiceSubmission() {
    return multipleChoiceSubmission;
  }

  public void setMultipleChoiceSubmission(MultipleChoiceSubmission multipleChoiceSubmission) {
    this.multipleChoiceSubmission = multipleChoiceSubmission;
  }


  public StudentSubmission shortAnswerSubmission(ShortAnswerSubmission shortAnswerSubmission) {
    this.shortAnswerSubmission = shortAnswerSubmission;
    return this;
  }

  /**
   * Get shortAnswerSubmission
   * @return shortAnswerSubmission
   */
  @javax.annotation.Nullable
  public ShortAnswerSubmission getShortAnswerSubmission() {
    return shortAnswerSubmission;
  }

  public void setShortAnswerSubmission(ShortAnswerSubmission shortAnswerSubmission) {
    this.shortAnswerSubmission = shortAnswerSubmission;
  }


  public StudentSubmission state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of this submission. Read-only.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public StudentSubmission submissionHistory(List<SubmissionHistory> submissionHistory) {
    this.submissionHistory = submissionHistory;
    return this;
  }

  public StudentSubmission addSubmissionHistoryItem(SubmissionHistory submissionHistoryItem) {
    if (this.submissionHistory == null) {
      this.submissionHistory = new ArrayList<>();
    }
    this.submissionHistory.add(submissionHistoryItem);
    return this;
  }

  /**
   * The history of the submission (includes state and grade histories). Read-only.
   * @return submissionHistory
   */
  @javax.annotation.Nullable
  public List<SubmissionHistory> getSubmissionHistory() {
    return submissionHistory;
  }

  public void setSubmissionHistory(List<SubmissionHistory> submissionHistory) {
    this.submissionHistory = submissionHistory;
  }


  public StudentSubmission updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Last update time of this submission. This may be unset if the student has not accessed this item. Read-only.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public StudentSubmission userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Identifier for the student that owns this submission. Read-only.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StudentSubmission studentSubmission = (StudentSubmission) o;
    return Objects.equals(this.alternateLink, studentSubmission.alternateLink) &&
        Objects.equals(this.assignedGrade, studentSubmission.assignedGrade) &&
        Objects.equals(this.assignmentSubmission, studentSubmission.assignmentSubmission) &&
        Objects.equals(this.associatedWithDeveloper, studentSubmission.associatedWithDeveloper) &&
        Objects.equals(this.courseId, studentSubmission.courseId) &&
        Objects.equals(this.courseWorkId, studentSubmission.courseWorkId) &&
        Objects.equals(this.courseWorkType, studentSubmission.courseWorkType) &&
        Objects.equals(this.creationTime, studentSubmission.creationTime) &&
        Objects.equals(this.draftGrade, studentSubmission.draftGrade) &&
        Objects.equals(this.id, studentSubmission.id) &&
        Objects.equals(this.late, studentSubmission.late) &&
        Objects.equals(this.multipleChoiceSubmission, studentSubmission.multipleChoiceSubmission) &&
        Objects.equals(this.shortAnswerSubmission, studentSubmission.shortAnswerSubmission) &&
        Objects.equals(this.state, studentSubmission.state) &&
        Objects.equals(this.submissionHistory, studentSubmission.submissionHistory) &&
        Objects.equals(this.updateTime, studentSubmission.updateTime) &&
        Objects.equals(this.userId, studentSubmission.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateLink, assignedGrade, assignmentSubmission, associatedWithDeveloper, courseId, courseWorkId, courseWorkType, creationTime, draftGrade, id, late, multipleChoiceSubmission, shortAnswerSubmission, state, submissionHistory, updateTime, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StudentSubmission {\n");
    sb.append("    alternateLink: ").append(toIndentedString(alternateLink)).append("\n");
    sb.append("    assignedGrade: ").append(toIndentedString(assignedGrade)).append("\n");
    sb.append("    assignmentSubmission: ").append(toIndentedString(assignmentSubmission)).append("\n");
    sb.append("    associatedWithDeveloper: ").append(toIndentedString(associatedWithDeveloper)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    courseWorkId: ").append(toIndentedString(courseWorkId)).append("\n");
    sb.append("    courseWorkType: ").append(toIndentedString(courseWorkType)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    draftGrade: ").append(toIndentedString(draftGrade)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    late: ").append(toIndentedString(late)).append("\n");
    sb.append("    multipleChoiceSubmission: ").append(toIndentedString(multipleChoiceSubmission)).append("\n");
    sb.append("    shortAnswerSubmission: ").append(toIndentedString(shortAnswerSubmission)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    submissionHistory: ").append(toIndentedString(submissionHistory)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateLink");
    openapiFields.add("assignedGrade");
    openapiFields.add("assignmentSubmission");
    openapiFields.add("associatedWithDeveloper");
    openapiFields.add("courseId");
    openapiFields.add("courseWorkId");
    openapiFields.add("courseWorkType");
    openapiFields.add("creationTime");
    openapiFields.add("draftGrade");
    openapiFields.add("id");
    openapiFields.add("late");
    openapiFields.add("multipleChoiceSubmission");
    openapiFields.add("shortAnswerSubmission");
    openapiFields.add("state");
    openapiFields.add("submissionHistory");
    openapiFields.add("updateTime");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StudentSubmission
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StudentSubmission.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StudentSubmission is not found in the empty JSON string", StudentSubmission.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StudentSubmission.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StudentSubmission` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateLink") != null && !jsonObj.get("alternateLink").isJsonNull()) && !jsonObj.get("alternateLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateLink").toString()));
      }
      // validate the optional field `assignmentSubmission`
      if (jsonObj.get("assignmentSubmission") != null && !jsonObj.get("assignmentSubmission").isJsonNull()) {
        AssignmentSubmission.validateJsonElement(jsonObj.get("assignmentSubmission"));
      }
      if ((jsonObj.get("courseId") != null && !jsonObj.get("courseId").isJsonNull()) && !jsonObj.get("courseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseId").toString()));
      }
      if ((jsonObj.get("courseWorkId") != null && !jsonObj.get("courseWorkId").isJsonNull()) && !jsonObj.get("courseWorkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseWorkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseWorkId").toString()));
      }
      if ((jsonObj.get("courseWorkType") != null && !jsonObj.get("courseWorkType").isJsonNull()) && !jsonObj.get("courseWorkType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseWorkType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseWorkType").toString()));
      }
      // validate the optional field `courseWorkType`
      if (jsonObj.get("courseWorkType") != null && !jsonObj.get("courseWorkType").isJsonNull()) {
        CourseWorkTypeEnum.validateJsonElement(jsonObj.get("courseWorkType"));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `multipleChoiceSubmission`
      if (jsonObj.get("multipleChoiceSubmission") != null && !jsonObj.get("multipleChoiceSubmission").isJsonNull()) {
        MultipleChoiceSubmission.validateJsonElement(jsonObj.get("multipleChoiceSubmission"));
      }
      // validate the optional field `shortAnswerSubmission`
      if (jsonObj.get("shortAnswerSubmission") != null && !jsonObj.get("shortAnswerSubmission").isJsonNull()) {
        ShortAnswerSubmission.validateJsonElement(jsonObj.get("shortAnswerSubmission"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if (jsonObj.get("submissionHistory") != null && !jsonObj.get("submissionHistory").isJsonNull()) {
        JsonArray jsonArraysubmissionHistory = jsonObj.getAsJsonArray("submissionHistory");
        if (jsonArraysubmissionHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("submissionHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `submissionHistory` to be an array in the JSON string but got `%s`", jsonObj.get("submissionHistory").toString()));
          }

          // validate the optional field `submissionHistory` (array)
          for (int i = 0; i < jsonArraysubmissionHistory.size(); i++) {
            SubmissionHistory.validateJsonElement(jsonArraysubmissionHistory.get(i));
          };
        }
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StudentSubmission.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StudentSubmission' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StudentSubmission> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StudentSubmission.class));

       return (TypeAdapter<T>) new TypeAdapter<StudentSubmission>() {
           @Override
           public void write(JsonWriter out, StudentSubmission value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StudentSubmission read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StudentSubmission given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StudentSubmission
   * @throws IOException if the JSON string is invalid with respect to StudentSubmission
   */
  public static StudentSubmission fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StudentSubmission.class);
  }

  /**
   * Convert an instance of StudentSubmission to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

