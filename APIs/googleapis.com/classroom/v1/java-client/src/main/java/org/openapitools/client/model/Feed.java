/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CourseRosterChangesInfo;
import org.openapitools.client.model.CourseWorkChangesInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A class of notifications that an application can register to receive. For example: \&quot;all roster changes for a domain\&quot;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feed {
  public static final String SERIALIZED_NAME_COURSE_ROSTER_CHANGES_INFO = "courseRosterChangesInfo";
  @SerializedName(SERIALIZED_NAME_COURSE_ROSTER_CHANGES_INFO)
  private CourseRosterChangesInfo courseRosterChangesInfo;

  public static final String SERIALIZED_NAME_COURSE_WORK_CHANGES_INFO = "courseWorkChangesInfo";
  @SerializedName(SERIALIZED_NAME_COURSE_WORK_CHANGES_INFO)
  private CourseWorkChangesInfo courseWorkChangesInfo;

  /**
   * The type of feed.
   */
  @JsonAdapter(FeedTypeEnum.Adapter.class)
  public enum FeedTypeEnum {
    FEED_TYPE_UNSPECIFIED("FEED_TYPE_UNSPECIFIED"),
    
    DOMAIN_ROSTER_CHANGES("DOMAIN_ROSTER_CHANGES"),
    
    COURSE_ROSTER_CHANGES("COURSE_ROSTER_CHANGES"),
    
    COURSE_WORK_CHANGES("COURSE_WORK_CHANGES");

    private String value;

    FeedTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FeedTypeEnum fromValue(String value) {
      for (FeedTypeEnum b : FeedTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FeedTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FeedTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FeedTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FeedTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FeedTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FEED_TYPE = "feedType";
  @SerializedName(SERIALIZED_NAME_FEED_TYPE)
  private FeedTypeEnum feedType;

  public Feed() {
  }

  public Feed courseRosterChangesInfo(CourseRosterChangesInfo courseRosterChangesInfo) {
    this.courseRosterChangesInfo = courseRosterChangesInfo;
    return this;
  }

  /**
   * Get courseRosterChangesInfo
   * @return courseRosterChangesInfo
   */
  @javax.annotation.Nullable
  public CourseRosterChangesInfo getCourseRosterChangesInfo() {
    return courseRosterChangesInfo;
  }

  public void setCourseRosterChangesInfo(CourseRosterChangesInfo courseRosterChangesInfo) {
    this.courseRosterChangesInfo = courseRosterChangesInfo;
  }


  public Feed courseWorkChangesInfo(CourseWorkChangesInfo courseWorkChangesInfo) {
    this.courseWorkChangesInfo = courseWorkChangesInfo;
    return this;
  }

  /**
   * Get courseWorkChangesInfo
   * @return courseWorkChangesInfo
   */
  @javax.annotation.Nullable
  public CourseWorkChangesInfo getCourseWorkChangesInfo() {
    return courseWorkChangesInfo;
  }

  public void setCourseWorkChangesInfo(CourseWorkChangesInfo courseWorkChangesInfo) {
    this.courseWorkChangesInfo = courseWorkChangesInfo;
  }


  public Feed feedType(FeedTypeEnum feedType) {
    this.feedType = feedType;
    return this;
  }

  /**
   * The type of feed.
   * @return feedType
   */
  @javax.annotation.Nullable
  public FeedTypeEnum getFeedType() {
    return feedType;
  }

  public void setFeedType(FeedTypeEnum feedType) {
    this.feedType = feedType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feed feed = (Feed) o;
    return Objects.equals(this.courseRosterChangesInfo, feed.courseRosterChangesInfo) &&
        Objects.equals(this.courseWorkChangesInfo, feed.courseWorkChangesInfo) &&
        Objects.equals(this.feedType, feed.feedType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(courseRosterChangesInfo, courseWorkChangesInfo, feedType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feed {\n");
    sb.append("    courseRosterChangesInfo: ").append(toIndentedString(courseRosterChangesInfo)).append("\n");
    sb.append("    courseWorkChangesInfo: ").append(toIndentedString(courseWorkChangesInfo)).append("\n");
    sb.append("    feedType: ").append(toIndentedString(feedType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("courseRosterChangesInfo");
    openapiFields.add("courseWorkChangesInfo");
    openapiFields.add("feedType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feed is not found in the empty JSON string", Feed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `courseRosterChangesInfo`
      if (jsonObj.get("courseRosterChangesInfo") != null && !jsonObj.get("courseRosterChangesInfo").isJsonNull()) {
        CourseRosterChangesInfo.validateJsonElement(jsonObj.get("courseRosterChangesInfo"));
      }
      // validate the optional field `courseWorkChangesInfo`
      if (jsonObj.get("courseWorkChangesInfo") != null && !jsonObj.get("courseWorkChangesInfo").isJsonNull()) {
        CourseWorkChangesInfo.validateJsonElement(jsonObj.get("courseWorkChangesInfo"));
      }
      if ((jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) && !jsonObj.get("feedType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `feedType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("feedType").toString()));
      }
      // validate the optional field `feedType`
      if (jsonObj.get("feedType") != null && !jsonObj.get("feedType").isJsonNull()) {
        FeedTypeEnum.validateJsonElement(jsonObj.get("feedType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feed.class));

       return (TypeAdapter<T>) new TypeAdapter<Feed>() {
           @Override
           public void write(JsonWriter out, Feed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feed
   * @throws IOException if the JSON string is invalid with respect to Feed
   */
  public static Feed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feed.class);
  }

  /**
   * Convert an instance of Feed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

