/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GradeCategory;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The gradebook settings for a course. See the [help center article](https://support.google.com/edu/classroom/answer/9184995) for details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GradebookSettings {
  /**
   * Indicates how the overall grade is calculated.
   */
  @JsonAdapter(CalculationTypeEnum.Adapter.class)
  public enum CalculationTypeEnum {
    CALCULATION_TYPE_UNSPECIFIED("CALCULATION_TYPE_UNSPECIFIED"),
    
    TOTAL_POINTS("TOTAL_POINTS"),
    
    WEIGHTED_CATEGORIES("WEIGHTED_CATEGORIES");

    private String value;

    CalculationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CalculationTypeEnum fromValue(String value) {
      for (CalculationTypeEnum b : CalculationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CalculationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CalculationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CalculationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CalculationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CalculationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CALCULATION_TYPE = "calculationType";
  @SerializedName(SERIALIZED_NAME_CALCULATION_TYPE)
  private CalculationTypeEnum calculationType;

  /**
   * Indicates who can see the overall grade..
   */
  @JsonAdapter(DisplaySettingEnum.Adapter.class)
  public enum DisplaySettingEnum {
    DISPLAY_SETTING_UNSPECIFIED("DISPLAY_SETTING_UNSPECIFIED"),
    
    SHOW_OVERALL_GRADE("SHOW_OVERALL_GRADE"),
    
    HIDE_OVERALL_GRADE("HIDE_OVERALL_GRADE"),
    
    SHOW_TEACHERS_ONLY("SHOW_TEACHERS_ONLY");

    private String value;

    DisplaySettingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DisplaySettingEnum fromValue(String value) {
      for (DisplaySettingEnum b : DisplaySettingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DisplaySettingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DisplaySettingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DisplaySettingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DisplaySettingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DisplaySettingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DISPLAY_SETTING = "displaySetting";
  @SerializedName(SERIALIZED_NAME_DISPLAY_SETTING)
  private DisplaySettingEnum displaySetting;

  public static final String SERIALIZED_NAME_GRADE_CATEGORIES = "gradeCategories";
  @SerializedName(SERIALIZED_NAME_GRADE_CATEGORIES)
  private List<GradeCategory> gradeCategories = new ArrayList<>();

  public GradebookSettings() {
  }

  public GradebookSettings calculationType(CalculationTypeEnum calculationType) {
    this.calculationType = calculationType;
    return this;
  }

  /**
   * Indicates how the overall grade is calculated.
   * @return calculationType
   */
  @javax.annotation.Nullable
  public CalculationTypeEnum getCalculationType() {
    return calculationType;
  }

  public void setCalculationType(CalculationTypeEnum calculationType) {
    this.calculationType = calculationType;
  }


  public GradebookSettings displaySetting(DisplaySettingEnum displaySetting) {
    this.displaySetting = displaySetting;
    return this;
  }

  /**
   * Indicates who can see the overall grade..
   * @return displaySetting
   */
  @javax.annotation.Nullable
  public DisplaySettingEnum getDisplaySetting() {
    return displaySetting;
  }

  public void setDisplaySetting(DisplaySettingEnum displaySetting) {
    this.displaySetting = displaySetting;
  }


  public GradebookSettings gradeCategories(List<GradeCategory> gradeCategories) {
    this.gradeCategories = gradeCategories;
    return this;
  }

  public GradebookSettings addGradeCategoriesItem(GradeCategory gradeCategoriesItem) {
    if (this.gradeCategories == null) {
      this.gradeCategories = new ArrayList<>();
    }
    this.gradeCategories.add(gradeCategoriesItem);
    return this;
  }

  /**
   * Grade categories that are available for coursework in the course.
   * @return gradeCategories
   */
  @javax.annotation.Nullable
  public List<GradeCategory> getGradeCategories() {
    return gradeCategories;
  }

  public void setGradeCategories(List<GradeCategory> gradeCategories) {
    this.gradeCategories = gradeCategories;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GradebookSettings gradebookSettings = (GradebookSettings) o;
    return Objects.equals(this.calculationType, gradebookSettings.calculationType) &&
        Objects.equals(this.displaySetting, gradebookSettings.displaySetting) &&
        Objects.equals(this.gradeCategories, gradebookSettings.gradeCategories);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calculationType, displaySetting, gradeCategories);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GradebookSettings {\n");
    sb.append("    calculationType: ").append(toIndentedString(calculationType)).append("\n");
    sb.append("    displaySetting: ").append(toIndentedString(displaySetting)).append("\n");
    sb.append("    gradeCategories: ").append(toIndentedString(gradeCategories)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calculationType");
    openapiFields.add("displaySetting");
    openapiFields.add("gradeCategories");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GradebookSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GradebookSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GradebookSettings is not found in the empty JSON string", GradebookSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GradebookSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GradebookSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("calculationType") != null && !jsonObj.get("calculationType").isJsonNull()) && !jsonObj.get("calculationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `calculationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("calculationType").toString()));
      }
      // validate the optional field `calculationType`
      if (jsonObj.get("calculationType") != null && !jsonObj.get("calculationType").isJsonNull()) {
        CalculationTypeEnum.validateJsonElement(jsonObj.get("calculationType"));
      }
      if ((jsonObj.get("displaySetting") != null && !jsonObj.get("displaySetting").isJsonNull()) && !jsonObj.get("displaySetting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displaySetting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displaySetting").toString()));
      }
      // validate the optional field `displaySetting`
      if (jsonObj.get("displaySetting") != null && !jsonObj.get("displaySetting").isJsonNull()) {
        DisplaySettingEnum.validateJsonElement(jsonObj.get("displaySetting"));
      }
      if (jsonObj.get("gradeCategories") != null && !jsonObj.get("gradeCategories").isJsonNull()) {
        JsonArray jsonArraygradeCategories = jsonObj.getAsJsonArray("gradeCategories");
        if (jsonArraygradeCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("gradeCategories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `gradeCategories` to be an array in the JSON string but got `%s`", jsonObj.get("gradeCategories").toString()));
          }

          // validate the optional field `gradeCategories` (array)
          for (int i = 0; i < jsonArraygradeCategories.size(); i++) {
            GradeCategory.validateJsonElement(jsonArraygradeCategories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GradebookSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GradebookSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GradebookSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GradebookSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<GradebookSettings>() {
           @Override
           public void write(JsonWriter out, GradebookSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GradebookSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GradebookSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GradebookSettings
   * @throws IOException if the JSON string is invalid with respect to GradebookSettings
   */
  public static GradebookSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GradebookSettings.class);
  }

  /**
   * Convert an instance of GradebookSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

