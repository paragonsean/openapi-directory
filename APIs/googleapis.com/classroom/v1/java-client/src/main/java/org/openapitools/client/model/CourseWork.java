/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import org.openapitools.client.model.Assignment;
import org.openapitools.client.model.GradeCategory;
import org.openapitools.client.model.IndividualStudentsOptions;
import org.openapitools.client.model.Material;
import org.openapitools.client.model.MultipleChoiceQuestion;
import org.openapitools.client.model.TimeOfDay;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Course work created by a teacher for students of the course.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CourseWork {
  public static final String SERIALIZED_NAME_ALTERNATE_LINK = "alternateLink";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_LINK)
  private String alternateLink;

  /**
   * Assignee mode of the coursework. If unspecified, the default value is &#x60;ALL_STUDENTS&#x60;.
   */
  @JsonAdapter(AssigneeModeEnum.Adapter.class)
  public enum AssigneeModeEnum {
    ASSIGNEE_MODE_UNSPECIFIED("ASSIGNEE_MODE_UNSPECIFIED"),
    
    ALL_STUDENTS("ALL_STUDENTS"),
    
    INDIVIDUAL_STUDENTS("INDIVIDUAL_STUDENTS");

    private String value;

    AssigneeModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AssigneeModeEnum fromValue(String value) {
      for (AssigneeModeEnum b : AssigneeModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AssigneeModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AssigneeModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AssigneeModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AssigneeModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AssigneeModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASSIGNEE_MODE = "assigneeMode";
  @SerializedName(SERIALIZED_NAME_ASSIGNEE_MODE)
  private AssigneeModeEnum assigneeMode;

  public static final String SERIALIZED_NAME_ASSIGNMENT = "assignment";
  @SerializedName(SERIALIZED_NAME_ASSIGNMENT)
  private Assignment assignment;

  public static final String SERIALIZED_NAME_ASSOCIATED_WITH_DEVELOPER = "associatedWithDeveloper";
  @SerializedName(SERIALIZED_NAME_ASSOCIATED_WITH_DEVELOPER)
  private Boolean associatedWithDeveloper;

  public static final String SERIALIZED_NAME_COURSE_ID = "courseId";
  @SerializedName(SERIALIZED_NAME_COURSE_ID)
  private String courseId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_CREATOR_USER_ID = "creatorUserId";
  @SerializedName(SERIALIZED_NAME_CREATOR_USER_ID)
  private String creatorUserId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DUE_DATE = "dueDate";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private Date dueDate;

  public static final String SERIALIZED_NAME_DUE_TIME = "dueTime";
  @SerializedName(SERIALIZED_NAME_DUE_TIME)
  private TimeOfDay dueTime;

  public static final String SERIALIZED_NAME_GRADE_CATEGORY = "gradeCategory";
  @SerializedName(SERIALIZED_NAME_GRADE_CATEGORY)
  private GradeCategory gradeCategory;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INDIVIDUAL_STUDENTS_OPTIONS = "individualStudentsOptions";
  @SerializedName(SERIALIZED_NAME_INDIVIDUAL_STUDENTS_OPTIONS)
  private IndividualStudentsOptions individualStudentsOptions;

  public static final String SERIALIZED_NAME_MATERIALS = "materials";
  @SerializedName(SERIALIZED_NAME_MATERIALS)
  private List<Material> materials = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_POINTS = "maxPoints";
  @SerializedName(SERIALIZED_NAME_MAX_POINTS)
  private Double maxPoints;

  public static final String SERIALIZED_NAME_MULTIPLE_CHOICE_QUESTION = "multipleChoiceQuestion";
  @SerializedName(SERIALIZED_NAME_MULTIPLE_CHOICE_QUESTION)
  private MultipleChoiceQuestion multipleChoiceQuestion;

  public static final String SERIALIZED_NAME_SCHEDULED_TIME = "scheduledTime";
  @SerializedName(SERIALIZED_NAME_SCHEDULED_TIME)
  private String scheduledTime;

  /**
   * Status of this course work. If unspecified, the default state is &#x60;DRAFT&#x60;.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    COURSE_WORK_STATE_UNSPECIFIED("COURSE_WORK_STATE_UNSPECIFIED"),
    
    PUBLISHED("PUBLISHED"),
    
    DRAFT("DRAFT"),
    
    DELETED("DELETED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Setting to determine when students are allowed to modify submissions. If unspecified, the default value is &#x60;MODIFIABLE_UNTIL_TURNED_IN&#x60;.
   */
  @JsonAdapter(SubmissionModificationModeEnum.Adapter.class)
  public enum SubmissionModificationModeEnum {
    SUBMISSION_MODIFICATION_MODE_UNSPECIFIED("SUBMISSION_MODIFICATION_MODE_UNSPECIFIED"),
    
    MODIFIABLE_UNTIL_TURNED_IN("MODIFIABLE_UNTIL_TURNED_IN"),
    
    MODIFIABLE("MODIFIABLE");

    private String value;

    SubmissionModificationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubmissionModificationModeEnum fromValue(String value) {
      for (SubmissionModificationModeEnum b : SubmissionModificationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubmissionModificationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubmissionModificationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubmissionModificationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubmissionModificationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SubmissionModificationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBMISSION_MODIFICATION_MODE = "submissionModificationMode";
  @SerializedName(SERIALIZED_NAME_SUBMISSION_MODIFICATION_MODE)
  private SubmissionModificationModeEnum submissionModificationMode;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TOPIC_ID = "topicId";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private String topicId;

  public static final String SERIALIZED_NAME_UPDATE_TIME = "updateTime";
  @SerializedName(SERIALIZED_NAME_UPDATE_TIME)
  private String updateTime;

  /**
   * Type of this course work. The type is set when the course work is created and cannot be changed.
   */
  @JsonAdapter(WorkTypeEnum.Adapter.class)
  public enum WorkTypeEnum {
    COURSE_WORK_TYPE_UNSPECIFIED("COURSE_WORK_TYPE_UNSPECIFIED"),
    
    ASSIGNMENT("ASSIGNMENT"),
    
    SHORT_ANSWER_QUESTION("SHORT_ANSWER_QUESTION"),
    
    MULTIPLE_CHOICE_QUESTION("MULTIPLE_CHOICE_QUESTION");

    private String value;

    WorkTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WorkTypeEnum fromValue(String value) {
      for (WorkTypeEnum b : WorkTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WorkTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WorkTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WorkTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WorkTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WorkTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WORK_TYPE = "workType";
  @SerializedName(SERIALIZED_NAME_WORK_TYPE)
  private WorkTypeEnum workType;

  public CourseWork() {
  }

  public CourseWork alternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
    return this;
  }

  /**
   * Absolute link to this course work in the Classroom web UI. This is only populated if &#x60;state&#x60; is &#x60;PUBLISHED&#x60;. Read-only.
   * @return alternateLink
   */
  @javax.annotation.Nullable
  public String getAlternateLink() {
    return alternateLink;
  }

  public void setAlternateLink(String alternateLink) {
    this.alternateLink = alternateLink;
  }


  public CourseWork assigneeMode(AssigneeModeEnum assigneeMode) {
    this.assigneeMode = assigneeMode;
    return this;
  }

  /**
   * Assignee mode of the coursework. If unspecified, the default value is &#x60;ALL_STUDENTS&#x60;.
   * @return assigneeMode
   */
  @javax.annotation.Nullable
  public AssigneeModeEnum getAssigneeMode() {
    return assigneeMode;
  }

  public void setAssigneeMode(AssigneeModeEnum assigneeMode) {
    this.assigneeMode = assigneeMode;
  }


  public CourseWork assignment(Assignment assignment) {
    this.assignment = assignment;
    return this;
  }

  /**
   * Get assignment
   * @return assignment
   */
  @javax.annotation.Nullable
  public Assignment getAssignment() {
    return assignment;
  }

  public void setAssignment(Assignment assignment) {
    this.assignment = assignment;
  }


  public CourseWork associatedWithDeveloper(Boolean associatedWithDeveloper) {
    this.associatedWithDeveloper = associatedWithDeveloper;
    return this;
  }

  /**
   * Whether this course work item is associated with the Developer Console project making the request. See CreateCourseWork for more details. Read-only.
   * @return associatedWithDeveloper
   */
  @javax.annotation.Nullable
  public Boolean getAssociatedWithDeveloper() {
    return associatedWithDeveloper;
  }

  public void setAssociatedWithDeveloper(Boolean associatedWithDeveloper) {
    this.associatedWithDeveloper = associatedWithDeveloper;
  }


  public CourseWork courseId(String courseId) {
    this.courseId = courseId;
    return this;
  }

  /**
   * Identifier of the course. Read-only.
   * @return courseId
   */
  @javax.annotation.Nullable
  public String getCourseId() {
    return courseId;
  }

  public void setCourseId(String courseId) {
    this.courseId = courseId;
  }


  public CourseWork creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Timestamp when this course work was created. Read-only.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public CourseWork creatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
    return this;
  }

  /**
   * Identifier for the user that created the coursework. Read-only.
   * @return creatorUserId
   */
  @javax.annotation.Nullable
  public String getCreatorUserId() {
    return creatorUserId;
  }

  public void setCreatorUserId(String creatorUserId) {
    this.creatorUserId = creatorUserId;
  }


  public CourseWork description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Optional description of this course work. If set, the description must be a valid UTF-8 string containing no more than 30,000 characters.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public CourseWork dueDate(Date dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * Get dueDate
   * @return dueDate
   */
  @javax.annotation.Nullable
  public Date getDueDate() {
    return dueDate;
  }

  public void setDueDate(Date dueDate) {
    this.dueDate = dueDate;
  }


  public CourseWork dueTime(TimeOfDay dueTime) {
    this.dueTime = dueTime;
    return this;
  }

  /**
   * Get dueTime
   * @return dueTime
   */
  @javax.annotation.Nullable
  public TimeOfDay getDueTime() {
    return dueTime;
  }

  public void setDueTime(TimeOfDay dueTime) {
    this.dueTime = dueTime;
  }


  public CourseWork gradeCategory(GradeCategory gradeCategory) {
    this.gradeCategory = gradeCategory;
    return this;
  }

  /**
   * Get gradeCategory
   * @return gradeCategory
   */
  @javax.annotation.Nullable
  public GradeCategory getGradeCategory() {
    return gradeCategory;
  }

  public void setGradeCategory(GradeCategory gradeCategory) {
    this.gradeCategory = gradeCategory;
  }


  public CourseWork id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Classroom-assigned identifier of this course work, unique per course. Read-only.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public CourseWork individualStudentsOptions(IndividualStudentsOptions individualStudentsOptions) {
    this.individualStudentsOptions = individualStudentsOptions;
    return this;
  }

  /**
   * Get individualStudentsOptions
   * @return individualStudentsOptions
   */
  @javax.annotation.Nullable
  public IndividualStudentsOptions getIndividualStudentsOptions() {
    return individualStudentsOptions;
  }

  public void setIndividualStudentsOptions(IndividualStudentsOptions individualStudentsOptions) {
    this.individualStudentsOptions = individualStudentsOptions;
  }


  public CourseWork materials(List<Material> materials) {
    this.materials = materials;
    return this;
  }

  public CourseWork addMaterialsItem(Material materialsItem) {
    if (this.materials == null) {
      this.materials = new ArrayList<>();
    }
    this.materials.add(materialsItem);
    return this;
  }

  /**
   * Additional materials. CourseWork must have no more than 20 material items.
   * @return materials
   */
  @javax.annotation.Nullable
  public List<Material> getMaterials() {
    return materials;
  }

  public void setMaterials(List<Material> materials) {
    this.materials = materials;
  }


  public CourseWork maxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
    return this;
  }

  /**
   * Maximum grade for this course work. If zero or unspecified, this assignment is considered ungraded. This must be a non-negative integer value.
   * @return maxPoints
   */
  @javax.annotation.Nullable
  public Double getMaxPoints() {
    return maxPoints;
  }

  public void setMaxPoints(Double maxPoints) {
    this.maxPoints = maxPoints;
  }


  public CourseWork multipleChoiceQuestion(MultipleChoiceQuestion multipleChoiceQuestion) {
    this.multipleChoiceQuestion = multipleChoiceQuestion;
    return this;
  }

  /**
   * Get multipleChoiceQuestion
   * @return multipleChoiceQuestion
   */
  @javax.annotation.Nullable
  public MultipleChoiceQuestion getMultipleChoiceQuestion() {
    return multipleChoiceQuestion;
  }

  public void setMultipleChoiceQuestion(MultipleChoiceQuestion multipleChoiceQuestion) {
    this.multipleChoiceQuestion = multipleChoiceQuestion;
  }


  public CourseWork scheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
    return this;
  }

  /**
   * Optional timestamp when this course work is scheduled to be published.
   * @return scheduledTime
   */
  @javax.annotation.Nullable
  public String getScheduledTime() {
    return scheduledTime;
  }

  public void setScheduledTime(String scheduledTime) {
    this.scheduledTime = scheduledTime;
  }


  public CourseWork state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Status of this course work. If unspecified, the default state is &#x60;DRAFT&#x60;.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public CourseWork submissionModificationMode(SubmissionModificationModeEnum submissionModificationMode) {
    this.submissionModificationMode = submissionModificationMode;
    return this;
  }

  /**
   * Setting to determine when students are allowed to modify submissions. If unspecified, the default value is &#x60;MODIFIABLE_UNTIL_TURNED_IN&#x60;.
   * @return submissionModificationMode
   */
  @javax.annotation.Nullable
  public SubmissionModificationModeEnum getSubmissionModificationMode() {
    return submissionModificationMode;
  }

  public void setSubmissionModificationMode(SubmissionModificationModeEnum submissionModificationMode) {
    this.submissionModificationMode = submissionModificationMode;
  }


  public CourseWork title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of this course work. The title must be a valid UTF-8 string containing between 1 and 3000 characters.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public CourseWork topicId(String topicId) {
    this.topicId = topicId;
    return this;
  }

  /**
   * Identifier for the topic that this coursework is associated with. Must match an existing topic in the course.
   * @return topicId
   */
  @javax.annotation.Nullable
  public String getTopicId() {
    return topicId;
  }

  public void setTopicId(String topicId) {
    this.topicId = topicId;
  }


  public CourseWork updateTime(String updateTime) {
    this.updateTime = updateTime;
    return this;
  }

  /**
   * Timestamp of the most recent change to this course work. Read-only.
   * @return updateTime
   */
  @javax.annotation.Nullable
  public String getUpdateTime() {
    return updateTime;
  }

  public void setUpdateTime(String updateTime) {
    this.updateTime = updateTime;
  }


  public CourseWork workType(WorkTypeEnum workType) {
    this.workType = workType;
    return this;
  }

  /**
   * Type of this course work. The type is set when the course work is created and cannot be changed.
   * @return workType
   */
  @javax.annotation.Nullable
  public WorkTypeEnum getWorkType() {
    return workType;
  }

  public void setWorkType(WorkTypeEnum workType) {
    this.workType = workType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CourseWork courseWork = (CourseWork) o;
    return Objects.equals(this.alternateLink, courseWork.alternateLink) &&
        Objects.equals(this.assigneeMode, courseWork.assigneeMode) &&
        Objects.equals(this.assignment, courseWork.assignment) &&
        Objects.equals(this.associatedWithDeveloper, courseWork.associatedWithDeveloper) &&
        Objects.equals(this.courseId, courseWork.courseId) &&
        Objects.equals(this.creationTime, courseWork.creationTime) &&
        Objects.equals(this.creatorUserId, courseWork.creatorUserId) &&
        Objects.equals(this.description, courseWork.description) &&
        Objects.equals(this.dueDate, courseWork.dueDate) &&
        Objects.equals(this.dueTime, courseWork.dueTime) &&
        Objects.equals(this.gradeCategory, courseWork.gradeCategory) &&
        Objects.equals(this.id, courseWork.id) &&
        Objects.equals(this.individualStudentsOptions, courseWork.individualStudentsOptions) &&
        Objects.equals(this.materials, courseWork.materials) &&
        Objects.equals(this.maxPoints, courseWork.maxPoints) &&
        Objects.equals(this.multipleChoiceQuestion, courseWork.multipleChoiceQuestion) &&
        Objects.equals(this.scheduledTime, courseWork.scheduledTime) &&
        Objects.equals(this.state, courseWork.state) &&
        Objects.equals(this.submissionModificationMode, courseWork.submissionModificationMode) &&
        Objects.equals(this.title, courseWork.title) &&
        Objects.equals(this.topicId, courseWork.topicId) &&
        Objects.equals(this.updateTime, courseWork.updateTime) &&
        Objects.equals(this.workType, courseWork.workType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateLink, assigneeMode, assignment, associatedWithDeveloper, courseId, creationTime, creatorUserId, description, dueDate, dueTime, gradeCategory, id, individualStudentsOptions, materials, maxPoints, multipleChoiceQuestion, scheduledTime, state, submissionModificationMode, title, topicId, updateTime, workType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CourseWork {\n");
    sb.append("    alternateLink: ").append(toIndentedString(alternateLink)).append("\n");
    sb.append("    assigneeMode: ").append(toIndentedString(assigneeMode)).append("\n");
    sb.append("    assignment: ").append(toIndentedString(assignment)).append("\n");
    sb.append("    associatedWithDeveloper: ").append(toIndentedString(associatedWithDeveloper)).append("\n");
    sb.append("    courseId: ").append(toIndentedString(courseId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorUserId: ").append(toIndentedString(creatorUserId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    dueTime: ").append(toIndentedString(dueTime)).append("\n");
    sb.append("    gradeCategory: ").append(toIndentedString(gradeCategory)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    individualStudentsOptions: ").append(toIndentedString(individualStudentsOptions)).append("\n");
    sb.append("    materials: ").append(toIndentedString(materials)).append("\n");
    sb.append("    maxPoints: ").append(toIndentedString(maxPoints)).append("\n");
    sb.append("    multipleChoiceQuestion: ").append(toIndentedString(multipleChoiceQuestion)).append("\n");
    sb.append("    scheduledTime: ").append(toIndentedString(scheduledTime)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    submissionModificationMode: ").append(toIndentedString(submissionModificationMode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("    updateTime: ").append(toIndentedString(updateTime)).append("\n");
    sb.append("    workType: ").append(toIndentedString(workType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateLink");
    openapiFields.add("assigneeMode");
    openapiFields.add("assignment");
    openapiFields.add("associatedWithDeveloper");
    openapiFields.add("courseId");
    openapiFields.add("creationTime");
    openapiFields.add("creatorUserId");
    openapiFields.add("description");
    openapiFields.add("dueDate");
    openapiFields.add("dueTime");
    openapiFields.add("gradeCategory");
    openapiFields.add("id");
    openapiFields.add("individualStudentsOptions");
    openapiFields.add("materials");
    openapiFields.add("maxPoints");
    openapiFields.add("multipleChoiceQuestion");
    openapiFields.add("scheduledTime");
    openapiFields.add("state");
    openapiFields.add("submissionModificationMode");
    openapiFields.add("title");
    openapiFields.add("topicId");
    openapiFields.add("updateTime");
    openapiFields.add("workType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CourseWork
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CourseWork.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CourseWork is not found in the empty JSON string", CourseWork.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CourseWork.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CourseWork` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateLink") != null && !jsonObj.get("alternateLink").isJsonNull()) && !jsonObj.get("alternateLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateLink").toString()));
      }
      if ((jsonObj.get("assigneeMode") != null && !jsonObj.get("assigneeMode").isJsonNull()) && !jsonObj.get("assigneeMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assigneeMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assigneeMode").toString()));
      }
      // validate the optional field `assigneeMode`
      if (jsonObj.get("assigneeMode") != null && !jsonObj.get("assigneeMode").isJsonNull()) {
        AssigneeModeEnum.validateJsonElement(jsonObj.get("assigneeMode"));
      }
      // validate the optional field `assignment`
      if (jsonObj.get("assignment") != null && !jsonObj.get("assignment").isJsonNull()) {
        Assignment.validateJsonElement(jsonObj.get("assignment"));
      }
      if ((jsonObj.get("courseId") != null && !jsonObj.get("courseId").isJsonNull()) && !jsonObj.get("courseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `courseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("courseId").toString()));
      }
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("creatorUserId") != null && !jsonObj.get("creatorUserId").isJsonNull()) && !jsonObj.get("creatorUserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorUserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorUserId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `dueDate`
      if (jsonObj.get("dueDate") != null && !jsonObj.get("dueDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("dueDate"));
      }
      // validate the optional field `dueTime`
      if (jsonObj.get("dueTime") != null && !jsonObj.get("dueTime").isJsonNull()) {
        TimeOfDay.validateJsonElement(jsonObj.get("dueTime"));
      }
      // validate the optional field `gradeCategory`
      if (jsonObj.get("gradeCategory") != null && !jsonObj.get("gradeCategory").isJsonNull()) {
        GradeCategory.validateJsonElement(jsonObj.get("gradeCategory"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `individualStudentsOptions`
      if (jsonObj.get("individualStudentsOptions") != null && !jsonObj.get("individualStudentsOptions").isJsonNull()) {
        IndividualStudentsOptions.validateJsonElement(jsonObj.get("individualStudentsOptions"));
      }
      if (jsonObj.get("materials") != null && !jsonObj.get("materials").isJsonNull()) {
        JsonArray jsonArraymaterials = jsonObj.getAsJsonArray("materials");
        if (jsonArraymaterials != null) {
          // ensure the json data is an array
          if (!jsonObj.get("materials").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `materials` to be an array in the JSON string but got `%s`", jsonObj.get("materials").toString()));
          }

          // validate the optional field `materials` (array)
          for (int i = 0; i < jsonArraymaterials.size(); i++) {
            Material.validateJsonElement(jsonArraymaterials.get(i));
          };
        }
      }
      // validate the optional field `multipleChoiceQuestion`
      if (jsonObj.get("multipleChoiceQuestion") != null && !jsonObj.get("multipleChoiceQuestion").isJsonNull()) {
        MultipleChoiceQuestion.validateJsonElement(jsonObj.get("multipleChoiceQuestion"));
      }
      if ((jsonObj.get("scheduledTime") != null && !jsonObj.get("scheduledTime").isJsonNull()) && !jsonObj.get("scheduledTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheduledTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheduledTime").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("submissionModificationMode") != null && !jsonObj.get("submissionModificationMode").isJsonNull()) && !jsonObj.get("submissionModificationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `submissionModificationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("submissionModificationMode").toString()));
      }
      // validate the optional field `submissionModificationMode`
      if (jsonObj.get("submissionModificationMode") != null && !jsonObj.get("submissionModificationMode").isJsonNull()) {
        SubmissionModificationModeEnum.validateJsonElement(jsonObj.get("submissionModificationMode"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("topicId") != null && !jsonObj.get("topicId").isJsonNull()) && !jsonObj.get("topicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topicId").toString()));
      }
      if ((jsonObj.get("updateTime") != null && !jsonObj.get("updateTime").isJsonNull()) && !jsonObj.get("updateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updateTime").toString()));
      }
      if ((jsonObj.get("workType") != null && !jsonObj.get("workType").isJsonNull()) && !jsonObj.get("workType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workType").toString()));
      }
      // validate the optional field `workType`
      if (jsonObj.get("workType") != null && !jsonObj.get("workType").isJsonNull()) {
        WorkTypeEnum.validateJsonElement(jsonObj.get("workType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CourseWork.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CourseWork' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CourseWork> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CourseWork.class));

       return (TypeAdapter<T>) new TypeAdapter<CourseWork>() {
           @Override
           public void write(JsonWriter out, CourseWork value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CourseWork read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CourseWork given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CourseWork
   * @throws IOException if the JSON string is invalid with respect to CourseWork
   */
  public static CourseWork fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CourseWork.class);
  }

  /**
   * Convert an instance of CourseWork to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

