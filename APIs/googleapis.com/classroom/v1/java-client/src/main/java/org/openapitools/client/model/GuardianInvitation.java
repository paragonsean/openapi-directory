/*
 * Google Classroom API
 * Manages classes, rosters, and invitations in Google Classroom.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An invitation to become the guardian of a specified user, sent to a specified email address.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:49:27.258120-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuardianInvitation {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private String creationTime;

  public static final String SERIALIZED_NAME_INVITATION_ID = "invitationId";
  @SerializedName(SERIALIZED_NAME_INVITATION_ID)
  private String invitationId;

  public static final String SERIALIZED_NAME_INVITED_EMAIL_ADDRESS = "invitedEmailAddress";
  @SerializedName(SERIALIZED_NAME_INVITED_EMAIL_ADDRESS)
  private String invitedEmailAddress;

  /**
   * The state that this invitation is in.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    GUARDIAN_INVITATION_STATE_UNSPECIFIED("GUARDIAN_INVITATION_STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    COMPLETE("COMPLETE");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STUDENT_ID = "studentId";
  @SerializedName(SERIALIZED_NAME_STUDENT_ID)
  private String studentId;

  public GuardianInvitation() {
  }

  public GuardianInvitation creationTime(String creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time that this invitation was created. Read-only.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public String getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(String creationTime) {
    this.creationTime = creationTime;
  }


  public GuardianInvitation invitationId(String invitationId) {
    this.invitationId = invitationId;
    return this;
  }

  /**
   * Unique identifier for this invitation. Read-only.
   * @return invitationId
   */
  @javax.annotation.Nullable
  public String getInvitationId() {
    return invitationId;
  }

  public void setInvitationId(String invitationId) {
    this.invitationId = invitationId;
  }


  public GuardianInvitation invitedEmailAddress(String invitedEmailAddress) {
    this.invitedEmailAddress = invitedEmailAddress;
    return this;
  }

  /**
   * Email address that the invitation was sent to. This field is only visible to domain administrators.
   * @return invitedEmailAddress
   */
  @javax.annotation.Nullable
  public String getInvitedEmailAddress() {
    return invitedEmailAddress;
  }

  public void setInvitedEmailAddress(String invitedEmailAddress) {
    this.invitedEmailAddress = invitedEmailAddress;
  }


  public GuardianInvitation state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * The state that this invitation is in.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public GuardianInvitation studentId(String studentId) {
    this.studentId = studentId;
    return this;
  }

  /**
   * ID of the student (in standard format)
   * @return studentId
   */
  @javax.annotation.Nullable
  public String getStudentId() {
    return studentId;
  }

  public void setStudentId(String studentId) {
    this.studentId = studentId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuardianInvitation guardianInvitation = (GuardianInvitation) o;
    return Objects.equals(this.creationTime, guardianInvitation.creationTime) &&
        Objects.equals(this.invitationId, guardianInvitation.invitationId) &&
        Objects.equals(this.invitedEmailAddress, guardianInvitation.invitedEmailAddress) &&
        Objects.equals(this.state, guardianInvitation.state) &&
        Objects.equals(this.studentId, guardianInvitation.studentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, invitationId, invitedEmailAddress, state, studentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuardianInvitation {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    invitationId: ").append(toIndentedString(invitationId)).append("\n");
    sb.append("    invitedEmailAddress: ").append(toIndentedString(invitedEmailAddress)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    studentId: ").append(toIndentedString(studentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("invitationId");
    openapiFields.add("invitedEmailAddress");
    openapiFields.add("state");
    openapiFields.add("studentId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuardianInvitation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuardianInvitation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuardianInvitation is not found in the empty JSON string", GuardianInvitation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuardianInvitation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuardianInvitation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creationTime") != null && !jsonObj.get("creationTime").isJsonNull()) && !jsonObj.get("creationTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creationTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creationTime").toString()));
      }
      if ((jsonObj.get("invitationId") != null && !jsonObj.get("invitationId").isJsonNull()) && !jsonObj.get("invitationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationId").toString()));
      }
      if ((jsonObj.get("invitedEmailAddress") != null && !jsonObj.get("invitedEmailAddress").isJsonNull()) && !jsonObj.get("invitedEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitedEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitedEmailAddress").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("studentId") != null && !jsonObj.get("studentId").isJsonNull()) && !jsonObj.get("studentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `studentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("studentId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuardianInvitation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuardianInvitation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuardianInvitation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuardianInvitation.class));

       return (TypeAdapter<T>) new TypeAdapter<GuardianInvitation>() {
           @Override
           public void write(JsonWriter out, GuardianInvitation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuardianInvitation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuardianInvitation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuardianInvitation
   * @throws IOException if the JSON string is invalid with respect to GuardianInvitation
   */
  public static GuardianInvitation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuardianInvitation.class);
  }

  /**
   * Convert an instance of GuardianInvitation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

