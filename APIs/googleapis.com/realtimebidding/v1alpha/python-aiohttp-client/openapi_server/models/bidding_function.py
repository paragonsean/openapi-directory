# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BiddingFunction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bidding_function: str=None, name: str=None, state: str=None, type: str=None):
        """BiddingFunction - a model defined in OpenAPI

        :param bidding_function: The bidding_function of this BiddingFunction.
        :param name: The name of this BiddingFunction.
        :param state: The state of this BiddingFunction.
        :param type: The type of this BiddingFunction.
        """
        self.openapi_types = {
            'bidding_function': str,
            'name': str,
            'state': str,
            'type': str
        }

        self.attribute_map = {
            'bidding_function': 'biddingFunction',
            'name': 'name',
            'state': 'state',
            'type': 'type'
        }

        self._bidding_function = bidding_function
        self._name = name
        self._state = state
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BiddingFunction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BiddingFunction of this BiddingFunction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bidding_function(self):
        """Gets the bidding_function of this BiddingFunction.

        The raw Javascript source code of the bidding function.

        :return: The bidding_function of this BiddingFunction.
        :rtype: str
        """
        return self._bidding_function

    @bidding_function.setter
    def bidding_function(self, bidding_function):
        """Sets the bidding_function of this BiddingFunction.

        The raw Javascript source code of the bidding function.

        :param bidding_function: The bidding_function of this BiddingFunction.
        :type bidding_function: str
        """

        self._bidding_function = bidding_function

    @property
    def name(self):
        """Gets the name of this BiddingFunction.

        The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.

        :return: The name of this BiddingFunction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BiddingFunction.

        The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.

        :param name: The name of this BiddingFunction.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this BiddingFunction.

        Output only. The state of the bidding function.

        :return: The state of this BiddingFunction.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BiddingFunction.

        Output only. The state of the bidding function.

        :param state: The state of this BiddingFunction.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "ARCHIVED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def type(self):
        """Gets the type of this BiddingFunction.

        The type of the bidding function to be created.

        :return: The type of this BiddingFunction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BiddingFunction.

        The type of the bidding function to be created.

        :param type: The type of this BiddingFunction.
        :type type: str
        """
        allowed_values = ["FUNCTION_TYPE_UNSPECIFIED", "TURTLEDOVE_SIMULATION_BIDDING_FUNCTION", "FLEDGE_BIDDING_FUNCTION"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
