/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1alpha
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BiddingFunction model module.
 * @module model/BiddingFunction
 * @version v1alpha
 */
class BiddingFunction {
    /**
     * Constructs a new <code>BiddingFunction</code>.
     * The bidding function to be executed as part of the TURTLEDOVE simulation experiment bidding flow.
     * @alias module:model/BiddingFunction
     */
    constructor() { 
        
        BiddingFunction.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BiddingFunction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BiddingFunction} obj Optional instance to populate.
     * @return {module:model/BiddingFunction} The populated <code>BiddingFunction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BiddingFunction();

            if (data.hasOwnProperty('biddingFunction')) {
                obj['biddingFunction'] = ApiClient.convertToType(data['biddingFunction'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BiddingFunction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BiddingFunction</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['biddingFunction'] && !(typeof data['biddingFunction'] === 'string' || data['biddingFunction'] instanceof String)) {
            throw new Error("Expected the field `biddingFunction` to be a primitive type in the JSON string but got " + data['biddingFunction']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The raw Javascript source code of the bidding function.
 * @member {String} biddingFunction
 */
BiddingFunction.prototype['biddingFunction'] = undefined;

/**
 * The name of the bidding function that must follow the pattern: `bidders/{bidder_account_id}/biddingFunctions/{bidding_function_name}`.
 * @member {String} name
 */
BiddingFunction.prototype['name'] = undefined;

/**
 * Output only. The state of the bidding function.
 * @member {module:model/BiddingFunction.StateEnum} state
 */
BiddingFunction.prototype['state'] = undefined;

/**
 * The type of the bidding function to be created.
 * @member {module:model/BiddingFunction.TypeEnum} type
 */
BiddingFunction.prototype['type'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
BiddingFunction['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "ARCHIVED"
     * @const
     */
    "ARCHIVED": "ARCHIVED"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
BiddingFunction['TypeEnum'] = {

    /**
     * value: "FUNCTION_TYPE_UNSPECIFIED"
     * @const
     */
    "FUNCTION_TYPE_UNSPECIFIED": "FUNCTION_TYPE_UNSPECIFIED",

    /**
     * value: "TURTLEDOVE_SIMULATION_BIDDING_FUNCTION"
     * @const
     */
    "TURTLEDOVE_SIMULATION_BIDDING_FUNCTION": "TURTLEDOVE_SIMULATION_BIDDING_FUNCTION",

    /**
     * value: "FLEDGE_BIDDING_FUNCTION"
     * @const
     */
    "FLEDGE_BIDDING_FUNCTION": "FLEDGE_BIDDING_FUNCTION"
};



export default BiddingFunction;

