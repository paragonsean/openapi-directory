/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBiddingFunction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBiddingFunction::OAIBiddingFunction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBiddingFunction::OAIBiddingFunction() {
    this->initializeModel();
}

OAIBiddingFunction::~OAIBiddingFunction() {}

void OAIBiddingFunction::initializeModel() {

    m_bidding_function_isSet = false;
    m_bidding_function_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBiddingFunction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBiddingFunction::fromJsonObject(QJsonObject json) {

    m_bidding_function_isValid = ::OpenAPI::fromJsonValue(m_bidding_function, json[QString("biddingFunction")]);
    m_bidding_function_isSet = !json[QString("biddingFunction")].isNull() && m_bidding_function_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBiddingFunction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBiddingFunction::asJsonObject() const {
    QJsonObject obj;
    if (m_bidding_function_isSet) {
        obj.insert(QString("biddingFunction"), ::OpenAPI::toJsonValue(m_bidding_function));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBiddingFunction::getBiddingFunction() const {
    return m_bidding_function;
}
void OAIBiddingFunction::setBiddingFunction(const QString &bidding_function) {
    m_bidding_function = bidding_function;
    m_bidding_function_isSet = true;
}

bool OAIBiddingFunction::is_bidding_function_Set() const{
    return m_bidding_function_isSet;
}

bool OAIBiddingFunction::is_bidding_function_Valid() const{
    return m_bidding_function_isValid;
}

QString OAIBiddingFunction::getName() const {
    return m_name;
}
void OAIBiddingFunction::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBiddingFunction::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBiddingFunction::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBiddingFunction::getState() const {
    return m_state;
}
void OAIBiddingFunction::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIBiddingFunction::is_state_Set() const{
    return m_state_isSet;
}

bool OAIBiddingFunction::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIBiddingFunction::getType() const {
    return m_type;
}
void OAIBiddingFunction::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBiddingFunction::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBiddingFunction::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBiddingFunction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bidding_function_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBiddingFunction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
