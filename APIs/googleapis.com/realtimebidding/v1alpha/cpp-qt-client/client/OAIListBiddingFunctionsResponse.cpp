/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1alpha
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBiddingFunctionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBiddingFunctionsResponse::OAIListBiddingFunctionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBiddingFunctionsResponse::OAIListBiddingFunctionsResponse() {
    this->initializeModel();
}

OAIListBiddingFunctionsResponse::~OAIListBiddingFunctionsResponse() {}

void OAIListBiddingFunctionsResponse::initializeModel() {

    m_bidding_functions_isSet = false;
    m_bidding_functions_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListBiddingFunctionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBiddingFunctionsResponse::fromJsonObject(QJsonObject json) {

    m_bidding_functions_isValid = ::OpenAPI::fromJsonValue(m_bidding_functions, json[QString("biddingFunctions")]);
    m_bidding_functions_isSet = !json[QString("biddingFunctions")].isNull() && m_bidding_functions_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListBiddingFunctionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBiddingFunctionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bidding_functions.size() > 0) {
        obj.insert(QString("biddingFunctions"), ::OpenAPI::toJsonValue(m_bidding_functions));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIBiddingFunction> OAIListBiddingFunctionsResponse::getBiddingFunctions() const {
    return m_bidding_functions;
}
void OAIListBiddingFunctionsResponse::setBiddingFunctions(const QList<OAIBiddingFunction> &bidding_functions) {
    m_bidding_functions = bidding_functions;
    m_bidding_functions_isSet = true;
}

bool OAIListBiddingFunctionsResponse::is_bidding_functions_Set() const{
    return m_bidding_functions_isSet;
}

bool OAIListBiddingFunctionsResponse::is_bidding_functions_Valid() const{
    return m_bidding_functions_isValid;
}

QString OAIListBiddingFunctionsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListBiddingFunctionsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListBiddingFunctionsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListBiddingFunctionsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListBiddingFunctionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bidding_functions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBiddingFunctionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
