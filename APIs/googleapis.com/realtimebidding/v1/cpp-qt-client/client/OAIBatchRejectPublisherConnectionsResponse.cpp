/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBatchRejectPublisherConnectionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBatchRejectPublisherConnectionsResponse::OAIBatchRejectPublisherConnectionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBatchRejectPublisherConnectionsResponse::OAIBatchRejectPublisherConnectionsResponse() {
    this->initializeModel();
}

OAIBatchRejectPublisherConnectionsResponse::~OAIBatchRejectPublisherConnectionsResponse() {}

void OAIBatchRejectPublisherConnectionsResponse::initializeModel() {

    m_publisher_connections_isSet = false;
    m_publisher_connections_isValid = false;
}

void OAIBatchRejectPublisherConnectionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBatchRejectPublisherConnectionsResponse::fromJsonObject(QJsonObject json) {

    m_publisher_connections_isValid = ::OpenAPI::fromJsonValue(m_publisher_connections, json[QString("publisherConnections")]);
    m_publisher_connections_isSet = !json[QString("publisherConnections")].isNull() && m_publisher_connections_isValid;
}

QString OAIBatchRejectPublisherConnectionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBatchRejectPublisherConnectionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_connections.size() > 0) {
        obj.insert(QString("publisherConnections"), ::OpenAPI::toJsonValue(m_publisher_connections));
    }
    return obj;
}

QList<OAIPublisherConnection> OAIBatchRejectPublisherConnectionsResponse::getPublisherConnections() const {
    return m_publisher_connections;
}
void OAIBatchRejectPublisherConnectionsResponse::setPublisherConnections(const QList<OAIPublisherConnection> &publisher_connections) {
    m_publisher_connections = publisher_connections;
    m_publisher_connections_isSet = true;
}

bool OAIBatchRejectPublisherConnectionsResponse::is_publisher_connections_Set() const{
    return m_publisher_connections_isSet;
}

bool OAIBatchRejectPublisherConnectionsResponse::is_publisher_connections_Valid() const{
    return m_publisher_connections_isValid;
}

bool OAIBatchRejectPublisherConnectionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBatchRejectPublisherConnectionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
