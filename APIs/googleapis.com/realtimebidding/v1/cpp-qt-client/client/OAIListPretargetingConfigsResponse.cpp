/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPretargetingConfigsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPretargetingConfigsResponse::OAIListPretargetingConfigsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPretargetingConfigsResponse::OAIListPretargetingConfigsResponse() {
    this->initializeModel();
}

OAIListPretargetingConfigsResponse::~OAIListPretargetingConfigsResponse() {}

void OAIListPretargetingConfigsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_pretargeting_configs_isSet = false;
    m_pretargeting_configs_isValid = false;
}

void OAIListPretargetingConfigsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPretargetingConfigsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_pretargeting_configs_isValid = ::OpenAPI::fromJsonValue(m_pretargeting_configs, json[QString("pretargetingConfigs")]);
    m_pretargeting_configs_isSet = !json[QString("pretargetingConfigs")].isNull() && m_pretargeting_configs_isValid;
}

QString OAIListPretargetingConfigsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPretargetingConfigsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_pretargeting_configs.size() > 0) {
        obj.insert(QString("pretargetingConfigs"), ::OpenAPI::toJsonValue(m_pretargeting_configs));
    }
    return obj;
}

QString OAIListPretargetingConfigsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListPretargetingConfigsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListPretargetingConfigsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListPretargetingConfigsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIPretargetingConfig> OAIListPretargetingConfigsResponse::getPretargetingConfigs() const {
    return m_pretargeting_configs;
}
void OAIListPretargetingConfigsResponse::setPretargetingConfigs(const QList<OAIPretargetingConfig> &pretargeting_configs) {
    m_pretargeting_configs = pretargeting_configs;
    m_pretargeting_configs_isSet = true;
}

bool OAIListPretargetingConfigsResponse::is_pretargeting_configs_Set() const{
    return m_pretargeting_configs_isSet;
}

bool OAIListPretargetingConfigsResponse::is_pretargeting_configs_Valid() const{
    return m_pretargeting_configs_isValid;
}

bool OAIListPretargetingConfigsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretargeting_configs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPretargetingConfigsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
