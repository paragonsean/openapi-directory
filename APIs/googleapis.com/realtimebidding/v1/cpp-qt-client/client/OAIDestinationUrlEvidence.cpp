/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationUrlEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationUrlEvidence::OAIDestinationUrlEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationUrlEvidence::OAIDestinationUrlEvidence() {
    this->initializeModel();
}

OAIDestinationUrlEvidence::~OAIDestinationUrlEvidence() {}

void OAIDestinationUrlEvidence::initializeModel() {

    m_destination_url_isSet = false;
    m_destination_url_isValid = false;
}

void OAIDestinationUrlEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationUrlEvidence::fromJsonObject(QJsonObject json) {

    m_destination_url_isValid = ::OpenAPI::fromJsonValue(m_destination_url, json[QString("destinationUrl")]);
    m_destination_url_isSet = !json[QString("destinationUrl")].isNull() && m_destination_url_isValid;
}

QString OAIDestinationUrlEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationUrlEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_url_isSet) {
        obj.insert(QString("destinationUrl"), ::OpenAPI::toJsonValue(m_destination_url));
    }
    return obj;
}

QString OAIDestinationUrlEvidence::getDestinationUrl() const {
    return m_destination_url;
}
void OAIDestinationUrlEvidence::setDestinationUrl(const QString &destination_url) {
    m_destination_url = destination_url;
    m_destination_url_isSet = true;
}

bool OAIDestinationUrlEvidence::is_destination_url_Set() const{
    return m_destination_url_isSet;
}

bool OAIDestinationUrlEvidence::is_destination_url_Valid() const{
    return m_destination_url_isValid;
}

bool OAIDestinationUrlEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationUrlEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
