/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserList::OAIUserList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserList::OAIUserList() {
    this->initializeModel();
}

OAIUserList::~OAIUserList() {}

void OAIUserList::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_membership_duration_days_isSet = false;
    m_membership_duration_days_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_url_restriction_isSet = false;
    m_url_restriction_isValid = false;
}

void OAIUserList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserList::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_membership_duration_days_isValid = ::OpenAPI::fromJsonValue(m_membership_duration_days, json[QString("membershipDurationDays")]);
    m_membership_duration_days_isSet = !json[QString("membershipDurationDays")].isNull() && m_membership_duration_days_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_url_restriction_isValid = ::OpenAPI::fromJsonValue(m_url_restriction, json[QString("urlRestriction")]);
    m_url_restriction_isSet = !json[QString("urlRestriction")].isNull() && m_url_restriction_isValid;
}

QString OAIUserList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserList::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_membership_duration_days_isSet) {
        obj.insert(QString("membershipDurationDays"), ::OpenAPI::toJsonValue(m_membership_duration_days));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_url_restriction.isSet()) {
        obj.insert(QString("urlRestriction"), ::OpenAPI::toJsonValue(m_url_restriction));
    }
    return obj;
}

QString OAIUserList::getDescription() const {
    return m_description;
}
void OAIUserList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIUserList::is_description_Set() const{
    return m_description_isSet;
}

bool OAIUserList::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIUserList::getDisplayName() const {
    return m_display_name;
}
void OAIUserList::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUserList::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUserList::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUserList::getMembershipDurationDays() const {
    return m_membership_duration_days;
}
void OAIUserList::setMembershipDurationDays(const QString &membership_duration_days) {
    m_membership_duration_days = membership_duration_days;
    m_membership_duration_days_isSet = true;
}

bool OAIUserList::is_membership_duration_days_Set() const{
    return m_membership_duration_days_isSet;
}

bool OAIUserList::is_membership_duration_days_Valid() const{
    return m_membership_duration_days_isValid;
}

QString OAIUserList::getName() const {
    return m_name;
}
void OAIUserList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUserList::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUserList::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUserList::getStatus() const {
    return m_status;
}
void OAIUserList::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIUserList::is_status_Set() const{
    return m_status_isSet;
}

bool OAIUserList::is_status_Valid() const{
    return m_status_isValid;
}

OAIUrlRestriction OAIUserList::getUrlRestriction() const {
    return m_url_restriction;
}
void OAIUserList::setUrlRestriction(const OAIUrlRestriction &url_restriction) {
    m_url_restriction = url_restriction;
    m_url_restriction_isSet = true;
}

bool OAIUserList::is_url_restriction_Set() const{
    return m_url_restriction_isSet;
}

bool OAIUserList::is_url_restriction_Valid() const{
    return m_url_restriction_isValid;
}

bool OAIUserList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_membership_duration_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_restriction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
