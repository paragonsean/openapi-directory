/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestinationNotCrawlableEvidence.h
 *
 * Evidence that the creative&#39;s destination URL was not crawlable by Google.
 */

#ifndef OAIDestinationNotCrawlableEvidence_H
#define OAIDestinationNotCrawlableEvidence_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestinationNotCrawlableEvidence : public OAIObject {
public:
    OAIDestinationNotCrawlableEvidence();
    OAIDestinationNotCrawlableEvidence(QString json);
    ~OAIDestinationNotCrawlableEvidence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCrawlTime() const;
    void setCrawlTime(const QString &crawl_time);
    bool is_crawl_time_Set() const;
    bool is_crawl_time_Valid() const;

    QString getCrawledUrl() const;
    void setCrawledUrl(const QString &crawled_url);
    bool is_crawled_url_Set() const;
    bool is_crawled_url_Valid() const;

    QString getReason() const;
    void setReason(const QString &reason);
    bool is_reason_Set() const;
    bool is_reason_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_crawl_time;
    bool m_crawl_time_isSet;
    bool m_crawl_time_isValid;

    QString m_crawled_url;
    bool m_crawled_url_isSet;
    bool m_crawled_url_isValid;

    QString m_reason;
    bool m_reason_isSet;
    bool m_reason_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestinationNotCrawlableEvidence)

#endif // OAIDestinationNotCrawlableEvidence_H
