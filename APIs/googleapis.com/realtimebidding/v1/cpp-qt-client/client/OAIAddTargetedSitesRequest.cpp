/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddTargetedSitesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddTargetedSitesRequest::OAIAddTargetedSitesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddTargetedSitesRequest::OAIAddTargetedSitesRequest() {
    this->initializeModel();
}

OAIAddTargetedSitesRequest::~OAIAddTargetedSitesRequest() {}

void OAIAddTargetedSitesRequest::initializeModel() {

    m_sites_isSet = false;
    m_sites_isValid = false;

    m_targeting_mode_isSet = false;
    m_targeting_mode_isValid = false;
}

void OAIAddTargetedSitesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddTargetedSitesRequest::fromJsonObject(QJsonObject json) {

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;

    m_targeting_mode_isValid = ::OpenAPI::fromJsonValue(m_targeting_mode, json[QString("targetingMode")]);
    m_targeting_mode_isSet = !json[QString("targetingMode")].isNull() && m_targeting_mode_isValid;
}

QString OAIAddTargetedSitesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddTargetedSitesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_sites.size() > 0) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    if (m_targeting_mode_isSet) {
        obj.insert(QString("targetingMode"), ::OpenAPI::toJsonValue(m_targeting_mode));
    }
    return obj;
}

QList<QString> OAIAddTargetedSitesRequest::getSites() const {
    return m_sites;
}
void OAIAddTargetedSitesRequest::setSites(const QList<QString> &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIAddTargetedSitesRequest::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIAddTargetedSitesRequest::is_sites_Valid() const{
    return m_sites_isValid;
}

QString OAIAddTargetedSitesRequest::getTargetingMode() const {
    return m_targeting_mode;
}
void OAIAddTargetedSitesRequest::setTargetingMode(const QString &targeting_mode) {
    m_targeting_mode = targeting_mode;
    m_targeting_mode_isSet = true;
}

bool OAIAddTargetedSitesRequest::is_targeting_mode_Set() const{
    return m_targeting_mode_isSet;
}

bool OAIAddTargetedSitesRequest::is_targeting_mode_Valid() const{
    return m_targeting_mode_isValid;
}

bool OAIAddTargetedSitesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddTargetedSitesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
