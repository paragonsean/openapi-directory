/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreative.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreative::OAICreative(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreative::OAICreative() {
    this->initializeModel();
}

OAICreative::~OAICreative() {}

void OAICreative::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_ad_choices_destination_url_isSet = false;
    m_ad_choices_destination_url_isValid = false;

    m_advertiser_name_isSet = false;
    m_advertiser_name_isValid = false;

    m_agency_id_isSet = false;
    m_agency_id_isValid = false;

    m_api_update_time_isSet = false;
    m_api_update_time_isValid = false;

    m_creative_format_isSet = false;
    m_creative_format_isValid = false;

    m_creative_id_isSet = false;
    m_creative_id_isValid = false;

    m_creative_serving_decision_isSet = false;
    m_creative_serving_decision_isValid = false;

    m_deal_ids_isSet = false;
    m_deal_ids_isValid = false;

    m_declared_attributes_isSet = false;
    m_declared_attributes_isValid = false;

    m_declared_click_through_urls_isSet = false;
    m_declared_click_through_urls_isValid = false;

    m_declared_restricted_categories_isSet = false;
    m_declared_restricted_categories_isValid = false;

    m_declared_vendor_ids_isSet = false;
    m_declared_vendor_ids_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_impression_tracking_urls_isSet = false;
    m_impression_tracking_urls_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_native_isSet = false;
    m_native_isValid = false;

    m_render_url_isSet = false;
    m_render_url_isValid = false;

    m_restricted_categories_isSet = false;
    m_restricted_categories_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAICreative::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreative::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("accountId")]);
    m_account_id_isSet = !json[QString("accountId")].isNull() && m_account_id_isValid;

    m_ad_choices_destination_url_isValid = ::OpenAPI::fromJsonValue(m_ad_choices_destination_url, json[QString("adChoicesDestinationUrl")]);
    m_ad_choices_destination_url_isSet = !json[QString("adChoicesDestinationUrl")].isNull() && m_ad_choices_destination_url_isValid;

    m_advertiser_name_isValid = ::OpenAPI::fromJsonValue(m_advertiser_name, json[QString("advertiserName")]);
    m_advertiser_name_isSet = !json[QString("advertiserName")].isNull() && m_advertiser_name_isValid;

    m_agency_id_isValid = ::OpenAPI::fromJsonValue(m_agency_id, json[QString("agencyId")]);
    m_agency_id_isSet = !json[QString("agencyId")].isNull() && m_agency_id_isValid;

    m_api_update_time_isValid = ::OpenAPI::fromJsonValue(m_api_update_time, json[QString("apiUpdateTime")]);
    m_api_update_time_isSet = !json[QString("apiUpdateTime")].isNull() && m_api_update_time_isValid;

    m_creative_format_isValid = ::OpenAPI::fromJsonValue(m_creative_format, json[QString("creativeFormat")]);
    m_creative_format_isSet = !json[QString("creativeFormat")].isNull() && m_creative_format_isValid;

    m_creative_id_isValid = ::OpenAPI::fromJsonValue(m_creative_id, json[QString("creativeId")]);
    m_creative_id_isSet = !json[QString("creativeId")].isNull() && m_creative_id_isValid;

    m_creative_serving_decision_isValid = ::OpenAPI::fromJsonValue(m_creative_serving_decision, json[QString("creativeServingDecision")]);
    m_creative_serving_decision_isSet = !json[QString("creativeServingDecision")].isNull() && m_creative_serving_decision_isValid;

    m_deal_ids_isValid = ::OpenAPI::fromJsonValue(m_deal_ids, json[QString("dealIds")]);
    m_deal_ids_isSet = !json[QString("dealIds")].isNull() && m_deal_ids_isValid;

    m_declared_attributes_isValid = ::OpenAPI::fromJsonValue(m_declared_attributes, json[QString("declaredAttributes")]);
    m_declared_attributes_isSet = !json[QString("declaredAttributes")].isNull() && m_declared_attributes_isValid;

    m_declared_click_through_urls_isValid = ::OpenAPI::fromJsonValue(m_declared_click_through_urls, json[QString("declaredClickThroughUrls")]);
    m_declared_click_through_urls_isSet = !json[QString("declaredClickThroughUrls")].isNull() && m_declared_click_through_urls_isValid;

    m_declared_restricted_categories_isValid = ::OpenAPI::fromJsonValue(m_declared_restricted_categories, json[QString("declaredRestrictedCategories")]);
    m_declared_restricted_categories_isSet = !json[QString("declaredRestrictedCategories")].isNull() && m_declared_restricted_categories_isValid;

    m_declared_vendor_ids_isValid = ::OpenAPI::fromJsonValue(m_declared_vendor_ids, json[QString("declaredVendorIds")]);
    m_declared_vendor_ids_isSet = !json[QString("declaredVendorIds")].isNull() && m_declared_vendor_ids_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_impression_tracking_urls_isValid = ::OpenAPI::fromJsonValue(m_impression_tracking_urls, json[QString("impressionTrackingUrls")]);
    m_impression_tracking_urls_isSet = !json[QString("impressionTrackingUrls")].isNull() && m_impression_tracking_urls_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_native_isValid = ::OpenAPI::fromJsonValue(m_native, json[QString("native")]);
    m_native_isSet = !json[QString("native")].isNull() && m_native_isValid;

    m_render_url_isValid = ::OpenAPI::fromJsonValue(m_render_url, json[QString("renderUrl")]);
    m_render_url_isSet = !json[QString("renderUrl")].isNull() && m_render_url_isValid;

    m_restricted_categories_isValid = ::OpenAPI::fromJsonValue(m_restricted_categories, json[QString("restrictedCategories")]);
    m_restricted_categories_isSet = !json[QString("restrictedCategories")].isNull() && m_restricted_categories_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAICreative::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreative::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("accountId"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_ad_choices_destination_url_isSet) {
        obj.insert(QString("adChoicesDestinationUrl"), ::OpenAPI::toJsonValue(m_ad_choices_destination_url));
    }
    if (m_advertiser_name_isSet) {
        obj.insert(QString("advertiserName"), ::OpenAPI::toJsonValue(m_advertiser_name));
    }
    if (m_agency_id_isSet) {
        obj.insert(QString("agencyId"), ::OpenAPI::toJsonValue(m_agency_id));
    }
    if (m_api_update_time_isSet) {
        obj.insert(QString("apiUpdateTime"), ::OpenAPI::toJsonValue(m_api_update_time));
    }
    if (m_creative_format_isSet) {
        obj.insert(QString("creativeFormat"), ::OpenAPI::toJsonValue(m_creative_format));
    }
    if (m_creative_id_isSet) {
        obj.insert(QString("creativeId"), ::OpenAPI::toJsonValue(m_creative_id));
    }
    if (m_creative_serving_decision.isSet()) {
        obj.insert(QString("creativeServingDecision"), ::OpenAPI::toJsonValue(m_creative_serving_decision));
    }
    if (m_deal_ids.size() > 0) {
        obj.insert(QString("dealIds"), ::OpenAPI::toJsonValue(m_deal_ids));
    }
    if (m_declared_attributes.size() > 0) {
        obj.insert(QString("declaredAttributes"), ::OpenAPI::toJsonValue(m_declared_attributes));
    }
    if (m_declared_click_through_urls.size() > 0) {
        obj.insert(QString("declaredClickThroughUrls"), ::OpenAPI::toJsonValue(m_declared_click_through_urls));
    }
    if (m_declared_restricted_categories.size() > 0) {
        obj.insert(QString("declaredRestrictedCategories"), ::OpenAPI::toJsonValue(m_declared_restricted_categories));
    }
    if (m_declared_vendor_ids.size() > 0) {
        obj.insert(QString("declaredVendorIds"), ::OpenAPI::toJsonValue(m_declared_vendor_ids));
    }
    if (m_html.isSet()) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_impression_tracking_urls.size() > 0) {
        obj.insert(QString("impressionTrackingUrls"), ::OpenAPI::toJsonValue(m_impression_tracking_urls));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_native.isSet()) {
        obj.insert(QString("native"), ::OpenAPI::toJsonValue(m_native));
    }
    if (m_render_url_isSet) {
        obj.insert(QString("renderUrl"), ::OpenAPI::toJsonValue(m_render_url));
    }
    if (m_restricted_categories.size() > 0) {
        obj.insert(QString("restrictedCategories"), ::OpenAPI::toJsonValue(m_restricted_categories));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

QString OAICreative::getAccountId() const {
    return m_account_id;
}
void OAICreative::setAccountId(const QString &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAICreative::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAICreative::is_account_id_Valid() const{
    return m_account_id_isValid;
}

QString OAICreative::getAdChoicesDestinationUrl() const {
    return m_ad_choices_destination_url;
}
void OAICreative::setAdChoicesDestinationUrl(const QString &ad_choices_destination_url) {
    m_ad_choices_destination_url = ad_choices_destination_url;
    m_ad_choices_destination_url_isSet = true;
}

bool OAICreative::is_ad_choices_destination_url_Set() const{
    return m_ad_choices_destination_url_isSet;
}

bool OAICreative::is_ad_choices_destination_url_Valid() const{
    return m_ad_choices_destination_url_isValid;
}

QString OAICreative::getAdvertiserName() const {
    return m_advertiser_name;
}
void OAICreative::setAdvertiserName(const QString &advertiser_name) {
    m_advertiser_name = advertiser_name;
    m_advertiser_name_isSet = true;
}

bool OAICreative::is_advertiser_name_Set() const{
    return m_advertiser_name_isSet;
}

bool OAICreative::is_advertiser_name_Valid() const{
    return m_advertiser_name_isValid;
}

QString OAICreative::getAgencyId() const {
    return m_agency_id;
}
void OAICreative::setAgencyId(const QString &agency_id) {
    m_agency_id = agency_id;
    m_agency_id_isSet = true;
}

bool OAICreative::is_agency_id_Set() const{
    return m_agency_id_isSet;
}

bool OAICreative::is_agency_id_Valid() const{
    return m_agency_id_isValid;
}

QString OAICreative::getApiUpdateTime() const {
    return m_api_update_time;
}
void OAICreative::setApiUpdateTime(const QString &api_update_time) {
    m_api_update_time = api_update_time;
    m_api_update_time_isSet = true;
}

bool OAICreative::is_api_update_time_Set() const{
    return m_api_update_time_isSet;
}

bool OAICreative::is_api_update_time_Valid() const{
    return m_api_update_time_isValid;
}

QString OAICreative::getCreativeFormat() const {
    return m_creative_format;
}
void OAICreative::setCreativeFormat(const QString &creative_format) {
    m_creative_format = creative_format;
    m_creative_format_isSet = true;
}

bool OAICreative::is_creative_format_Set() const{
    return m_creative_format_isSet;
}

bool OAICreative::is_creative_format_Valid() const{
    return m_creative_format_isValid;
}

QString OAICreative::getCreativeId() const {
    return m_creative_id;
}
void OAICreative::setCreativeId(const QString &creative_id) {
    m_creative_id = creative_id;
    m_creative_id_isSet = true;
}

bool OAICreative::is_creative_id_Set() const{
    return m_creative_id_isSet;
}

bool OAICreative::is_creative_id_Valid() const{
    return m_creative_id_isValid;
}

OAICreativeServingDecision OAICreative::getCreativeServingDecision() const {
    return m_creative_serving_decision;
}
void OAICreative::setCreativeServingDecision(const OAICreativeServingDecision &creative_serving_decision) {
    m_creative_serving_decision = creative_serving_decision;
    m_creative_serving_decision_isSet = true;
}

bool OAICreative::is_creative_serving_decision_Set() const{
    return m_creative_serving_decision_isSet;
}

bool OAICreative::is_creative_serving_decision_Valid() const{
    return m_creative_serving_decision_isValid;
}

QList<QString> OAICreative::getDealIds() const {
    return m_deal_ids;
}
void OAICreative::setDealIds(const QList<QString> &deal_ids) {
    m_deal_ids = deal_ids;
    m_deal_ids_isSet = true;
}

bool OAICreative::is_deal_ids_Set() const{
    return m_deal_ids_isSet;
}

bool OAICreative::is_deal_ids_Valid() const{
    return m_deal_ids_isValid;
}

QList<QString> OAICreative::getDeclaredAttributes() const {
    return m_declared_attributes;
}
void OAICreative::setDeclaredAttributes(const QList<QString> &declared_attributes) {
    m_declared_attributes = declared_attributes;
    m_declared_attributes_isSet = true;
}

bool OAICreative::is_declared_attributes_Set() const{
    return m_declared_attributes_isSet;
}

bool OAICreative::is_declared_attributes_Valid() const{
    return m_declared_attributes_isValid;
}

QList<QString> OAICreative::getDeclaredClickThroughUrls() const {
    return m_declared_click_through_urls;
}
void OAICreative::setDeclaredClickThroughUrls(const QList<QString> &declared_click_through_urls) {
    m_declared_click_through_urls = declared_click_through_urls;
    m_declared_click_through_urls_isSet = true;
}

bool OAICreative::is_declared_click_through_urls_Set() const{
    return m_declared_click_through_urls_isSet;
}

bool OAICreative::is_declared_click_through_urls_Valid() const{
    return m_declared_click_through_urls_isValid;
}

QList<QString> OAICreative::getDeclaredRestrictedCategories() const {
    return m_declared_restricted_categories;
}
void OAICreative::setDeclaredRestrictedCategories(const QList<QString> &declared_restricted_categories) {
    m_declared_restricted_categories = declared_restricted_categories;
    m_declared_restricted_categories_isSet = true;
}

bool OAICreative::is_declared_restricted_categories_Set() const{
    return m_declared_restricted_categories_isSet;
}

bool OAICreative::is_declared_restricted_categories_Valid() const{
    return m_declared_restricted_categories_isValid;
}

QList<qint32> OAICreative::getDeclaredVendorIds() const {
    return m_declared_vendor_ids;
}
void OAICreative::setDeclaredVendorIds(const QList<qint32> &declared_vendor_ids) {
    m_declared_vendor_ids = declared_vendor_ids;
    m_declared_vendor_ids_isSet = true;
}

bool OAICreative::is_declared_vendor_ids_Set() const{
    return m_declared_vendor_ids_isSet;
}

bool OAICreative::is_declared_vendor_ids_Valid() const{
    return m_declared_vendor_ids_isValid;
}

OAIHtmlContent OAICreative::getHtml() const {
    return m_html;
}
void OAICreative::setHtml(const OAIHtmlContent &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAICreative::is_html_Set() const{
    return m_html_isSet;
}

bool OAICreative::is_html_Valid() const{
    return m_html_isValid;
}

QList<QString> OAICreative::getImpressionTrackingUrls() const {
    return m_impression_tracking_urls;
}
void OAICreative::setImpressionTrackingUrls(const QList<QString> &impression_tracking_urls) {
    m_impression_tracking_urls = impression_tracking_urls;
    m_impression_tracking_urls_isSet = true;
}

bool OAICreative::is_impression_tracking_urls_Set() const{
    return m_impression_tracking_urls_isSet;
}

bool OAICreative::is_impression_tracking_urls_Valid() const{
    return m_impression_tracking_urls_isValid;
}

QString OAICreative::getName() const {
    return m_name;
}
void OAICreative::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICreative::is_name_Set() const{
    return m_name_isSet;
}

bool OAICreative::is_name_Valid() const{
    return m_name_isValid;
}

OAINativeContent OAICreative::getNative() const {
    return m_native;
}
void OAICreative::setNative(const OAINativeContent &native) {
    m_native = native;
    m_native_isSet = true;
}

bool OAICreative::is_native_Set() const{
    return m_native_isSet;
}

bool OAICreative::is_native_Valid() const{
    return m_native_isValid;
}

QString OAICreative::getRenderUrl() const {
    return m_render_url;
}
void OAICreative::setRenderUrl(const QString &render_url) {
    m_render_url = render_url;
    m_render_url_isSet = true;
}

bool OAICreative::is_render_url_Set() const{
    return m_render_url_isSet;
}

bool OAICreative::is_render_url_Valid() const{
    return m_render_url_isValid;
}

QList<QString> OAICreative::getRestrictedCategories() const {
    return m_restricted_categories;
}
void OAICreative::setRestrictedCategories(const QList<QString> &restricted_categories) {
    m_restricted_categories = restricted_categories;
    m_restricted_categories_isSet = true;
}

bool OAICreative::is_restricted_categories_Set() const{
    return m_restricted_categories_isSet;
}

bool OAICreative::is_restricted_categories_Valid() const{
    return m_restricted_categories_isValid;
}

qint32 OAICreative::getVersion() const {
    return m_version;
}
void OAICreative::setVersion(const qint32 &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAICreative::is_version_Set() const{
    return m_version_isSet;
}

bool OAICreative::is_version_Valid() const{
    return m_version_isValid;
}

OAIVideoContent OAICreative::getVideo() const {
    return m_video;
}
void OAICreative::setVideo(const OAIVideoContent &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAICreative::is_video_Set() const{
    return m_video_isSet;
}

bool OAICreative::is_video_Valid() const{
    return m_video_isValid;
}

bool OAICreative::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ad_choices_destination_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agency_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_update_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creative_serving_decision.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deal_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_click_through_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_restricted_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_declared_vendor_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_html.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_impression_tracking_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_native.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_render_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restricted_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreative::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
