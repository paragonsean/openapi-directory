/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainCallEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainCallEvidence::OAIDomainCallEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainCallEvidence::OAIDomainCallEvidence() {
    this->initializeModel();
}

OAIDomainCallEvidence::~OAIDomainCallEvidence() {}

void OAIDomainCallEvidence::initializeModel() {

    m_top_http_call_domains_isSet = false;
    m_top_http_call_domains_isValid = false;

    m_total_http_call_count_isSet = false;
    m_total_http_call_count_isValid = false;
}

void OAIDomainCallEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainCallEvidence::fromJsonObject(QJsonObject json) {

    m_top_http_call_domains_isValid = ::OpenAPI::fromJsonValue(m_top_http_call_domains, json[QString("topHttpCallDomains")]);
    m_top_http_call_domains_isSet = !json[QString("topHttpCallDomains")].isNull() && m_top_http_call_domains_isValid;

    m_total_http_call_count_isValid = ::OpenAPI::fromJsonValue(m_total_http_call_count, json[QString("totalHttpCallCount")]);
    m_total_http_call_count_isSet = !json[QString("totalHttpCallCount")].isNull() && m_total_http_call_count_isValid;
}

QString OAIDomainCallEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainCallEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_top_http_call_domains.size() > 0) {
        obj.insert(QString("topHttpCallDomains"), ::OpenAPI::toJsonValue(m_top_http_call_domains));
    }
    if (m_total_http_call_count_isSet) {
        obj.insert(QString("totalHttpCallCount"), ::OpenAPI::toJsonValue(m_total_http_call_count));
    }
    return obj;
}

QList<OAIDomainCalls> OAIDomainCallEvidence::getTopHttpCallDomains() const {
    return m_top_http_call_domains;
}
void OAIDomainCallEvidence::setTopHttpCallDomains(const QList<OAIDomainCalls> &top_http_call_domains) {
    m_top_http_call_domains = top_http_call_domains;
    m_top_http_call_domains_isSet = true;
}

bool OAIDomainCallEvidence::is_top_http_call_domains_Set() const{
    return m_top_http_call_domains_isSet;
}

bool OAIDomainCallEvidence::is_top_http_call_domains_Valid() const{
    return m_top_http_call_domains_isValid;
}

qint32 OAIDomainCallEvidence::getTotalHttpCallCount() const {
    return m_total_http_call_count;
}
void OAIDomainCallEvidence::setTotalHttpCallCount(const qint32 &total_http_call_count) {
    m_total_http_call_count = total_http_call_count;
    m_total_http_call_count_isSet = true;
}

bool OAIDomainCallEvidence::is_total_http_call_count_Set() const{
    return m_total_http_call_count_isSet;
}

bool OAIDomainCallEvidence::is_total_http_call_count_Valid() const{
    return m_total_http_call_count_isValid;
}

bool OAIDomainCallEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_top_http_call_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_http_call_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainCallEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
