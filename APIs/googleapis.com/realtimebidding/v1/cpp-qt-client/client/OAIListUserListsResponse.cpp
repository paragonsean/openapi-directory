/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListUserListsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListUserListsResponse::OAIListUserListsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListUserListsResponse::OAIListUserListsResponse() {
    this->initializeModel();
}

OAIListUserListsResponse::~OAIListUserListsResponse() {}

void OAIListUserListsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_user_lists_isSet = false;
    m_user_lists_isValid = false;
}

void OAIListUserListsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListUserListsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_user_lists_isValid = ::OpenAPI::fromJsonValue(m_user_lists, json[QString("userLists")]);
    m_user_lists_isSet = !json[QString("userLists")].isNull() && m_user_lists_isValid;
}

QString OAIListUserListsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListUserListsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_user_lists.size() > 0) {
        obj.insert(QString("userLists"), ::OpenAPI::toJsonValue(m_user_lists));
    }
    return obj;
}

QString OAIListUserListsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListUserListsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListUserListsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListUserListsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIUserList> OAIListUserListsResponse::getUserLists() const {
    return m_user_lists;
}
void OAIListUserListsResponse::setUserLists(const QList<OAIUserList> &user_lists) {
    m_user_lists = user_lists;
    m_user_lists_isSet = true;
}

bool OAIListUserListsResponse::is_user_lists_Set() const{
    return m_user_lists_isSet;
}

bool OAIListUserListsResponse::is_user_lists_Valid() const{
    return m_user_lists_isValid;
}

bool OAIListUserListsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_lists.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListUserListsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
