/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoMetadata.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoMetadata::OAIVideoMetadata(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoMetadata::OAIVideoMetadata() {
    this->initializeModel();
}

OAIVideoMetadata::~OAIVideoMetadata() {}

void OAIVideoMetadata::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_is_valid_vast_isSet = false;
    m_is_valid_vast_isValid = false;

    m_is_vpaid_isSet = false;
    m_is_vpaid_isValid = false;

    m_media_files_isSet = false;
    m_media_files_isValid = false;

    m_skip_offset_isSet = false;
    m_skip_offset_isValid = false;

    m_vast_version_isSet = false;
    m_vast_version_isValid = false;
}

void OAIVideoMetadata::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoMetadata::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_is_valid_vast_isValid = ::OpenAPI::fromJsonValue(m_is_valid_vast, json[QString("isValidVast")]);
    m_is_valid_vast_isSet = !json[QString("isValidVast")].isNull() && m_is_valid_vast_isValid;

    m_is_vpaid_isValid = ::OpenAPI::fromJsonValue(m_is_vpaid, json[QString("isVpaid")]);
    m_is_vpaid_isSet = !json[QString("isVpaid")].isNull() && m_is_vpaid_isValid;

    m_media_files_isValid = ::OpenAPI::fromJsonValue(m_media_files, json[QString("mediaFiles")]);
    m_media_files_isSet = !json[QString("mediaFiles")].isNull() && m_media_files_isValid;

    m_skip_offset_isValid = ::OpenAPI::fromJsonValue(m_skip_offset, json[QString("skipOffset")]);
    m_skip_offset_isSet = !json[QString("skipOffset")].isNull() && m_skip_offset_isValid;

    m_vast_version_isValid = ::OpenAPI::fromJsonValue(m_vast_version, json[QString("vastVersion")]);
    m_vast_version_isSet = !json[QString("vastVersion")].isNull() && m_vast_version_isValid;
}

QString OAIVideoMetadata::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoMetadata::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_is_valid_vast_isSet) {
        obj.insert(QString("isValidVast"), ::OpenAPI::toJsonValue(m_is_valid_vast));
    }
    if (m_is_vpaid_isSet) {
        obj.insert(QString("isVpaid"), ::OpenAPI::toJsonValue(m_is_vpaid));
    }
    if (m_media_files.size() > 0) {
        obj.insert(QString("mediaFiles"), ::OpenAPI::toJsonValue(m_media_files));
    }
    if (m_skip_offset_isSet) {
        obj.insert(QString("skipOffset"), ::OpenAPI::toJsonValue(m_skip_offset));
    }
    if (m_vast_version_isSet) {
        obj.insert(QString("vastVersion"), ::OpenAPI::toJsonValue(m_vast_version));
    }
    return obj;
}

QString OAIVideoMetadata::getDuration() const {
    return m_duration;
}
void OAIVideoMetadata::setDuration(const QString &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideoMetadata::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideoMetadata::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIVideoMetadata::isIsValidVast() const {
    return m_is_valid_vast;
}
void OAIVideoMetadata::setIsValidVast(const bool &is_valid_vast) {
    m_is_valid_vast = is_valid_vast;
    m_is_valid_vast_isSet = true;
}

bool OAIVideoMetadata::is_is_valid_vast_Set() const{
    return m_is_valid_vast_isSet;
}

bool OAIVideoMetadata::is_is_valid_vast_Valid() const{
    return m_is_valid_vast_isValid;
}

bool OAIVideoMetadata::isIsVpaid() const {
    return m_is_vpaid;
}
void OAIVideoMetadata::setIsVpaid(const bool &is_vpaid) {
    m_is_vpaid = is_vpaid;
    m_is_vpaid_isSet = true;
}

bool OAIVideoMetadata::is_is_vpaid_Set() const{
    return m_is_vpaid_isSet;
}

bool OAIVideoMetadata::is_is_vpaid_Valid() const{
    return m_is_vpaid_isValid;
}

QList<OAIMediaFile> OAIVideoMetadata::getMediaFiles() const {
    return m_media_files;
}
void OAIVideoMetadata::setMediaFiles(const QList<OAIMediaFile> &media_files) {
    m_media_files = media_files;
    m_media_files_isSet = true;
}

bool OAIVideoMetadata::is_media_files_Set() const{
    return m_media_files_isSet;
}

bool OAIVideoMetadata::is_media_files_Valid() const{
    return m_media_files_isValid;
}

QString OAIVideoMetadata::getSkipOffset() const {
    return m_skip_offset;
}
void OAIVideoMetadata::setSkipOffset(const QString &skip_offset) {
    m_skip_offset = skip_offset;
    m_skip_offset_isSet = true;
}

bool OAIVideoMetadata::is_skip_offset_Set() const{
    return m_skip_offset_isSet;
}

bool OAIVideoMetadata::is_skip_offset_Valid() const{
    return m_skip_offset_isValid;
}

QString OAIVideoMetadata::getVastVersion() const {
    return m_vast_version;
}
void OAIVideoMetadata::setVastVersion(const QString &vast_version) {
    m_vast_version = vast_version;
    m_vast_version_isSet = true;
}

bool OAIVideoMetadata::is_vast_version_Set() const{
    return m_vast_version_isSet;
}

bool OAIVideoMetadata::is_vast_version_Valid() const{
    return m_vast_version_isValid;
}

bool OAIVideoMetadata::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_valid_vast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_vpaid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vast_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoMetadata::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
