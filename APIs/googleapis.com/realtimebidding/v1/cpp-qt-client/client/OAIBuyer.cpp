/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBuyer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBuyer::OAIBuyer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBuyer::OAIBuyer() {
    this->initializeModel();
}

OAIBuyer::~OAIBuyer() {}

void OAIBuyer::initializeModel() {

    m_active_creative_count_isSet = false;
    m_active_creative_count_isValid = false;

    m_bidder_isSet = false;
    m_bidder_isValid = false;

    m_billing_ids_isSet = false;
    m_billing_ids_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_maximum_active_creative_count_isSet = false;
    m_maximum_active_creative_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBuyer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBuyer::fromJsonObject(QJsonObject json) {

    m_active_creative_count_isValid = ::OpenAPI::fromJsonValue(m_active_creative_count, json[QString("activeCreativeCount")]);
    m_active_creative_count_isSet = !json[QString("activeCreativeCount")].isNull() && m_active_creative_count_isValid;

    m_bidder_isValid = ::OpenAPI::fromJsonValue(m_bidder, json[QString("bidder")]);
    m_bidder_isSet = !json[QString("bidder")].isNull() && m_bidder_isValid;

    m_billing_ids_isValid = ::OpenAPI::fromJsonValue(m_billing_ids, json[QString("billingIds")]);
    m_billing_ids_isSet = !json[QString("billingIds")].isNull() && m_billing_ids_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_maximum_active_creative_count_isValid = ::OpenAPI::fromJsonValue(m_maximum_active_creative_count, json[QString("maximumActiveCreativeCount")]);
    m_maximum_active_creative_count_isSet = !json[QString("maximumActiveCreativeCount")].isNull() && m_maximum_active_creative_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBuyer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBuyer::asJsonObject() const {
    QJsonObject obj;
    if (m_active_creative_count_isSet) {
        obj.insert(QString("activeCreativeCount"), ::OpenAPI::toJsonValue(m_active_creative_count));
    }
    if (m_bidder_isSet) {
        obj.insert(QString("bidder"), ::OpenAPI::toJsonValue(m_bidder));
    }
    if (m_billing_ids.size() > 0) {
        obj.insert(QString("billingIds"), ::OpenAPI::toJsonValue(m_billing_ids));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_maximum_active_creative_count_isSet) {
        obj.insert(QString("maximumActiveCreativeCount"), ::OpenAPI::toJsonValue(m_maximum_active_creative_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIBuyer::getActiveCreativeCount() const {
    return m_active_creative_count;
}
void OAIBuyer::setActiveCreativeCount(const QString &active_creative_count) {
    m_active_creative_count = active_creative_count;
    m_active_creative_count_isSet = true;
}

bool OAIBuyer::is_active_creative_count_Set() const{
    return m_active_creative_count_isSet;
}

bool OAIBuyer::is_active_creative_count_Valid() const{
    return m_active_creative_count_isValid;
}

QString OAIBuyer::getBidder() const {
    return m_bidder;
}
void OAIBuyer::setBidder(const QString &bidder) {
    m_bidder = bidder;
    m_bidder_isSet = true;
}

bool OAIBuyer::is_bidder_Set() const{
    return m_bidder_isSet;
}

bool OAIBuyer::is_bidder_Valid() const{
    return m_bidder_isValid;
}

QList<QString> OAIBuyer::getBillingIds() const {
    return m_billing_ids;
}
void OAIBuyer::setBillingIds(const QList<QString> &billing_ids) {
    m_billing_ids = billing_ids;
    m_billing_ids_isSet = true;
}

bool OAIBuyer::is_billing_ids_Set() const{
    return m_billing_ids_isSet;
}

bool OAIBuyer::is_billing_ids_Valid() const{
    return m_billing_ids_isValid;
}

QString OAIBuyer::getDisplayName() const {
    return m_display_name;
}
void OAIBuyer::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIBuyer::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIBuyer::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIBuyer::getMaximumActiveCreativeCount() const {
    return m_maximum_active_creative_count;
}
void OAIBuyer::setMaximumActiveCreativeCount(const QString &maximum_active_creative_count) {
    m_maximum_active_creative_count = maximum_active_creative_count;
    m_maximum_active_creative_count_isSet = true;
}

bool OAIBuyer::is_maximum_active_creative_count_Set() const{
    return m_maximum_active_creative_count_isSet;
}

bool OAIBuyer::is_maximum_active_creative_count_Valid() const{
    return m_maximum_active_creative_count_isValid;
}

QString OAIBuyer::getName() const {
    return m_name;
}
void OAIBuyer::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBuyer::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBuyer::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBuyer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_active_creative_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bidder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_active_creative_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBuyer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
