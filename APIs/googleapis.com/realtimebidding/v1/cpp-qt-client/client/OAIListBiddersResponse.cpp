/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBiddersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBiddersResponse::OAIListBiddersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBiddersResponse::OAIListBiddersResponse() {
    this->initializeModel();
}

OAIListBiddersResponse::~OAIListBiddersResponse() {}

void OAIListBiddersResponse::initializeModel() {

    m_bidders_isSet = false;
    m_bidders_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListBiddersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBiddersResponse::fromJsonObject(QJsonObject json) {

    m_bidders_isValid = ::OpenAPI::fromJsonValue(m_bidders, json[QString("bidders")]);
    m_bidders_isSet = !json[QString("bidders")].isNull() && m_bidders_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListBiddersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBiddersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bidders.size() > 0) {
        obj.insert(QString("bidders"), ::OpenAPI::toJsonValue(m_bidders));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIBidder> OAIListBiddersResponse::getBidders() const {
    return m_bidders;
}
void OAIListBiddersResponse::setBidders(const QList<OAIBidder> &bidders) {
    m_bidders = bidders;
    m_bidders_isSet = true;
}

bool OAIListBiddersResponse::is_bidders_Set() const{
    return m_bidders_isSet;
}

bool OAIListBiddersResponse::is_bidders_Valid() const{
    return m_bidders_isValid;
}

QString OAIListBiddersResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListBiddersResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListBiddersResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListBiddersResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListBiddersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bidders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBiddersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
