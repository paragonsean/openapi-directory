/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoContent::OAIVideoContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoContent::OAIVideoContent() {
    this->initializeModel();
}

OAIVideoContent::~OAIVideoContent() {}

void OAIVideoContent::initializeModel() {

    m_video_metadata_isSet = false;
    m_video_metadata_isValid = false;

    m_video_url_isSet = false;
    m_video_url_isValid = false;

    m_video_vast_xml_isSet = false;
    m_video_vast_xml_isValid = false;
}

void OAIVideoContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoContent::fromJsonObject(QJsonObject json) {

    m_video_metadata_isValid = ::OpenAPI::fromJsonValue(m_video_metadata, json[QString("videoMetadata")]);
    m_video_metadata_isSet = !json[QString("videoMetadata")].isNull() && m_video_metadata_isValid;

    m_video_url_isValid = ::OpenAPI::fromJsonValue(m_video_url, json[QString("videoUrl")]);
    m_video_url_isSet = !json[QString("videoUrl")].isNull() && m_video_url_isValid;

    m_video_vast_xml_isValid = ::OpenAPI::fromJsonValue(m_video_vast_xml, json[QString("videoVastXml")]);
    m_video_vast_xml_isSet = !json[QString("videoVastXml")].isNull() && m_video_vast_xml_isValid;
}

QString OAIVideoContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoContent::asJsonObject() const {
    QJsonObject obj;
    if (m_video_metadata.isSet()) {
        obj.insert(QString("videoMetadata"), ::OpenAPI::toJsonValue(m_video_metadata));
    }
    if (m_video_url_isSet) {
        obj.insert(QString("videoUrl"), ::OpenAPI::toJsonValue(m_video_url));
    }
    if (m_video_vast_xml_isSet) {
        obj.insert(QString("videoVastXml"), ::OpenAPI::toJsonValue(m_video_vast_xml));
    }
    return obj;
}

OAIVideoMetadata OAIVideoContent::getVideoMetadata() const {
    return m_video_metadata;
}
void OAIVideoContent::setVideoMetadata(const OAIVideoMetadata &video_metadata) {
    m_video_metadata = video_metadata;
    m_video_metadata_isSet = true;
}

bool OAIVideoContent::is_video_metadata_Set() const{
    return m_video_metadata_isSet;
}

bool OAIVideoContent::is_video_metadata_Valid() const{
    return m_video_metadata_isValid;
}

QString OAIVideoContent::getVideoUrl() const {
    return m_video_url;
}
void OAIVideoContent::setVideoUrl(const QString &video_url) {
    m_video_url = video_url;
    m_video_url_isSet = true;
}

bool OAIVideoContent::is_video_url_Set() const{
    return m_video_url_isSet;
}

bool OAIVideoContent::is_video_url_Valid() const{
    return m_video_url_isValid;
}

QString OAIVideoContent::getVideoVastXml() const {
    return m_video_vast_xml;
}
void OAIVideoContent::setVideoVastXml(const QString &video_vast_xml) {
    m_video_vast_xml = video_vast_xml;
    m_video_vast_xml_isSet = true;
}

bool OAIVideoContent::is_video_vast_xml_Set() const{
    return m_video_vast_xml_isSet;
}

bool OAIVideoContent::is_video_vast_xml_Valid() const{
    return m_video_vast_xml_isValid;
}

bool OAIVideoContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_video_metadata.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_vast_xml_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
