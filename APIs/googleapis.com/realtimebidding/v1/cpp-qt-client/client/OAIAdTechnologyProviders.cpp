/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdTechnologyProviders.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdTechnologyProviders::OAIAdTechnologyProviders(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdTechnologyProviders::OAIAdTechnologyProviders() {
    this->initializeModel();
}

OAIAdTechnologyProviders::~OAIAdTechnologyProviders() {}

void OAIAdTechnologyProviders::initializeModel() {

    m_detected_gvl_ids_isSet = false;
    m_detected_gvl_ids_isValid = false;

    m_detected_provider_ids_isSet = false;
    m_detected_provider_ids_isValid = false;

    m_unidentified_provider_domains_isSet = false;
    m_unidentified_provider_domains_isValid = false;
}

void OAIAdTechnologyProviders::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdTechnologyProviders::fromJsonObject(QJsonObject json) {

    m_detected_gvl_ids_isValid = ::OpenAPI::fromJsonValue(m_detected_gvl_ids, json[QString("detectedGvlIds")]);
    m_detected_gvl_ids_isSet = !json[QString("detectedGvlIds")].isNull() && m_detected_gvl_ids_isValid;

    m_detected_provider_ids_isValid = ::OpenAPI::fromJsonValue(m_detected_provider_ids, json[QString("detectedProviderIds")]);
    m_detected_provider_ids_isSet = !json[QString("detectedProviderIds")].isNull() && m_detected_provider_ids_isValid;

    m_unidentified_provider_domains_isValid = ::OpenAPI::fromJsonValue(m_unidentified_provider_domains, json[QString("unidentifiedProviderDomains")]);
    m_unidentified_provider_domains_isSet = !json[QString("unidentifiedProviderDomains")].isNull() && m_unidentified_provider_domains_isValid;
}

QString OAIAdTechnologyProviders::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdTechnologyProviders::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_gvl_ids.size() > 0) {
        obj.insert(QString("detectedGvlIds"), ::OpenAPI::toJsonValue(m_detected_gvl_ids));
    }
    if (m_detected_provider_ids.size() > 0) {
        obj.insert(QString("detectedProviderIds"), ::OpenAPI::toJsonValue(m_detected_provider_ids));
    }
    if (m_unidentified_provider_domains.size() > 0) {
        obj.insert(QString("unidentifiedProviderDomains"), ::OpenAPI::toJsonValue(m_unidentified_provider_domains));
    }
    return obj;
}

QList<QString> OAIAdTechnologyProviders::getDetectedGvlIds() const {
    return m_detected_gvl_ids;
}
void OAIAdTechnologyProviders::setDetectedGvlIds(const QList<QString> &detected_gvl_ids) {
    m_detected_gvl_ids = detected_gvl_ids;
    m_detected_gvl_ids_isSet = true;
}

bool OAIAdTechnologyProviders::is_detected_gvl_ids_Set() const{
    return m_detected_gvl_ids_isSet;
}

bool OAIAdTechnologyProviders::is_detected_gvl_ids_Valid() const{
    return m_detected_gvl_ids_isValid;
}

QList<QString> OAIAdTechnologyProviders::getDetectedProviderIds() const {
    return m_detected_provider_ids;
}
void OAIAdTechnologyProviders::setDetectedProviderIds(const QList<QString> &detected_provider_ids) {
    m_detected_provider_ids = detected_provider_ids;
    m_detected_provider_ids_isSet = true;
}

bool OAIAdTechnologyProviders::is_detected_provider_ids_Set() const{
    return m_detected_provider_ids_isSet;
}

bool OAIAdTechnologyProviders::is_detected_provider_ids_Valid() const{
    return m_detected_provider_ids_isValid;
}

QList<QString> OAIAdTechnologyProviders::getUnidentifiedProviderDomains() const {
    return m_unidentified_provider_domains;
}
void OAIAdTechnologyProviders::setUnidentifiedProviderDomains(const QList<QString> &unidentified_provider_domains) {
    m_unidentified_provider_domains = unidentified_provider_domains;
    m_unidentified_provider_domains_isSet = true;
}

bool OAIAdTechnologyProviders::is_unidentified_provider_domains_Set() const{
    return m_unidentified_provider_domains_isSet;
}

bool OAIAdTechnologyProviders::is_unidentified_provider_domains_Valid() const{
    return m_unidentified_provider_domains_isValid;
}

bool OAIAdTechnologyProviders::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_gvl_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_provider_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_unidentified_provider_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdTechnologyProviders::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
