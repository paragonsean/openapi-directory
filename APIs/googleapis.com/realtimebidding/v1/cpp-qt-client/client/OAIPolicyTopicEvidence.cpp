/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyTopicEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyTopicEvidence::OAIPolicyTopicEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyTopicEvidence::OAIPolicyTopicEvidence() {
    this->initializeModel();
}

OAIPolicyTopicEvidence::~OAIPolicyTopicEvidence() {}

void OAIPolicyTopicEvidence::initializeModel() {

    m_destination_not_crawlable_isSet = false;
    m_destination_not_crawlable_isValid = false;

    m_destination_not_working_isSet = false;
    m_destination_not_working_isValid = false;

    m_destination_url_isSet = false;
    m_destination_url_isValid = false;

    m_domain_call_isSet = false;
    m_domain_call_isValid = false;

    m_download_size_isSet = false;
    m_download_size_isValid = false;

    m_http_call_isSet = false;
    m_http_call_isValid = false;

    m_http_cookie_isSet = false;
    m_http_cookie_isValid = false;
}

void OAIPolicyTopicEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyTopicEvidence::fromJsonObject(QJsonObject json) {

    m_destination_not_crawlable_isValid = ::OpenAPI::fromJsonValue(m_destination_not_crawlable, json[QString("destinationNotCrawlable")]);
    m_destination_not_crawlable_isSet = !json[QString("destinationNotCrawlable")].isNull() && m_destination_not_crawlable_isValid;

    m_destination_not_working_isValid = ::OpenAPI::fromJsonValue(m_destination_not_working, json[QString("destinationNotWorking")]);
    m_destination_not_working_isSet = !json[QString("destinationNotWorking")].isNull() && m_destination_not_working_isValid;

    m_destination_url_isValid = ::OpenAPI::fromJsonValue(m_destination_url, json[QString("destinationUrl")]);
    m_destination_url_isSet = !json[QString("destinationUrl")].isNull() && m_destination_url_isValid;

    m_domain_call_isValid = ::OpenAPI::fromJsonValue(m_domain_call, json[QString("domainCall")]);
    m_domain_call_isSet = !json[QString("domainCall")].isNull() && m_domain_call_isValid;

    m_download_size_isValid = ::OpenAPI::fromJsonValue(m_download_size, json[QString("downloadSize")]);
    m_download_size_isSet = !json[QString("downloadSize")].isNull() && m_download_size_isValid;

    m_http_call_isValid = ::OpenAPI::fromJsonValue(m_http_call, json[QString("httpCall")]);
    m_http_call_isSet = !json[QString("httpCall")].isNull() && m_http_call_isValid;

    m_http_cookie_isValid = ::OpenAPI::fromJsonValue(m_http_cookie, json[QString("httpCookie")]);
    m_http_cookie_isSet = !json[QString("httpCookie")].isNull() && m_http_cookie_isValid;
}

QString OAIPolicyTopicEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyTopicEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_not_crawlable.isSet()) {
        obj.insert(QString("destinationNotCrawlable"), ::OpenAPI::toJsonValue(m_destination_not_crawlable));
    }
    if (m_destination_not_working.isSet()) {
        obj.insert(QString("destinationNotWorking"), ::OpenAPI::toJsonValue(m_destination_not_working));
    }
    if (m_destination_url.isSet()) {
        obj.insert(QString("destinationUrl"), ::OpenAPI::toJsonValue(m_destination_url));
    }
    if (m_domain_call.isSet()) {
        obj.insert(QString("domainCall"), ::OpenAPI::toJsonValue(m_domain_call));
    }
    if (m_download_size.isSet()) {
        obj.insert(QString("downloadSize"), ::OpenAPI::toJsonValue(m_download_size));
    }
    if (m_http_call.isSet()) {
        obj.insert(QString("httpCall"), ::OpenAPI::toJsonValue(m_http_call));
    }
    if (m_http_cookie.isSet()) {
        obj.insert(QString("httpCookie"), ::OpenAPI::toJsonValue(m_http_cookie));
    }
    return obj;
}

OAIDestinationNotCrawlableEvidence OAIPolicyTopicEvidence::getDestinationNotCrawlable() const {
    return m_destination_not_crawlable;
}
void OAIPolicyTopicEvidence::setDestinationNotCrawlable(const OAIDestinationNotCrawlableEvidence &destination_not_crawlable) {
    m_destination_not_crawlable = destination_not_crawlable;
    m_destination_not_crawlable_isSet = true;
}

bool OAIPolicyTopicEvidence::is_destination_not_crawlable_Set() const{
    return m_destination_not_crawlable_isSet;
}

bool OAIPolicyTopicEvidence::is_destination_not_crawlable_Valid() const{
    return m_destination_not_crawlable_isValid;
}

OAIDestinationNotWorkingEvidence OAIPolicyTopicEvidence::getDestinationNotWorking() const {
    return m_destination_not_working;
}
void OAIPolicyTopicEvidence::setDestinationNotWorking(const OAIDestinationNotWorkingEvidence &destination_not_working) {
    m_destination_not_working = destination_not_working;
    m_destination_not_working_isSet = true;
}

bool OAIPolicyTopicEvidence::is_destination_not_working_Set() const{
    return m_destination_not_working_isSet;
}

bool OAIPolicyTopicEvidence::is_destination_not_working_Valid() const{
    return m_destination_not_working_isValid;
}

OAIDestinationUrlEvidence OAIPolicyTopicEvidence::getDestinationUrl() const {
    return m_destination_url;
}
void OAIPolicyTopicEvidence::setDestinationUrl(const OAIDestinationUrlEvidence &destination_url) {
    m_destination_url = destination_url;
    m_destination_url_isSet = true;
}

bool OAIPolicyTopicEvidence::is_destination_url_Set() const{
    return m_destination_url_isSet;
}

bool OAIPolicyTopicEvidence::is_destination_url_Valid() const{
    return m_destination_url_isValid;
}

OAIDomainCallEvidence OAIPolicyTopicEvidence::getDomainCall() const {
    return m_domain_call;
}
void OAIPolicyTopicEvidence::setDomainCall(const OAIDomainCallEvidence &domain_call) {
    m_domain_call = domain_call;
    m_domain_call_isSet = true;
}

bool OAIPolicyTopicEvidence::is_domain_call_Set() const{
    return m_domain_call_isSet;
}

bool OAIPolicyTopicEvidence::is_domain_call_Valid() const{
    return m_domain_call_isValid;
}

OAIDownloadSizeEvidence OAIPolicyTopicEvidence::getDownloadSize() const {
    return m_download_size;
}
void OAIPolicyTopicEvidence::setDownloadSize(const OAIDownloadSizeEvidence &download_size) {
    m_download_size = download_size;
    m_download_size_isSet = true;
}

bool OAIPolicyTopicEvidence::is_download_size_Set() const{
    return m_download_size_isSet;
}

bool OAIPolicyTopicEvidence::is_download_size_Valid() const{
    return m_download_size_isValid;
}

OAIHttpCallEvidence OAIPolicyTopicEvidence::getHttpCall() const {
    return m_http_call;
}
void OAIPolicyTopicEvidence::setHttpCall(const OAIHttpCallEvidence &http_call) {
    m_http_call = http_call;
    m_http_call_isSet = true;
}

bool OAIPolicyTopicEvidence::is_http_call_Set() const{
    return m_http_call_isSet;
}

bool OAIPolicyTopicEvidence::is_http_call_Valid() const{
    return m_http_call_isValid;
}

OAIHttpCookieEvidence OAIPolicyTopicEvidence::getHttpCookie() const {
    return m_http_cookie;
}
void OAIPolicyTopicEvidence::setHttpCookie(const OAIHttpCookieEvidence &http_cookie) {
    m_http_cookie = http_cookie;
    m_http_cookie_isSet = true;
}

bool OAIPolicyTopicEvidence::is_http_cookie_Set() const{
    return m_http_cookie_isSet;
}

bool OAIPolicyTopicEvidence::is_http_cookie_Valid() const{
    return m_http_cookie_isValid;
}

bool OAIPolicyTopicEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_not_crawlable.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_not_working.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_url.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_domain_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_size.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_call.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_cookie.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyTopicEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
