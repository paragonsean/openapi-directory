/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAdTechnologyProviders.h
 *
 * The list of detected Ad Technology Providers for this creative. Bids placed for inventory that will serve to EEA or UK users are expected to comply with GDPR requirements. You must ensure that the creatives used in such bids should contain only user consented ad technology providers as indicated in the bid request. Google reserves the right to filter non-compliant bids. User consented ad technology providers can be found in the [Google Protocol](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) with the &#x60;BidRequest.adslot.consented_providers_settings&#x60; field, and can be found as an [OpenRTB extension](https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto) with the &#x60;BidRequest.user.ext.consented_providers_settings&#x60; and &#x60;BidRequest.user.ext.consent&#x60; fields. See https://support.google.com/authorizedbuyers/answer/9789378 for additional information about the Google TCF v2 integration.
 */

#ifndef OAIAdTechnologyProviders_H
#define OAIAdTechnologyProviders_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAdTechnologyProviders : public OAIObject {
public:
    OAIAdTechnologyProviders();
    OAIAdTechnologyProviders(QString json);
    ~OAIAdTechnologyProviders() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getDetectedGvlIds() const;
    void setDetectedGvlIds(const QList<QString> &detected_gvl_ids);
    bool is_detected_gvl_ids_Set() const;
    bool is_detected_gvl_ids_Valid() const;

    QList<QString> getDetectedProviderIds() const;
    void setDetectedProviderIds(const QList<QString> &detected_provider_ids);
    bool is_detected_provider_ids_Set() const;
    bool is_detected_provider_ids_Valid() const;

    QList<QString> getUnidentifiedProviderDomains() const;
    void setUnidentifiedProviderDomains(const QList<QString> &unidentified_provider_domains);
    bool is_unidentified_provider_domains_Set() const;
    bool is_unidentified_provider_domains_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_detected_gvl_ids;
    bool m_detected_gvl_ids_isSet;
    bool m_detected_gvl_ids_isValid;

    QList<QString> m_detected_provider_ids;
    bool m_detected_provider_ids_isSet;
    bool m_detected_provider_ids_isValid;

    QList<QString> m_unidentified_provider_domains;
    bool m_unidentified_provider_domains_isSet;
    bool m_unidentified_provider_domains_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAdTechnologyProviders)

#endif // OAIAdTechnologyProviders_H
