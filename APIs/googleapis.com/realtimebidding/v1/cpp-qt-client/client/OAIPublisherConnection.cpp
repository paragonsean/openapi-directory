/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublisherConnection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublisherConnection::OAIPublisherConnection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublisherConnection::OAIPublisherConnection() {
    this->initializeModel();
}

OAIPublisherConnection::~OAIPublisherConnection() {}

void OAIPublisherConnection::initializeModel() {

    m_bidding_state_isSet = false;
    m_bidding_state_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_platform_isSet = false;
    m_publisher_platform_isValid = false;
}

void OAIPublisherConnection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublisherConnection::fromJsonObject(QJsonObject json) {

    m_bidding_state_isValid = ::OpenAPI::fromJsonValue(m_bidding_state, json[QString("biddingState")]);
    m_bidding_state_isSet = !json[QString("biddingState")].isNull() && m_bidding_state_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_platform_isValid = ::OpenAPI::fromJsonValue(m_publisher_platform, json[QString("publisherPlatform")]);
    m_publisher_platform_isSet = !json[QString("publisherPlatform")].isNull() && m_publisher_platform_isValid;
}

QString OAIPublisherConnection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublisherConnection::asJsonObject() const {
    QJsonObject obj;
    if (m_bidding_state_isSet) {
        obj.insert(QString("biddingState"), ::OpenAPI::toJsonValue(m_bidding_state));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_platform_isSet) {
        obj.insert(QString("publisherPlatform"), ::OpenAPI::toJsonValue(m_publisher_platform));
    }
    return obj;
}

QString OAIPublisherConnection::getBiddingState() const {
    return m_bidding_state;
}
void OAIPublisherConnection::setBiddingState(const QString &bidding_state) {
    m_bidding_state = bidding_state;
    m_bidding_state_isSet = true;
}

bool OAIPublisherConnection::is_bidding_state_Set() const{
    return m_bidding_state_isSet;
}

bool OAIPublisherConnection::is_bidding_state_Valid() const{
    return m_bidding_state_isValid;
}

QString OAIPublisherConnection::getCreateTime() const {
    return m_create_time;
}
void OAIPublisherConnection::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIPublisherConnection::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIPublisherConnection::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIPublisherConnection::getDisplayName() const {
    return m_display_name;
}
void OAIPublisherConnection::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPublisherConnection::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPublisherConnection::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIPublisherConnection::getName() const {
    return m_name;
}
void OAIPublisherConnection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPublisherConnection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPublisherConnection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIPublisherConnection::getPublisherPlatform() const {
    return m_publisher_platform;
}
void OAIPublisherConnection::setPublisherPlatform(const QString &publisher_platform) {
    m_publisher_platform = publisher_platform;
    m_publisher_platform_isSet = true;
}

bool OAIPublisherConnection::is_publisher_platform_Set() const{
    return m_publisher_platform_isSet;
}

bool OAIPublisherConnection::is_publisher_platform_Valid() const{
    return m_publisher_platform_isValid;
}

bool OAIPublisherConnection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bidding_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_platform_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublisherConnection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
