/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListBuyersResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListBuyersResponse::OAIListBuyersResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListBuyersResponse::OAIListBuyersResponse() {
    this->initializeModel();
}

OAIListBuyersResponse::~OAIListBuyersResponse() {}

void OAIListBuyersResponse::initializeModel() {

    m_buyers_isSet = false;
    m_buyers_isValid = false;

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;
}

void OAIListBuyersResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListBuyersResponse::fromJsonObject(QJsonObject json) {

    m_buyers_isValid = ::OpenAPI::fromJsonValue(m_buyers, json[QString("buyers")]);
    m_buyers_isSet = !json[QString("buyers")].isNull() && m_buyers_isValid;

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;
}

QString OAIListBuyersResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListBuyersResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_buyers.size() > 0) {
        obj.insert(QString("buyers"), ::OpenAPI::toJsonValue(m_buyers));
    }
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    return obj;
}

QList<OAIBuyer> OAIListBuyersResponse::getBuyers() const {
    return m_buyers;
}
void OAIListBuyersResponse::setBuyers(const QList<OAIBuyer> &buyers) {
    m_buyers = buyers;
    m_buyers_isSet = true;
}

bool OAIListBuyersResponse::is_buyers_Set() const{
    return m_buyers_isSet;
}

bool OAIListBuyersResponse::is_buyers_Valid() const{
    return m_buyers_isValid;
}

QString OAIListBuyersResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListBuyersResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListBuyersResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListBuyersResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

bool OAIListBuyersResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListBuyersResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
