/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicyTopicEvidence.h
 *
 * Evidence associated with a policy topic entry.
 */

#ifndef OAIPolicyTopicEvidence_H
#define OAIPolicyTopicEvidence_H

#include <QJsonObject>

#include "OAIDestinationNotCrawlableEvidence.h"
#include "OAIDestinationNotWorkingEvidence.h"
#include "OAIDestinationUrlEvidence.h"
#include "OAIDomainCallEvidence.h"
#include "OAIDownloadSizeEvidence.h"
#include "OAIHttpCallEvidence.h"
#include "OAIHttpCookieEvidence.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDestinationNotCrawlableEvidence;
class OAIDestinationNotWorkingEvidence;
class OAIDestinationUrlEvidence;
class OAIDomainCallEvidence;
class OAIDownloadSizeEvidence;
class OAIHttpCallEvidence;
class OAIHttpCookieEvidence;

class OAIPolicyTopicEvidence : public OAIObject {
public:
    OAIPolicyTopicEvidence();
    OAIPolicyTopicEvidence(QString json);
    ~OAIPolicyTopicEvidence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDestinationNotCrawlableEvidence getDestinationNotCrawlable() const;
    void setDestinationNotCrawlable(const OAIDestinationNotCrawlableEvidence &destination_not_crawlable);
    bool is_destination_not_crawlable_Set() const;
    bool is_destination_not_crawlable_Valid() const;

    OAIDestinationNotWorkingEvidence getDestinationNotWorking() const;
    void setDestinationNotWorking(const OAIDestinationNotWorkingEvidence &destination_not_working);
    bool is_destination_not_working_Set() const;
    bool is_destination_not_working_Valid() const;

    OAIDestinationUrlEvidence getDestinationUrl() const;
    void setDestinationUrl(const OAIDestinationUrlEvidence &destination_url);
    bool is_destination_url_Set() const;
    bool is_destination_url_Valid() const;

    OAIDomainCallEvidence getDomainCall() const;
    void setDomainCall(const OAIDomainCallEvidence &domain_call);
    bool is_domain_call_Set() const;
    bool is_domain_call_Valid() const;

    OAIDownloadSizeEvidence getDownloadSize() const;
    void setDownloadSize(const OAIDownloadSizeEvidence &download_size);
    bool is_download_size_Set() const;
    bool is_download_size_Valid() const;

    OAIHttpCallEvidence getHttpCall() const;
    void setHttpCall(const OAIHttpCallEvidence &http_call);
    bool is_http_call_Set() const;
    bool is_http_call_Valid() const;

    OAIHttpCookieEvidence getHttpCookie() const;
    void setHttpCookie(const OAIHttpCookieEvidence &http_cookie);
    bool is_http_cookie_Set() const;
    bool is_http_cookie_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDestinationNotCrawlableEvidence m_destination_not_crawlable;
    bool m_destination_not_crawlable_isSet;
    bool m_destination_not_crawlable_isValid;

    OAIDestinationNotWorkingEvidence m_destination_not_working;
    bool m_destination_not_working_isSet;
    bool m_destination_not_working_isValid;

    OAIDestinationUrlEvidence m_destination_url;
    bool m_destination_url_isSet;
    bool m_destination_url_isValid;

    OAIDomainCallEvidence m_domain_call;
    bool m_domain_call_isSet;
    bool m_domain_call_isValid;

    OAIDownloadSizeEvidence m_download_size;
    bool m_download_size_isSet;
    bool m_download_size_isValid;

    OAIHttpCallEvidence m_http_call;
    bool m_http_call_isSet;
    bool m_http_call_isValid;

    OAIHttpCookieEvidence m_http_cookie;
    bool m_http_cookie_isSet;
    bool m_http_cookie_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicyTopicEvidence)

#endif // OAIPolicyTopicEvidence_H
