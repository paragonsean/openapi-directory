/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpCallEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpCallEvidence::OAIHttpCallEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpCallEvidence::OAIHttpCallEvidence() {
    this->initializeModel();
}

OAIHttpCallEvidence::~OAIHttpCallEvidence() {}

void OAIHttpCallEvidence::initializeModel() {

    m_urls_isSet = false;
    m_urls_isValid = false;
}

void OAIHttpCallEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpCallEvidence::fromJsonObject(QJsonObject json) {

    m_urls_isValid = ::OpenAPI::fromJsonValue(m_urls, json[QString("urls")]);
    m_urls_isSet = !json[QString("urls")].isNull() && m_urls_isValid;
}

QString OAIHttpCallEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpCallEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_urls.size() > 0) {
        obj.insert(QString("urls"), ::OpenAPI::toJsonValue(m_urls));
    }
    return obj;
}

QList<QString> OAIHttpCallEvidence::getUrls() const {
    return m_urls;
}
void OAIHttpCallEvidence::setUrls(const QList<QString> &urls) {
    m_urls = urls;
    m_urls_isSet = true;
}

bool OAIHttpCallEvidence::is_urls_Set() const{
    return m_urls_isSet;
}

bool OAIHttpCallEvidence::is_urls_Valid() const{
    return m_urls_isValid;
}

bool OAIHttpCallEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpCallEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
