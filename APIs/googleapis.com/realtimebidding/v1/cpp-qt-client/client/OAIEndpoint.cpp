/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEndpoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEndpoint::OAIEndpoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEndpoint::OAIEndpoint() {
    this->initializeModel();
}

OAIEndpoint::~OAIEndpoint() {}

void OAIEndpoint::initializeModel() {

    m_bid_protocol_isSet = false;
    m_bid_protocol_isValid = false;

    m_maximum_qps_isSet = false;
    m_maximum_qps_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_trading_location_isSet = false;
    m_trading_location_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIEndpoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEndpoint::fromJsonObject(QJsonObject json) {

    m_bid_protocol_isValid = ::OpenAPI::fromJsonValue(m_bid_protocol, json[QString("bidProtocol")]);
    m_bid_protocol_isSet = !json[QString("bidProtocol")].isNull() && m_bid_protocol_isValid;

    m_maximum_qps_isValid = ::OpenAPI::fromJsonValue(m_maximum_qps, json[QString("maximumQps")]);
    m_maximum_qps_isSet = !json[QString("maximumQps")].isNull() && m_maximum_qps_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_trading_location_isValid = ::OpenAPI::fromJsonValue(m_trading_location, json[QString("tradingLocation")]);
    m_trading_location_isSet = !json[QString("tradingLocation")].isNull() && m_trading_location_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIEndpoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEndpoint::asJsonObject() const {
    QJsonObject obj;
    if (m_bid_protocol_isSet) {
        obj.insert(QString("bidProtocol"), ::OpenAPI::toJsonValue(m_bid_protocol));
    }
    if (m_maximum_qps_isSet) {
        obj.insert(QString("maximumQps"), ::OpenAPI::toJsonValue(m_maximum_qps));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_trading_location_isSet) {
        obj.insert(QString("tradingLocation"), ::OpenAPI::toJsonValue(m_trading_location));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QString OAIEndpoint::getBidProtocol() const {
    return m_bid_protocol;
}
void OAIEndpoint::setBidProtocol(const QString &bid_protocol) {
    m_bid_protocol = bid_protocol;
    m_bid_protocol_isSet = true;
}

bool OAIEndpoint::is_bid_protocol_Set() const{
    return m_bid_protocol_isSet;
}

bool OAIEndpoint::is_bid_protocol_Valid() const{
    return m_bid_protocol_isValid;
}

QString OAIEndpoint::getMaximumQps() const {
    return m_maximum_qps;
}
void OAIEndpoint::setMaximumQps(const QString &maximum_qps) {
    m_maximum_qps = maximum_qps;
    m_maximum_qps_isSet = true;
}

bool OAIEndpoint::is_maximum_qps_Set() const{
    return m_maximum_qps_isSet;
}

bool OAIEndpoint::is_maximum_qps_Valid() const{
    return m_maximum_qps_isValid;
}

QString OAIEndpoint::getName() const {
    return m_name;
}
void OAIEndpoint::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEndpoint::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEndpoint::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIEndpoint::getTradingLocation() const {
    return m_trading_location;
}
void OAIEndpoint::setTradingLocation(const QString &trading_location) {
    m_trading_location = trading_location;
    m_trading_location_isSet = true;
}

bool OAIEndpoint::is_trading_location_Set() const{
    return m_trading_location_isSet;
}

bool OAIEndpoint::is_trading_location_Valid() const{
    return m_trading_location_isValid;
}

QString OAIEndpoint::getUrl() const {
    return m_url;
}
void OAIEndpoint::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIEndpoint::is_url_Set() const{
    return m_url_isSet;
}

bool OAIEndpoint::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIEndpoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bid_protocol_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_trading_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEndpoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
