/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListPublisherConnectionsResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListPublisherConnectionsResponse::OAIListPublisherConnectionsResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListPublisherConnectionsResponse::OAIListPublisherConnectionsResponse() {
    this->initializeModel();
}

OAIListPublisherConnectionsResponse::~OAIListPublisherConnectionsResponse() {}

void OAIListPublisherConnectionsResponse::initializeModel() {

    m_next_page_token_isSet = false;
    m_next_page_token_isValid = false;

    m_publisher_connections_isSet = false;
    m_publisher_connections_isValid = false;
}

void OAIListPublisherConnectionsResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListPublisherConnectionsResponse::fromJsonObject(QJsonObject json) {

    m_next_page_token_isValid = ::OpenAPI::fromJsonValue(m_next_page_token, json[QString("nextPageToken")]);
    m_next_page_token_isSet = !json[QString("nextPageToken")].isNull() && m_next_page_token_isValid;

    m_publisher_connections_isValid = ::OpenAPI::fromJsonValue(m_publisher_connections, json[QString("publisherConnections")]);
    m_publisher_connections_isSet = !json[QString("publisherConnections")].isNull() && m_publisher_connections_isValid;
}

QString OAIListPublisherConnectionsResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListPublisherConnectionsResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_next_page_token_isSet) {
        obj.insert(QString("nextPageToken"), ::OpenAPI::toJsonValue(m_next_page_token));
    }
    if (m_publisher_connections.size() > 0) {
        obj.insert(QString("publisherConnections"), ::OpenAPI::toJsonValue(m_publisher_connections));
    }
    return obj;
}

QString OAIListPublisherConnectionsResponse::getNextPageToken() const {
    return m_next_page_token;
}
void OAIListPublisherConnectionsResponse::setNextPageToken(const QString &next_page_token) {
    m_next_page_token = next_page_token;
    m_next_page_token_isSet = true;
}

bool OAIListPublisherConnectionsResponse::is_next_page_token_Set() const{
    return m_next_page_token_isSet;
}

bool OAIListPublisherConnectionsResponse::is_next_page_token_Valid() const{
    return m_next_page_token_isValid;
}

QList<OAIPublisherConnection> OAIListPublisherConnectionsResponse::getPublisherConnections() const {
    return m_publisher_connections;
}
void OAIListPublisherConnectionsResponse::setPublisherConnections(const QList<OAIPublisherConnection> &publisher_connections) {
    m_publisher_connections = publisher_connections;
    m_publisher_connections_isSet = true;
}

bool OAIListPublisherConnectionsResponse::is_publisher_connections_Set() const{
    return m_publisher_connections_isSet;
}

bool OAIListPublisherConnectionsResponse::is_publisher_connections_Valid() const{
    return m_publisher_connections_isValid;
}

bool OAIListPublisherConnectionsResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_page_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_connections.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListPublisherConnectionsResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
