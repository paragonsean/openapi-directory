/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyTopicEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyTopicEntry::OAIPolicyTopicEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyTopicEntry::OAIPolicyTopicEntry() {
    this->initializeModel();
}

OAIPolicyTopicEntry::~OAIPolicyTopicEntry() {}

void OAIPolicyTopicEntry::initializeModel() {

    m_evidences_isSet = false;
    m_evidences_isValid = false;

    m_help_center_url_isSet = false;
    m_help_center_url_isValid = false;

    m_missing_certificate_isSet = false;
    m_missing_certificate_isValid = false;

    m_policy_topic_isSet = false;
    m_policy_topic_isValid = false;
}

void OAIPolicyTopicEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyTopicEntry::fromJsonObject(QJsonObject json) {

    m_evidences_isValid = ::OpenAPI::fromJsonValue(m_evidences, json[QString("evidences")]);
    m_evidences_isSet = !json[QString("evidences")].isNull() && m_evidences_isValid;

    m_help_center_url_isValid = ::OpenAPI::fromJsonValue(m_help_center_url, json[QString("helpCenterUrl")]);
    m_help_center_url_isSet = !json[QString("helpCenterUrl")].isNull() && m_help_center_url_isValid;

    m_missing_certificate_isValid = ::OpenAPI::fromJsonValue(m_missing_certificate, json[QString("missingCertificate")]);
    m_missing_certificate_isSet = !json[QString("missingCertificate")].isNull() && m_missing_certificate_isValid;

    m_policy_topic_isValid = ::OpenAPI::fromJsonValue(m_policy_topic, json[QString("policyTopic")]);
    m_policy_topic_isSet = !json[QString("policyTopic")].isNull() && m_policy_topic_isValid;
}

QString OAIPolicyTopicEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyTopicEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_evidences.size() > 0) {
        obj.insert(QString("evidences"), ::OpenAPI::toJsonValue(m_evidences));
    }
    if (m_help_center_url_isSet) {
        obj.insert(QString("helpCenterUrl"), ::OpenAPI::toJsonValue(m_help_center_url));
    }
    if (m_missing_certificate_isSet) {
        obj.insert(QString("missingCertificate"), ::OpenAPI::toJsonValue(m_missing_certificate));
    }
    if (m_policy_topic_isSet) {
        obj.insert(QString("policyTopic"), ::OpenAPI::toJsonValue(m_policy_topic));
    }
    return obj;
}

QList<OAIPolicyTopicEvidence> OAIPolicyTopicEntry::getEvidences() const {
    return m_evidences;
}
void OAIPolicyTopicEntry::setEvidences(const QList<OAIPolicyTopicEvidence> &evidences) {
    m_evidences = evidences;
    m_evidences_isSet = true;
}

bool OAIPolicyTopicEntry::is_evidences_Set() const{
    return m_evidences_isSet;
}

bool OAIPolicyTopicEntry::is_evidences_Valid() const{
    return m_evidences_isValid;
}

QString OAIPolicyTopicEntry::getHelpCenterUrl() const {
    return m_help_center_url;
}
void OAIPolicyTopicEntry::setHelpCenterUrl(const QString &help_center_url) {
    m_help_center_url = help_center_url;
    m_help_center_url_isSet = true;
}

bool OAIPolicyTopicEntry::is_help_center_url_Set() const{
    return m_help_center_url_isSet;
}

bool OAIPolicyTopicEntry::is_help_center_url_Valid() const{
    return m_help_center_url_isValid;
}

bool OAIPolicyTopicEntry::isMissingCertificate() const {
    return m_missing_certificate;
}
void OAIPolicyTopicEntry::setMissingCertificate(const bool &missing_certificate) {
    m_missing_certificate = missing_certificate;
    m_missing_certificate_isSet = true;
}

bool OAIPolicyTopicEntry::is_missing_certificate_Set() const{
    return m_missing_certificate_isSet;
}

bool OAIPolicyTopicEntry::is_missing_certificate_Valid() const{
    return m_missing_certificate_isValid;
}

QString OAIPolicyTopicEntry::getPolicyTopic() const {
    return m_policy_topic;
}
void OAIPolicyTopicEntry::setPolicyTopic(const QString &policy_topic) {
    m_policy_topic = policy_topic;
    m_policy_topic_isSet = true;
}

bool OAIPolicyTopicEntry::is_policy_topic_Set() const{
    return m_policy_topic_isSet;
}

bool OAIPolicyTopicEntry::is_policy_topic_Valid() const{
    return m_policy_topic_isValid;
}

bool OAIPolicyTopicEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_help_center_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_missing_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyTopicEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
