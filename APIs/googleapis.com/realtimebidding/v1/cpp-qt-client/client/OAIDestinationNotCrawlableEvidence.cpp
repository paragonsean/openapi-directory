/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationNotCrawlableEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationNotCrawlableEvidence::OAIDestinationNotCrawlableEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationNotCrawlableEvidence::OAIDestinationNotCrawlableEvidence() {
    this->initializeModel();
}

OAIDestinationNotCrawlableEvidence::~OAIDestinationNotCrawlableEvidence() {}

void OAIDestinationNotCrawlableEvidence::initializeModel() {

    m_crawl_time_isSet = false;
    m_crawl_time_isValid = false;

    m_crawled_url_isSet = false;
    m_crawled_url_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIDestinationNotCrawlableEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationNotCrawlableEvidence::fromJsonObject(QJsonObject json) {

    m_crawl_time_isValid = ::OpenAPI::fromJsonValue(m_crawl_time, json[QString("crawlTime")]);
    m_crawl_time_isSet = !json[QString("crawlTime")].isNull() && m_crawl_time_isValid;

    m_crawled_url_isValid = ::OpenAPI::fromJsonValue(m_crawled_url, json[QString("crawledUrl")]);
    m_crawled_url_isSet = !json[QString("crawledUrl")].isNull() && m_crawled_url_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIDestinationNotCrawlableEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationNotCrawlableEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_crawl_time_isSet) {
        obj.insert(QString("crawlTime"), ::OpenAPI::toJsonValue(m_crawl_time));
    }
    if (m_crawled_url_isSet) {
        obj.insert(QString("crawledUrl"), ::OpenAPI::toJsonValue(m_crawled_url));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIDestinationNotCrawlableEvidence::getCrawlTime() const {
    return m_crawl_time;
}
void OAIDestinationNotCrawlableEvidence::setCrawlTime(const QString &crawl_time) {
    m_crawl_time = crawl_time;
    m_crawl_time_isSet = true;
}

bool OAIDestinationNotCrawlableEvidence::is_crawl_time_Set() const{
    return m_crawl_time_isSet;
}

bool OAIDestinationNotCrawlableEvidence::is_crawl_time_Valid() const{
    return m_crawl_time_isValid;
}

QString OAIDestinationNotCrawlableEvidence::getCrawledUrl() const {
    return m_crawled_url;
}
void OAIDestinationNotCrawlableEvidence::setCrawledUrl(const QString &crawled_url) {
    m_crawled_url = crawled_url;
    m_crawled_url_isSet = true;
}

bool OAIDestinationNotCrawlableEvidence::is_crawled_url_Set() const{
    return m_crawled_url_isSet;
}

bool OAIDestinationNotCrawlableEvidence::is_crawled_url_Valid() const{
    return m_crawled_url_isValid;
}

QString OAIDestinationNotCrawlableEvidence::getReason() const {
    return m_reason;
}
void OAIDestinationNotCrawlableEvidence::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIDestinationNotCrawlableEvidence::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIDestinationNotCrawlableEvidence::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIDestinationNotCrawlableEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_crawl_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crawled_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationNotCrawlableEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
