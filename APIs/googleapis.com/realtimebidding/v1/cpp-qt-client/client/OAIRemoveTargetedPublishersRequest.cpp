/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveTargetedPublishersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveTargetedPublishersRequest::OAIRemoveTargetedPublishersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveTargetedPublishersRequest::OAIRemoveTargetedPublishersRequest() {
    this->initializeModel();
}

OAIRemoveTargetedPublishersRequest::~OAIRemoveTargetedPublishersRequest() {}

void OAIRemoveTargetedPublishersRequest::initializeModel() {

    m_publisher_ids_isSet = false;
    m_publisher_ids_isValid = false;
}

void OAIRemoveTargetedPublishersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveTargetedPublishersRequest::fromJsonObject(QJsonObject json) {

    m_publisher_ids_isValid = ::OpenAPI::fromJsonValue(m_publisher_ids, json[QString("publisherIds")]);
    m_publisher_ids_isSet = !json[QString("publisherIds")].isNull() && m_publisher_ids_isValid;
}

QString OAIRemoveTargetedPublishersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveTargetedPublishersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_ids.size() > 0) {
        obj.insert(QString("publisherIds"), ::OpenAPI::toJsonValue(m_publisher_ids));
    }
    return obj;
}

QList<QString> OAIRemoveTargetedPublishersRequest::getPublisherIds() const {
    return m_publisher_ids;
}
void OAIRemoveTargetedPublishersRequest::setPublisherIds(const QList<QString> &publisher_ids) {
    m_publisher_ids = publisher_ids;
    m_publisher_ids_isSet = true;
}

bool OAIRemoveTargetedPublishersRequest::is_publisher_ids_Set() const{
    return m_publisher_ids_isSet;
}

bool OAIRemoveTargetedPublishersRequest::is_publisher_ids_Valid() const{
    return m_publisher_ids_isValid;
}

bool OAIRemoveTargetedPublishersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveTargetedPublishersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
