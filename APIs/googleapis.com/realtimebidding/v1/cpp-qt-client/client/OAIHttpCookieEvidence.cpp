/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpCookieEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpCookieEvidence::OAIHttpCookieEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpCookieEvidence::OAIHttpCookieEvidence() {
    this->initializeModel();
}

OAIHttpCookieEvidence::~OAIHttpCookieEvidence() {}

void OAIHttpCookieEvidence::initializeModel() {

    m_cookie_names_isSet = false;
    m_cookie_names_isValid = false;

    m_max_cookie_count_isSet = false;
    m_max_cookie_count_isValid = false;
}

void OAIHttpCookieEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpCookieEvidence::fromJsonObject(QJsonObject json) {

    m_cookie_names_isValid = ::OpenAPI::fromJsonValue(m_cookie_names, json[QString("cookieNames")]);
    m_cookie_names_isSet = !json[QString("cookieNames")].isNull() && m_cookie_names_isValid;

    m_max_cookie_count_isValid = ::OpenAPI::fromJsonValue(m_max_cookie_count, json[QString("maxCookieCount")]);
    m_max_cookie_count_isSet = !json[QString("maxCookieCount")].isNull() && m_max_cookie_count_isValid;
}

QString OAIHttpCookieEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpCookieEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_cookie_names.size() > 0) {
        obj.insert(QString("cookieNames"), ::OpenAPI::toJsonValue(m_cookie_names));
    }
    if (m_max_cookie_count_isSet) {
        obj.insert(QString("maxCookieCount"), ::OpenAPI::toJsonValue(m_max_cookie_count));
    }
    return obj;
}

QList<QString> OAIHttpCookieEvidence::getCookieNames() const {
    return m_cookie_names;
}
void OAIHttpCookieEvidence::setCookieNames(const QList<QString> &cookie_names) {
    m_cookie_names = cookie_names;
    m_cookie_names_isSet = true;
}

bool OAIHttpCookieEvidence::is_cookie_names_Set() const{
    return m_cookie_names_isSet;
}

bool OAIHttpCookieEvidence::is_cookie_names_Valid() const{
    return m_cookie_names_isValid;
}

qint32 OAIHttpCookieEvidence::getMaxCookieCount() const {
    return m_max_cookie_count;
}
void OAIHttpCookieEvidence::setMaxCookieCount(const qint32 &max_cookie_count) {
    m_max_cookie_count = max_cookie_count;
    m_max_cookie_count_isSet = true;
}

bool OAIHttpCookieEvidence::is_max_cookie_count_Set() const{
    return m_max_cookie_count_isSet;
}

bool OAIHttpCookieEvidence::is_max_cookie_count_Valid() const{
    return m_max_cookie_count_isValid;
}

bool OAIHttpCookieEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cookie_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_cookie_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpCookieEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
