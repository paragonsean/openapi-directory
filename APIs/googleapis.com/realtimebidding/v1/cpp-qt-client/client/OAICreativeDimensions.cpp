/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeDimensions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeDimensions::OAICreativeDimensions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeDimensions::OAICreativeDimensions() {
    this->initializeModel();
}

OAICreativeDimensions::~OAICreativeDimensions() {}

void OAICreativeDimensions::initializeModel() {

    m_height_isSet = false;
    m_height_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAICreativeDimensions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeDimensions::fromJsonObject(QJsonObject json) {

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAICreativeDimensions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeDimensions::asJsonObject() const {
    QJsonObject obj;
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAICreativeDimensions::getHeight() const {
    return m_height;
}
void OAICreativeDimensions::setHeight(const QString &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAICreativeDimensions::is_height_Set() const{
    return m_height_isSet;
}

bool OAICreativeDimensions::is_height_Valid() const{
    return m_height_isValid;
}

QString OAICreativeDimensions::getWidth() const {
    return m_width;
}
void OAICreativeDimensions::setWidth(const QString &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAICreativeDimensions::is_width_Set() const{
    return m_width_isSet;
}

bool OAICreativeDimensions::is_width_Valid() const{
    return m_width_isValid;
}

bool OAICreativeDimensions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeDimensions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
