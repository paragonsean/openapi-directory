/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestinationNotWorkingEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestinationNotWorkingEvidence::OAIDestinationNotWorkingEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestinationNotWorkingEvidence::OAIDestinationNotWorkingEvidence() {
    this->initializeModel();
}

OAIDestinationNotWorkingEvidence::~OAIDestinationNotWorkingEvidence() {}

void OAIDestinationNotWorkingEvidence::initializeModel() {

    m_dns_error_isSet = false;
    m_dns_error_isValid = false;

    m_expanded_url_isSet = false;
    m_expanded_url_isValid = false;

    m_http_error_isSet = false;
    m_http_error_isValid = false;

    m_invalid_page_isSet = false;
    m_invalid_page_isValid = false;

    m_last_check_time_isSet = false;
    m_last_check_time_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_redirection_error_isSet = false;
    m_redirection_error_isValid = false;

    m_url_rejected_isSet = false;
    m_url_rejected_isValid = false;
}

void OAIDestinationNotWorkingEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestinationNotWorkingEvidence::fromJsonObject(QJsonObject json) {

    m_dns_error_isValid = ::OpenAPI::fromJsonValue(m_dns_error, json[QString("dnsError")]);
    m_dns_error_isSet = !json[QString("dnsError")].isNull() && m_dns_error_isValid;

    m_expanded_url_isValid = ::OpenAPI::fromJsonValue(m_expanded_url, json[QString("expandedUrl")]);
    m_expanded_url_isSet = !json[QString("expandedUrl")].isNull() && m_expanded_url_isValid;

    m_http_error_isValid = ::OpenAPI::fromJsonValue(m_http_error, json[QString("httpError")]);
    m_http_error_isSet = !json[QString("httpError")].isNull() && m_http_error_isValid;

    m_invalid_page_isValid = ::OpenAPI::fromJsonValue(m_invalid_page, json[QString("invalidPage")]);
    m_invalid_page_isSet = !json[QString("invalidPage")].isNull() && m_invalid_page_isValid;

    m_last_check_time_isValid = ::OpenAPI::fromJsonValue(m_last_check_time, json[QString("lastCheckTime")]);
    m_last_check_time_isSet = !json[QString("lastCheckTime")].isNull() && m_last_check_time_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_redirection_error_isValid = ::OpenAPI::fromJsonValue(m_redirection_error, json[QString("redirectionError")]);
    m_redirection_error_isSet = !json[QString("redirectionError")].isNull() && m_redirection_error_isValid;

    m_url_rejected_isValid = ::OpenAPI::fromJsonValue(m_url_rejected, json[QString("urlRejected")]);
    m_url_rejected_isSet = !json[QString("urlRejected")].isNull() && m_url_rejected_isValid;
}

QString OAIDestinationNotWorkingEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestinationNotWorkingEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_error_isSet) {
        obj.insert(QString("dnsError"), ::OpenAPI::toJsonValue(m_dns_error));
    }
    if (m_expanded_url_isSet) {
        obj.insert(QString("expandedUrl"), ::OpenAPI::toJsonValue(m_expanded_url));
    }
    if (m_http_error_isSet) {
        obj.insert(QString("httpError"), ::OpenAPI::toJsonValue(m_http_error));
    }
    if (m_invalid_page_isSet) {
        obj.insert(QString("invalidPage"), ::OpenAPI::toJsonValue(m_invalid_page));
    }
    if (m_last_check_time_isSet) {
        obj.insert(QString("lastCheckTime"), ::OpenAPI::toJsonValue(m_last_check_time));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_redirection_error_isSet) {
        obj.insert(QString("redirectionError"), ::OpenAPI::toJsonValue(m_redirection_error));
    }
    if (m_url_rejected_isSet) {
        obj.insert(QString("urlRejected"), ::OpenAPI::toJsonValue(m_url_rejected));
    }
    return obj;
}

QString OAIDestinationNotWorkingEvidence::getDnsError() const {
    return m_dns_error;
}
void OAIDestinationNotWorkingEvidence::setDnsError(const QString &dns_error) {
    m_dns_error = dns_error;
    m_dns_error_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_dns_error_Set() const{
    return m_dns_error_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_dns_error_Valid() const{
    return m_dns_error_isValid;
}

QString OAIDestinationNotWorkingEvidence::getExpandedUrl() const {
    return m_expanded_url;
}
void OAIDestinationNotWorkingEvidence::setExpandedUrl(const QString &expanded_url) {
    m_expanded_url = expanded_url;
    m_expanded_url_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_expanded_url_Set() const{
    return m_expanded_url_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_expanded_url_Valid() const{
    return m_expanded_url_isValid;
}

qint32 OAIDestinationNotWorkingEvidence::getHttpError() const {
    return m_http_error;
}
void OAIDestinationNotWorkingEvidence::setHttpError(const qint32 &http_error) {
    m_http_error = http_error;
    m_http_error_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_http_error_Set() const{
    return m_http_error_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_http_error_Valid() const{
    return m_http_error_isValid;
}

QString OAIDestinationNotWorkingEvidence::getInvalidPage() const {
    return m_invalid_page;
}
void OAIDestinationNotWorkingEvidence::setInvalidPage(const QString &invalid_page) {
    m_invalid_page = invalid_page;
    m_invalid_page_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_invalid_page_Set() const{
    return m_invalid_page_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_invalid_page_Valid() const{
    return m_invalid_page_isValid;
}

QString OAIDestinationNotWorkingEvidence::getLastCheckTime() const {
    return m_last_check_time;
}
void OAIDestinationNotWorkingEvidence::setLastCheckTime(const QString &last_check_time) {
    m_last_check_time = last_check_time;
    m_last_check_time_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_last_check_time_Set() const{
    return m_last_check_time_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_last_check_time_Valid() const{
    return m_last_check_time_isValid;
}

QString OAIDestinationNotWorkingEvidence::getPlatform() const {
    return m_platform;
}
void OAIDestinationNotWorkingEvidence::setPlatform(const QString &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_platform_Valid() const{
    return m_platform_isValid;
}

QString OAIDestinationNotWorkingEvidence::getRedirectionError() const {
    return m_redirection_error;
}
void OAIDestinationNotWorkingEvidence::setRedirectionError(const QString &redirection_error) {
    m_redirection_error = redirection_error;
    m_redirection_error_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_redirection_error_Set() const{
    return m_redirection_error_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_redirection_error_Valid() const{
    return m_redirection_error_isValid;
}

QString OAIDestinationNotWorkingEvidence::getUrlRejected() const {
    return m_url_rejected;
}
void OAIDestinationNotWorkingEvidence::setUrlRejected(const QString &url_rejected) {
    m_url_rejected = url_rejected;
    m_url_rejected_isSet = true;
}

bool OAIDestinationNotWorkingEvidence::is_url_rejected_Set() const{
    return m_url_rejected_isSet;
}

bool OAIDestinationNotWorkingEvidence::is_url_rejected_Valid() const{
    return m_url_rejected_isValid;
}

bool OAIDestinationNotWorkingEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expanded_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_check_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirection_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_rejected_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestinationNotWorkingEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
