/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPretargetingConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPretargetingConfig::OAIPretargetingConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPretargetingConfig::OAIPretargetingConfig() {
    this->initializeModel();
}

OAIPretargetingConfig::~OAIPretargetingConfig() {}

void OAIPretargetingConfig::initializeModel() {

    m_allowed_user_targeting_modes_isSet = false;
    m_allowed_user_targeting_modes_isValid = false;

    m_app_targeting_isSet = false;
    m_app_targeting_isValid = false;

    m_billing_id_isSet = false;
    m_billing_id_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_excluded_content_label_ids_isSet = false;
    m_excluded_content_label_ids_isValid = false;

    m_geo_targeting_isSet = false;
    m_geo_targeting_isValid = false;

    m_included_creative_dimensions_isSet = false;
    m_included_creative_dimensions_isValid = false;

    m_included_environments_isSet = false;
    m_included_environments_isValid = false;

    m_included_formats_isSet = false;
    m_included_formats_isValid = false;

    m_included_languages_isSet = false;
    m_included_languages_isValid = false;

    m_included_mobile_operating_system_ids_isSet = false;
    m_included_mobile_operating_system_ids_isValid = false;

    m_included_platforms_isSet = false;
    m_included_platforms_isValid = false;

    m_included_user_id_types_isSet = false;
    m_included_user_id_types_isValid = false;

    m_interstitial_targeting_isSet = false;
    m_interstitial_targeting_isValid = false;

    m_invalid_geo_ids_isSet = false;
    m_invalid_geo_ids_isValid = false;

    m_maximum_qps_isSet = false;
    m_maximum_qps_isValid = false;

    m_minimum_viewability_decile_isSet = false;
    m_minimum_viewability_decile_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_publisher_targeting_isSet = false;
    m_publisher_targeting_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_list_targeting_isSet = false;
    m_user_list_targeting_isValid = false;

    m_vertical_targeting_isSet = false;
    m_vertical_targeting_isValid = false;

    m_web_targeting_isSet = false;
    m_web_targeting_isValid = false;
}

void OAIPretargetingConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPretargetingConfig::fromJsonObject(QJsonObject json) {

    m_allowed_user_targeting_modes_isValid = ::OpenAPI::fromJsonValue(m_allowed_user_targeting_modes, json[QString("allowedUserTargetingModes")]);
    m_allowed_user_targeting_modes_isSet = !json[QString("allowedUserTargetingModes")].isNull() && m_allowed_user_targeting_modes_isValid;

    m_app_targeting_isValid = ::OpenAPI::fromJsonValue(m_app_targeting, json[QString("appTargeting")]);
    m_app_targeting_isSet = !json[QString("appTargeting")].isNull() && m_app_targeting_isValid;

    m_billing_id_isValid = ::OpenAPI::fromJsonValue(m_billing_id, json[QString("billingId")]);
    m_billing_id_isSet = !json[QString("billingId")].isNull() && m_billing_id_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_excluded_content_label_ids_isValid = ::OpenAPI::fromJsonValue(m_excluded_content_label_ids, json[QString("excludedContentLabelIds")]);
    m_excluded_content_label_ids_isSet = !json[QString("excludedContentLabelIds")].isNull() && m_excluded_content_label_ids_isValid;

    m_geo_targeting_isValid = ::OpenAPI::fromJsonValue(m_geo_targeting, json[QString("geoTargeting")]);
    m_geo_targeting_isSet = !json[QString("geoTargeting")].isNull() && m_geo_targeting_isValid;

    m_included_creative_dimensions_isValid = ::OpenAPI::fromJsonValue(m_included_creative_dimensions, json[QString("includedCreativeDimensions")]);
    m_included_creative_dimensions_isSet = !json[QString("includedCreativeDimensions")].isNull() && m_included_creative_dimensions_isValid;

    m_included_environments_isValid = ::OpenAPI::fromJsonValue(m_included_environments, json[QString("includedEnvironments")]);
    m_included_environments_isSet = !json[QString("includedEnvironments")].isNull() && m_included_environments_isValid;

    m_included_formats_isValid = ::OpenAPI::fromJsonValue(m_included_formats, json[QString("includedFormats")]);
    m_included_formats_isSet = !json[QString("includedFormats")].isNull() && m_included_formats_isValid;

    m_included_languages_isValid = ::OpenAPI::fromJsonValue(m_included_languages, json[QString("includedLanguages")]);
    m_included_languages_isSet = !json[QString("includedLanguages")].isNull() && m_included_languages_isValid;

    m_included_mobile_operating_system_ids_isValid = ::OpenAPI::fromJsonValue(m_included_mobile_operating_system_ids, json[QString("includedMobileOperatingSystemIds")]);
    m_included_mobile_operating_system_ids_isSet = !json[QString("includedMobileOperatingSystemIds")].isNull() && m_included_mobile_operating_system_ids_isValid;

    m_included_platforms_isValid = ::OpenAPI::fromJsonValue(m_included_platforms, json[QString("includedPlatforms")]);
    m_included_platforms_isSet = !json[QString("includedPlatforms")].isNull() && m_included_platforms_isValid;

    m_included_user_id_types_isValid = ::OpenAPI::fromJsonValue(m_included_user_id_types, json[QString("includedUserIdTypes")]);
    m_included_user_id_types_isSet = !json[QString("includedUserIdTypes")].isNull() && m_included_user_id_types_isValid;

    m_interstitial_targeting_isValid = ::OpenAPI::fromJsonValue(m_interstitial_targeting, json[QString("interstitialTargeting")]);
    m_interstitial_targeting_isSet = !json[QString("interstitialTargeting")].isNull() && m_interstitial_targeting_isValid;

    m_invalid_geo_ids_isValid = ::OpenAPI::fromJsonValue(m_invalid_geo_ids, json[QString("invalidGeoIds")]);
    m_invalid_geo_ids_isSet = !json[QString("invalidGeoIds")].isNull() && m_invalid_geo_ids_isValid;

    m_maximum_qps_isValid = ::OpenAPI::fromJsonValue(m_maximum_qps, json[QString("maximumQps")]);
    m_maximum_qps_isSet = !json[QString("maximumQps")].isNull() && m_maximum_qps_isValid;

    m_minimum_viewability_decile_isValid = ::OpenAPI::fromJsonValue(m_minimum_viewability_decile, json[QString("minimumViewabilityDecile")]);
    m_minimum_viewability_decile_isSet = !json[QString("minimumViewabilityDecile")].isNull() && m_minimum_viewability_decile_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_publisher_targeting_isValid = ::OpenAPI::fromJsonValue(m_publisher_targeting, json[QString("publisherTargeting")]);
    m_publisher_targeting_isSet = !json[QString("publisherTargeting")].isNull() && m_publisher_targeting_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_list_targeting_isValid = ::OpenAPI::fromJsonValue(m_user_list_targeting, json[QString("userListTargeting")]);
    m_user_list_targeting_isSet = !json[QString("userListTargeting")].isNull() && m_user_list_targeting_isValid;

    m_vertical_targeting_isValid = ::OpenAPI::fromJsonValue(m_vertical_targeting, json[QString("verticalTargeting")]);
    m_vertical_targeting_isSet = !json[QString("verticalTargeting")].isNull() && m_vertical_targeting_isValid;

    m_web_targeting_isValid = ::OpenAPI::fromJsonValue(m_web_targeting, json[QString("webTargeting")]);
    m_web_targeting_isSet = !json[QString("webTargeting")].isNull() && m_web_targeting_isValid;
}

QString OAIPretargetingConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPretargetingConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_allowed_user_targeting_modes.size() > 0) {
        obj.insert(QString("allowedUserTargetingModes"), ::OpenAPI::toJsonValue(m_allowed_user_targeting_modes));
    }
    if (m_app_targeting.isSet()) {
        obj.insert(QString("appTargeting"), ::OpenAPI::toJsonValue(m_app_targeting));
    }
    if (m_billing_id_isSet) {
        obj.insert(QString("billingId"), ::OpenAPI::toJsonValue(m_billing_id));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_excluded_content_label_ids.size() > 0) {
        obj.insert(QString("excludedContentLabelIds"), ::OpenAPI::toJsonValue(m_excluded_content_label_ids));
    }
    if (m_geo_targeting.isSet()) {
        obj.insert(QString("geoTargeting"), ::OpenAPI::toJsonValue(m_geo_targeting));
    }
    if (m_included_creative_dimensions.size() > 0) {
        obj.insert(QString("includedCreativeDimensions"), ::OpenAPI::toJsonValue(m_included_creative_dimensions));
    }
    if (m_included_environments.size() > 0) {
        obj.insert(QString("includedEnvironments"), ::OpenAPI::toJsonValue(m_included_environments));
    }
    if (m_included_formats.size() > 0) {
        obj.insert(QString("includedFormats"), ::OpenAPI::toJsonValue(m_included_formats));
    }
    if (m_included_languages.size() > 0) {
        obj.insert(QString("includedLanguages"), ::OpenAPI::toJsonValue(m_included_languages));
    }
    if (m_included_mobile_operating_system_ids.size() > 0) {
        obj.insert(QString("includedMobileOperatingSystemIds"), ::OpenAPI::toJsonValue(m_included_mobile_operating_system_ids));
    }
    if (m_included_platforms.size() > 0) {
        obj.insert(QString("includedPlatforms"), ::OpenAPI::toJsonValue(m_included_platforms));
    }
    if (m_included_user_id_types.size() > 0) {
        obj.insert(QString("includedUserIdTypes"), ::OpenAPI::toJsonValue(m_included_user_id_types));
    }
    if (m_interstitial_targeting_isSet) {
        obj.insert(QString("interstitialTargeting"), ::OpenAPI::toJsonValue(m_interstitial_targeting));
    }
    if (m_invalid_geo_ids.size() > 0) {
        obj.insert(QString("invalidGeoIds"), ::OpenAPI::toJsonValue(m_invalid_geo_ids));
    }
    if (m_maximum_qps_isSet) {
        obj.insert(QString("maximumQps"), ::OpenAPI::toJsonValue(m_maximum_qps));
    }
    if (m_minimum_viewability_decile_isSet) {
        obj.insert(QString("minimumViewabilityDecile"), ::OpenAPI::toJsonValue(m_minimum_viewability_decile));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_publisher_targeting.isSet()) {
        obj.insert(QString("publisherTargeting"), ::OpenAPI::toJsonValue(m_publisher_targeting));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_list_targeting.isSet()) {
        obj.insert(QString("userListTargeting"), ::OpenAPI::toJsonValue(m_user_list_targeting));
    }
    if (m_vertical_targeting.isSet()) {
        obj.insert(QString("verticalTargeting"), ::OpenAPI::toJsonValue(m_vertical_targeting));
    }
    if (m_web_targeting.isSet()) {
        obj.insert(QString("webTargeting"), ::OpenAPI::toJsonValue(m_web_targeting));
    }
    return obj;
}

QList<QString> OAIPretargetingConfig::getAllowedUserTargetingModes() const {
    return m_allowed_user_targeting_modes;
}
void OAIPretargetingConfig::setAllowedUserTargetingModes(const QList<QString> &allowed_user_targeting_modes) {
    m_allowed_user_targeting_modes = allowed_user_targeting_modes;
    m_allowed_user_targeting_modes_isSet = true;
}

bool OAIPretargetingConfig::is_allowed_user_targeting_modes_Set() const{
    return m_allowed_user_targeting_modes_isSet;
}

bool OAIPretargetingConfig::is_allowed_user_targeting_modes_Valid() const{
    return m_allowed_user_targeting_modes_isValid;
}

OAIAppTargeting OAIPretargetingConfig::getAppTargeting() const {
    return m_app_targeting;
}
void OAIPretargetingConfig::setAppTargeting(const OAIAppTargeting &app_targeting) {
    m_app_targeting = app_targeting;
    m_app_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_app_targeting_Set() const{
    return m_app_targeting_isSet;
}

bool OAIPretargetingConfig::is_app_targeting_Valid() const{
    return m_app_targeting_isValid;
}

QString OAIPretargetingConfig::getBillingId() const {
    return m_billing_id;
}
void OAIPretargetingConfig::setBillingId(const QString &billing_id) {
    m_billing_id = billing_id;
    m_billing_id_isSet = true;
}

bool OAIPretargetingConfig::is_billing_id_Set() const{
    return m_billing_id_isSet;
}

bool OAIPretargetingConfig::is_billing_id_Valid() const{
    return m_billing_id_isValid;
}

QString OAIPretargetingConfig::getDisplayName() const {
    return m_display_name;
}
void OAIPretargetingConfig::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIPretargetingConfig::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIPretargetingConfig::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIPretargetingConfig::getExcludedContentLabelIds() const {
    return m_excluded_content_label_ids;
}
void OAIPretargetingConfig::setExcludedContentLabelIds(const QList<QString> &excluded_content_label_ids) {
    m_excluded_content_label_ids = excluded_content_label_ids;
    m_excluded_content_label_ids_isSet = true;
}

bool OAIPretargetingConfig::is_excluded_content_label_ids_Set() const{
    return m_excluded_content_label_ids_isSet;
}

bool OAIPretargetingConfig::is_excluded_content_label_ids_Valid() const{
    return m_excluded_content_label_ids_isValid;
}

OAINumericTargetingDimension OAIPretargetingConfig::getGeoTargeting() const {
    return m_geo_targeting;
}
void OAIPretargetingConfig::setGeoTargeting(const OAINumericTargetingDimension &geo_targeting) {
    m_geo_targeting = geo_targeting;
    m_geo_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_geo_targeting_Set() const{
    return m_geo_targeting_isSet;
}

bool OAIPretargetingConfig::is_geo_targeting_Valid() const{
    return m_geo_targeting_isValid;
}

QList<OAICreativeDimensions> OAIPretargetingConfig::getIncludedCreativeDimensions() const {
    return m_included_creative_dimensions;
}
void OAIPretargetingConfig::setIncludedCreativeDimensions(const QList<OAICreativeDimensions> &included_creative_dimensions) {
    m_included_creative_dimensions = included_creative_dimensions;
    m_included_creative_dimensions_isSet = true;
}

bool OAIPretargetingConfig::is_included_creative_dimensions_Set() const{
    return m_included_creative_dimensions_isSet;
}

bool OAIPretargetingConfig::is_included_creative_dimensions_Valid() const{
    return m_included_creative_dimensions_isValid;
}

QList<QString> OAIPretargetingConfig::getIncludedEnvironments() const {
    return m_included_environments;
}
void OAIPretargetingConfig::setIncludedEnvironments(const QList<QString> &included_environments) {
    m_included_environments = included_environments;
    m_included_environments_isSet = true;
}

bool OAIPretargetingConfig::is_included_environments_Set() const{
    return m_included_environments_isSet;
}

bool OAIPretargetingConfig::is_included_environments_Valid() const{
    return m_included_environments_isValid;
}

QList<QString> OAIPretargetingConfig::getIncludedFormats() const {
    return m_included_formats;
}
void OAIPretargetingConfig::setIncludedFormats(const QList<QString> &included_formats) {
    m_included_formats = included_formats;
    m_included_formats_isSet = true;
}

bool OAIPretargetingConfig::is_included_formats_Set() const{
    return m_included_formats_isSet;
}

bool OAIPretargetingConfig::is_included_formats_Valid() const{
    return m_included_formats_isValid;
}

QList<QString> OAIPretargetingConfig::getIncludedLanguages() const {
    return m_included_languages;
}
void OAIPretargetingConfig::setIncludedLanguages(const QList<QString> &included_languages) {
    m_included_languages = included_languages;
    m_included_languages_isSet = true;
}

bool OAIPretargetingConfig::is_included_languages_Set() const{
    return m_included_languages_isSet;
}

bool OAIPretargetingConfig::is_included_languages_Valid() const{
    return m_included_languages_isValid;
}

QList<QString> OAIPretargetingConfig::getIncludedMobileOperatingSystemIds() const {
    return m_included_mobile_operating_system_ids;
}
void OAIPretargetingConfig::setIncludedMobileOperatingSystemIds(const QList<QString> &included_mobile_operating_system_ids) {
    m_included_mobile_operating_system_ids = included_mobile_operating_system_ids;
    m_included_mobile_operating_system_ids_isSet = true;
}

bool OAIPretargetingConfig::is_included_mobile_operating_system_ids_Set() const{
    return m_included_mobile_operating_system_ids_isSet;
}

bool OAIPretargetingConfig::is_included_mobile_operating_system_ids_Valid() const{
    return m_included_mobile_operating_system_ids_isValid;
}

QList<QString> OAIPretargetingConfig::getIncludedPlatforms() const {
    return m_included_platforms;
}
void OAIPretargetingConfig::setIncludedPlatforms(const QList<QString> &included_platforms) {
    m_included_platforms = included_platforms;
    m_included_platforms_isSet = true;
}

bool OAIPretargetingConfig::is_included_platforms_Set() const{
    return m_included_platforms_isSet;
}

bool OAIPretargetingConfig::is_included_platforms_Valid() const{
    return m_included_platforms_isValid;
}

QList<QString> OAIPretargetingConfig::getIncludedUserIdTypes() const {
    return m_included_user_id_types;
}
void OAIPretargetingConfig::setIncludedUserIdTypes(const QList<QString> &included_user_id_types) {
    m_included_user_id_types = included_user_id_types;
    m_included_user_id_types_isSet = true;
}

bool OAIPretargetingConfig::is_included_user_id_types_Set() const{
    return m_included_user_id_types_isSet;
}

bool OAIPretargetingConfig::is_included_user_id_types_Valid() const{
    return m_included_user_id_types_isValid;
}

QString OAIPretargetingConfig::getInterstitialTargeting() const {
    return m_interstitial_targeting;
}
void OAIPretargetingConfig::setInterstitialTargeting(const QString &interstitial_targeting) {
    m_interstitial_targeting = interstitial_targeting;
    m_interstitial_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_interstitial_targeting_Set() const{
    return m_interstitial_targeting_isSet;
}

bool OAIPretargetingConfig::is_interstitial_targeting_Valid() const{
    return m_interstitial_targeting_isValid;
}

QList<QString> OAIPretargetingConfig::getInvalidGeoIds() const {
    return m_invalid_geo_ids;
}
void OAIPretargetingConfig::setInvalidGeoIds(const QList<QString> &invalid_geo_ids) {
    m_invalid_geo_ids = invalid_geo_ids;
    m_invalid_geo_ids_isSet = true;
}

bool OAIPretargetingConfig::is_invalid_geo_ids_Set() const{
    return m_invalid_geo_ids_isSet;
}

bool OAIPretargetingConfig::is_invalid_geo_ids_Valid() const{
    return m_invalid_geo_ids_isValid;
}

QString OAIPretargetingConfig::getMaximumQps() const {
    return m_maximum_qps;
}
void OAIPretargetingConfig::setMaximumQps(const QString &maximum_qps) {
    m_maximum_qps = maximum_qps;
    m_maximum_qps_isSet = true;
}

bool OAIPretargetingConfig::is_maximum_qps_Set() const{
    return m_maximum_qps_isSet;
}

bool OAIPretargetingConfig::is_maximum_qps_Valid() const{
    return m_maximum_qps_isValid;
}

qint32 OAIPretargetingConfig::getMinimumViewabilityDecile() const {
    return m_minimum_viewability_decile;
}
void OAIPretargetingConfig::setMinimumViewabilityDecile(const qint32 &minimum_viewability_decile) {
    m_minimum_viewability_decile = minimum_viewability_decile;
    m_minimum_viewability_decile_isSet = true;
}

bool OAIPretargetingConfig::is_minimum_viewability_decile_Set() const{
    return m_minimum_viewability_decile_isSet;
}

bool OAIPretargetingConfig::is_minimum_viewability_decile_Valid() const{
    return m_minimum_viewability_decile_isValid;
}

QString OAIPretargetingConfig::getName() const {
    return m_name;
}
void OAIPretargetingConfig::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPretargetingConfig::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPretargetingConfig::is_name_Valid() const{
    return m_name_isValid;
}

OAIStringTargetingDimension OAIPretargetingConfig::getPublisherTargeting() const {
    return m_publisher_targeting;
}
void OAIPretargetingConfig::setPublisherTargeting(const OAIStringTargetingDimension &publisher_targeting) {
    m_publisher_targeting = publisher_targeting;
    m_publisher_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_publisher_targeting_Set() const{
    return m_publisher_targeting_isSet;
}

bool OAIPretargetingConfig::is_publisher_targeting_Valid() const{
    return m_publisher_targeting_isValid;
}

QString OAIPretargetingConfig::getState() const {
    return m_state;
}
void OAIPretargetingConfig::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPretargetingConfig::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPretargetingConfig::is_state_Valid() const{
    return m_state_isValid;
}

OAINumericTargetingDimension OAIPretargetingConfig::getUserListTargeting() const {
    return m_user_list_targeting;
}
void OAIPretargetingConfig::setUserListTargeting(const OAINumericTargetingDimension &user_list_targeting) {
    m_user_list_targeting = user_list_targeting;
    m_user_list_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_user_list_targeting_Set() const{
    return m_user_list_targeting_isSet;
}

bool OAIPretargetingConfig::is_user_list_targeting_Valid() const{
    return m_user_list_targeting_isValid;
}

OAINumericTargetingDimension OAIPretargetingConfig::getVerticalTargeting() const {
    return m_vertical_targeting;
}
void OAIPretargetingConfig::setVerticalTargeting(const OAINumericTargetingDimension &vertical_targeting) {
    m_vertical_targeting = vertical_targeting;
    m_vertical_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_vertical_targeting_Set() const{
    return m_vertical_targeting_isSet;
}

bool OAIPretargetingConfig::is_vertical_targeting_Valid() const{
    return m_vertical_targeting_isValid;
}

OAIStringTargetingDimension OAIPretargetingConfig::getWebTargeting() const {
    return m_web_targeting;
}
void OAIPretargetingConfig::setWebTargeting(const OAIStringTargetingDimension &web_targeting) {
    m_web_targeting = web_targeting;
    m_web_targeting_isSet = true;
}

bool OAIPretargetingConfig::is_web_targeting_Set() const{
    return m_web_targeting_isSet;
}

bool OAIPretargetingConfig::is_web_targeting_Valid() const{
    return m_web_targeting_isValid;
}

bool OAIPretargetingConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allowed_user_targeting_modes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excluded_content_label_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_geo_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_creative_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_environments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_mobile_operating_system_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_platforms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_user_id_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interstitial_targeting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invalid_geo_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_qps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_viewability_decile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_list_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertical_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPretargetingConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
