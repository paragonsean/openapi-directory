/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaFile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaFile::OAIMediaFile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaFile::OAIMediaFile() {
    this->initializeModel();
}

OAIMediaFile::~OAIMediaFile() {}

void OAIMediaFile::initializeModel() {

    m_bitrate_isSet = false;
    m_bitrate_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIMediaFile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaFile::fromJsonObject(QJsonObject json) {

    m_bitrate_isValid = ::OpenAPI::fromJsonValue(m_bitrate, json[QString("bitrate")]);
    m_bitrate_isSet = !json[QString("bitrate")].isNull() && m_bitrate_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAIMediaFile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaFile::asJsonObject() const {
    QJsonObject obj;
    if (m_bitrate_isSet) {
        obj.insert(QString("bitrate"), ::OpenAPI::toJsonValue(m_bitrate));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QString OAIMediaFile::getBitrate() const {
    return m_bitrate;
}
void OAIMediaFile::setBitrate(const QString &bitrate) {
    m_bitrate = bitrate;
    m_bitrate_isSet = true;
}

bool OAIMediaFile::is_bitrate_Set() const{
    return m_bitrate_isSet;
}

bool OAIMediaFile::is_bitrate_Valid() const{
    return m_bitrate_isValid;
}

QString OAIMediaFile::getMimeType() const {
    return m_mime_type;
}
void OAIMediaFile::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIMediaFile::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIMediaFile::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIMediaFile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bitrate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaFile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
