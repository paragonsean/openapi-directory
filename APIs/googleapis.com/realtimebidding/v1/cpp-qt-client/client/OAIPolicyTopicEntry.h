/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPolicyTopicEntry.h
 *
 * Each policy topic entry will represent a violation of a policy topic for a creative, with the policy topic information and optional evidence for the policy violation.
 */

#ifndef OAIPolicyTopicEntry_H
#define OAIPolicyTopicEntry_H

#include <QJsonObject>

#include "OAIPolicyTopicEvidence.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPolicyTopicEvidence;

class OAIPolicyTopicEntry : public OAIObject {
public:
    OAIPolicyTopicEntry();
    OAIPolicyTopicEntry(QString json);
    ~OAIPolicyTopicEntry() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIPolicyTopicEvidence> getEvidences() const;
    void setEvidences(const QList<OAIPolicyTopicEvidence> &evidences);
    bool is_evidences_Set() const;
    bool is_evidences_Valid() const;

    QString getHelpCenterUrl() const;
    void setHelpCenterUrl(const QString &help_center_url);
    bool is_help_center_url_Set() const;
    bool is_help_center_url_Valid() const;

    bool isMissingCertificate() const;
    void setMissingCertificate(const bool &missing_certificate);
    bool is_missing_certificate_Set() const;
    bool is_missing_certificate_Valid() const;

    QString getPolicyTopic() const;
    void setPolicyTopic(const QString &policy_topic);
    bool is_policy_topic_Set() const;
    bool is_policy_topic_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIPolicyTopicEvidence> m_evidences;
    bool m_evidences_isSet;
    bool m_evidences_isValid;

    QString m_help_center_url;
    bool m_help_center_url_isSet;
    bool m_help_center_url_isValid;

    bool m_missing_certificate;
    bool m_missing_certificate_isSet;
    bool m_missing_certificate_isValid;

    QString m_policy_topic;
    bool m_policy_topic_isSet;
    bool m_policy_topic_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPolicyTopicEntry)

#endif // OAIPolicyTopicEntry_H
