/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadSizeEvidence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadSizeEvidence::OAIDownloadSizeEvidence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadSizeEvidence::OAIDownloadSizeEvidence() {
    this->initializeModel();
}

OAIDownloadSizeEvidence::~OAIDownloadSizeEvidence() {}

void OAIDownloadSizeEvidence::initializeModel() {

    m_top_url_download_size_breakdowns_isSet = false;
    m_top_url_download_size_breakdowns_isValid = false;

    m_total_download_size_kb_isSet = false;
    m_total_download_size_kb_isValid = false;
}

void OAIDownloadSizeEvidence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadSizeEvidence::fromJsonObject(QJsonObject json) {

    m_top_url_download_size_breakdowns_isValid = ::OpenAPI::fromJsonValue(m_top_url_download_size_breakdowns, json[QString("topUrlDownloadSizeBreakdowns")]);
    m_top_url_download_size_breakdowns_isSet = !json[QString("topUrlDownloadSizeBreakdowns")].isNull() && m_top_url_download_size_breakdowns_isValid;

    m_total_download_size_kb_isValid = ::OpenAPI::fromJsonValue(m_total_download_size_kb, json[QString("totalDownloadSizeKb")]);
    m_total_download_size_kb_isSet = !json[QString("totalDownloadSizeKb")].isNull() && m_total_download_size_kb_isValid;
}

QString OAIDownloadSizeEvidence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadSizeEvidence::asJsonObject() const {
    QJsonObject obj;
    if (m_top_url_download_size_breakdowns.size() > 0) {
        obj.insert(QString("topUrlDownloadSizeBreakdowns"), ::OpenAPI::toJsonValue(m_top_url_download_size_breakdowns));
    }
    if (m_total_download_size_kb_isSet) {
        obj.insert(QString("totalDownloadSizeKb"), ::OpenAPI::toJsonValue(m_total_download_size_kb));
    }
    return obj;
}

QList<OAIUrlDownloadSize> OAIDownloadSizeEvidence::getTopUrlDownloadSizeBreakdowns() const {
    return m_top_url_download_size_breakdowns;
}
void OAIDownloadSizeEvidence::setTopUrlDownloadSizeBreakdowns(const QList<OAIUrlDownloadSize> &top_url_download_size_breakdowns) {
    m_top_url_download_size_breakdowns = top_url_download_size_breakdowns;
    m_top_url_download_size_breakdowns_isSet = true;
}

bool OAIDownloadSizeEvidence::is_top_url_download_size_breakdowns_Set() const{
    return m_top_url_download_size_breakdowns_isSet;
}

bool OAIDownloadSizeEvidence::is_top_url_download_size_breakdowns_Valid() const{
    return m_top_url_download_size_breakdowns_isValid;
}

qint32 OAIDownloadSizeEvidence::getTotalDownloadSizeKb() const {
    return m_total_download_size_kb;
}
void OAIDownloadSizeEvidence::setTotalDownloadSizeKb(const qint32 &total_download_size_kb) {
    m_total_download_size_kb = total_download_size_kb;
    m_total_download_size_kb_isSet = true;
}

bool OAIDownloadSizeEvidence::is_total_download_size_kb_Set() const{
    return m_total_download_size_kb_isSet;
}

bool OAIDownloadSizeEvidence::is_total_download_size_kb_Valid() const{
    return m_total_download_size_kb_isValid;
}

bool OAIDownloadSizeEvidence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_top_url_download_size_breakdowns.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_download_size_kb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadSizeEvidence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
