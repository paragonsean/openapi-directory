/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdvertiserAndBrand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdvertiserAndBrand::OAIAdvertiserAndBrand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdvertiserAndBrand::OAIAdvertiserAndBrand() {
    this->initializeModel();
}

OAIAdvertiserAndBrand::~OAIAdvertiserAndBrand() {}

void OAIAdvertiserAndBrand::initializeModel() {

    m_advertiser_id_isSet = false;
    m_advertiser_id_isValid = false;

    m_advertiser_name_isSet = false;
    m_advertiser_name_isValid = false;

    m_brand_id_isSet = false;
    m_brand_id_isValid = false;

    m_brand_name_isSet = false;
    m_brand_name_isValid = false;
}

void OAIAdvertiserAndBrand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdvertiserAndBrand::fromJsonObject(QJsonObject json) {

    m_advertiser_id_isValid = ::OpenAPI::fromJsonValue(m_advertiser_id, json[QString("advertiserId")]);
    m_advertiser_id_isSet = !json[QString("advertiserId")].isNull() && m_advertiser_id_isValid;

    m_advertiser_name_isValid = ::OpenAPI::fromJsonValue(m_advertiser_name, json[QString("advertiserName")]);
    m_advertiser_name_isSet = !json[QString("advertiserName")].isNull() && m_advertiser_name_isValid;

    m_brand_id_isValid = ::OpenAPI::fromJsonValue(m_brand_id, json[QString("brandId")]);
    m_brand_id_isSet = !json[QString("brandId")].isNull() && m_brand_id_isValid;

    m_brand_name_isValid = ::OpenAPI::fromJsonValue(m_brand_name, json[QString("brandName")]);
    m_brand_name_isSet = !json[QString("brandName")].isNull() && m_brand_name_isValid;
}

QString OAIAdvertiserAndBrand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdvertiserAndBrand::asJsonObject() const {
    QJsonObject obj;
    if (m_advertiser_id_isSet) {
        obj.insert(QString("advertiserId"), ::OpenAPI::toJsonValue(m_advertiser_id));
    }
    if (m_advertiser_name_isSet) {
        obj.insert(QString("advertiserName"), ::OpenAPI::toJsonValue(m_advertiser_name));
    }
    if (m_brand_id_isSet) {
        obj.insert(QString("brandId"), ::OpenAPI::toJsonValue(m_brand_id));
    }
    if (m_brand_name_isSet) {
        obj.insert(QString("brandName"), ::OpenAPI::toJsonValue(m_brand_name));
    }
    return obj;
}

QString OAIAdvertiserAndBrand::getAdvertiserId() const {
    return m_advertiser_id;
}
void OAIAdvertiserAndBrand::setAdvertiserId(const QString &advertiser_id) {
    m_advertiser_id = advertiser_id;
    m_advertiser_id_isSet = true;
}

bool OAIAdvertiserAndBrand::is_advertiser_id_Set() const{
    return m_advertiser_id_isSet;
}

bool OAIAdvertiserAndBrand::is_advertiser_id_Valid() const{
    return m_advertiser_id_isValid;
}

QString OAIAdvertiserAndBrand::getAdvertiserName() const {
    return m_advertiser_name;
}
void OAIAdvertiserAndBrand::setAdvertiserName(const QString &advertiser_name) {
    m_advertiser_name = advertiser_name;
    m_advertiser_name_isSet = true;
}

bool OAIAdvertiserAndBrand::is_advertiser_name_Set() const{
    return m_advertiser_name_isSet;
}

bool OAIAdvertiserAndBrand::is_advertiser_name_Valid() const{
    return m_advertiser_name_isValid;
}

QString OAIAdvertiserAndBrand::getBrandId() const {
    return m_brand_id;
}
void OAIAdvertiserAndBrand::setBrandId(const QString &brand_id) {
    m_brand_id = brand_id;
    m_brand_id_isSet = true;
}

bool OAIAdvertiserAndBrand::is_brand_id_Set() const{
    return m_brand_id_isSet;
}

bool OAIAdvertiserAndBrand::is_brand_id_Valid() const{
    return m_brand_id_isValid;
}

QString OAIAdvertiserAndBrand::getBrandName() const {
    return m_brand_name;
}
void OAIAdvertiserAndBrand::setBrandName(const QString &brand_name) {
    m_brand_name = brand_name;
    m_brand_name_isSet = true;
}

bool OAIAdvertiserAndBrand::is_brand_name_Set() const{
    return m_brand_name_isSet;
}

bool OAIAdvertiserAndBrand::is_brand_name_Valid() const{
    return m_brand_name_isValid;
}

bool OAIAdvertiserAndBrand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advertiser_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advertiser_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_brand_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdvertiserAndBrand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
