/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlRestriction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlRestriction::OAIUrlRestriction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlRestriction::OAIUrlRestriction() {
    this->initializeModel();
}

OAIUrlRestriction::~OAIUrlRestriction() {}

void OAIUrlRestriction::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_restriction_type_isSet = false;
    m_restriction_type_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIUrlRestriction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlRestriction::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_restriction_type_isValid = ::OpenAPI::fromJsonValue(m_restriction_type, json[QString("restrictionType")]);
    m_restriction_type_isSet = !json[QString("restrictionType")].isNull() && m_restriction_type_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIUrlRestriction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlRestriction::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date.isSet()) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_restriction_type_isSet) {
        obj.insert(QString("restrictionType"), ::OpenAPI::toJsonValue(m_restriction_type));
    }
    if (m_start_date.isSet()) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

OAIDate OAIUrlRestriction::getEndDate() const {
    return m_end_date;
}
void OAIUrlRestriction::setEndDate(const OAIDate &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIUrlRestriction::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIUrlRestriction::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIUrlRestriction::getRestrictionType() const {
    return m_restriction_type;
}
void OAIUrlRestriction::setRestrictionType(const QString &restriction_type) {
    m_restriction_type = restriction_type;
    m_restriction_type_isSet = true;
}

bool OAIUrlRestriction::is_restriction_type_Set() const{
    return m_restriction_type_isSet;
}

bool OAIUrlRestriction::is_restriction_type_Valid() const{
    return m_restriction_type_isValid;
}

OAIDate OAIUrlRestriction::getStartDate() const {
    return m_start_date;
}
void OAIUrlRestriction::setStartDate(const OAIDate &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIUrlRestriction::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIUrlRestriction::is_start_date_Valid() const{
    return m_start_date_isValid;
}

QString OAIUrlRestriction::getUrl() const {
    return m_url;
}
void OAIUrlRestriction::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIUrlRestriction::is_url_Set() const{
    return m_url_isSet;
}

bool OAIUrlRestriction::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIUrlRestriction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_restriction_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlRestriction::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
