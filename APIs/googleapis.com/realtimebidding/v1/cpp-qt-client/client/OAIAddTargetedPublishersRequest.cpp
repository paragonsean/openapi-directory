/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddTargetedPublishersRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddTargetedPublishersRequest::OAIAddTargetedPublishersRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddTargetedPublishersRequest::OAIAddTargetedPublishersRequest() {
    this->initializeModel();
}

OAIAddTargetedPublishersRequest::~OAIAddTargetedPublishersRequest() {}

void OAIAddTargetedPublishersRequest::initializeModel() {

    m_publisher_ids_isSet = false;
    m_publisher_ids_isValid = false;

    m_targeting_mode_isSet = false;
    m_targeting_mode_isValid = false;
}

void OAIAddTargetedPublishersRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddTargetedPublishersRequest::fromJsonObject(QJsonObject json) {

    m_publisher_ids_isValid = ::OpenAPI::fromJsonValue(m_publisher_ids, json[QString("publisherIds")]);
    m_publisher_ids_isSet = !json[QString("publisherIds")].isNull() && m_publisher_ids_isValid;

    m_targeting_mode_isValid = ::OpenAPI::fromJsonValue(m_targeting_mode, json[QString("targetingMode")]);
    m_targeting_mode_isSet = !json[QString("targetingMode")].isNull() && m_targeting_mode_isValid;
}

QString OAIAddTargetedPublishersRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddTargetedPublishersRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_publisher_ids.size() > 0) {
        obj.insert(QString("publisherIds"), ::OpenAPI::toJsonValue(m_publisher_ids));
    }
    if (m_targeting_mode_isSet) {
        obj.insert(QString("targetingMode"), ::OpenAPI::toJsonValue(m_targeting_mode));
    }
    return obj;
}

QList<QString> OAIAddTargetedPublishersRequest::getPublisherIds() const {
    return m_publisher_ids;
}
void OAIAddTargetedPublishersRequest::setPublisherIds(const QList<QString> &publisher_ids) {
    m_publisher_ids = publisher_ids;
    m_publisher_ids_isSet = true;
}

bool OAIAddTargetedPublishersRequest::is_publisher_ids_Set() const{
    return m_publisher_ids_isSet;
}

bool OAIAddTargetedPublishersRequest::is_publisher_ids_Valid() const{
    return m_publisher_ids_isValid;
}

QString OAIAddTargetedPublishersRequest::getTargetingMode() const {
    return m_targeting_mode;
}
void OAIAddTargetedPublishersRequest::setTargetingMode(const QString &targeting_mode) {
    m_targeting_mode = targeting_mode;
    m_targeting_mode_isSet = true;
}

bool OAIAddTargetedPublishersRequest::is_targeting_mode_Set() const{
    return m_targeting_mode_isSet;
}

bool OAIAddTargetedPublishersRequest::is_targeting_mode_Valid() const{
    return m_targeting_mode_isValid;
}

bool OAIAddTargetedPublishersRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_publisher_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddTargetedPublishersRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
