/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAppTargeting.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAppTargeting::OAIAppTargeting(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAppTargeting::OAIAppTargeting() {
    this->initializeModel();
}

OAIAppTargeting::~OAIAppTargeting() {}

void OAIAppTargeting::initializeModel() {

    m_mobile_app_category_targeting_isSet = false;
    m_mobile_app_category_targeting_isValid = false;

    m_mobile_app_targeting_isSet = false;
    m_mobile_app_targeting_isValid = false;
}

void OAIAppTargeting::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAppTargeting::fromJsonObject(QJsonObject json) {

    m_mobile_app_category_targeting_isValid = ::OpenAPI::fromJsonValue(m_mobile_app_category_targeting, json[QString("mobileAppCategoryTargeting")]);
    m_mobile_app_category_targeting_isSet = !json[QString("mobileAppCategoryTargeting")].isNull() && m_mobile_app_category_targeting_isValid;

    m_mobile_app_targeting_isValid = ::OpenAPI::fromJsonValue(m_mobile_app_targeting, json[QString("mobileAppTargeting")]);
    m_mobile_app_targeting_isSet = !json[QString("mobileAppTargeting")].isNull() && m_mobile_app_targeting_isValid;
}

QString OAIAppTargeting::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAppTargeting::asJsonObject() const {
    QJsonObject obj;
    if (m_mobile_app_category_targeting.isSet()) {
        obj.insert(QString("mobileAppCategoryTargeting"), ::OpenAPI::toJsonValue(m_mobile_app_category_targeting));
    }
    if (m_mobile_app_targeting.isSet()) {
        obj.insert(QString("mobileAppTargeting"), ::OpenAPI::toJsonValue(m_mobile_app_targeting));
    }
    return obj;
}

OAINumericTargetingDimension OAIAppTargeting::getMobileAppCategoryTargeting() const {
    return m_mobile_app_category_targeting;
}
void OAIAppTargeting::setMobileAppCategoryTargeting(const OAINumericTargetingDimension &mobile_app_category_targeting) {
    m_mobile_app_category_targeting = mobile_app_category_targeting;
    m_mobile_app_category_targeting_isSet = true;
}

bool OAIAppTargeting::is_mobile_app_category_targeting_Set() const{
    return m_mobile_app_category_targeting_isSet;
}

bool OAIAppTargeting::is_mobile_app_category_targeting_Valid() const{
    return m_mobile_app_category_targeting_isValid;
}

OAIStringTargetingDimension OAIAppTargeting::getMobileAppTargeting() const {
    return m_mobile_app_targeting;
}
void OAIAppTargeting::setMobileAppTargeting(const OAIStringTargetingDimension &mobile_app_targeting) {
    m_mobile_app_targeting = mobile_app_targeting;
    m_mobile_app_targeting_isSet = true;
}

bool OAIAppTargeting::is_mobile_app_targeting_Set() const{
    return m_mobile_app_targeting_isSet;
}

bool OAIAppTargeting::is_mobile_app_targeting_Valid() const{
    return m_mobile_app_targeting_isValid;
}

bool OAIAppTargeting::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_mobile_app_category_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_app_targeting.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAppTargeting::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
