/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUrlDownloadSize.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUrlDownloadSize::OAIUrlDownloadSize(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUrlDownloadSize::OAIUrlDownloadSize() {
    this->initializeModel();
}

OAIUrlDownloadSize::~OAIUrlDownloadSize() {}

void OAIUrlDownloadSize::initializeModel() {

    m_download_size_kb_isSet = false;
    m_download_size_kb_isValid = false;

    m_normalized_url_isSet = false;
    m_normalized_url_isValid = false;
}

void OAIUrlDownloadSize::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUrlDownloadSize::fromJsonObject(QJsonObject json) {

    m_download_size_kb_isValid = ::OpenAPI::fromJsonValue(m_download_size_kb, json[QString("downloadSizeKb")]);
    m_download_size_kb_isSet = !json[QString("downloadSizeKb")].isNull() && m_download_size_kb_isValid;

    m_normalized_url_isValid = ::OpenAPI::fromJsonValue(m_normalized_url, json[QString("normalizedUrl")]);
    m_normalized_url_isSet = !json[QString("normalizedUrl")].isNull() && m_normalized_url_isValid;
}

QString OAIUrlDownloadSize::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUrlDownloadSize::asJsonObject() const {
    QJsonObject obj;
    if (m_download_size_kb_isSet) {
        obj.insert(QString("downloadSizeKb"), ::OpenAPI::toJsonValue(m_download_size_kb));
    }
    if (m_normalized_url_isSet) {
        obj.insert(QString("normalizedUrl"), ::OpenAPI::toJsonValue(m_normalized_url));
    }
    return obj;
}

qint32 OAIUrlDownloadSize::getDownloadSizeKb() const {
    return m_download_size_kb;
}
void OAIUrlDownloadSize::setDownloadSizeKb(const qint32 &download_size_kb) {
    m_download_size_kb = download_size_kb;
    m_download_size_kb_isSet = true;
}

bool OAIUrlDownloadSize::is_download_size_kb_Set() const{
    return m_download_size_kb_isSet;
}

bool OAIUrlDownloadSize::is_download_size_kb_Valid() const{
    return m_download_size_kb_isValid;
}

QString OAIUrlDownloadSize::getNormalizedUrl() const {
    return m_normalized_url;
}
void OAIUrlDownloadSize::setNormalizedUrl(const QString &normalized_url) {
    m_normalized_url = normalized_url;
    m_normalized_url_isSet = true;
}

bool OAIUrlDownloadSize::is_normalized_url_Set() const{
    return m_normalized_url_isSet;
}

bool OAIUrlDownloadSize::is_normalized_url_Valid() const{
    return m_normalized_url_isValid;
}

bool OAIUrlDownloadSize::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_download_size_kb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUrlDownloadSize::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
