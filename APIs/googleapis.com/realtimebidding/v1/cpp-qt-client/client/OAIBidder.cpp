/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBidder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBidder::OAIBidder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBidder::OAIBidder() {
    this->initializeModel();
}

OAIBidder::~OAIBidder() {}

void OAIBidder::initializeModel() {

    m_bypass_nonguaranteed_deals_pretargeting_isSet = false;
    m_bypass_nonguaranteed_deals_pretargeting_isValid = false;

    m_cookie_matching_network_id_isSet = false;
    m_cookie_matching_network_id_isValid = false;

    m_cookie_matching_url_isSet = false;
    m_cookie_matching_url_isValid = false;

    m_deals_billing_id_isSet = false;
    m_deals_billing_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIBidder::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBidder::fromJsonObject(QJsonObject json) {

    m_bypass_nonguaranteed_deals_pretargeting_isValid = ::OpenAPI::fromJsonValue(m_bypass_nonguaranteed_deals_pretargeting, json[QString("bypassNonguaranteedDealsPretargeting")]);
    m_bypass_nonguaranteed_deals_pretargeting_isSet = !json[QString("bypassNonguaranteedDealsPretargeting")].isNull() && m_bypass_nonguaranteed_deals_pretargeting_isValid;

    m_cookie_matching_network_id_isValid = ::OpenAPI::fromJsonValue(m_cookie_matching_network_id, json[QString("cookieMatchingNetworkId")]);
    m_cookie_matching_network_id_isSet = !json[QString("cookieMatchingNetworkId")].isNull() && m_cookie_matching_network_id_isValid;

    m_cookie_matching_url_isValid = ::OpenAPI::fromJsonValue(m_cookie_matching_url, json[QString("cookieMatchingUrl")]);
    m_cookie_matching_url_isSet = !json[QString("cookieMatchingUrl")].isNull() && m_cookie_matching_url_isValid;

    m_deals_billing_id_isValid = ::OpenAPI::fromJsonValue(m_deals_billing_id, json[QString("dealsBillingId")]);
    m_deals_billing_id_isSet = !json[QString("dealsBillingId")].isNull() && m_deals_billing_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIBidder::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBidder::asJsonObject() const {
    QJsonObject obj;
    if (m_bypass_nonguaranteed_deals_pretargeting_isSet) {
        obj.insert(QString("bypassNonguaranteedDealsPretargeting"), ::OpenAPI::toJsonValue(m_bypass_nonguaranteed_deals_pretargeting));
    }
    if (m_cookie_matching_network_id_isSet) {
        obj.insert(QString("cookieMatchingNetworkId"), ::OpenAPI::toJsonValue(m_cookie_matching_network_id));
    }
    if (m_cookie_matching_url_isSet) {
        obj.insert(QString("cookieMatchingUrl"), ::OpenAPI::toJsonValue(m_cookie_matching_url));
    }
    if (m_deals_billing_id_isSet) {
        obj.insert(QString("dealsBillingId"), ::OpenAPI::toJsonValue(m_deals_billing_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

bool OAIBidder::isBypassNonguaranteedDealsPretargeting() const {
    return m_bypass_nonguaranteed_deals_pretargeting;
}
void OAIBidder::setBypassNonguaranteedDealsPretargeting(const bool &bypass_nonguaranteed_deals_pretargeting) {
    m_bypass_nonguaranteed_deals_pretargeting = bypass_nonguaranteed_deals_pretargeting;
    m_bypass_nonguaranteed_deals_pretargeting_isSet = true;
}

bool OAIBidder::is_bypass_nonguaranteed_deals_pretargeting_Set() const{
    return m_bypass_nonguaranteed_deals_pretargeting_isSet;
}

bool OAIBidder::is_bypass_nonguaranteed_deals_pretargeting_Valid() const{
    return m_bypass_nonguaranteed_deals_pretargeting_isValid;
}

QString OAIBidder::getCookieMatchingNetworkId() const {
    return m_cookie_matching_network_id;
}
void OAIBidder::setCookieMatchingNetworkId(const QString &cookie_matching_network_id) {
    m_cookie_matching_network_id = cookie_matching_network_id;
    m_cookie_matching_network_id_isSet = true;
}

bool OAIBidder::is_cookie_matching_network_id_Set() const{
    return m_cookie_matching_network_id_isSet;
}

bool OAIBidder::is_cookie_matching_network_id_Valid() const{
    return m_cookie_matching_network_id_isValid;
}

QString OAIBidder::getCookieMatchingUrl() const {
    return m_cookie_matching_url;
}
void OAIBidder::setCookieMatchingUrl(const QString &cookie_matching_url) {
    m_cookie_matching_url = cookie_matching_url;
    m_cookie_matching_url_isSet = true;
}

bool OAIBidder::is_cookie_matching_url_Set() const{
    return m_cookie_matching_url_isSet;
}

bool OAIBidder::is_cookie_matching_url_Valid() const{
    return m_cookie_matching_url_isValid;
}

QString OAIBidder::getDealsBillingId() const {
    return m_deals_billing_id;
}
void OAIBidder::setDealsBillingId(const QString &deals_billing_id) {
    m_deals_billing_id = deals_billing_id;
    m_deals_billing_id_isSet = true;
}

bool OAIBidder::is_deals_billing_id_Set() const{
    return m_deals_billing_id_isSet;
}

bool OAIBidder::is_deals_billing_id_Valid() const{
    return m_deals_billing_id_isValid;
}

QString OAIBidder::getName() const {
    return m_name;
}
void OAIBidder::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBidder::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBidder::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIBidder::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bypass_nonguaranteed_deals_pretargeting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_matching_network_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cookie_matching_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deals_billing_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBidder::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
