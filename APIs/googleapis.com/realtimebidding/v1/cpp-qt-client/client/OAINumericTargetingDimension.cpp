/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINumericTargetingDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINumericTargetingDimension::OAINumericTargetingDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINumericTargetingDimension::OAINumericTargetingDimension() {
    this->initializeModel();
}

OAINumericTargetingDimension::~OAINumericTargetingDimension() {}

void OAINumericTargetingDimension::initializeModel() {

    m_excluded_ids_isSet = false;
    m_excluded_ids_isValid = false;

    m_included_ids_isSet = false;
    m_included_ids_isValid = false;
}

void OAINumericTargetingDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINumericTargetingDimension::fromJsonObject(QJsonObject json) {

    m_excluded_ids_isValid = ::OpenAPI::fromJsonValue(m_excluded_ids, json[QString("excludedIds")]);
    m_excluded_ids_isSet = !json[QString("excludedIds")].isNull() && m_excluded_ids_isValid;

    m_included_ids_isValid = ::OpenAPI::fromJsonValue(m_included_ids, json[QString("includedIds")]);
    m_included_ids_isSet = !json[QString("includedIds")].isNull() && m_included_ids_isValid;
}

QString OAINumericTargetingDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINumericTargetingDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_excluded_ids.size() > 0) {
        obj.insert(QString("excludedIds"), ::OpenAPI::toJsonValue(m_excluded_ids));
    }
    if (m_included_ids.size() > 0) {
        obj.insert(QString("includedIds"), ::OpenAPI::toJsonValue(m_included_ids));
    }
    return obj;
}

QList<QString> OAINumericTargetingDimension::getExcludedIds() const {
    return m_excluded_ids;
}
void OAINumericTargetingDimension::setExcludedIds(const QList<QString> &excluded_ids) {
    m_excluded_ids = excluded_ids;
    m_excluded_ids_isSet = true;
}

bool OAINumericTargetingDimension::is_excluded_ids_Set() const{
    return m_excluded_ids_isSet;
}

bool OAINumericTargetingDimension::is_excluded_ids_Valid() const{
    return m_excluded_ids_isValid;
}

QList<QString> OAINumericTargetingDimension::getIncludedIds() const {
    return m_included_ids;
}
void OAINumericTargetingDimension::setIncludedIds(const QList<QString> &included_ids) {
    m_included_ids = included_ids;
    m_included_ids_isSet = true;
}

bool OAINumericTargetingDimension::is_included_ids_Set() const{
    return m_included_ids_isSet;
}

bool OAINumericTargetingDimension::is_included_ids_Valid() const{
    return m_included_ids_isValid;
}

bool OAINumericTargetingDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_excluded_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINumericTargetingDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
