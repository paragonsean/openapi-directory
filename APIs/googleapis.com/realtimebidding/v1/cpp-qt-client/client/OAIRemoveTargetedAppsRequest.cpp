/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveTargetedAppsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveTargetedAppsRequest::OAIRemoveTargetedAppsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveTargetedAppsRequest::OAIRemoveTargetedAppsRequest() {
    this->initializeModel();
}

OAIRemoveTargetedAppsRequest::~OAIRemoveTargetedAppsRequest() {}

void OAIRemoveTargetedAppsRequest::initializeModel() {

    m_app_ids_isSet = false;
    m_app_ids_isValid = false;
}

void OAIRemoveTargetedAppsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveTargetedAppsRequest::fromJsonObject(QJsonObject json) {

    m_app_ids_isValid = ::OpenAPI::fromJsonValue(m_app_ids, json[QString("appIds")]);
    m_app_ids_isSet = !json[QString("appIds")].isNull() && m_app_ids_isValid;
}

QString OAIRemoveTargetedAppsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveTargetedAppsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_ids.size() > 0) {
        obj.insert(QString("appIds"), ::OpenAPI::toJsonValue(m_app_ids));
    }
    return obj;
}

QList<QString> OAIRemoveTargetedAppsRequest::getAppIds() const {
    return m_app_ids;
}
void OAIRemoveTargetedAppsRequest::setAppIds(const QList<QString> &app_ids) {
    m_app_ids = app_ids;
    m_app_ids_isSet = true;
}

bool OAIRemoveTargetedAppsRequest::is_app_ids_Set() const{
    return m_app_ids_isSet;
}

bool OAIRemoveTargetedAppsRequest::is_app_ids_Valid() const{
    return m_app_ids_isValid;
}

bool OAIRemoveTargetedAppsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveTargetedAppsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
