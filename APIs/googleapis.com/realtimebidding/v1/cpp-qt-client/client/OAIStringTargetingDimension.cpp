/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStringTargetingDimension.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStringTargetingDimension::OAIStringTargetingDimension(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStringTargetingDimension::OAIStringTargetingDimension() {
    this->initializeModel();
}

OAIStringTargetingDimension::~OAIStringTargetingDimension() {}

void OAIStringTargetingDimension::initializeModel() {

    m_targeting_mode_isSet = false;
    m_targeting_mode_isValid = false;

    m_values_isSet = false;
    m_values_isValid = false;
}

void OAIStringTargetingDimension::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStringTargetingDimension::fromJsonObject(QJsonObject json) {

    m_targeting_mode_isValid = ::OpenAPI::fromJsonValue(m_targeting_mode, json[QString("targetingMode")]);
    m_targeting_mode_isSet = !json[QString("targetingMode")].isNull() && m_targeting_mode_isValid;

    m_values_isValid = ::OpenAPI::fromJsonValue(m_values, json[QString("values")]);
    m_values_isSet = !json[QString("values")].isNull() && m_values_isValid;
}

QString OAIStringTargetingDimension::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStringTargetingDimension::asJsonObject() const {
    QJsonObject obj;
    if (m_targeting_mode_isSet) {
        obj.insert(QString("targetingMode"), ::OpenAPI::toJsonValue(m_targeting_mode));
    }
    if (m_values.size() > 0) {
        obj.insert(QString("values"), ::OpenAPI::toJsonValue(m_values));
    }
    return obj;
}

QString OAIStringTargetingDimension::getTargetingMode() const {
    return m_targeting_mode;
}
void OAIStringTargetingDimension::setTargetingMode(const QString &targeting_mode) {
    m_targeting_mode = targeting_mode;
    m_targeting_mode_isSet = true;
}

bool OAIStringTargetingDimension::is_targeting_mode_Set() const{
    return m_targeting_mode_isSet;
}

bool OAIStringTargetingDimension::is_targeting_mode_Valid() const{
    return m_targeting_mode_isValid;
}

QList<QString> OAIStringTargetingDimension::getValues() const {
    return m_values;
}
void OAIStringTargetingDimension::setValues(const QList<QString> &values) {
    m_values = values;
    m_values_isSet = true;
}

bool OAIStringTargetingDimension::is_values_Set() const{
    return m_values_isSet;
}

bool OAIStringTargetingDimension::is_values_Valid() const{
    return m_values_isValid;
}

bool OAIStringTargetingDimension::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_targeting_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_values.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStringTargetingDimension::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
