/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreativeServingDecision.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreativeServingDecision::OAICreativeServingDecision(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreativeServingDecision::OAICreativeServingDecision() {
    this->initializeModel();
}

OAICreativeServingDecision::~OAICreativeServingDecision() {}

void OAICreativeServingDecision::initializeModel() {

    m_ad_technology_providers_isSet = false;
    m_ad_technology_providers_isValid = false;

    m_china_policy_compliance_isSet = false;
    m_china_policy_compliance_isValid = false;

    m_deals_policy_compliance_isSet = false;
    m_deals_policy_compliance_isValid = false;

    m_detected_advertisers_isSet = false;
    m_detected_advertisers_isValid = false;

    m_detected_attributes_isSet = false;
    m_detected_attributes_isValid = false;

    m_detected_click_through_urls_isSet = false;
    m_detected_click_through_urls_isValid = false;

    m_detected_domains_isSet = false;
    m_detected_domains_isValid = false;

    m_detected_languages_isSet = false;
    m_detected_languages_isValid = false;

    m_detected_product_categories_isSet = false;
    m_detected_product_categories_isValid = false;

    m_detected_sensitive_categories_isSet = false;
    m_detected_sensitive_categories_isValid = false;

    m_detected_vendor_ids_isSet = false;
    m_detected_vendor_ids_isValid = false;

    m_last_status_update_isSet = false;
    m_last_status_update_isValid = false;

    m_network_policy_compliance_isSet = false;
    m_network_policy_compliance_isValid = false;

    m_platform_policy_compliance_isSet = false;
    m_platform_policy_compliance_isValid = false;

    m_russia_policy_compliance_isSet = false;
    m_russia_policy_compliance_isValid = false;
}

void OAICreativeServingDecision::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreativeServingDecision::fromJsonObject(QJsonObject json) {

    m_ad_technology_providers_isValid = ::OpenAPI::fromJsonValue(m_ad_technology_providers, json[QString("adTechnologyProviders")]);
    m_ad_technology_providers_isSet = !json[QString("adTechnologyProviders")].isNull() && m_ad_technology_providers_isValid;

    m_china_policy_compliance_isValid = ::OpenAPI::fromJsonValue(m_china_policy_compliance, json[QString("chinaPolicyCompliance")]);
    m_china_policy_compliance_isSet = !json[QString("chinaPolicyCompliance")].isNull() && m_china_policy_compliance_isValid;

    m_deals_policy_compliance_isValid = ::OpenAPI::fromJsonValue(m_deals_policy_compliance, json[QString("dealsPolicyCompliance")]);
    m_deals_policy_compliance_isSet = !json[QString("dealsPolicyCompliance")].isNull() && m_deals_policy_compliance_isValid;

    m_detected_advertisers_isValid = ::OpenAPI::fromJsonValue(m_detected_advertisers, json[QString("detectedAdvertisers")]);
    m_detected_advertisers_isSet = !json[QString("detectedAdvertisers")].isNull() && m_detected_advertisers_isValid;

    m_detected_attributes_isValid = ::OpenAPI::fromJsonValue(m_detected_attributes, json[QString("detectedAttributes")]);
    m_detected_attributes_isSet = !json[QString("detectedAttributes")].isNull() && m_detected_attributes_isValid;

    m_detected_click_through_urls_isValid = ::OpenAPI::fromJsonValue(m_detected_click_through_urls, json[QString("detectedClickThroughUrls")]);
    m_detected_click_through_urls_isSet = !json[QString("detectedClickThroughUrls")].isNull() && m_detected_click_through_urls_isValid;

    m_detected_domains_isValid = ::OpenAPI::fromJsonValue(m_detected_domains, json[QString("detectedDomains")]);
    m_detected_domains_isSet = !json[QString("detectedDomains")].isNull() && m_detected_domains_isValid;

    m_detected_languages_isValid = ::OpenAPI::fromJsonValue(m_detected_languages, json[QString("detectedLanguages")]);
    m_detected_languages_isSet = !json[QString("detectedLanguages")].isNull() && m_detected_languages_isValid;

    m_detected_product_categories_isValid = ::OpenAPI::fromJsonValue(m_detected_product_categories, json[QString("detectedProductCategories")]);
    m_detected_product_categories_isSet = !json[QString("detectedProductCategories")].isNull() && m_detected_product_categories_isValid;

    m_detected_sensitive_categories_isValid = ::OpenAPI::fromJsonValue(m_detected_sensitive_categories, json[QString("detectedSensitiveCategories")]);
    m_detected_sensitive_categories_isSet = !json[QString("detectedSensitiveCategories")].isNull() && m_detected_sensitive_categories_isValid;

    m_detected_vendor_ids_isValid = ::OpenAPI::fromJsonValue(m_detected_vendor_ids, json[QString("detectedVendorIds")]);
    m_detected_vendor_ids_isSet = !json[QString("detectedVendorIds")].isNull() && m_detected_vendor_ids_isValid;

    m_last_status_update_isValid = ::OpenAPI::fromJsonValue(m_last_status_update, json[QString("lastStatusUpdate")]);
    m_last_status_update_isSet = !json[QString("lastStatusUpdate")].isNull() && m_last_status_update_isValid;

    m_network_policy_compliance_isValid = ::OpenAPI::fromJsonValue(m_network_policy_compliance, json[QString("networkPolicyCompliance")]);
    m_network_policy_compliance_isSet = !json[QString("networkPolicyCompliance")].isNull() && m_network_policy_compliance_isValid;

    m_platform_policy_compliance_isValid = ::OpenAPI::fromJsonValue(m_platform_policy_compliance, json[QString("platformPolicyCompliance")]);
    m_platform_policy_compliance_isSet = !json[QString("platformPolicyCompliance")].isNull() && m_platform_policy_compliance_isValid;

    m_russia_policy_compliance_isValid = ::OpenAPI::fromJsonValue(m_russia_policy_compliance, json[QString("russiaPolicyCompliance")]);
    m_russia_policy_compliance_isSet = !json[QString("russiaPolicyCompliance")].isNull() && m_russia_policy_compliance_isValid;
}

QString OAICreativeServingDecision::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreativeServingDecision::asJsonObject() const {
    QJsonObject obj;
    if (m_ad_technology_providers.isSet()) {
        obj.insert(QString("adTechnologyProviders"), ::OpenAPI::toJsonValue(m_ad_technology_providers));
    }
    if (m_china_policy_compliance.isSet()) {
        obj.insert(QString("chinaPolicyCompliance"), ::OpenAPI::toJsonValue(m_china_policy_compliance));
    }
    if (m_deals_policy_compliance.isSet()) {
        obj.insert(QString("dealsPolicyCompliance"), ::OpenAPI::toJsonValue(m_deals_policy_compliance));
    }
    if (m_detected_advertisers.size() > 0) {
        obj.insert(QString("detectedAdvertisers"), ::OpenAPI::toJsonValue(m_detected_advertisers));
    }
    if (m_detected_attributes.size() > 0) {
        obj.insert(QString("detectedAttributes"), ::OpenAPI::toJsonValue(m_detected_attributes));
    }
    if (m_detected_click_through_urls.size() > 0) {
        obj.insert(QString("detectedClickThroughUrls"), ::OpenAPI::toJsonValue(m_detected_click_through_urls));
    }
    if (m_detected_domains.size() > 0) {
        obj.insert(QString("detectedDomains"), ::OpenAPI::toJsonValue(m_detected_domains));
    }
    if (m_detected_languages.size() > 0) {
        obj.insert(QString("detectedLanguages"), ::OpenAPI::toJsonValue(m_detected_languages));
    }
    if (m_detected_product_categories.size() > 0) {
        obj.insert(QString("detectedProductCategories"), ::OpenAPI::toJsonValue(m_detected_product_categories));
    }
    if (m_detected_sensitive_categories.size() > 0) {
        obj.insert(QString("detectedSensitiveCategories"), ::OpenAPI::toJsonValue(m_detected_sensitive_categories));
    }
    if (m_detected_vendor_ids.size() > 0) {
        obj.insert(QString("detectedVendorIds"), ::OpenAPI::toJsonValue(m_detected_vendor_ids));
    }
    if (m_last_status_update_isSet) {
        obj.insert(QString("lastStatusUpdate"), ::OpenAPI::toJsonValue(m_last_status_update));
    }
    if (m_network_policy_compliance.isSet()) {
        obj.insert(QString("networkPolicyCompliance"), ::OpenAPI::toJsonValue(m_network_policy_compliance));
    }
    if (m_platform_policy_compliance.isSet()) {
        obj.insert(QString("platformPolicyCompliance"), ::OpenAPI::toJsonValue(m_platform_policy_compliance));
    }
    if (m_russia_policy_compliance.isSet()) {
        obj.insert(QString("russiaPolicyCompliance"), ::OpenAPI::toJsonValue(m_russia_policy_compliance));
    }
    return obj;
}

OAIAdTechnologyProviders OAICreativeServingDecision::getAdTechnologyProviders() const {
    return m_ad_technology_providers;
}
void OAICreativeServingDecision::setAdTechnologyProviders(const OAIAdTechnologyProviders &ad_technology_providers) {
    m_ad_technology_providers = ad_technology_providers;
    m_ad_technology_providers_isSet = true;
}

bool OAICreativeServingDecision::is_ad_technology_providers_Set() const{
    return m_ad_technology_providers_isSet;
}

bool OAICreativeServingDecision::is_ad_technology_providers_Valid() const{
    return m_ad_technology_providers_isValid;
}

OAIPolicyCompliance OAICreativeServingDecision::getChinaPolicyCompliance() const {
    return m_china_policy_compliance;
}
void OAICreativeServingDecision::setChinaPolicyCompliance(const OAIPolicyCompliance &china_policy_compliance) {
    m_china_policy_compliance = china_policy_compliance;
    m_china_policy_compliance_isSet = true;
}

bool OAICreativeServingDecision::is_china_policy_compliance_Set() const{
    return m_china_policy_compliance_isSet;
}

bool OAICreativeServingDecision::is_china_policy_compliance_Valid() const{
    return m_china_policy_compliance_isValid;
}

OAIPolicyCompliance OAICreativeServingDecision::getDealsPolicyCompliance() const {
    return m_deals_policy_compliance;
}
void OAICreativeServingDecision::setDealsPolicyCompliance(const OAIPolicyCompliance &deals_policy_compliance) {
    m_deals_policy_compliance = deals_policy_compliance;
    m_deals_policy_compliance_isSet = true;
}

bool OAICreativeServingDecision::is_deals_policy_compliance_Set() const{
    return m_deals_policy_compliance_isSet;
}

bool OAICreativeServingDecision::is_deals_policy_compliance_Valid() const{
    return m_deals_policy_compliance_isValid;
}

QList<OAIAdvertiserAndBrand> OAICreativeServingDecision::getDetectedAdvertisers() const {
    return m_detected_advertisers;
}
void OAICreativeServingDecision::setDetectedAdvertisers(const QList<OAIAdvertiserAndBrand> &detected_advertisers) {
    m_detected_advertisers = detected_advertisers;
    m_detected_advertisers_isSet = true;
}

bool OAICreativeServingDecision::is_detected_advertisers_Set() const{
    return m_detected_advertisers_isSet;
}

bool OAICreativeServingDecision::is_detected_advertisers_Valid() const{
    return m_detected_advertisers_isValid;
}

QList<QString> OAICreativeServingDecision::getDetectedAttributes() const {
    return m_detected_attributes;
}
void OAICreativeServingDecision::setDetectedAttributes(const QList<QString> &detected_attributes) {
    m_detected_attributes = detected_attributes;
    m_detected_attributes_isSet = true;
}

bool OAICreativeServingDecision::is_detected_attributes_Set() const{
    return m_detected_attributes_isSet;
}

bool OAICreativeServingDecision::is_detected_attributes_Valid() const{
    return m_detected_attributes_isValid;
}

QList<QString> OAICreativeServingDecision::getDetectedClickThroughUrls() const {
    return m_detected_click_through_urls;
}
void OAICreativeServingDecision::setDetectedClickThroughUrls(const QList<QString> &detected_click_through_urls) {
    m_detected_click_through_urls = detected_click_through_urls;
    m_detected_click_through_urls_isSet = true;
}

bool OAICreativeServingDecision::is_detected_click_through_urls_Set() const{
    return m_detected_click_through_urls_isSet;
}

bool OAICreativeServingDecision::is_detected_click_through_urls_Valid() const{
    return m_detected_click_through_urls_isValid;
}

QList<QString> OAICreativeServingDecision::getDetectedDomains() const {
    return m_detected_domains;
}
void OAICreativeServingDecision::setDetectedDomains(const QList<QString> &detected_domains) {
    m_detected_domains = detected_domains;
    m_detected_domains_isSet = true;
}

bool OAICreativeServingDecision::is_detected_domains_Set() const{
    return m_detected_domains_isSet;
}

bool OAICreativeServingDecision::is_detected_domains_Valid() const{
    return m_detected_domains_isValid;
}

QList<QString> OAICreativeServingDecision::getDetectedLanguages() const {
    return m_detected_languages;
}
void OAICreativeServingDecision::setDetectedLanguages(const QList<QString> &detected_languages) {
    m_detected_languages = detected_languages;
    m_detected_languages_isSet = true;
}

bool OAICreativeServingDecision::is_detected_languages_Set() const{
    return m_detected_languages_isSet;
}

bool OAICreativeServingDecision::is_detected_languages_Valid() const{
    return m_detected_languages_isValid;
}

QList<qint32> OAICreativeServingDecision::getDetectedProductCategories() const {
    return m_detected_product_categories;
}
void OAICreativeServingDecision::setDetectedProductCategories(const QList<qint32> &detected_product_categories) {
    m_detected_product_categories = detected_product_categories;
    m_detected_product_categories_isSet = true;
}

bool OAICreativeServingDecision::is_detected_product_categories_Set() const{
    return m_detected_product_categories_isSet;
}

bool OAICreativeServingDecision::is_detected_product_categories_Valid() const{
    return m_detected_product_categories_isValid;
}

QList<qint32> OAICreativeServingDecision::getDetectedSensitiveCategories() const {
    return m_detected_sensitive_categories;
}
void OAICreativeServingDecision::setDetectedSensitiveCategories(const QList<qint32> &detected_sensitive_categories) {
    m_detected_sensitive_categories = detected_sensitive_categories;
    m_detected_sensitive_categories_isSet = true;
}

bool OAICreativeServingDecision::is_detected_sensitive_categories_Set() const{
    return m_detected_sensitive_categories_isSet;
}

bool OAICreativeServingDecision::is_detected_sensitive_categories_Valid() const{
    return m_detected_sensitive_categories_isValid;
}

QList<qint32> OAICreativeServingDecision::getDetectedVendorIds() const {
    return m_detected_vendor_ids;
}
void OAICreativeServingDecision::setDetectedVendorIds(const QList<qint32> &detected_vendor_ids) {
    m_detected_vendor_ids = detected_vendor_ids;
    m_detected_vendor_ids_isSet = true;
}

bool OAICreativeServingDecision::is_detected_vendor_ids_Set() const{
    return m_detected_vendor_ids_isSet;
}

bool OAICreativeServingDecision::is_detected_vendor_ids_Valid() const{
    return m_detected_vendor_ids_isValid;
}

QString OAICreativeServingDecision::getLastStatusUpdate() const {
    return m_last_status_update;
}
void OAICreativeServingDecision::setLastStatusUpdate(const QString &last_status_update) {
    m_last_status_update = last_status_update;
    m_last_status_update_isSet = true;
}

bool OAICreativeServingDecision::is_last_status_update_Set() const{
    return m_last_status_update_isSet;
}

bool OAICreativeServingDecision::is_last_status_update_Valid() const{
    return m_last_status_update_isValid;
}

OAIPolicyCompliance OAICreativeServingDecision::getNetworkPolicyCompliance() const {
    return m_network_policy_compliance;
}
void OAICreativeServingDecision::setNetworkPolicyCompliance(const OAIPolicyCompliance &network_policy_compliance) {
    m_network_policy_compliance = network_policy_compliance;
    m_network_policy_compliance_isSet = true;
}

bool OAICreativeServingDecision::is_network_policy_compliance_Set() const{
    return m_network_policy_compliance_isSet;
}

bool OAICreativeServingDecision::is_network_policy_compliance_Valid() const{
    return m_network_policy_compliance_isValid;
}

OAIPolicyCompliance OAICreativeServingDecision::getPlatformPolicyCompliance() const {
    return m_platform_policy_compliance;
}
void OAICreativeServingDecision::setPlatformPolicyCompliance(const OAIPolicyCompliance &platform_policy_compliance) {
    m_platform_policy_compliance = platform_policy_compliance;
    m_platform_policy_compliance_isSet = true;
}

bool OAICreativeServingDecision::is_platform_policy_compliance_Set() const{
    return m_platform_policy_compliance_isSet;
}

bool OAICreativeServingDecision::is_platform_policy_compliance_Valid() const{
    return m_platform_policy_compliance_isValid;
}

OAIPolicyCompliance OAICreativeServingDecision::getRussiaPolicyCompliance() const {
    return m_russia_policy_compliance;
}
void OAICreativeServingDecision::setRussiaPolicyCompliance(const OAIPolicyCompliance &russia_policy_compliance) {
    m_russia_policy_compliance = russia_policy_compliance;
    m_russia_policy_compliance_isSet = true;
}

bool OAICreativeServingDecision::is_russia_policy_compliance_Set() const{
    return m_russia_policy_compliance_isSet;
}

bool OAICreativeServingDecision::is_russia_policy_compliance_Valid() const{
    return m_russia_policy_compliance_isValid;
}

bool OAICreativeServingDecision::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ad_technology_providers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_china_policy_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deals_policy_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_advertisers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_attributes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_click_through_urls.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_languages.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_product_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_sensitive_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected_vendor_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_update_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_policy_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_policy_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_russia_policy_compliance.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreativeServingDecision::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
