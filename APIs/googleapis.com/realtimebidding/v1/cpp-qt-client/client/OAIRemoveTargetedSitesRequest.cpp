/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRemoveTargetedSitesRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRemoveTargetedSitesRequest::OAIRemoveTargetedSitesRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRemoveTargetedSitesRequest::OAIRemoveTargetedSitesRequest() {
    this->initializeModel();
}

OAIRemoveTargetedSitesRequest::~OAIRemoveTargetedSitesRequest() {}

void OAIRemoveTargetedSitesRequest::initializeModel() {

    m_sites_isSet = false;
    m_sites_isValid = false;
}

void OAIRemoveTargetedSitesRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRemoveTargetedSitesRequest::fromJsonObject(QJsonObject json) {

    m_sites_isValid = ::OpenAPI::fromJsonValue(m_sites, json[QString("sites")]);
    m_sites_isSet = !json[QString("sites")].isNull() && m_sites_isValid;
}

QString OAIRemoveTargetedSitesRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRemoveTargetedSitesRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_sites.size() > 0) {
        obj.insert(QString("sites"), ::OpenAPI::toJsonValue(m_sites));
    }
    return obj;
}

QList<QString> OAIRemoveTargetedSitesRequest::getSites() const {
    return m_sites;
}
void OAIRemoveTargetedSitesRequest::setSites(const QList<QString> &sites) {
    m_sites = sites;
    m_sites_isSet = true;
}

bool OAIRemoveTargetedSitesRequest::is_sites_Set() const{
    return m_sites_isSet;
}

bool OAIRemoveTargetedSitesRequest::is_sites_Valid() const{
    return m_sites_isValid;
}

bool OAIRemoveTargetedSitesRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRemoveTargetedSitesRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
