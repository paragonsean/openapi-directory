/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDestinationNotWorkingEvidence.h
 *
 * Evidence of the creative&#39;s destination URL not functioning properly or having been incorrectly set up.
 */

#ifndef OAIDestinationNotWorkingEvidence_H
#define OAIDestinationNotWorkingEvidence_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDestinationNotWorkingEvidence : public OAIObject {
public:
    OAIDestinationNotWorkingEvidence();
    OAIDestinationNotWorkingEvidence(QString json);
    ~OAIDestinationNotWorkingEvidence() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDnsError() const;
    void setDnsError(const QString &dns_error);
    bool is_dns_error_Set() const;
    bool is_dns_error_Valid() const;

    QString getExpandedUrl() const;
    void setExpandedUrl(const QString &expanded_url);
    bool is_expanded_url_Set() const;
    bool is_expanded_url_Valid() const;

    qint32 getHttpError() const;
    void setHttpError(const qint32 &http_error);
    bool is_http_error_Set() const;
    bool is_http_error_Valid() const;

    QString getInvalidPage() const;
    void setInvalidPage(const QString &invalid_page);
    bool is_invalid_page_Set() const;
    bool is_invalid_page_Valid() const;

    QString getLastCheckTime() const;
    void setLastCheckTime(const QString &last_check_time);
    bool is_last_check_time_Set() const;
    bool is_last_check_time_Valid() const;

    QString getPlatform() const;
    void setPlatform(const QString &platform);
    bool is_platform_Set() const;
    bool is_platform_Valid() const;

    QString getRedirectionError() const;
    void setRedirectionError(const QString &redirection_error);
    bool is_redirection_error_Set() const;
    bool is_redirection_error_Valid() const;

    QString getUrlRejected() const;
    void setUrlRejected(const QString &url_rejected);
    bool is_url_rejected_Set() const;
    bool is_url_rejected_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_dns_error;
    bool m_dns_error_isSet;
    bool m_dns_error_isValid;

    QString m_expanded_url;
    bool m_expanded_url_isSet;
    bool m_expanded_url_isValid;

    qint32 m_http_error;
    bool m_http_error_isSet;
    bool m_http_error_isValid;

    QString m_invalid_page;
    bool m_invalid_page_isSet;
    bool m_invalid_page_isValid;

    QString m_last_check_time;
    bool m_last_check_time_isSet;
    bool m_last_check_time_isValid;

    QString m_platform;
    bool m_platform_isSet;
    bool m_platform_isValid;

    QString m_redirection_error;
    bool m_redirection_error_isSet;
    bool m_redirection_error_isValid;

    QString m_url_rejected;
    bool m_url_rejected_isSet;
    bool m_url_rejected_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDestinationNotWorkingEvidence)

#endif // OAIDestinationNotWorkingEvidence_H
