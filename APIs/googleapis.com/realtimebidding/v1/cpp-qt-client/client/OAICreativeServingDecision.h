/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICreativeServingDecision.h
 *
 * Top level status and detected attributes of a creative.
 */

#ifndef OAICreativeServingDecision_H
#define OAICreativeServingDecision_H

#include <QJsonObject>

#include "OAIAdTechnologyProviders.h"
#include "OAIAdvertiserAndBrand.h"
#include "OAIPolicyCompliance.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAdTechnologyProviders;
class OAIPolicyCompliance;
class OAIAdvertiserAndBrand;

class OAICreativeServingDecision : public OAIObject {
public:
    OAICreativeServingDecision();
    OAICreativeServingDecision(QString json);
    ~OAICreativeServingDecision() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIAdTechnologyProviders getAdTechnologyProviders() const;
    void setAdTechnologyProviders(const OAIAdTechnologyProviders &ad_technology_providers);
    bool is_ad_technology_providers_Set() const;
    bool is_ad_technology_providers_Valid() const;

    OAIPolicyCompliance getChinaPolicyCompliance() const;
    void setChinaPolicyCompliance(const OAIPolicyCompliance &china_policy_compliance);
    bool is_china_policy_compliance_Set() const;
    bool is_china_policy_compliance_Valid() const;

    OAIPolicyCompliance getDealsPolicyCompliance() const;
    void setDealsPolicyCompliance(const OAIPolicyCompliance &deals_policy_compliance);
    bool is_deals_policy_compliance_Set() const;
    bool is_deals_policy_compliance_Valid() const;

    QList<OAIAdvertiserAndBrand> getDetectedAdvertisers() const;
    void setDetectedAdvertisers(const QList<OAIAdvertiserAndBrand> &detected_advertisers);
    bool is_detected_advertisers_Set() const;
    bool is_detected_advertisers_Valid() const;

    QList<QString> getDetectedAttributes() const;
    void setDetectedAttributes(const QList<QString> &detected_attributes);
    bool is_detected_attributes_Set() const;
    bool is_detected_attributes_Valid() const;

    QList<QString> getDetectedClickThroughUrls() const;
    void setDetectedClickThroughUrls(const QList<QString> &detected_click_through_urls);
    bool is_detected_click_through_urls_Set() const;
    bool is_detected_click_through_urls_Valid() const;

    QList<QString> getDetectedDomains() const;
    void setDetectedDomains(const QList<QString> &detected_domains);
    bool is_detected_domains_Set() const;
    bool is_detected_domains_Valid() const;

    QList<QString> getDetectedLanguages() const;
    void setDetectedLanguages(const QList<QString> &detected_languages);
    bool is_detected_languages_Set() const;
    bool is_detected_languages_Valid() const;

    QList<qint32> getDetectedProductCategories() const;
    void setDetectedProductCategories(const QList<qint32> &detected_product_categories);
    bool is_detected_product_categories_Set() const;
    bool is_detected_product_categories_Valid() const;

    QList<qint32> getDetectedSensitiveCategories() const;
    void setDetectedSensitiveCategories(const QList<qint32> &detected_sensitive_categories);
    bool is_detected_sensitive_categories_Set() const;
    bool is_detected_sensitive_categories_Valid() const;

    QList<qint32> getDetectedVendorIds() const;
    void setDetectedVendorIds(const QList<qint32> &detected_vendor_ids);
    bool is_detected_vendor_ids_Set() const;
    bool is_detected_vendor_ids_Valid() const;

    QString getLastStatusUpdate() const;
    void setLastStatusUpdate(const QString &last_status_update);
    bool is_last_status_update_Set() const;
    bool is_last_status_update_Valid() const;

    OAIPolicyCompliance getNetworkPolicyCompliance() const;
    void setNetworkPolicyCompliance(const OAIPolicyCompliance &network_policy_compliance);
    bool is_network_policy_compliance_Set() const;
    bool is_network_policy_compliance_Valid() const;

    OAIPolicyCompliance getPlatformPolicyCompliance() const;
    void setPlatformPolicyCompliance(const OAIPolicyCompliance &platform_policy_compliance);
    bool is_platform_policy_compliance_Set() const;
    bool is_platform_policy_compliance_Valid() const;

    OAIPolicyCompliance getRussiaPolicyCompliance() const;
    void setRussiaPolicyCompliance(const OAIPolicyCompliance &russia_policy_compliance);
    bool is_russia_policy_compliance_Set() const;
    bool is_russia_policy_compliance_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIAdTechnologyProviders m_ad_technology_providers;
    bool m_ad_technology_providers_isSet;
    bool m_ad_technology_providers_isValid;

    OAIPolicyCompliance m_china_policy_compliance;
    bool m_china_policy_compliance_isSet;
    bool m_china_policy_compliance_isValid;

    OAIPolicyCompliance m_deals_policy_compliance;
    bool m_deals_policy_compliance_isSet;
    bool m_deals_policy_compliance_isValid;

    QList<OAIAdvertiserAndBrand> m_detected_advertisers;
    bool m_detected_advertisers_isSet;
    bool m_detected_advertisers_isValid;

    QList<QString> m_detected_attributes;
    bool m_detected_attributes_isSet;
    bool m_detected_attributes_isValid;

    QList<QString> m_detected_click_through_urls;
    bool m_detected_click_through_urls_isSet;
    bool m_detected_click_through_urls_isValid;

    QList<QString> m_detected_domains;
    bool m_detected_domains_isSet;
    bool m_detected_domains_isValid;

    QList<QString> m_detected_languages;
    bool m_detected_languages_isSet;
    bool m_detected_languages_isValid;

    QList<qint32> m_detected_product_categories;
    bool m_detected_product_categories_isSet;
    bool m_detected_product_categories_isValid;

    QList<qint32> m_detected_sensitive_categories;
    bool m_detected_sensitive_categories_isSet;
    bool m_detected_sensitive_categories_isValid;

    QList<qint32> m_detected_vendor_ids;
    bool m_detected_vendor_ids_isSet;
    bool m_detected_vendor_ids_isValid;

    QString m_last_status_update;
    bool m_last_status_update_isSet;
    bool m_last_status_update_isValid;

    OAIPolicyCompliance m_network_policy_compliance;
    bool m_network_policy_compliance_isSet;
    bool m_network_policy_compliance_isValid;

    OAIPolicyCompliance m_platform_policy_compliance;
    bool m_platform_policy_compliance_isSet;
    bool m_platform_policy_compliance_isValid;

    OAIPolicyCompliance m_russia_policy_compliance;
    bool m_russia_policy_compliance_isSet;
    bool m_russia_policy_compliance_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICreativeServingDecision)

#endif // OAICreativeServingDecision_H
