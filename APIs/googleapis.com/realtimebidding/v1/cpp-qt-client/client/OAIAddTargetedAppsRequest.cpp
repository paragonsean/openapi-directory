/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAddTargetedAppsRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAddTargetedAppsRequest::OAIAddTargetedAppsRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAddTargetedAppsRequest::OAIAddTargetedAppsRequest() {
    this->initializeModel();
}

OAIAddTargetedAppsRequest::~OAIAddTargetedAppsRequest() {}

void OAIAddTargetedAppsRequest::initializeModel() {

    m_app_ids_isSet = false;
    m_app_ids_isValid = false;

    m_targeting_mode_isSet = false;
    m_targeting_mode_isValid = false;
}

void OAIAddTargetedAppsRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAddTargetedAppsRequest::fromJsonObject(QJsonObject json) {

    m_app_ids_isValid = ::OpenAPI::fromJsonValue(m_app_ids, json[QString("appIds")]);
    m_app_ids_isSet = !json[QString("appIds")].isNull() && m_app_ids_isValid;

    m_targeting_mode_isValid = ::OpenAPI::fromJsonValue(m_targeting_mode, json[QString("targetingMode")]);
    m_targeting_mode_isSet = !json[QString("targetingMode")].isNull() && m_targeting_mode_isValid;
}

QString OAIAddTargetedAppsRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAddTargetedAppsRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_app_ids.size() > 0) {
        obj.insert(QString("appIds"), ::OpenAPI::toJsonValue(m_app_ids));
    }
    if (m_targeting_mode_isSet) {
        obj.insert(QString("targetingMode"), ::OpenAPI::toJsonValue(m_targeting_mode));
    }
    return obj;
}

QList<QString> OAIAddTargetedAppsRequest::getAppIds() const {
    return m_app_ids;
}
void OAIAddTargetedAppsRequest::setAppIds(const QList<QString> &app_ids) {
    m_app_ids = app_ids;
    m_app_ids_isSet = true;
}

bool OAIAddTargetedAppsRequest::is_app_ids_Set() const{
    return m_app_ids_isSet;
}

bool OAIAddTargetedAppsRequest::is_app_ids_Valid() const{
    return m_app_ids_isValid;
}

QString OAIAddTargetedAppsRequest::getTargetingMode() const {
    return m_targeting_mode;
}
void OAIAddTargetedAppsRequest::setTargetingMode(const QString &targeting_mode) {
    m_targeting_mode = targeting_mode;
    m_targeting_mode_isSet = true;
}

bool OAIAddTargetedAppsRequest::is_targeting_mode_Set() const{
    return m_targeting_mode_isSet;
}

bool OAIAddTargetedAppsRequest::is_targeting_mode_Valid() const{
    return m_targeting_mode_isValid;
}

bool OAIAddTargetedAppsRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_app_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_targeting_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAddTargetedAppsRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
