/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPolicyCompliance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPolicyCompliance::OAIPolicyCompliance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPolicyCompliance::OAIPolicyCompliance() {
    this->initializeModel();
}

OAIPolicyCompliance::~OAIPolicyCompliance() {}

void OAIPolicyCompliance::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_topics_isSet = false;
    m_topics_isValid = false;
}

void OAIPolicyCompliance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPolicyCompliance::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_topics_isValid = ::OpenAPI::fromJsonValue(m_topics, json[QString("topics")]);
    m_topics_isSet = !json[QString("topics")].isNull() && m_topics_isValid;
}

QString OAIPolicyCompliance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPolicyCompliance::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_topics.size() > 0) {
        obj.insert(QString("topics"), ::OpenAPI::toJsonValue(m_topics));
    }
    return obj;
}

QString OAIPolicyCompliance::getStatus() const {
    return m_status;
}
void OAIPolicyCompliance::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIPolicyCompliance::is_status_Set() const{
    return m_status_isSet;
}

bool OAIPolicyCompliance::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIPolicyTopicEntry> OAIPolicyCompliance::getTopics() const {
    return m_topics;
}
void OAIPolicyCompliance::setTopics(const QList<OAIPolicyTopicEntry> &topics) {
    m_topics = topics;
    m_topics_isSet = true;
}

bool OAIPolicyCompliance::is_topics_Set() const{
    return m_topics_isSet;
}

bool OAIPolicyCompliance::is_topics_Valid() const{
    return m_topics_isValid;
}

bool OAIPolicyCompliance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPolicyCompliance::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
