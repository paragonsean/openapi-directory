/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatchCreativesResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatchCreativesResponse::OAIWatchCreativesResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatchCreativesResponse::OAIWatchCreativesResponse() {
    this->initializeModel();
}

OAIWatchCreativesResponse::~OAIWatchCreativesResponse() {}

void OAIWatchCreativesResponse::initializeModel() {

    m_subscription_isSet = false;
    m_subscription_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;
}

void OAIWatchCreativesResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatchCreativesResponse::fromJsonObject(QJsonObject json) {

    m_subscription_isValid = ::OpenAPI::fromJsonValue(m_subscription, json[QString("subscription")]);
    m_subscription_isSet = !json[QString("subscription")].isNull() && m_subscription_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;
}

QString OAIWatchCreativesResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatchCreativesResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_subscription_isSet) {
        obj.insert(QString("subscription"), ::OpenAPI::toJsonValue(m_subscription));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    return obj;
}

QString OAIWatchCreativesResponse::getSubscription() const {
    return m_subscription;
}
void OAIWatchCreativesResponse::setSubscription(const QString &subscription) {
    m_subscription = subscription;
    m_subscription_isSet = true;
}

bool OAIWatchCreativesResponse::is_subscription_Set() const{
    return m_subscription_isSet;
}

bool OAIWatchCreativesResponse::is_subscription_Valid() const{
    return m_subscription_isValid;
}

QString OAIWatchCreativesResponse::getTopic() const {
    return m_topic;
}
void OAIWatchCreativesResponse::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIWatchCreativesResponse::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIWatchCreativesResponse::is_topic_Valid() const{
    return m_topic_isValid;
}

bool OAIWatchCreativesResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatchCreativesResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
