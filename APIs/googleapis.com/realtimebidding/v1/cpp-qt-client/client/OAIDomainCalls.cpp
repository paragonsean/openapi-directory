/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDomainCalls.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDomainCalls::OAIDomainCalls(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDomainCalls::OAIDomainCalls() {
    this->initializeModel();
}

OAIDomainCalls::~OAIDomainCalls() {}

void OAIDomainCalls::initializeModel() {

    m_domain_isSet = false;
    m_domain_isValid = false;

    m_http_call_count_isSet = false;
    m_http_call_count_isValid = false;
}

void OAIDomainCalls::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDomainCalls::fromJsonObject(QJsonObject json) {

    m_domain_isValid = ::OpenAPI::fromJsonValue(m_domain, json[QString("domain")]);
    m_domain_isSet = !json[QString("domain")].isNull() && m_domain_isValid;

    m_http_call_count_isValid = ::OpenAPI::fromJsonValue(m_http_call_count, json[QString("httpCallCount")]);
    m_http_call_count_isSet = !json[QString("httpCallCount")].isNull() && m_http_call_count_isValid;
}

QString OAIDomainCalls::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDomainCalls::asJsonObject() const {
    QJsonObject obj;
    if (m_domain_isSet) {
        obj.insert(QString("domain"), ::OpenAPI::toJsonValue(m_domain));
    }
    if (m_http_call_count_isSet) {
        obj.insert(QString("httpCallCount"), ::OpenAPI::toJsonValue(m_http_call_count));
    }
    return obj;
}

QString OAIDomainCalls::getDomain() const {
    return m_domain;
}
void OAIDomainCalls::setDomain(const QString &domain) {
    m_domain = domain;
    m_domain_isSet = true;
}

bool OAIDomainCalls::is_domain_Set() const{
    return m_domain_isSet;
}

bool OAIDomainCalls::is_domain_Valid() const{
    return m_domain_isValid;
}

qint32 OAIDomainCalls::getHttpCallCount() const {
    return m_http_call_count;
}
void OAIDomainCalls::setHttpCallCount(const qint32 &http_call_count) {
    m_http_call_count = http_call_count;
    m_http_call_count_isSet = true;
}

bool OAIDomainCalls::is_http_call_count_Set() const{
    return m_http_call_count_isSet;
}

bool OAIDomainCalls::is_http_call_count_Valid() const{
    return m_http_call_count_isValid;
}

bool OAIDomainCalls::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_domain_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_call_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDomainCalls::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
