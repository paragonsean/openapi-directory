/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBiddersApi_H
#define OAI_OAIBiddersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddTargetedAppsRequest.h"
#include "OAIAddTargetedPublishersRequest.h"
#include "OAIAddTargetedSitesRequest.h"
#include "OAIBatchApprovePublisherConnectionsRequest.h"
#include "OAIBatchApprovePublisherConnectionsResponse.h"
#include "OAIBatchRejectPublisherConnectionsRequest.h"
#include "OAIBatchRejectPublisherConnectionsResponse.h"
#include "OAIListBiddersResponse.h"
#include "OAIListEndpointsResponse.h"
#include "OAIListPretargetingConfigsResponse.h"
#include "OAIListPublisherConnectionsResponse.h"
#include "OAIObject.h"
#include "OAIPretargetingConfig.h"
#include "OAIRemoveTargetedAppsRequest.h"
#include "OAIRemoveTargetedPublishersRequest.h"
#include "OAIRemoveTargetedSitesRequest.h"
#include "OAIWatchCreativesResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBiddersApi : public QObject {
    Q_OBJECT

public:
    OAIBiddersApi(const int timeOut = 0);
    ~OAIBiddersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void realtimebidding_bidders_creatives_watch(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void realtimebidding_bidders_endpoints_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void realtimebidding_bidders_list(const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_activate(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  pretargeting_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_targeted_apps_request OAIAddTargetedAppsRequest [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_addTargetedApps(const QString &pretargeting_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddTargetedAppsRequest> &oai_add_targeted_apps_request = ::OpenAPI::OptionalParam<OAIAddTargetedAppsRequest>());

    /**
    * @param[in]  pretargeting_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_targeted_publishers_request OAIAddTargetedPublishersRequest [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishers(const QString &pretargeting_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddTargetedPublishersRequest> &oai_add_targeted_publishers_request = ::OpenAPI::OptionalParam<OAIAddTargetedPublishersRequest>());

    /**
    * @param[in]  pretargeting_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_add_targeted_sites_request OAIAddTargetedSitesRequest [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_addTargetedSites(const QString &pretargeting_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIAddTargetedSitesRequest> &oai_add_targeted_sites_request = ::OpenAPI::OptionalParam<OAIAddTargetedSitesRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_pretargeting_config OAIPretargetingConfig [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_create(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIPretargetingConfig> &oai_pretargeting_config = ::OpenAPI::OptionalParam<OAIPretargetingConfig>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_delete(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pretargeting_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_remove_targeted_apps_request OAIRemoveTargetedAppsRequest [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_removeTargetedApps(const QString &pretargeting_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveTargetedAppsRequest> &oai_remove_targeted_apps_request = ::OpenAPI::OptionalParam<OAIRemoveTargetedAppsRequest>());

    /**
    * @param[in]  pretargeting_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_remove_targeted_publishers_request OAIRemoveTargetedPublishersRequest [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishers(const QString &pretargeting_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveTargetedPublishersRequest> &oai_remove_targeted_publishers_request = ::OpenAPI::OptionalParam<OAIRemoveTargetedPublishersRequest>());

    /**
    * @param[in]  pretargeting_config QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_remove_targeted_sites_request OAIRemoveTargetedSitesRequest [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_removeTargetedSites(const QString &pretargeting_config, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIRemoveTargetedSitesRequest> &oai_remove_targeted_sites_request = ::OpenAPI::OptionalParam<OAIRemoveTargetedSitesRequest>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  body OAIObject [optional]
    */
    virtual void realtimebidding_bidders_pretargetingConfigs_suspend(const QString &name, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIObject> &body = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_approve_publisher_connections_request OAIBatchApprovePublisherConnectionsRequest [optional]
    */
    virtual void realtimebidding_bidders_publisherConnections_batchApprove(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchApprovePublisherConnectionsRequest> &oai_batch_approve_publisher_connections_request = ::OpenAPI::OptionalParam<OAIBatchApprovePublisherConnectionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  oai_batch_reject_publisher_connections_request OAIBatchRejectPublisherConnectionsRequest [optional]
    */
    virtual void realtimebidding_bidders_publisherConnections_batchReject(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBatchRejectPublisherConnectionsRequest> &oai_batch_reject_publisher_connections_request = ::OpenAPI::OptionalParam<OAIBatchRejectPublisherConnectionsRequest>());

    /**
    * @param[in]  parent QString [required]
    * @param[in]  _xgafv QString [optional]
    * @param[in]  access_token QString [optional]
    * @param[in]  alt QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  oauth_token QString [optional]
    * @param[in]  pretty_print bool [optional]
    * @param[in]  quota_user QString [optional]
    * @param[in]  upload_protocol QString [optional]
    * @param[in]  upload_type QString [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  order_by QString [optional]
    * @param[in]  page_size qint32 [optional]
    * @param[in]  page_token QString [optional]
    */
    virtual void realtimebidding_bidders_publisherConnections_list(const QString &parent, const ::OpenAPI::OptionalParam<QString> &_xgafv = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &access_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &oauth_token = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &pretty_print = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &quota_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_protocol = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &upload_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &page_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void realtimebidding_bidders_creatives_watchCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_endpoints_listCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_listCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_activateCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_createCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_deleteCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_listCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_pretargetingConfigs_suspendCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_publisherConnections_batchApproveCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_publisherConnections_batchRejectCallback(OAIHttpRequestWorker *worker);
    void realtimebidding_bidders_publisherConnections_listCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void realtimebidding_bidders_creatives_watchSignal(OAIWatchCreativesResponse summary);
    void realtimebidding_bidders_endpoints_listSignal(OAIListEndpointsResponse summary);
    void realtimebidding_bidders_listSignal(OAIListBiddersResponse summary);
    void realtimebidding_bidders_pretargetingConfigs_activateSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_createSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_deleteSignal(OAIObject summary);
    void realtimebidding_bidders_pretargetingConfigs_listSignal(OAIListPretargetingConfigsResponse summary);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_suspendSignal(OAIPretargetingConfig summary);
    void realtimebidding_bidders_publisherConnections_batchApproveSignal(OAIBatchApprovePublisherConnectionsResponse summary);
    void realtimebidding_bidders_publisherConnections_batchRejectSignal(OAIBatchRejectPublisherConnectionsResponse summary);
    void realtimebidding_bidders_publisherConnections_listSignal(OAIListPublisherConnectionsResponse summary);


    void realtimebidding_bidders_creatives_watchSignalFull(OAIHttpRequestWorker *worker, OAIWatchCreativesResponse summary);
    void realtimebidding_bidders_endpoints_listSignalFull(OAIHttpRequestWorker *worker, OAIListEndpointsResponse summary);
    void realtimebidding_bidders_listSignalFull(OAIHttpRequestWorker *worker, OAIListBiddersResponse summary);
    void realtimebidding_bidders_pretargetingConfigs_activateSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_createSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_deleteSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void realtimebidding_bidders_pretargetingConfigs_listSignalFull(OAIHttpRequestWorker *worker, OAIListPretargetingConfigsResponse summary);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_pretargetingConfigs_suspendSignalFull(OAIHttpRequestWorker *worker, OAIPretargetingConfig summary);
    void realtimebidding_bidders_publisherConnections_batchApproveSignalFull(OAIHttpRequestWorker *worker, OAIBatchApprovePublisherConnectionsResponse summary);
    void realtimebidding_bidders_publisherConnections_batchRejectSignalFull(OAIHttpRequestWorker *worker, OAIBatchRejectPublisherConnectionsResponse summary);
    void realtimebidding_bidders_publisherConnections_listSignalFull(OAIHttpRequestWorker *worker, OAIListPublisherConnectionsResponse summary);

    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_creatives_watchSignalError() instead")
    void realtimebidding_bidders_creatives_watchSignalE(OAIWatchCreativesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_creatives_watchSignalError(OAIWatchCreativesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_endpoints_listSignalError() instead")
    void realtimebidding_bidders_endpoints_listSignalE(OAIListEndpointsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_endpoints_listSignalError(OAIListEndpointsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_listSignalError() instead")
    void realtimebidding_bidders_listSignalE(OAIListBiddersResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_listSignalError(OAIListBiddersResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_activateSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_activateSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_activateSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_createSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_createSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_createSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_deleteSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_deleteSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_deleteSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_listSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_listSignalE(OAIListPretargetingConfigsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_listSignalError(OAIListPretargetingConfigsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_suspendSignalError() instead")
    void realtimebidding_bidders_pretargetingConfigs_suspendSignalE(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_suspendSignalError(OAIPretargetingConfig summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_publisherConnections_batchApproveSignalError() instead")
    void realtimebidding_bidders_publisherConnections_batchApproveSignalE(OAIBatchApprovePublisherConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_publisherConnections_batchApproveSignalError(OAIBatchApprovePublisherConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_publisherConnections_batchRejectSignalError() instead")
    void realtimebidding_bidders_publisherConnections_batchRejectSignalE(OAIBatchRejectPublisherConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_publisherConnections_batchRejectSignalError(OAIBatchRejectPublisherConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_publisherConnections_listSignalError() instead")
    void realtimebidding_bidders_publisherConnections_listSignalE(OAIListPublisherConnectionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_publisherConnections_listSignalError(OAIListPublisherConnectionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_creatives_watchSignalErrorFull() instead")
    void realtimebidding_bidders_creatives_watchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_creatives_watchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_endpoints_listSignalErrorFull() instead")
    void realtimebidding_bidders_endpoints_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_endpoints_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_listSignalErrorFull() instead")
    void realtimebidding_bidders_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_activateSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_activateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_activateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedPublishersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_addTargetedSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_createSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_createSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_createSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_deleteSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_deleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_deleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_listSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedAppsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedPublishersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_removeTargetedSitesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_pretargetingConfigs_suspendSignalErrorFull() instead")
    void realtimebidding_bidders_pretargetingConfigs_suspendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_pretargetingConfigs_suspendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_publisherConnections_batchApproveSignalErrorFull() instead")
    void realtimebidding_bidders_publisherConnections_batchApproveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_publisherConnections_batchApproveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_publisherConnections_batchRejectSignalErrorFull() instead")
    void realtimebidding_bidders_publisherConnections_batchRejectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_publisherConnections_batchRejectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use realtimebidding_bidders_publisherConnections_listSignalErrorFull() instead")
    void realtimebidding_bidders_publisherConnections_listSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void realtimebidding_bidders_publisherConnections_listSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
