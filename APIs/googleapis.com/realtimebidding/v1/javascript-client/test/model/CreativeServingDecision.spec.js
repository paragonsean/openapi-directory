/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RealTimeBiddingApi);
  }
}(this, function(expect, RealTimeBiddingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RealTimeBiddingApi.CreativeServingDecision();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('CreativeServingDecision', function() {
    it('should create an instance of CreativeServingDecision', function() {
      // uncomment below and update the code to test CreativeServingDecision
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be.a(RealTimeBiddingApi.CreativeServingDecision);
    });

    it('should have the property adTechnologyProviders (base name: "adTechnologyProviders")', function() {
      // uncomment below and update the code to test the property adTechnologyProviders
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property chinaPolicyCompliance (base name: "chinaPolicyCompliance")', function() {
      // uncomment below and update the code to test the property chinaPolicyCompliance
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property dealsPolicyCompliance (base name: "dealsPolicyCompliance")', function() {
      // uncomment below and update the code to test the property dealsPolicyCompliance
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedAdvertisers (base name: "detectedAdvertisers")', function() {
      // uncomment below and update the code to test the property detectedAdvertisers
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedAttributes (base name: "detectedAttributes")', function() {
      // uncomment below and update the code to test the property detectedAttributes
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedClickThroughUrls (base name: "detectedClickThroughUrls")', function() {
      // uncomment below and update the code to test the property detectedClickThroughUrls
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedDomains (base name: "detectedDomains")', function() {
      // uncomment below and update the code to test the property detectedDomains
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedLanguages (base name: "detectedLanguages")', function() {
      // uncomment below and update the code to test the property detectedLanguages
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedProductCategories (base name: "detectedProductCategories")', function() {
      // uncomment below and update the code to test the property detectedProductCategories
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedSensitiveCategories (base name: "detectedSensitiveCategories")', function() {
      // uncomment below and update the code to test the property detectedSensitiveCategories
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property detectedVendorIds (base name: "detectedVendorIds")', function() {
      // uncomment below and update the code to test the property detectedVendorIds
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property lastStatusUpdate (base name: "lastStatusUpdate")', function() {
      // uncomment below and update the code to test the property lastStatusUpdate
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property networkPolicyCompliance (base name: "networkPolicyCompliance")', function() {
      // uncomment below and update the code to test the property networkPolicyCompliance
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property platformPolicyCompliance (base name: "platformPolicyCompliance")', function() {
      // uncomment below and update the code to test the property platformPolicyCompliance
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

    it('should have the property russiaPolicyCompliance (base name: "russiaPolicyCompliance")', function() {
      // uncomment below and update the code to test the property russiaPolicyCompliance
      //var instance = new RealTimeBiddingApi.CreativeServingDecision();
      //expect(instance).to.be();
    });

  });

}));
