/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RealTimeBiddingApi);
  }
}(this, function(expect, RealTimeBiddingApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RealTimeBiddingApi.PretargetingConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PretargetingConfig', function() {
    it('should create an instance of PretargetingConfig', function() {
      // uncomment below and update the code to test PretargetingConfig
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be.a(RealTimeBiddingApi.PretargetingConfig);
    });

    it('should have the property allowedUserTargetingModes (base name: "allowedUserTargetingModes")', function() {
      // uncomment below and update the code to test the property allowedUserTargetingModes
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property appTargeting (base name: "appTargeting")', function() {
      // uncomment below and update the code to test the property appTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property billingId (base name: "billingId")', function() {
      // uncomment below and update the code to test the property billingId
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property displayName (base name: "displayName")', function() {
      // uncomment below and update the code to test the property displayName
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property excludedContentLabelIds (base name: "excludedContentLabelIds")', function() {
      // uncomment below and update the code to test the property excludedContentLabelIds
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property geoTargeting (base name: "geoTargeting")', function() {
      // uncomment below and update the code to test the property geoTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedCreativeDimensions (base name: "includedCreativeDimensions")', function() {
      // uncomment below and update the code to test the property includedCreativeDimensions
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedEnvironments (base name: "includedEnvironments")', function() {
      // uncomment below and update the code to test the property includedEnvironments
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedFormats (base name: "includedFormats")', function() {
      // uncomment below and update the code to test the property includedFormats
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedLanguages (base name: "includedLanguages")', function() {
      // uncomment below and update the code to test the property includedLanguages
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedMobileOperatingSystemIds (base name: "includedMobileOperatingSystemIds")', function() {
      // uncomment below and update the code to test the property includedMobileOperatingSystemIds
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedPlatforms (base name: "includedPlatforms")', function() {
      // uncomment below and update the code to test the property includedPlatforms
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property includedUserIdTypes (base name: "includedUserIdTypes")', function() {
      // uncomment below and update the code to test the property includedUserIdTypes
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property interstitialTargeting (base name: "interstitialTargeting")', function() {
      // uncomment below and update the code to test the property interstitialTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property invalidGeoIds (base name: "invalidGeoIds")', function() {
      // uncomment below and update the code to test the property invalidGeoIds
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property maximumQps (base name: "maximumQps")', function() {
      // uncomment below and update the code to test the property maximumQps
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property minimumViewabilityDecile (base name: "minimumViewabilityDecile")', function() {
      // uncomment below and update the code to test the property minimumViewabilityDecile
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property publisherTargeting (base name: "publisherTargeting")', function() {
      // uncomment below and update the code to test the property publisherTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property userListTargeting (base name: "userListTargeting")', function() {
      // uncomment below and update the code to test the property userListTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property verticalTargeting (base name: "verticalTargeting")', function() {
      // uncomment below and update the code to test the property verticalTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

    it('should have the property webTargeting (base name: "webTargeting")', function() {
      // uncomment below and update the code to test the property webTargeting
      //var instance = new RealTimeBiddingApi.PretargetingConfig();
      //expect(instance).to.be();
    });

  });

}));
