/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddTargetedAppsRequest from '../model/AddTargetedAppsRequest';
import AddTargetedPublishersRequest from '../model/AddTargetedPublishersRequest';
import AddTargetedSitesRequest from '../model/AddTargetedSitesRequest';
import BatchApprovePublisherConnectionsRequest from '../model/BatchApprovePublisherConnectionsRequest';
import BatchApprovePublisherConnectionsResponse from '../model/BatchApprovePublisherConnectionsResponse';
import BatchRejectPublisherConnectionsRequest from '../model/BatchRejectPublisherConnectionsRequest';
import BatchRejectPublisherConnectionsResponse from '../model/BatchRejectPublisherConnectionsResponse';
import ListBiddersResponse from '../model/ListBiddersResponse';
import ListEndpointsResponse from '../model/ListEndpointsResponse';
import ListPretargetingConfigsResponse from '../model/ListPretargetingConfigsResponse';
import ListPublisherConnectionsResponse from '../model/ListPublisherConnectionsResponse';
import PretargetingConfig from '../model/PretargetingConfig';
import RemoveTargetedAppsRequest from '../model/RemoveTargetedAppsRequest';
import RemoveTargetedPublishersRequest from '../model/RemoveTargetedPublishersRequest';
import RemoveTargetedSitesRequest from '../model/RemoveTargetedSitesRequest';
import WatchCreativesResponse from '../model/WatchCreativesResponse';

/**
* Bidders service.
* @module api/BiddersApi
* @version v1
*/
export default class BiddersApi {

    /**
    * Constructs a new BiddersApi. 
    * @alias module:api/BiddersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the realtimebiddingBiddersCreativesWatch operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersCreativesWatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WatchCreativesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic when any of the bidder's creatives change status. All of the bidder's service accounts will have access to read from the topic. Subsequent invocations of this method will return the existing Pub/Sub configuration.
     * @param {String} parent Required. To watch all creatives pertaining to the bidder and all its child seat accounts, the bidder must follow the pattern `bidders/{bidderAccountId}`.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersCreativesWatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WatchCreativesResponse}
     */
    realtimebiddingBiddersCreativesWatch(parent, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersCreativesWatch");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WatchCreativesResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/creatives:watch', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersEndpointsList operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersEndpointsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListEndpointsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the bidder's endpoints.
     * @param {String} parent Required. Name of the bidder whose endpoints will be listed. Format: `bidders/{bidderAccountId}`
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of endpoints to return. If unspecified, at most 100 endpoints will be returned. The maximum value is 500; values above 500 will be coerced to 500.
     * @param {String} [pageToken] A token identifying a page of results the server should return. This value is received from a previous `ListEndpoints` call in ListEndpointsResponse.nextPageToken.
     * @param {module:api/BiddersApi~realtimebiddingBiddersEndpointsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListEndpointsResponse}
     */
    realtimebiddingBiddersEndpointsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersEndpointsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListEndpointsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/endpoints', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersList operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListBiddersResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the bidder accounts that belong to the caller.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of bidders to return. If unspecified, at most 100 bidders will be returned. The maximum value is 500; values above 500 will be coerced to 500.
     * @param {String} [pageToken] A token identifying a page of results the server should return. This value is received from a previous `ListBidders` call in ListBiddersResponse.nextPageToken.
     * @param {module:api/BiddersApi~realtimebiddingBiddersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListBiddersResponse}
     */
    realtimebiddingBiddersList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListBiddersResponse;
      return this.apiClient.callApi(
        '/v1/bidders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsActivate operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsActivateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Activates a pretargeting configuration.
     * @param {String} name Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsActivateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsActivate(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling realtimebiddingBiddersPretargetingConfigsActivate");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{name}:activate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsAddTargetedApps operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsAddTargetedAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds targeted apps to the pretargeting configuration.
     * @param {String} pretargetingConfig Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AddTargetedAppsRequest} [addTargetedAppsRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsAddTargetedAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsAddTargetedApps(pretargetingConfig, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTargetedAppsRequest'];
      // verify the required parameter 'pretargetingConfig' is set
      if (pretargetingConfig === undefined || pretargetingConfig === null) {
        throw new Error("Missing the required parameter 'pretargetingConfig' when calling realtimebiddingBiddersPretargetingConfigsAddTargetedApps");
      }

      let pathParams = {
        'pretargetingConfig': pretargetingConfig
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{pretargetingConfig}:addTargetedApps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsAddTargetedPublishers operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsAddTargetedPublishersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds targeted publishers to the pretargeting config.
     * @param {String} pretargetingConfig Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AddTargetedPublishersRequest} [addTargetedPublishersRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsAddTargetedPublishersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsAddTargetedPublishers(pretargetingConfig, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTargetedPublishersRequest'];
      // verify the required parameter 'pretargetingConfig' is set
      if (pretargetingConfig === undefined || pretargetingConfig === null) {
        throw new Error("Missing the required parameter 'pretargetingConfig' when calling realtimebiddingBiddersPretargetingConfigsAddTargetedPublishers");
      }

      let pathParams = {
        'pretargetingConfig': pretargetingConfig
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{pretargetingConfig}:addTargetedPublishers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsAddTargetedSites operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsAddTargetedSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds targeted sites to the pretargeting configuration.
     * @param {String} pretargetingConfig Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/AddTargetedSitesRequest} [addTargetedSitesRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsAddTargetedSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsAddTargetedSites(pretargetingConfig, opts, callback) {
      opts = opts || {};
      let postBody = opts['addTargetedSitesRequest'];
      // verify the required parameter 'pretargetingConfig' is set
      if (pretargetingConfig === undefined || pretargetingConfig === null) {
        throw new Error("Missing the required parameter 'pretargetingConfig' when calling realtimebiddingBiddersPretargetingConfigsAddTargetedSites");
      }

      let pathParams = {
        'pretargetingConfig': pretargetingConfig
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{pretargetingConfig}:addTargetedSites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsCreate operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a pretargeting configuration. A pretargeting configuration's state (PretargetingConfig.state) is active upon creation, and it will start to affect traffic shortly after. A bidder may create a maximum of 10 pretargeting configurations. Attempts to exceed this maximum results in a 400 bad request error.
     * @param {String} parent Required. Name of the bidder to create the pretargeting configuration for. Format: bidders/{bidderAccountId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/PretargetingConfig} [pretargetingConfig] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsCreate(parent, opts, callback) {
      opts = opts || {};
      let postBody = opts['pretargetingConfig'];
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersPretargetingConfigsCreate");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{parent}/pretargetingConfigs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsDelete operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a pretargeting configuration.
     * @param {String} name Required. The name of the pretargeting configuration to delete. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    realtimebiddingBiddersPretargetingConfigsDelete(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling realtimebiddingBiddersPretargetingConfigsDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsList operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPretargetingConfigsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all pretargeting configurations for a single bidder.
     * @param {String} parent Required. Name of the bidder whose pretargeting configurations will be listed. Format: bidders/{bidderAccountId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Number} [pageSize] The maximum number of pretargeting configurations to return. If unspecified, at most 10 pretargeting configurations will be returned. The maximum value is 100; values above 100 will be coerced to 100.
     * @param {String} [pageToken] A token identifying a page of results the server should return. This value is received from a previous `ListPretargetingConfigs` call in ListPretargetingConfigsResponse.nextPageToken.
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPretargetingConfigsResponse}
     */
    realtimebiddingBiddersPretargetingConfigsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersPretargetingConfigsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPretargetingConfigsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/pretargetingConfigs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsRemoveTargetedApps operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes targeted apps from the pretargeting configuration.
     * @param {String} pretargetingConfig Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/RemoveTargetedAppsRequest} [removeTargetedAppsRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsRemoveTargetedApps(pretargetingConfig, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTargetedAppsRequest'];
      // verify the required parameter 'pretargetingConfig' is set
      if (pretargetingConfig === undefined || pretargetingConfig === null) {
        throw new Error("Missing the required parameter 'pretargetingConfig' when calling realtimebiddingBiddersPretargetingConfigsRemoveTargetedApps");
      }

      let pathParams = {
        'pretargetingConfig': pretargetingConfig
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{pretargetingConfig}:removeTargetedApps', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishers operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes targeted publishers from the pretargeting config.
     * @param {String} pretargetingConfig Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/RemoveTargetedPublishersRequest} [removeTargetedPublishersRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishers(pretargetingConfig, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTargetedPublishersRequest'];
      // verify the required parameter 'pretargetingConfig' is set
      if (pretargetingConfig === undefined || pretargetingConfig === null) {
        throw new Error("Missing the required parameter 'pretargetingConfig' when calling realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishers");
      }

      let pathParams = {
        'pretargetingConfig': pretargetingConfig
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{pretargetingConfig}:removeTargetedPublishers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsRemoveTargetedSites operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes targeted sites from the pretargeting configuration.
     * @param {String} pretargetingConfig Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/RemoveTargetedSitesRequest} [removeTargetedSitesRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsRemoveTargetedSites(pretargetingConfig, opts, callback) {
      opts = opts || {};
      let postBody = opts['removeTargetedSitesRequest'];
      // verify the required parameter 'pretargetingConfig' is set
      if (pretargetingConfig === undefined || pretargetingConfig === null) {
        throw new Error("Missing the required parameter 'pretargetingConfig' when calling realtimebiddingBiddersPretargetingConfigsRemoveTargetedSites");
      }

      let pathParams = {
        'pretargetingConfig': pretargetingConfig
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{pretargetingConfig}:removeTargetedSites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPretargetingConfigsSuspend operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsSuspendCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PretargetingConfig} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspends a pretargeting configuration.
     * @param {String} name Required. The name of the pretargeting configuration. Format: bidders/{bidderAccountId}/pretargetingConfig/{configId}
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {Object.<String, Object>} [body] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPretargetingConfigsSuspendCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PretargetingConfig}
     */
    realtimebiddingBiddersPretargetingConfigsSuspend(name, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling realtimebiddingBiddersPretargetingConfigsSuspend");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PretargetingConfig;
      return this.apiClient.callApi(
        '/v1/{name}:suspend', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPublisherConnectionsBatchApprove operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPublisherConnectionsBatchApproveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchApprovePublisherConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch approves multiple publisher connections.
     * @param {String} parent Required. The bidder for whom publisher connections will be approved. Format: `bidders/{bidder}` where `{bidder}` is the account ID of the bidder.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchApprovePublisherConnectionsRequest} [batchApprovePublisherConnectionsRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPublisherConnectionsBatchApproveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchApprovePublisherConnectionsResponse}
     */
    realtimebiddingBiddersPublisherConnectionsBatchApprove(parent, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchApprovePublisherConnectionsRequest'];
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersPublisherConnectionsBatchApprove");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchApprovePublisherConnectionsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/publisherConnections:batchApprove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPublisherConnectionsBatchReject operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPublisherConnectionsBatchRejectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchRejectPublisherConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Batch rejects multiple publisher connections.
     * @param {String} parent Required. The bidder for whom publisher connections will be rejected. Format: `bidders/{bidder}` where `{bidder}` is the account ID of the bidder.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {module:model/BatchRejectPublisherConnectionsRequest} [batchRejectPublisherConnectionsRequest] 
     * @param {module:api/BiddersApi~realtimebiddingBiddersPublisherConnectionsBatchRejectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchRejectPublisherConnectionsResponse}
     */
    realtimebiddingBiddersPublisherConnectionsBatchReject(parent, opts, callback) {
      opts = opts || {};
      let postBody = opts['batchRejectPublisherConnectionsRequest'];
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersPublisherConnectionsBatchReject");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchRejectPublisherConnectionsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/publisherConnections:batchReject', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the realtimebiddingBiddersPublisherConnectionsList operation.
     * @callback module:api/BiddersApi~realtimebiddingBiddersPublisherConnectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPublisherConnectionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists publisher connections for a given bidder.
     * @param {String} parent Required. Name of the bidder for which publishers have initiated connections. The pattern for this resource is `bidders/{bidder}` where `{bidder}` represents the account ID of the bidder.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [xgafv] V1 error format.
     * @param {String} [accessToken] OAuth access token.
     * @param {module:model/String} [alt] Data format for response.
     * @param {String} [callback] JSONP
     * @param {String} [fields] Selector specifying which fields to include in a partial response.
     * @param {String} [key] API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
     * @param {String} [oauthToken] OAuth 2.0 token for the current user.
     * @param {Boolean} [prettyPrint] Returns response with indentations and line breaks.
     * @param {String} [quotaUser] Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
     * @param {String} [uploadProtocol] Upload protocol for media (e.g. \"raw\", \"multipart\").
     * @param {String} [uploadType] Legacy upload protocol for media (e.g. \"media\", \"multipart\").
     * @param {String} [filter] Query string to filter publisher connections. Connections can be filtered by `displayName`, `publisherPlatform`, and `biddingState`. If no filter is specified, all publisher connections will be returned. Example: 'displayName=\"Great Publisher*\" AND publisherPlatform=ADMOB AND biddingState != PENDING' See https://google.aip.dev/160 for more information about filtering syntax.
     * @param {String} [orderBy] Order specification by which results should be sorted. If no sort order is specified, the results will be returned in alphabetic order based on the publisher's publisher code. Results can be sorted by `createTime`. Example: 'createTime DESC'.
     * @param {Number} [pageSize] Requested page size. The server may return fewer results than requested (due to timeout constraint) even if more are available through another call. If unspecified, the server will pick an appropriate default. Acceptable values are 1 to 5000, inclusive.
     * @param {String} [pageToken] A token identifying a page of results the server should return. Typically, this is the value of ListPublisherConnectionsResponse.nextPageToken returned from the previous call to the 'ListPublisherConnections' method.
     * @param {module:api/BiddersApi~realtimebiddingBiddersPublisherConnectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPublisherConnectionsResponse}
     */
    realtimebiddingBiddersPublisherConnectionsList(parent, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'parent' is set
      if (parent === undefined || parent === null) {
        throw new Error("Missing the required parameter 'parent' when calling realtimebiddingBiddersPublisherConnectionsList");
      }

      let pathParams = {
        'parent': parent
      };
      let queryParams = {
        '$.xgafv': opts['xgafv'],
        'access_token': opts['accessToken'],
        'alt': opts['alt'],
        'callback': opts['callback'],
        'fields': opts['fields'],
        'key': opts['key'],
        'oauth_token': opts['oauthToken'],
        'prettyPrint': opts['prettyPrint'],
        'quotaUser': opts['quotaUser'],
        'upload_protocol': opts['uploadProtocol'],
        'uploadType': opts['uploadType'],
        'filter': opts['filter'],
        'orderBy': opts['orderBy'],
        'pageSize': opts['pageSize'],
        'pageToken': opts['pageToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Oauth2c', 'Oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPublisherConnectionsResponse;
      return this.apiClient.callApi(
        '/v1/{parent}/publisherConnections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
