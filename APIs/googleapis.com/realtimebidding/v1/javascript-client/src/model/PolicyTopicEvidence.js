/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DestinationNotCrawlableEvidence from './DestinationNotCrawlableEvidence';
import DestinationNotWorkingEvidence from './DestinationNotWorkingEvidence';
import DestinationUrlEvidence from './DestinationUrlEvidence';
import DomainCallEvidence from './DomainCallEvidence';
import DownloadSizeEvidence from './DownloadSizeEvidence';
import HttpCallEvidence from './HttpCallEvidence';
import HttpCookieEvidence from './HttpCookieEvidence';

/**
 * The PolicyTopicEvidence model module.
 * @module model/PolicyTopicEvidence
 * @version v1
 */
class PolicyTopicEvidence {
    /**
     * Constructs a new <code>PolicyTopicEvidence</code>.
     * Evidence associated with a policy topic entry.
     * @alias module:model/PolicyTopicEvidence
     */
    constructor() { 
        
        PolicyTopicEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyTopicEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyTopicEvidence} obj Optional instance to populate.
     * @return {module:model/PolicyTopicEvidence} The populated <code>PolicyTopicEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyTopicEvidence();

            if (data.hasOwnProperty('destinationNotCrawlable')) {
                obj['destinationNotCrawlable'] = DestinationNotCrawlableEvidence.constructFromObject(data['destinationNotCrawlable']);
            }
            if (data.hasOwnProperty('destinationNotWorking')) {
                obj['destinationNotWorking'] = DestinationNotWorkingEvidence.constructFromObject(data['destinationNotWorking']);
            }
            if (data.hasOwnProperty('destinationUrl')) {
                obj['destinationUrl'] = DestinationUrlEvidence.constructFromObject(data['destinationUrl']);
            }
            if (data.hasOwnProperty('domainCall')) {
                obj['domainCall'] = DomainCallEvidence.constructFromObject(data['domainCall']);
            }
            if (data.hasOwnProperty('downloadSize')) {
                obj['downloadSize'] = DownloadSizeEvidence.constructFromObject(data['downloadSize']);
            }
            if (data.hasOwnProperty('httpCall')) {
                obj['httpCall'] = HttpCallEvidence.constructFromObject(data['httpCall']);
            }
            if (data.hasOwnProperty('httpCookie')) {
                obj['httpCookie'] = HttpCookieEvidence.constructFromObject(data['httpCookie']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyTopicEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyTopicEvidence</code>.
     */
    static validateJSON(data) {
        // validate the optional field `destinationNotCrawlable`
        if (data['destinationNotCrawlable']) { // data not null
          DestinationNotCrawlableEvidence.validateJSON(data['destinationNotCrawlable']);
        }
        // validate the optional field `destinationNotWorking`
        if (data['destinationNotWorking']) { // data not null
          DestinationNotWorkingEvidence.validateJSON(data['destinationNotWorking']);
        }
        // validate the optional field `destinationUrl`
        if (data['destinationUrl']) { // data not null
          DestinationUrlEvidence.validateJSON(data['destinationUrl']);
        }
        // validate the optional field `domainCall`
        if (data['domainCall']) { // data not null
          DomainCallEvidence.validateJSON(data['domainCall']);
        }
        // validate the optional field `downloadSize`
        if (data['downloadSize']) { // data not null
          DownloadSizeEvidence.validateJSON(data['downloadSize']);
        }
        // validate the optional field `httpCall`
        if (data['httpCall']) { // data not null
          HttpCallEvidence.validateJSON(data['httpCall']);
        }
        // validate the optional field `httpCookie`
        if (data['httpCookie']) { // data not null
          HttpCookieEvidence.validateJSON(data['httpCookie']);
        }

        return true;
    }


}



/**
 * @member {module:model/DestinationNotCrawlableEvidence} destinationNotCrawlable
 */
PolicyTopicEvidence.prototype['destinationNotCrawlable'] = undefined;

/**
 * @member {module:model/DestinationNotWorkingEvidence} destinationNotWorking
 */
PolicyTopicEvidence.prototype['destinationNotWorking'] = undefined;

/**
 * @member {module:model/DestinationUrlEvidence} destinationUrl
 */
PolicyTopicEvidence.prototype['destinationUrl'] = undefined;

/**
 * @member {module:model/DomainCallEvidence} domainCall
 */
PolicyTopicEvidence.prototype['domainCall'] = undefined;

/**
 * @member {module:model/DownloadSizeEvidence} downloadSize
 */
PolicyTopicEvidence.prototype['downloadSize'] = undefined;

/**
 * @member {module:model/HttpCallEvidence} httpCall
 */
PolicyTopicEvidence.prototype['httpCall'] = undefined;

/**
 * @member {module:model/HttpCookieEvidence} httpCookie
 */
PolicyTopicEvidence.prototype['httpCookie'] = undefined;






export default PolicyTopicEvidence;

