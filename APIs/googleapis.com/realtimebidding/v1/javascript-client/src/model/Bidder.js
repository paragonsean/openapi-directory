/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Bidder model module.
 * @module model/Bidder
 * @version v1
 */
class Bidder {
    /**
     * Constructs a new <code>Bidder</code>.
     * Bidder settings.
     * @alias module:model/Bidder
     */
    constructor() { 
        
        Bidder.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Bidder</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Bidder} obj Optional instance to populate.
     * @return {module:model/Bidder} The populated <code>Bidder</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Bidder();

            if (data.hasOwnProperty('bypassNonguaranteedDealsPretargeting')) {
                obj['bypassNonguaranteedDealsPretargeting'] = ApiClient.convertToType(data['bypassNonguaranteedDealsPretargeting'], 'Boolean');
            }
            if (data.hasOwnProperty('cookieMatchingNetworkId')) {
                obj['cookieMatchingNetworkId'] = ApiClient.convertToType(data['cookieMatchingNetworkId'], 'String');
            }
            if (data.hasOwnProperty('cookieMatchingUrl')) {
                obj['cookieMatchingUrl'] = ApiClient.convertToType(data['cookieMatchingUrl'], 'String');
            }
            if (data.hasOwnProperty('dealsBillingId')) {
                obj['dealsBillingId'] = ApiClient.convertToType(data['dealsBillingId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Bidder</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Bidder</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cookieMatchingNetworkId'] && !(typeof data['cookieMatchingNetworkId'] === 'string' || data['cookieMatchingNetworkId'] instanceof String)) {
            throw new Error("Expected the field `cookieMatchingNetworkId` to be a primitive type in the JSON string but got " + data['cookieMatchingNetworkId']);
        }
        // ensure the json data is a string
        if (data['cookieMatchingUrl'] && !(typeof data['cookieMatchingUrl'] === 'string' || data['cookieMatchingUrl'] instanceof String)) {
            throw new Error("Expected the field `cookieMatchingUrl` to be a primitive type in the JSON string but got " + data['cookieMatchingUrl']);
        }
        // ensure the json data is a string
        if (data['dealsBillingId'] && !(typeof data['dealsBillingId'] === 'string' || data['dealsBillingId'] instanceof String)) {
            throw new Error("Expected the field `dealsBillingId` to be a primitive type in the JSON string but got " + data['dealsBillingId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Output only. An option to bypass pretargeting for private auctions and preferred deals. When true, bid requests from these nonguaranteed deals will always be sent. When false, bid requests will be subject to regular pretargeting configurations. Programmatic Guaranteed deals will always be sent to the bidder, regardless of the value for this flag. Auction packages are not impacted by this value and are subject to the regular pretargeting configurations.
 * @member {Boolean} bypassNonguaranteedDealsPretargeting
 */
Bidder.prototype['bypassNonguaranteedDealsPretargeting'] = undefined;

/**
 * Output only. The buyer's network ID used for cookie matching. This ID corresponds to the `google_nid` parameter in the URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.
 * @member {String} cookieMatchingNetworkId
 */
Bidder.prototype['cookieMatchingNetworkId'] = undefined;

/**
 * Output only. The base URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.
 * @member {String} cookieMatchingUrl
 */
Bidder.prototype['cookieMatchingUrl'] = undefined;

/**
 * Output only. The billing ID for the deals pretargeting config. This billing ID is sent on the bid request for guaranteed and nonguaranteed deals matched in pretargeting.
 * @member {String} dealsBillingId
 */
Bidder.prototype['dealsBillingId'] = undefined;

/**
 * Output only. Name of the bidder resource that must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.
 * @member {String} name
 */
Bidder.prototype['name'] = undefined;






export default Bidder;

