/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AdTechnologyProviders model module.
 * @module model/AdTechnologyProviders
 * @version v1
 */
class AdTechnologyProviders {
    /**
     * Constructs a new <code>AdTechnologyProviders</code>.
     * The list of detected Ad Technology Providers for this creative. Bids placed for inventory that will serve to EEA or UK users are expected to comply with GDPR requirements. You must ensure that the creatives used in such bids should contain only user consented ad technology providers as indicated in the bid request. Google reserves the right to filter non-compliant bids. User consented ad technology providers can be found in the [Google Protocol](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) with the &#x60;BidRequest.adslot.consented_providers_settings&#x60; field, and can be found as an [OpenRTB extension](https://developers.google.com/authorized-buyers/rtb/downloads/openrtb-adx-proto) with the &#x60;BidRequest.user.ext.consented_providers_settings&#x60; and &#x60;BidRequest.user.ext.consent&#x60; fields. See https://support.google.com/authorizedbuyers/answer/9789378 for additional information about the Google TCF v2 integration.
     * @alias module:model/AdTechnologyProviders
     */
    constructor() { 
        
        AdTechnologyProviders.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AdTechnologyProviders</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AdTechnologyProviders} obj Optional instance to populate.
     * @return {module:model/AdTechnologyProviders} The populated <code>AdTechnologyProviders</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AdTechnologyProviders();

            if (data.hasOwnProperty('detectedGvlIds')) {
                obj['detectedGvlIds'] = ApiClient.convertToType(data['detectedGvlIds'], ['String']);
            }
            if (data.hasOwnProperty('detectedProviderIds')) {
                obj['detectedProviderIds'] = ApiClient.convertToType(data['detectedProviderIds'], ['String']);
            }
            if (data.hasOwnProperty('unidentifiedProviderDomains')) {
                obj['unidentifiedProviderDomains'] = ApiClient.convertToType(data['unidentifiedProviderDomains'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AdTechnologyProviders</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AdTechnologyProviders</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['detectedGvlIds'])) {
            throw new Error("Expected the field `detectedGvlIds` to be an array in the JSON data but got " + data['detectedGvlIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['detectedProviderIds'])) {
            throw new Error("Expected the field `detectedProviderIds` to be an array in the JSON data but got " + data['detectedProviderIds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unidentifiedProviderDomains'])) {
            throw new Error("Expected the field `unidentifiedProviderDomains` to be an array in the JSON data but got " + data['unidentifiedProviderDomains']);
        }

        return true;
    }


}



/**
 * The detected IAB Global Vendor List (GVL) IDs for this creative. See the IAB Global Vendor List at https://vendor-list.consensu.org/v2/vendor-list.json for details about the vendors.
 * @member {Array.<String>} detectedGvlIds
 */
AdTechnologyProviders.prototype['detectedGvlIds'] = undefined;

/**
 * The detected [Google Ad Tech Providers (ATP)](https://support.google.com/admanager/answer/9012903) for this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/providers.csv for mapping of provider ID to provided name, a privacy policy URL, and a list of domains which can be attributed to the provider.
 * @member {Array.<String>} detectedProviderIds
 */
AdTechnologyProviders.prototype['detectedProviderIds'] = undefined;

/**
 * Domains of detected unidentified ad technology providers (if any). You must ensure that the creatives used in bids placed for inventory that will serve to EEA or UK users does not contain unidentified ad technology providers. Google reserves the right to filter non-compliant bids.
 * @member {Array.<String>} unidentifiedProviderDomains
 */
AdTechnologyProviders.prototype['unidentifiedProviderDomains'] = undefined;






export default AdTechnologyProviders;

