/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Buyer model module.
 * @module model/Buyer
 * @version v1
 */
class Buyer {
    /**
     * Constructs a new <code>Buyer</code>.
     * RTB Buyer account information.
     * @alias module:model/Buyer
     */
    constructor() { 
        
        Buyer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Buyer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Buyer} obj Optional instance to populate.
     * @return {module:model/Buyer} The populated <code>Buyer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Buyer();

            if (data.hasOwnProperty('activeCreativeCount')) {
                obj['activeCreativeCount'] = ApiClient.convertToType(data['activeCreativeCount'], 'String');
            }
            if (data.hasOwnProperty('bidder')) {
                obj['bidder'] = ApiClient.convertToType(data['bidder'], 'String');
            }
            if (data.hasOwnProperty('billingIds')) {
                obj['billingIds'] = ApiClient.convertToType(data['billingIds'], ['String']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('maximumActiveCreativeCount')) {
                obj['maximumActiveCreativeCount'] = ApiClient.convertToType(data['maximumActiveCreativeCount'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Buyer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Buyer</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['activeCreativeCount'] && !(typeof data['activeCreativeCount'] === 'string' || data['activeCreativeCount'] instanceof String)) {
            throw new Error("Expected the field `activeCreativeCount` to be a primitive type in the JSON string but got " + data['activeCreativeCount']);
        }
        // ensure the json data is a string
        if (data['bidder'] && !(typeof data['bidder'] === 'string' || data['bidder'] instanceof String)) {
            throw new Error("Expected the field `bidder` to be a primitive type in the JSON string but got " + data['bidder']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['billingIds'])) {
            throw new Error("Expected the field `billingIds` to be an array in the JSON data but got " + data['billingIds']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['maximumActiveCreativeCount'] && !(typeof data['maximumActiveCreativeCount'] === 'string' || data['maximumActiveCreativeCount'] instanceof String)) {
            throw new Error("Expected the field `maximumActiveCreativeCount` to be a primitive type in the JSON string but got " + data['maximumActiveCreativeCount']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}



/**
 * Output only. The number of creatives that this buyer submitted through the API or bid with in the last 30 days. This is counted against the maximum number of active creatives.
 * @member {String} activeCreativeCount
 */
Buyer.prototype['activeCreativeCount'] = undefined;

/**
 * Output only. The name of the bidder resource that is responsible for receiving bidding traffic for this account. The bidder name must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder receiving traffic for this buyer.
 * @member {String} bidder
 */
Buyer.prototype['bidder'] = undefined;

/**
 * Output only. A list of billing IDs associated with this account. These IDs appear on: 1. A bid request, to signal which buyers are eligible to bid on a given opportunity, and which pretargeting configurations were matched for each eligible buyer. 2. The bid response, to attribute a winning impression to a specific account for billing, reporting, policy and publisher block enforcement.
 * @member {Array.<String>} billingIds
 */
Buyer.prototype['billingIds'] = undefined;

/**
 * Output only. The diplay name associated with this buyer account, as visible to sellers.
 * @member {String} displayName
 */
Buyer.prototype['displayName'] = undefined;

/**
 * Output only. The maximum number of active creatives that this buyer can have.
 * @member {String} maximumActiveCreativeCount
 */
Buyer.prototype['maximumActiveCreativeCount'] = undefined;

/**
 * Output only. Name of the buyer resource that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` is the account ID of the buyer account whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.
 * @member {String} name
 */
Buyer.prototype['name'] = undefined;






export default Buyer;

