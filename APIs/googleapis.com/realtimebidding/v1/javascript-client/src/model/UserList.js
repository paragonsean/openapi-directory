/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UrlRestriction from './UrlRestriction';

/**
 * The UserList model module.
 * @module model/UserList
 * @version v1
 */
class UserList {
    /**
     * Constructs a new <code>UserList</code>.
     * Represents an Authorized Buyers user list. Authorized Buyers can create/update/list user lists. Once a user list is created in the system, Authorized Buyers can add users to the user list using the bulk uploader API. Alternatively, users can be added by hosting a tag on the advertiser&#39;s page.
     * @alias module:model/UserList
     */
    constructor() { 
        
        UserList.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UserList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserList} obj Optional instance to populate.
     * @return {module:model/UserList} The populated <code>UserList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserList();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('membershipDurationDays')) {
                obj['membershipDurationDays'] = ApiClient.convertToType(data['membershipDurationDays'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('urlRestriction')) {
                obj['urlRestriction'] = UrlRestriction.constructFromObject(data['urlRestriction']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserList</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['membershipDurationDays'] && !(typeof data['membershipDurationDays'] === 'string' || data['membershipDurationDays'] instanceof String)) {
            throw new Error("Expected the field `membershipDurationDays` to be a primitive type in the JSON string but got " + data['membershipDurationDays']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `urlRestriction`
        if (data['urlRestriction']) { // data not null
          UrlRestriction.validateJSON(data['urlRestriction']);
        }

        return true;
    }


}



/**
 * The description for the user list.
 * @member {String} description
 */
UserList.prototype['description'] = undefined;

/**
 * Required. Display name of the user list. This must be unique across all user lists for a given account.
 * @member {String} displayName
 */
UserList.prototype['displayName'] = undefined;

/**
 * Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive.
 * @member {String} membershipDurationDays
 */
UserList.prototype['membershipDurationDays'] = undefined;

/**
 * Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list.
 * @member {String} name
 */
UserList.prototype['name'] = undefined;

/**
 * Output only. The status of the user list. A new user list starts out as open.
 * @member {module:model/UserList.StatusEnum} status
 */
UserList.prototype['status'] = undefined;

/**
 * @member {module:model/UrlRestriction} urlRestriction
 */
UserList.prototype['urlRestriction'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
UserList['StatusEnum'] = {

    /**
     * value: "STATUS_UNSPECIFIED"
     * @const
     */
    "STATUS_UNSPECIFIED": "STATUS_UNSPECIFIED",

    /**
     * value: "OPEN"
     * @const
     */
    "OPEN": "OPEN",

    /**
     * value: "CLOSED"
     * @const
     */
    "CLOSED": "CLOSED"
};



export default UserList;

