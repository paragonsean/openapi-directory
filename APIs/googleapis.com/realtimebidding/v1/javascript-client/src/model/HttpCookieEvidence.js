/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HttpCookieEvidence model module.
 * @module model/HttpCookieEvidence
 * @version v1
 */
class HttpCookieEvidence {
    /**
     * Constructs a new <code>HttpCookieEvidence</code>.
     * Evidence for HTTP cookie-related policy violations.
     * @alias module:model/HttpCookieEvidence
     */
    constructor() { 
        
        HttpCookieEvidence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HttpCookieEvidence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HttpCookieEvidence} obj Optional instance to populate.
     * @return {module:model/HttpCookieEvidence} The populated <code>HttpCookieEvidence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HttpCookieEvidence();

            if (data.hasOwnProperty('cookieNames')) {
                obj['cookieNames'] = ApiClient.convertToType(data['cookieNames'], ['String']);
            }
            if (data.hasOwnProperty('maxCookieCount')) {
                obj['maxCookieCount'] = ApiClient.convertToType(data['maxCookieCount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HttpCookieEvidence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HttpCookieEvidence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['cookieNames'])) {
            throw new Error("Expected the field `cookieNames` to be an array in the JSON data but got " + data['cookieNames']);
        }

        return true;
    }


}



/**
 * Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this will be all the cookie names that violate the policy.
 * @member {Array.<String>} cookieNames
 */
HttpCookieEvidence.prototype['cookieNames'] = undefined;

/**
 * The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This field will only be set for TOO_MANY_COOKIES policy.
 * @member {Number} maxCookieCount
 */
HttpCookieEvidence.prototype['maxCookieCount'] = undefined;






export default HttpCookieEvidence;

