/**
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PolicyTopicEvidence from './PolicyTopicEvidence';

/**
 * The PolicyTopicEntry model module.
 * @module model/PolicyTopicEntry
 * @version v1
 */
class PolicyTopicEntry {
    /**
     * Constructs a new <code>PolicyTopicEntry</code>.
     * Each policy topic entry will represent a violation of a policy topic for a creative, with the policy topic information and optional evidence for the policy violation.
     * @alias module:model/PolicyTopicEntry
     */
    constructor() { 
        
        PolicyTopicEntry.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PolicyTopicEntry</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PolicyTopicEntry} obj Optional instance to populate.
     * @return {module:model/PolicyTopicEntry} The populated <code>PolicyTopicEntry</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PolicyTopicEntry();

            if (data.hasOwnProperty('evidences')) {
                obj['evidences'] = ApiClient.convertToType(data['evidences'], [PolicyTopicEvidence]);
            }
            if (data.hasOwnProperty('helpCenterUrl')) {
                obj['helpCenterUrl'] = ApiClient.convertToType(data['helpCenterUrl'], 'String');
            }
            if (data.hasOwnProperty('missingCertificate')) {
                obj['missingCertificate'] = ApiClient.convertToType(data['missingCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('policyTopic')) {
                obj['policyTopic'] = ApiClient.convertToType(data['policyTopic'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PolicyTopicEntry</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PolicyTopicEntry</code>.
     */
    static validateJSON(data) {
        if (data['evidences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['evidences'])) {
                throw new Error("Expected the field `evidences` to be an array in the JSON data but got " + data['evidences']);
            }
            // validate the optional field `evidences` (array)
            for (const item of data['evidences']) {
                PolicyTopicEvidence.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['helpCenterUrl'] && !(typeof data['helpCenterUrl'] === 'string' || data['helpCenterUrl'] instanceof String)) {
            throw new Error("Expected the field `helpCenterUrl` to be a primitive type in the JSON string but got " + data['helpCenterUrl']);
        }
        // ensure the json data is a string
        if (data['policyTopic'] && !(typeof data['policyTopic'] === 'string' || data['policyTopic'] instanceof String)) {
            throw new Error("Expected the field `policyTopic` to be a primitive type in the JSON string but got " + data['policyTopic']);
        }

        return true;
    }


}



/**
 * Pieces of evidence associated with this policy topic entry.
 * @member {Array.<module:model/PolicyTopicEvidence>} evidences
 */
PolicyTopicEntry.prototype['evidences'] = undefined;

/**
 * URL of the help center article describing this policy topic.
 * @member {String} helpCenterUrl
 */
PolicyTopicEntry.prototype['helpCenterUrl'] = undefined;

/**
 * Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776
 * @member {Boolean} missingCertificate
 */
PolicyTopicEntry.prototype['missingCertificate'] = undefined;

/**
 * Policy topic this entry refers to. For example, \"ALCOHOL\", \"TRADEMARKS_IN_AD_TEXT\", or \"DESTINATION_NOT_WORKING\". The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method
 * @member {String} policyTopic
 */
PolicyTopicEntry.prototype['policyTopic'] = undefined;






export default PolicyTopicEntry;

