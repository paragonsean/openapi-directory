# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.creative_serving_decision import CreativeServingDecision
from openapi_server.models.html_content import HtmlContent
from openapi_server.models.native_content import NativeContent
from openapi_server.models.video_content import VideoContent
from openapi_server import util


class Creative(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, ad_choices_destination_url: str=None, advertiser_name: str=None, agency_id: str=None, api_update_time: str=None, creative_format: str=None, creative_id: str=None, creative_serving_decision: CreativeServingDecision=None, deal_ids: List[str]=None, declared_attributes: List[str]=None, declared_click_through_urls: List[str]=None, declared_restricted_categories: List[str]=None, declared_vendor_ids: List[int]=None, html: HtmlContent=None, impression_tracking_urls: List[str]=None, name: str=None, native: NativeContent=None, render_url: str=None, restricted_categories: List[str]=None, version: int=None, video: VideoContent=None):
        """Creative - a model defined in OpenAPI

        :param account_id: The account_id of this Creative.
        :param ad_choices_destination_url: The ad_choices_destination_url of this Creative.
        :param advertiser_name: The advertiser_name of this Creative.
        :param agency_id: The agency_id of this Creative.
        :param api_update_time: The api_update_time of this Creative.
        :param creative_format: The creative_format of this Creative.
        :param creative_id: The creative_id of this Creative.
        :param creative_serving_decision: The creative_serving_decision of this Creative.
        :param deal_ids: The deal_ids of this Creative.
        :param declared_attributes: The declared_attributes of this Creative.
        :param declared_click_through_urls: The declared_click_through_urls of this Creative.
        :param declared_restricted_categories: The declared_restricted_categories of this Creative.
        :param declared_vendor_ids: The declared_vendor_ids of this Creative.
        :param html: The html of this Creative.
        :param impression_tracking_urls: The impression_tracking_urls of this Creative.
        :param name: The name of this Creative.
        :param native: The native of this Creative.
        :param render_url: The render_url of this Creative.
        :param restricted_categories: The restricted_categories of this Creative.
        :param version: The version of this Creative.
        :param video: The video of this Creative.
        """
        self.openapi_types = {
            'account_id': str,
            'ad_choices_destination_url': str,
            'advertiser_name': str,
            'agency_id': str,
            'api_update_time': str,
            'creative_format': str,
            'creative_id': str,
            'creative_serving_decision': CreativeServingDecision,
            'deal_ids': List[str],
            'declared_attributes': List[str],
            'declared_click_through_urls': List[str],
            'declared_restricted_categories': List[str],
            'declared_vendor_ids': List[int],
            'html': HtmlContent,
            'impression_tracking_urls': List[str],
            'name': str,
            'native': NativeContent,
            'render_url': str,
            'restricted_categories': List[str],
            'version': int,
            'video': VideoContent
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'ad_choices_destination_url': 'adChoicesDestinationUrl',
            'advertiser_name': 'advertiserName',
            'agency_id': 'agencyId',
            'api_update_time': 'apiUpdateTime',
            'creative_format': 'creativeFormat',
            'creative_id': 'creativeId',
            'creative_serving_decision': 'creativeServingDecision',
            'deal_ids': 'dealIds',
            'declared_attributes': 'declaredAttributes',
            'declared_click_through_urls': 'declaredClickThroughUrls',
            'declared_restricted_categories': 'declaredRestrictedCategories',
            'declared_vendor_ids': 'declaredVendorIds',
            'html': 'html',
            'impression_tracking_urls': 'impressionTrackingUrls',
            'name': 'name',
            'native': 'native',
            'render_url': 'renderUrl',
            'restricted_categories': 'restrictedCategories',
            'version': 'version',
            'video': 'video'
        }

        self._account_id = account_id
        self._ad_choices_destination_url = ad_choices_destination_url
        self._advertiser_name = advertiser_name
        self._agency_id = agency_id
        self._api_update_time = api_update_time
        self._creative_format = creative_format
        self._creative_id = creative_id
        self._creative_serving_decision = creative_serving_decision
        self._deal_ids = deal_ids
        self._declared_attributes = declared_attributes
        self._declared_click_through_urls = declared_click_through_urls
        self._declared_restricted_categories = declared_restricted_categories
        self._declared_vendor_ids = declared_vendor_ids
        self._html = html
        self._impression_tracking_urls = impression_tracking_urls
        self._name = name
        self._native = native
        self._render_url = render_url
        self._restricted_categories = restricted_categories
        self._version = version
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Creative':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Creative of this Creative.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this Creative.

        Output only. ID of the buyer account that this creative is owned by. Can be used to filter the response of the creatives.list method with equality and inequality check.

        :return: The account_id of this Creative.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Creative.

        Output only. ID of the buyer account that this creative is owned by. Can be used to filter the response of the creatives.list method with equality and inequality check.

        :param account_id: The account_id of this Creative.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def ad_choices_destination_url(self):
        """Gets the ad_choices_destination_url of this Creative.

        The link to AdChoices destination page. This is only supported for native ads.

        :return: The ad_choices_destination_url of this Creative.
        :rtype: str
        """
        return self._ad_choices_destination_url

    @ad_choices_destination_url.setter
    def ad_choices_destination_url(self, ad_choices_destination_url):
        """Sets the ad_choices_destination_url of this Creative.

        The link to AdChoices destination page. This is only supported for native ads.

        :param ad_choices_destination_url: The ad_choices_destination_url of this Creative.
        :type ad_choices_destination_url: str
        """

        self._ad_choices_destination_url = ad_choices_destination_url

    @property
    def advertiser_name(self):
        """Gets the advertiser_name of this Creative.

        The name of the company being advertised in the creative. Can be used to filter the response of the creatives.list method.

        :return: The advertiser_name of this Creative.
        :rtype: str
        """
        return self._advertiser_name

    @advertiser_name.setter
    def advertiser_name(self, advertiser_name):
        """Sets the advertiser_name of this Creative.

        The name of the company being advertised in the creative. Can be used to filter the response of the creatives.list method.

        :param advertiser_name: The advertiser_name of this Creative.
        :type advertiser_name: str
        """

        self._advertiser_name = advertiser_name

    @property
    def agency_id(self):
        """Gets the agency_id of this Creative.

        The agency ID for this creative.

        :return: The agency_id of this Creative.
        :rtype: str
        """
        return self._agency_id

    @agency_id.setter
    def agency_id(self, agency_id):
        """Sets the agency_id of this Creative.

        The agency ID for this creative.

        :param agency_id: The agency_id of this Creative.
        :type agency_id: str
        """

        self._agency_id = agency_id

    @property
    def api_update_time(self):
        """Gets the api_update_time of this Creative.

        Output only. The last update timestamp of the creative through the API.

        :return: The api_update_time of this Creative.
        :rtype: str
        """
        return self._api_update_time

    @api_update_time.setter
    def api_update_time(self, api_update_time):
        """Sets the api_update_time of this Creative.

        Output only. The last update timestamp of the creative through the API.

        :param api_update_time: The api_update_time of this Creative.
        :type api_update_time: str
        """

        self._api_update_time = api_update_time

    @property
    def creative_format(self):
        """Gets the creative_format of this Creative.

        Output only. The format of this creative. Can be used to filter the response of the creatives.list method.

        :return: The creative_format of this Creative.
        :rtype: str
        """
        return self._creative_format

    @creative_format.setter
    def creative_format(self, creative_format):
        """Sets the creative_format of this Creative.

        Output only. The format of this creative. Can be used to filter the response of the creatives.list method.

        :param creative_format: The creative_format of this Creative.
        :type creative_format: str
        """
        allowed_values = ["CREATIVE_FORMAT_UNSPECIFIED", "HTML", "VIDEO", "NATIVE"]  # noqa: E501
        if creative_format not in allowed_values:
            raise ValueError(
                "Invalid value for `creative_format` ({0}), must be one of {1}"
                .format(creative_format, allowed_values)
            )

        self._creative_format = creative_format

    @property
    def creative_id(self):
        """Gets the creative_id of this Creative.

        Buyer-specific creative ID that references this creative in bid responses. This field is Ignored in update operations. Can be used to filter the response of the creatives.list method. The maximum length of the creative ID is 128 bytes.

        :return: The creative_id of this Creative.
        :rtype: str
        """
        return self._creative_id

    @creative_id.setter
    def creative_id(self, creative_id):
        """Sets the creative_id of this Creative.

        Buyer-specific creative ID that references this creative in bid responses. This field is Ignored in update operations. Can be used to filter the response of the creatives.list method. The maximum length of the creative ID is 128 bytes.

        :param creative_id: The creative_id of this Creative.
        :type creative_id: str
        """

        self._creative_id = creative_id

    @property
    def creative_serving_decision(self):
        """Gets the creative_serving_decision of this Creative.


        :return: The creative_serving_decision of this Creative.
        :rtype: CreativeServingDecision
        """
        return self._creative_serving_decision

    @creative_serving_decision.setter
    def creative_serving_decision(self, creative_serving_decision):
        """Sets the creative_serving_decision of this Creative.


        :param creative_serving_decision: The creative_serving_decision of this Creative.
        :type creative_serving_decision: CreativeServingDecision
        """

        self._creative_serving_decision = creative_serving_decision

    @property
    def deal_ids(self):
        """Gets the deal_ids of this Creative.

        Output only. IDs of all of the deals with which this creative has been used in bidding. Can be used to filter the response of the creatives.list method.

        :return: The deal_ids of this Creative.
        :rtype: List[str]
        """
        return self._deal_ids

    @deal_ids.setter
    def deal_ids(self, deal_ids):
        """Sets the deal_ids of this Creative.

        Output only. IDs of all of the deals with which this creative has been used in bidding. Can be used to filter the response of the creatives.list method.

        :param deal_ids: The deal_ids of this Creative.
        :type deal_ids: List[str]
        """

        self._deal_ids = deal_ids

    @property
    def declared_attributes(self):
        """Gets the declared_attributes of this Creative.

        All declared attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto\") contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.

        :return: The declared_attributes of this Creative.
        :rtype: List[str]
        """
        return self._declared_attributes

    @declared_attributes.setter
    def declared_attributes(self, declared_attributes):
        """Sets the declared_attributes of this Creative.

        All declared attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto\") contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.

        :param declared_attributes: The declared_attributes of this Creative.
        :type declared_attributes: List[str]
        """
        allowed_values = ["ATTRIBUTE_UNSPECIFIED", "IMAGE_RICH_MEDIA", "ADOBE_FLASH_FLV", "IS_TAGGED", "IS_COOKIE_TARGETED", "IS_USER_INTEREST_TARGETED", "EXPANDING_DIRECTION_NONE", "EXPANDING_DIRECTION_UP", "EXPANDING_DIRECTION_DOWN", "EXPANDING_DIRECTION_LEFT", "EXPANDING_DIRECTION_RIGHT", "EXPANDING_DIRECTION_UP_LEFT", "EXPANDING_DIRECTION_UP_RIGHT", "EXPANDING_DIRECTION_DOWN_LEFT", "EXPANDING_DIRECTION_DOWN_RIGHT", "CREATIVE_TYPE_HTML", "CREATIVE_TYPE_VAST_VIDEO", "EXPANDING_DIRECTION_UP_OR_DOWN", "EXPANDING_DIRECTION_LEFT_OR_RIGHT", "EXPANDING_DIRECTION_ANY_DIAGONAL", "EXPANDING_ACTION_ROLLOVER_TO_EXPAND", "INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH", "RICH_MEDIA_CAPABILITY_TYPE_MRAID", "RICH_MEDIA_CAPABILITY_TYPE_FLASH", "RICH_MEDIA_CAPABILITY_TYPE_HTML5", "SKIPPABLE_INSTREAM_VIDEO", "RICH_MEDIA_CAPABILITY_TYPE_SSL", "RICH_MEDIA_CAPABILITY_TYPE_NON_SSL", "RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL", "NON_SKIPPABLE_INSTREAM_VIDEO", "NATIVE_ELIGIBILITY_ELIGIBLE", "NON_VPAID", "NATIVE_ELIGIBILITY_NOT_ELIGIBLE", "ANY_INTERSTITIAL", "NON_INTERSTITIAL", "IN_BANNER_VIDEO", "RENDERING_SIZELESS_ADX", "OMSDK_1_0", "RENDERING_PLAYABLE"]  # noqa: E501
        if not set(declared_attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `declared_attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(declared_attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._declared_attributes = declared_attributes

    @property
    def declared_click_through_urls(self):
        """Gets the declared_click_through_urls of this Creative.

        The set of declared destination URLs for the creative. Can be used to filter the response of the creatives.list method.

        :return: The declared_click_through_urls of this Creative.
        :rtype: List[str]
        """
        return self._declared_click_through_urls

    @declared_click_through_urls.setter
    def declared_click_through_urls(self, declared_click_through_urls):
        """Sets the declared_click_through_urls of this Creative.

        The set of declared destination URLs for the creative. Can be used to filter the response of the creatives.list method.

        :param declared_click_through_urls: The declared_click_through_urls of this Creative.
        :type declared_click_through_urls: List[str]
        """

        self._declared_click_through_urls = declared_click_through_urls

    @property
    def declared_restricted_categories(self):
        """Gets the declared_restricted_categories of this Creative.

        All declared restricted categories for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.

        :return: The declared_restricted_categories of this Creative.
        :rtype: List[str]
        """
        return self._declared_restricted_categories

    @declared_restricted_categories.setter
    def declared_restricted_categories(self, declared_restricted_categories):
        """Sets the declared_restricted_categories of this Creative.

        All declared restricted categories for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.

        :param declared_restricted_categories: The declared_restricted_categories of this Creative.
        :type declared_restricted_categories: List[str]
        """
        allowed_values = ["RESTRICTED_CATEGORY_UNSPECIFIED", "ALCOHOL"]  # noqa: E501
        if not set(declared_restricted_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `declared_restricted_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(declared_restricted_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._declared_restricted_categories = declared_restricted_categories

    @property
    def declared_vendor_ids(self):
        """Gets the declared_vendor_ids of this Creative.

        IDs for the declared ad technology vendors that may be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method.

        :return: The declared_vendor_ids of this Creative.
        :rtype: List[int]
        """
        return self._declared_vendor_ids

    @declared_vendor_ids.setter
    def declared_vendor_ids(self, declared_vendor_ids):
        """Sets the declared_vendor_ids of this Creative.

        IDs for the declared ad technology vendors that may be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method.

        :param declared_vendor_ids: The declared_vendor_ids of this Creative.
        :type declared_vendor_ids: List[int]
        """

        self._declared_vendor_ids = declared_vendor_ids

    @property
    def html(self):
        """Gets the html of this Creative.


        :return: The html of this Creative.
        :rtype: HtmlContent
        """
        return self._html

    @html.setter
    def html(self, html):
        """Sets the html of this Creative.


        :param html: The html of this Creative.
        :type html: HtmlContent
        """

        self._html = html

    @property
    def impression_tracking_urls(self):
        """Gets the impression_tracking_urls of this Creative.

        The set of URLs to be called to record an impression.

        :return: The impression_tracking_urls of this Creative.
        :rtype: List[str]
        """
        return self._impression_tracking_urls

    @impression_tracking_urls.setter
    def impression_tracking_urls(self, impression_tracking_urls):
        """Sets the impression_tracking_urls of this Creative.

        The set of URLs to be called to record an impression.

        :param impression_tracking_urls: The impression_tracking_urls of this Creative.
        :type impression_tracking_urls: List[str]
        """

        self._impression_tracking_urls = impression_tracking_urls

    @property
    def name(self):
        """Gets the name of this Creative.

        Output only. Name of the creative. Follows the pattern `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the account ID of the buyer who owns the creative, and `{creative}` is the buyer-specific creative ID that references this creative in the bid response.

        :return: The name of this Creative.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Creative.

        Output only. Name of the creative. Follows the pattern `buyers/{buyer}/creatives/{creative}`, where `{buyer}` represents the account ID of the buyer who owns the creative, and `{creative}` is the buyer-specific creative ID that references this creative in the bid response.

        :param name: The name of this Creative.
        :type name: str
        """

        self._name = name

    @property
    def native(self):
        """Gets the native of this Creative.


        :return: The native of this Creative.
        :rtype: NativeContent
        """
        return self._native

    @native.setter
    def native(self, native):
        """Sets the native of this Creative.


        :param native: The native of this Creative.
        :type native: NativeContent
        """

        self._native = native

    @property
    def render_url(self):
        """Gets the render_url of this Creative.

        Experimental field that can be used during the [FLEDGE Origin Trial](/authorized-buyers/rtb/fledge-origin-trial). The URL to fetch an interest group ad used in [TURTLEDOVE on-device auction](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#1-browsers-record-interest-groups\"). This should be unique among all creatives for a given `accountId`. This URL should be the same as the URL returned by [generateBid()](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding).

        :return: The render_url of this Creative.
        :rtype: str
        """
        return self._render_url

    @render_url.setter
    def render_url(self, render_url):
        """Sets the render_url of this Creative.

        Experimental field that can be used during the [FLEDGE Origin Trial](/authorized-buyers/rtb/fledge-origin-trial). The URL to fetch an interest group ad used in [TURTLEDOVE on-device auction](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#1-browsers-record-interest-groups\"). This should be unique among all creatives for a given `accountId`. This URL should be the same as the URL returned by [generateBid()](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding).

        :param render_url: The render_url of this Creative.
        :type render_url: str
        """

        self._render_url = render_url

    @property
    def restricted_categories(self):
        """Gets the restricted_categories of this Creative.

        All restricted categories for the ads that may be shown from this creative.

        :return: The restricted_categories of this Creative.
        :rtype: List[str]
        """
        return self._restricted_categories

    @restricted_categories.setter
    def restricted_categories(self, restricted_categories):
        """Sets the restricted_categories of this Creative.

        All restricted categories for the ads that may be shown from this creative.

        :param restricted_categories: The restricted_categories of this Creative.
        :type restricted_categories: List[str]
        """
        allowed_values = ["RESTRICTED_CATEGORY_UNSPECIFIED", "ALCOHOL"]  # noqa: E501
        if not set(restricted_categories).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `restricted_categories` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(restricted_categories) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._restricted_categories = restricted_categories

    @property
    def version(self):
        """Gets the version of this Creative.

        Output only. The version of the creative. Version for a new creative is 1 and it increments during subsequent creative updates.

        :return: The version of this Creative.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Creative.

        Output only. The version of the creative. Version for a new creative is 1 and it increments during subsequent creative updates.

        :param version: The version of this Creative.
        :type version: int
        """

        self._version = version

    @property
    def video(self):
        """Gets the video of this Creative.


        :return: The video of this Creative.
        :rtype: VideoContent
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this Creative.


        :param video: The video of this Creative.
        :type video: VideoContent
        """

        self._video = video
