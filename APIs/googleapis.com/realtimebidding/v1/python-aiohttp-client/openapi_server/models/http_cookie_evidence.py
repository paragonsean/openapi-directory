# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HttpCookieEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cookie_names: List[str]=None, max_cookie_count: int=None):
        """HttpCookieEvidence - a model defined in OpenAPI

        :param cookie_names: The cookie_names of this HttpCookieEvidence.
        :param max_cookie_count: The max_cookie_count of this HttpCookieEvidence.
        """
        self.openapi_types = {
            'cookie_names': List[str],
            'max_cookie_count': int
        }

        self.attribute_map = {
            'cookie_names': 'cookieNames',
            'max_cookie_count': 'maxCookieCount'
        }

        self._cookie_names = cookie_names
        self._max_cookie_count = max_cookie_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HttpCookieEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HttpCookieEvidence of this HttpCookieEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cookie_names(self):
        """Gets the cookie_names of this HttpCookieEvidence.

        Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this will be all the cookie names that violate the policy.

        :return: The cookie_names of this HttpCookieEvidence.
        :rtype: List[str]
        """
        return self._cookie_names

    @cookie_names.setter
    def cookie_names(self, cookie_names):
        """Sets the cookie_names of this HttpCookieEvidence.

        Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this will be all the cookie names that violate the policy.

        :param cookie_names: The cookie_names of this HttpCookieEvidence.
        :type cookie_names: List[str]
        """

        self._cookie_names = cookie_names

    @property
    def max_cookie_count(self):
        """Gets the max_cookie_count of this HttpCookieEvidence.

        The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This field will only be set for TOO_MANY_COOKIES policy.

        :return: The max_cookie_count of this HttpCookieEvidence.
        :rtype: int
        """
        return self._max_cookie_count

    @max_cookie_count.setter
    def max_cookie_count(self, max_cookie_count):
        """Sets the max_cookie_count of this HttpCookieEvidence.

        The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This field will only be set for TOO_MANY_COOKIES policy.

        :param max_cookie_count: The max_cookie_count of this HttpCookieEvidence.
        :type max_cookie_count: int
        """

        self._max_cookie_count = max_cookie_count
