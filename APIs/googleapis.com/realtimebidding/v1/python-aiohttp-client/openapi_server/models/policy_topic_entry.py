# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_topic_evidence import PolicyTopicEvidence
from openapi_server import util


class PolicyTopicEntry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidences: List[PolicyTopicEvidence]=None, help_center_url: str=None, missing_certificate: bool=None, policy_topic: str=None):
        """PolicyTopicEntry - a model defined in OpenAPI

        :param evidences: The evidences of this PolicyTopicEntry.
        :param help_center_url: The help_center_url of this PolicyTopicEntry.
        :param missing_certificate: The missing_certificate of this PolicyTopicEntry.
        :param policy_topic: The policy_topic of this PolicyTopicEntry.
        """
        self.openapi_types = {
            'evidences': List[PolicyTopicEvidence],
            'help_center_url': str,
            'missing_certificate': bool,
            'policy_topic': str
        }

        self.attribute_map = {
            'evidences': 'evidences',
            'help_center_url': 'helpCenterUrl',
            'missing_certificate': 'missingCertificate',
            'policy_topic': 'policyTopic'
        }

        self._evidences = evidences
        self._help_center_url = help_center_url
        self._missing_certificate = missing_certificate
        self._policy_topic = policy_topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyTopicEntry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyTopicEntry of this PolicyTopicEntry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidences(self):
        """Gets the evidences of this PolicyTopicEntry.

        Pieces of evidence associated with this policy topic entry.

        :return: The evidences of this PolicyTopicEntry.
        :rtype: List[PolicyTopicEvidence]
        """
        return self._evidences

    @evidences.setter
    def evidences(self, evidences):
        """Sets the evidences of this PolicyTopicEntry.

        Pieces of evidence associated with this policy topic entry.

        :param evidences: The evidences of this PolicyTopicEntry.
        :type evidences: List[PolicyTopicEvidence]
        """

        self._evidences = evidences

    @property
    def help_center_url(self):
        """Gets the help_center_url of this PolicyTopicEntry.

        URL of the help center article describing this policy topic.

        :return: The help_center_url of this PolicyTopicEntry.
        :rtype: str
        """
        return self._help_center_url

    @help_center_url.setter
    def help_center_url(self, help_center_url):
        """Sets the help_center_url of this PolicyTopicEntry.

        URL of the help center article describing this policy topic.

        :param help_center_url: The help_center_url of this PolicyTopicEntry.
        :type help_center_url: str
        """

        self._help_center_url = help_center_url

    @property
    def missing_certificate(self):
        """Gets the missing_certificate of this PolicyTopicEntry.

        Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776

        :return: The missing_certificate of this PolicyTopicEntry.
        :rtype: bool
        """
        return self._missing_certificate

    @missing_certificate.setter
    def missing_certificate(self, missing_certificate):
        """Sets the missing_certificate of this PolicyTopicEntry.

        Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776

        :param missing_certificate: The missing_certificate of this PolicyTopicEntry.
        :type missing_certificate: bool
        """

        self._missing_certificate = missing_certificate

    @property
    def policy_topic(self):
        """Gets the policy_topic of this PolicyTopicEntry.

        Policy topic this entry refers to. For example, \"ALCOHOL\", \"TRADEMARKS_IN_AD_TEXT\", or \"DESTINATION_NOT_WORKING\". The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method

        :return: The policy_topic of this PolicyTopicEntry.
        :rtype: str
        """
        return self._policy_topic

    @policy_topic.setter
    def policy_topic(self, policy_topic):
        """Sets the policy_topic of this PolicyTopicEntry.

        Policy topic this entry refers to. For example, \"ALCOHOL\", \"TRADEMARKS_IN_AD_TEXT\", or \"DESTINATION_NOT_WORKING\". The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method

        :param policy_topic: The policy_topic of this PolicyTopicEntry.
        :type policy_topic: str
        """

        self._policy_topic = policy_topic
