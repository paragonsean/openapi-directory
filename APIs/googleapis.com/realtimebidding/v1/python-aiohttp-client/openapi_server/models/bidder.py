# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Bidder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bypass_nonguaranteed_deals_pretargeting: bool=None, cookie_matching_network_id: str=None, cookie_matching_url: str=None, deals_billing_id: str=None, name: str=None):
        """Bidder - a model defined in OpenAPI

        :param bypass_nonguaranteed_deals_pretargeting: The bypass_nonguaranteed_deals_pretargeting of this Bidder.
        :param cookie_matching_network_id: The cookie_matching_network_id of this Bidder.
        :param cookie_matching_url: The cookie_matching_url of this Bidder.
        :param deals_billing_id: The deals_billing_id of this Bidder.
        :param name: The name of this Bidder.
        """
        self.openapi_types = {
            'bypass_nonguaranteed_deals_pretargeting': bool,
            'cookie_matching_network_id': str,
            'cookie_matching_url': str,
            'deals_billing_id': str,
            'name': str
        }

        self.attribute_map = {
            'bypass_nonguaranteed_deals_pretargeting': 'bypassNonguaranteedDealsPretargeting',
            'cookie_matching_network_id': 'cookieMatchingNetworkId',
            'cookie_matching_url': 'cookieMatchingUrl',
            'deals_billing_id': 'dealsBillingId',
            'name': 'name'
        }

        self._bypass_nonguaranteed_deals_pretargeting = bypass_nonguaranteed_deals_pretargeting
        self._cookie_matching_network_id = cookie_matching_network_id
        self._cookie_matching_url = cookie_matching_url
        self._deals_billing_id = deals_billing_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Bidder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bidder of this Bidder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bypass_nonguaranteed_deals_pretargeting(self):
        """Gets the bypass_nonguaranteed_deals_pretargeting of this Bidder.

        Output only. An option to bypass pretargeting for private auctions and preferred deals. When true, bid requests from these nonguaranteed deals will always be sent. When false, bid requests will be subject to regular pretargeting configurations. Programmatic Guaranteed deals will always be sent to the bidder, regardless of the value for this flag. Auction packages are not impacted by this value and are subject to the regular pretargeting configurations.

        :return: The bypass_nonguaranteed_deals_pretargeting of this Bidder.
        :rtype: bool
        """
        return self._bypass_nonguaranteed_deals_pretargeting

    @bypass_nonguaranteed_deals_pretargeting.setter
    def bypass_nonguaranteed_deals_pretargeting(self, bypass_nonguaranteed_deals_pretargeting):
        """Sets the bypass_nonguaranteed_deals_pretargeting of this Bidder.

        Output only. An option to bypass pretargeting for private auctions and preferred deals. When true, bid requests from these nonguaranteed deals will always be sent. When false, bid requests will be subject to regular pretargeting configurations. Programmatic Guaranteed deals will always be sent to the bidder, regardless of the value for this flag. Auction packages are not impacted by this value and are subject to the regular pretargeting configurations.

        :param bypass_nonguaranteed_deals_pretargeting: The bypass_nonguaranteed_deals_pretargeting of this Bidder.
        :type bypass_nonguaranteed_deals_pretargeting: bool
        """

        self._bypass_nonguaranteed_deals_pretargeting = bypass_nonguaranteed_deals_pretargeting

    @property
    def cookie_matching_network_id(self):
        """Gets the cookie_matching_network_id of this Bidder.

        Output only. The buyer's network ID used for cookie matching. This ID corresponds to the `google_nid` parameter in the URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.

        :return: The cookie_matching_network_id of this Bidder.
        :rtype: str
        """
        return self._cookie_matching_network_id

    @cookie_matching_network_id.setter
    def cookie_matching_network_id(self, cookie_matching_network_id):
        """Sets the cookie_matching_network_id of this Bidder.

        Output only. The buyer's network ID used for cookie matching. This ID corresponds to the `google_nid` parameter in the URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.

        :param cookie_matching_network_id: The cookie_matching_network_id of this Bidder.
        :type cookie_matching_network_id: str
        """

        self._cookie_matching_network_id = cookie_matching_network_id

    @property
    def cookie_matching_url(self):
        """Gets the cookie_matching_url of this Bidder.

        Output only. The base URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.

        :return: The cookie_matching_url of this Bidder.
        :rtype: str
        """
        return self._cookie_matching_url

    @cookie_matching_url.setter
    def cookie_matching_url(self, cookie_matching_url):
        """Sets the cookie_matching_url of this Bidder.

        Output only. The base URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.

        :param cookie_matching_url: The cookie_matching_url of this Bidder.
        :type cookie_matching_url: str
        """

        self._cookie_matching_url = cookie_matching_url

    @property
    def deals_billing_id(self):
        """Gets the deals_billing_id of this Bidder.

        Output only. The billing ID for the deals pretargeting config. This billing ID is sent on the bid request for guaranteed and nonguaranteed deals matched in pretargeting.

        :return: The deals_billing_id of this Bidder.
        :rtype: str
        """
        return self._deals_billing_id

    @deals_billing_id.setter
    def deals_billing_id(self, deals_billing_id):
        """Sets the deals_billing_id of this Bidder.

        Output only. The billing ID for the deals pretargeting config. This billing ID is sent on the bid request for guaranteed and nonguaranteed deals matched in pretargeting.

        :param deals_billing_id: The deals_billing_id of this Bidder.
        :type deals_billing_id: str
        """

        self._deals_billing_id = deals_billing_id

    @property
    def name(self):
        """Gets the name of this Bidder.

        Output only. Name of the bidder resource that must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.

        :return: The name of this Bidder.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Bidder.

        Output only. Name of the bidder resource that must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.

        :param name: The name of this Bidder.
        :type name: str
        """

        self._name = name
