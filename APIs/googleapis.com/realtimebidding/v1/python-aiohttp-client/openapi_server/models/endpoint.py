# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Endpoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bid_protocol: str=None, maximum_qps: str=None, name: str=None, trading_location: str=None, url: str=None):
        """Endpoint - a model defined in OpenAPI

        :param bid_protocol: The bid_protocol of this Endpoint.
        :param maximum_qps: The maximum_qps of this Endpoint.
        :param name: The name of this Endpoint.
        :param trading_location: The trading_location of this Endpoint.
        :param url: The url of this Endpoint.
        """
        self.openapi_types = {
            'bid_protocol': str,
            'maximum_qps': str,
            'name': str,
            'trading_location': str,
            'url': str
        }

        self.attribute_map = {
            'bid_protocol': 'bidProtocol',
            'maximum_qps': 'maximumQps',
            'name': 'name',
            'trading_location': 'tradingLocation',
            'url': 'url'
        }

        self._bid_protocol = bid_protocol
        self._maximum_qps = maximum_qps
        self._name = name
        self._trading_location = trading_location
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Endpoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Endpoint of this Endpoint.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bid_protocol(self):
        """Gets the bid_protocol of this Endpoint.

        The protocol that the bidder endpoint is using.

        :return: The bid_protocol of this Endpoint.
        :rtype: str
        """
        return self._bid_protocol

    @bid_protocol.setter
    def bid_protocol(self, bid_protocol):
        """Sets the bid_protocol of this Endpoint.

        The protocol that the bidder endpoint is using.

        :param bid_protocol: The bid_protocol of this Endpoint.
        :type bid_protocol: str
        """
        allowed_values = ["BID_PROTOCOL_UNSPECIFIED", "GOOGLE_RTB", "OPENRTB_JSON", "OPENRTB_PROTOBUF"]  # noqa: E501
        if bid_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `bid_protocol` ({0}), must be one of {1}"
                .format(bid_protocol, allowed_values)
            )

        self._bid_protocol = bid_protocol

    @property
    def maximum_qps(self):
        """Gets the maximum_qps of this Endpoint.

        The maximum number of queries per second allowed to be sent to this server.

        :return: The maximum_qps of this Endpoint.
        :rtype: str
        """
        return self._maximum_qps

    @maximum_qps.setter
    def maximum_qps(self, maximum_qps):
        """Sets the maximum_qps of this Endpoint.

        The maximum number of queries per second allowed to be sent to this server.

        :param maximum_qps: The maximum_qps of this Endpoint.
        :type maximum_qps: str
        """

        self._maximum_qps = maximum_qps

    @property
    def name(self):
        """Gets the name of this Endpoint.

        Output only. Name of the endpoint resource that must follow the pattern `bidders/{bidderAccountId}/endpoints/{endpointId}`, where {bidderAccountId} is the account ID of the bidder who operates this endpoint, and {endpointId} is a unique ID assigned by the server.

        :return: The name of this Endpoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Endpoint.

        Output only. Name of the endpoint resource that must follow the pattern `bidders/{bidderAccountId}/endpoints/{endpointId}`, where {bidderAccountId} is the account ID of the bidder who operates this endpoint, and {endpointId} is a unique ID assigned by the server.

        :param name: The name of this Endpoint.
        :type name: str
        """

        self._name = name

    @property
    def trading_location(self):
        """Gets the trading_location of this Endpoint.

        The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.

        :return: The trading_location of this Endpoint.
        :rtype: str
        """
        return self._trading_location

    @trading_location.setter
    def trading_location(self, trading_location):
        """Sets the trading_location of this Endpoint.

        The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.

        :param trading_location: The trading_location of this Endpoint.
        :type trading_location: str
        """
        allowed_values = ["TRADING_LOCATION_UNSPECIFIED", "US_WEST", "US_EAST", "EUROPE", "ASIA"]  # noqa: E501
        if trading_location not in allowed_values:
            raise ValueError(
                "Invalid value for `trading_location` ({0}), must be one of {1}"
                .format(trading_location, allowed_values)
            )

        self._trading_location = trading_location

    @property
    def url(self):
        """Gets the url of this Endpoint.

        Output only. The URL that bid requests should be sent to.

        :return: The url of this Endpoint.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Endpoint.

        Output only. The URL that bid requests should be sent to.

        :param url: The url of this Endpoint.
        :type url: str
        """

        self._url = url
