# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.media_file import MediaFile
from openapi_server import util


class VideoMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: str=None, is_valid_vast: bool=None, is_vpaid: bool=None, media_files: List[MediaFile]=None, skip_offset: str=None, vast_version: str=None):
        """VideoMetadata - a model defined in OpenAPI

        :param duration: The duration of this VideoMetadata.
        :param is_valid_vast: The is_valid_vast of this VideoMetadata.
        :param is_vpaid: The is_vpaid of this VideoMetadata.
        :param media_files: The media_files of this VideoMetadata.
        :param skip_offset: The skip_offset of this VideoMetadata.
        :param vast_version: The vast_version of this VideoMetadata.
        """
        self.openapi_types = {
            'duration': str,
            'is_valid_vast': bool,
            'is_vpaid': bool,
            'media_files': List[MediaFile],
            'skip_offset': str,
            'vast_version': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'is_valid_vast': 'isValidVast',
            'is_vpaid': 'isVpaid',
            'media_files': 'mediaFiles',
            'skip_offset': 'skipOffset',
            'vast_version': 'vastVersion'
        }

        self._duration = duration
        self._is_valid_vast = is_valid_vast
        self._is_vpaid = is_vpaid
        self._media_files = media_files
        self._skip_offset = skip_offset
        self._vast_version = vast_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VideoMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VideoMetadata of this VideoMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this VideoMetadata.

        The duration of the ad. Can be used to filter the response of the creatives.list method.

        :return: The duration of this VideoMetadata.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this VideoMetadata.

        The duration of the ad. Can be used to filter the response of the creatives.list method.

        :param duration: The duration of this VideoMetadata.
        :type duration: str
        """

        self._duration = duration

    @property
    def is_valid_vast(self):
        """Gets the is_valid_vast of this VideoMetadata.

        Is this a valid VAST ad? Can be used to filter the response of the creatives.list method.

        :return: The is_valid_vast of this VideoMetadata.
        :rtype: bool
        """
        return self._is_valid_vast

    @is_valid_vast.setter
    def is_valid_vast(self, is_valid_vast):
        """Sets the is_valid_vast of this VideoMetadata.

        Is this a valid VAST ad? Can be used to filter the response of the creatives.list method.

        :param is_valid_vast: The is_valid_vast of this VideoMetadata.
        :type is_valid_vast: bool
        """

        self._is_valid_vast = is_valid_vast

    @property
    def is_vpaid(self):
        """Gets the is_vpaid of this VideoMetadata.

        Is this a VPAID ad? Can be used to filter the response of the creatives.list method.

        :return: The is_vpaid of this VideoMetadata.
        :rtype: bool
        """
        return self._is_vpaid

    @is_vpaid.setter
    def is_vpaid(self, is_vpaid):
        """Sets the is_vpaid of this VideoMetadata.

        Is this a VPAID ad? Can be used to filter the response of the creatives.list method.

        :param is_vpaid: The is_vpaid of this VideoMetadata.
        :type is_vpaid: bool
        """

        self._is_vpaid = is_vpaid

    @property
    def media_files(self):
        """Gets the media_files of this VideoMetadata.

        The list of all media files declared in the VAST. If there are multiple VASTs in a wrapper chain, this includes the media files from the deepest one in the chain.

        :return: The media_files of this VideoMetadata.
        :rtype: List[MediaFile]
        """
        return self._media_files

    @media_files.setter
    def media_files(self, media_files):
        """Sets the media_files of this VideoMetadata.

        The list of all media files declared in the VAST. If there are multiple VASTs in a wrapper chain, this includes the media files from the deepest one in the chain.

        :param media_files: The media_files of this VideoMetadata.
        :type media_files: List[MediaFile]
        """

        self._media_files = media_files

    @property
    def skip_offset(self):
        """Gets the skip_offset of this VideoMetadata.

        The minimum duration that the user has to watch before being able to skip this ad. If the field is not set, the ad is not skippable. If the field is set, the ad is skippable. Can be used to filter the response of the creatives.list method.

        :return: The skip_offset of this VideoMetadata.
        :rtype: str
        """
        return self._skip_offset

    @skip_offset.setter
    def skip_offset(self, skip_offset):
        """Sets the skip_offset of this VideoMetadata.

        The minimum duration that the user has to watch before being able to skip this ad. If the field is not set, the ad is not skippable. If the field is set, the ad is skippable. Can be used to filter the response of the creatives.list method.

        :param skip_offset: The skip_offset of this VideoMetadata.
        :type skip_offset: str
        """

        self._skip_offset = skip_offset

    @property
    def vast_version(self):
        """Gets the vast_version of this VideoMetadata.

        The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method.

        :return: The vast_version of this VideoMetadata.
        :rtype: str
        """
        return self._vast_version

    @vast_version.setter
    def vast_version(self, vast_version):
        """Sets the vast_version of this VideoMetadata.

        The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method.

        :param vast_version: The vast_version of this VideoMetadata.
        :type vast_version: str
        """
        allowed_values = ["VAST_VERSION_UNSPECIFIED", "VAST_VERSION_1_0", "VAST_VERSION_2_0", "VAST_VERSION_3_0", "VAST_VERSION_4_0"]  # noqa: E501
        if vast_version not in allowed_values:
            raise ValueError(
                "Invalid value for `vast_version` ({0}), must be one of {1}"
                .format(vast_version, allowed_values)
            )

        self._vast_version = vast_version
