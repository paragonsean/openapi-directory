# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddTargetedPublishersRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, publisher_ids: List[str]=None, targeting_mode: str=None):
        """AddTargetedPublishersRequest - a model defined in OpenAPI

        :param publisher_ids: The publisher_ids of this AddTargetedPublishersRequest.
        :param targeting_mode: The targeting_mode of this AddTargetedPublishersRequest.
        """
        self.openapi_types = {
            'publisher_ids': List[str],
            'targeting_mode': str
        }

        self.attribute_map = {
            'publisher_ids': 'publisherIds',
            'targeting_mode': 'targetingMode'
        }

        self._publisher_ids = publisher_ids
        self._targeting_mode = targeting_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddTargetedPublishersRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddTargetedPublishersRequest of this AddTargetedPublishersRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def publisher_ids(self):
        """Gets the publisher_ids of this AddTargetedPublishersRequest.

        A list of publisher IDs to target in the pretargeting configuration. These values will be added to the list of targeted publisher IDs in PretargetingConfig.publisherTargeting.values. Publishers are identified by their publisher ID from ads.txt / app-ads.txt. See https://iabtechlab.com/ads-txt/ and https://iabtechlab.com/app-ads-txt/ for more details.

        :return: The publisher_ids of this AddTargetedPublishersRequest.
        :rtype: List[str]
        """
        return self._publisher_ids

    @publisher_ids.setter
    def publisher_ids(self, publisher_ids):
        """Sets the publisher_ids of this AddTargetedPublishersRequest.

        A list of publisher IDs to target in the pretargeting configuration. These values will be added to the list of targeted publisher IDs in PretargetingConfig.publisherTargeting.values. Publishers are identified by their publisher ID from ads.txt / app-ads.txt. See https://iabtechlab.com/ads-txt/ and https://iabtechlab.com/app-ads-txt/ for more details.

        :param publisher_ids: The publisher_ids of this AddTargetedPublishersRequest.
        :type publisher_ids: List[str]
        """

        self._publisher_ids = publisher_ids

    @property
    def targeting_mode(self):
        """Gets the targeting_mode of this AddTargetedPublishersRequest.

        Required. The targeting mode that should be applied to the list of publisher IDs. If are existing publisher IDs, must be equal to the existing PretargetingConfig.publisherTargeting.targetingMode or a 400 bad request error will be returned.

        :return: The targeting_mode of this AddTargetedPublishersRequest.
        :rtype: str
        """
        return self._targeting_mode

    @targeting_mode.setter
    def targeting_mode(self, targeting_mode):
        """Sets the targeting_mode of this AddTargetedPublishersRequest.

        Required. The targeting mode that should be applied to the list of publisher IDs. If are existing publisher IDs, must be equal to the existing PretargetingConfig.publisherTargeting.targetingMode or a 400 bad request error will be returned.

        :param targeting_mode: The targeting_mode of this AddTargetedPublishersRequest.
        :type targeting_mode: str
        """
        allowed_values = ["TARGETING_MODE_UNSPECIFIED", "INCLUSIVE", "EXCLUSIVE"]  # noqa: E501
        if targeting_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `targeting_mode` ({0}), must be one of {1}"
                .format(targeting_mode, allowed_values)
            )

        self._targeting_mode = targeting_mode
