# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PublisherConnection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bidding_state: str=None, create_time: str=None, display_name: str=None, name: str=None, publisher_platform: str=None):
        """PublisherConnection - a model defined in OpenAPI

        :param bidding_state: The bidding_state of this PublisherConnection.
        :param create_time: The create_time of this PublisherConnection.
        :param display_name: The display_name of this PublisherConnection.
        :param name: The name of this PublisherConnection.
        :param publisher_platform: The publisher_platform of this PublisherConnection.
        """
        self.openapi_types = {
            'bidding_state': str,
            'create_time': str,
            'display_name': str,
            'name': str,
            'publisher_platform': str
        }

        self.attribute_map = {
            'bidding_state': 'biddingState',
            'create_time': 'createTime',
            'display_name': 'displayName',
            'name': 'name',
            'publisher_platform': 'publisherPlatform'
        }

        self._bidding_state = bidding_state
        self._create_time = create_time
        self._display_name = display_name
        self._name = name
        self._publisher_platform = publisher_platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PublisherConnection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PublisherConnection of this PublisherConnection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bidding_state(self):
        """Gets the bidding_state of this PublisherConnection.

        Whether the publisher has been approved by the bidder.

        :return: The bidding_state of this PublisherConnection.
        :rtype: str
        """
        return self._bidding_state

    @bidding_state.setter
    def bidding_state(self, bidding_state):
        """Sets the bidding_state of this PublisherConnection.

        Whether the publisher has been approved by the bidder.

        :param bidding_state: The bidding_state of this PublisherConnection.
        :type bidding_state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "REJECTED", "APPROVED"]  # noqa: E501
        if bidding_state not in allowed_values:
            raise ValueError(
                "Invalid value for `bidding_state` ({0}), must be one of {1}"
                .format(bidding_state, allowed_values)
            )

        self._bidding_state = bidding_state

    @property
    def create_time(self):
        """Gets the create_time of this PublisherConnection.

        Output only. The time at which the publisher initiated a connection with the bidder (irrespective of if or when the bidder approves it). This is subsequently updated if the publisher revokes and re-initiates the connection.

        :return: The create_time of this PublisherConnection.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this PublisherConnection.

        Output only. The time at which the publisher initiated a connection with the bidder (irrespective of if or when the bidder approves it). This is subsequently updated if the publisher revokes and re-initiates the connection.

        :param create_time: The create_time of this PublisherConnection.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def display_name(self):
        """Gets the display_name of this PublisherConnection.

        Output only. Publisher display name.

        :return: The display_name of this PublisherConnection.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PublisherConnection.

        Output only. Publisher display name.

        :param display_name: The display_name of this PublisherConnection.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this PublisherConnection.

        Output only. Name of the publisher connection. This follows the pattern `bidders/{bidder}/publisherConnections/{publisher}`, where `{bidder}` represents the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID.

        :return: The name of this PublisherConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PublisherConnection.

        Output only. Name of the publisher connection. This follows the pattern `bidders/{bidder}/publisherConnections/{publisher}`, where `{bidder}` represents the account ID of the bidder, and `{publisher}` is the ads.txt/app-ads.txt publisher ID.

        :param name: The name of this PublisherConnection.
        :type name: str
        """

        self._name = name

    @property
    def publisher_platform(self):
        """Gets the publisher_platform of this PublisherConnection.

        Output only. Whether the publisher is an Ad Manager or AdMob publisher.

        :return: The publisher_platform of this PublisherConnection.
        :rtype: str
        """
        return self._publisher_platform

    @publisher_platform.setter
    def publisher_platform(self, publisher_platform):
        """Sets the publisher_platform of this PublisherConnection.

        Output only. Whether the publisher is an Ad Manager or AdMob publisher.

        :param publisher_platform: The publisher_platform of this PublisherConnection.
        :type publisher_platform: str
        """
        allowed_values = ["PUBLISHER_PLATFORM_UNSPECIFIED", "GOOGLE_AD_MANAGER", "ADMOB"]  # noqa: E501
        if publisher_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `publisher_platform` ({0}), must be one of {1}"
                .format(publisher_platform, allowed_values)
            )

        self._publisher_platform = publisher_platform
