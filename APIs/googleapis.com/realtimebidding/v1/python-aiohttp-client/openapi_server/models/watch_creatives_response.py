# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WatchCreativesResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, subscription: str=None, topic: str=None):
        """WatchCreativesResponse - a model defined in OpenAPI

        :param subscription: The subscription of this WatchCreativesResponse.
        :param topic: The topic of this WatchCreativesResponse.
        """
        self.openapi_types = {
            'subscription': str,
            'topic': str
        }

        self.attribute_map = {
            'subscription': 'subscription',
            'topic': 'topic'
        }

        self._subscription = subscription
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WatchCreativesResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WatchCreativesResponse of this WatchCreativesResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def subscription(self):
        """Gets the subscription of this WatchCreativesResponse.

        The Pub/Sub subscription that can be used to pull creative status notifications. This would be of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is created with pull delivery. All service accounts belonging to the bidder will have read access to this subscription. Subscriptions that are inactive for more than 90 days will be disabled. Use watchCreatives to re-enable the subscription.

        :return: The subscription of this WatchCreativesResponse.
        :rtype: str
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this WatchCreativesResponse.

        The Pub/Sub subscription that can be used to pull creative status notifications. This would be of the format `projects/{project_id}/subscriptions/{subscription_id}`. Subscription is created with pull delivery. All service accounts belonging to the bidder will have read access to this subscription. Subscriptions that are inactive for more than 90 days will be disabled. Use watchCreatives to re-enable the subscription.

        :param subscription: The subscription of this WatchCreativesResponse.
        :type subscription: str
        """

        self._subscription = subscription

    @property
    def topic(self):
        """Gets the topic of this WatchCreativesResponse.

        The Pub/Sub topic that will be used to publish creative serving status notifications. This would be of the format `projects/{project_id}/topics/{topic_id}`.

        :return: The topic of this WatchCreativesResponse.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this WatchCreativesResponse.

        The Pub/Sub topic that will be used to publish creative serving status notifications. This would be of the format `projects/{project_id}/topics/{topic_id}`.

        :param topic: The topic of this WatchCreativesResponse.
        :type topic: str
        """

        self._topic = topic
