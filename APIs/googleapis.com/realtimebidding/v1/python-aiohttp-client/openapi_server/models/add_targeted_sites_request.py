# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddTargetedSitesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sites: List[str]=None, targeting_mode: str=None):
        """AddTargetedSitesRequest - a model defined in OpenAPI

        :param sites: The sites of this AddTargetedSitesRequest.
        :param targeting_mode: The targeting_mode of this AddTargetedSitesRequest.
        """
        self.openapi_types = {
            'sites': List[str],
            'targeting_mode': str
        }

        self.attribute_map = {
            'sites': 'sites',
            'targeting_mode': 'targetingMode'
        }

        self._sites = sites
        self._targeting_mode = targeting_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddTargetedSitesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddTargetedSitesRequest of this AddTargetedSitesRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sites(self):
        """Gets the sites of this AddTargetedSitesRequest.

        A list of site URLs to target in the pretargeting configuration. These values will be added to the list of targeted URLs in PretargetingConfig.webTargeting.values.

        :return: The sites of this AddTargetedSitesRequest.
        :rtype: List[str]
        """
        return self._sites

    @sites.setter
    def sites(self, sites):
        """Sets the sites of this AddTargetedSitesRequest.

        A list of site URLs to target in the pretargeting configuration. These values will be added to the list of targeted URLs in PretargetingConfig.webTargeting.values.

        :param sites: The sites of this AddTargetedSitesRequest.
        :type sites: List[str]
        """

        self._sites = sites

    @property
    def targeting_mode(self):
        """Gets the targeting_mode of this AddTargetedSitesRequest.

        Required. The targeting mode that should be applied to the list of site URLs. If there are existing targeted sites, must be equal to the existing PretargetingConfig.webTargeting.targetingMode or a 400 bad request error will be returned.

        :return: The targeting_mode of this AddTargetedSitesRequest.
        :rtype: str
        """
        return self._targeting_mode

    @targeting_mode.setter
    def targeting_mode(self, targeting_mode):
        """Sets the targeting_mode of this AddTargetedSitesRequest.

        Required. The targeting mode that should be applied to the list of site URLs. If there are existing targeted sites, must be equal to the existing PretargetingConfig.webTargeting.targetingMode or a 400 bad request error will be returned.

        :param targeting_mode: The targeting_mode of this AddTargetedSitesRequest.
        :type targeting_mode: str
        """
        allowed_values = ["TARGETING_MODE_UNSPECIFIED", "INCLUSIVE", "EXCLUSIVE"]  # noqa: E501
        if targeting_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `targeting_mode` ({0}), must be one of {1}"
                .format(targeting_mode, allowed_values)
            )

        self._targeting_mode = targeting_mode
