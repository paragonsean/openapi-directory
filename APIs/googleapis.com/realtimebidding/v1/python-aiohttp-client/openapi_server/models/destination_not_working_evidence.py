# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationNotWorkingEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_error: str=None, expanded_url: str=None, http_error: int=None, invalid_page: str=None, last_check_time: str=None, platform: str=None, redirection_error: str=None, url_rejected: str=None):
        """DestinationNotWorkingEvidence - a model defined in OpenAPI

        :param dns_error: The dns_error of this DestinationNotWorkingEvidence.
        :param expanded_url: The expanded_url of this DestinationNotWorkingEvidence.
        :param http_error: The http_error of this DestinationNotWorkingEvidence.
        :param invalid_page: The invalid_page of this DestinationNotWorkingEvidence.
        :param last_check_time: The last_check_time of this DestinationNotWorkingEvidence.
        :param platform: The platform of this DestinationNotWorkingEvidence.
        :param redirection_error: The redirection_error of this DestinationNotWorkingEvidence.
        :param url_rejected: The url_rejected of this DestinationNotWorkingEvidence.
        """
        self.openapi_types = {
            'dns_error': str,
            'expanded_url': str,
            'http_error': int,
            'invalid_page': str,
            'last_check_time': str,
            'platform': str,
            'redirection_error': str,
            'url_rejected': str
        }

        self.attribute_map = {
            'dns_error': 'dnsError',
            'expanded_url': 'expandedUrl',
            'http_error': 'httpError',
            'invalid_page': 'invalidPage',
            'last_check_time': 'lastCheckTime',
            'platform': 'platform',
            'redirection_error': 'redirectionError',
            'url_rejected': 'urlRejected'
        }

        self._dns_error = dns_error
        self._expanded_url = expanded_url
        self._http_error = http_error
        self._invalid_page = invalid_page
        self._last_check_time = last_check_time
        self._platform = platform
        self._redirection_error = redirection_error
        self._url_rejected = url_rejected

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationNotWorkingEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationNotWorkingEvidence of this DestinationNotWorkingEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_error(self):
        """Gets the dns_error of this DestinationNotWorkingEvidence.

        DNS lookup errors.

        :return: The dns_error of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._dns_error

    @dns_error.setter
    def dns_error(self, dns_error):
        """Sets the dns_error of this DestinationNotWorkingEvidence.

        DNS lookup errors.

        :param dns_error: The dns_error of this DestinationNotWorkingEvidence.
        :type dns_error: str
        """
        allowed_values = ["DNS_ERROR_UNSPECIFIED", "ERROR_DNS", "GOOGLE_CRAWLER_DNS_ISSUE"]  # noqa: E501
        if dns_error not in allowed_values:
            raise ValueError(
                "Invalid value for `dns_error` ({0}), must be one of {1}"
                .format(dns_error, allowed_values)
            )

        self._dns_error = dns_error

    @property
    def expanded_url(self):
        """Gets the expanded_url of this DestinationNotWorkingEvidence.

        The full non-working URL.

        :return: The expanded_url of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._expanded_url

    @expanded_url.setter
    def expanded_url(self, expanded_url):
        """Sets the expanded_url of this DestinationNotWorkingEvidence.

        The full non-working URL.

        :param expanded_url: The expanded_url of this DestinationNotWorkingEvidence.
        :type expanded_url: str
        """

        self._expanded_url = expanded_url

    @property
    def http_error(self):
        """Gets the http_error of this DestinationNotWorkingEvidence.

        HTTP error code (for example, 404 or 5xx)

        :return: The http_error of this DestinationNotWorkingEvidence.
        :rtype: int
        """
        return self._http_error

    @http_error.setter
    def http_error(self, http_error):
        """Sets the http_error of this DestinationNotWorkingEvidence.

        HTTP error code (for example, 404 or 5xx)

        :param http_error: The http_error of this DestinationNotWorkingEvidence.
        :type http_error: int
        """

        self._http_error = http_error

    @property
    def invalid_page(self):
        """Gets the invalid_page of this DestinationNotWorkingEvidence.

        Page was crawled successfully, but was detected as either a page with no content or an error page.

        :return: The invalid_page of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._invalid_page

    @invalid_page.setter
    def invalid_page(self, invalid_page):
        """Sets the invalid_page of this DestinationNotWorkingEvidence.

        Page was crawled successfully, but was detected as either a page with no content or an error page.

        :param invalid_page: The invalid_page of this DestinationNotWorkingEvidence.
        :type invalid_page: str
        """
        allowed_values = ["INVALID_PAGE_UNSPECIFIED", "EMPTY_OR_ERROR_PAGE"]  # noqa: E501
        if invalid_page not in allowed_values:
            raise ValueError(
                "Invalid value for `invalid_page` ({0}), must be one of {1}"
                .format(invalid_page, allowed_values)
            )

        self._invalid_page = invalid_page

    @property
    def last_check_time(self):
        """Gets the last_check_time of this DestinationNotWorkingEvidence.

        Approximate time when the ad destination was last checked.

        :return: The last_check_time of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._last_check_time

    @last_check_time.setter
    def last_check_time(self, last_check_time):
        """Sets the last_check_time of this DestinationNotWorkingEvidence.

        Approximate time when the ad destination was last checked.

        :param last_check_time: The last_check_time of this DestinationNotWorkingEvidence.
        :type last_check_time: str
        """

        self._last_check_time = last_check_time

    @property
    def platform(self):
        """Gets the platform of this DestinationNotWorkingEvidence.

        Platform of the non-working URL.

        :return: The platform of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this DestinationNotWorkingEvidence.

        Platform of the non-working URL.

        :param platform: The platform of this DestinationNotWorkingEvidence.
        :type platform: str
        """
        allowed_values = ["PLATFORM_UNSPECIFIED", "PERSONAL_COMPUTER", "ANDROID", "IOS"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def redirection_error(self):
        """Gets the redirection_error of this DestinationNotWorkingEvidence.

        HTTP redirect chain error.

        :return: The redirection_error of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._redirection_error

    @redirection_error.setter
    def redirection_error(self, redirection_error):
        """Sets the redirection_error of this DestinationNotWorkingEvidence.

        HTTP redirect chain error.

        :param redirection_error: The redirection_error of this DestinationNotWorkingEvidence.
        :type redirection_error: str
        """
        allowed_values = ["REDIRECTION_ERROR_UNSPECIFIED", "TOO_MANY_REDIRECTS", "INVALID_REDIRECT", "EMPTY_REDIRECT", "REDIRECT_ERROR_UNKNOWN"]  # noqa: E501
        if redirection_error not in allowed_values:
            raise ValueError(
                "Invalid value for `redirection_error` ({0}), must be one of {1}"
                .format(redirection_error, allowed_values)
            )

        self._redirection_error = redirection_error

    @property
    def url_rejected(self):
        """Gets the url_rejected of this DestinationNotWorkingEvidence.

        Rejected because of malformed URLs or invalid requests.

        :return: The url_rejected of this DestinationNotWorkingEvidence.
        :rtype: str
        """
        return self._url_rejected

    @url_rejected.setter
    def url_rejected(self, url_rejected):
        """Sets the url_rejected of this DestinationNotWorkingEvidence.

        Rejected because of malformed URLs or invalid requests.

        :param url_rejected: The url_rejected of this DestinationNotWorkingEvidence.
        :type url_rejected: str
        """
        allowed_values = ["URL_REJECTED_UNSPECIFIED", "BAD_REQUEST", "MALFORMED_URL", "URL_REJECTED_UNKNOWN"]  # noqa: E501
        if url_rejected not in allowed_values:
            raise ValueError(
                "Invalid value for `url_rejected` ({0}), must be one of {1}"
                .format(url_rejected, allowed_values)
            )

        self._url_rejected = url_rejected
