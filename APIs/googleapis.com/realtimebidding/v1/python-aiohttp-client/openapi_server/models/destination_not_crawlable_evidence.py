# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DestinationNotCrawlableEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, crawl_time: str=None, crawled_url: str=None, reason: str=None):
        """DestinationNotCrawlableEvidence - a model defined in OpenAPI

        :param crawl_time: The crawl_time of this DestinationNotCrawlableEvidence.
        :param crawled_url: The crawled_url of this DestinationNotCrawlableEvidence.
        :param reason: The reason of this DestinationNotCrawlableEvidence.
        """
        self.openapi_types = {
            'crawl_time': str,
            'crawled_url': str,
            'reason': str
        }

        self.attribute_map = {
            'crawl_time': 'crawlTime',
            'crawled_url': 'crawledUrl',
            'reason': 'reason'
        }

        self._crawl_time = crawl_time
        self._crawled_url = crawled_url
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DestinationNotCrawlableEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DestinationNotCrawlableEvidence of this DestinationNotCrawlableEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def crawl_time(self):
        """Gets the crawl_time of this DestinationNotCrawlableEvidence.

        Approximate time of the crawl.

        :return: The crawl_time of this DestinationNotCrawlableEvidence.
        :rtype: str
        """
        return self._crawl_time

    @crawl_time.setter
    def crawl_time(self, crawl_time):
        """Sets the crawl_time of this DestinationNotCrawlableEvidence.

        Approximate time of the crawl.

        :param crawl_time: The crawl_time of this DestinationNotCrawlableEvidence.
        :type crawl_time: str
        """

        self._crawl_time = crawl_time

    @property
    def crawled_url(self):
        """Gets the crawled_url of this DestinationNotCrawlableEvidence.

        Destination URL that was attempted to be crawled.

        :return: The crawled_url of this DestinationNotCrawlableEvidence.
        :rtype: str
        """
        return self._crawled_url

    @crawled_url.setter
    def crawled_url(self, crawled_url):
        """Sets the crawled_url of this DestinationNotCrawlableEvidence.

        Destination URL that was attempted to be crawled.

        :param crawled_url: The crawled_url of this DestinationNotCrawlableEvidence.
        :type crawled_url: str
        """

        self._crawled_url = crawled_url

    @property
    def reason(self):
        """Gets the reason of this DestinationNotCrawlableEvidence.

        Reason of destination not crawlable.

        :return: The reason of this DestinationNotCrawlableEvidence.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this DestinationNotCrawlableEvidence.

        Reason of destination not crawlable.

        :param reason: The reason of this DestinationNotCrawlableEvidence.
        :type reason: str
        """
        allowed_values = ["REASON_UNSPECIFIED", "UNREACHABLE_ROBOTS", "TIMEOUT_ROBOTS", "ROBOTED_DENIED", "UNKNOWN"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason
