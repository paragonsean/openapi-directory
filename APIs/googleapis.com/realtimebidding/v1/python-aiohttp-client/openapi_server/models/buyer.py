# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Buyer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active_creative_count: str=None, bidder: str=None, billing_ids: List[str]=None, display_name: str=None, maximum_active_creative_count: str=None, name: str=None):
        """Buyer - a model defined in OpenAPI

        :param active_creative_count: The active_creative_count of this Buyer.
        :param bidder: The bidder of this Buyer.
        :param billing_ids: The billing_ids of this Buyer.
        :param display_name: The display_name of this Buyer.
        :param maximum_active_creative_count: The maximum_active_creative_count of this Buyer.
        :param name: The name of this Buyer.
        """
        self.openapi_types = {
            'active_creative_count': str,
            'bidder': str,
            'billing_ids': List[str],
            'display_name': str,
            'maximum_active_creative_count': str,
            'name': str
        }

        self.attribute_map = {
            'active_creative_count': 'activeCreativeCount',
            'bidder': 'bidder',
            'billing_ids': 'billingIds',
            'display_name': 'displayName',
            'maximum_active_creative_count': 'maximumActiveCreativeCount',
            'name': 'name'
        }

        self._active_creative_count = active_creative_count
        self._bidder = bidder
        self._billing_ids = billing_ids
        self._display_name = display_name
        self._maximum_active_creative_count = maximum_active_creative_count
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Buyer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Buyer of this Buyer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_creative_count(self):
        """Gets the active_creative_count of this Buyer.

        Output only. The number of creatives that this buyer submitted through the API or bid with in the last 30 days. This is counted against the maximum number of active creatives.

        :return: The active_creative_count of this Buyer.
        :rtype: str
        """
        return self._active_creative_count

    @active_creative_count.setter
    def active_creative_count(self, active_creative_count):
        """Sets the active_creative_count of this Buyer.

        Output only. The number of creatives that this buyer submitted through the API or bid with in the last 30 days. This is counted against the maximum number of active creatives.

        :param active_creative_count: The active_creative_count of this Buyer.
        :type active_creative_count: str
        """

        self._active_creative_count = active_creative_count

    @property
    def bidder(self):
        """Gets the bidder of this Buyer.

        Output only. The name of the bidder resource that is responsible for receiving bidding traffic for this account. The bidder name must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder receiving traffic for this buyer.

        :return: The bidder of this Buyer.
        :rtype: str
        """
        return self._bidder

    @bidder.setter
    def bidder(self, bidder):
        """Sets the bidder of this Buyer.

        Output only. The name of the bidder resource that is responsible for receiving bidding traffic for this account. The bidder name must follow the pattern `bidders/{bidderAccountId}`, where `{bidderAccountId}` is the account ID of the bidder receiving traffic for this buyer.

        :param bidder: The bidder of this Buyer.
        :type bidder: str
        """

        self._bidder = bidder

    @property
    def billing_ids(self):
        """Gets the billing_ids of this Buyer.

        Output only. A list of billing IDs associated with this account. These IDs appear on: 1. A bid request, to signal which buyers are eligible to bid on a given opportunity, and which pretargeting configurations were matched for each eligible buyer. 2. The bid response, to attribute a winning impression to a specific account for billing, reporting, policy and publisher block enforcement.

        :return: The billing_ids of this Buyer.
        :rtype: List[str]
        """
        return self._billing_ids

    @billing_ids.setter
    def billing_ids(self, billing_ids):
        """Sets the billing_ids of this Buyer.

        Output only. A list of billing IDs associated with this account. These IDs appear on: 1. A bid request, to signal which buyers are eligible to bid on a given opportunity, and which pretargeting configurations were matched for each eligible buyer. 2. The bid response, to attribute a winning impression to a specific account for billing, reporting, policy and publisher block enforcement.

        :param billing_ids: The billing_ids of this Buyer.
        :type billing_ids: List[str]
        """

        self._billing_ids = billing_ids

    @property
    def display_name(self):
        """Gets the display_name of this Buyer.

        Output only. The diplay name associated with this buyer account, as visible to sellers.

        :return: The display_name of this Buyer.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Buyer.

        Output only. The diplay name associated with this buyer account, as visible to sellers.

        :param display_name: The display_name of this Buyer.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def maximum_active_creative_count(self):
        """Gets the maximum_active_creative_count of this Buyer.

        Output only. The maximum number of active creatives that this buyer can have.

        :return: The maximum_active_creative_count of this Buyer.
        :rtype: str
        """
        return self._maximum_active_creative_count

    @maximum_active_creative_count.setter
    def maximum_active_creative_count(self, maximum_active_creative_count):
        """Sets the maximum_active_creative_count of this Buyer.

        Output only. The maximum number of active creatives that this buyer can have.

        :param maximum_active_creative_count: The maximum_active_creative_count of this Buyer.
        :type maximum_active_creative_count: str
        """

        self._maximum_active_creative_count = maximum_active_creative_count

    @property
    def name(self):
        """Gets the name of this Buyer.

        Output only. Name of the buyer resource that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` is the account ID of the buyer account whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.

        :return: The name of this Buyer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Buyer.

        Output only. Name of the buyer resource that must follow the pattern `buyers/{buyerAccountId}`, where `{buyerAccountId}` is the account ID of the buyer account whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.

        :param name: The name of this Buyer.
        :type name: str
        """

        self._name = name
