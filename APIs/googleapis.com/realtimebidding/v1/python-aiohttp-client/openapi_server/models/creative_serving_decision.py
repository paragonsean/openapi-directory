# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ad_technology_providers import AdTechnologyProviders
from openapi_server.models.advertiser_and_brand import AdvertiserAndBrand
from openapi_server.models.policy_compliance import PolicyCompliance
from openapi_server import util


class CreativeServingDecision(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ad_technology_providers: AdTechnologyProviders=None, china_policy_compliance: PolicyCompliance=None, deals_policy_compliance: PolicyCompliance=None, detected_advertisers: List[AdvertiserAndBrand]=None, detected_attributes: List[str]=None, detected_click_through_urls: List[str]=None, detected_domains: List[str]=None, detected_languages: List[str]=None, detected_product_categories: List[int]=None, detected_sensitive_categories: List[int]=None, detected_vendor_ids: List[int]=None, last_status_update: str=None, network_policy_compliance: PolicyCompliance=None, platform_policy_compliance: PolicyCompliance=None, russia_policy_compliance: PolicyCompliance=None):
        """CreativeServingDecision - a model defined in OpenAPI

        :param ad_technology_providers: The ad_technology_providers of this CreativeServingDecision.
        :param china_policy_compliance: The china_policy_compliance of this CreativeServingDecision.
        :param deals_policy_compliance: The deals_policy_compliance of this CreativeServingDecision.
        :param detected_advertisers: The detected_advertisers of this CreativeServingDecision.
        :param detected_attributes: The detected_attributes of this CreativeServingDecision.
        :param detected_click_through_urls: The detected_click_through_urls of this CreativeServingDecision.
        :param detected_domains: The detected_domains of this CreativeServingDecision.
        :param detected_languages: The detected_languages of this CreativeServingDecision.
        :param detected_product_categories: The detected_product_categories of this CreativeServingDecision.
        :param detected_sensitive_categories: The detected_sensitive_categories of this CreativeServingDecision.
        :param detected_vendor_ids: The detected_vendor_ids of this CreativeServingDecision.
        :param last_status_update: The last_status_update of this CreativeServingDecision.
        :param network_policy_compliance: The network_policy_compliance of this CreativeServingDecision.
        :param platform_policy_compliance: The platform_policy_compliance of this CreativeServingDecision.
        :param russia_policy_compliance: The russia_policy_compliance of this CreativeServingDecision.
        """
        self.openapi_types = {
            'ad_technology_providers': AdTechnologyProviders,
            'china_policy_compliance': PolicyCompliance,
            'deals_policy_compliance': PolicyCompliance,
            'detected_advertisers': List[AdvertiserAndBrand],
            'detected_attributes': List[str],
            'detected_click_through_urls': List[str],
            'detected_domains': List[str],
            'detected_languages': List[str],
            'detected_product_categories': List[int],
            'detected_sensitive_categories': List[int],
            'detected_vendor_ids': List[int],
            'last_status_update': str,
            'network_policy_compliance': PolicyCompliance,
            'platform_policy_compliance': PolicyCompliance,
            'russia_policy_compliance': PolicyCompliance
        }

        self.attribute_map = {
            'ad_technology_providers': 'adTechnologyProviders',
            'china_policy_compliance': 'chinaPolicyCompliance',
            'deals_policy_compliance': 'dealsPolicyCompliance',
            'detected_advertisers': 'detectedAdvertisers',
            'detected_attributes': 'detectedAttributes',
            'detected_click_through_urls': 'detectedClickThroughUrls',
            'detected_domains': 'detectedDomains',
            'detected_languages': 'detectedLanguages',
            'detected_product_categories': 'detectedProductCategories',
            'detected_sensitive_categories': 'detectedSensitiveCategories',
            'detected_vendor_ids': 'detectedVendorIds',
            'last_status_update': 'lastStatusUpdate',
            'network_policy_compliance': 'networkPolicyCompliance',
            'platform_policy_compliance': 'platformPolicyCompliance',
            'russia_policy_compliance': 'russiaPolicyCompliance'
        }

        self._ad_technology_providers = ad_technology_providers
        self._china_policy_compliance = china_policy_compliance
        self._deals_policy_compliance = deals_policy_compliance
        self._detected_advertisers = detected_advertisers
        self._detected_attributes = detected_attributes
        self._detected_click_through_urls = detected_click_through_urls
        self._detected_domains = detected_domains
        self._detected_languages = detected_languages
        self._detected_product_categories = detected_product_categories
        self._detected_sensitive_categories = detected_sensitive_categories
        self._detected_vendor_ids = detected_vendor_ids
        self._last_status_update = last_status_update
        self._network_policy_compliance = network_policy_compliance
        self._platform_policy_compliance = platform_policy_compliance
        self._russia_policy_compliance = russia_policy_compliance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreativeServingDecision':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreativeServingDecision of this CreativeServingDecision.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ad_technology_providers(self):
        """Gets the ad_technology_providers of this CreativeServingDecision.


        :return: The ad_technology_providers of this CreativeServingDecision.
        :rtype: AdTechnologyProviders
        """
        return self._ad_technology_providers

    @ad_technology_providers.setter
    def ad_technology_providers(self, ad_technology_providers):
        """Sets the ad_technology_providers of this CreativeServingDecision.


        :param ad_technology_providers: The ad_technology_providers of this CreativeServingDecision.
        :type ad_technology_providers: AdTechnologyProviders
        """

        self._ad_technology_providers = ad_technology_providers

    @property
    def china_policy_compliance(self):
        """Gets the china_policy_compliance of this CreativeServingDecision.


        :return: The china_policy_compliance of this CreativeServingDecision.
        :rtype: PolicyCompliance
        """
        return self._china_policy_compliance

    @china_policy_compliance.setter
    def china_policy_compliance(self, china_policy_compliance):
        """Sets the china_policy_compliance of this CreativeServingDecision.


        :param china_policy_compliance: The china_policy_compliance of this CreativeServingDecision.
        :type china_policy_compliance: PolicyCompliance
        """

        self._china_policy_compliance = china_policy_compliance

    @property
    def deals_policy_compliance(self):
        """Gets the deals_policy_compliance of this CreativeServingDecision.


        :return: The deals_policy_compliance of this CreativeServingDecision.
        :rtype: PolicyCompliance
        """
        return self._deals_policy_compliance

    @deals_policy_compliance.setter
    def deals_policy_compliance(self, deals_policy_compliance):
        """Sets the deals_policy_compliance of this CreativeServingDecision.


        :param deals_policy_compliance: The deals_policy_compliance of this CreativeServingDecision.
        :type deals_policy_compliance: PolicyCompliance
        """

        self._deals_policy_compliance = deals_policy_compliance

    @property
    def detected_advertisers(self):
        """Gets the detected_advertisers of this CreativeServingDecision.

        Detected advertisers and brands.

        :return: The detected_advertisers of this CreativeServingDecision.
        :rtype: List[AdvertiserAndBrand]
        """
        return self._detected_advertisers

    @detected_advertisers.setter
    def detected_advertisers(self, detected_advertisers):
        """Sets the detected_advertisers of this CreativeServingDecision.

        Detected advertisers and brands.

        :param detected_advertisers: The detected_advertisers of this CreativeServingDecision.
        :type detected_advertisers: List[AdvertiserAndBrand]
        """

        self._detected_advertisers = detected_advertisers

    @property
    def detected_attributes(self):
        """Gets the detected_attributes of this CreativeServingDecision.

        Publisher-excludable attributes that were detected for this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.

        :return: The detected_attributes of this CreativeServingDecision.
        :rtype: List[str]
        """
        return self._detected_attributes

    @detected_attributes.setter
    def detected_attributes(self, detected_attributes):
        """Sets the detected_attributes of this CreativeServingDecision.

        Publisher-excludable attributes that were detected for this creative. Can be used to filter the response of the creatives.list method. If the `excluded_attribute` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.

        :param detected_attributes: The detected_attributes of this CreativeServingDecision.
        :type detected_attributes: List[str]
        """
        allowed_values = ["ATTRIBUTE_UNSPECIFIED", "IMAGE_RICH_MEDIA", "ADOBE_FLASH_FLV", "IS_TAGGED", "IS_COOKIE_TARGETED", "IS_USER_INTEREST_TARGETED", "EXPANDING_DIRECTION_NONE", "EXPANDING_DIRECTION_UP", "EXPANDING_DIRECTION_DOWN", "EXPANDING_DIRECTION_LEFT", "EXPANDING_DIRECTION_RIGHT", "EXPANDING_DIRECTION_UP_LEFT", "EXPANDING_DIRECTION_UP_RIGHT", "EXPANDING_DIRECTION_DOWN_LEFT", "EXPANDING_DIRECTION_DOWN_RIGHT", "CREATIVE_TYPE_HTML", "CREATIVE_TYPE_VAST_VIDEO", "EXPANDING_DIRECTION_UP_OR_DOWN", "EXPANDING_DIRECTION_LEFT_OR_RIGHT", "EXPANDING_DIRECTION_ANY_DIAGONAL", "EXPANDING_ACTION_ROLLOVER_TO_EXPAND", "INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH", "RICH_MEDIA_CAPABILITY_TYPE_MRAID", "RICH_MEDIA_CAPABILITY_TYPE_FLASH", "RICH_MEDIA_CAPABILITY_TYPE_HTML5", "SKIPPABLE_INSTREAM_VIDEO", "RICH_MEDIA_CAPABILITY_TYPE_SSL", "RICH_MEDIA_CAPABILITY_TYPE_NON_SSL", "RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL", "NON_SKIPPABLE_INSTREAM_VIDEO", "NATIVE_ELIGIBILITY_ELIGIBLE", "NON_VPAID", "NATIVE_ELIGIBILITY_NOT_ELIGIBLE", "ANY_INTERSTITIAL", "NON_INTERSTITIAL", "IN_BANNER_VIDEO", "RENDERING_SIZELESS_ADX", "OMSDK_1_0", "RENDERING_PLAYABLE"]  # noqa: E501
        if not set(detected_attributes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `detected_attributes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(detected_attributes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._detected_attributes = detected_attributes

    @property
    def detected_click_through_urls(self):
        """Gets the detected_click_through_urls of this CreativeServingDecision.

        The set of detected destination URLs for the creative. Can be used to filter the response of the creatives.list method.

        :return: The detected_click_through_urls of this CreativeServingDecision.
        :rtype: List[str]
        """
        return self._detected_click_through_urls

    @detected_click_through_urls.setter
    def detected_click_through_urls(self, detected_click_through_urls):
        """Sets the detected_click_through_urls of this CreativeServingDecision.

        The set of detected destination URLs for the creative. Can be used to filter the response of the creatives.list method.

        :param detected_click_through_urls: The detected_click_through_urls of this CreativeServingDecision.
        :type detected_click_through_urls: List[str]
        """

        self._detected_click_through_urls = detected_click_through_urls

    @property
    def detected_domains(self):
        """Gets the detected_domains of this CreativeServingDecision.

        The detected domains for this creative.

        :return: The detected_domains of this CreativeServingDecision.
        :rtype: List[str]
        """
        return self._detected_domains

    @detected_domains.setter
    def detected_domains(self, detected_domains):
        """Sets the detected_domains of this CreativeServingDecision.

        The detected domains for this creative.

        :param detected_domains: The detected_domains of this CreativeServingDecision.
        :type detected_domains: List[str]
        """

        self._detected_domains = detected_domains

    @property
    def detected_languages(self):
        """Gets the detected_languages of this CreativeServingDecision.

        The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes. Can be used to filter the response of the creatives.list method.

        :return: The detected_languages of this CreativeServingDecision.
        :rtype: List[str]
        """
        return self._detected_languages

    @detected_languages.setter
    def detected_languages(self, detected_languages):
        """Sets the detected_languages of this CreativeServingDecision.

        The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes. Can be used to filter the response of the creatives.list method.

        :param detected_languages: The detected_languages of this CreativeServingDecision.
        :type detected_languages: List[str]
        """

        self._detected_languages = detected_languages

    @property
    def detected_product_categories(self):
        """Gets the detected_product_categories of this CreativeServingDecision.

        Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs. Can be used to filter the response of the creatives.list method.

        :return: The detected_product_categories of this CreativeServingDecision.
        :rtype: List[int]
        """
        return self._detected_product_categories

    @detected_product_categories.setter
    def detected_product_categories(self, detected_product_categories):
        """Sets the detected_product_categories of this CreativeServingDecision.

        Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs. Can be used to filter the response of the creatives.list method.

        :param detected_product_categories: The detected_product_categories of this CreativeServingDecision.
        :type detected_product_categories: List[int]
        """

        self._detected_product_categories = detected_product_categories

    @property
    def detected_sensitive_categories(self):
        """Gets the detected_sensitive_categories of this CreativeServingDecision.

        Detected sensitive categories, if any. Can be used to filter the response of the creatives.list method. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.

        :return: The detected_sensitive_categories of this CreativeServingDecision.
        :rtype: List[int]
        """
        return self._detected_sensitive_categories

    @detected_sensitive_categories.setter
    def detected_sensitive_categories(self, detected_sensitive_categories):
        """Sets the detected_sensitive_categories of this CreativeServingDecision.

        Detected sensitive categories, if any. Can be used to filter the response of the creatives.list method. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.

        :param detected_sensitive_categories: The detected_sensitive_categories of this CreativeServingDecision.
        :type detected_sensitive_categories: List[int]
        """

        self._detected_sensitive_categories = detected_sensitive_categories

    @property
    def detected_vendor_ids(self):
        """Gets the detected_vendor_ids of this CreativeServingDecision.

        IDs of the ad technology vendors that were detected to be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method. If the `allowed_vendor_type` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) does not contain one of the vendor type IDs that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.

        :return: The detected_vendor_ids of this CreativeServingDecision.
        :rtype: List[int]
        """
        return self._detected_vendor_ids

    @detected_vendor_ids.setter
    def detected_vendor_ids(self, detected_vendor_ids):
        """Sets the detected_vendor_ids of this CreativeServingDecision.

        IDs of the ad technology vendors that were detected to be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method. If the `allowed_vendor_type` field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) does not contain one of the vendor type IDs that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.

        :param detected_vendor_ids: The detected_vendor_ids of this CreativeServingDecision.
        :type detected_vendor_ids: List[int]
        """

        self._detected_vendor_ids = detected_vendor_ids

    @property
    def last_status_update(self):
        """Gets the last_status_update of this CreativeServingDecision.

        The last time the creative status was updated. Can be used to filter the response of the creatives.list method.

        :return: The last_status_update of this CreativeServingDecision.
        :rtype: str
        """
        return self._last_status_update

    @last_status_update.setter
    def last_status_update(self, last_status_update):
        """Sets the last_status_update of this CreativeServingDecision.

        The last time the creative status was updated. Can be used to filter the response of the creatives.list method.

        :param last_status_update: The last_status_update of this CreativeServingDecision.
        :type last_status_update: str
        """

        self._last_status_update = last_status_update

    @property
    def network_policy_compliance(self):
        """Gets the network_policy_compliance of this CreativeServingDecision.


        :return: The network_policy_compliance of this CreativeServingDecision.
        :rtype: PolicyCompliance
        """
        return self._network_policy_compliance

    @network_policy_compliance.setter
    def network_policy_compliance(self, network_policy_compliance):
        """Sets the network_policy_compliance of this CreativeServingDecision.


        :param network_policy_compliance: The network_policy_compliance of this CreativeServingDecision.
        :type network_policy_compliance: PolicyCompliance
        """

        self._network_policy_compliance = network_policy_compliance

    @property
    def platform_policy_compliance(self):
        """Gets the platform_policy_compliance of this CreativeServingDecision.


        :return: The platform_policy_compliance of this CreativeServingDecision.
        :rtype: PolicyCompliance
        """
        return self._platform_policy_compliance

    @platform_policy_compliance.setter
    def platform_policy_compliance(self, platform_policy_compliance):
        """Sets the platform_policy_compliance of this CreativeServingDecision.


        :param platform_policy_compliance: The platform_policy_compliance of this CreativeServingDecision.
        :type platform_policy_compliance: PolicyCompliance
        """

        self._platform_policy_compliance = platform_policy_compliance

    @property
    def russia_policy_compliance(self):
        """Gets the russia_policy_compliance of this CreativeServingDecision.


        :return: The russia_policy_compliance of this CreativeServingDecision.
        :rtype: PolicyCompliance
        """
        return self._russia_policy_compliance

    @russia_policy_compliance.setter
    def russia_policy_compliance(self, russia_policy_compliance):
        """Sets the russia_policy_compliance of this CreativeServingDecision.


        :param russia_policy_compliance: The russia_policy_compliance of this CreativeServingDecision.
        :type russia_policy_compliance: PolicyCompliance
        """

        self._russia_policy_compliance = russia_policy_compliance
