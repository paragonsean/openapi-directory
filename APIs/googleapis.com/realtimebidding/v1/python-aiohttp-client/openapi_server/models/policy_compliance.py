# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.policy_topic_entry import PolicyTopicEntry
from openapi_server import util


class PolicyCompliance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, topics: List[PolicyTopicEntry]=None):
        """PolicyCompliance - a model defined in OpenAPI

        :param status: The status of this PolicyCompliance.
        :param topics: The topics of this PolicyCompliance.
        """
        self.openapi_types = {
            'status': str,
            'topics': List[PolicyTopicEntry]
        }

        self.attribute_map = {
            'status': 'status',
            'topics': 'topics'
        }

        self._status = status
        self._topics = topics

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyCompliance':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyCompliance of this PolicyCompliance.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this PolicyCompliance.

        Serving status for the given transaction type (for example, open auction, deals) or region (for example, China, Russia). Can be used to filter the response of the creatives.list method.

        :return: The status of this PolicyCompliance.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PolicyCompliance.

        Serving status for the given transaction type (for example, open auction, deals) or region (for example, China, Russia). Can be used to filter the response of the creatives.list method.

        :param status: The status of this PolicyCompliance.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "PENDING_REVIEW", "DISAPPROVED", "APPROVED", "CERTIFICATE_REQUIRED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def topics(self):
        """Gets the topics of this PolicyCompliance.

        Topics related to the policy compliance for this transaction type (for example, open auction, deals) or region (for example, China, Russia). Topics may be present only if status is DISAPPROVED.

        :return: The topics of this PolicyCompliance.
        :rtype: List[PolicyTopicEntry]
        """
        return self._topics

    @topics.setter
    def topics(self, topics):
        """Sets the topics of this PolicyCompliance.

        Topics related to the policy compliance for this transaction type (for example, open auction, deals) or region (for example, China, Russia). Topics may be present only if status is DISAPPROVED.

        :param topics: The topics of this PolicyCompliance.
        :type topics: List[PolicyTopicEntry]
        """

        self._topics = topics
