# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url_restriction import UrlRestriction
from openapi_server import util


class UserList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, membership_duration_days: str=None, name: str=None, status: str=None, url_restriction: UrlRestriction=None):
        """UserList - a model defined in OpenAPI

        :param description: The description of this UserList.
        :param display_name: The display_name of this UserList.
        :param membership_duration_days: The membership_duration_days of this UserList.
        :param name: The name of this UserList.
        :param status: The status of this UserList.
        :param url_restriction: The url_restriction of this UserList.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'membership_duration_days': str,
            'name': str,
            'status': str,
            'url_restriction': UrlRestriction
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'membership_duration_days': 'membershipDurationDays',
            'name': 'name',
            'status': 'status',
            'url_restriction': 'urlRestriction'
        }

        self._description = description
        self._display_name = display_name
        self._membership_duration_days = membership_duration_days
        self._name = name
        self._status = status
        self._url_restriction = url_restriction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserList of this UserList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this UserList.

        The description for the user list.

        :return: The description of this UserList.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UserList.

        The description for the user list.

        :param description: The description of this UserList.
        :type description: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this UserList.

        Required. Display name of the user list. This must be unique across all user lists for a given account.

        :return: The display_name of this UserList.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this UserList.

        Required. Display name of the user list. This must be unique across all user lists for a given account.

        :param display_name: The display_name of this UserList.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def membership_duration_days(self):
        """Gets the membership_duration_days of this UserList.

        Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive.

        :return: The membership_duration_days of this UserList.
        :rtype: str
        """
        return self._membership_duration_days

    @membership_duration_days.setter
    def membership_duration_days(self, membership_duration_days):
        """Sets the membership_duration_days of this UserList.

        Required. The number of days a user's cookie stays on the user list. The field must be between 0 and 540 inclusive.

        :param membership_duration_days: The membership_duration_days of this UserList.
        :type membership_duration_days: str
        """

        self._membership_duration_days = membership_duration_days

    @property
    def name(self):
        """Gets the name of this UserList.

        Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list.

        :return: The name of this UserList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UserList.

        Output only. Name of the user list that must follow the pattern `buyers/{buyer}/userLists/{user_list}`, where `{buyer}` represents the account ID of the buyer who owns the user list. For a bidder accessing user lists on behalf of a child seat buyer, `{buyer}` represents the account ID of the child seat buyer. `{user_list}` is an int64 identifier assigned by Google to uniquely identify a user list.

        :param name: The name of this UserList.
        :type name: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this UserList.

        Output only. The status of the user list. A new user list starts out as open.

        :return: The status of this UserList.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UserList.

        Output only. The status of the user list. A new user list starts out as open.

        :param status: The status of this UserList.
        :type status: str
        """
        allowed_values = ["STATUS_UNSPECIFIED", "OPEN", "CLOSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def url_restriction(self):
        """Gets the url_restriction of this UserList.


        :return: The url_restriction of this UserList.
        :rtype: UrlRestriction
        """
        return self._url_restriction

    @url_restriction.setter
    def url_restriction(self, url_restriction):
        """Sets the url_restriction of this UserList.


        :param url_restriction: The url_restriction of this UserList.
        :type url_restriction: UrlRestriction
        """

        self._url_restriction = url_restriction
