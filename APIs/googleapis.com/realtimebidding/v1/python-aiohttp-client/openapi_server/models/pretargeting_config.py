# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.app_targeting import AppTargeting
from openapi_server.models.creative_dimensions import CreativeDimensions
from openapi_server.models.numeric_targeting_dimension import NumericTargetingDimension
from openapi_server.models.string_targeting_dimension import StringTargetingDimension
from openapi_server import util


class PretargetingConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_user_targeting_modes: List[str]=None, app_targeting: AppTargeting=None, billing_id: str=None, display_name: str=None, excluded_content_label_ids: List[str]=None, geo_targeting: NumericTargetingDimension=None, included_creative_dimensions: List[CreativeDimensions]=None, included_environments: List[str]=None, included_formats: List[str]=None, included_languages: List[str]=None, included_mobile_operating_system_ids: List[str]=None, included_platforms: List[str]=None, included_user_id_types: List[str]=None, interstitial_targeting: str=None, invalid_geo_ids: List[str]=None, maximum_qps: str=None, minimum_viewability_decile: int=None, name: str=None, publisher_targeting: StringTargetingDimension=None, state: str=None, user_list_targeting: NumericTargetingDimension=None, vertical_targeting: NumericTargetingDimension=None, web_targeting: StringTargetingDimension=None):
        """PretargetingConfig - a model defined in OpenAPI

        :param allowed_user_targeting_modes: The allowed_user_targeting_modes of this PretargetingConfig.
        :param app_targeting: The app_targeting of this PretargetingConfig.
        :param billing_id: The billing_id of this PretargetingConfig.
        :param display_name: The display_name of this PretargetingConfig.
        :param excluded_content_label_ids: The excluded_content_label_ids of this PretargetingConfig.
        :param geo_targeting: The geo_targeting of this PretargetingConfig.
        :param included_creative_dimensions: The included_creative_dimensions of this PretargetingConfig.
        :param included_environments: The included_environments of this PretargetingConfig.
        :param included_formats: The included_formats of this PretargetingConfig.
        :param included_languages: The included_languages of this PretargetingConfig.
        :param included_mobile_operating_system_ids: The included_mobile_operating_system_ids of this PretargetingConfig.
        :param included_platforms: The included_platforms of this PretargetingConfig.
        :param included_user_id_types: The included_user_id_types of this PretargetingConfig.
        :param interstitial_targeting: The interstitial_targeting of this PretargetingConfig.
        :param invalid_geo_ids: The invalid_geo_ids of this PretargetingConfig.
        :param maximum_qps: The maximum_qps of this PretargetingConfig.
        :param minimum_viewability_decile: The minimum_viewability_decile of this PretargetingConfig.
        :param name: The name of this PretargetingConfig.
        :param publisher_targeting: The publisher_targeting of this PretargetingConfig.
        :param state: The state of this PretargetingConfig.
        :param user_list_targeting: The user_list_targeting of this PretargetingConfig.
        :param vertical_targeting: The vertical_targeting of this PretargetingConfig.
        :param web_targeting: The web_targeting of this PretargetingConfig.
        """
        self.openapi_types = {
            'allowed_user_targeting_modes': List[str],
            'app_targeting': AppTargeting,
            'billing_id': str,
            'display_name': str,
            'excluded_content_label_ids': List[str],
            'geo_targeting': NumericTargetingDimension,
            'included_creative_dimensions': List[CreativeDimensions],
            'included_environments': List[str],
            'included_formats': List[str],
            'included_languages': List[str],
            'included_mobile_operating_system_ids': List[str],
            'included_platforms': List[str],
            'included_user_id_types': List[str],
            'interstitial_targeting': str,
            'invalid_geo_ids': List[str],
            'maximum_qps': str,
            'minimum_viewability_decile': int,
            'name': str,
            'publisher_targeting': StringTargetingDimension,
            'state': str,
            'user_list_targeting': NumericTargetingDimension,
            'vertical_targeting': NumericTargetingDimension,
            'web_targeting': StringTargetingDimension
        }

        self.attribute_map = {
            'allowed_user_targeting_modes': 'allowedUserTargetingModes',
            'app_targeting': 'appTargeting',
            'billing_id': 'billingId',
            'display_name': 'displayName',
            'excluded_content_label_ids': 'excludedContentLabelIds',
            'geo_targeting': 'geoTargeting',
            'included_creative_dimensions': 'includedCreativeDimensions',
            'included_environments': 'includedEnvironments',
            'included_formats': 'includedFormats',
            'included_languages': 'includedLanguages',
            'included_mobile_operating_system_ids': 'includedMobileOperatingSystemIds',
            'included_platforms': 'includedPlatforms',
            'included_user_id_types': 'includedUserIdTypes',
            'interstitial_targeting': 'interstitialTargeting',
            'invalid_geo_ids': 'invalidGeoIds',
            'maximum_qps': 'maximumQps',
            'minimum_viewability_decile': 'minimumViewabilityDecile',
            'name': 'name',
            'publisher_targeting': 'publisherTargeting',
            'state': 'state',
            'user_list_targeting': 'userListTargeting',
            'vertical_targeting': 'verticalTargeting',
            'web_targeting': 'webTargeting'
        }

        self._allowed_user_targeting_modes = allowed_user_targeting_modes
        self._app_targeting = app_targeting
        self._billing_id = billing_id
        self._display_name = display_name
        self._excluded_content_label_ids = excluded_content_label_ids
        self._geo_targeting = geo_targeting
        self._included_creative_dimensions = included_creative_dimensions
        self._included_environments = included_environments
        self._included_formats = included_formats
        self._included_languages = included_languages
        self._included_mobile_operating_system_ids = included_mobile_operating_system_ids
        self._included_platforms = included_platforms
        self._included_user_id_types = included_user_id_types
        self._interstitial_targeting = interstitial_targeting
        self._invalid_geo_ids = invalid_geo_ids
        self._maximum_qps = maximum_qps
        self._minimum_viewability_decile = minimum_viewability_decile
        self._name = name
        self._publisher_targeting = publisher_targeting
        self._state = state
        self._user_list_targeting = user_list_targeting
        self._vertical_targeting = vertical_targeting
        self._web_targeting = web_targeting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PretargetingConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PretargetingConfig of this PretargetingConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_user_targeting_modes(self):
        """Gets the allowed_user_targeting_modes of this PretargetingConfig.

        Targeting modes included by this configuration. A bid request must allow all the specified targeting modes. An unset value allows all bid requests to be sent, regardless of which targeting modes they allow.

        :return: The allowed_user_targeting_modes of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._allowed_user_targeting_modes

    @allowed_user_targeting_modes.setter
    def allowed_user_targeting_modes(self, allowed_user_targeting_modes):
        """Sets the allowed_user_targeting_modes of this PretargetingConfig.

        Targeting modes included by this configuration. A bid request must allow all the specified targeting modes. An unset value allows all bid requests to be sent, regardless of which targeting modes they allow.

        :param allowed_user_targeting_modes: The allowed_user_targeting_modes of this PretargetingConfig.
        :type allowed_user_targeting_modes: List[str]
        """
        allowed_values = ["USER_TARGETING_MODE_UNSPECIFIED", "REMARKETING_ADS", "INTEREST_BASED_TARGETING"]  # noqa: E501
        if not set(allowed_user_targeting_modes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `allowed_user_targeting_modes` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(allowed_user_targeting_modes) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._allowed_user_targeting_modes = allowed_user_targeting_modes

    @property
    def app_targeting(self):
        """Gets the app_targeting of this PretargetingConfig.


        :return: The app_targeting of this PretargetingConfig.
        :rtype: AppTargeting
        """
        return self._app_targeting

    @app_targeting.setter
    def app_targeting(self, app_targeting):
        """Sets the app_targeting of this PretargetingConfig.


        :param app_targeting: The app_targeting of this PretargetingConfig.
        :type app_targeting: AppTargeting
        """

        self._app_targeting = app_targeting

    @property
    def billing_id(self):
        """Gets the billing_id of this PretargetingConfig.

        Output only. The identifier that corresponds to this pretargeting configuration that helps buyers track and attribute their spend across their own arbitrary divisions. If a bid request matches more than one configuration, the buyer chooses which billing_id to attribute each of their bids.

        :return: The billing_id of this PretargetingConfig.
        :rtype: str
        """
        return self._billing_id

    @billing_id.setter
    def billing_id(self, billing_id):
        """Sets the billing_id of this PretargetingConfig.

        Output only. The identifier that corresponds to this pretargeting configuration that helps buyers track and attribute their spend across their own arbitrary divisions. If a bid request matches more than one configuration, the buyer chooses which billing_id to attribute each of their bids.

        :param billing_id: The billing_id of this PretargetingConfig.
        :type billing_id: str
        """

        self._billing_id = billing_id

    @property
    def display_name(self):
        """Gets the display_name of this PretargetingConfig.

        The diplay name associated with this configuration. This name must be unique among all the pretargeting configurations a bidder has.

        :return: The display_name of this PretargetingConfig.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PretargetingConfig.

        The diplay name associated with this configuration. This name must be unique among all the pretargeting configurations a bidder has.

        :param display_name: The display_name of this PretargetingConfig.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def excluded_content_label_ids(self):
        """Gets the excluded_content_label_ids of this PretargetingConfig.

        The sensitive content category label IDs excluded in this configuration. Bid requests for inventory with any of the specified content label IDs will not be sent. Refer to this file https://storage.googleapis.com/adx-rtb-dictionaries/content-labels.txt for category IDs.

        :return: The excluded_content_label_ids of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._excluded_content_label_ids

    @excluded_content_label_ids.setter
    def excluded_content_label_ids(self, excluded_content_label_ids):
        """Sets the excluded_content_label_ids of this PretargetingConfig.

        The sensitive content category label IDs excluded in this configuration. Bid requests for inventory with any of the specified content label IDs will not be sent. Refer to this file https://storage.googleapis.com/adx-rtb-dictionaries/content-labels.txt for category IDs.

        :param excluded_content_label_ids: The excluded_content_label_ids of this PretargetingConfig.
        :type excluded_content_label_ids: List[str]
        """

        self._excluded_content_label_ids = excluded_content_label_ids

    @property
    def geo_targeting(self):
        """Gets the geo_targeting of this PretargetingConfig.


        :return: The geo_targeting of this PretargetingConfig.
        :rtype: NumericTargetingDimension
        """
        return self._geo_targeting

    @geo_targeting.setter
    def geo_targeting(self, geo_targeting):
        """Sets the geo_targeting of this PretargetingConfig.


        :param geo_targeting: The geo_targeting of this PretargetingConfig.
        :type geo_targeting: NumericTargetingDimension
        """

        self._geo_targeting = geo_targeting

    @property
    def included_creative_dimensions(self):
        """Gets the included_creative_dimensions of this PretargetingConfig.

        Creative dimensions included by this configuration. Only bid requests eligible for at least one of the specified creative dimensions will be sent. An unset value allows all bid requests to be sent, regardless of creative dimension.

        :return: The included_creative_dimensions of this PretargetingConfig.
        :rtype: List[CreativeDimensions]
        """
        return self._included_creative_dimensions

    @included_creative_dimensions.setter
    def included_creative_dimensions(self, included_creative_dimensions):
        """Sets the included_creative_dimensions of this PretargetingConfig.

        Creative dimensions included by this configuration. Only bid requests eligible for at least one of the specified creative dimensions will be sent. An unset value allows all bid requests to be sent, regardless of creative dimension.

        :param included_creative_dimensions: The included_creative_dimensions of this PretargetingConfig.
        :type included_creative_dimensions: List[CreativeDimensions]
        """

        self._included_creative_dimensions = included_creative_dimensions

    @property
    def included_environments(self):
        """Gets the included_environments of this PretargetingConfig.

        Environments that are being included. Bid requests will not be sent for a given environment if it is not included. Further restrictions can be applied to included environments to target only a subset of its inventory. An unset value includes all environments.

        :return: The included_environments of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._included_environments

    @included_environments.setter
    def included_environments(self, included_environments):
        """Sets the included_environments of this PretargetingConfig.

        Environments that are being included. Bid requests will not be sent for a given environment if it is not included. Further restrictions can be applied to included environments to target only a subset of its inventory. An unset value includes all environments.

        :param included_environments: The included_environments of this PretargetingConfig.
        :type included_environments: List[str]
        """
        allowed_values = ["ENVIRONMENT_UNSPECIFIED", "APP", "WEB"]  # noqa: E501
        if not set(included_environments).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `included_environments` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(included_environments) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._included_environments = included_environments

    @property
    def included_formats(self):
        """Gets the included_formats of this PretargetingConfig.

        Creative formats included by this configuration. Only bid requests eligible for at least one of the specified creative formats will be sent. An unset value will allow all bid requests to be sent, regardless of format.

        :return: The included_formats of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._included_formats

    @included_formats.setter
    def included_formats(self, included_formats):
        """Sets the included_formats of this PretargetingConfig.

        Creative formats included by this configuration. Only bid requests eligible for at least one of the specified creative formats will be sent. An unset value will allow all bid requests to be sent, regardless of format.

        :param included_formats: The included_formats of this PretargetingConfig.
        :type included_formats: List[str]
        """
        allowed_values = ["CREATIVE_FORMAT_UNSPECIFIED", "HTML", "VAST", "NATIVE"]  # noqa: E501
        if not set(included_formats).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `included_formats` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(included_formats) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._included_formats = included_formats

    @property
    def included_languages(self):
        """Gets the included_languages of this PretargetingConfig.

        The languages included in this configuration, represented by their language code. See https://developers.google.com/adwords/api/docs/appendix/languagecodes.

        :return: The included_languages of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._included_languages

    @included_languages.setter
    def included_languages(self, included_languages):
        """Sets the included_languages of this PretargetingConfig.

        The languages included in this configuration, represented by their language code. See https://developers.google.com/adwords/api/docs/appendix/languagecodes.

        :param included_languages: The included_languages of this PretargetingConfig.
        :type included_languages: List[str]
        """

        self._included_languages = included_languages

    @property
    def included_mobile_operating_system_ids(self):
        """Gets the included_mobile_operating_system_ids of this PretargetingConfig.

        The mobile operating systems included in this configuration as defined in https://storage.googleapis.com/adx-rtb-dictionaries/mobile-os.csv

        :return: The included_mobile_operating_system_ids of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._included_mobile_operating_system_ids

    @included_mobile_operating_system_ids.setter
    def included_mobile_operating_system_ids(self, included_mobile_operating_system_ids):
        """Sets the included_mobile_operating_system_ids of this PretargetingConfig.

        The mobile operating systems included in this configuration as defined in https://storage.googleapis.com/adx-rtb-dictionaries/mobile-os.csv

        :param included_mobile_operating_system_ids: The included_mobile_operating_system_ids of this PretargetingConfig.
        :type included_mobile_operating_system_ids: List[str]
        """

        self._included_mobile_operating_system_ids = included_mobile_operating_system_ids

    @property
    def included_platforms(self):
        """Gets the included_platforms of this PretargetingConfig.

        The platforms included by this configration. Bid requests for devices with the specified platform types will be sent. An unset value allows all bid requests to be sent, regardless of platform.

        :return: The included_platforms of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._included_platforms

    @included_platforms.setter
    def included_platforms(self, included_platforms):
        """Sets the included_platforms of this PretargetingConfig.

        The platforms included by this configration. Bid requests for devices with the specified platform types will be sent. An unset value allows all bid requests to be sent, regardless of platform.

        :param included_platforms: The included_platforms of this PretargetingConfig.
        :type included_platforms: List[str]
        """
        allowed_values = ["PLATFORM_UNSPECIFIED", "PERSONAL_COMPUTER", "PHONE", "TABLET", "CONNECTED_TV"]  # noqa: E501
        if not set(included_platforms).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `included_platforms` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(included_platforms) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._included_platforms = included_platforms

    @property
    def included_user_id_types(self):
        """Gets the included_user_id_types of this PretargetingConfig.

        User identifier types included in this configuration. At least one of the user identifier types specified in this list must be available for the bid request to be sent.

        :return: The included_user_id_types of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._included_user_id_types

    @included_user_id_types.setter
    def included_user_id_types(self, included_user_id_types):
        """Sets the included_user_id_types of this PretargetingConfig.

        User identifier types included in this configuration. At least one of the user identifier types specified in this list must be available for the bid request to be sent.

        :param included_user_id_types: The included_user_id_types of this PretargetingConfig.
        :type included_user_id_types: List[str]
        """
        allowed_values = ["USER_ID_TYPE_UNSPECIFIED", "HOSTED_MATCH_DATA", "GOOGLE_COOKIE", "DEVICE_ID"]  # noqa: E501
        if not set(included_user_id_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `included_user_id_types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(included_user_id_types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._included_user_id_types = included_user_id_types

    @property
    def interstitial_targeting(self):
        """Gets the interstitial_targeting of this PretargetingConfig.

        The interstitial targeting specified for this configuration. The unset value will allow bid requests to be sent regardless of whether they are for interstitials or not.

        :return: The interstitial_targeting of this PretargetingConfig.
        :rtype: str
        """
        return self._interstitial_targeting

    @interstitial_targeting.setter
    def interstitial_targeting(self, interstitial_targeting):
        """Sets the interstitial_targeting of this PretargetingConfig.

        The interstitial targeting specified for this configuration. The unset value will allow bid requests to be sent regardless of whether they are for interstitials or not.

        :param interstitial_targeting: The interstitial_targeting of this PretargetingConfig.
        :type interstitial_targeting: str
        """
        allowed_values = ["INTERSTITIAL_TARGETING_UNSPECIFIED", "ONLY_INTERSTITIAL_REQUESTS", "ONLY_NON_INTERSTITIAL_REQUESTS"]  # noqa: E501
        if interstitial_targeting not in allowed_values:
            raise ValueError(
                "Invalid value for `interstitial_targeting` ({0}), must be one of {1}"
                .format(interstitial_targeting, allowed_values)
            )

        self._interstitial_targeting = interstitial_targeting

    @property
    def invalid_geo_ids(self):
        """Gets the invalid_geo_ids of this PretargetingConfig.

        Output only. Existing included or excluded geos that are invalid. Previously targeted geos may become invalid due to privacy restrictions.

        :return: The invalid_geo_ids of this PretargetingConfig.
        :rtype: List[str]
        """
        return self._invalid_geo_ids

    @invalid_geo_ids.setter
    def invalid_geo_ids(self, invalid_geo_ids):
        """Sets the invalid_geo_ids of this PretargetingConfig.

        Output only. Existing included or excluded geos that are invalid. Previously targeted geos may become invalid due to privacy restrictions.

        :param invalid_geo_ids: The invalid_geo_ids of this PretargetingConfig.
        :type invalid_geo_ids: List[str]
        """

        self._invalid_geo_ids = invalid_geo_ids

    @property
    def maximum_qps(self):
        """Gets the maximum_qps of this PretargetingConfig.

        The maximum QPS threshold for this configuration. The bidder should receive no more than this number of bid requests matching this configuration per second across all their bidding endpoints among all trading locations. Further information available at https://developers.google.com/authorized-buyers/rtb/peer-guide

        :return: The maximum_qps of this PretargetingConfig.
        :rtype: str
        """
        return self._maximum_qps

    @maximum_qps.setter
    def maximum_qps(self, maximum_qps):
        """Sets the maximum_qps of this PretargetingConfig.

        The maximum QPS threshold for this configuration. The bidder should receive no more than this number of bid requests matching this configuration per second across all their bidding endpoints among all trading locations. Further information available at https://developers.google.com/authorized-buyers/rtb/peer-guide

        :param maximum_qps: The maximum_qps of this PretargetingConfig.
        :type maximum_qps: str
        """

        self._maximum_qps = maximum_qps

    @property
    def minimum_viewability_decile(self):
        """Gets the minimum_viewability_decile of this PretargetingConfig.

        The targeted minimum viewability decile, ranging in values [0, 10]. A value of 5 means that the configuration will only match adslots for which we predict at least 50% viewability. Values > 10 will be rounded down to 10. An unset value or a value of 0 indicates that bid requests will be sent regardless of viewability.

        :return: The minimum_viewability_decile of this PretargetingConfig.
        :rtype: int
        """
        return self._minimum_viewability_decile

    @minimum_viewability_decile.setter
    def minimum_viewability_decile(self, minimum_viewability_decile):
        """Sets the minimum_viewability_decile of this PretargetingConfig.

        The targeted minimum viewability decile, ranging in values [0, 10]. A value of 5 means that the configuration will only match adslots for which we predict at least 50% viewability. Values > 10 will be rounded down to 10. An unset value or a value of 0 indicates that bid requests will be sent regardless of viewability.

        :param minimum_viewability_decile: The minimum_viewability_decile of this PretargetingConfig.
        :type minimum_viewability_decile: int
        """

        self._minimum_viewability_decile = minimum_viewability_decile

    @property
    def name(self):
        """Gets the name of this PretargetingConfig.

        Output only. Name of the pretargeting configuration that must follow the pattern `bidders/{bidder_account_id}/pretargetingConfigs/{config_id}`

        :return: The name of this PretargetingConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PretargetingConfig.

        Output only. Name of the pretargeting configuration that must follow the pattern `bidders/{bidder_account_id}/pretargetingConfigs/{config_id}`

        :param name: The name of this PretargetingConfig.
        :type name: str
        """

        self._name = name

    @property
    def publisher_targeting(self):
        """Gets the publisher_targeting of this PretargetingConfig.


        :return: The publisher_targeting of this PretargetingConfig.
        :rtype: StringTargetingDimension
        """
        return self._publisher_targeting

    @publisher_targeting.setter
    def publisher_targeting(self, publisher_targeting):
        """Sets the publisher_targeting of this PretargetingConfig.


        :param publisher_targeting: The publisher_targeting of this PretargetingConfig.
        :type publisher_targeting: StringTargetingDimension
        """

        self._publisher_targeting = publisher_targeting

    @property
    def state(self):
        """Gets the state of this PretargetingConfig.

        Output only. The state of this pretargeting configuration.

        :return: The state of this PretargetingConfig.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PretargetingConfig.

        Output only. The state of this pretargeting configuration.

        :param state: The state of this PretargetingConfig.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "SUSPENDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_list_targeting(self):
        """Gets the user_list_targeting of this PretargetingConfig.


        :return: The user_list_targeting of this PretargetingConfig.
        :rtype: NumericTargetingDimension
        """
        return self._user_list_targeting

    @user_list_targeting.setter
    def user_list_targeting(self, user_list_targeting):
        """Sets the user_list_targeting of this PretargetingConfig.


        :param user_list_targeting: The user_list_targeting of this PretargetingConfig.
        :type user_list_targeting: NumericTargetingDimension
        """

        self._user_list_targeting = user_list_targeting

    @property
    def vertical_targeting(self):
        """Gets the vertical_targeting of this PretargetingConfig.


        :return: The vertical_targeting of this PretargetingConfig.
        :rtype: NumericTargetingDimension
        """
        return self._vertical_targeting

    @vertical_targeting.setter
    def vertical_targeting(self, vertical_targeting):
        """Sets the vertical_targeting of this PretargetingConfig.


        :param vertical_targeting: The vertical_targeting of this PretargetingConfig.
        :type vertical_targeting: NumericTargetingDimension
        """

        self._vertical_targeting = vertical_targeting

    @property
    def web_targeting(self):
        """Gets the web_targeting of this PretargetingConfig.


        :return: The web_targeting of this PretargetingConfig.
        :rtype: StringTargetingDimension
        """
        return self._web_targeting

    @web_targeting.setter
    def web_targeting(self, web_targeting):
        """Sets the web_targeting of this PretargetingConfig.


        :param web_targeting: The web_targeting of this PretargetingConfig.
        :type web_targeting: StringTargetingDimension
        """

        self._web_targeting = web_targeting
