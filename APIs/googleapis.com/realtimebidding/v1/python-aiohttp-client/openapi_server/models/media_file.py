# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediaFile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bitrate: str=None, mime_type: str=None):
        """MediaFile - a model defined in OpenAPI

        :param bitrate: The bitrate of this MediaFile.
        :param mime_type: The mime_type of this MediaFile.
        """
        self.openapi_types = {
            'bitrate': str,
            'mime_type': str
        }

        self.attribute_map = {
            'bitrate': 'bitrate',
            'mime_type': 'mimeType'
        }

        self._bitrate = bitrate
        self._mime_type = mime_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaFile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaFile of this MediaFile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bitrate(self):
        """Gets the bitrate of this MediaFile.

        Bitrate of the video file, in Kbps. Can be used to filter the response of the creatives.list method.

        :return: The bitrate of this MediaFile.
        :rtype: str
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this MediaFile.

        Bitrate of the video file, in Kbps. Can be used to filter the response of the creatives.list method.

        :param bitrate: The bitrate of this MediaFile.
        :type bitrate: str
        """

        self._bitrate = bitrate

    @property
    def mime_type(self):
        """Gets the mime_type of this MediaFile.

        The MIME type of this media file. Can be used to filter the response of the creatives.list method.

        :return: The mime_type of this MediaFile.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this MediaFile.

        The MIME type of this media file. Can be used to filter the response of the creatives.list method.

        :param mime_type: The mime_type of this MediaFile.
        :type mime_type: str
        """
        allowed_values = ["VIDEO_MIME_TYPE_UNSPECIFIED", "MIME_VIDEO_XFLV", "MIME_VIDEO_WEBM", "MIME_VIDEO_MP4", "MIME_VIDEO_OGG", "MIME_VIDEO_YT_HOSTED", "MIME_VIDEO_X_MS_WMV", "MIME_VIDEO_3GPP", "MIME_VIDEO_MOV", "MIME_APPLICATION_SWF", "MIME_APPLICATION_SURVEY", "MIME_APPLICATION_JAVASCRIPT", "MIME_APPLICATION_SILVERLIGHT", "MIME_APPLICATION_MPEGURL", "MIME_APPLICATION_MPEGDASH", "MIME_AUDIO_MP4A", "MIME_AUDIO_MP3", "MIME_AUDIO_OGG"]  # noqa: E501
        if mime_type not in allowed_values:
            raise ValueError(
                "Invalid value for `mime_type` ({0}), must be one of {1}"
                .format(mime_type, allowed_values)
            )

        self._mime_type = mime_type
