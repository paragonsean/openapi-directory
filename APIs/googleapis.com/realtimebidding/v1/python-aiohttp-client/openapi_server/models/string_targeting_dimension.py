# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StringTargetingDimension(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, targeting_mode: str=None, values: List[str]=None):
        """StringTargetingDimension - a model defined in OpenAPI

        :param targeting_mode: The targeting_mode of this StringTargetingDimension.
        :param values: The values of this StringTargetingDimension.
        """
        self.openapi_types = {
            'targeting_mode': str,
            'values': List[str]
        }

        self.attribute_map = {
            'targeting_mode': 'targetingMode',
            'values': 'values'
        }

        self._targeting_mode = targeting_mode
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StringTargetingDimension':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StringTargetingDimension of this StringTargetingDimension.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def targeting_mode(self):
        """Gets the targeting_mode of this StringTargetingDimension.

        How the items in this list should be targeted.

        :return: The targeting_mode of this StringTargetingDimension.
        :rtype: str
        """
        return self._targeting_mode

    @targeting_mode.setter
    def targeting_mode(self, targeting_mode):
        """Sets the targeting_mode of this StringTargetingDimension.

        How the items in this list should be targeted.

        :param targeting_mode: The targeting_mode of this StringTargetingDimension.
        :type targeting_mode: str
        """
        allowed_values = ["TARGETING_MODE_UNSPECIFIED", "INCLUSIVE", "EXCLUSIVE"]  # noqa: E501
        if targeting_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `targeting_mode` ({0}), must be one of {1}"
                .format(targeting_mode, allowed_values)
            )

        self._targeting_mode = targeting_mode

    @property
    def values(self):
        """Gets the values of this StringTargetingDimension.

        The values specified.

        :return: The values of this StringTargetingDimension.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this StringTargetingDimension.

        The values specified.

        :param values: The values of this StringTargetingDimension.
        :type values: List[str]
        """

        self._values = values
