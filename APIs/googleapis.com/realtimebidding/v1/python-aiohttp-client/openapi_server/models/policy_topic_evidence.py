# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.destination_not_crawlable_evidence import DestinationNotCrawlableEvidence
from openapi_server.models.destination_not_working_evidence import DestinationNotWorkingEvidence
from openapi_server.models.destination_url_evidence import DestinationUrlEvidence
from openapi_server.models.domain_call_evidence import DomainCallEvidence
from openapi_server.models.download_size_evidence import DownloadSizeEvidence
from openapi_server.models.http_call_evidence import HttpCallEvidence
from openapi_server.models.http_cookie_evidence import HttpCookieEvidence
from openapi_server import util


class PolicyTopicEvidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination_not_crawlable: DestinationNotCrawlableEvidence=None, destination_not_working: DestinationNotWorkingEvidence=None, destination_url: DestinationUrlEvidence=None, domain_call: DomainCallEvidence=None, download_size: DownloadSizeEvidence=None, http_call: HttpCallEvidence=None, http_cookie: HttpCookieEvidence=None):
        """PolicyTopicEvidence - a model defined in OpenAPI

        :param destination_not_crawlable: The destination_not_crawlable of this PolicyTopicEvidence.
        :param destination_not_working: The destination_not_working of this PolicyTopicEvidence.
        :param destination_url: The destination_url of this PolicyTopicEvidence.
        :param domain_call: The domain_call of this PolicyTopicEvidence.
        :param download_size: The download_size of this PolicyTopicEvidence.
        :param http_call: The http_call of this PolicyTopicEvidence.
        :param http_cookie: The http_cookie of this PolicyTopicEvidence.
        """
        self.openapi_types = {
            'destination_not_crawlable': DestinationNotCrawlableEvidence,
            'destination_not_working': DestinationNotWorkingEvidence,
            'destination_url': DestinationUrlEvidence,
            'domain_call': DomainCallEvidence,
            'download_size': DownloadSizeEvidence,
            'http_call': HttpCallEvidence,
            'http_cookie': HttpCookieEvidence
        }

        self.attribute_map = {
            'destination_not_crawlable': 'destinationNotCrawlable',
            'destination_not_working': 'destinationNotWorking',
            'destination_url': 'destinationUrl',
            'domain_call': 'domainCall',
            'download_size': 'downloadSize',
            'http_call': 'httpCall',
            'http_cookie': 'httpCookie'
        }

        self._destination_not_crawlable = destination_not_crawlable
        self._destination_not_working = destination_not_working
        self._destination_url = destination_url
        self._domain_call = domain_call
        self._download_size = download_size
        self._http_call = http_call
        self._http_cookie = http_cookie

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PolicyTopicEvidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PolicyTopicEvidence of this PolicyTopicEvidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination_not_crawlable(self):
        """Gets the destination_not_crawlable of this PolicyTopicEvidence.


        :return: The destination_not_crawlable of this PolicyTopicEvidence.
        :rtype: DestinationNotCrawlableEvidence
        """
        return self._destination_not_crawlable

    @destination_not_crawlable.setter
    def destination_not_crawlable(self, destination_not_crawlable):
        """Sets the destination_not_crawlable of this PolicyTopicEvidence.


        :param destination_not_crawlable: The destination_not_crawlable of this PolicyTopicEvidence.
        :type destination_not_crawlable: DestinationNotCrawlableEvidence
        """

        self._destination_not_crawlable = destination_not_crawlable

    @property
    def destination_not_working(self):
        """Gets the destination_not_working of this PolicyTopicEvidence.


        :return: The destination_not_working of this PolicyTopicEvidence.
        :rtype: DestinationNotWorkingEvidence
        """
        return self._destination_not_working

    @destination_not_working.setter
    def destination_not_working(self, destination_not_working):
        """Sets the destination_not_working of this PolicyTopicEvidence.


        :param destination_not_working: The destination_not_working of this PolicyTopicEvidence.
        :type destination_not_working: DestinationNotWorkingEvidence
        """

        self._destination_not_working = destination_not_working

    @property
    def destination_url(self):
        """Gets the destination_url of this PolicyTopicEvidence.


        :return: The destination_url of this PolicyTopicEvidence.
        :rtype: DestinationUrlEvidence
        """
        return self._destination_url

    @destination_url.setter
    def destination_url(self, destination_url):
        """Sets the destination_url of this PolicyTopicEvidence.


        :param destination_url: The destination_url of this PolicyTopicEvidence.
        :type destination_url: DestinationUrlEvidence
        """

        self._destination_url = destination_url

    @property
    def domain_call(self):
        """Gets the domain_call of this PolicyTopicEvidence.


        :return: The domain_call of this PolicyTopicEvidence.
        :rtype: DomainCallEvidence
        """
        return self._domain_call

    @domain_call.setter
    def domain_call(self, domain_call):
        """Sets the domain_call of this PolicyTopicEvidence.


        :param domain_call: The domain_call of this PolicyTopicEvidence.
        :type domain_call: DomainCallEvidence
        """

        self._domain_call = domain_call

    @property
    def download_size(self):
        """Gets the download_size of this PolicyTopicEvidence.


        :return: The download_size of this PolicyTopicEvidence.
        :rtype: DownloadSizeEvidence
        """
        return self._download_size

    @download_size.setter
    def download_size(self, download_size):
        """Sets the download_size of this PolicyTopicEvidence.


        :param download_size: The download_size of this PolicyTopicEvidence.
        :type download_size: DownloadSizeEvidence
        """

        self._download_size = download_size

    @property
    def http_call(self):
        """Gets the http_call of this PolicyTopicEvidence.


        :return: The http_call of this PolicyTopicEvidence.
        :rtype: HttpCallEvidence
        """
        return self._http_call

    @http_call.setter
    def http_call(self, http_call):
        """Sets the http_call of this PolicyTopicEvidence.


        :param http_call: The http_call of this PolicyTopicEvidence.
        :type http_call: HttpCallEvidence
        """

        self._http_call = http_call

    @property
    def http_cookie(self):
        """Gets the http_cookie of this PolicyTopicEvidence.


        :return: The http_cookie of this PolicyTopicEvidence.
        :rtype: HttpCookieEvidence
        """
        return self._http_cookie

    @http_cookie.setter
    def http_cookie(self, http_cookie):
        """Sets the http_cookie of this PolicyTopicEvidence.


        :param http_cookie: The http_cookie of this PolicyTopicEvidence.
        :type http_cookie: HttpCookieEvidence
        """

        self._http_cookie = http_cookie
