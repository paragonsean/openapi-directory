/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AppTargeting;
import org.openapitools.client.model.CreativeDimensions;
import org.openapitools.client.model.NumericTargetingDimension;
import org.openapitools.client.model.StringTargetingDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Pretargeting configuration: a set of targeting dimensions applied at the pretargeting stage of the RTB funnel. These control which inventory a bidder will receive bid requests for.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PretargetingConfig {
  /**
   * Gets or Sets allowedUserTargetingModes
   */
  @JsonAdapter(AllowedUserTargetingModesEnum.Adapter.class)
  public enum AllowedUserTargetingModesEnum {
    USER_TARGETING_MODE_UNSPECIFIED("USER_TARGETING_MODE_UNSPECIFIED"),
    
    REMARKETING_ADS("REMARKETING_ADS"),
    
    INTEREST_BASED_TARGETING("INTEREST_BASED_TARGETING");

    private String value;

    AllowedUserTargetingModesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllowedUserTargetingModesEnum fromValue(String value) {
      for (AllowedUserTargetingModesEnum b : AllowedUserTargetingModesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllowedUserTargetingModesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllowedUserTargetingModesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllowedUserTargetingModesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllowedUserTargetingModesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllowedUserTargetingModesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOWED_USER_TARGETING_MODES = "allowedUserTargetingModes";
  @SerializedName(SERIALIZED_NAME_ALLOWED_USER_TARGETING_MODES)
  private List<AllowedUserTargetingModesEnum> allowedUserTargetingModes = new ArrayList<>();

  public static final String SERIALIZED_NAME_APP_TARGETING = "appTargeting";
  @SerializedName(SERIALIZED_NAME_APP_TARGETING)
  private AppTargeting appTargeting;

  public static final String SERIALIZED_NAME_BILLING_ID = "billingId";
  @SerializedName(SERIALIZED_NAME_BILLING_ID)
  private String billingId;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EXCLUDED_CONTENT_LABEL_IDS = "excludedContentLabelIds";
  @SerializedName(SERIALIZED_NAME_EXCLUDED_CONTENT_LABEL_IDS)
  private List<String> excludedContentLabelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_GEO_TARGETING = "geoTargeting";
  @SerializedName(SERIALIZED_NAME_GEO_TARGETING)
  private NumericTargetingDimension geoTargeting;

  public static final String SERIALIZED_NAME_INCLUDED_CREATIVE_DIMENSIONS = "includedCreativeDimensions";
  @SerializedName(SERIALIZED_NAME_INCLUDED_CREATIVE_DIMENSIONS)
  private List<CreativeDimensions> includedCreativeDimensions = new ArrayList<>();

  /**
   * Gets or Sets includedEnvironments
   */
  @JsonAdapter(IncludedEnvironmentsEnum.Adapter.class)
  public enum IncludedEnvironmentsEnum {
    ENVIRONMENT_UNSPECIFIED("ENVIRONMENT_UNSPECIFIED"),
    
    APP("APP"),
    
    WEB("WEB");

    private String value;

    IncludedEnvironmentsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludedEnvironmentsEnum fromValue(String value) {
      for (IncludedEnvironmentsEnum b : IncludedEnvironmentsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludedEnvironmentsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludedEnvironmentsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludedEnvironmentsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludedEnvironmentsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncludedEnvironmentsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCLUDED_ENVIRONMENTS = "includedEnvironments";
  @SerializedName(SERIALIZED_NAME_INCLUDED_ENVIRONMENTS)
  private List<IncludedEnvironmentsEnum> includedEnvironments = new ArrayList<>();

  /**
   * Gets or Sets includedFormats
   */
  @JsonAdapter(IncludedFormatsEnum.Adapter.class)
  public enum IncludedFormatsEnum {
    CREATIVE_FORMAT_UNSPECIFIED("CREATIVE_FORMAT_UNSPECIFIED"),
    
    HTML("HTML"),
    
    VAST("VAST"),
    
    NATIVE("NATIVE");

    private String value;

    IncludedFormatsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludedFormatsEnum fromValue(String value) {
      for (IncludedFormatsEnum b : IncludedFormatsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludedFormatsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludedFormatsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludedFormatsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludedFormatsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncludedFormatsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCLUDED_FORMATS = "includedFormats";
  @SerializedName(SERIALIZED_NAME_INCLUDED_FORMATS)
  private List<IncludedFormatsEnum> includedFormats = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_LANGUAGES = "includedLanguages";
  @SerializedName(SERIALIZED_NAME_INCLUDED_LANGUAGES)
  private List<String> includedLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_INCLUDED_MOBILE_OPERATING_SYSTEM_IDS = "includedMobileOperatingSystemIds";
  @SerializedName(SERIALIZED_NAME_INCLUDED_MOBILE_OPERATING_SYSTEM_IDS)
  private List<String> includedMobileOperatingSystemIds = new ArrayList<>();

  /**
   * Gets or Sets includedPlatforms
   */
  @JsonAdapter(IncludedPlatformsEnum.Adapter.class)
  public enum IncludedPlatformsEnum {
    PLATFORM_UNSPECIFIED("PLATFORM_UNSPECIFIED"),
    
    PERSONAL_COMPUTER("PERSONAL_COMPUTER"),
    
    PHONE("PHONE"),
    
    TABLET("TABLET"),
    
    CONNECTED_TV("CONNECTED_TV");

    private String value;

    IncludedPlatformsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludedPlatformsEnum fromValue(String value) {
      for (IncludedPlatformsEnum b : IncludedPlatformsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludedPlatformsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludedPlatformsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludedPlatformsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludedPlatformsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncludedPlatformsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCLUDED_PLATFORMS = "includedPlatforms";
  @SerializedName(SERIALIZED_NAME_INCLUDED_PLATFORMS)
  private List<IncludedPlatformsEnum> includedPlatforms = new ArrayList<>();

  /**
   * Gets or Sets includedUserIdTypes
   */
  @JsonAdapter(IncludedUserIdTypesEnum.Adapter.class)
  public enum IncludedUserIdTypesEnum {
    USER_ID_TYPE_UNSPECIFIED("USER_ID_TYPE_UNSPECIFIED"),
    
    HOSTED_MATCH_DATA("HOSTED_MATCH_DATA"),
    
    GOOGLE_COOKIE("GOOGLE_COOKIE"),
    
    DEVICE_ID("DEVICE_ID");

    private String value;

    IncludedUserIdTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IncludedUserIdTypesEnum fromValue(String value) {
      for (IncludedUserIdTypesEnum b : IncludedUserIdTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IncludedUserIdTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IncludedUserIdTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IncludedUserIdTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IncludedUserIdTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IncludedUserIdTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INCLUDED_USER_ID_TYPES = "includedUserIdTypes";
  @SerializedName(SERIALIZED_NAME_INCLUDED_USER_ID_TYPES)
  private List<IncludedUserIdTypesEnum> includedUserIdTypes = new ArrayList<>();

  /**
   * The interstitial targeting specified for this configuration. The unset value will allow bid requests to be sent regardless of whether they are for interstitials or not.
   */
  @JsonAdapter(InterstitialTargetingEnum.Adapter.class)
  public enum InterstitialTargetingEnum {
    INTERSTITIAL_TARGETING_UNSPECIFIED("INTERSTITIAL_TARGETING_UNSPECIFIED"),
    
    ONLY_INTERSTITIAL_REQUESTS("ONLY_INTERSTITIAL_REQUESTS"),
    
    ONLY_NON_INTERSTITIAL_REQUESTS("ONLY_NON_INTERSTITIAL_REQUESTS");

    private String value;

    InterstitialTargetingEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InterstitialTargetingEnum fromValue(String value) {
      for (InterstitialTargetingEnum b : InterstitialTargetingEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InterstitialTargetingEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InterstitialTargetingEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InterstitialTargetingEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InterstitialTargetingEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InterstitialTargetingEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INTERSTITIAL_TARGETING = "interstitialTargeting";
  @SerializedName(SERIALIZED_NAME_INTERSTITIAL_TARGETING)
  private InterstitialTargetingEnum interstitialTargeting;

  public static final String SERIALIZED_NAME_INVALID_GEO_IDS = "invalidGeoIds";
  @SerializedName(SERIALIZED_NAME_INVALID_GEO_IDS)
  private List<String> invalidGeoIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAXIMUM_QPS = "maximumQps";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_QPS)
  private String maximumQps;

  public static final String SERIALIZED_NAME_MINIMUM_VIEWABILITY_DECILE = "minimumViewabilityDecile";
  @SerializedName(SERIALIZED_NAME_MINIMUM_VIEWABILITY_DECILE)
  private Integer minimumViewabilityDecile;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PUBLISHER_TARGETING = "publisherTargeting";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_TARGETING)
  private StringTargetingDimension publisherTargeting;

  /**
   * Output only. The state of this pretargeting configuration.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    ACTIVE("ACTIVE"),
    
    SUSPENDED("SUSPENDED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_USER_LIST_TARGETING = "userListTargeting";
  @SerializedName(SERIALIZED_NAME_USER_LIST_TARGETING)
  private NumericTargetingDimension userListTargeting;

  public static final String SERIALIZED_NAME_VERTICAL_TARGETING = "verticalTargeting";
  @SerializedName(SERIALIZED_NAME_VERTICAL_TARGETING)
  private NumericTargetingDimension verticalTargeting;

  public static final String SERIALIZED_NAME_WEB_TARGETING = "webTargeting";
  @SerializedName(SERIALIZED_NAME_WEB_TARGETING)
  private StringTargetingDimension webTargeting;

  public PretargetingConfig() {
  }

  public PretargetingConfig(
     String billingId, 
     List<String> invalidGeoIds, 
     String name, 
     StateEnum state
  ) {
    this();
    this.billingId = billingId;
    this.invalidGeoIds = invalidGeoIds;
    this.name = name;
    this.state = state;
  }

  public PretargetingConfig allowedUserTargetingModes(List<AllowedUserTargetingModesEnum> allowedUserTargetingModes) {
    this.allowedUserTargetingModes = allowedUserTargetingModes;
    return this;
  }

  public PretargetingConfig addAllowedUserTargetingModesItem(AllowedUserTargetingModesEnum allowedUserTargetingModesItem) {
    if (this.allowedUserTargetingModes == null) {
      this.allowedUserTargetingModes = new ArrayList<>();
    }
    this.allowedUserTargetingModes.add(allowedUserTargetingModesItem);
    return this;
  }

  /**
   * Targeting modes included by this configuration. A bid request must allow all the specified targeting modes. An unset value allows all bid requests to be sent, regardless of which targeting modes they allow.
   * @return allowedUserTargetingModes
   */
  @javax.annotation.Nullable
  public List<AllowedUserTargetingModesEnum> getAllowedUserTargetingModes() {
    return allowedUserTargetingModes;
  }

  public void setAllowedUserTargetingModes(List<AllowedUserTargetingModesEnum> allowedUserTargetingModes) {
    this.allowedUserTargetingModes = allowedUserTargetingModes;
  }


  public PretargetingConfig appTargeting(AppTargeting appTargeting) {
    this.appTargeting = appTargeting;
    return this;
  }

  /**
   * Get appTargeting
   * @return appTargeting
   */
  @javax.annotation.Nullable
  public AppTargeting getAppTargeting() {
    return appTargeting;
  }

  public void setAppTargeting(AppTargeting appTargeting) {
    this.appTargeting = appTargeting;
  }


  /**
   * Output only. The identifier that corresponds to this pretargeting configuration that helps buyers track and attribute their spend across their own arbitrary divisions. If a bid request matches more than one configuration, the buyer chooses which billing_id to attribute each of their bids.
   * @return billingId
   */
  @javax.annotation.Nullable
  public String getBillingId() {
    return billingId;
  }



  public PretargetingConfig displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The diplay name associated with this configuration. This name must be unique among all the pretargeting configurations a bidder has.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public PretargetingConfig excludedContentLabelIds(List<String> excludedContentLabelIds) {
    this.excludedContentLabelIds = excludedContentLabelIds;
    return this;
  }

  public PretargetingConfig addExcludedContentLabelIdsItem(String excludedContentLabelIdsItem) {
    if (this.excludedContentLabelIds == null) {
      this.excludedContentLabelIds = new ArrayList<>();
    }
    this.excludedContentLabelIds.add(excludedContentLabelIdsItem);
    return this;
  }

  /**
   * The sensitive content category label IDs excluded in this configuration. Bid requests for inventory with any of the specified content label IDs will not be sent. Refer to this file https://storage.googleapis.com/adx-rtb-dictionaries/content-labels.txt for category IDs.
   * @return excludedContentLabelIds
   */
  @javax.annotation.Nullable
  public List<String> getExcludedContentLabelIds() {
    return excludedContentLabelIds;
  }

  public void setExcludedContentLabelIds(List<String> excludedContentLabelIds) {
    this.excludedContentLabelIds = excludedContentLabelIds;
  }


  public PretargetingConfig geoTargeting(NumericTargetingDimension geoTargeting) {
    this.geoTargeting = geoTargeting;
    return this;
  }

  /**
   * Get geoTargeting
   * @return geoTargeting
   */
  @javax.annotation.Nullable
  public NumericTargetingDimension getGeoTargeting() {
    return geoTargeting;
  }

  public void setGeoTargeting(NumericTargetingDimension geoTargeting) {
    this.geoTargeting = geoTargeting;
  }


  public PretargetingConfig includedCreativeDimensions(List<CreativeDimensions> includedCreativeDimensions) {
    this.includedCreativeDimensions = includedCreativeDimensions;
    return this;
  }

  public PretargetingConfig addIncludedCreativeDimensionsItem(CreativeDimensions includedCreativeDimensionsItem) {
    if (this.includedCreativeDimensions == null) {
      this.includedCreativeDimensions = new ArrayList<>();
    }
    this.includedCreativeDimensions.add(includedCreativeDimensionsItem);
    return this;
  }

  /**
   * Creative dimensions included by this configuration. Only bid requests eligible for at least one of the specified creative dimensions will be sent. An unset value allows all bid requests to be sent, regardless of creative dimension.
   * @return includedCreativeDimensions
   */
  @javax.annotation.Nullable
  public List<CreativeDimensions> getIncludedCreativeDimensions() {
    return includedCreativeDimensions;
  }

  public void setIncludedCreativeDimensions(List<CreativeDimensions> includedCreativeDimensions) {
    this.includedCreativeDimensions = includedCreativeDimensions;
  }


  public PretargetingConfig includedEnvironments(List<IncludedEnvironmentsEnum> includedEnvironments) {
    this.includedEnvironments = includedEnvironments;
    return this;
  }

  public PretargetingConfig addIncludedEnvironmentsItem(IncludedEnvironmentsEnum includedEnvironmentsItem) {
    if (this.includedEnvironments == null) {
      this.includedEnvironments = new ArrayList<>();
    }
    this.includedEnvironments.add(includedEnvironmentsItem);
    return this;
  }

  /**
   * Environments that are being included. Bid requests will not be sent for a given environment if it is not included. Further restrictions can be applied to included environments to target only a subset of its inventory. An unset value includes all environments.
   * @return includedEnvironments
   */
  @javax.annotation.Nullable
  public List<IncludedEnvironmentsEnum> getIncludedEnvironments() {
    return includedEnvironments;
  }

  public void setIncludedEnvironments(List<IncludedEnvironmentsEnum> includedEnvironments) {
    this.includedEnvironments = includedEnvironments;
  }


  public PretargetingConfig includedFormats(List<IncludedFormatsEnum> includedFormats) {
    this.includedFormats = includedFormats;
    return this;
  }

  public PretargetingConfig addIncludedFormatsItem(IncludedFormatsEnum includedFormatsItem) {
    if (this.includedFormats == null) {
      this.includedFormats = new ArrayList<>();
    }
    this.includedFormats.add(includedFormatsItem);
    return this;
  }

  /**
   * Creative formats included by this configuration. Only bid requests eligible for at least one of the specified creative formats will be sent. An unset value will allow all bid requests to be sent, regardless of format.
   * @return includedFormats
   */
  @javax.annotation.Nullable
  public List<IncludedFormatsEnum> getIncludedFormats() {
    return includedFormats;
  }

  public void setIncludedFormats(List<IncludedFormatsEnum> includedFormats) {
    this.includedFormats = includedFormats;
  }


  public PretargetingConfig includedLanguages(List<String> includedLanguages) {
    this.includedLanguages = includedLanguages;
    return this;
  }

  public PretargetingConfig addIncludedLanguagesItem(String includedLanguagesItem) {
    if (this.includedLanguages == null) {
      this.includedLanguages = new ArrayList<>();
    }
    this.includedLanguages.add(includedLanguagesItem);
    return this;
  }

  /**
   * The languages included in this configuration, represented by their language code. See https://developers.google.com/adwords/api/docs/appendix/languagecodes.
   * @return includedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getIncludedLanguages() {
    return includedLanguages;
  }

  public void setIncludedLanguages(List<String> includedLanguages) {
    this.includedLanguages = includedLanguages;
  }


  public PretargetingConfig includedMobileOperatingSystemIds(List<String> includedMobileOperatingSystemIds) {
    this.includedMobileOperatingSystemIds = includedMobileOperatingSystemIds;
    return this;
  }

  public PretargetingConfig addIncludedMobileOperatingSystemIdsItem(String includedMobileOperatingSystemIdsItem) {
    if (this.includedMobileOperatingSystemIds == null) {
      this.includedMobileOperatingSystemIds = new ArrayList<>();
    }
    this.includedMobileOperatingSystemIds.add(includedMobileOperatingSystemIdsItem);
    return this;
  }

  /**
   * The mobile operating systems included in this configuration as defined in https://storage.googleapis.com/adx-rtb-dictionaries/mobile-os.csv
   * @return includedMobileOperatingSystemIds
   */
  @javax.annotation.Nullable
  public List<String> getIncludedMobileOperatingSystemIds() {
    return includedMobileOperatingSystemIds;
  }

  public void setIncludedMobileOperatingSystemIds(List<String> includedMobileOperatingSystemIds) {
    this.includedMobileOperatingSystemIds = includedMobileOperatingSystemIds;
  }


  public PretargetingConfig includedPlatforms(List<IncludedPlatformsEnum> includedPlatforms) {
    this.includedPlatforms = includedPlatforms;
    return this;
  }

  public PretargetingConfig addIncludedPlatformsItem(IncludedPlatformsEnum includedPlatformsItem) {
    if (this.includedPlatforms == null) {
      this.includedPlatforms = new ArrayList<>();
    }
    this.includedPlatforms.add(includedPlatformsItem);
    return this;
  }

  /**
   * The platforms included by this configration. Bid requests for devices with the specified platform types will be sent. An unset value allows all bid requests to be sent, regardless of platform.
   * @return includedPlatforms
   */
  @javax.annotation.Nullable
  public List<IncludedPlatformsEnum> getIncludedPlatforms() {
    return includedPlatforms;
  }

  public void setIncludedPlatforms(List<IncludedPlatformsEnum> includedPlatforms) {
    this.includedPlatforms = includedPlatforms;
  }


  public PretargetingConfig includedUserIdTypes(List<IncludedUserIdTypesEnum> includedUserIdTypes) {
    this.includedUserIdTypes = includedUserIdTypes;
    return this;
  }

  public PretargetingConfig addIncludedUserIdTypesItem(IncludedUserIdTypesEnum includedUserIdTypesItem) {
    if (this.includedUserIdTypes == null) {
      this.includedUserIdTypes = new ArrayList<>();
    }
    this.includedUserIdTypes.add(includedUserIdTypesItem);
    return this;
  }

  /**
   * User identifier types included in this configuration. At least one of the user identifier types specified in this list must be available for the bid request to be sent.
   * @return includedUserIdTypes
   */
  @javax.annotation.Nullable
  public List<IncludedUserIdTypesEnum> getIncludedUserIdTypes() {
    return includedUserIdTypes;
  }

  public void setIncludedUserIdTypes(List<IncludedUserIdTypesEnum> includedUserIdTypes) {
    this.includedUserIdTypes = includedUserIdTypes;
  }


  public PretargetingConfig interstitialTargeting(InterstitialTargetingEnum interstitialTargeting) {
    this.interstitialTargeting = interstitialTargeting;
    return this;
  }

  /**
   * The interstitial targeting specified for this configuration. The unset value will allow bid requests to be sent regardless of whether they are for interstitials or not.
   * @return interstitialTargeting
   */
  @javax.annotation.Nullable
  public InterstitialTargetingEnum getInterstitialTargeting() {
    return interstitialTargeting;
  }

  public void setInterstitialTargeting(InterstitialTargetingEnum interstitialTargeting) {
    this.interstitialTargeting = interstitialTargeting;
  }


  /**
   * Output only. Existing included or excluded geos that are invalid. Previously targeted geos may become invalid due to privacy restrictions.
   * @return invalidGeoIds
   */
  @javax.annotation.Nullable
  public List<String> getInvalidGeoIds() {
    return invalidGeoIds;
  }



  public PretargetingConfig maximumQps(String maximumQps) {
    this.maximumQps = maximumQps;
    return this;
  }

  /**
   * The maximum QPS threshold for this configuration. The bidder should receive no more than this number of bid requests matching this configuration per second across all their bidding endpoints among all trading locations. Further information available at https://developers.google.com/authorized-buyers/rtb/peer-guide
   * @return maximumQps
   */
  @javax.annotation.Nullable
  public String getMaximumQps() {
    return maximumQps;
  }

  public void setMaximumQps(String maximumQps) {
    this.maximumQps = maximumQps;
  }


  public PretargetingConfig minimumViewabilityDecile(Integer minimumViewabilityDecile) {
    this.minimumViewabilityDecile = minimumViewabilityDecile;
    return this;
  }

  /**
   * The targeted minimum viewability decile, ranging in values [0, 10]. A value of 5 means that the configuration will only match adslots for which we predict at least 50% viewability. Values &gt; 10 will be rounded down to 10. An unset value or a value of 0 indicates that bid requests will be sent regardless of viewability.
   * @return minimumViewabilityDecile
   */
  @javax.annotation.Nullable
  public Integer getMinimumViewabilityDecile() {
    return minimumViewabilityDecile;
  }

  public void setMinimumViewabilityDecile(Integer minimumViewabilityDecile) {
    this.minimumViewabilityDecile = minimumViewabilityDecile;
  }


  /**
   * Output only. Name of the pretargeting configuration that must follow the pattern &#x60;bidders/{bidder_account_id}/pretargetingConfigs/{config_id}&#x60;
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public PretargetingConfig publisherTargeting(StringTargetingDimension publisherTargeting) {
    this.publisherTargeting = publisherTargeting;
    return this;
  }

  /**
   * Get publisherTargeting
   * @return publisherTargeting
   */
  @javax.annotation.Nullable
  public StringTargetingDimension getPublisherTargeting() {
    return publisherTargeting;
  }

  public void setPublisherTargeting(StringTargetingDimension publisherTargeting) {
    this.publisherTargeting = publisherTargeting;
  }


  /**
   * Output only. The state of this pretargeting configuration.
   * @return state
   */
  @javax.annotation.Nullable
  public StateEnum getState() {
    return state;
  }



  public PretargetingConfig userListTargeting(NumericTargetingDimension userListTargeting) {
    this.userListTargeting = userListTargeting;
    return this;
  }

  /**
   * Get userListTargeting
   * @return userListTargeting
   */
  @javax.annotation.Nullable
  public NumericTargetingDimension getUserListTargeting() {
    return userListTargeting;
  }

  public void setUserListTargeting(NumericTargetingDimension userListTargeting) {
    this.userListTargeting = userListTargeting;
  }


  public PretargetingConfig verticalTargeting(NumericTargetingDimension verticalTargeting) {
    this.verticalTargeting = verticalTargeting;
    return this;
  }

  /**
   * Get verticalTargeting
   * @return verticalTargeting
   */
  @javax.annotation.Nullable
  public NumericTargetingDimension getVerticalTargeting() {
    return verticalTargeting;
  }

  public void setVerticalTargeting(NumericTargetingDimension verticalTargeting) {
    this.verticalTargeting = verticalTargeting;
  }


  public PretargetingConfig webTargeting(StringTargetingDimension webTargeting) {
    this.webTargeting = webTargeting;
    return this;
  }

  /**
   * Get webTargeting
   * @return webTargeting
   */
  @javax.annotation.Nullable
  public StringTargetingDimension getWebTargeting() {
    return webTargeting;
  }

  public void setWebTargeting(StringTargetingDimension webTargeting) {
    this.webTargeting = webTargeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PretargetingConfig pretargetingConfig = (PretargetingConfig) o;
    return Objects.equals(this.allowedUserTargetingModes, pretargetingConfig.allowedUserTargetingModes) &&
        Objects.equals(this.appTargeting, pretargetingConfig.appTargeting) &&
        Objects.equals(this.billingId, pretargetingConfig.billingId) &&
        Objects.equals(this.displayName, pretargetingConfig.displayName) &&
        Objects.equals(this.excludedContentLabelIds, pretargetingConfig.excludedContentLabelIds) &&
        Objects.equals(this.geoTargeting, pretargetingConfig.geoTargeting) &&
        Objects.equals(this.includedCreativeDimensions, pretargetingConfig.includedCreativeDimensions) &&
        Objects.equals(this.includedEnvironments, pretargetingConfig.includedEnvironments) &&
        Objects.equals(this.includedFormats, pretargetingConfig.includedFormats) &&
        Objects.equals(this.includedLanguages, pretargetingConfig.includedLanguages) &&
        Objects.equals(this.includedMobileOperatingSystemIds, pretargetingConfig.includedMobileOperatingSystemIds) &&
        Objects.equals(this.includedPlatforms, pretargetingConfig.includedPlatforms) &&
        Objects.equals(this.includedUserIdTypes, pretargetingConfig.includedUserIdTypes) &&
        Objects.equals(this.interstitialTargeting, pretargetingConfig.interstitialTargeting) &&
        Objects.equals(this.invalidGeoIds, pretargetingConfig.invalidGeoIds) &&
        Objects.equals(this.maximumQps, pretargetingConfig.maximumQps) &&
        Objects.equals(this.minimumViewabilityDecile, pretargetingConfig.minimumViewabilityDecile) &&
        Objects.equals(this.name, pretargetingConfig.name) &&
        Objects.equals(this.publisherTargeting, pretargetingConfig.publisherTargeting) &&
        Objects.equals(this.state, pretargetingConfig.state) &&
        Objects.equals(this.userListTargeting, pretargetingConfig.userListTargeting) &&
        Objects.equals(this.verticalTargeting, pretargetingConfig.verticalTargeting) &&
        Objects.equals(this.webTargeting, pretargetingConfig.webTargeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowedUserTargetingModes, appTargeting, billingId, displayName, excludedContentLabelIds, geoTargeting, includedCreativeDimensions, includedEnvironments, includedFormats, includedLanguages, includedMobileOperatingSystemIds, includedPlatforms, includedUserIdTypes, interstitialTargeting, invalidGeoIds, maximumQps, minimumViewabilityDecile, name, publisherTargeting, state, userListTargeting, verticalTargeting, webTargeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PretargetingConfig {\n");
    sb.append("    allowedUserTargetingModes: ").append(toIndentedString(allowedUserTargetingModes)).append("\n");
    sb.append("    appTargeting: ").append(toIndentedString(appTargeting)).append("\n");
    sb.append("    billingId: ").append(toIndentedString(billingId)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    excludedContentLabelIds: ").append(toIndentedString(excludedContentLabelIds)).append("\n");
    sb.append("    geoTargeting: ").append(toIndentedString(geoTargeting)).append("\n");
    sb.append("    includedCreativeDimensions: ").append(toIndentedString(includedCreativeDimensions)).append("\n");
    sb.append("    includedEnvironments: ").append(toIndentedString(includedEnvironments)).append("\n");
    sb.append("    includedFormats: ").append(toIndentedString(includedFormats)).append("\n");
    sb.append("    includedLanguages: ").append(toIndentedString(includedLanguages)).append("\n");
    sb.append("    includedMobileOperatingSystemIds: ").append(toIndentedString(includedMobileOperatingSystemIds)).append("\n");
    sb.append("    includedPlatforms: ").append(toIndentedString(includedPlatforms)).append("\n");
    sb.append("    includedUserIdTypes: ").append(toIndentedString(includedUserIdTypes)).append("\n");
    sb.append("    interstitialTargeting: ").append(toIndentedString(interstitialTargeting)).append("\n");
    sb.append("    invalidGeoIds: ").append(toIndentedString(invalidGeoIds)).append("\n");
    sb.append("    maximumQps: ").append(toIndentedString(maximumQps)).append("\n");
    sb.append("    minimumViewabilityDecile: ").append(toIndentedString(minimumViewabilityDecile)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publisherTargeting: ").append(toIndentedString(publisherTargeting)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    userListTargeting: ").append(toIndentedString(userListTargeting)).append("\n");
    sb.append("    verticalTargeting: ").append(toIndentedString(verticalTargeting)).append("\n");
    sb.append("    webTargeting: ").append(toIndentedString(webTargeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowedUserTargetingModes");
    openapiFields.add("appTargeting");
    openapiFields.add("billingId");
    openapiFields.add("displayName");
    openapiFields.add("excludedContentLabelIds");
    openapiFields.add("geoTargeting");
    openapiFields.add("includedCreativeDimensions");
    openapiFields.add("includedEnvironments");
    openapiFields.add("includedFormats");
    openapiFields.add("includedLanguages");
    openapiFields.add("includedMobileOperatingSystemIds");
    openapiFields.add("includedPlatforms");
    openapiFields.add("includedUserIdTypes");
    openapiFields.add("interstitialTargeting");
    openapiFields.add("invalidGeoIds");
    openapiFields.add("maximumQps");
    openapiFields.add("minimumViewabilityDecile");
    openapiFields.add("name");
    openapiFields.add("publisherTargeting");
    openapiFields.add("state");
    openapiFields.add("userListTargeting");
    openapiFields.add("verticalTargeting");
    openapiFields.add("webTargeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PretargetingConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PretargetingConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PretargetingConfig is not found in the empty JSON string", PretargetingConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PretargetingConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PretargetingConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowedUserTargetingModes") != null && !jsonObj.get("allowedUserTargetingModes").isJsonNull() && !jsonObj.get("allowedUserTargetingModes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowedUserTargetingModes` to be an array in the JSON string but got `%s`", jsonObj.get("allowedUserTargetingModes").toString()));
      }
      // validate the optional field `appTargeting`
      if (jsonObj.get("appTargeting") != null && !jsonObj.get("appTargeting").isJsonNull()) {
        AppTargeting.validateJsonElement(jsonObj.get("appTargeting"));
      }
      if ((jsonObj.get("billingId") != null && !jsonObj.get("billingId").isJsonNull()) && !jsonObj.get("billingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingId").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("excludedContentLabelIds") != null && !jsonObj.get("excludedContentLabelIds").isJsonNull() && !jsonObj.get("excludedContentLabelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `excludedContentLabelIds` to be an array in the JSON string but got `%s`", jsonObj.get("excludedContentLabelIds").toString()));
      }
      // validate the optional field `geoTargeting`
      if (jsonObj.get("geoTargeting") != null && !jsonObj.get("geoTargeting").isJsonNull()) {
        NumericTargetingDimension.validateJsonElement(jsonObj.get("geoTargeting"));
      }
      if (jsonObj.get("includedCreativeDimensions") != null && !jsonObj.get("includedCreativeDimensions").isJsonNull()) {
        JsonArray jsonArrayincludedCreativeDimensions = jsonObj.getAsJsonArray("includedCreativeDimensions");
        if (jsonArrayincludedCreativeDimensions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("includedCreativeDimensions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `includedCreativeDimensions` to be an array in the JSON string but got `%s`", jsonObj.get("includedCreativeDimensions").toString()));
          }

          // validate the optional field `includedCreativeDimensions` (array)
          for (int i = 0; i < jsonArrayincludedCreativeDimensions.size(); i++) {
            CreativeDimensions.validateJsonElement(jsonArrayincludedCreativeDimensions.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedEnvironments") != null && !jsonObj.get("includedEnvironments").isJsonNull() && !jsonObj.get("includedEnvironments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedEnvironments` to be an array in the JSON string but got `%s`", jsonObj.get("includedEnvironments").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedFormats") != null && !jsonObj.get("includedFormats").isJsonNull() && !jsonObj.get("includedFormats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedFormats` to be an array in the JSON string but got `%s`", jsonObj.get("includedFormats").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedLanguages") != null && !jsonObj.get("includedLanguages").isJsonNull() && !jsonObj.get("includedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("includedLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedMobileOperatingSystemIds") != null && !jsonObj.get("includedMobileOperatingSystemIds").isJsonNull() && !jsonObj.get("includedMobileOperatingSystemIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedMobileOperatingSystemIds` to be an array in the JSON string but got `%s`", jsonObj.get("includedMobileOperatingSystemIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedPlatforms") != null && !jsonObj.get("includedPlatforms").isJsonNull() && !jsonObj.get("includedPlatforms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedPlatforms` to be an array in the JSON string but got `%s`", jsonObj.get("includedPlatforms").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("includedUserIdTypes") != null && !jsonObj.get("includedUserIdTypes").isJsonNull() && !jsonObj.get("includedUserIdTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `includedUserIdTypes` to be an array in the JSON string but got `%s`", jsonObj.get("includedUserIdTypes").toString()));
      }
      if ((jsonObj.get("interstitialTargeting") != null && !jsonObj.get("interstitialTargeting").isJsonNull()) && !jsonObj.get("interstitialTargeting").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interstitialTargeting` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interstitialTargeting").toString()));
      }
      // validate the optional field `interstitialTargeting`
      if (jsonObj.get("interstitialTargeting") != null && !jsonObj.get("interstitialTargeting").isJsonNull()) {
        InterstitialTargetingEnum.validateJsonElement(jsonObj.get("interstitialTargeting"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("invalidGeoIds") != null && !jsonObj.get("invalidGeoIds").isJsonNull() && !jsonObj.get("invalidGeoIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidGeoIds` to be an array in the JSON string but got `%s`", jsonObj.get("invalidGeoIds").toString()));
      }
      if ((jsonObj.get("maximumQps") != null && !jsonObj.get("maximumQps").isJsonNull()) && !jsonObj.get("maximumQps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumQps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumQps").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `publisherTargeting`
      if (jsonObj.get("publisherTargeting") != null && !jsonObj.get("publisherTargeting").isJsonNull()) {
        StringTargetingDimension.validateJsonElement(jsonObj.get("publisherTargeting"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        StateEnum.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `userListTargeting`
      if (jsonObj.get("userListTargeting") != null && !jsonObj.get("userListTargeting").isJsonNull()) {
        NumericTargetingDimension.validateJsonElement(jsonObj.get("userListTargeting"));
      }
      // validate the optional field `verticalTargeting`
      if (jsonObj.get("verticalTargeting") != null && !jsonObj.get("verticalTargeting").isJsonNull()) {
        NumericTargetingDimension.validateJsonElement(jsonObj.get("verticalTargeting"));
      }
      // validate the optional field `webTargeting`
      if (jsonObj.get("webTargeting") != null && !jsonObj.get("webTargeting").isJsonNull()) {
        StringTargetingDimension.validateJsonElement(jsonObj.get("webTargeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PretargetingConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PretargetingConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PretargetingConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PretargetingConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PretargetingConfig>() {
           @Override
           public void write(JsonWriter out, PretargetingConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PretargetingConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PretargetingConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PretargetingConfig
   * @throws IOException if the JSON string is invalid with respect to PretargetingConfig
   */
  public static PretargetingConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PretargetingConfig.class);
  }

  /**
   * Convert an instance of PretargetingConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

