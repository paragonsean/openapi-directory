/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PretargetingConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response containing pretargeting configurations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPretargetingConfigsResponse {
  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_PRETARGETING_CONFIGS = "pretargetingConfigs";
  @SerializedName(SERIALIZED_NAME_PRETARGETING_CONFIGS)
  private List<PretargetingConfig> pretargetingConfigs = new ArrayList<>();

  public ListPretargetingConfigsResponse() {
  }

  public ListPretargetingConfigsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * A token which can be passed to a subsequent call to the &#x60;ListPretargetingConfigs&#x60; method to retrieve the next page of results in ListPretargetingConfigsRequest.pageToken.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListPretargetingConfigsResponse pretargetingConfigs(List<PretargetingConfig> pretargetingConfigs) {
    this.pretargetingConfigs = pretargetingConfigs;
    return this;
  }

  public ListPretargetingConfigsResponse addPretargetingConfigsItem(PretargetingConfig pretargetingConfigsItem) {
    if (this.pretargetingConfigs == null) {
      this.pretargetingConfigs = new ArrayList<>();
    }
    this.pretargetingConfigs.add(pretargetingConfigsItem);
    return this;
  }

  /**
   * List of pretargeting configurations.
   * @return pretargetingConfigs
   */
  @javax.annotation.Nullable
  public List<PretargetingConfig> getPretargetingConfigs() {
    return pretargetingConfigs;
  }

  public void setPretargetingConfigs(List<PretargetingConfig> pretargetingConfigs) {
    this.pretargetingConfigs = pretargetingConfigs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPretargetingConfigsResponse listPretargetingConfigsResponse = (ListPretargetingConfigsResponse) o;
    return Objects.equals(this.nextPageToken, listPretargetingConfigsResponse.nextPageToken) &&
        Objects.equals(this.pretargetingConfigs, listPretargetingConfigsResponse.pretargetingConfigs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPageToken, pretargetingConfigs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPretargetingConfigsResponse {\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    pretargetingConfigs: ").append(toIndentedString(pretargetingConfigs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPageToken");
    openapiFields.add("pretargetingConfigs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPretargetingConfigsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPretargetingConfigsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPretargetingConfigsResponse is not found in the empty JSON string", ListPretargetingConfigsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPretargetingConfigsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPretargetingConfigsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("pretargetingConfigs") != null && !jsonObj.get("pretargetingConfigs").isJsonNull()) {
        JsonArray jsonArraypretargetingConfigs = jsonObj.getAsJsonArray("pretargetingConfigs");
        if (jsonArraypretargetingConfigs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("pretargetingConfigs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `pretargetingConfigs` to be an array in the JSON string but got `%s`", jsonObj.get("pretargetingConfigs").toString()));
          }

          // validate the optional field `pretargetingConfigs` (array)
          for (int i = 0; i < jsonArraypretargetingConfigs.size(); i++) {
            PretargetingConfig.validateJsonElement(jsonArraypretargetingConfigs.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPretargetingConfigsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPretargetingConfigsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPretargetingConfigsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPretargetingConfigsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPretargetingConfigsResponse>() {
           @Override
           public void write(JsonWriter out, ListPretargetingConfigsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPretargetingConfigsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPretargetingConfigsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPretargetingConfigsResponse
   * @throws IOException if the JSON string is invalid with respect to ListPretargetingConfigsResponse
   */
  public static ListPretargetingConfigsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPretargetingConfigsResponse.class);
  }

  /**
   * Convert an instance of ListPretargetingConfigsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

