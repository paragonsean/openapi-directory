/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UrlDownloadSize;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Total download size and URL-level download size breakdown for resources in a creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownloadSizeEvidence {
  public static final String SERIALIZED_NAME_TOP_URL_DOWNLOAD_SIZE_BREAKDOWNS = "topUrlDownloadSizeBreakdowns";
  @SerializedName(SERIALIZED_NAME_TOP_URL_DOWNLOAD_SIZE_BREAKDOWNS)
  private List<UrlDownloadSize> topUrlDownloadSizeBreakdowns = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_DOWNLOAD_SIZE_KB = "totalDownloadSizeKb";
  @SerializedName(SERIALIZED_NAME_TOTAL_DOWNLOAD_SIZE_KB)
  private Integer totalDownloadSizeKb;

  public DownloadSizeEvidence() {
  }

  public DownloadSizeEvidence topUrlDownloadSizeBreakdowns(List<UrlDownloadSize> topUrlDownloadSizeBreakdowns) {
    this.topUrlDownloadSizeBreakdowns = topUrlDownloadSizeBreakdowns;
    return this;
  }

  public DownloadSizeEvidence addTopUrlDownloadSizeBreakdownsItem(UrlDownloadSize topUrlDownloadSizeBreakdownsItem) {
    if (this.topUrlDownloadSizeBreakdowns == null) {
      this.topUrlDownloadSizeBreakdowns = new ArrayList<>();
    }
    this.topUrlDownloadSizeBreakdowns.add(topUrlDownloadSizeBreakdownsItem);
    return this;
  }

  /**
   * Download size broken down by URLs with the top download size.
   * @return topUrlDownloadSizeBreakdowns
   */
  @javax.annotation.Nullable
  public List<UrlDownloadSize> getTopUrlDownloadSizeBreakdowns() {
    return topUrlDownloadSizeBreakdowns;
  }

  public void setTopUrlDownloadSizeBreakdowns(List<UrlDownloadSize> topUrlDownloadSizeBreakdowns) {
    this.topUrlDownloadSizeBreakdowns = topUrlDownloadSizeBreakdowns;
  }


  public DownloadSizeEvidence totalDownloadSizeKb(Integer totalDownloadSizeKb) {
    this.totalDownloadSizeKb = totalDownloadSizeKb;
    return this;
  }

  /**
   * Total download size (in kilobytes) for all the resources in the creative.
   * @return totalDownloadSizeKb
   */
  @javax.annotation.Nullable
  public Integer getTotalDownloadSizeKb() {
    return totalDownloadSizeKb;
  }

  public void setTotalDownloadSizeKb(Integer totalDownloadSizeKb) {
    this.totalDownloadSizeKb = totalDownloadSizeKb;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadSizeEvidence downloadSizeEvidence = (DownloadSizeEvidence) o;
    return Objects.equals(this.topUrlDownloadSizeBreakdowns, downloadSizeEvidence.topUrlDownloadSizeBreakdowns) &&
        Objects.equals(this.totalDownloadSizeKb, downloadSizeEvidence.totalDownloadSizeKb);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topUrlDownloadSizeBreakdowns, totalDownloadSizeKb);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadSizeEvidence {\n");
    sb.append("    topUrlDownloadSizeBreakdowns: ").append(toIndentedString(topUrlDownloadSizeBreakdowns)).append("\n");
    sb.append("    totalDownloadSizeKb: ").append(toIndentedString(totalDownloadSizeKb)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topUrlDownloadSizeBreakdowns");
    openapiFields.add("totalDownloadSizeKb");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadSizeEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownloadSizeEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadSizeEvidence is not found in the empty JSON string", DownloadSizeEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadSizeEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadSizeEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("topUrlDownloadSizeBreakdowns") != null && !jsonObj.get("topUrlDownloadSizeBreakdowns").isJsonNull()) {
        JsonArray jsonArraytopUrlDownloadSizeBreakdowns = jsonObj.getAsJsonArray("topUrlDownloadSizeBreakdowns");
        if (jsonArraytopUrlDownloadSizeBreakdowns != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topUrlDownloadSizeBreakdowns").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topUrlDownloadSizeBreakdowns` to be an array in the JSON string but got `%s`", jsonObj.get("topUrlDownloadSizeBreakdowns").toString()));
          }

          // validate the optional field `topUrlDownloadSizeBreakdowns` (array)
          for (int i = 0; i < jsonArraytopUrlDownloadSizeBreakdowns.size(); i++) {
            UrlDownloadSize.validateJsonElement(jsonArraytopUrlDownloadSizeBreakdowns.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadSizeEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadSizeEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadSizeEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadSizeEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadSizeEvidence>() {
           @Override
           public void write(JsonWriter out, DownloadSizeEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadSizeEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadSizeEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadSizeEvidence
   * @throws IOException if the JSON string is invalid with respect to DownloadSizeEvidence
   */
  public static DownloadSizeEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadSizeEvidence.class);
  }

  /**
   * Convert an instance of DownloadSizeEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

