/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PublisherConnection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response to a request for listing publisher connections.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListPublisherConnectionsResponse {
  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public static final String SERIALIZED_NAME_PUBLISHER_CONNECTIONS = "publisherConnections";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_CONNECTIONS)
  private List<PublisherConnection> publisherConnections = new ArrayList<>();

  public ListPublisherConnectionsResponse() {
  }

  public ListPublisherConnectionsResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * A token to retrieve the next page of results. Pass this value in the ListPublisherConnectionsRequest.pageToken field in the subsequent call to the &#x60;ListPublisherConnections&#x60; method to retrieve the next page of results.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }


  public ListPublisherConnectionsResponse publisherConnections(List<PublisherConnection> publisherConnections) {
    this.publisherConnections = publisherConnections;
    return this;
  }

  public ListPublisherConnectionsResponse addPublisherConnectionsItem(PublisherConnection publisherConnectionsItem) {
    if (this.publisherConnections == null) {
      this.publisherConnections = new ArrayList<>();
    }
    this.publisherConnections.add(publisherConnectionsItem);
    return this;
  }

  /**
   * The list of publisher connections.
   * @return publisherConnections
   */
  @javax.annotation.Nullable
  public List<PublisherConnection> getPublisherConnections() {
    return publisherConnections;
  }

  public void setPublisherConnections(List<PublisherConnection> publisherConnections) {
    this.publisherConnections = publisherConnections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListPublisherConnectionsResponse listPublisherConnectionsResponse = (ListPublisherConnectionsResponse) o;
    return Objects.equals(this.nextPageToken, listPublisherConnectionsResponse.nextPageToken) &&
        Objects.equals(this.publisherConnections, listPublisherConnectionsResponse.publisherConnections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(nextPageToken, publisherConnections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListPublisherConnectionsResponse {\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("    publisherConnections: ").append(toIndentedString(publisherConnections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("nextPageToken");
    openapiFields.add("publisherConnections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListPublisherConnectionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListPublisherConnectionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListPublisherConnectionsResponse is not found in the empty JSON string", ListPublisherConnectionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListPublisherConnectionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListPublisherConnectionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
      if (jsonObj.get("publisherConnections") != null && !jsonObj.get("publisherConnections").isJsonNull()) {
        JsonArray jsonArraypublisherConnections = jsonObj.getAsJsonArray("publisherConnections");
        if (jsonArraypublisherConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publisherConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publisherConnections` to be an array in the JSON string but got `%s`", jsonObj.get("publisherConnections").toString()));
          }

          // validate the optional field `publisherConnections` (array)
          for (int i = 0; i < jsonArraypublisherConnections.size(); i++) {
            PublisherConnection.validateJsonElement(jsonArraypublisherConnections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListPublisherConnectionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListPublisherConnectionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListPublisherConnectionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListPublisherConnectionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListPublisherConnectionsResponse>() {
           @Override
           public void write(JsonWriter out, ListPublisherConnectionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListPublisherConnectionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListPublisherConnectionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListPublisherConnectionsResponse
   * @throws IOException if the JSON string is invalid with respect to ListPublisherConnectionsResponse
   */
  public static ListPublisherConnectionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListPublisherConnectionsResponse.class);
  }

  /**
   * Convert an instance of ListPublisherConnectionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

