/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdTechnologyProviders;
import org.openapitools.client.model.AdvertiserAndBrand;
import org.openapitools.client.model.PolicyCompliance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Top level status and detected attributes of a creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreativeServingDecision {
  public static final String SERIALIZED_NAME_AD_TECHNOLOGY_PROVIDERS = "adTechnologyProviders";
  @SerializedName(SERIALIZED_NAME_AD_TECHNOLOGY_PROVIDERS)
  private AdTechnologyProviders adTechnologyProviders;

  public static final String SERIALIZED_NAME_CHINA_POLICY_COMPLIANCE = "chinaPolicyCompliance";
  @SerializedName(SERIALIZED_NAME_CHINA_POLICY_COMPLIANCE)
  private PolicyCompliance chinaPolicyCompliance;

  public static final String SERIALIZED_NAME_DEALS_POLICY_COMPLIANCE = "dealsPolicyCompliance";
  @SerializedName(SERIALIZED_NAME_DEALS_POLICY_COMPLIANCE)
  private PolicyCompliance dealsPolicyCompliance;

  public static final String SERIALIZED_NAME_DETECTED_ADVERTISERS = "detectedAdvertisers";
  @SerializedName(SERIALIZED_NAME_DETECTED_ADVERTISERS)
  private List<AdvertiserAndBrand> detectedAdvertisers = new ArrayList<>();

  /**
   * Gets or Sets detectedAttributes
   */
  @JsonAdapter(DetectedAttributesEnum.Adapter.class)
  public enum DetectedAttributesEnum {
    ATTRIBUTE_UNSPECIFIED("ATTRIBUTE_UNSPECIFIED"),
    
    IMAGE_RICH_MEDIA("IMAGE_RICH_MEDIA"),
    
    ADOBE_FLASH_FLV("ADOBE_FLASH_FLV"),
    
    IS_TAGGED("IS_TAGGED"),
    
    IS_COOKIE_TARGETED("IS_COOKIE_TARGETED"),
    
    IS_USER_INTEREST_TARGETED("IS_USER_INTEREST_TARGETED"),
    
    EXPANDING_DIRECTION_NONE("EXPANDING_DIRECTION_NONE"),
    
    EXPANDING_DIRECTION_UP("EXPANDING_DIRECTION_UP"),
    
    EXPANDING_DIRECTION_DOWN("EXPANDING_DIRECTION_DOWN"),
    
    EXPANDING_DIRECTION_LEFT("EXPANDING_DIRECTION_LEFT"),
    
    EXPANDING_DIRECTION_RIGHT("EXPANDING_DIRECTION_RIGHT"),
    
    EXPANDING_DIRECTION_UP_LEFT("EXPANDING_DIRECTION_UP_LEFT"),
    
    EXPANDING_DIRECTION_UP_RIGHT("EXPANDING_DIRECTION_UP_RIGHT"),
    
    EXPANDING_DIRECTION_DOWN_LEFT("EXPANDING_DIRECTION_DOWN_LEFT"),
    
    EXPANDING_DIRECTION_DOWN_RIGHT("EXPANDING_DIRECTION_DOWN_RIGHT"),
    
    CREATIVE_TYPE_HTML("CREATIVE_TYPE_HTML"),
    
    CREATIVE_TYPE_VAST_VIDEO("CREATIVE_TYPE_VAST_VIDEO"),
    
    EXPANDING_DIRECTION_UP_OR_DOWN("EXPANDING_DIRECTION_UP_OR_DOWN"),
    
    EXPANDING_DIRECTION_LEFT_OR_RIGHT("EXPANDING_DIRECTION_LEFT_OR_RIGHT"),
    
    EXPANDING_DIRECTION_ANY_DIAGONAL("EXPANDING_DIRECTION_ANY_DIAGONAL"),
    
    EXPANDING_ACTION_ROLLOVER_TO_EXPAND("EXPANDING_ACTION_ROLLOVER_TO_EXPAND"),
    
    INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH("INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH"),
    
    RICH_MEDIA_CAPABILITY_TYPE_MRAID("RICH_MEDIA_CAPABILITY_TYPE_MRAID"),
    
    RICH_MEDIA_CAPABILITY_TYPE_FLASH("RICH_MEDIA_CAPABILITY_TYPE_FLASH"),
    
    RICH_MEDIA_CAPABILITY_TYPE_HTML5("RICH_MEDIA_CAPABILITY_TYPE_HTML5"),
    
    SKIPPABLE_INSTREAM_VIDEO("SKIPPABLE_INSTREAM_VIDEO"),
    
    RICH_MEDIA_CAPABILITY_TYPE_SSL("RICH_MEDIA_CAPABILITY_TYPE_SSL"),
    
    RICH_MEDIA_CAPABILITY_TYPE_NON_SSL("RICH_MEDIA_CAPABILITY_TYPE_NON_SSL"),
    
    RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL("RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL"),
    
    NON_SKIPPABLE_INSTREAM_VIDEO("NON_SKIPPABLE_INSTREAM_VIDEO"),
    
    NATIVE_ELIGIBILITY_ELIGIBLE("NATIVE_ELIGIBILITY_ELIGIBLE"),
    
    NON_VPAID("NON_VPAID"),
    
    NATIVE_ELIGIBILITY_NOT_ELIGIBLE("NATIVE_ELIGIBILITY_NOT_ELIGIBLE"),
    
    ANY_INTERSTITIAL("ANY_INTERSTITIAL"),
    
    NON_INTERSTITIAL("NON_INTERSTITIAL"),
    
    IN_BANNER_VIDEO("IN_BANNER_VIDEO"),
    
    RENDERING_SIZELESS_ADX("RENDERING_SIZELESS_ADX"),
    
    OMSDK_1_0("OMSDK_1_0"),
    
    RENDERING_PLAYABLE("RENDERING_PLAYABLE");

    private String value;

    DetectedAttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DetectedAttributesEnum fromValue(String value) {
      for (DetectedAttributesEnum b : DetectedAttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DetectedAttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DetectedAttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DetectedAttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DetectedAttributesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DetectedAttributesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DETECTED_ATTRIBUTES = "detectedAttributes";
  @SerializedName(SERIALIZED_NAME_DETECTED_ATTRIBUTES)
  private List<DetectedAttributesEnum> detectedAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_CLICK_THROUGH_URLS = "detectedClickThroughUrls";
  @SerializedName(SERIALIZED_NAME_DETECTED_CLICK_THROUGH_URLS)
  private List<String> detectedClickThroughUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_DOMAINS = "detectedDomains";
  @SerializedName(SERIALIZED_NAME_DETECTED_DOMAINS)
  private List<String> detectedDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_LANGUAGES = "detectedLanguages";
  @SerializedName(SERIALIZED_NAME_DETECTED_LANGUAGES)
  private List<String> detectedLanguages = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_PRODUCT_CATEGORIES = "detectedProductCategories";
  @SerializedName(SERIALIZED_NAME_DETECTED_PRODUCT_CATEGORIES)
  private List<Integer> detectedProductCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_SENSITIVE_CATEGORIES = "detectedSensitiveCategories";
  @SerializedName(SERIALIZED_NAME_DETECTED_SENSITIVE_CATEGORIES)
  private List<Integer> detectedSensitiveCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DETECTED_VENDOR_IDS = "detectedVendorIds";
  @SerializedName(SERIALIZED_NAME_DETECTED_VENDOR_IDS)
  private List<Integer> detectedVendorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_STATUS_UPDATE = "lastStatusUpdate";
  @SerializedName(SERIALIZED_NAME_LAST_STATUS_UPDATE)
  private String lastStatusUpdate;

  public static final String SERIALIZED_NAME_NETWORK_POLICY_COMPLIANCE = "networkPolicyCompliance";
  @SerializedName(SERIALIZED_NAME_NETWORK_POLICY_COMPLIANCE)
  private PolicyCompliance networkPolicyCompliance;

  public static final String SERIALIZED_NAME_PLATFORM_POLICY_COMPLIANCE = "platformPolicyCompliance";
  @SerializedName(SERIALIZED_NAME_PLATFORM_POLICY_COMPLIANCE)
  private PolicyCompliance platformPolicyCompliance;

  public static final String SERIALIZED_NAME_RUSSIA_POLICY_COMPLIANCE = "russiaPolicyCompliance";
  @SerializedName(SERIALIZED_NAME_RUSSIA_POLICY_COMPLIANCE)
  private PolicyCompliance russiaPolicyCompliance;

  public CreativeServingDecision() {
  }

  public CreativeServingDecision adTechnologyProviders(AdTechnologyProviders adTechnologyProviders) {
    this.adTechnologyProviders = adTechnologyProviders;
    return this;
  }

  /**
   * Get adTechnologyProviders
   * @return adTechnologyProviders
   */
  @javax.annotation.Nullable
  public AdTechnologyProviders getAdTechnologyProviders() {
    return adTechnologyProviders;
  }

  public void setAdTechnologyProviders(AdTechnologyProviders adTechnologyProviders) {
    this.adTechnologyProviders = adTechnologyProviders;
  }


  public CreativeServingDecision chinaPolicyCompliance(PolicyCompliance chinaPolicyCompliance) {
    this.chinaPolicyCompliance = chinaPolicyCompliance;
    return this;
  }

  /**
   * Get chinaPolicyCompliance
   * @return chinaPolicyCompliance
   */
  @javax.annotation.Nullable
  public PolicyCompliance getChinaPolicyCompliance() {
    return chinaPolicyCompliance;
  }

  public void setChinaPolicyCompliance(PolicyCompliance chinaPolicyCompliance) {
    this.chinaPolicyCompliance = chinaPolicyCompliance;
  }


  public CreativeServingDecision dealsPolicyCompliance(PolicyCompliance dealsPolicyCompliance) {
    this.dealsPolicyCompliance = dealsPolicyCompliance;
    return this;
  }

  /**
   * Get dealsPolicyCompliance
   * @return dealsPolicyCompliance
   */
  @javax.annotation.Nullable
  public PolicyCompliance getDealsPolicyCompliance() {
    return dealsPolicyCompliance;
  }

  public void setDealsPolicyCompliance(PolicyCompliance dealsPolicyCompliance) {
    this.dealsPolicyCompliance = dealsPolicyCompliance;
  }


  public CreativeServingDecision detectedAdvertisers(List<AdvertiserAndBrand> detectedAdvertisers) {
    this.detectedAdvertisers = detectedAdvertisers;
    return this;
  }

  public CreativeServingDecision addDetectedAdvertisersItem(AdvertiserAndBrand detectedAdvertisersItem) {
    if (this.detectedAdvertisers == null) {
      this.detectedAdvertisers = new ArrayList<>();
    }
    this.detectedAdvertisers.add(detectedAdvertisersItem);
    return this;
  }

  /**
   * Detected advertisers and brands.
   * @return detectedAdvertisers
   */
  @javax.annotation.Nullable
  public List<AdvertiserAndBrand> getDetectedAdvertisers() {
    return detectedAdvertisers;
  }

  public void setDetectedAdvertisers(List<AdvertiserAndBrand> detectedAdvertisers) {
    this.detectedAdvertisers = detectedAdvertisers;
  }


  public CreativeServingDecision detectedAttributes(List<DetectedAttributesEnum> detectedAttributes) {
    this.detectedAttributes = detectedAttributes;
    return this;
  }

  public CreativeServingDecision addDetectedAttributesItem(DetectedAttributesEnum detectedAttributesItem) {
    if (this.detectedAttributes == null) {
      this.detectedAttributes = new ArrayList<>();
    }
    this.detectedAttributes.add(detectedAttributesItem);
    return this;
  }

  /**
   * Publisher-excludable attributes that were detected for this creative. Can be used to filter the response of the creatives.list method. If the &#x60;excluded_attribute&#x60; field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
   * @return detectedAttributes
   */
  @javax.annotation.Nullable
  public List<DetectedAttributesEnum> getDetectedAttributes() {
    return detectedAttributes;
  }

  public void setDetectedAttributes(List<DetectedAttributesEnum> detectedAttributes) {
    this.detectedAttributes = detectedAttributes;
  }


  public CreativeServingDecision detectedClickThroughUrls(List<String> detectedClickThroughUrls) {
    this.detectedClickThroughUrls = detectedClickThroughUrls;
    return this;
  }

  public CreativeServingDecision addDetectedClickThroughUrlsItem(String detectedClickThroughUrlsItem) {
    if (this.detectedClickThroughUrls == null) {
      this.detectedClickThroughUrls = new ArrayList<>();
    }
    this.detectedClickThroughUrls.add(detectedClickThroughUrlsItem);
    return this;
  }

  /**
   * The set of detected destination URLs for the creative. Can be used to filter the response of the creatives.list method.
   * @return detectedClickThroughUrls
   */
  @javax.annotation.Nullable
  public List<String> getDetectedClickThroughUrls() {
    return detectedClickThroughUrls;
  }

  public void setDetectedClickThroughUrls(List<String> detectedClickThroughUrls) {
    this.detectedClickThroughUrls = detectedClickThroughUrls;
  }


  public CreativeServingDecision detectedDomains(List<String> detectedDomains) {
    this.detectedDomains = detectedDomains;
    return this;
  }

  public CreativeServingDecision addDetectedDomainsItem(String detectedDomainsItem) {
    if (this.detectedDomains == null) {
      this.detectedDomains = new ArrayList<>();
    }
    this.detectedDomains.add(detectedDomainsItem);
    return this;
  }

  /**
   * The detected domains for this creative.
   * @return detectedDomains
   */
  @javax.annotation.Nullable
  public List<String> getDetectedDomains() {
    return detectedDomains;
  }

  public void setDetectedDomains(List<String> detectedDomains) {
    this.detectedDomains = detectedDomains;
  }


  public CreativeServingDecision detectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
    return this;
  }

  public CreativeServingDecision addDetectedLanguagesItem(String detectedLanguagesItem) {
    if (this.detectedLanguages == null) {
      this.detectedLanguages = new ArrayList<>();
    }
    this.detectedLanguages.add(detectedLanguagesItem);
    return this;
  }

  /**
   * The detected languages for this creative. The order is arbitrary. The codes are 2 or 5 characters and are documented at https://developers.google.com/adwords/api/docs/appendix/languagecodes. Can be used to filter the response of the creatives.list method.
   * @return detectedLanguages
   */
  @javax.annotation.Nullable
  public List<String> getDetectedLanguages() {
    return detectedLanguages;
  }

  public void setDetectedLanguages(List<String> detectedLanguages) {
    this.detectedLanguages = detectedLanguages;
  }


  public CreativeServingDecision detectedProductCategories(List<Integer> detectedProductCategories) {
    this.detectedProductCategories = detectedProductCategories;
    return this;
  }

  public CreativeServingDecision addDetectedProductCategoriesItem(Integer detectedProductCategoriesItem) {
    if (this.detectedProductCategories == null) {
      this.detectedProductCategories = new ArrayList<>();
    }
    this.detectedProductCategories.add(detectedProductCategoriesItem);
    return this;
  }

  /**
   * Detected product categories, if any. See the ad-product-categories.txt file in the technical documentation for a list of IDs. Can be used to filter the response of the creatives.list method.
   * @return detectedProductCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getDetectedProductCategories() {
    return detectedProductCategories;
  }

  public void setDetectedProductCategories(List<Integer> detectedProductCategories) {
    this.detectedProductCategories = detectedProductCategories;
  }


  public CreativeServingDecision detectedSensitiveCategories(List<Integer> detectedSensitiveCategories) {
    this.detectedSensitiveCategories = detectedSensitiveCategories;
    return this;
  }

  public CreativeServingDecision addDetectedSensitiveCategoriesItem(Integer detectedSensitiveCategoriesItem) {
    if (this.detectedSensitiveCategories == null) {
      this.detectedSensitiveCategories = new ArrayList<>();
    }
    this.detectedSensitiveCategories.add(detectedSensitiveCategoriesItem);
    return this;
  }

  /**
   * Detected sensitive categories, if any. Can be used to filter the response of the creatives.list method. See the ad-sensitive-categories.txt file in the technical documentation for a list of IDs. You should use these IDs along with the excluded-sensitive-category field in the bid request to filter your bids.
   * @return detectedSensitiveCategories
   */
  @javax.annotation.Nullable
  public List<Integer> getDetectedSensitiveCategories() {
    return detectedSensitiveCategories;
  }

  public void setDetectedSensitiveCategories(List<Integer> detectedSensitiveCategories) {
    this.detectedSensitiveCategories = detectedSensitiveCategories;
  }


  public CreativeServingDecision detectedVendorIds(List<Integer> detectedVendorIds) {
    this.detectedVendorIds = detectedVendorIds;
    return this;
  }

  public CreativeServingDecision addDetectedVendorIdsItem(Integer detectedVendorIdsItem) {
    if (this.detectedVendorIds == null) {
      this.detectedVendorIds = new ArrayList<>();
    }
    this.detectedVendorIds.add(detectedVendorIdsItem);
    return this;
  }

  /**
   * IDs of the ad technology vendors that were detected to be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method. If the &#x60;allowed_vendor_type&#x60; field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto) does not contain one of the vendor type IDs that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
   * @return detectedVendorIds
   */
  @javax.annotation.Nullable
  public List<Integer> getDetectedVendorIds() {
    return detectedVendorIds;
  }

  public void setDetectedVendorIds(List<Integer> detectedVendorIds) {
    this.detectedVendorIds = detectedVendorIds;
  }


  public CreativeServingDecision lastStatusUpdate(String lastStatusUpdate) {
    this.lastStatusUpdate = lastStatusUpdate;
    return this;
  }

  /**
   * The last time the creative status was updated. Can be used to filter the response of the creatives.list method.
   * @return lastStatusUpdate
   */
  @javax.annotation.Nullable
  public String getLastStatusUpdate() {
    return lastStatusUpdate;
  }

  public void setLastStatusUpdate(String lastStatusUpdate) {
    this.lastStatusUpdate = lastStatusUpdate;
  }


  public CreativeServingDecision networkPolicyCompliance(PolicyCompliance networkPolicyCompliance) {
    this.networkPolicyCompliance = networkPolicyCompliance;
    return this;
  }

  /**
   * Get networkPolicyCompliance
   * @return networkPolicyCompliance
   */
  @javax.annotation.Nullable
  public PolicyCompliance getNetworkPolicyCompliance() {
    return networkPolicyCompliance;
  }

  public void setNetworkPolicyCompliance(PolicyCompliance networkPolicyCompliance) {
    this.networkPolicyCompliance = networkPolicyCompliance;
  }


  public CreativeServingDecision platformPolicyCompliance(PolicyCompliance platformPolicyCompliance) {
    this.platformPolicyCompliance = platformPolicyCompliance;
    return this;
  }

  /**
   * Get platformPolicyCompliance
   * @return platformPolicyCompliance
   */
  @javax.annotation.Nullable
  public PolicyCompliance getPlatformPolicyCompliance() {
    return platformPolicyCompliance;
  }

  public void setPlatformPolicyCompliance(PolicyCompliance platformPolicyCompliance) {
    this.platformPolicyCompliance = platformPolicyCompliance;
  }


  public CreativeServingDecision russiaPolicyCompliance(PolicyCompliance russiaPolicyCompliance) {
    this.russiaPolicyCompliance = russiaPolicyCompliance;
    return this;
  }

  /**
   * Get russiaPolicyCompliance
   * @return russiaPolicyCompliance
   */
  @javax.annotation.Nullable
  public PolicyCompliance getRussiaPolicyCompliance() {
    return russiaPolicyCompliance;
  }

  public void setRussiaPolicyCompliance(PolicyCompliance russiaPolicyCompliance) {
    this.russiaPolicyCompliance = russiaPolicyCompliance;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreativeServingDecision creativeServingDecision = (CreativeServingDecision) o;
    return Objects.equals(this.adTechnologyProviders, creativeServingDecision.adTechnologyProviders) &&
        Objects.equals(this.chinaPolicyCompliance, creativeServingDecision.chinaPolicyCompliance) &&
        Objects.equals(this.dealsPolicyCompliance, creativeServingDecision.dealsPolicyCompliance) &&
        Objects.equals(this.detectedAdvertisers, creativeServingDecision.detectedAdvertisers) &&
        Objects.equals(this.detectedAttributes, creativeServingDecision.detectedAttributes) &&
        Objects.equals(this.detectedClickThroughUrls, creativeServingDecision.detectedClickThroughUrls) &&
        Objects.equals(this.detectedDomains, creativeServingDecision.detectedDomains) &&
        Objects.equals(this.detectedLanguages, creativeServingDecision.detectedLanguages) &&
        Objects.equals(this.detectedProductCategories, creativeServingDecision.detectedProductCategories) &&
        Objects.equals(this.detectedSensitiveCategories, creativeServingDecision.detectedSensitiveCategories) &&
        Objects.equals(this.detectedVendorIds, creativeServingDecision.detectedVendorIds) &&
        Objects.equals(this.lastStatusUpdate, creativeServingDecision.lastStatusUpdate) &&
        Objects.equals(this.networkPolicyCompliance, creativeServingDecision.networkPolicyCompliance) &&
        Objects.equals(this.platformPolicyCompliance, creativeServingDecision.platformPolicyCompliance) &&
        Objects.equals(this.russiaPolicyCompliance, creativeServingDecision.russiaPolicyCompliance);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adTechnologyProviders, chinaPolicyCompliance, dealsPolicyCompliance, detectedAdvertisers, detectedAttributes, detectedClickThroughUrls, detectedDomains, detectedLanguages, detectedProductCategories, detectedSensitiveCategories, detectedVendorIds, lastStatusUpdate, networkPolicyCompliance, platformPolicyCompliance, russiaPolicyCompliance);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreativeServingDecision {\n");
    sb.append("    adTechnologyProviders: ").append(toIndentedString(adTechnologyProviders)).append("\n");
    sb.append("    chinaPolicyCompliance: ").append(toIndentedString(chinaPolicyCompliance)).append("\n");
    sb.append("    dealsPolicyCompliance: ").append(toIndentedString(dealsPolicyCompliance)).append("\n");
    sb.append("    detectedAdvertisers: ").append(toIndentedString(detectedAdvertisers)).append("\n");
    sb.append("    detectedAttributes: ").append(toIndentedString(detectedAttributes)).append("\n");
    sb.append("    detectedClickThroughUrls: ").append(toIndentedString(detectedClickThroughUrls)).append("\n");
    sb.append("    detectedDomains: ").append(toIndentedString(detectedDomains)).append("\n");
    sb.append("    detectedLanguages: ").append(toIndentedString(detectedLanguages)).append("\n");
    sb.append("    detectedProductCategories: ").append(toIndentedString(detectedProductCategories)).append("\n");
    sb.append("    detectedSensitiveCategories: ").append(toIndentedString(detectedSensitiveCategories)).append("\n");
    sb.append("    detectedVendorIds: ").append(toIndentedString(detectedVendorIds)).append("\n");
    sb.append("    lastStatusUpdate: ").append(toIndentedString(lastStatusUpdate)).append("\n");
    sb.append("    networkPolicyCompliance: ").append(toIndentedString(networkPolicyCompliance)).append("\n");
    sb.append("    platformPolicyCompliance: ").append(toIndentedString(platformPolicyCompliance)).append("\n");
    sb.append("    russiaPolicyCompliance: ").append(toIndentedString(russiaPolicyCompliance)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adTechnologyProviders");
    openapiFields.add("chinaPolicyCompliance");
    openapiFields.add("dealsPolicyCompliance");
    openapiFields.add("detectedAdvertisers");
    openapiFields.add("detectedAttributes");
    openapiFields.add("detectedClickThroughUrls");
    openapiFields.add("detectedDomains");
    openapiFields.add("detectedLanguages");
    openapiFields.add("detectedProductCategories");
    openapiFields.add("detectedSensitiveCategories");
    openapiFields.add("detectedVendorIds");
    openapiFields.add("lastStatusUpdate");
    openapiFields.add("networkPolicyCompliance");
    openapiFields.add("platformPolicyCompliance");
    openapiFields.add("russiaPolicyCompliance");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreativeServingDecision
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreativeServingDecision.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreativeServingDecision is not found in the empty JSON string", CreativeServingDecision.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreativeServingDecision.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreativeServingDecision` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `adTechnologyProviders`
      if (jsonObj.get("adTechnologyProviders") != null && !jsonObj.get("adTechnologyProviders").isJsonNull()) {
        AdTechnologyProviders.validateJsonElement(jsonObj.get("adTechnologyProviders"));
      }
      // validate the optional field `chinaPolicyCompliance`
      if (jsonObj.get("chinaPolicyCompliance") != null && !jsonObj.get("chinaPolicyCompliance").isJsonNull()) {
        PolicyCompliance.validateJsonElement(jsonObj.get("chinaPolicyCompliance"));
      }
      // validate the optional field `dealsPolicyCompliance`
      if (jsonObj.get("dealsPolicyCompliance") != null && !jsonObj.get("dealsPolicyCompliance").isJsonNull()) {
        PolicyCompliance.validateJsonElement(jsonObj.get("dealsPolicyCompliance"));
      }
      if (jsonObj.get("detectedAdvertisers") != null && !jsonObj.get("detectedAdvertisers").isJsonNull()) {
        JsonArray jsonArraydetectedAdvertisers = jsonObj.getAsJsonArray("detectedAdvertisers");
        if (jsonArraydetectedAdvertisers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("detectedAdvertisers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `detectedAdvertisers` to be an array in the JSON string but got `%s`", jsonObj.get("detectedAdvertisers").toString()));
          }

          // validate the optional field `detectedAdvertisers` (array)
          for (int i = 0; i < jsonArraydetectedAdvertisers.size(); i++) {
            AdvertiserAndBrand.validateJsonElement(jsonArraydetectedAdvertisers.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedAttributes") != null && !jsonObj.get("detectedAttributes").isJsonNull() && !jsonObj.get("detectedAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("detectedAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedClickThroughUrls") != null && !jsonObj.get("detectedClickThroughUrls").isJsonNull() && !jsonObj.get("detectedClickThroughUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedClickThroughUrls` to be an array in the JSON string but got `%s`", jsonObj.get("detectedClickThroughUrls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedDomains") != null && !jsonObj.get("detectedDomains").isJsonNull() && !jsonObj.get("detectedDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedDomains` to be an array in the JSON string but got `%s`", jsonObj.get("detectedDomains").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedLanguages") != null && !jsonObj.get("detectedLanguages").isJsonNull() && !jsonObj.get("detectedLanguages").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedLanguages` to be an array in the JSON string but got `%s`", jsonObj.get("detectedLanguages").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedProductCategories") != null && !jsonObj.get("detectedProductCategories").isJsonNull() && !jsonObj.get("detectedProductCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedProductCategories` to be an array in the JSON string but got `%s`", jsonObj.get("detectedProductCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedSensitiveCategories") != null && !jsonObj.get("detectedSensitiveCategories").isJsonNull() && !jsonObj.get("detectedSensitiveCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedSensitiveCategories` to be an array in the JSON string but got `%s`", jsonObj.get("detectedSensitiveCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detectedVendorIds") != null && !jsonObj.get("detectedVendorIds").isJsonNull() && !jsonObj.get("detectedVendorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detectedVendorIds` to be an array in the JSON string but got `%s`", jsonObj.get("detectedVendorIds").toString()));
      }
      if ((jsonObj.get("lastStatusUpdate") != null && !jsonObj.get("lastStatusUpdate").isJsonNull()) && !jsonObj.get("lastStatusUpdate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastStatusUpdate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastStatusUpdate").toString()));
      }
      // validate the optional field `networkPolicyCompliance`
      if (jsonObj.get("networkPolicyCompliance") != null && !jsonObj.get("networkPolicyCompliance").isJsonNull()) {
        PolicyCompliance.validateJsonElement(jsonObj.get("networkPolicyCompliance"));
      }
      // validate the optional field `platformPolicyCompliance`
      if (jsonObj.get("platformPolicyCompliance") != null && !jsonObj.get("platformPolicyCompliance").isJsonNull()) {
        PolicyCompliance.validateJsonElement(jsonObj.get("platformPolicyCompliance"));
      }
      // validate the optional field `russiaPolicyCompliance`
      if (jsonObj.get("russiaPolicyCompliance") != null && !jsonObj.get("russiaPolicyCompliance").isJsonNull()) {
        PolicyCompliance.validateJsonElement(jsonObj.get("russiaPolicyCompliance"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreativeServingDecision.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreativeServingDecision' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreativeServingDecision> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreativeServingDecision.class));

       return (TypeAdapter<T>) new TypeAdapter<CreativeServingDecision>() {
           @Override
           public void write(JsonWriter out, CreativeServingDecision value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreativeServingDecision read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreativeServingDecision given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreativeServingDecision
   * @throws IOException if the JSON string is invalid with respect to CreativeServingDecision
   */
  public static CreativeServingDecision fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreativeServingDecision.class);
  }

  /**
   * Convert an instance of CreativeServingDecision to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

