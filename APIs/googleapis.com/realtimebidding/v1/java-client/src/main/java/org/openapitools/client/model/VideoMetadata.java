/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MediaFile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Video metadata for a creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoMetadata {
  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private String duration;

  public static final String SERIALIZED_NAME_IS_VALID_VAST = "isValidVast";
  @SerializedName(SERIALIZED_NAME_IS_VALID_VAST)
  private Boolean isValidVast;

  public static final String SERIALIZED_NAME_IS_VPAID = "isVpaid";
  @SerializedName(SERIALIZED_NAME_IS_VPAID)
  private Boolean isVpaid;

  public static final String SERIALIZED_NAME_MEDIA_FILES = "mediaFiles";
  @SerializedName(SERIALIZED_NAME_MEDIA_FILES)
  private List<MediaFile> mediaFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SKIP_OFFSET = "skipOffset";
  @SerializedName(SERIALIZED_NAME_SKIP_OFFSET)
  private String skipOffset;

  /**
   * The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method.
   */
  @JsonAdapter(VastVersionEnum.Adapter.class)
  public enum VastVersionEnum {
    UNSPECIFIED("VAST_VERSION_UNSPECIFIED"),
    
    _1_0("VAST_VERSION_1_0"),
    
    _2_0("VAST_VERSION_2_0"),
    
    _3_0("VAST_VERSION_3_0"),
    
    _4_0("VAST_VERSION_4_0");

    private String value;

    VastVersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VastVersionEnum fromValue(String value) {
      for (VastVersionEnum b : VastVersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VastVersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VastVersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VastVersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VastVersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VastVersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VAST_VERSION = "vastVersion";
  @SerializedName(SERIALIZED_NAME_VAST_VERSION)
  private VastVersionEnum vastVersion;

  public VideoMetadata() {
  }

  public VideoMetadata duration(String duration) {
    this.duration = duration;
    return this;
  }

  /**
   * The duration of the ad. Can be used to filter the response of the creatives.list method.
   * @return duration
   */
  @javax.annotation.Nullable
  public String getDuration() {
    return duration;
  }

  public void setDuration(String duration) {
    this.duration = duration;
  }


  public VideoMetadata isValidVast(Boolean isValidVast) {
    this.isValidVast = isValidVast;
    return this;
  }

  /**
   * Is this a valid VAST ad? Can be used to filter the response of the creatives.list method.
   * @return isValidVast
   */
  @javax.annotation.Nullable
  public Boolean getIsValidVast() {
    return isValidVast;
  }

  public void setIsValidVast(Boolean isValidVast) {
    this.isValidVast = isValidVast;
  }


  public VideoMetadata isVpaid(Boolean isVpaid) {
    this.isVpaid = isVpaid;
    return this;
  }

  /**
   * Is this a VPAID ad? Can be used to filter the response of the creatives.list method.
   * @return isVpaid
   */
  @javax.annotation.Nullable
  public Boolean getIsVpaid() {
    return isVpaid;
  }

  public void setIsVpaid(Boolean isVpaid) {
    this.isVpaid = isVpaid;
  }


  public VideoMetadata mediaFiles(List<MediaFile> mediaFiles) {
    this.mediaFiles = mediaFiles;
    return this;
  }

  public VideoMetadata addMediaFilesItem(MediaFile mediaFilesItem) {
    if (this.mediaFiles == null) {
      this.mediaFiles = new ArrayList<>();
    }
    this.mediaFiles.add(mediaFilesItem);
    return this;
  }

  /**
   * The list of all media files declared in the VAST. If there are multiple VASTs in a wrapper chain, this includes the media files from the deepest one in the chain.
   * @return mediaFiles
   */
  @javax.annotation.Nullable
  public List<MediaFile> getMediaFiles() {
    return mediaFiles;
  }

  public void setMediaFiles(List<MediaFile> mediaFiles) {
    this.mediaFiles = mediaFiles;
  }


  public VideoMetadata skipOffset(String skipOffset) {
    this.skipOffset = skipOffset;
    return this;
  }

  /**
   * The minimum duration that the user has to watch before being able to skip this ad. If the field is not set, the ad is not skippable. If the field is set, the ad is skippable. Can be used to filter the response of the creatives.list method.
   * @return skipOffset
   */
  @javax.annotation.Nullable
  public String getSkipOffset() {
    return skipOffset;
  }

  public void setSkipOffset(String skipOffset) {
    this.skipOffset = skipOffset;
  }


  public VideoMetadata vastVersion(VastVersionEnum vastVersion) {
    this.vastVersion = vastVersion;
    return this;
  }

  /**
   * The maximum VAST version across all wrapped VAST documents. Can be used to filter the response of the creatives.list method.
   * @return vastVersion
   */
  @javax.annotation.Nullable
  public VastVersionEnum getVastVersion() {
    return vastVersion;
  }

  public void setVastVersion(VastVersionEnum vastVersion) {
    this.vastVersion = vastVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoMetadata videoMetadata = (VideoMetadata) o;
    return Objects.equals(this.duration, videoMetadata.duration) &&
        Objects.equals(this.isValidVast, videoMetadata.isValidVast) &&
        Objects.equals(this.isVpaid, videoMetadata.isVpaid) &&
        Objects.equals(this.mediaFiles, videoMetadata.mediaFiles) &&
        Objects.equals(this.skipOffset, videoMetadata.skipOffset) &&
        Objects.equals(this.vastVersion, videoMetadata.vastVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(duration, isValidVast, isVpaid, mediaFiles, skipOffset, vastVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoMetadata {\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    isValidVast: ").append(toIndentedString(isValidVast)).append("\n");
    sb.append("    isVpaid: ").append(toIndentedString(isVpaid)).append("\n");
    sb.append("    mediaFiles: ").append(toIndentedString(mediaFiles)).append("\n");
    sb.append("    skipOffset: ").append(toIndentedString(skipOffset)).append("\n");
    sb.append("    vastVersion: ").append(toIndentedString(vastVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("duration");
    openapiFields.add("isValidVast");
    openapiFields.add("isVpaid");
    openapiFields.add("mediaFiles");
    openapiFields.add("skipOffset");
    openapiFields.add("vastVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoMetadata is not found in the empty JSON string", VideoMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("duration") != null && !jsonObj.get("duration").isJsonNull()) && !jsonObj.get("duration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duration").toString()));
      }
      if (jsonObj.get("mediaFiles") != null && !jsonObj.get("mediaFiles").isJsonNull()) {
        JsonArray jsonArraymediaFiles = jsonObj.getAsJsonArray("mediaFiles");
        if (jsonArraymediaFiles != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mediaFiles").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mediaFiles` to be an array in the JSON string but got `%s`", jsonObj.get("mediaFiles").toString()));
          }

          // validate the optional field `mediaFiles` (array)
          for (int i = 0; i < jsonArraymediaFiles.size(); i++) {
            MediaFile.validateJsonElement(jsonArraymediaFiles.get(i));
          };
        }
      }
      if ((jsonObj.get("skipOffset") != null && !jsonObj.get("skipOffset").isJsonNull()) && !jsonObj.get("skipOffset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skipOffset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skipOffset").toString()));
      }
      if ((jsonObj.get("vastVersion") != null && !jsonObj.get("vastVersion").isJsonNull()) && !jsonObj.get("vastVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vastVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vastVersion").toString()));
      }
      // validate the optional field `vastVersion`
      if (jsonObj.get("vastVersion") != null && !jsonObj.get("vastVersion").isJsonNull()) {
        VastVersionEnum.validateJsonElement(jsonObj.get("vastVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoMetadata>() {
           @Override
           public void write(JsonWriter out, VideoMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoMetadata
   * @throws IOException if the JSON string is invalid with respect to VideoMetadata
   */
  public static VideoMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoMetadata.class);
  }

  /**
   * Convert an instance of VideoMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

