/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Generic targeting with string values used in app, website and publisher targeting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StringTargetingDimension {
  /**
   * How the items in this list should be targeted.
   */
  @JsonAdapter(TargetingModeEnum.Adapter.class)
  public enum TargetingModeEnum {
    TARGETING_MODE_UNSPECIFIED("TARGETING_MODE_UNSPECIFIED"),
    
    INCLUSIVE("INCLUSIVE"),
    
    EXCLUSIVE("EXCLUSIVE");

    private String value;

    TargetingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetingModeEnum fromValue(String value) {
      for (TargetingModeEnum b : TargetingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGETING_MODE = "targetingMode";
  @SerializedName(SERIALIZED_NAME_TARGETING_MODE)
  private TargetingModeEnum targetingMode;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  private List<String> values = new ArrayList<>();

  public StringTargetingDimension() {
  }

  public StringTargetingDimension targetingMode(TargetingModeEnum targetingMode) {
    this.targetingMode = targetingMode;
    return this;
  }

  /**
   * How the items in this list should be targeted.
   * @return targetingMode
   */
  @javax.annotation.Nullable
  public TargetingModeEnum getTargetingMode() {
    return targetingMode;
  }

  public void setTargetingMode(TargetingModeEnum targetingMode) {
    this.targetingMode = targetingMode;
  }


  public StringTargetingDimension values(List<String> values) {
    this.values = values;
    return this;
  }

  public StringTargetingDimension addValuesItem(String valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * The values specified.
   * @return values
   */
  @javax.annotation.Nullable
  public List<String> getValues() {
    return values;
  }

  public void setValues(List<String> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StringTargetingDimension stringTargetingDimension = (StringTargetingDimension) o;
    return Objects.equals(this.targetingMode, stringTargetingDimension.targetingMode) &&
        Objects.equals(this.values, stringTargetingDimension.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(targetingMode, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StringTargetingDimension {\n");
    sb.append("    targetingMode: ").append(toIndentedString(targetingMode)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("targetingMode");
    openapiFields.add("values");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StringTargetingDimension
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StringTargetingDimension.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StringTargetingDimension is not found in the empty JSON string", StringTargetingDimension.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StringTargetingDimension.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StringTargetingDimension` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("targetingMode") != null && !jsonObj.get("targetingMode").isJsonNull()) && !jsonObj.get("targetingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingMode").toString()));
      }
      // validate the optional field `targetingMode`
      if (jsonObj.get("targetingMode") != null && !jsonObj.get("targetingMode").isJsonNull()) {
        TargetingModeEnum.validateJsonElement(jsonObj.get("targetingMode"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull() && !jsonObj.get("values").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StringTargetingDimension.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StringTargetingDimension' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StringTargetingDimension> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StringTargetingDimension.class));

       return (TypeAdapter<T>) new TypeAdapter<StringTargetingDimension>() {
           @Override
           public void write(JsonWriter out, StringTargetingDimension value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StringTargetingDimension read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StringTargetingDimension given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StringTargetingDimension
   * @throws IOException if the JSON string is invalid with respect to StringTargetingDimension
   */
  public static StringTargetingDimension fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StringTargetingDimension.class);
  }

  /**
   * Convert an instance of StringTargetingDimension to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

