/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bidder settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Bidder {
  public static final String SERIALIZED_NAME_BYPASS_NONGUARANTEED_DEALS_PRETARGETING = "bypassNonguaranteedDealsPretargeting";
  @SerializedName(SERIALIZED_NAME_BYPASS_NONGUARANTEED_DEALS_PRETARGETING)
  private Boolean bypassNonguaranteedDealsPretargeting;

  public static final String SERIALIZED_NAME_COOKIE_MATCHING_NETWORK_ID = "cookieMatchingNetworkId";
  @SerializedName(SERIALIZED_NAME_COOKIE_MATCHING_NETWORK_ID)
  private String cookieMatchingNetworkId;

  public static final String SERIALIZED_NAME_COOKIE_MATCHING_URL = "cookieMatchingUrl";
  @SerializedName(SERIALIZED_NAME_COOKIE_MATCHING_URL)
  private String cookieMatchingUrl;

  public static final String SERIALIZED_NAME_DEALS_BILLING_ID = "dealsBillingId";
  @SerializedName(SERIALIZED_NAME_DEALS_BILLING_ID)
  private String dealsBillingId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Bidder() {
  }

  public Bidder(
     Boolean bypassNonguaranteedDealsPretargeting, 
     String cookieMatchingNetworkId, 
     String cookieMatchingUrl, 
     String dealsBillingId, 
     String name
  ) {
    this();
    this.bypassNonguaranteedDealsPretargeting = bypassNonguaranteedDealsPretargeting;
    this.cookieMatchingNetworkId = cookieMatchingNetworkId;
    this.cookieMatchingUrl = cookieMatchingUrl;
    this.dealsBillingId = dealsBillingId;
    this.name = name;
  }

  /**
   * Output only. An option to bypass pretargeting for private auctions and preferred deals. When true, bid requests from these nonguaranteed deals will always be sent. When false, bid requests will be subject to regular pretargeting configurations. Programmatic Guaranteed deals will always be sent to the bidder, regardless of the value for this flag. Auction packages are not impacted by this value and are subject to the regular pretargeting configurations.
   * @return bypassNonguaranteedDealsPretargeting
   */
  @javax.annotation.Nullable
  public Boolean getBypassNonguaranteedDealsPretargeting() {
    return bypassNonguaranteedDealsPretargeting;
  }



  /**
   * Output only. The buyer&#39;s network ID used for cookie matching. This ID corresponds to the &#x60;google_nid&#x60; parameter in the URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.
   * @return cookieMatchingNetworkId
   */
  @javax.annotation.Nullable
  public String getCookieMatchingNetworkId() {
    return cookieMatchingNetworkId;
  }



  /**
   * Output only. The base URL used in cookie match requests. Refer to https://developers.google.com/authorized-buyers/rtb/cookie-guide for further information.
   * @return cookieMatchingUrl
   */
  @javax.annotation.Nullable
  public String getCookieMatchingUrl() {
    return cookieMatchingUrl;
  }



  /**
   * Output only. The billing ID for the deals pretargeting config. This billing ID is sent on the bid request for guaranteed and nonguaranteed deals matched in pretargeting.
   * @return dealsBillingId
   */
  @javax.annotation.Nullable
  public String getDealsBillingId() {
    return dealsBillingId;
  }



  /**
   * Output only. Name of the bidder resource that must follow the pattern &#x60;bidders/{bidderAccountId}&#x60;, where &#x60;{bidderAccountId}&#x60; is the account ID of the bidder whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Bidder bidder = (Bidder) o;
    return Objects.equals(this.bypassNonguaranteedDealsPretargeting, bidder.bypassNonguaranteedDealsPretargeting) &&
        Objects.equals(this.cookieMatchingNetworkId, bidder.cookieMatchingNetworkId) &&
        Objects.equals(this.cookieMatchingUrl, bidder.cookieMatchingUrl) &&
        Objects.equals(this.dealsBillingId, bidder.dealsBillingId) &&
        Objects.equals(this.name, bidder.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bypassNonguaranteedDealsPretargeting, cookieMatchingNetworkId, cookieMatchingUrl, dealsBillingId, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Bidder {\n");
    sb.append("    bypassNonguaranteedDealsPretargeting: ").append(toIndentedString(bypassNonguaranteedDealsPretargeting)).append("\n");
    sb.append("    cookieMatchingNetworkId: ").append(toIndentedString(cookieMatchingNetworkId)).append("\n");
    sb.append("    cookieMatchingUrl: ").append(toIndentedString(cookieMatchingUrl)).append("\n");
    sb.append("    dealsBillingId: ").append(toIndentedString(dealsBillingId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bypassNonguaranteedDealsPretargeting");
    openapiFields.add("cookieMatchingNetworkId");
    openapiFields.add("cookieMatchingUrl");
    openapiFields.add("dealsBillingId");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Bidder
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Bidder.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Bidder is not found in the empty JSON string", Bidder.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Bidder.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Bidder` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cookieMatchingNetworkId") != null && !jsonObj.get("cookieMatchingNetworkId").isJsonNull()) && !jsonObj.get("cookieMatchingNetworkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieMatchingNetworkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieMatchingNetworkId").toString()));
      }
      if ((jsonObj.get("cookieMatchingUrl") != null && !jsonObj.get("cookieMatchingUrl").isJsonNull()) && !jsonObj.get("cookieMatchingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieMatchingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cookieMatchingUrl").toString()));
      }
      if ((jsonObj.get("dealsBillingId") != null && !jsonObj.get("dealsBillingId").isJsonNull()) && !jsonObj.get("dealsBillingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealsBillingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dealsBillingId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Bidder.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Bidder' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Bidder> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Bidder.class));

       return (TypeAdapter<T>) new TypeAdapter<Bidder>() {
           @Override
           public void write(JsonWriter out, Bidder value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Bidder read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Bidder given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Bidder
   * @throws IOException if the JSON string is invalid with respect to Bidder
   */
  public static Bidder fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Bidder.class);
  }

  /**
   * Convert an instance of Bidder to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

