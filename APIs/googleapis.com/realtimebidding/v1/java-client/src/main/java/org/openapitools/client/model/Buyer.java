/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RTB Buyer account information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Buyer {
  public static final String SERIALIZED_NAME_ACTIVE_CREATIVE_COUNT = "activeCreativeCount";
  @SerializedName(SERIALIZED_NAME_ACTIVE_CREATIVE_COUNT)
  private String activeCreativeCount;

  public static final String SERIALIZED_NAME_BIDDER = "bidder";
  @SerializedName(SERIALIZED_NAME_BIDDER)
  private String bidder;

  public static final String SERIALIZED_NAME_BILLING_IDS = "billingIds";
  @SerializedName(SERIALIZED_NAME_BILLING_IDS)
  private List<String> billingIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_MAXIMUM_ACTIVE_CREATIVE_COUNT = "maximumActiveCreativeCount";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ACTIVE_CREATIVE_COUNT)
  private String maximumActiveCreativeCount;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public Buyer() {
  }

  public Buyer(
     String activeCreativeCount, 
     String bidder, 
     List<String> billingIds, 
     String displayName, 
     String maximumActiveCreativeCount, 
     String name
  ) {
    this();
    this.activeCreativeCount = activeCreativeCount;
    this.bidder = bidder;
    this.billingIds = billingIds;
    this.displayName = displayName;
    this.maximumActiveCreativeCount = maximumActiveCreativeCount;
    this.name = name;
  }

  /**
   * Output only. The number of creatives that this buyer submitted through the API or bid with in the last 30 days. This is counted against the maximum number of active creatives.
   * @return activeCreativeCount
   */
  @javax.annotation.Nullable
  public String getActiveCreativeCount() {
    return activeCreativeCount;
  }



  /**
   * Output only. The name of the bidder resource that is responsible for receiving bidding traffic for this account. The bidder name must follow the pattern &#x60;bidders/{bidderAccountId}&#x60;, where &#x60;{bidderAccountId}&#x60; is the account ID of the bidder receiving traffic for this buyer.
   * @return bidder
   */
  @javax.annotation.Nullable
  public String getBidder() {
    return bidder;
  }



  /**
   * Output only. A list of billing IDs associated with this account. These IDs appear on: 1. A bid request, to signal which buyers are eligible to bid on a given opportunity, and which pretargeting configurations were matched for each eligible buyer. 2. The bid response, to attribute a winning impression to a specific account for billing, reporting, policy and publisher block enforcement.
   * @return billingIds
   */
  @javax.annotation.Nullable
  public List<String> getBillingIds() {
    return billingIds;
  }



  /**
   * Output only. The diplay name associated with this buyer account, as visible to sellers.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. The maximum number of active creatives that this buyer can have.
   * @return maximumActiveCreativeCount
   */
  @javax.annotation.Nullable
  public String getMaximumActiveCreativeCount() {
    return maximumActiveCreativeCount;
  }



  /**
   * Output only. Name of the buyer resource that must follow the pattern &#x60;buyers/{buyerAccountId}&#x60;, where &#x60;{buyerAccountId}&#x60; is the account ID of the buyer account whose information is to be received. One can get their account ID on the Authorized Buyers or Open Bidding UI, or by contacting their Google account manager.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Buyer buyer = (Buyer) o;
    return Objects.equals(this.activeCreativeCount, buyer.activeCreativeCount) &&
        Objects.equals(this.bidder, buyer.bidder) &&
        Objects.equals(this.billingIds, buyer.billingIds) &&
        Objects.equals(this.displayName, buyer.displayName) &&
        Objects.equals(this.maximumActiveCreativeCount, buyer.maximumActiveCreativeCount) &&
        Objects.equals(this.name, buyer.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activeCreativeCount, bidder, billingIds, displayName, maximumActiveCreativeCount, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Buyer {\n");
    sb.append("    activeCreativeCount: ").append(toIndentedString(activeCreativeCount)).append("\n");
    sb.append("    bidder: ").append(toIndentedString(bidder)).append("\n");
    sb.append("    billingIds: ").append(toIndentedString(billingIds)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    maximumActiveCreativeCount: ").append(toIndentedString(maximumActiveCreativeCount)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activeCreativeCount");
    openapiFields.add("bidder");
    openapiFields.add("billingIds");
    openapiFields.add("displayName");
    openapiFields.add("maximumActiveCreativeCount");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Buyer
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Buyer.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Buyer is not found in the empty JSON string", Buyer.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Buyer.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Buyer` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("activeCreativeCount") != null && !jsonObj.get("activeCreativeCount").isJsonNull()) && !jsonObj.get("activeCreativeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activeCreativeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activeCreativeCount").toString()));
      }
      if ((jsonObj.get("bidder") != null && !jsonObj.get("bidder").isJsonNull()) && !jsonObj.get("bidder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidder").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("billingIds") != null && !jsonObj.get("billingIds").isJsonNull() && !jsonObj.get("billingIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingIds` to be an array in the JSON string but got `%s`", jsonObj.get("billingIds").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("maximumActiveCreativeCount") != null && !jsonObj.get("maximumActiveCreativeCount").isJsonNull()) && !jsonObj.get("maximumActiveCreativeCount").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumActiveCreativeCount` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumActiveCreativeCount").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Buyer.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Buyer' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Buyer> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Buyer.class));

       return (TypeAdapter<T>) new TypeAdapter<Buyer>() {
           @Override
           public void write(JsonWriter out, Buyer value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Buyer read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Buyer given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Buyer
   * @throws IOException if the JSON string is invalid with respect to Buyer
   */
  public static Buyer fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Buyer.class);
  }

  /**
   * Convert an instance of Buyer to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

