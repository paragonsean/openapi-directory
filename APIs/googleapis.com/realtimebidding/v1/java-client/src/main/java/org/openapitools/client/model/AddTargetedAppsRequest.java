/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A request to start targeting the provided app IDs in a specific pretargeting configuration. The pretargeting configuration itself specifies how these apps are targeted. in PretargetingConfig.appTargeting.mobileAppTargeting.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AddTargetedAppsRequest {
  public static final String SERIALIZED_NAME_APP_IDS = "appIds";
  @SerializedName(SERIALIZED_NAME_APP_IDS)
  private List<String> appIds = new ArrayList<>();

  /**
   * Required. The targeting mode that should be applied to the list of app IDs. If there are existing targeted app IDs, must be equal to the existing PretargetingConfig.appTargeting.mobileAppTargeting.targetingMode or a 400 bad request error will be returned.
   */
  @JsonAdapter(TargetingModeEnum.Adapter.class)
  public enum TargetingModeEnum {
    TARGETING_MODE_UNSPECIFIED("TARGETING_MODE_UNSPECIFIED"),
    
    INCLUSIVE("INCLUSIVE"),
    
    EXCLUSIVE("EXCLUSIVE");

    private String value;

    TargetingModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetingModeEnum fromValue(String value) {
      for (TargetingModeEnum b : TargetingModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetingModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetingModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetingModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetingModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetingModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGETING_MODE = "targetingMode";
  @SerializedName(SERIALIZED_NAME_TARGETING_MODE)
  private TargetingModeEnum targetingMode;

  public AddTargetedAppsRequest() {
  }

  public AddTargetedAppsRequest appIds(List<String> appIds) {
    this.appIds = appIds;
    return this;
  }

  public AddTargetedAppsRequest addAppIdsItem(String appIdsItem) {
    if (this.appIds == null) {
      this.appIds = new ArrayList<>();
    }
    this.appIds.add(appIdsItem);
    return this;
  }

  /**
   * A list of app IDs to target in the pretargeting configuration. These values will be added to the list of targeted app IDs in PretargetingConfig.appTargeting.mobileAppTargeting.values.
   * @return appIds
   */
  @javax.annotation.Nullable
  public List<String> getAppIds() {
    return appIds;
  }

  public void setAppIds(List<String> appIds) {
    this.appIds = appIds;
  }


  public AddTargetedAppsRequest targetingMode(TargetingModeEnum targetingMode) {
    this.targetingMode = targetingMode;
    return this;
  }

  /**
   * Required. The targeting mode that should be applied to the list of app IDs. If there are existing targeted app IDs, must be equal to the existing PretargetingConfig.appTargeting.mobileAppTargeting.targetingMode or a 400 bad request error will be returned.
   * @return targetingMode
   */
  @javax.annotation.Nullable
  public TargetingModeEnum getTargetingMode() {
    return targetingMode;
  }

  public void setTargetingMode(TargetingModeEnum targetingMode) {
    this.targetingMode = targetingMode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AddTargetedAppsRequest addTargetedAppsRequest = (AddTargetedAppsRequest) o;
    return Objects.equals(this.appIds, addTargetedAppsRequest.appIds) &&
        Objects.equals(this.targetingMode, addTargetedAppsRequest.targetingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appIds, targetingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AddTargetedAppsRequest {\n");
    sb.append("    appIds: ").append(toIndentedString(appIds)).append("\n");
    sb.append("    targetingMode: ").append(toIndentedString(targetingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appIds");
    openapiFields.add("targetingMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AddTargetedAppsRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AddTargetedAppsRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AddTargetedAppsRequest is not found in the empty JSON string", AddTargetedAppsRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AddTargetedAppsRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AddTargetedAppsRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("appIds") != null && !jsonObj.get("appIds").isJsonNull() && !jsonObj.get("appIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `appIds` to be an array in the JSON string but got `%s`", jsonObj.get("appIds").toString()));
      }
      if ((jsonObj.get("targetingMode") != null && !jsonObj.get("targetingMode").isJsonNull()) && !jsonObj.get("targetingMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetingMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetingMode").toString()));
      }
      // validate the optional field `targetingMode`
      if (jsonObj.get("targetingMode") != null && !jsonObj.get("targetingMode").isJsonNull()) {
        TargetingModeEnum.validateJsonElement(jsonObj.get("targetingMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AddTargetedAppsRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AddTargetedAppsRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AddTargetedAppsRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AddTargetedAppsRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<AddTargetedAppsRequest>() {
           @Override
           public void write(JsonWriter out, AddTargetedAppsRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AddTargetedAppsRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AddTargetedAppsRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AddTargetedAppsRequest
   * @throws IOException if the JSON string is invalid with respect to AddTargetedAppsRequest
   */
  public static AddTargetedAppsRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AddTargetedAppsRequest.class);
  }

  /**
   * Convert an instance of AddTargetedAppsRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

