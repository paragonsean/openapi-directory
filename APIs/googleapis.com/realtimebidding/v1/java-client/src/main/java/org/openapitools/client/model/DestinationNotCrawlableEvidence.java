/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evidence that the creative&#39;s destination URL was not crawlable by Google.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationNotCrawlableEvidence {
  public static final String SERIALIZED_NAME_CRAWL_TIME = "crawlTime";
  @SerializedName(SERIALIZED_NAME_CRAWL_TIME)
  private String crawlTime;

  public static final String SERIALIZED_NAME_CRAWLED_URL = "crawledUrl";
  @SerializedName(SERIALIZED_NAME_CRAWLED_URL)
  private String crawledUrl;

  /**
   * Reason of destination not crawlable.
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    REASON_UNSPECIFIED("REASON_UNSPECIFIED"),
    
    UNREACHABLE_ROBOTS("UNREACHABLE_ROBOTS"),
    
    TIMEOUT_ROBOTS("TIMEOUT_ROBOTS"),
    
    ROBOTED_DENIED("ROBOTED_DENIED"),
    
    UNKNOWN("UNKNOWN");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public DestinationNotCrawlableEvidence() {
  }

  public DestinationNotCrawlableEvidence crawlTime(String crawlTime) {
    this.crawlTime = crawlTime;
    return this;
  }

  /**
   * Approximate time of the crawl.
   * @return crawlTime
   */
  @javax.annotation.Nullable
  public String getCrawlTime() {
    return crawlTime;
  }

  public void setCrawlTime(String crawlTime) {
    this.crawlTime = crawlTime;
  }


  public DestinationNotCrawlableEvidence crawledUrl(String crawledUrl) {
    this.crawledUrl = crawledUrl;
    return this;
  }

  /**
   * Destination URL that was attempted to be crawled.
   * @return crawledUrl
   */
  @javax.annotation.Nullable
  public String getCrawledUrl() {
    return crawledUrl;
  }

  public void setCrawledUrl(String crawledUrl) {
    this.crawledUrl = crawledUrl;
  }


  public DestinationNotCrawlableEvidence reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Reason of destination not crawlable.
   * @return reason
   */
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationNotCrawlableEvidence destinationNotCrawlableEvidence = (DestinationNotCrawlableEvidence) o;
    return Objects.equals(this.crawlTime, destinationNotCrawlableEvidence.crawlTime) &&
        Objects.equals(this.crawledUrl, destinationNotCrawlableEvidence.crawledUrl) &&
        Objects.equals(this.reason, destinationNotCrawlableEvidence.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crawlTime, crawledUrl, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationNotCrawlableEvidence {\n");
    sb.append("    crawlTime: ").append(toIndentedString(crawlTime)).append("\n");
    sb.append("    crawledUrl: ").append(toIndentedString(crawledUrl)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crawlTime");
    openapiFields.add("crawledUrl");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationNotCrawlableEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationNotCrawlableEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationNotCrawlableEvidence is not found in the empty JSON string", DestinationNotCrawlableEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationNotCrawlableEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationNotCrawlableEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("crawlTime") != null && !jsonObj.get("crawlTime").isJsonNull()) && !jsonObj.get("crawlTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawlTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawlTime").toString()));
      }
      if ((jsonObj.get("crawledUrl") != null && !jsonObj.get("crawledUrl").isJsonNull()) && !jsonObj.get("crawledUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawledUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawledUrl").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationNotCrawlableEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationNotCrawlableEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationNotCrawlableEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationNotCrawlableEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationNotCrawlableEvidence>() {
           @Override
           public void write(JsonWriter out, DestinationNotCrawlableEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationNotCrawlableEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationNotCrawlableEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationNotCrawlableEvidence
   * @throws IOException if the JSON string is invalid with respect to DestinationNotCrawlableEvidence
   */
  public static DestinationNotCrawlableEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationNotCrawlableEvidence.class);
  }

  /**
   * Convert an instance of DestinationNotCrawlableEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

