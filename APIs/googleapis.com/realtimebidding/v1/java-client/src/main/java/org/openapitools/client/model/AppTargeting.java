/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NumericTargetingDimension;
import org.openapitools.client.model.StringTargetingDimension;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A subset of app inventory to target. Bid requests that match criteria in at least one of the specified dimensions will be sent.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AppTargeting {
  public static final String SERIALIZED_NAME_MOBILE_APP_CATEGORY_TARGETING = "mobileAppCategoryTargeting";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP_CATEGORY_TARGETING)
  private NumericTargetingDimension mobileAppCategoryTargeting;

  public static final String SERIALIZED_NAME_MOBILE_APP_TARGETING = "mobileAppTargeting";
  @SerializedName(SERIALIZED_NAME_MOBILE_APP_TARGETING)
  private StringTargetingDimension mobileAppTargeting;

  public AppTargeting() {
  }

  public AppTargeting mobileAppCategoryTargeting(NumericTargetingDimension mobileAppCategoryTargeting) {
    this.mobileAppCategoryTargeting = mobileAppCategoryTargeting;
    return this;
  }

  /**
   * Get mobileAppCategoryTargeting
   * @return mobileAppCategoryTargeting
   */
  @javax.annotation.Nullable
  public NumericTargetingDimension getMobileAppCategoryTargeting() {
    return mobileAppCategoryTargeting;
  }

  public void setMobileAppCategoryTargeting(NumericTargetingDimension mobileAppCategoryTargeting) {
    this.mobileAppCategoryTargeting = mobileAppCategoryTargeting;
  }


  public AppTargeting mobileAppTargeting(StringTargetingDimension mobileAppTargeting) {
    this.mobileAppTargeting = mobileAppTargeting;
    return this;
  }

  /**
   * Get mobileAppTargeting
   * @return mobileAppTargeting
   */
  @javax.annotation.Nullable
  public StringTargetingDimension getMobileAppTargeting() {
    return mobileAppTargeting;
  }

  public void setMobileAppTargeting(StringTargetingDimension mobileAppTargeting) {
    this.mobileAppTargeting = mobileAppTargeting;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppTargeting appTargeting = (AppTargeting) o;
    return Objects.equals(this.mobileAppCategoryTargeting, appTargeting.mobileAppCategoryTargeting) &&
        Objects.equals(this.mobileAppTargeting, appTargeting.mobileAppTargeting);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mobileAppCategoryTargeting, mobileAppTargeting);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppTargeting {\n");
    sb.append("    mobileAppCategoryTargeting: ").append(toIndentedString(mobileAppCategoryTargeting)).append("\n");
    sb.append("    mobileAppTargeting: ").append(toIndentedString(mobileAppTargeting)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mobileAppCategoryTargeting");
    openapiFields.add("mobileAppTargeting");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppTargeting
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppTargeting.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppTargeting is not found in the empty JSON string", AppTargeting.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppTargeting.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppTargeting` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `mobileAppCategoryTargeting`
      if (jsonObj.get("mobileAppCategoryTargeting") != null && !jsonObj.get("mobileAppCategoryTargeting").isJsonNull()) {
        NumericTargetingDimension.validateJsonElement(jsonObj.get("mobileAppCategoryTargeting"));
      }
      // validate the optional field `mobileAppTargeting`
      if (jsonObj.get("mobileAppTargeting") != null && !jsonObj.get("mobileAppTargeting").isJsonNull()) {
        StringTargetingDimension.validateJsonElement(jsonObj.get("mobileAppTargeting"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppTargeting.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppTargeting' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppTargeting> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppTargeting.class));

       return (TypeAdapter<T>) new TypeAdapter<AppTargeting>() {
           @Override
           public void write(JsonWriter out, AppTargeting value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppTargeting read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppTargeting given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppTargeting
   * @throws IOException if the JSON string is invalid with respect to AppTargeting
   */
  public static AppTargeting fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppTargeting.class);
  }

  /**
   * Convert an instance of AppTargeting to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

