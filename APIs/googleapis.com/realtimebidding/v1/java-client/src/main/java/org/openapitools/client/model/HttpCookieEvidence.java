/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evidence for HTTP cookie-related policy violations.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HttpCookieEvidence {
  public static final String SERIALIZED_NAME_COOKIE_NAMES = "cookieNames";
  @SerializedName(SERIALIZED_NAME_COOKIE_NAMES)
  private List<String> cookieNames = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_COOKIE_COUNT = "maxCookieCount";
  @SerializedName(SERIALIZED_NAME_MAX_COOKIE_COUNT)
  private Integer maxCookieCount;

  public HttpCookieEvidence() {
  }

  public HttpCookieEvidence cookieNames(List<String> cookieNames) {
    this.cookieNames = cookieNames;
    return this;
  }

  public HttpCookieEvidence addCookieNamesItem(String cookieNamesItem) {
    if (this.cookieNames == null) {
      this.cookieNames = new ArrayList<>();
    }
    this.cookieNames.add(cookieNamesItem);
    return this;
  }

  /**
   * Names of cookies that violate Google policies. For TOO_MANY_COOKIES policy, this will be the cookie names of top domains with the largest number of cookies. For other policies, this will be all the cookie names that violate the policy.
   * @return cookieNames
   */
  @javax.annotation.Nullable
  public List<String> getCookieNames() {
    return cookieNames;
  }

  public void setCookieNames(List<String> cookieNames) {
    this.cookieNames = cookieNames;
  }


  public HttpCookieEvidence maxCookieCount(Integer maxCookieCount) {
    this.maxCookieCount = maxCookieCount;
    return this;
  }

  /**
   * The largest number of cookies set by a creative. If this field is set, cookie_names above will be set to the cookie names of top domains with the largest number of cookies. This field will only be set for TOO_MANY_COOKIES policy.
   * @return maxCookieCount
   */
  @javax.annotation.Nullable
  public Integer getMaxCookieCount() {
    return maxCookieCount;
  }

  public void setMaxCookieCount(Integer maxCookieCount) {
    this.maxCookieCount = maxCookieCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpCookieEvidence httpCookieEvidence = (HttpCookieEvidence) o;
    return Objects.equals(this.cookieNames, httpCookieEvidence.cookieNames) &&
        Objects.equals(this.maxCookieCount, httpCookieEvidence.maxCookieCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cookieNames, maxCookieCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpCookieEvidence {\n");
    sb.append("    cookieNames: ").append(toIndentedString(cookieNames)).append("\n");
    sb.append("    maxCookieCount: ").append(toIndentedString(maxCookieCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cookieNames");
    openapiFields.add("maxCookieCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpCookieEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpCookieEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpCookieEvidence is not found in the empty JSON string", HttpCookieEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpCookieEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpCookieEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("cookieNames") != null && !jsonObj.get("cookieNames").isJsonNull() && !jsonObj.get("cookieNames").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cookieNames` to be an array in the JSON string but got `%s`", jsonObj.get("cookieNames").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpCookieEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpCookieEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpCookieEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpCookieEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpCookieEvidence>() {
           @Override
           public void write(JsonWriter out, HttpCookieEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpCookieEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpCookieEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpCookieEvidence
   * @throws IOException if the JSON string is invalid with respect to HttpCookieEvidence
   */
  public static HttpCookieEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpCookieEvidence.class);
  }

  /**
   * Convert an instance of HttpCookieEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

