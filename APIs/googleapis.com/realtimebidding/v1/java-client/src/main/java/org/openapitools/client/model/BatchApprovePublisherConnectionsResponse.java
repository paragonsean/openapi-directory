/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PublisherConnection;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response for the request to approve a batch of publisher connections.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchApprovePublisherConnectionsResponse {
  public static final String SERIALIZED_NAME_PUBLISHER_CONNECTIONS = "publisherConnections";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_CONNECTIONS)
  private List<PublisherConnection> publisherConnections = new ArrayList<>();

  public BatchApprovePublisherConnectionsResponse() {
  }

  public BatchApprovePublisherConnectionsResponse publisherConnections(List<PublisherConnection> publisherConnections) {
    this.publisherConnections = publisherConnections;
    return this;
  }

  public BatchApprovePublisherConnectionsResponse addPublisherConnectionsItem(PublisherConnection publisherConnectionsItem) {
    if (this.publisherConnections == null) {
      this.publisherConnections = new ArrayList<>();
    }
    this.publisherConnections.add(publisherConnectionsItem);
    return this;
  }

  /**
   * The publisher connections that have been approved.
   * @return publisherConnections
   */
  @javax.annotation.Nullable
  public List<PublisherConnection> getPublisherConnections() {
    return publisherConnections;
  }

  public void setPublisherConnections(List<PublisherConnection> publisherConnections) {
    this.publisherConnections = publisherConnections;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchApprovePublisherConnectionsResponse batchApprovePublisherConnectionsResponse = (BatchApprovePublisherConnectionsResponse) o;
    return Objects.equals(this.publisherConnections, batchApprovePublisherConnectionsResponse.publisherConnections);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publisherConnections);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchApprovePublisherConnectionsResponse {\n");
    sb.append("    publisherConnections: ").append(toIndentedString(publisherConnections)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("publisherConnections");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchApprovePublisherConnectionsResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchApprovePublisherConnectionsResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchApprovePublisherConnectionsResponse is not found in the empty JSON string", BatchApprovePublisherConnectionsResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchApprovePublisherConnectionsResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchApprovePublisherConnectionsResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("publisherConnections") != null && !jsonObj.get("publisherConnections").isJsonNull()) {
        JsonArray jsonArraypublisherConnections = jsonObj.getAsJsonArray("publisherConnections");
        if (jsonArraypublisherConnections != null) {
          // ensure the json data is an array
          if (!jsonObj.get("publisherConnections").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `publisherConnections` to be an array in the JSON string but got `%s`", jsonObj.get("publisherConnections").toString()));
          }

          // validate the optional field `publisherConnections` (array)
          for (int i = 0; i < jsonArraypublisherConnections.size(); i++) {
            PublisherConnection.validateJsonElement(jsonArraypublisherConnections.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchApprovePublisherConnectionsResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchApprovePublisherConnectionsResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchApprovePublisherConnectionsResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchApprovePublisherConnectionsResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchApprovePublisherConnectionsResponse>() {
           @Override
           public void write(JsonWriter out, BatchApprovePublisherConnectionsResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchApprovePublisherConnectionsResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchApprovePublisherConnectionsResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchApprovePublisherConnectionsResponse
   * @throws IOException if the JSON string is invalid with respect to BatchApprovePublisherConnectionsResponse
   */
  public static BatchApprovePublisherConnectionsResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchApprovePublisherConnectionsResponse.class);
  }

  /**
   * Convert an instance of BatchApprovePublisherConnectionsResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

