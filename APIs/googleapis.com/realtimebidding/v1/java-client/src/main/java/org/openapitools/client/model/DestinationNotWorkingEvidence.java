/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evidence of the creative&#39;s destination URL not functioning properly or having been incorrectly set up.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DestinationNotWorkingEvidence {
  /**
   * DNS lookup errors.
   */
  @JsonAdapter(DnsErrorEnum.Adapter.class)
  public enum DnsErrorEnum {
    DNS_ERROR_UNSPECIFIED("DNS_ERROR_UNSPECIFIED"),
    
    ERROR_DNS("ERROR_DNS"),
    
    GOOGLE_CRAWLER_DNS_ISSUE("GOOGLE_CRAWLER_DNS_ISSUE");

    private String value;

    DnsErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DnsErrorEnum fromValue(String value) {
      for (DnsErrorEnum b : DnsErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DnsErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DnsErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DnsErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DnsErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DnsErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DNS_ERROR = "dnsError";
  @SerializedName(SERIALIZED_NAME_DNS_ERROR)
  private DnsErrorEnum dnsError;

  public static final String SERIALIZED_NAME_EXPANDED_URL = "expandedUrl";
  @SerializedName(SERIALIZED_NAME_EXPANDED_URL)
  private String expandedUrl;

  public static final String SERIALIZED_NAME_HTTP_ERROR = "httpError";
  @SerializedName(SERIALIZED_NAME_HTTP_ERROR)
  private Integer httpError;

  /**
   * Page was crawled successfully, but was detected as either a page with no content or an error page.
   */
  @JsonAdapter(InvalidPageEnum.Adapter.class)
  public enum InvalidPageEnum {
    INVALID_PAGE_UNSPECIFIED("INVALID_PAGE_UNSPECIFIED"),
    
    EMPTY_OR_ERROR_PAGE("EMPTY_OR_ERROR_PAGE");

    private String value;

    InvalidPageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvalidPageEnum fromValue(String value) {
      for (InvalidPageEnum b : InvalidPageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvalidPageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvalidPageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvalidPageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvalidPageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvalidPageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVALID_PAGE = "invalidPage";
  @SerializedName(SERIALIZED_NAME_INVALID_PAGE)
  private InvalidPageEnum invalidPage;

  public static final String SERIALIZED_NAME_LAST_CHECK_TIME = "lastCheckTime";
  @SerializedName(SERIALIZED_NAME_LAST_CHECK_TIME)
  private String lastCheckTime;

  /**
   * Platform of the non-working URL.
   */
  @JsonAdapter(PlatformEnum.Adapter.class)
  public enum PlatformEnum {
    PLATFORM_UNSPECIFIED("PLATFORM_UNSPECIFIED"),
    
    PERSONAL_COMPUTER("PERSONAL_COMPUTER"),
    
    ANDROID("ANDROID"),
    
    IOS("IOS");

    private String value;

    PlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PlatformEnum fromValue(String value) {
      for (PlatformEnum b : PlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PLATFORM = "platform";
  @SerializedName(SERIALIZED_NAME_PLATFORM)
  private PlatformEnum platform;

  /**
   * HTTP redirect chain error.
   */
  @JsonAdapter(RedirectionErrorEnum.Adapter.class)
  public enum RedirectionErrorEnum {
    REDIRECTION_ERROR_UNSPECIFIED("REDIRECTION_ERROR_UNSPECIFIED"),
    
    TOO_MANY_REDIRECTS("TOO_MANY_REDIRECTS"),
    
    INVALID_REDIRECT("INVALID_REDIRECT"),
    
    EMPTY_REDIRECT("EMPTY_REDIRECT"),
    
    REDIRECT_ERROR_UNKNOWN("REDIRECT_ERROR_UNKNOWN");

    private String value;

    RedirectionErrorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RedirectionErrorEnum fromValue(String value) {
      for (RedirectionErrorEnum b : RedirectionErrorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RedirectionErrorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RedirectionErrorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RedirectionErrorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RedirectionErrorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RedirectionErrorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REDIRECTION_ERROR = "redirectionError";
  @SerializedName(SERIALIZED_NAME_REDIRECTION_ERROR)
  private RedirectionErrorEnum redirectionError;

  /**
   * Rejected because of malformed URLs or invalid requests.
   */
  @JsonAdapter(UrlRejectedEnum.Adapter.class)
  public enum UrlRejectedEnum {
    URL_REJECTED_UNSPECIFIED("URL_REJECTED_UNSPECIFIED"),
    
    BAD_REQUEST("BAD_REQUEST"),
    
    MALFORMED_URL("MALFORMED_URL"),
    
    URL_REJECTED_UNKNOWN("URL_REJECTED_UNKNOWN");

    private String value;

    UrlRejectedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UrlRejectedEnum fromValue(String value) {
      for (UrlRejectedEnum b : UrlRejectedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UrlRejectedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UrlRejectedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UrlRejectedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UrlRejectedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UrlRejectedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_URL_REJECTED = "urlRejected";
  @SerializedName(SERIALIZED_NAME_URL_REJECTED)
  private UrlRejectedEnum urlRejected;

  public DestinationNotWorkingEvidence() {
  }

  public DestinationNotWorkingEvidence dnsError(DnsErrorEnum dnsError) {
    this.dnsError = dnsError;
    return this;
  }

  /**
   * DNS lookup errors.
   * @return dnsError
   */
  @javax.annotation.Nullable
  public DnsErrorEnum getDnsError() {
    return dnsError;
  }

  public void setDnsError(DnsErrorEnum dnsError) {
    this.dnsError = dnsError;
  }


  public DestinationNotWorkingEvidence expandedUrl(String expandedUrl) {
    this.expandedUrl = expandedUrl;
    return this;
  }

  /**
   * The full non-working URL.
   * @return expandedUrl
   */
  @javax.annotation.Nullable
  public String getExpandedUrl() {
    return expandedUrl;
  }

  public void setExpandedUrl(String expandedUrl) {
    this.expandedUrl = expandedUrl;
  }


  public DestinationNotWorkingEvidence httpError(Integer httpError) {
    this.httpError = httpError;
    return this;
  }

  /**
   * HTTP error code (for example, 404 or 5xx)
   * @return httpError
   */
  @javax.annotation.Nullable
  public Integer getHttpError() {
    return httpError;
  }

  public void setHttpError(Integer httpError) {
    this.httpError = httpError;
  }


  public DestinationNotWorkingEvidence invalidPage(InvalidPageEnum invalidPage) {
    this.invalidPage = invalidPage;
    return this;
  }

  /**
   * Page was crawled successfully, but was detected as either a page with no content or an error page.
   * @return invalidPage
   */
  @javax.annotation.Nullable
  public InvalidPageEnum getInvalidPage() {
    return invalidPage;
  }

  public void setInvalidPage(InvalidPageEnum invalidPage) {
    this.invalidPage = invalidPage;
  }


  public DestinationNotWorkingEvidence lastCheckTime(String lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
    return this;
  }

  /**
   * Approximate time when the ad destination was last checked.
   * @return lastCheckTime
   */
  @javax.annotation.Nullable
  public String getLastCheckTime() {
    return lastCheckTime;
  }

  public void setLastCheckTime(String lastCheckTime) {
    this.lastCheckTime = lastCheckTime;
  }


  public DestinationNotWorkingEvidence platform(PlatformEnum platform) {
    this.platform = platform;
    return this;
  }

  /**
   * Platform of the non-working URL.
   * @return platform
   */
  @javax.annotation.Nullable
  public PlatformEnum getPlatform() {
    return platform;
  }

  public void setPlatform(PlatformEnum platform) {
    this.platform = platform;
  }


  public DestinationNotWorkingEvidence redirectionError(RedirectionErrorEnum redirectionError) {
    this.redirectionError = redirectionError;
    return this;
  }

  /**
   * HTTP redirect chain error.
   * @return redirectionError
   */
  @javax.annotation.Nullable
  public RedirectionErrorEnum getRedirectionError() {
    return redirectionError;
  }

  public void setRedirectionError(RedirectionErrorEnum redirectionError) {
    this.redirectionError = redirectionError;
  }


  public DestinationNotWorkingEvidence urlRejected(UrlRejectedEnum urlRejected) {
    this.urlRejected = urlRejected;
    return this;
  }

  /**
   * Rejected because of malformed URLs or invalid requests.
   * @return urlRejected
   */
  @javax.annotation.Nullable
  public UrlRejectedEnum getUrlRejected() {
    return urlRejected;
  }

  public void setUrlRejected(UrlRejectedEnum urlRejected) {
    this.urlRejected = urlRejected;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DestinationNotWorkingEvidence destinationNotWorkingEvidence = (DestinationNotWorkingEvidence) o;
    return Objects.equals(this.dnsError, destinationNotWorkingEvidence.dnsError) &&
        Objects.equals(this.expandedUrl, destinationNotWorkingEvidence.expandedUrl) &&
        Objects.equals(this.httpError, destinationNotWorkingEvidence.httpError) &&
        Objects.equals(this.invalidPage, destinationNotWorkingEvidence.invalidPage) &&
        Objects.equals(this.lastCheckTime, destinationNotWorkingEvidence.lastCheckTime) &&
        Objects.equals(this.platform, destinationNotWorkingEvidence.platform) &&
        Objects.equals(this.redirectionError, destinationNotWorkingEvidence.redirectionError) &&
        Objects.equals(this.urlRejected, destinationNotWorkingEvidence.urlRejected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dnsError, expandedUrl, httpError, invalidPage, lastCheckTime, platform, redirectionError, urlRejected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DestinationNotWorkingEvidence {\n");
    sb.append("    dnsError: ").append(toIndentedString(dnsError)).append("\n");
    sb.append("    expandedUrl: ").append(toIndentedString(expandedUrl)).append("\n");
    sb.append("    httpError: ").append(toIndentedString(httpError)).append("\n");
    sb.append("    invalidPage: ").append(toIndentedString(invalidPage)).append("\n");
    sb.append("    lastCheckTime: ").append(toIndentedString(lastCheckTime)).append("\n");
    sb.append("    platform: ").append(toIndentedString(platform)).append("\n");
    sb.append("    redirectionError: ").append(toIndentedString(redirectionError)).append("\n");
    sb.append("    urlRejected: ").append(toIndentedString(urlRejected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dnsError");
    openapiFields.add("expandedUrl");
    openapiFields.add("httpError");
    openapiFields.add("invalidPage");
    openapiFields.add("lastCheckTime");
    openapiFields.add("platform");
    openapiFields.add("redirectionError");
    openapiFields.add("urlRejected");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DestinationNotWorkingEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DestinationNotWorkingEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DestinationNotWorkingEvidence is not found in the empty JSON string", DestinationNotWorkingEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DestinationNotWorkingEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DestinationNotWorkingEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dnsError") != null && !jsonObj.get("dnsError").isJsonNull()) && !jsonObj.get("dnsError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsError").toString()));
      }
      // validate the optional field `dnsError`
      if (jsonObj.get("dnsError") != null && !jsonObj.get("dnsError").isJsonNull()) {
        DnsErrorEnum.validateJsonElement(jsonObj.get("dnsError"));
      }
      if ((jsonObj.get("expandedUrl") != null && !jsonObj.get("expandedUrl").isJsonNull()) && !jsonObj.get("expandedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expandedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expandedUrl").toString()));
      }
      if ((jsonObj.get("invalidPage") != null && !jsonObj.get("invalidPage").isJsonNull()) && !jsonObj.get("invalidPage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidPage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invalidPage").toString()));
      }
      // validate the optional field `invalidPage`
      if (jsonObj.get("invalidPage") != null && !jsonObj.get("invalidPage").isJsonNull()) {
        InvalidPageEnum.validateJsonElement(jsonObj.get("invalidPage"));
      }
      if ((jsonObj.get("lastCheckTime") != null && !jsonObj.get("lastCheckTime").isJsonNull()) && !jsonObj.get("lastCheckTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastCheckTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastCheckTime").toString()));
      }
      if ((jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) && !jsonObj.get("platform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("platform").toString()));
      }
      // validate the optional field `platform`
      if (jsonObj.get("platform") != null && !jsonObj.get("platform").isJsonNull()) {
        PlatformEnum.validateJsonElement(jsonObj.get("platform"));
      }
      if ((jsonObj.get("redirectionError") != null && !jsonObj.get("redirectionError").isJsonNull()) && !jsonObj.get("redirectionError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redirectionError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redirectionError").toString()));
      }
      // validate the optional field `redirectionError`
      if (jsonObj.get("redirectionError") != null && !jsonObj.get("redirectionError").isJsonNull()) {
        RedirectionErrorEnum.validateJsonElement(jsonObj.get("redirectionError"));
      }
      if ((jsonObj.get("urlRejected") != null && !jsonObj.get("urlRejected").isJsonNull()) && !jsonObj.get("urlRejected").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `urlRejected` to be a primitive type in the JSON string but got `%s`", jsonObj.get("urlRejected").toString()));
      }
      // validate the optional field `urlRejected`
      if (jsonObj.get("urlRejected") != null && !jsonObj.get("urlRejected").isJsonNull()) {
        UrlRejectedEnum.validateJsonElement(jsonObj.get("urlRejected"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DestinationNotWorkingEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DestinationNotWorkingEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DestinationNotWorkingEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DestinationNotWorkingEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DestinationNotWorkingEvidence>() {
           @Override
           public void write(JsonWriter out, DestinationNotWorkingEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DestinationNotWorkingEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DestinationNotWorkingEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DestinationNotWorkingEvidence
   * @throws IOException if the JSON string is invalid with respect to DestinationNotWorkingEvidence
   */
  public static DestinationNotWorkingEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DestinationNotWorkingEvidence.class);
  }

  /**
   * Convert an instance of DestinationNotWorkingEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

