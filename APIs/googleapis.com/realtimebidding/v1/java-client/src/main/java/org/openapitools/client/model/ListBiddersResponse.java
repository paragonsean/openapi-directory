/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Bidder;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A response containing bidders.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListBiddersResponse {
  public static final String SERIALIZED_NAME_BIDDERS = "bidders";
  @SerializedName(SERIALIZED_NAME_BIDDERS)
  private List<Bidder> bidders = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_PAGE_TOKEN = "nextPageToken";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_TOKEN)
  private String nextPageToken;

  public ListBiddersResponse() {
  }

  public ListBiddersResponse bidders(List<Bidder> bidders) {
    this.bidders = bidders;
    return this;
  }

  public ListBiddersResponse addBiddersItem(Bidder biddersItem) {
    if (this.bidders == null) {
      this.bidders = new ArrayList<>();
    }
    this.bidders.add(biddersItem);
    return this;
  }

  /**
   * List of bidders.
   * @return bidders
   */
  @javax.annotation.Nullable
  public List<Bidder> getBidders() {
    return bidders;
  }

  public void setBidders(List<Bidder> bidders) {
    this.bidders = bidders;
  }


  public ListBiddersResponse nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    return this;
  }

  /**
   * A token which can be passed to a subsequent call to the &#x60;ListBidders&#x60; method to retrieve the next page of results in ListBiddersRequest.pageToken.
   * @return nextPageToken
   */
  @javax.annotation.Nullable
  public String getNextPageToken() {
    return nextPageToken;
  }

  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListBiddersResponse listBiddersResponse = (ListBiddersResponse) o;
    return Objects.equals(this.bidders, listBiddersResponse.bidders) &&
        Objects.equals(this.nextPageToken, listBiddersResponse.nextPageToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bidders, nextPageToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListBiddersResponse {\n");
    sb.append("    bidders: ").append(toIndentedString(bidders)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bidders");
    openapiFields.add("nextPageToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListBiddersResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListBiddersResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListBiddersResponse is not found in the empty JSON string", ListBiddersResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListBiddersResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListBiddersResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bidders") != null && !jsonObj.get("bidders").isJsonNull()) {
        JsonArray jsonArraybidders = jsonObj.getAsJsonArray("bidders");
        if (jsonArraybidders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bidders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bidders` to be an array in the JSON string but got `%s`", jsonObj.get("bidders").toString()));
          }

          // validate the optional field `bidders` (array)
          for (int i = 0; i < jsonArraybidders.size(); i++) {
            Bidder.validateJsonElement(jsonArraybidders.get(i));
          };
        }
      }
      if ((jsonObj.get("nextPageToken") != null && !jsonObj.get("nextPageToken").isJsonNull()) && !jsonObj.get("nextPageToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPageToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPageToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListBiddersResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListBiddersResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListBiddersResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListBiddersResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<ListBiddersResponse>() {
           @Override
           public void write(JsonWriter out, ListBiddersResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListBiddersResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListBiddersResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListBiddersResponse
   * @throws IOException if the JSON string is invalid with respect to ListBiddersResponse
   */
  public static ListBiddersResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListBiddersResponse.class);
  }

  /**
   * Convert an instance of ListBiddersResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

