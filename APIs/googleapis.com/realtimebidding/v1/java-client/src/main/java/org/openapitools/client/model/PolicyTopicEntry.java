/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PolicyTopicEvidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Each policy topic entry will represent a violation of a policy topic for a creative, with the policy topic information and optional evidence for the policy violation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyTopicEntry {
  public static final String SERIALIZED_NAME_EVIDENCES = "evidences";
  @SerializedName(SERIALIZED_NAME_EVIDENCES)
  private List<PolicyTopicEvidence> evidences = new ArrayList<>();

  public static final String SERIALIZED_NAME_HELP_CENTER_URL = "helpCenterUrl";
  @SerializedName(SERIALIZED_NAME_HELP_CENTER_URL)
  private String helpCenterUrl;

  public static final String SERIALIZED_NAME_MISSING_CERTIFICATE = "missingCertificate";
  @SerializedName(SERIALIZED_NAME_MISSING_CERTIFICATE)
  private Boolean missingCertificate;

  public static final String SERIALIZED_NAME_POLICY_TOPIC = "policyTopic";
  @SerializedName(SERIALIZED_NAME_POLICY_TOPIC)
  private String policyTopic;

  public PolicyTopicEntry() {
  }

  public PolicyTopicEntry evidences(List<PolicyTopicEvidence> evidences) {
    this.evidences = evidences;
    return this;
  }

  public PolicyTopicEntry addEvidencesItem(PolicyTopicEvidence evidencesItem) {
    if (this.evidences == null) {
      this.evidences = new ArrayList<>();
    }
    this.evidences.add(evidencesItem);
    return this;
  }

  /**
   * Pieces of evidence associated with this policy topic entry.
   * @return evidences
   */
  @javax.annotation.Nullable
  public List<PolicyTopicEvidence> getEvidences() {
    return evidences;
  }

  public void setEvidences(List<PolicyTopicEvidence> evidences) {
    this.evidences = evidences;
  }


  public PolicyTopicEntry helpCenterUrl(String helpCenterUrl) {
    this.helpCenterUrl = helpCenterUrl;
    return this;
  }

  /**
   * URL of the help center article describing this policy topic.
   * @return helpCenterUrl
   */
  @javax.annotation.Nullable
  public String getHelpCenterUrl() {
    return helpCenterUrl;
  }

  public void setHelpCenterUrl(String helpCenterUrl) {
    this.helpCenterUrl = helpCenterUrl;
  }


  public PolicyTopicEntry missingCertificate(Boolean missingCertificate) {
    this.missingCertificate = missingCertificate;
    return this;
  }

  /**
   * Whether or not the policy topic is missing a certificate. Some policy topics require a certificate to unblock serving in some regions. For more information about creative certification, refer to: https://support.google.com/authorizedbuyers/answer/7450776
   * @return missingCertificate
   */
  @javax.annotation.Nullable
  public Boolean getMissingCertificate() {
    return missingCertificate;
  }

  public void setMissingCertificate(Boolean missingCertificate) {
    this.missingCertificate = missingCertificate;
  }


  public PolicyTopicEntry policyTopic(String policyTopic) {
    this.policyTopic = policyTopic;
    return this;
  }

  /**
   * Policy topic this entry refers to. For example, \&quot;ALCOHOL\&quot;, \&quot;TRADEMARKS_IN_AD_TEXT\&quot;, or \&quot;DESTINATION_NOT_WORKING\&quot;. The set of possible policy topics is not fixed for a particular API version and may change at any time. Can be used to filter the response of the creatives.list method
   * @return policyTopic
   */
  @javax.annotation.Nullable
  public String getPolicyTopic() {
    return policyTopic;
  }

  public void setPolicyTopic(String policyTopic) {
    this.policyTopic = policyTopic;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyTopicEntry policyTopicEntry = (PolicyTopicEntry) o;
    return Objects.equals(this.evidences, policyTopicEntry.evidences) &&
        Objects.equals(this.helpCenterUrl, policyTopicEntry.helpCenterUrl) &&
        Objects.equals(this.missingCertificate, policyTopicEntry.missingCertificate) &&
        Objects.equals(this.policyTopic, policyTopicEntry.policyTopic);
  }

  @Override
  public int hashCode() {
    return Objects.hash(evidences, helpCenterUrl, missingCertificate, policyTopic);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyTopicEntry {\n");
    sb.append("    evidences: ").append(toIndentedString(evidences)).append("\n");
    sb.append("    helpCenterUrl: ").append(toIndentedString(helpCenterUrl)).append("\n");
    sb.append("    missingCertificate: ").append(toIndentedString(missingCertificate)).append("\n");
    sb.append("    policyTopic: ").append(toIndentedString(policyTopic)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("evidences");
    openapiFields.add("helpCenterUrl");
    openapiFields.add("missingCertificate");
    openapiFields.add("policyTopic");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyTopicEntry
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyTopicEntry.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyTopicEntry is not found in the empty JSON string", PolicyTopicEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyTopicEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyTopicEntry` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("evidences") != null && !jsonObj.get("evidences").isJsonNull()) {
        JsonArray jsonArrayevidences = jsonObj.getAsJsonArray("evidences");
        if (jsonArrayevidences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("evidences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `evidences` to be an array in the JSON string but got `%s`", jsonObj.get("evidences").toString()));
          }

          // validate the optional field `evidences` (array)
          for (int i = 0; i < jsonArrayevidences.size(); i++) {
            PolicyTopicEvidence.validateJsonElement(jsonArrayevidences.get(i));
          };
        }
      }
      if ((jsonObj.get("helpCenterUrl") != null && !jsonObj.get("helpCenterUrl").isJsonNull()) && !jsonObj.get("helpCenterUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `helpCenterUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("helpCenterUrl").toString()));
      }
      if ((jsonObj.get("policyTopic") != null && !jsonObj.get("policyTopic").isJsonNull()) && !jsonObj.get("policyTopic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policyTopic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policyTopic").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyTopicEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyTopicEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyTopicEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyTopicEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyTopicEntry>() {
           @Override
           public void write(JsonWriter out, PolicyTopicEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyTopicEntry read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyTopicEntry given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyTopicEntry
   * @throws IOException if the JSON string is invalid with respect to PolicyTopicEntry
   */
  public static PolicyTopicEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyTopicEntry.class);
  }

  /**
   * Convert an instance of PolicyTopicEntry to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

