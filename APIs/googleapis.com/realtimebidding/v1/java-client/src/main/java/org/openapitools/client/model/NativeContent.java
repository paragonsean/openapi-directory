/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Image;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Native content for a creative.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NativeContent {
  public static final String SERIALIZED_NAME_ADVERTISER_NAME = "advertiserName";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_NAME)
  private String advertiserName;

  public static final String SERIALIZED_NAME_APP_ICON = "appIcon";
  @SerializedName(SERIALIZED_NAME_APP_ICON)
  private Image appIcon;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_CALL_TO_ACTION = "callToAction";
  @SerializedName(SERIALIZED_NAME_CALL_TO_ACTION)
  private String callToAction;

  public static final String SERIALIZED_NAME_CLICK_LINK_URL = "clickLinkUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_LINK_URL)
  private String clickLinkUrl;

  public static final String SERIALIZED_NAME_CLICK_TRACKING_URL = "clickTrackingUrl";
  @SerializedName(SERIALIZED_NAME_CLICK_TRACKING_URL)
  private String clickTrackingUrl;

  public static final String SERIALIZED_NAME_HEADLINE = "headline";
  @SerializedName(SERIALIZED_NAME_HEADLINE)
  private String headline;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private Image logo;

  public static final String SERIALIZED_NAME_PRICE_DISPLAY_TEXT = "priceDisplayText";
  @SerializedName(SERIALIZED_NAME_PRICE_DISPLAY_TEXT)
  private String priceDisplayText;

  public static final String SERIALIZED_NAME_STAR_RATING = "starRating";
  @SerializedName(SERIALIZED_NAME_STAR_RATING)
  private Double starRating;

  public static final String SERIALIZED_NAME_VIDEO_URL = "videoUrl";
  @SerializedName(SERIALIZED_NAME_VIDEO_URL)
  private String videoUrl;

  public static final String SERIALIZED_NAME_VIDEO_VAST_XML = "videoVastXml";
  @SerializedName(SERIALIZED_NAME_VIDEO_VAST_XML)
  private String videoVastXml;

  public NativeContent() {
  }

  public NativeContent advertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
    return this;
  }

  /**
   * The name of the advertiser or sponsor, to be displayed in the ad creative.
   * @return advertiserName
   */
  @javax.annotation.Nullable
  public String getAdvertiserName() {
    return advertiserName;
  }

  public void setAdvertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
  }


  public NativeContent appIcon(Image appIcon) {
    this.appIcon = appIcon;
    return this;
  }

  /**
   * Get appIcon
   * @return appIcon
   */
  @javax.annotation.Nullable
  public Image getAppIcon() {
    return appIcon;
  }

  public void setAppIcon(Image appIcon) {
    this.appIcon = appIcon;
  }


  public NativeContent body(String body) {
    this.body = body;
    return this;
  }

  /**
   * A long description of the ad.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public NativeContent callToAction(String callToAction) {
    this.callToAction = callToAction;
    return this;
  }

  /**
   * A label for the button that the user is supposed to click.
   * @return callToAction
   */
  @javax.annotation.Nullable
  public String getCallToAction() {
    return callToAction;
  }

  public void setCallToAction(String callToAction) {
    this.callToAction = callToAction;
  }


  public NativeContent clickLinkUrl(String clickLinkUrl) {
    this.clickLinkUrl = clickLinkUrl;
    return this;
  }

  /**
   * The URL that the browser/SDK will load when the user clicks the ad.
   * @return clickLinkUrl
   */
  @javax.annotation.Nullable
  public String getClickLinkUrl() {
    return clickLinkUrl;
  }

  public void setClickLinkUrl(String clickLinkUrl) {
    this.clickLinkUrl = clickLinkUrl;
  }


  public NativeContent clickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
    return this;
  }

  /**
   * The URL to use for click tracking.
   * @return clickTrackingUrl
   */
  @javax.annotation.Nullable
  public String getClickTrackingUrl() {
    return clickTrackingUrl;
  }

  public void setClickTrackingUrl(String clickTrackingUrl) {
    this.clickTrackingUrl = clickTrackingUrl;
  }


  public NativeContent headline(String headline) {
    this.headline = headline;
    return this;
  }

  /**
   * A short title for the ad.
   * @return headline
   */
  @javax.annotation.Nullable
  public String getHeadline() {
    return headline;
  }

  public void setHeadline(String headline) {
    this.headline = headline;
  }


  public NativeContent image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public NativeContent logo(Image logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public Image getLogo() {
    return logo;
  }

  public void setLogo(Image logo) {
    this.logo = logo;
  }


  public NativeContent priceDisplayText(String priceDisplayText) {
    this.priceDisplayText = priceDisplayText;
    return this;
  }

  /**
   * The price of the promoted app including currency info.
   * @return priceDisplayText
   */
  @javax.annotation.Nullable
  public String getPriceDisplayText() {
    return priceDisplayText;
  }

  public void setPriceDisplayText(String priceDisplayText) {
    this.priceDisplayText = priceDisplayText;
  }


  public NativeContent starRating(Double starRating) {
    this.starRating = starRating;
    return this;
  }

  /**
   * The app rating in the app store. Must be in the range [0-5].
   * @return starRating
   */
  @javax.annotation.Nullable
  public Double getStarRating() {
    return starRating;
  }

  public void setStarRating(Double starRating) {
    this.starRating = starRating;
  }


  public NativeContent videoUrl(String videoUrl) {
    this.videoUrl = videoUrl;
    return this;
  }

  /**
   * The URL to fetch a native video ad.
   * @return videoUrl
   */
  @javax.annotation.Nullable
  public String getVideoUrl() {
    return videoUrl;
  }

  public void setVideoUrl(String videoUrl) {
    this.videoUrl = videoUrl;
  }


  public NativeContent videoVastXml(String videoVastXml) {
    this.videoVastXml = videoVastXml;
    return this;
  }

  /**
   * The contents of a VAST document for a native video ad.
   * @return videoVastXml
   */
  @javax.annotation.Nullable
  public String getVideoVastXml() {
    return videoVastXml;
  }

  public void setVideoVastXml(String videoVastXml) {
    this.videoVastXml = videoVastXml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NativeContent nativeContent = (NativeContent) o;
    return Objects.equals(this.advertiserName, nativeContent.advertiserName) &&
        Objects.equals(this.appIcon, nativeContent.appIcon) &&
        Objects.equals(this.body, nativeContent.body) &&
        Objects.equals(this.callToAction, nativeContent.callToAction) &&
        Objects.equals(this.clickLinkUrl, nativeContent.clickLinkUrl) &&
        Objects.equals(this.clickTrackingUrl, nativeContent.clickTrackingUrl) &&
        Objects.equals(this.headline, nativeContent.headline) &&
        Objects.equals(this.image, nativeContent.image) &&
        Objects.equals(this.logo, nativeContent.logo) &&
        Objects.equals(this.priceDisplayText, nativeContent.priceDisplayText) &&
        Objects.equals(this.starRating, nativeContent.starRating) &&
        Objects.equals(this.videoUrl, nativeContent.videoUrl) &&
        Objects.equals(this.videoVastXml, nativeContent.videoVastXml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advertiserName, appIcon, body, callToAction, clickLinkUrl, clickTrackingUrl, headline, image, logo, priceDisplayText, starRating, videoUrl, videoVastXml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NativeContent {\n");
    sb.append("    advertiserName: ").append(toIndentedString(advertiserName)).append("\n");
    sb.append("    appIcon: ").append(toIndentedString(appIcon)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    callToAction: ").append(toIndentedString(callToAction)).append("\n");
    sb.append("    clickLinkUrl: ").append(toIndentedString(clickLinkUrl)).append("\n");
    sb.append("    clickTrackingUrl: ").append(toIndentedString(clickTrackingUrl)).append("\n");
    sb.append("    headline: ").append(toIndentedString(headline)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    priceDisplayText: ").append(toIndentedString(priceDisplayText)).append("\n");
    sb.append("    starRating: ").append(toIndentedString(starRating)).append("\n");
    sb.append("    videoUrl: ").append(toIndentedString(videoUrl)).append("\n");
    sb.append("    videoVastXml: ").append(toIndentedString(videoVastXml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("advertiserName");
    openapiFields.add("appIcon");
    openapiFields.add("body");
    openapiFields.add("callToAction");
    openapiFields.add("clickLinkUrl");
    openapiFields.add("clickTrackingUrl");
    openapiFields.add("headline");
    openapiFields.add("image");
    openapiFields.add("logo");
    openapiFields.add("priceDisplayText");
    openapiFields.add("starRating");
    openapiFields.add("videoUrl");
    openapiFields.add("videoVastXml");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NativeContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NativeContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NativeContent is not found in the empty JSON string", NativeContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NativeContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NativeContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("advertiserName") != null && !jsonObj.get("advertiserName").isJsonNull()) && !jsonObj.get("advertiserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserName").toString()));
      }
      // validate the optional field `appIcon`
      if (jsonObj.get("appIcon") != null && !jsonObj.get("appIcon").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("appIcon"));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("callToAction") != null && !jsonObj.get("callToAction").isJsonNull()) && !jsonObj.get("callToAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `callToAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("callToAction").toString()));
      }
      if ((jsonObj.get("clickLinkUrl") != null && !jsonObj.get("clickLinkUrl").isJsonNull()) && !jsonObj.get("clickLinkUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickLinkUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickLinkUrl").toString()));
      }
      if ((jsonObj.get("clickTrackingUrl") != null && !jsonObj.get("clickTrackingUrl").isJsonNull()) && !jsonObj.get("clickTrackingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clickTrackingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clickTrackingUrl").toString()));
      }
      if ((jsonObj.get("headline") != null && !jsonObj.get("headline").isJsonNull()) && !jsonObj.get("headline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headline").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      // validate the optional field `logo`
      if (jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("logo"));
      }
      if ((jsonObj.get("priceDisplayText") != null && !jsonObj.get("priceDisplayText").isJsonNull()) && !jsonObj.get("priceDisplayText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `priceDisplayText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("priceDisplayText").toString()));
      }
      if ((jsonObj.get("videoUrl") != null && !jsonObj.get("videoUrl").isJsonNull()) && !jsonObj.get("videoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoUrl").toString()));
      }
      if ((jsonObj.get("videoVastXml") != null && !jsonObj.get("videoVastXml").isJsonNull()) && !jsonObj.get("videoVastXml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `videoVastXml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("videoVastXml").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NativeContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NativeContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NativeContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NativeContent.class));

       return (TypeAdapter<T>) new TypeAdapter<NativeContent>() {
           @Override
           public void write(JsonWriter out, NativeContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NativeContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NativeContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NativeContent
   * @throws IOException if the JSON string is invalid with respect to NativeContent
   */
  public static NativeContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NativeContent.class);
  }

  /**
   * Convert an instance of NativeContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

