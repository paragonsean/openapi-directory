/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Bidder endpoint that receives bid requests.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Endpoint {
  /**
   * The protocol that the bidder endpoint is using.
   */
  @JsonAdapter(BidProtocolEnum.Adapter.class)
  public enum BidProtocolEnum {
    BID_PROTOCOL_UNSPECIFIED("BID_PROTOCOL_UNSPECIFIED"),
    
    GOOGLE_RTB("GOOGLE_RTB"),
    
    OPENRTB_JSON("OPENRTB_JSON"),
    
    OPENRTB_PROTOBUF("OPENRTB_PROTOBUF");

    private String value;

    BidProtocolEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BidProtocolEnum fromValue(String value) {
      for (BidProtocolEnum b : BidProtocolEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BidProtocolEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BidProtocolEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BidProtocolEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BidProtocolEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BidProtocolEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BID_PROTOCOL = "bidProtocol";
  @SerializedName(SERIALIZED_NAME_BID_PROTOCOL)
  private BidProtocolEnum bidProtocol;

  public static final String SERIALIZED_NAME_MAXIMUM_QPS = "maximumQps";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_QPS)
  private String maximumQps;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.
   */
  @JsonAdapter(TradingLocationEnum.Adapter.class)
  public enum TradingLocationEnum {
    TRADING_LOCATION_UNSPECIFIED("TRADING_LOCATION_UNSPECIFIED"),
    
    US_WEST("US_WEST"),
    
    US_EAST("US_EAST"),
    
    EUROPE("EUROPE"),
    
    ASIA("ASIA");

    private String value;

    TradingLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TradingLocationEnum fromValue(String value) {
      for (TradingLocationEnum b : TradingLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TradingLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TradingLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TradingLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TradingLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TradingLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRADING_LOCATION = "tradingLocation";
  @SerializedName(SERIALIZED_NAME_TRADING_LOCATION)
  private TradingLocationEnum tradingLocation;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Endpoint() {
  }

  public Endpoint(
     String name, 
     String url
  ) {
    this();
    this.name = name;
    this.url = url;
  }

  public Endpoint bidProtocol(BidProtocolEnum bidProtocol) {
    this.bidProtocol = bidProtocol;
    return this;
  }

  /**
   * The protocol that the bidder endpoint is using.
   * @return bidProtocol
   */
  @javax.annotation.Nullable
  public BidProtocolEnum getBidProtocol() {
    return bidProtocol;
  }

  public void setBidProtocol(BidProtocolEnum bidProtocol) {
    this.bidProtocol = bidProtocol;
  }


  public Endpoint maximumQps(String maximumQps) {
    this.maximumQps = maximumQps;
    return this;
  }

  /**
   * The maximum number of queries per second allowed to be sent to this server.
   * @return maximumQps
   */
  @javax.annotation.Nullable
  public String getMaximumQps() {
    return maximumQps;
  }

  public void setMaximumQps(String maximumQps) {
    this.maximumQps = maximumQps;
  }


  /**
   * Output only. Name of the endpoint resource that must follow the pattern &#x60;bidders/{bidderAccountId}/endpoints/{endpointId}&#x60;, where {bidderAccountId} is the account ID of the bidder who operates this endpoint, and {endpointId} is a unique ID assigned by the server.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Endpoint tradingLocation(TradingLocationEnum tradingLocation) {
    this.tradingLocation = tradingLocation;
    return this;
  }

  /**
   * The trading location that bid requests should be sent from. See https://developers.google.com/authorized-buyers/rtb/peer-guide#trading-locations for further information.
   * @return tradingLocation
   */
  @javax.annotation.Nullable
  public TradingLocationEnum getTradingLocation() {
    return tradingLocation;
  }

  public void setTradingLocation(TradingLocationEnum tradingLocation) {
    this.tradingLocation = tradingLocation;
  }


  /**
   * Output only. The URL that bid requests should be sent to.
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Endpoint endpoint = (Endpoint) o;
    return Objects.equals(this.bidProtocol, endpoint.bidProtocol) &&
        Objects.equals(this.maximumQps, endpoint.maximumQps) &&
        Objects.equals(this.name, endpoint.name) &&
        Objects.equals(this.tradingLocation, endpoint.tradingLocation) &&
        Objects.equals(this.url, endpoint.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bidProtocol, maximumQps, name, tradingLocation, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Endpoint {\n");
    sb.append("    bidProtocol: ").append(toIndentedString(bidProtocol)).append("\n");
    sb.append("    maximumQps: ").append(toIndentedString(maximumQps)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tradingLocation: ").append(toIndentedString(tradingLocation)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bidProtocol");
    openapiFields.add("maximumQps");
    openapiFields.add("name");
    openapiFields.add("tradingLocation");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Endpoint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Endpoint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Endpoint is not found in the empty JSON string", Endpoint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Endpoint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Endpoint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bidProtocol") != null && !jsonObj.get("bidProtocol").isJsonNull()) && !jsonObj.get("bidProtocol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bidProtocol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bidProtocol").toString()));
      }
      // validate the optional field `bidProtocol`
      if (jsonObj.get("bidProtocol") != null && !jsonObj.get("bidProtocol").isJsonNull()) {
        BidProtocolEnum.validateJsonElement(jsonObj.get("bidProtocol"));
      }
      if ((jsonObj.get("maximumQps") != null && !jsonObj.get("maximumQps").isJsonNull()) && !jsonObj.get("maximumQps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maximumQps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maximumQps").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tradingLocation") != null && !jsonObj.get("tradingLocation").isJsonNull()) && !jsonObj.get("tradingLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tradingLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tradingLocation").toString()));
      }
      // validate the optional field `tradingLocation`
      if (jsonObj.get("tradingLocation") != null && !jsonObj.get("tradingLocation").isJsonNull()) {
        TradingLocationEnum.validateJsonElement(jsonObj.get("tradingLocation"));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Endpoint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Endpoint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Endpoint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Endpoint.class));

       return (TypeAdapter<T>) new TypeAdapter<Endpoint>() {
           @Override
           public void write(JsonWriter out, Endpoint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Endpoint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Endpoint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Endpoint
   * @throws IOException if the JSON string is invalid with respect to Endpoint
   */
  public static Endpoint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Endpoint.class);
  }

  /**
   * Convert an instance of Endpoint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

