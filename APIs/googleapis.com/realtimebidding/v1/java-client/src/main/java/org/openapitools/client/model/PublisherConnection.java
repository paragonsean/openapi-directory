/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An Open Bidding exchange&#39;s connection to a publisher. This is initiated by the publisher for the bidder to review. If approved by the bidder, this means that the bidder agrees to receive bid requests from the publisher.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PublisherConnection {
  /**
   * Whether the publisher has been approved by the bidder.
   */
  @JsonAdapter(BiddingStateEnum.Adapter.class)
  public enum BiddingStateEnum {
    STATE_UNSPECIFIED("STATE_UNSPECIFIED"),
    
    PENDING("PENDING"),
    
    REJECTED("REJECTED"),
    
    APPROVED("APPROVED");

    private String value;

    BiddingStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BiddingStateEnum fromValue(String value) {
      for (BiddingStateEnum b : BiddingStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BiddingStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BiddingStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BiddingStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BiddingStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BiddingStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BIDDING_STATE = "biddingState";
  @SerializedName(SERIALIZED_NAME_BIDDING_STATE)
  private BiddingStateEnum biddingState;

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  /**
   * Output only. Whether the publisher is an Ad Manager or AdMob publisher.
   */
  @JsonAdapter(PublisherPlatformEnum.Adapter.class)
  public enum PublisherPlatformEnum {
    PUBLISHER_PLATFORM_UNSPECIFIED("PUBLISHER_PLATFORM_UNSPECIFIED"),
    
    GOOGLE_AD_MANAGER("GOOGLE_AD_MANAGER"),
    
    ADMOB("ADMOB");

    private String value;

    PublisherPlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PublisherPlatformEnum fromValue(String value) {
      for (PublisherPlatformEnum b : PublisherPlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PublisherPlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PublisherPlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PublisherPlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PublisherPlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PublisherPlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PUBLISHER_PLATFORM = "publisherPlatform";
  @SerializedName(SERIALIZED_NAME_PUBLISHER_PLATFORM)
  private PublisherPlatformEnum publisherPlatform;

  public PublisherConnection() {
  }

  public PublisherConnection(
     String createTime, 
     String displayName, 
     String name, 
     PublisherPlatformEnum publisherPlatform
  ) {
    this();
    this.createTime = createTime;
    this.displayName = displayName;
    this.name = name;
    this.publisherPlatform = publisherPlatform;
  }

  public PublisherConnection biddingState(BiddingStateEnum biddingState) {
    this.biddingState = biddingState;
    return this;
  }

  /**
   * Whether the publisher has been approved by the bidder.
   * @return biddingState
   */
  @javax.annotation.Nullable
  public BiddingStateEnum getBiddingState() {
    return biddingState;
  }

  public void setBiddingState(BiddingStateEnum biddingState) {
    this.biddingState = biddingState;
  }


  /**
   * Output only. The time at which the publisher initiated a connection with the bidder (irrespective of if or when the bidder approves it). This is subsequently updated if the publisher revokes and re-initiates the connection.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. Publisher display name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }



  /**
   * Output only. Name of the publisher connection. This follows the pattern &#x60;bidders/{bidder}/publisherConnections/{publisher}&#x60;, where &#x60;{bidder}&#x60; represents the account ID of the bidder, and &#x60;{publisher}&#x60; is the ads.txt/app-ads.txt publisher ID.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * Output only. Whether the publisher is an Ad Manager or AdMob publisher.
   * @return publisherPlatform
   */
  @javax.annotation.Nullable
  public PublisherPlatformEnum getPublisherPlatform() {
    return publisherPlatform;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PublisherConnection publisherConnection = (PublisherConnection) o;
    return Objects.equals(this.biddingState, publisherConnection.biddingState) &&
        Objects.equals(this.createTime, publisherConnection.createTime) &&
        Objects.equals(this.displayName, publisherConnection.displayName) &&
        Objects.equals(this.name, publisherConnection.name) &&
        Objects.equals(this.publisherPlatform, publisherConnection.publisherPlatform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(biddingState, createTime, displayName, name, publisherPlatform);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PublisherConnection {\n");
    sb.append("    biddingState: ").append(toIndentedString(biddingState)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    publisherPlatform: ").append(toIndentedString(publisherPlatform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("biddingState");
    openapiFields.add("createTime");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("publisherPlatform");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PublisherConnection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PublisherConnection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PublisherConnection is not found in the empty JSON string", PublisherConnection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PublisherConnection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PublisherConnection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("biddingState") != null && !jsonObj.get("biddingState").isJsonNull()) && !jsonObj.get("biddingState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `biddingState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("biddingState").toString()));
      }
      // validate the optional field `biddingState`
      if (jsonObj.get("biddingState") != null && !jsonObj.get("biddingState").isJsonNull()) {
        BiddingStateEnum.validateJsonElement(jsonObj.get("biddingState"));
      }
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("publisherPlatform") != null && !jsonObj.get("publisherPlatform").isJsonNull()) && !jsonObj.get("publisherPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publisherPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publisherPlatform").toString()));
      }
      // validate the optional field `publisherPlatform`
      if (jsonObj.get("publisherPlatform") != null && !jsonObj.get("publisherPlatform").isJsonNull()) {
        PublisherPlatformEnum.validateJsonElement(jsonObj.get("publisherPlatform"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PublisherConnection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PublisherConnection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PublisherConnection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PublisherConnection.class));

       return (TypeAdapter<T>) new TypeAdapter<PublisherConnection>() {
           @Override
           public void write(JsonWriter out, PublisherConnection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PublisherConnection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PublisherConnection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PublisherConnection
   * @throws IOException if the JSON string is invalid with respect to PublisherConnection
   */
  public static PublisherConnection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PublisherConnection.class);
  }

  /**
   * Convert an instance of PublisherConnection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

