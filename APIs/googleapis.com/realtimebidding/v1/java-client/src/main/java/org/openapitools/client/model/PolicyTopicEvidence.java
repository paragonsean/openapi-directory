/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DestinationNotCrawlableEvidence;
import org.openapitools.client.model.DestinationNotWorkingEvidence;
import org.openapitools.client.model.DestinationUrlEvidence;
import org.openapitools.client.model.DomainCallEvidence;
import org.openapitools.client.model.DownloadSizeEvidence;
import org.openapitools.client.model.HttpCallEvidence;
import org.openapitools.client.model.HttpCookieEvidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Evidence associated with a policy topic entry.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PolicyTopicEvidence {
  public static final String SERIALIZED_NAME_DESTINATION_NOT_CRAWLABLE = "destinationNotCrawlable";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NOT_CRAWLABLE)
  private DestinationNotCrawlableEvidence destinationNotCrawlable;

  public static final String SERIALIZED_NAME_DESTINATION_NOT_WORKING = "destinationNotWorking";
  @SerializedName(SERIALIZED_NAME_DESTINATION_NOT_WORKING)
  private DestinationNotWorkingEvidence destinationNotWorking;

  public static final String SERIALIZED_NAME_DESTINATION_URL = "destinationUrl";
  @SerializedName(SERIALIZED_NAME_DESTINATION_URL)
  private DestinationUrlEvidence destinationUrl;

  public static final String SERIALIZED_NAME_DOMAIN_CALL = "domainCall";
  @SerializedName(SERIALIZED_NAME_DOMAIN_CALL)
  private DomainCallEvidence domainCall;

  public static final String SERIALIZED_NAME_DOWNLOAD_SIZE = "downloadSize";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_SIZE)
  private DownloadSizeEvidence downloadSize;

  public static final String SERIALIZED_NAME_HTTP_CALL = "httpCall";
  @SerializedName(SERIALIZED_NAME_HTTP_CALL)
  private HttpCallEvidence httpCall;

  public static final String SERIALIZED_NAME_HTTP_COOKIE = "httpCookie";
  @SerializedName(SERIALIZED_NAME_HTTP_COOKIE)
  private HttpCookieEvidence httpCookie;

  public PolicyTopicEvidence() {
  }

  public PolicyTopicEvidence destinationNotCrawlable(DestinationNotCrawlableEvidence destinationNotCrawlable) {
    this.destinationNotCrawlable = destinationNotCrawlable;
    return this;
  }

  /**
   * Get destinationNotCrawlable
   * @return destinationNotCrawlable
   */
  @javax.annotation.Nullable
  public DestinationNotCrawlableEvidence getDestinationNotCrawlable() {
    return destinationNotCrawlable;
  }

  public void setDestinationNotCrawlable(DestinationNotCrawlableEvidence destinationNotCrawlable) {
    this.destinationNotCrawlable = destinationNotCrawlable;
  }


  public PolicyTopicEvidence destinationNotWorking(DestinationNotWorkingEvidence destinationNotWorking) {
    this.destinationNotWorking = destinationNotWorking;
    return this;
  }

  /**
   * Get destinationNotWorking
   * @return destinationNotWorking
   */
  @javax.annotation.Nullable
  public DestinationNotWorkingEvidence getDestinationNotWorking() {
    return destinationNotWorking;
  }

  public void setDestinationNotWorking(DestinationNotWorkingEvidence destinationNotWorking) {
    this.destinationNotWorking = destinationNotWorking;
  }


  public PolicyTopicEvidence destinationUrl(DestinationUrlEvidence destinationUrl) {
    this.destinationUrl = destinationUrl;
    return this;
  }

  /**
   * Get destinationUrl
   * @return destinationUrl
   */
  @javax.annotation.Nullable
  public DestinationUrlEvidence getDestinationUrl() {
    return destinationUrl;
  }

  public void setDestinationUrl(DestinationUrlEvidence destinationUrl) {
    this.destinationUrl = destinationUrl;
  }


  public PolicyTopicEvidence domainCall(DomainCallEvidence domainCall) {
    this.domainCall = domainCall;
    return this;
  }

  /**
   * Get domainCall
   * @return domainCall
   */
  @javax.annotation.Nullable
  public DomainCallEvidence getDomainCall() {
    return domainCall;
  }

  public void setDomainCall(DomainCallEvidence domainCall) {
    this.domainCall = domainCall;
  }


  public PolicyTopicEvidence downloadSize(DownloadSizeEvidence downloadSize) {
    this.downloadSize = downloadSize;
    return this;
  }

  /**
   * Get downloadSize
   * @return downloadSize
   */
  @javax.annotation.Nullable
  public DownloadSizeEvidence getDownloadSize() {
    return downloadSize;
  }

  public void setDownloadSize(DownloadSizeEvidence downloadSize) {
    this.downloadSize = downloadSize;
  }


  public PolicyTopicEvidence httpCall(HttpCallEvidence httpCall) {
    this.httpCall = httpCall;
    return this;
  }

  /**
   * Get httpCall
   * @return httpCall
   */
  @javax.annotation.Nullable
  public HttpCallEvidence getHttpCall() {
    return httpCall;
  }

  public void setHttpCall(HttpCallEvidence httpCall) {
    this.httpCall = httpCall;
  }


  public PolicyTopicEvidence httpCookie(HttpCookieEvidence httpCookie) {
    this.httpCookie = httpCookie;
    return this;
  }

  /**
   * Get httpCookie
   * @return httpCookie
   */
  @javax.annotation.Nullable
  public HttpCookieEvidence getHttpCookie() {
    return httpCookie;
  }

  public void setHttpCookie(HttpCookieEvidence httpCookie) {
    this.httpCookie = httpCookie;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PolicyTopicEvidence policyTopicEvidence = (PolicyTopicEvidence) o;
    return Objects.equals(this.destinationNotCrawlable, policyTopicEvidence.destinationNotCrawlable) &&
        Objects.equals(this.destinationNotWorking, policyTopicEvidence.destinationNotWorking) &&
        Objects.equals(this.destinationUrl, policyTopicEvidence.destinationUrl) &&
        Objects.equals(this.domainCall, policyTopicEvidence.domainCall) &&
        Objects.equals(this.downloadSize, policyTopicEvidence.downloadSize) &&
        Objects.equals(this.httpCall, policyTopicEvidence.httpCall) &&
        Objects.equals(this.httpCookie, policyTopicEvidence.httpCookie);
  }

  @Override
  public int hashCode() {
    return Objects.hash(destinationNotCrawlable, destinationNotWorking, destinationUrl, domainCall, downloadSize, httpCall, httpCookie);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PolicyTopicEvidence {\n");
    sb.append("    destinationNotCrawlable: ").append(toIndentedString(destinationNotCrawlable)).append("\n");
    sb.append("    destinationNotWorking: ").append(toIndentedString(destinationNotWorking)).append("\n");
    sb.append("    destinationUrl: ").append(toIndentedString(destinationUrl)).append("\n");
    sb.append("    domainCall: ").append(toIndentedString(domainCall)).append("\n");
    sb.append("    downloadSize: ").append(toIndentedString(downloadSize)).append("\n");
    sb.append("    httpCall: ").append(toIndentedString(httpCall)).append("\n");
    sb.append("    httpCookie: ").append(toIndentedString(httpCookie)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("destinationNotCrawlable");
    openapiFields.add("destinationNotWorking");
    openapiFields.add("destinationUrl");
    openapiFields.add("domainCall");
    openapiFields.add("downloadSize");
    openapiFields.add("httpCall");
    openapiFields.add("httpCookie");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PolicyTopicEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PolicyTopicEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PolicyTopicEvidence is not found in the empty JSON string", PolicyTopicEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PolicyTopicEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PolicyTopicEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `destinationNotCrawlable`
      if (jsonObj.get("destinationNotCrawlable") != null && !jsonObj.get("destinationNotCrawlable").isJsonNull()) {
        DestinationNotCrawlableEvidence.validateJsonElement(jsonObj.get("destinationNotCrawlable"));
      }
      // validate the optional field `destinationNotWorking`
      if (jsonObj.get("destinationNotWorking") != null && !jsonObj.get("destinationNotWorking").isJsonNull()) {
        DestinationNotWorkingEvidence.validateJsonElement(jsonObj.get("destinationNotWorking"));
      }
      // validate the optional field `destinationUrl`
      if (jsonObj.get("destinationUrl") != null && !jsonObj.get("destinationUrl").isJsonNull()) {
        DestinationUrlEvidence.validateJsonElement(jsonObj.get("destinationUrl"));
      }
      // validate the optional field `domainCall`
      if (jsonObj.get("domainCall") != null && !jsonObj.get("domainCall").isJsonNull()) {
        DomainCallEvidence.validateJsonElement(jsonObj.get("domainCall"));
      }
      // validate the optional field `downloadSize`
      if (jsonObj.get("downloadSize") != null && !jsonObj.get("downloadSize").isJsonNull()) {
        DownloadSizeEvidence.validateJsonElement(jsonObj.get("downloadSize"));
      }
      // validate the optional field `httpCall`
      if (jsonObj.get("httpCall") != null && !jsonObj.get("httpCall").isJsonNull()) {
        HttpCallEvidence.validateJsonElement(jsonObj.get("httpCall"));
      }
      // validate the optional field `httpCookie`
      if (jsonObj.get("httpCookie") != null && !jsonObj.get("httpCookie").isJsonNull()) {
        HttpCookieEvidence.validateJsonElement(jsonObj.get("httpCookie"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PolicyTopicEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PolicyTopicEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PolicyTopicEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PolicyTopicEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<PolicyTopicEvidence>() {
           @Override
           public void write(JsonWriter out, PolicyTopicEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PolicyTopicEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PolicyTopicEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PolicyTopicEvidence
   * @throws IOException if the JSON string is invalid with respect to PolicyTopicEvidence
   */
  public static PolicyTopicEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PolicyTopicEvidence.class);
  }

  /**
   * Convert an instance of PolicyTopicEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

