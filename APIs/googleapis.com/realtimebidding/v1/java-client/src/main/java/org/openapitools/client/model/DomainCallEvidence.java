/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DomainCalls;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Number of HTTP calls made by a creative, broken down by domain.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DomainCallEvidence {
  public static final String SERIALIZED_NAME_TOP_HTTP_CALL_DOMAINS = "topHttpCallDomains";
  @SerializedName(SERIALIZED_NAME_TOP_HTTP_CALL_DOMAINS)
  private List<DomainCalls> topHttpCallDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOTAL_HTTP_CALL_COUNT = "totalHttpCallCount";
  @SerializedName(SERIALIZED_NAME_TOTAL_HTTP_CALL_COUNT)
  private Integer totalHttpCallCount;

  public DomainCallEvidence() {
  }

  public DomainCallEvidence topHttpCallDomains(List<DomainCalls> topHttpCallDomains) {
    this.topHttpCallDomains = topHttpCallDomains;
    return this;
  }

  public DomainCallEvidence addTopHttpCallDomainsItem(DomainCalls topHttpCallDomainsItem) {
    if (this.topHttpCallDomains == null) {
      this.topHttpCallDomains = new ArrayList<>();
    }
    this.topHttpCallDomains.add(topHttpCallDomainsItem);
    return this;
  }

  /**
   * Breakdown of the most frequent domains called through HTTP by the creative.
   * @return topHttpCallDomains
   */
  @javax.annotation.Nullable
  public List<DomainCalls> getTopHttpCallDomains() {
    return topHttpCallDomains;
  }

  public void setTopHttpCallDomains(List<DomainCalls> topHttpCallDomains) {
    this.topHttpCallDomains = topHttpCallDomains;
  }


  public DomainCallEvidence totalHttpCallCount(Integer totalHttpCallCount) {
    this.totalHttpCallCount = totalHttpCallCount;
    return this;
  }

  /**
   * The total number of HTTP calls made by the creative, including but not limited to the number of calls in the top_http_call_domains.
   * @return totalHttpCallCount
   */
  @javax.annotation.Nullable
  public Integer getTotalHttpCallCount() {
    return totalHttpCallCount;
  }

  public void setTotalHttpCallCount(Integer totalHttpCallCount) {
    this.totalHttpCallCount = totalHttpCallCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainCallEvidence domainCallEvidence = (DomainCallEvidence) o;
    return Objects.equals(this.topHttpCallDomains, domainCallEvidence.topHttpCallDomains) &&
        Objects.equals(this.totalHttpCallCount, domainCallEvidence.totalHttpCallCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(topHttpCallDomains, totalHttpCallCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainCallEvidence {\n");
    sb.append("    topHttpCallDomains: ").append(toIndentedString(topHttpCallDomains)).append("\n");
    sb.append("    totalHttpCallCount: ").append(toIndentedString(totalHttpCallCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topHttpCallDomains");
    openapiFields.add("totalHttpCallCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainCallEvidence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainCallEvidence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainCallEvidence is not found in the empty JSON string", DomainCallEvidence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainCallEvidence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainCallEvidence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("topHttpCallDomains") != null && !jsonObj.get("topHttpCallDomains").isJsonNull()) {
        JsonArray jsonArraytopHttpCallDomains = jsonObj.getAsJsonArray("topHttpCallDomains");
        if (jsonArraytopHttpCallDomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("topHttpCallDomains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `topHttpCallDomains` to be an array in the JSON string but got `%s`", jsonObj.get("topHttpCallDomains").toString()));
          }

          // validate the optional field `topHttpCallDomains` (array)
          for (int i = 0; i < jsonArraytopHttpCallDomains.size(); i++) {
            DomainCalls.validateJsonElement(jsonArraytopHttpCallDomains.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainCallEvidence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainCallEvidence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainCallEvidence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainCallEvidence.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainCallEvidence>() {
           @Override
           public void write(JsonWriter out, DomainCallEvidence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainCallEvidence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainCallEvidence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainCallEvidence
   * @throws IOException if the JSON string is invalid with respect to DomainCallEvidence
   */
  public static DomainCallEvidence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainCallEvidence.class);
  }

  /**
   * Convert an instance of DomainCallEvidence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

