/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The URL-level breakdown for the download size.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UrlDownloadSize {
  public static final String SERIALIZED_NAME_DOWNLOAD_SIZE_KB = "downloadSizeKb";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_SIZE_KB)
  private Integer downloadSizeKb;

  public static final String SERIALIZED_NAME_NORMALIZED_URL = "normalizedUrl";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_URL)
  private String normalizedUrl;

  public UrlDownloadSize() {
  }

  public UrlDownloadSize downloadSizeKb(Integer downloadSizeKb) {
    this.downloadSizeKb = downloadSizeKb;
    return this;
  }

  /**
   * Download size of the URL in kilobytes.
   * @return downloadSizeKb
   */
  @javax.annotation.Nullable
  public Integer getDownloadSizeKb() {
    return downloadSizeKb;
  }

  public void setDownloadSizeKb(Integer downloadSizeKb) {
    this.downloadSizeKb = downloadSizeKb;
  }


  public UrlDownloadSize normalizedUrl(String normalizedUrl) {
    this.normalizedUrl = normalizedUrl;
    return this;
  }

  /**
   * The normalized URL with query parameters and fragment removed.
   * @return normalizedUrl
   */
  @javax.annotation.Nullable
  public String getNormalizedUrl() {
    return normalizedUrl;
  }

  public void setNormalizedUrl(String normalizedUrl) {
    this.normalizedUrl = normalizedUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UrlDownloadSize urlDownloadSize = (UrlDownloadSize) o;
    return Objects.equals(this.downloadSizeKb, urlDownloadSize.downloadSizeKb) &&
        Objects.equals(this.normalizedUrl, urlDownloadSize.normalizedUrl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(downloadSizeKb, normalizedUrl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UrlDownloadSize {\n");
    sb.append("    downloadSizeKb: ").append(toIndentedString(downloadSizeKb)).append("\n");
    sb.append("    normalizedUrl: ").append(toIndentedString(normalizedUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("downloadSizeKb");
    openapiFields.add("normalizedUrl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UrlDownloadSize
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UrlDownloadSize.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UrlDownloadSize is not found in the empty JSON string", UrlDownloadSize.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UrlDownloadSize.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UrlDownloadSize` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("normalizedUrl") != null && !jsonObj.get("normalizedUrl").isJsonNull()) && !jsonObj.get("normalizedUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `normalizedUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("normalizedUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UrlDownloadSize.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UrlDownloadSize' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UrlDownloadSize> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UrlDownloadSize.class));

       return (TypeAdapter<T>) new TypeAdapter<UrlDownloadSize>() {
           @Override
           public void write(JsonWriter out, UrlDownloadSize value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UrlDownloadSize read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UrlDownloadSize given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UrlDownloadSize
   * @throws IOException if the JSON string is invalid with respect to UrlDownloadSize
   */
  public static UrlDownloadSize fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UrlDownloadSize.class);
  }

  /**
   * Convert an instance of UrlDownloadSize to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

