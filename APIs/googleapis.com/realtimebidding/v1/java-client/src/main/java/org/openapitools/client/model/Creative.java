/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreativeServingDecision;
import org.openapitools.client.model.HtmlContent;
import org.openapitools.client.model.NativeContent;
import org.openapitools.client.model.VideoContent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A creative and its classification data.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Creative {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "accountId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private String accountId;

  public static final String SERIALIZED_NAME_AD_CHOICES_DESTINATION_URL = "adChoicesDestinationUrl";
  @SerializedName(SERIALIZED_NAME_AD_CHOICES_DESTINATION_URL)
  private String adChoicesDestinationUrl;

  public static final String SERIALIZED_NAME_ADVERTISER_NAME = "advertiserName";
  @SerializedName(SERIALIZED_NAME_ADVERTISER_NAME)
  private String advertiserName;

  public static final String SERIALIZED_NAME_AGENCY_ID = "agencyId";
  @SerializedName(SERIALIZED_NAME_AGENCY_ID)
  private String agencyId;

  public static final String SERIALIZED_NAME_API_UPDATE_TIME = "apiUpdateTime";
  @SerializedName(SERIALIZED_NAME_API_UPDATE_TIME)
  private String apiUpdateTime;

  /**
   * Output only. The format of this creative. Can be used to filter the response of the creatives.list method.
   */
  @JsonAdapter(CreativeFormatEnum.Adapter.class)
  public enum CreativeFormatEnum {
    CREATIVE_FORMAT_UNSPECIFIED("CREATIVE_FORMAT_UNSPECIFIED"),
    
    HTML("HTML"),
    
    VIDEO("VIDEO"),
    
    NATIVE("NATIVE");

    private String value;

    CreativeFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CreativeFormatEnum fromValue(String value) {
      for (CreativeFormatEnum b : CreativeFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CreativeFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CreativeFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CreativeFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CreativeFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CreativeFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CREATIVE_FORMAT = "creativeFormat";
  @SerializedName(SERIALIZED_NAME_CREATIVE_FORMAT)
  private CreativeFormatEnum creativeFormat;

  public static final String SERIALIZED_NAME_CREATIVE_ID = "creativeId";
  @SerializedName(SERIALIZED_NAME_CREATIVE_ID)
  private String creativeId;

  public static final String SERIALIZED_NAME_CREATIVE_SERVING_DECISION = "creativeServingDecision";
  @SerializedName(SERIALIZED_NAME_CREATIVE_SERVING_DECISION)
  private CreativeServingDecision creativeServingDecision;

  public static final String SERIALIZED_NAME_DEAL_IDS = "dealIds";
  @SerializedName(SERIALIZED_NAME_DEAL_IDS)
  private List<String> dealIds = new ArrayList<>();

  /**
   * Gets or Sets declaredAttributes
   */
  @JsonAdapter(DeclaredAttributesEnum.Adapter.class)
  public enum DeclaredAttributesEnum {
    ATTRIBUTE_UNSPECIFIED("ATTRIBUTE_UNSPECIFIED"),
    
    IMAGE_RICH_MEDIA("IMAGE_RICH_MEDIA"),
    
    ADOBE_FLASH_FLV("ADOBE_FLASH_FLV"),
    
    IS_TAGGED("IS_TAGGED"),
    
    IS_COOKIE_TARGETED("IS_COOKIE_TARGETED"),
    
    IS_USER_INTEREST_TARGETED("IS_USER_INTEREST_TARGETED"),
    
    EXPANDING_DIRECTION_NONE("EXPANDING_DIRECTION_NONE"),
    
    EXPANDING_DIRECTION_UP("EXPANDING_DIRECTION_UP"),
    
    EXPANDING_DIRECTION_DOWN("EXPANDING_DIRECTION_DOWN"),
    
    EXPANDING_DIRECTION_LEFT("EXPANDING_DIRECTION_LEFT"),
    
    EXPANDING_DIRECTION_RIGHT("EXPANDING_DIRECTION_RIGHT"),
    
    EXPANDING_DIRECTION_UP_LEFT("EXPANDING_DIRECTION_UP_LEFT"),
    
    EXPANDING_DIRECTION_UP_RIGHT("EXPANDING_DIRECTION_UP_RIGHT"),
    
    EXPANDING_DIRECTION_DOWN_LEFT("EXPANDING_DIRECTION_DOWN_LEFT"),
    
    EXPANDING_DIRECTION_DOWN_RIGHT("EXPANDING_DIRECTION_DOWN_RIGHT"),
    
    CREATIVE_TYPE_HTML("CREATIVE_TYPE_HTML"),
    
    CREATIVE_TYPE_VAST_VIDEO("CREATIVE_TYPE_VAST_VIDEO"),
    
    EXPANDING_DIRECTION_UP_OR_DOWN("EXPANDING_DIRECTION_UP_OR_DOWN"),
    
    EXPANDING_DIRECTION_LEFT_OR_RIGHT("EXPANDING_DIRECTION_LEFT_OR_RIGHT"),
    
    EXPANDING_DIRECTION_ANY_DIAGONAL("EXPANDING_DIRECTION_ANY_DIAGONAL"),
    
    EXPANDING_ACTION_ROLLOVER_TO_EXPAND("EXPANDING_ACTION_ROLLOVER_TO_EXPAND"),
    
    INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH("INSTREAM_VAST_VIDEO_TYPE_VPAID_FLASH"),
    
    RICH_MEDIA_CAPABILITY_TYPE_MRAID("RICH_MEDIA_CAPABILITY_TYPE_MRAID"),
    
    RICH_MEDIA_CAPABILITY_TYPE_FLASH("RICH_MEDIA_CAPABILITY_TYPE_FLASH"),
    
    RICH_MEDIA_CAPABILITY_TYPE_HTML5("RICH_MEDIA_CAPABILITY_TYPE_HTML5"),
    
    SKIPPABLE_INSTREAM_VIDEO("SKIPPABLE_INSTREAM_VIDEO"),
    
    RICH_MEDIA_CAPABILITY_TYPE_SSL("RICH_MEDIA_CAPABILITY_TYPE_SSL"),
    
    RICH_MEDIA_CAPABILITY_TYPE_NON_SSL("RICH_MEDIA_CAPABILITY_TYPE_NON_SSL"),
    
    RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL("RICH_MEDIA_CAPABILITY_TYPE_INTERSTITIAL"),
    
    NON_SKIPPABLE_INSTREAM_VIDEO("NON_SKIPPABLE_INSTREAM_VIDEO"),
    
    NATIVE_ELIGIBILITY_ELIGIBLE("NATIVE_ELIGIBILITY_ELIGIBLE"),
    
    NON_VPAID("NON_VPAID"),
    
    NATIVE_ELIGIBILITY_NOT_ELIGIBLE("NATIVE_ELIGIBILITY_NOT_ELIGIBLE"),
    
    ANY_INTERSTITIAL("ANY_INTERSTITIAL"),
    
    NON_INTERSTITIAL("NON_INTERSTITIAL"),
    
    IN_BANNER_VIDEO("IN_BANNER_VIDEO"),
    
    RENDERING_SIZELESS_ADX("RENDERING_SIZELESS_ADX"),
    
    OMSDK_1_0("OMSDK_1_0"),
    
    RENDERING_PLAYABLE("RENDERING_PLAYABLE");

    private String value;

    DeclaredAttributesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeclaredAttributesEnum fromValue(String value) {
      for (DeclaredAttributesEnum b : DeclaredAttributesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeclaredAttributesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeclaredAttributesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeclaredAttributesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeclaredAttributesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeclaredAttributesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECLARED_ATTRIBUTES = "declaredAttributes";
  @SerializedName(SERIALIZED_NAME_DECLARED_ATTRIBUTES)
  private List<DeclaredAttributesEnum> declaredAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECLARED_CLICK_THROUGH_URLS = "declaredClickThroughUrls";
  @SerializedName(SERIALIZED_NAME_DECLARED_CLICK_THROUGH_URLS)
  private List<String> declaredClickThroughUrls = new ArrayList<>();

  /**
   * Gets or Sets declaredRestrictedCategories
   */
  @JsonAdapter(DeclaredRestrictedCategoriesEnum.Adapter.class)
  public enum DeclaredRestrictedCategoriesEnum {
    RESTRICTED_CATEGORY_UNSPECIFIED("RESTRICTED_CATEGORY_UNSPECIFIED"),
    
    ALCOHOL("ALCOHOL");

    private String value;

    DeclaredRestrictedCategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DeclaredRestrictedCategoriesEnum fromValue(String value) {
      for (DeclaredRestrictedCategoriesEnum b : DeclaredRestrictedCategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DeclaredRestrictedCategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DeclaredRestrictedCategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DeclaredRestrictedCategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DeclaredRestrictedCategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DeclaredRestrictedCategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DECLARED_RESTRICTED_CATEGORIES = "declaredRestrictedCategories";
  @SerializedName(SERIALIZED_NAME_DECLARED_RESTRICTED_CATEGORIES)
  private List<DeclaredRestrictedCategoriesEnum> declaredRestrictedCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_DECLARED_VENDOR_IDS = "declaredVendorIds";
  @SerializedName(SERIALIZED_NAME_DECLARED_VENDOR_IDS)
  private List<Integer> declaredVendorIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  private HtmlContent html;

  public static final String SERIALIZED_NAME_IMPRESSION_TRACKING_URLS = "impressionTrackingUrls";
  @SerializedName(SERIALIZED_NAME_IMPRESSION_TRACKING_URLS)
  private List<String> impressionTrackingUrls = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NATIVE = "native";
  @SerializedName(SERIALIZED_NAME_NATIVE)
  private NativeContent _native;

  public static final String SERIALIZED_NAME_RENDER_URL = "renderUrl";
  @SerializedName(SERIALIZED_NAME_RENDER_URL)
  private String renderUrl;

  /**
   * Gets or Sets restrictedCategories
   */
  @JsonAdapter(RestrictedCategoriesEnum.Adapter.class)
  public enum RestrictedCategoriesEnum {
    RESTRICTED_CATEGORY_UNSPECIFIED("RESTRICTED_CATEGORY_UNSPECIFIED"),
    
    ALCOHOL("ALCOHOL");

    private String value;

    RestrictedCategoriesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RestrictedCategoriesEnum fromValue(String value) {
      for (RestrictedCategoriesEnum b : RestrictedCategoriesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RestrictedCategoriesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RestrictedCategoriesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RestrictedCategoriesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RestrictedCategoriesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RestrictedCategoriesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESTRICTED_CATEGORIES = "restrictedCategories";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RESTRICTED_CATEGORIES)
  private List<RestrictedCategoriesEnum> restrictedCategories = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERSION)
  private Integer version;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private VideoContent video;

  public Creative() {
  }

  public Creative(
     String accountId, 
     String apiUpdateTime, 
     CreativeFormatEnum creativeFormat, 
     List<String> dealIds, 
     String name, 
     Integer version
  ) {
    this();
    this.accountId = accountId;
    this.apiUpdateTime = apiUpdateTime;
    this.creativeFormat = creativeFormat;
    this.dealIds = dealIds;
    this.name = name;
    this.version = version;
  }

  /**
   * Output only. ID of the buyer account that this creative is owned by. Can be used to filter the response of the creatives.list method with equality and inequality check.
   * @return accountId
   */
  @javax.annotation.Nullable
  public String getAccountId() {
    return accountId;
  }



  public Creative adChoicesDestinationUrl(String adChoicesDestinationUrl) {
    this.adChoicesDestinationUrl = adChoicesDestinationUrl;
    return this;
  }

  /**
   * The link to AdChoices destination page. This is only supported for native ads.
   * @return adChoicesDestinationUrl
   */
  @javax.annotation.Nullable
  public String getAdChoicesDestinationUrl() {
    return adChoicesDestinationUrl;
  }

  public void setAdChoicesDestinationUrl(String adChoicesDestinationUrl) {
    this.adChoicesDestinationUrl = adChoicesDestinationUrl;
  }


  public Creative advertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
    return this;
  }

  /**
   * The name of the company being advertised in the creative. Can be used to filter the response of the creatives.list method.
   * @return advertiserName
   */
  @javax.annotation.Nullable
  public String getAdvertiserName() {
    return advertiserName;
  }

  public void setAdvertiserName(String advertiserName) {
    this.advertiserName = advertiserName;
  }


  public Creative agencyId(String agencyId) {
    this.agencyId = agencyId;
    return this;
  }

  /**
   * The agency ID for this creative.
   * @return agencyId
   */
  @javax.annotation.Nullable
  public String getAgencyId() {
    return agencyId;
  }

  public void setAgencyId(String agencyId) {
    this.agencyId = agencyId;
  }


  /**
   * Output only. The last update timestamp of the creative through the API.
   * @return apiUpdateTime
   */
  @javax.annotation.Nullable
  public String getApiUpdateTime() {
    return apiUpdateTime;
  }



  /**
   * Output only. The format of this creative. Can be used to filter the response of the creatives.list method.
   * @return creativeFormat
   */
  @javax.annotation.Nullable
  public CreativeFormatEnum getCreativeFormat() {
    return creativeFormat;
  }



  public Creative creativeId(String creativeId) {
    this.creativeId = creativeId;
    return this;
  }

  /**
   * Buyer-specific creative ID that references this creative in bid responses. This field is Ignored in update operations. Can be used to filter the response of the creatives.list method. The maximum length of the creative ID is 128 bytes.
   * @return creativeId
   */
  @javax.annotation.Nullable
  public String getCreativeId() {
    return creativeId;
  }

  public void setCreativeId(String creativeId) {
    this.creativeId = creativeId;
  }


  public Creative creativeServingDecision(CreativeServingDecision creativeServingDecision) {
    this.creativeServingDecision = creativeServingDecision;
    return this;
  }

  /**
   * Get creativeServingDecision
   * @return creativeServingDecision
   */
  @javax.annotation.Nullable
  public CreativeServingDecision getCreativeServingDecision() {
    return creativeServingDecision;
  }

  public void setCreativeServingDecision(CreativeServingDecision creativeServingDecision) {
    this.creativeServingDecision = creativeServingDecision;
  }


  /**
   * Output only. IDs of all of the deals with which this creative has been used in bidding. Can be used to filter the response of the creatives.list method.
   * @return dealIds
   */
  @javax.annotation.Nullable
  public List<String> getDealIds() {
    return dealIds;
  }



  public Creative declaredAttributes(List<DeclaredAttributesEnum> declaredAttributes) {
    this.declaredAttributes = declaredAttributes;
    return this;
  }

  public Creative addDeclaredAttributesItem(DeclaredAttributesEnum declaredAttributesItem) {
    if (this.declaredAttributes == null) {
      this.declaredAttributes = new ArrayList<>();
    }
    this.declaredAttributes.add(declaredAttributesItem);
    return this;
  }

  /**
   * All declared attributes for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method. If the &#x60;excluded_attribute&#x60; field of a [bid request](https://developers.google.com/authorized-buyers/rtb/downloads/realtime-bidding-proto\&quot;) contains one of the attributes that were declared or detected for a given creative, and a bid is submitted with that creative, the bid will be filtered before the auction.
   * @return declaredAttributes
   */
  @javax.annotation.Nullable
  public List<DeclaredAttributesEnum> getDeclaredAttributes() {
    return declaredAttributes;
  }

  public void setDeclaredAttributes(List<DeclaredAttributesEnum> declaredAttributes) {
    this.declaredAttributes = declaredAttributes;
  }


  public Creative declaredClickThroughUrls(List<String> declaredClickThroughUrls) {
    this.declaredClickThroughUrls = declaredClickThroughUrls;
    return this;
  }

  public Creative addDeclaredClickThroughUrlsItem(String declaredClickThroughUrlsItem) {
    if (this.declaredClickThroughUrls == null) {
      this.declaredClickThroughUrls = new ArrayList<>();
    }
    this.declaredClickThroughUrls.add(declaredClickThroughUrlsItem);
    return this;
  }

  /**
   * The set of declared destination URLs for the creative. Can be used to filter the response of the creatives.list method.
   * @return declaredClickThroughUrls
   */
  @javax.annotation.Nullable
  public List<String> getDeclaredClickThroughUrls() {
    return declaredClickThroughUrls;
  }

  public void setDeclaredClickThroughUrls(List<String> declaredClickThroughUrls) {
    this.declaredClickThroughUrls = declaredClickThroughUrls;
  }


  public Creative declaredRestrictedCategories(List<DeclaredRestrictedCategoriesEnum> declaredRestrictedCategories) {
    this.declaredRestrictedCategories = declaredRestrictedCategories;
    return this;
  }

  public Creative addDeclaredRestrictedCategoriesItem(DeclaredRestrictedCategoriesEnum declaredRestrictedCategoriesItem) {
    if (this.declaredRestrictedCategories == null) {
      this.declaredRestrictedCategories = new ArrayList<>();
    }
    this.declaredRestrictedCategories.add(declaredRestrictedCategoriesItem);
    return this;
  }

  /**
   * All declared restricted categories for the ads that may be shown from this creative. Can be used to filter the response of the creatives.list method.
   * @return declaredRestrictedCategories
   */
  @javax.annotation.Nullable
  public List<DeclaredRestrictedCategoriesEnum> getDeclaredRestrictedCategories() {
    return declaredRestrictedCategories;
  }

  public void setDeclaredRestrictedCategories(List<DeclaredRestrictedCategoriesEnum> declaredRestrictedCategories) {
    this.declaredRestrictedCategories = declaredRestrictedCategories;
  }


  public Creative declaredVendorIds(List<Integer> declaredVendorIds) {
    this.declaredVendorIds = declaredVendorIds;
    return this;
  }

  public Creative addDeclaredVendorIdsItem(Integer declaredVendorIdsItem) {
    if (this.declaredVendorIds == null) {
      this.declaredVendorIds = new ArrayList<>();
    }
    this.declaredVendorIds.add(declaredVendorIdsItem);
    return this;
  }

  /**
   * IDs for the declared ad technology vendors that may be used by this creative. See https://storage.googleapis.com/adx-rtb-dictionaries/vendors.txt for possible values. Can be used to filter the response of the creatives.list method.
   * @return declaredVendorIds
   */
  @javax.annotation.Nullable
  public List<Integer> getDeclaredVendorIds() {
    return declaredVendorIds;
  }

  public void setDeclaredVendorIds(List<Integer> declaredVendorIds) {
    this.declaredVendorIds = declaredVendorIds;
  }


  public Creative html(HtmlContent html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public HtmlContent getHtml() {
    return html;
  }

  public void setHtml(HtmlContent html) {
    this.html = html;
  }


  public Creative impressionTrackingUrls(List<String> impressionTrackingUrls) {
    this.impressionTrackingUrls = impressionTrackingUrls;
    return this;
  }

  public Creative addImpressionTrackingUrlsItem(String impressionTrackingUrlsItem) {
    if (this.impressionTrackingUrls == null) {
      this.impressionTrackingUrls = new ArrayList<>();
    }
    this.impressionTrackingUrls.add(impressionTrackingUrlsItem);
    return this;
  }

  /**
   * The set of URLs to be called to record an impression.
   * @return impressionTrackingUrls
   */
  @javax.annotation.Nullable
  public List<String> getImpressionTrackingUrls() {
    return impressionTrackingUrls;
  }

  public void setImpressionTrackingUrls(List<String> impressionTrackingUrls) {
    this.impressionTrackingUrls = impressionTrackingUrls;
  }


  /**
   * Output only. Name of the creative. Follows the pattern &#x60;buyers/{buyer}/creatives/{creative}&#x60;, where &#x60;{buyer}&#x60; represents the account ID of the buyer who owns the creative, and &#x60;{creative}&#x60; is the buyer-specific creative ID that references this creative in the bid response.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  public Creative _native(NativeContent _native) {
    this._native = _native;
    return this;
  }

  /**
   * Get _native
   * @return _native
   */
  @javax.annotation.Nullable
  public NativeContent getNative() {
    return _native;
  }

  public void setNative(NativeContent _native) {
    this._native = _native;
  }


  public Creative renderUrl(String renderUrl) {
    this.renderUrl = renderUrl;
    return this;
  }

  /**
   * Experimental field that can be used during the [FLEDGE Origin Trial](/authorized-buyers/rtb/fledge-origin-trial). The URL to fetch an interest group ad used in [TURTLEDOVE on-device auction](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#1-browsers-record-interest-groups\&quot;). This should be unique among all creatives for a given &#x60;accountId&#x60;. This URL should be the same as the URL returned by [generateBid()](https://github.com/WICG/turtledove/blob/main/FLEDGE.md#32-on-device-bidding).
   * @return renderUrl
   */
  @javax.annotation.Nullable
  public String getRenderUrl() {
    return renderUrl;
  }

  public void setRenderUrl(String renderUrl) {
    this.renderUrl = renderUrl;
  }


  @Deprecated
  public Creative restrictedCategories(List<RestrictedCategoriesEnum> restrictedCategories) {
    this.restrictedCategories = restrictedCategories;
    return this;
  }

  public Creative addRestrictedCategoriesItem(RestrictedCategoriesEnum restrictedCategoriesItem) {
    if (this.restrictedCategories == null) {
      this.restrictedCategories = new ArrayList<>();
    }
    this.restrictedCategories.add(restrictedCategoriesItem);
    return this;
  }

  /**
   * All restricted categories for the ads that may be shown from this creative.
   * @return restrictedCategories
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public List<RestrictedCategoriesEnum> getRestrictedCategories() {
    return restrictedCategories;
  }

  @Deprecated
  public void setRestrictedCategories(List<RestrictedCategoriesEnum> restrictedCategories) {
    this.restrictedCategories = restrictedCategories;
  }


  /**
   * Output only. The version of the creative. Version for a new creative is 1 and it increments during subsequent creative updates.
   * @return version
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Integer getVersion() {
    return version;
  }



  public Creative video(VideoContent video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public VideoContent getVideo() {
    return video;
  }

  public void setVideo(VideoContent video) {
    this.video = video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Creative creative = (Creative) o;
    return Objects.equals(this.accountId, creative.accountId) &&
        Objects.equals(this.adChoicesDestinationUrl, creative.adChoicesDestinationUrl) &&
        Objects.equals(this.advertiserName, creative.advertiserName) &&
        Objects.equals(this.agencyId, creative.agencyId) &&
        Objects.equals(this.apiUpdateTime, creative.apiUpdateTime) &&
        Objects.equals(this.creativeFormat, creative.creativeFormat) &&
        Objects.equals(this.creativeId, creative.creativeId) &&
        Objects.equals(this.creativeServingDecision, creative.creativeServingDecision) &&
        Objects.equals(this.dealIds, creative.dealIds) &&
        Objects.equals(this.declaredAttributes, creative.declaredAttributes) &&
        Objects.equals(this.declaredClickThroughUrls, creative.declaredClickThroughUrls) &&
        Objects.equals(this.declaredRestrictedCategories, creative.declaredRestrictedCategories) &&
        Objects.equals(this.declaredVendorIds, creative.declaredVendorIds) &&
        Objects.equals(this.html, creative.html) &&
        Objects.equals(this.impressionTrackingUrls, creative.impressionTrackingUrls) &&
        Objects.equals(this.name, creative.name) &&
        Objects.equals(this._native, creative._native) &&
        Objects.equals(this.renderUrl, creative.renderUrl) &&
        Objects.equals(this.restrictedCategories, creative.restrictedCategories) &&
        Objects.equals(this.version, creative.version) &&
        Objects.equals(this.video, creative.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, adChoicesDestinationUrl, advertiserName, agencyId, apiUpdateTime, creativeFormat, creativeId, creativeServingDecision, dealIds, declaredAttributes, declaredClickThroughUrls, declaredRestrictedCategories, declaredVendorIds, html, impressionTrackingUrls, name, _native, renderUrl, restrictedCategories, version, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Creative {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    adChoicesDestinationUrl: ").append(toIndentedString(adChoicesDestinationUrl)).append("\n");
    sb.append("    advertiserName: ").append(toIndentedString(advertiserName)).append("\n");
    sb.append("    agencyId: ").append(toIndentedString(agencyId)).append("\n");
    sb.append("    apiUpdateTime: ").append(toIndentedString(apiUpdateTime)).append("\n");
    sb.append("    creativeFormat: ").append(toIndentedString(creativeFormat)).append("\n");
    sb.append("    creativeId: ").append(toIndentedString(creativeId)).append("\n");
    sb.append("    creativeServingDecision: ").append(toIndentedString(creativeServingDecision)).append("\n");
    sb.append("    dealIds: ").append(toIndentedString(dealIds)).append("\n");
    sb.append("    declaredAttributes: ").append(toIndentedString(declaredAttributes)).append("\n");
    sb.append("    declaredClickThroughUrls: ").append(toIndentedString(declaredClickThroughUrls)).append("\n");
    sb.append("    declaredRestrictedCategories: ").append(toIndentedString(declaredRestrictedCategories)).append("\n");
    sb.append("    declaredVendorIds: ").append(toIndentedString(declaredVendorIds)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    impressionTrackingUrls: ").append(toIndentedString(impressionTrackingUrls)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    _native: ").append(toIndentedString(_native)).append("\n");
    sb.append("    renderUrl: ").append(toIndentedString(renderUrl)).append("\n");
    sb.append("    restrictedCategories: ").append(toIndentedString(restrictedCategories)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountId");
    openapiFields.add("adChoicesDestinationUrl");
    openapiFields.add("advertiserName");
    openapiFields.add("agencyId");
    openapiFields.add("apiUpdateTime");
    openapiFields.add("creativeFormat");
    openapiFields.add("creativeId");
    openapiFields.add("creativeServingDecision");
    openapiFields.add("dealIds");
    openapiFields.add("declaredAttributes");
    openapiFields.add("declaredClickThroughUrls");
    openapiFields.add("declaredRestrictedCategories");
    openapiFields.add("declaredVendorIds");
    openapiFields.add("html");
    openapiFields.add("impressionTrackingUrls");
    openapiFields.add("name");
    openapiFields.add("native");
    openapiFields.add("renderUrl");
    openapiFields.add("restrictedCategories");
    openapiFields.add("version");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Creative
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Creative.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Creative is not found in the empty JSON string", Creative.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Creative.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Creative` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accountId") != null && !jsonObj.get("accountId").isJsonNull()) && !jsonObj.get("accountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountId").toString()));
      }
      if ((jsonObj.get("adChoicesDestinationUrl") != null && !jsonObj.get("adChoicesDestinationUrl").isJsonNull()) && !jsonObj.get("adChoicesDestinationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adChoicesDestinationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adChoicesDestinationUrl").toString()));
      }
      if ((jsonObj.get("advertiserName") != null && !jsonObj.get("advertiserName").isJsonNull()) && !jsonObj.get("advertiserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `advertiserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("advertiserName").toString()));
      }
      if ((jsonObj.get("agencyId") != null && !jsonObj.get("agencyId").isJsonNull()) && !jsonObj.get("agencyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agencyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agencyId").toString()));
      }
      if ((jsonObj.get("apiUpdateTime") != null && !jsonObj.get("apiUpdateTime").isJsonNull()) && !jsonObj.get("apiUpdateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiUpdateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiUpdateTime").toString()));
      }
      if ((jsonObj.get("creativeFormat") != null && !jsonObj.get("creativeFormat").isJsonNull()) && !jsonObj.get("creativeFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeFormat").toString()));
      }
      // validate the optional field `creativeFormat`
      if (jsonObj.get("creativeFormat") != null && !jsonObj.get("creativeFormat").isJsonNull()) {
        CreativeFormatEnum.validateJsonElement(jsonObj.get("creativeFormat"));
      }
      if ((jsonObj.get("creativeId") != null && !jsonObj.get("creativeId").isJsonNull()) && !jsonObj.get("creativeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creativeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creativeId").toString()));
      }
      // validate the optional field `creativeServingDecision`
      if (jsonObj.get("creativeServingDecision") != null && !jsonObj.get("creativeServingDecision").isJsonNull()) {
        CreativeServingDecision.validateJsonElement(jsonObj.get("creativeServingDecision"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dealIds") != null && !jsonObj.get("dealIds").isJsonNull() && !jsonObj.get("dealIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dealIds` to be an array in the JSON string but got `%s`", jsonObj.get("dealIds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("declaredAttributes") != null && !jsonObj.get("declaredAttributes").isJsonNull() && !jsonObj.get("declaredAttributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `declaredAttributes` to be an array in the JSON string but got `%s`", jsonObj.get("declaredAttributes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("declaredClickThroughUrls") != null && !jsonObj.get("declaredClickThroughUrls").isJsonNull() && !jsonObj.get("declaredClickThroughUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `declaredClickThroughUrls` to be an array in the JSON string but got `%s`", jsonObj.get("declaredClickThroughUrls").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("declaredRestrictedCategories") != null && !jsonObj.get("declaredRestrictedCategories").isJsonNull() && !jsonObj.get("declaredRestrictedCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `declaredRestrictedCategories` to be an array in the JSON string but got `%s`", jsonObj.get("declaredRestrictedCategories").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("declaredVendorIds") != null && !jsonObj.get("declaredVendorIds").isJsonNull() && !jsonObj.get("declaredVendorIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `declaredVendorIds` to be an array in the JSON string but got `%s`", jsonObj.get("declaredVendorIds").toString()));
      }
      // validate the optional field `html`
      if (jsonObj.get("html") != null && !jsonObj.get("html").isJsonNull()) {
        HtmlContent.validateJsonElement(jsonObj.get("html"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("impressionTrackingUrls") != null && !jsonObj.get("impressionTrackingUrls").isJsonNull() && !jsonObj.get("impressionTrackingUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressionTrackingUrls` to be an array in the JSON string but got `%s`", jsonObj.get("impressionTrackingUrls").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `native`
      if (jsonObj.get("native") != null && !jsonObj.get("native").isJsonNull()) {
        NativeContent.validateJsonElement(jsonObj.get("native"));
      }
      if ((jsonObj.get("renderUrl") != null && !jsonObj.get("renderUrl").isJsonNull()) && !jsonObj.get("renderUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `renderUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("renderUrl").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("restrictedCategories") != null && !jsonObj.get("restrictedCategories").isJsonNull() && !jsonObj.get("restrictedCategories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `restrictedCategories` to be an array in the JSON string but got `%s`", jsonObj.get("restrictedCategories").toString()));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        VideoContent.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Creative.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Creative' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Creative> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Creative.class));

       return (TypeAdapter<T>) new TypeAdapter<Creative>() {
           @Override
           public void write(JsonWriter out, Creative value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Creative read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Creative given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Creative
   * @throws IOException if the JSON string is invalid with respect to Creative
   */
  public static Creative fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Creative.class);
  }

  /**
   * Convert an instance of Creative to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

