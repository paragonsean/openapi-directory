/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about each media file in the VAST.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:43:57.718525-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MediaFile {
  public static final String SERIALIZED_NAME_BITRATE = "bitrate";
  @SerializedName(SERIALIZED_NAME_BITRATE)
  private String bitrate;

  /**
   * The MIME type of this media file. Can be used to filter the response of the creatives.list method.
   */
  @JsonAdapter(MimeTypeEnum.Adapter.class)
  public enum MimeTypeEnum {
    VIDEO_MIME_TYPE_UNSPECIFIED("VIDEO_MIME_TYPE_UNSPECIFIED"),
    
    MIME_VIDEO_XFLV("MIME_VIDEO_XFLV"),
    
    MIME_VIDEO_WEBM("MIME_VIDEO_WEBM"),
    
    MIME_VIDEO_MP4("MIME_VIDEO_MP4"),
    
    MIME_VIDEO_OGG("MIME_VIDEO_OGG"),
    
    MIME_VIDEO_YT_HOSTED("MIME_VIDEO_YT_HOSTED"),
    
    MIME_VIDEO_X_MS_WMV("MIME_VIDEO_X_MS_WMV"),
    
    MIME_VIDEO_3_GPP("MIME_VIDEO_3GPP"),
    
    MIME_VIDEO_MOV("MIME_VIDEO_MOV"),
    
    MIME_APPLICATION_SWF("MIME_APPLICATION_SWF"),
    
    MIME_APPLICATION_SURVEY("MIME_APPLICATION_SURVEY"),
    
    MIME_APPLICATION_JAVASCRIPT("MIME_APPLICATION_JAVASCRIPT"),
    
    MIME_APPLICATION_SILVERLIGHT("MIME_APPLICATION_SILVERLIGHT"),
    
    MIME_APPLICATION_MPEGURL("MIME_APPLICATION_MPEGURL"),
    
    MIME_APPLICATION_MPEGDASH("MIME_APPLICATION_MPEGDASH"),
    
    MIME_AUDIO_MP4_A("MIME_AUDIO_MP4A"),
    
    MIME_AUDIO_MP3("MIME_AUDIO_MP3"),
    
    MIME_AUDIO_OGG("MIME_AUDIO_OGG");

    private String value;

    MimeTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MimeTypeEnum fromValue(String value) {
      for (MimeTypeEnum b : MimeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MimeTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MimeTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MimeTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MimeTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MimeTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private MimeTypeEnum mimeType;

  public MediaFile() {
  }

  public MediaFile bitrate(String bitrate) {
    this.bitrate = bitrate;
    return this;
  }

  /**
   * Bitrate of the video file, in Kbps. Can be used to filter the response of the creatives.list method.
   * @return bitrate
   */
  @javax.annotation.Nullable
  public String getBitrate() {
    return bitrate;
  }

  public void setBitrate(String bitrate) {
    this.bitrate = bitrate;
  }


  public MediaFile mimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * The MIME type of this media file. Can be used to filter the response of the creatives.list method.
   * @return mimeType
   */
  @javax.annotation.Nullable
  public MimeTypeEnum getMimeType() {
    return mimeType;
  }

  public void setMimeType(MimeTypeEnum mimeType) {
    this.mimeType = mimeType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaFile mediaFile = (MediaFile) o;
    return Objects.equals(this.bitrate, mediaFile.bitrate) &&
        Objects.equals(this.mimeType, mediaFile.mimeType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitrate, mimeType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaFile {\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bitrate");
    openapiFields.add("mimeType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MediaFile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MediaFile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MediaFile is not found in the empty JSON string", MediaFile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MediaFile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MediaFile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("bitrate") != null && !jsonObj.get("bitrate").isJsonNull()) && !jsonObj.get("bitrate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bitrate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bitrate").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      // validate the optional field `mimeType`
      if (jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) {
        MimeTypeEnum.validateJsonElement(jsonObj.get("mimeType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MediaFile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MediaFile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MediaFile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MediaFile.class));

       return (TypeAdapter<T>) new TypeAdapter<MediaFile>() {
           @Override
           public void write(JsonWriter out, MediaFile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MediaFile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MediaFile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MediaFile
   * @throws IOException if the JSON string is invalid with respect to MediaFile
   */
  public static MediaFile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MediaFile.class);
  }

  /**
   * Convert an instance of MediaFile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

