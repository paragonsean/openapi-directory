/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddTargetedAppsRequest;
import org.openapitools.client.model.AddTargetedPublishersRequest;
import org.openapitools.client.model.AddTargetedSitesRequest;
import org.openapitools.client.model.BatchApprovePublisherConnectionsRequest;
import org.openapitools.client.model.BatchApprovePublisherConnectionsResponse;
import org.openapitools.client.model.BatchRejectPublisherConnectionsRequest;
import org.openapitools.client.model.BatchRejectPublisherConnectionsResponse;
import org.openapitools.client.model.ListBiddersResponse;
import org.openapitools.client.model.ListEndpointsResponse;
import org.openapitools.client.model.ListPretargetingConfigsResponse;
import org.openapitools.client.model.ListPublisherConnectionsResponse;
import org.openapitools.client.model.PretargetingConfig;
import org.openapitools.client.model.RemoveTargetedAppsRequest;
import org.openapitools.client.model.RemoveTargetedPublishersRequest;
import org.openapitools.client.model.RemoveTargetedSitesRequest;
import org.openapitools.client.model.WatchCreativesResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BiddersApi
 */
@Disabled
public class BiddersApiTest {

    private final BiddersApi api = new BiddersApi();

    /**
     * Watches all creatives pertaining to a bidder. It is sufficient to invoke this endpoint once per bidder. A Pub/Sub topic will be created and notifications will be pushed to the topic when any of the bidder&#39;s creatives change status. All of the bidder&#39;s service accounts will have access to read from the topic. Subsequent invocations of this method will return the existing Pub/Sub configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersCreativesWatchTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        WatchCreativesResponse response = api.realtimebiddingBiddersCreativesWatch(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Lists all the bidder&#39;s endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersEndpointsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEndpointsResponse response = api.realtimebiddingBiddersEndpointsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Lists all the bidder accounts that belong to the caller.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBiddersResponse response = api.realtimebiddingBiddersList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Activates a pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsActivateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsActivate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Adds targeted apps to the pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsAddTargetedAppsTest() throws ApiException {
        String pretargetingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddTargetedAppsRequest addTargetedAppsRequest = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsAddTargetedApps(pretargetingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addTargetedAppsRequest);
        // TODO: test validations
    }

    /**
     * Adds targeted publishers to the pretargeting config.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsAddTargetedPublishersTest() throws ApiException {
        String pretargetingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddTargetedPublishersRequest addTargetedPublishersRequest = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsAddTargetedPublishers(pretargetingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addTargetedPublishersRequest);
        // TODO: test validations
    }

    /**
     * Adds targeted sites to the pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsAddTargetedSitesTest() throws ApiException {
        String pretargetingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        AddTargetedSitesRequest addTargetedSitesRequest = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsAddTargetedSites(pretargetingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, addTargetedSitesRequest);
        // TODO: test validations
    }

    /**
     * Creates a pretargeting configuration. A pretargeting configuration&#39;s state (PretargetingConfig.state) is active upon creation, and it will start to affect traffic shortly after. A bidder may create a maximum of 10 pretargeting configurations. Attempts to exceed this maximum results in a 400 bad request error.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PretargetingConfig pretargetingConfig = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pretargetingConfig);
        // TODO: test validations
    }

    /**
     * Deletes a pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.realtimebiddingBiddersPretargetingConfigsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists all pretargeting configurations for a single bidder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPretargetingConfigsResponse response = api.realtimebiddingBiddersPretargetingConfigsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Removes targeted apps from the pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsRemoveTargetedAppsTest() throws ApiException {
        String pretargetingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveTargetedAppsRequest removeTargetedAppsRequest = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsRemoveTargetedApps(pretargetingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeTargetedAppsRequest);
        // TODO: test validations
    }

    /**
     * Removes targeted publishers from the pretargeting config.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishersTest() throws ApiException {
        String pretargetingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveTargetedPublishersRequest removeTargetedPublishersRequest = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsRemoveTargetedPublishers(pretargetingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeTargetedPublishersRequest);
        // TODO: test validations
    }

    /**
     * Removes targeted sites from the pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsRemoveTargetedSitesTest() throws ApiException {
        String pretargetingConfig = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        RemoveTargetedSitesRequest removeTargetedSitesRequest = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsRemoveTargetedSites(pretargetingConfig, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, removeTargetedSitesRequest);
        // TODO: test validations
    }

    /**
     * Suspends a pretargeting configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPretargetingConfigsSuspendTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        PretargetingConfig response = api.realtimebiddingBiddersPretargetingConfigsSuspend(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Batch approves multiple publisher connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPublisherConnectionsBatchApproveTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchApprovePublisherConnectionsRequest batchApprovePublisherConnectionsRequest = null;
        BatchApprovePublisherConnectionsResponse response = api.realtimebiddingBiddersPublisherConnectionsBatchApprove(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchApprovePublisherConnectionsRequest);
        // TODO: test validations
    }

    /**
     * Batch rejects multiple publisher connections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPublisherConnectionsBatchRejectTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchRejectPublisherConnectionsRequest batchRejectPublisherConnectionsRequest = null;
        BatchRejectPublisherConnectionsResponse response = api.realtimebiddingBiddersPublisherConnectionsBatchReject(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchRejectPublisherConnectionsRequest);
        // TODO: test validations
    }

    /**
     * Lists publisher connections for a given bidder.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBiddersPublisherConnectionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        String orderBy = null;
        Integer pageSize = null;
        String pageToken = null;
        ListPublisherConnectionsResponse response = api.realtimebiddingBiddersPublisherConnectionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, orderBy, pageSize, pageToken);
        // TODO: test validations
    }

}
