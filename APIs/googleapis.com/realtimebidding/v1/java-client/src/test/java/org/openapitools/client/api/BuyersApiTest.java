/*
 * Real-time Bidding API
 * Allows external bidders to manage their RTB integration with Google. This includes managing bidder endpoints, QPS quotas, configuring what ad inventory to receive via pretargeting, submitting creatives for verification, and accessing creative metadata such as approval status.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Creative;
import org.openapitools.client.model.GetRemarketingTagResponse;
import org.openapitools.client.model.ListBuyersResponse;
import org.openapitools.client.model.ListCreativesResponse;
import org.openapitools.client.model.ListUserListsResponse;
import org.openapitools.client.model.UserList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for BuyersApi
 */
@Disabled
public class BuyersApiTest {

    private final BuyersApi api = new BuyersApi();

    /**
     * Creates a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersCreativesCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Creative creative = null;
        Creative response = api.realtimebiddingBuyersCreativesCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, creative);
        // TODO: test validations
    }

    /**
     * Lists creatives as they are at the time of the initial request. This call may take multiple hours to complete. For large, paginated requests, this method returns a snapshot of creatives at the time of request for the first page. &#x60;lastStatusUpdate&#x60; and &#x60;creativeServingDecision&#x60; may be outdated for creatives on sequential pages. We recommend [Google Cloud Pub/Sub](//cloud.google.com/pubsub/docs/overview) to view the latest status.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersCreativesListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        String view = null;
        ListCreativesResponse response = api.realtimebiddingBuyersCreativesList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken, view);
        // TODO: test validations
    }

    /**
     * Updates a creative.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersCreativesPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Creative creative = null;
        Creative response = api.realtimebiddingBuyersCreativesPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, creative);
        // TODO: test validations
    }

    /**
     * Lists all buyer account information the calling buyer user or service account is permissioned to manage.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersListTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListBuyersResponse response = api.realtimebiddingBuyersList($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Changes the status of a user list to CLOSED. This prevents new users from being added to the user list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsCloseTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        UserList response = api.realtimebiddingBuyersUserListsClose(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a new user list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserList userList = null;
        UserList response = api.realtimebiddingBuyersUserListsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userList);
        // TODO: test validations
    }

    /**
     * Gets a user list by its name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String view = null;
        UserList response = api.realtimebiddingBuyersUserListsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, view);
        // TODO: test validations
    }

    /**
     * This has been sunset as of October 2023, and will return an error response if called. For more information, see the release notes: https://developers.google.com/authorized-buyers/apis/relnotes#real-time-bidding-api Gets remarketing tag for a buyer. A remarketing tag is a piece of JavaScript code that can be placed on a web page. When a user visits a page containing a remarketing tag, Google adds the user to a user list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsGetRemarketingTagTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        GetRemarketingTagResponse response = api.realtimebiddingBuyersUserListsGetRemarketingTag(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists the user lists visible to the current user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListUserListsResponse response = api.realtimebiddingBuyersUserListsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Changes the status of a user list to OPEN. This allows new users to be added to the user list.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsOpenTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        UserList response = api.realtimebiddingBuyersUserListsOpen(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Updates the given user list. Only user lists with URLRestrictions can be updated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void realtimebiddingBuyersUserListsUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserList userList = null;
        UserList response = api.realtimebiddingBuyersUserListsUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userList);
        // TODO: test validations
    }

}
