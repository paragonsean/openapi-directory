/**
 * Policy Troubleshooter API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GoogleIamV1AuditLogConfig from './GoogleIamV1AuditLogConfig';

/**
 * The GoogleIamV1AuditConfig model module.
 * @module model/GoogleIamV1AuditConfig
 * @version v1
 */
class GoogleIamV1AuditConfig {
    /**
     * Constructs a new <code>GoogleIamV1AuditConfig</code>.
     * Specifies the audit configuration for a service. The configuration determines which permission types are logged, and what identities, if any, are exempted from logging. An AuditConfig must have one or more AuditLogConfigs. If there are AuditConfigs for both &#x60;allServices&#x60; and a specific service, the union of the two AuditConfigs is used for that service: the log_types specified in each AuditConfig are enabled, and the exempted_members in each AuditLogConfig are exempted. Example Policy with multiple AuditConfigs: { \&quot;audit_configs\&quot;: [ { \&quot;service\&quot;: \&quot;allServices\&quot;, \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:jose@example.com\&quot; ] }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot; }, { \&quot;log_type\&quot;: \&quot;ADMIN_READ\&quot; } ] }, { \&quot;service\&quot;: \&quot;sampleservice.googleapis.com\&quot;, \&quot;audit_log_configs\&quot;: [ { \&quot;log_type\&quot;: \&quot;DATA_READ\&quot; }, { \&quot;log_type\&quot;: \&quot;DATA_WRITE\&quot;, \&quot;exempted_members\&quot;: [ \&quot;user:aliya@example.com\&quot; ] } ] } ] } For sampleservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ logging. It also exempts &#x60;jose@example.com&#x60; from DATA_READ logging, and &#x60;aliya@example.com&#x60; from DATA_WRITE logging.
     * @alias module:model/GoogleIamV1AuditConfig
     */
    constructor() { 
        
        GoogleIamV1AuditConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GoogleIamV1AuditConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GoogleIamV1AuditConfig} obj Optional instance to populate.
     * @return {module:model/GoogleIamV1AuditConfig} The populated <code>GoogleIamV1AuditConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GoogleIamV1AuditConfig();

            if (data.hasOwnProperty('auditLogConfigs')) {
                obj['auditLogConfigs'] = ApiClient.convertToType(data['auditLogConfigs'], [GoogleIamV1AuditLogConfig]);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GoogleIamV1AuditConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GoogleIamV1AuditConfig</code>.
     */
    static validateJSON(data) {
        if (data['auditLogConfigs']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['auditLogConfigs'])) {
                throw new Error("Expected the field `auditLogConfigs` to be an array in the JSON data but got " + data['auditLogConfigs']);
            }
            // validate the optional field `auditLogConfigs` (array)
            for (const item of data['auditLogConfigs']) {
                GoogleIamV1AuditLogConfig.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }

        return true;
    }


}



/**
 * The configuration for logging of each type of permission.
 * @member {Array.<module:model/GoogleIamV1AuditLogConfig>} auditLogConfigs
 */
GoogleIamV1AuditConfig.prototype['auditLogConfigs'] = undefined;

/**
 * Specifies a service that will be enabled for audit logging. For example, `storage.googleapis.com`, `cloudsql.googleapis.com`. `allServices` is a special value that covers all services.
 * @member {String} service
 */
GoogleIamV1AuditConfig.prototype['service'] = undefined;






export default GoogleIamV1AuditConfig;

