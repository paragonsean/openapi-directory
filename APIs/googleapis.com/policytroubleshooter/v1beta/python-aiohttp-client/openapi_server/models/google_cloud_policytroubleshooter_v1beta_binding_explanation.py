# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.google_cloud_policytroubleshooter_v1beta_binding_explanation_annotated_membership import GoogleCloudPolicytroubleshooterV1betaBindingExplanationAnnotatedMembership
from openapi_server.models.google_type_expr import GoogleTypeExpr
from openapi_server import util


class GoogleCloudPolicytroubleshooterV1betaBindingExplanation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access: str=None, condition: GoogleTypeExpr=None, memberships: Dict[str, GoogleCloudPolicytroubleshooterV1betaBindingExplanationAnnotatedMembership]=None, relevance: str=None, role: str=None, role_permission: str=None, role_permission_relevance: str=None):
        """GoogleCloudPolicytroubleshooterV1betaBindingExplanation - a model defined in OpenAPI

        :param access: The access of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :param condition: The condition of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :param memberships: The memberships of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :param relevance: The relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :param role: The role of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :param role_permission: The role_permission of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :param role_permission_relevance: The role_permission_relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        """
        self.openapi_types = {
            'access': str,
            'condition': GoogleTypeExpr,
            'memberships': Dict[str, GoogleCloudPolicytroubleshooterV1betaBindingExplanationAnnotatedMembership],
            'relevance': str,
            'role': str,
            'role_permission': str,
            'role_permission_relevance': str
        }

        self.attribute_map = {
            'access': 'access',
            'condition': 'condition',
            'memberships': 'memberships',
            'relevance': 'relevance',
            'role': 'role',
            'role_permission': 'rolePermission',
            'role_permission_relevance': 'rolePermissionRelevance'
        }

        self._access = access
        self._condition = condition
        self._memberships = memberships
        self._relevance = relevance
        self._role = role
        self._role_permission = role_permission
        self._role_permission_relevance = role_permission_relevance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GoogleCloudPolicytroubleshooterV1betaBindingExplanation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GoogleCloudPolicytroubleshooterV1betaBindingExplanation of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access(self):
        """Gets the access of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        Indicates whether _this binding_ provides the specified permission to the specified member for the specified resource. This field does _not_ indicate whether the member actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the member actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.

        :return: The access of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: str
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        Indicates whether _this binding_ provides the specified permission to the specified member for the specified resource. This field does _not_ indicate whether the member actually has the permission for the resource. There might be another binding that overrides this binding. To determine whether the member actually has the permission, use the `access` field in the TroubleshootIamPolicyResponse.

        :param access: The access of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type access: str
        """
        allowed_values = ["ACCESS_STATE_UNSPECIFIED", "GRANTED", "NOT_GRANTED", "UNKNOWN_CONDITIONAL", "UNKNOWN_INFO_DENIED"]  # noqa: E501
        if access not in allowed_values:
            raise ValueError(
                "Invalid value for `access` ({0}), must be one of {1}"
                .format(access, allowed_values)
            )

        self._access = access

    @property
    def condition(self):
        """Gets the condition of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.


        :return: The condition of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: GoogleTypeExpr
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.


        :param condition: The condition of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type condition: GoogleTypeExpr
        """

        self._condition = condition

    @property
    def memberships(self):
        """Gets the memberships of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        Indicates whether each member in the binding includes the member specified in the request, either directly or indirectly. Each key identifies a member in the binding, and each value indicates whether the member in the binding includes the member in the request. For example, suppose that a binding includes the following members: * `user:alice@example.com` * `group:product-eng@example.com` You want to troubleshoot access for `user:bob@example.com`. This user is a member of the group `group:product-eng@example.com`. For the first member in the binding, the key is `user:alice@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_NOT_INCLUDED`. For the second member in the binding, the key is `group:product-eng@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_INCLUDED`.

        :return: The memberships of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: Dict[str, GoogleCloudPolicytroubleshooterV1betaBindingExplanationAnnotatedMembership]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships):
        """Sets the memberships of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        Indicates whether each member in the binding includes the member specified in the request, either directly or indirectly. Each key identifies a member in the binding, and each value indicates whether the member in the binding includes the member in the request. For example, suppose that a binding includes the following members: * `user:alice@example.com` * `group:product-eng@example.com` You want to troubleshoot access for `user:bob@example.com`. This user is a member of the group `group:product-eng@example.com`. For the first member in the binding, the key is `user:alice@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_NOT_INCLUDED`. For the second member in the binding, the key is `group:product-eng@example.com`, and the `membership` field in the value is set to `MEMBERSHIP_INCLUDED`.

        :param memberships: The memberships of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type memberships: Dict[str, GoogleCloudPolicytroubleshooterV1betaBindingExplanationAnnotatedMembership]
        """

        self._memberships = memberships

    @property
    def relevance(self):
        """Gets the relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        The relevance of this binding to the overall determination for the entire policy.

        :return: The relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: str
        """
        return self._relevance

    @relevance.setter
    def relevance(self, relevance):
        """Sets the relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        The relevance of this binding to the overall determination for the entire policy.

        :param relevance: The relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type relevance: str
        """
        allowed_values = ["HEURISTIC_RELEVANCE_UNSPECIFIED", "NORMAL", "HIGH"]  # noqa: E501
        if relevance not in allowed_values:
            raise ValueError(
                "Invalid value for `relevance` ({0}), must be one of {1}"
                .format(relevance, allowed_values)
            )

        self._relevance = relevance

    @property
    def role(self):
        """Gets the role of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        The role that this binding grants. For example, `roles/compute.serviceAgent`. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.

        :return: The role of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        The role that this binding grants. For example, `roles/compute.serviceAgent`. For a complete list of predefined IAM roles, as well as the permissions in each role, see https://cloud.google.com/iam/help/roles/reference.

        :param role: The role of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type role: str
        """

        self._role = role

    @property
    def role_permission(self):
        """Gets the role_permission of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        Indicates whether the role granted by this binding contains the specified permission.

        :return: The role_permission of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: str
        """
        return self._role_permission

    @role_permission.setter
    def role_permission(self, role_permission):
        """Sets the role_permission of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        Indicates whether the role granted by this binding contains the specified permission.

        :param role_permission: The role_permission of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type role_permission: str
        """
        allowed_values = ["ROLE_PERMISSION_UNSPECIFIED", "ROLE_PERMISSION_INCLUDED", "ROLE_PERMISSION_NOT_INCLUDED", "ROLE_PERMISSION_UNKNOWN_INFO_DENIED"]  # noqa: E501
        if role_permission not in allowed_values:
            raise ValueError(
                "Invalid value for `role_permission` ({0}), must be one of {1}"
                .format(role_permission, allowed_values)
            )

        self._role_permission = role_permission

    @property
    def role_permission_relevance(self):
        """Gets the role_permission_relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        The relevance of the permission's existence, or nonexistence, in the role to the overall determination for the entire policy.

        :return: The role_permission_relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :rtype: str
        """
        return self._role_permission_relevance

    @role_permission_relevance.setter
    def role_permission_relevance(self, role_permission_relevance):
        """Sets the role_permission_relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.

        The relevance of the permission's existence, or nonexistence, in the role to the overall determination for the entire policy.

        :param role_permission_relevance: The role_permission_relevance of this GoogleCloudPolicytroubleshooterV1betaBindingExplanation.
        :type role_permission_relevance: str
        """
        allowed_values = ["HEURISTIC_RELEVANCE_UNSPECIFIED", "NORMAL", "HIGH"]  # noqa: E501
        if role_permission_relevance not in allowed_values:
            raise ValueError(
                "Invalid value for `role_permission_relevance` ({0}), must be one of {1}"
                .format(role_permission_relevance, allowed_values)
            )

        self._role_permission_relevance = role_permission_relevance
