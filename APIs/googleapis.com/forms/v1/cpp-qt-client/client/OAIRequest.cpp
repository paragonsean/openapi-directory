/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_create_item_isSet = false;
    m_create_item_isValid = false;

    m_delete_item_isSet = false;
    m_delete_item_isValid = false;

    m_move_item_isSet = false;
    m_move_item_isValid = false;

    m_update_form_info_isSet = false;
    m_update_form_info_isValid = false;

    m_update_item_isSet = false;
    m_update_item_isValid = false;

    m_update_settings_isSet = false;
    m_update_settings_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_create_item_isValid = ::OpenAPI::fromJsonValue(m_create_item, json[QString("createItem")]);
    m_create_item_isSet = !json[QString("createItem")].isNull() && m_create_item_isValid;

    m_delete_item_isValid = ::OpenAPI::fromJsonValue(m_delete_item, json[QString("deleteItem")]);
    m_delete_item_isSet = !json[QString("deleteItem")].isNull() && m_delete_item_isValid;

    m_move_item_isValid = ::OpenAPI::fromJsonValue(m_move_item, json[QString("moveItem")]);
    m_move_item_isSet = !json[QString("moveItem")].isNull() && m_move_item_isValid;

    m_update_form_info_isValid = ::OpenAPI::fromJsonValue(m_update_form_info, json[QString("updateFormInfo")]);
    m_update_form_info_isSet = !json[QString("updateFormInfo")].isNull() && m_update_form_info_isValid;

    m_update_item_isValid = ::OpenAPI::fromJsonValue(m_update_item, json[QString("updateItem")]);
    m_update_item_isSet = !json[QString("updateItem")].isNull() && m_update_item_isValid;

    m_update_settings_isValid = ::OpenAPI::fromJsonValue(m_update_settings, json[QString("updateSettings")]);
    m_update_settings_isSet = !json[QString("updateSettings")].isNull() && m_update_settings_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_create_item.isSet()) {
        obj.insert(QString("createItem"), ::OpenAPI::toJsonValue(m_create_item));
    }
    if (m_delete_item.isSet()) {
        obj.insert(QString("deleteItem"), ::OpenAPI::toJsonValue(m_delete_item));
    }
    if (m_move_item.isSet()) {
        obj.insert(QString("moveItem"), ::OpenAPI::toJsonValue(m_move_item));
    }
    if (m_update_form_info.isSet()) {
        obj.insert(QString("updateFormInfo"), ::OpenAPI::toJsonValue(m_update_form_info));
    }
    if (m_update_item.isSet()) {
        obj.insert(QString("updateItem"), ::OpenAPI::toJsonValue(m_update_item));
    }
    if (m_update_settings.isSet()) {
        obj.insert(QString("updateSettings"), ::OpenAPI::toJsonValue(m_update_settings));
    }
    return obj;
}

OAICreateItemRequest OAIRequest::getCreateItem() const {
    return m_create_item;
}
void OAIRequest::setCreateItem(const OAICreateItemRequest &create_item) {
    m_create_item = create_item;
    m_create_item_isSet = true;
}

bool OAIRequest::is_create_item_Set() const{
    return m_create_item_isSet;
}

bool OAIRequest::is_create_item_Valid() const{
    return m_create_item_isValid;
}

OAIDeleteItemRequest OAIRequest::getDeleteItem() const {
    return m_delete_item;
}
void OAIRequest::setDeleteItem(const OAIDeleteItemRequest &delete_item) {
    m_delete_item = delete_item;
    m_delete_item_isSet = true;
}

bool OAIRequest::is_delete_item_Set() const{
    return m_delete_item_isSet;
}

bool OAIRequest::is_delete_item_Valid() const{
    return m_delete_item_isValid;
}

OAIMoveItemRequest OAIRequest::getMoveItem() const {
    return m_move_item;
}
void OAIRequest::setMoveItem(const OAIMoveItemRequest &move_item) {
    m_move_item = move_item;
    m_move_item_isSet = true;
}

bool OAIRequest::is_move_item_Set() const{
    return m_move_item_isSet;
}

bool OAIRequest::is_move_item_Valid() const{
    return m_move_item_isValid;
}

OAIUpdateFormInfoRequest OAIRequest::getUpdateFormInfo() const {
    return m_update_form_info;
}
void OAIRequest::setUpdateFormInfo(const OAIUpdateFormInfoRequest &update_form_info) {
    m_update_form_info = update_form_info;
    m_update_form_info_isSet = true;
}

bool OAIRequest::is_update_form_info_Set() const{
    return m_update_form_info_isSet;
}

bool OAIRequest::is_update_form_info_Valid() const{
    return m_update_form_info_isValid;
}

OAIUpdateItemRequest OAIRequest::getUpdateItem() const {
    return m_update_item;
}
void OAIRequest::setUpdateItem(const OAIUpdateItemRequest &update_item) {
    m_update_item = update_item;
    m_update_item_isSet = true;
}

bool OAIRequest::is_update_item_Set() const{
    return m_update_item_isSet;
}

bool OAIRequest::is_update_item_Valid() const{
    return m_update_item_isValid;
}

OAIUpdateSettingsRequest OAIRequest::getUpdateSettings() const {
    return m_update_settings;
}
void OAIRequest::setUpdateSettings(const OAIUpdateSettingsRequest &update_settings) {
    m_update_settings = update_settings;
    m_update_settings_isSet = true;
}

bool OAIRequest::is_update_settings_Set() const{
    return m_update_settings_isSet;
}

bool OAIRequest::is_update_settings_Valid() const{
    return m_update_settings_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_move_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_form_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_update_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
