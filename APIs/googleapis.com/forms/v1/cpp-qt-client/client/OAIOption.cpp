/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOption.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOption::OAIOption(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOption::OAIOption() {
    this->initializeModel();
}

OAIOption::~OAIOption() {}

void OAIOption::initializeModel() {

    m_go_to_action_isSet = false;
    m_go_to_action_isValid = false;

    m_go_to_section_id_isSet = false;
    m_go_to_section_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_is_other_isSet = false;
    m_is_other_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIOption::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOption::fromJsonObject(QJsonObject json) {

    m_go_to_action_isValid = ::OpenAPI::fromJsonValue(m_go_to_action, json[QString("goToAction")]);
    m_go_to_action_isSet = !json[QString("goToAction")].isNull() && m_go_to_action_isValid;

    m_go_to_section_id_isValid = ::OpenAPI::fromJsonValue(m_go_to_section_id, json[QString("goToSectionId")]);
    m_go_to_section_id_isSet = !json[QString("goToSectionId")].isNull() && m_go_to_section_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_is_other_isValid = ::OpenAPI::fromJsonValue(m_is_other, json[QString("isOther")]);
    m_is_other_isSet = !json[QString("isOther")].isNull() && m_is_other_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIOption::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOption::asJsonObject() const {
    QJsonObject obj;
    if (m_go_to_action_isSet) {
        obj.insert(QString("goToAction"), ::OpenAPI::toJsonValue(m_go_to_action));
    }
    if (m_go_to_section_id_isSet) {
        obj.insert(QString("goToSectionId"), ::OpenAPI::toJsonValue(m_go_to_section_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_is_other_isSet) {
        obj.insert(QString("isOther"), ::OpenAPI::toJsonValue(m_is_other));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIOption::getGoToAction() const {
    return m_go_to_action;
}
void OAIOption::setGoToAction(const QString &go_to_action) {
    m_go_to_action = go_to_action;
    m_go_to_action_isSet = true;
}

bool OAIOption::is_go_to_action_Set() const{
    return m_go_to_action_isSet;
}

bool OAIOption::is_go_to_action_Valid() const{
    return m_go_to_action_isValid;
}

QString OAIOption::getGoToSectionId() const {
    return m_go_to_section_id;
}
void OAIOption::setGoToSectionId(const QString &go_to_section_id) {
    m_go_to_section_id = go_to_section_id;
    m_go_to_section_id_isSet = true;
}

bool OAIOption::is_go_to_section_id_Set() const{
    return m_go_to_section_id_isSet;
}

bool OAIOption::is_go_to_section_id_Valid() const{
    return m_go_to_section_id_isValid;
}

OAIImage OAIOption::getImage() const {
    return m_image;
}
void OAIOption::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIOption::is_image_Set() const{
    return m_image_isSet;
}

bool OAIOption::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIOption::isIsOther() const {
    return m_is_other;
}
void OAIOption::setIsOther(const bool &is_other) {
    m_is_other = is_other;
    m_is_other_isSet = true;
}

bool OAIOption::is_is_other_Set() const{
    return m_is_other_isSet;
}

bool OAIOption::is_is_other_Valid() const{
    return m_is_other_isValid;
}

QString OAIOption::getValue() const {
    return m_value;
}
void OAIOption::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIOption::is_value_Set() const{
    return m_value_isSet;
}

bool OAIOption::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIOption::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_go_to_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_go_to_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_other_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOption::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
