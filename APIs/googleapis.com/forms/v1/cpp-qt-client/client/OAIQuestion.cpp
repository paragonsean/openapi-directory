/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestion::OAIQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestion::OAIQuestion() {
    this->initializeModel();
}

OAIQuestion::~OAIQuestion() {}

void OAIQuestion::initializeModel() {

    m_choice_question_isSet = false;
    m_choice_question_isValid = false;

    m_date_question_isSet = false;
    m_date_question_isValid = false;

    m_file_upload_question_isSet = false;
    m_file_upload_question_isValid = false;

    m_grading_isSet = false;
    m_grading_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_row_question_isSet = false;
    m_row_question_isValid = false;

    m_scale_question_isSet = false;
    m_scale_question_isValid = false;

    m_text_question_isSet = false;
    m_text_question_isValid = false;

    m_time_question_isSet = false;
    m_time_question_isValid = false;
}

void OAIQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestion::fromJsonObject(QJsonObject json) {

    m_choice_question_isValid = ::OpenAPI::fromJsonValue(m_choice_question, json[QString("choiceQuestion")]);
    m_choice_question_isSet = !json[QString("choiceQuestion")].isNull() && m_choice_question_isValid;

    m_date_question_isValid = ::OpenAPI::fromJsonValue(m_date_question, json[QString("dateQuestion")]);
    m_date_question_isSet = !json[QString("dateQuestion")].isNull() && m_date_question_isValid;

    m_file_upload_question_isValid = ::OpenAPI::fromJsonValue(m_file_upload_question, json[QString("fileUploadQuestion")]);
    m_file_upload_question_isSet = !json[QString("fileUploadQuestion")].isNull() && m_file_upload_question_isValid;

    m_grading_isValid = ::OpenAPI::fromJsonValue(m_grading, json[QString("grading")]);
    m_grading_isSet = !json[QString("grading")].isNull() && m_grading_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("questionId")]);
    m_question_id_isSet = !json[QString("questionId")].isNull() && m_question_id_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_row_question_isValid = ::OpenAPI::fromJsonValue(m_row_question, json[QString("rowQuestion")]);
    m_row_question_isSet = !json[QString("rowQuestion")].isNull() && m_row_question_isValid;

    m_scale_question_isValid = ::OpenAPI::fromJsonValue(m_scale_question, json[QString("scaleQuestion")]);
    m_scale_question_isSet = !json[QString("scaleQuestion")].isNull() && m_scale_question_isValid;

    m_text_question_isValid = ::OpenAPI::fromJsonValue(m_text_question, json[QString("textQuestion")]);
    m_text_question_isSet = !json[QString("textQuestion")].isNull() && m_text_question_isValid;

    m_time_question_isValid = ::OpenAPI::fromJsonValue(m_time_question, json[QString("timeQuestion")]);
    m_time_question_isSet = !json[QString("timeQuestion")].isNull() && m_time_question_isValid;
}

QString OAIQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_choice_question.isSet()) {
        obj.insert(QString("choiceQuestion"), ::OpenAPI::toJsonValue(m_choice_question));
    }
    if (m_date_question.isSet()) {
        obj.insert(QString("dateQuestion"), ::OpenAPI::toJsonValue(m_date_question));
    }
    if (m_file_upload_question.isSet()) {
        obj.insert(QString("fileUploadQuestion"), ::OpenAPI::toJsonValue(m_file_upload_question));
    }
    if (m_grading.isSet()) {
        obj.insert(QString("grading"), ::OpenAPI::toJsonValue(m_grading));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("questionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_row_question.isSet()) {
        obj.insert(QString("rowQuestion"), ::OpenAPI::toJsonValue(m_row_question));
    }
    if (m_scale_question.isSet()) {
        obj.insert(QString("scaleQuestion"), ::OpenAPI::toJsonValue(m_scale_question));
    }
    if (m_text_question.isSet()) {
        obj.insert(QString("textQuestion"), ::OpenAPI::toJsonValue(m_text_question));
    }
    if (m_time_question.isSet()) {
        obj.insert(QString("timeQuestion"), ::OpenAPI::toJsonValue(m_time_question));
    }
    return obj;
}

OAIChoiceQuestion OAIQuestion::getChoiceQuestion() const {
    return m_choice_question;
}
void OAIQuestion::setChoiceQuestion(const OAIChoiceQuestion &choice_question) {
    m_choice_question = choice_question;
    m_choice_question_isSet = true;
}

bool OAIQuestion::is_choice_question_Set() const{
    return m_choice_question_isSet;
}

bool OAIQuestion::is_choice_question_Valid() const{
    return m_choice_question_isValid;
}

OAIDateQuestion OAIQuestion::getDateQuestion() const {
    return m_date_question;
}
void OAIQuestion::setDateQuestion(const OAIDateQuestion &date_question) {
    m_date_question = date_question;
    m_date_question_isSet = true;
}

bool OAIQuestion::is_date_question_Set() const{
    return m_date_question_isSet;
}

bool OAIQuestion::is_date_question_Valid() const{
    return m_date_question_isValid;
}

OAIFileUploadQuestion OAIQuestion::getFileUploadQuestion() const {
    return m_file_upload_question;
}
void OAIQuestion::setFileUploadQuestion(const OAIFileUploadQuestion &file_upload_question) {
    m_file_upload_question = file_upload_question;
    m_file_upload_question_isSet = true;
}

bool OAIQuestion::is_file_upload_question_Set() const{
    return m_file_upload_question_isSet;
}

bool OAIQuestion::is_file_upload_question_Valid() const{
    return m_file_upload_question_isValid;
}

OAIGrading OAIQuestion::getGrading() const {
    return m_grading;
}
void OAIQuestion::setGrading(const OAIGrading &grading) {
    m_grading = grading;
    m_grading_isSet = true;
}

bool OAIQuestion::is_grading_Set() const{
    return m_grading_isSet;
}

bool OAIQuestion::is_grading_Valid() const{
    return m_grading_isValid;
}

QString OAIQuestion::getQuestionId() const {
    return m_question_id;
}
void OAIQuestion::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIQuestion::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIQuestion::is_question_id_Valid() const{
    return m_question_id_isValid;
}

bool OAIQuestion::isRequired() const {
    return m_required;
}
void OAIQuestion::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAIQuestion::is_required_Set() const{
    return m_required_isSet;
}

bool OAIQuestion::is_required_Valid() const{
    return m_required_isValid;
}

OAIRowQuestion OAIQuestion::getRowQuestion() const {
    return m_row_question;
}
void OAIQuestion::setRowQuestion(const OAIRowQuestion &row_question) {
    m_row_question = row_question;
    m_row_question_isSet = true;
}

bool OAIQuestion::is_row_question_Set() const{
    return m_row_question_isSet;
}

bool OAIQuestion::is_row_question_Valid() const{
    return m_row_question_isValid;
}

OAIScaleQuestion OAIQuestion::getScaleQuestion() const {
    return m_scale_question;
}
void OAIQuestion::setScaleQuestion(const OAIScaleQuestion &scale_question) {
    m_scale_question = scale_question;
    m_scale_question_isSet = true;
}

bool OAIQuestion::is_scale_question_Set() const{
    return m_scale_question_isSet;
}

bool OAIQuestion::is_scale_question_Valid() const{
    return m_scale_question_isValid;
}

OAITextQuestion OAIQuestion::getTextQuestion() const {
    return m_text_question;
}
void OAIQuestion::setTextQuestion(const OAITextQuestion &text_question) {
    m_text_question = text_question;
    m_text_question_isSet = true;
}

bool OAIQuestion::is_text_question_Set() const{
    return m_text_question_isSet;
}

bool OAIQuestion::is_text_question_Valid() const{
    return m_text_question_isValid;
}

OAITimeQuestion OAIQuestion::getTimeQuestion() const {
    return m_time_question;
}
void OAIQuestion::setTimeQuestion(const OAITimeQuestion &time_question) {
    m_time_question = time_question;
    m_time_question_isSet = true;
}

bool OAIQuestion::is_time_question_Set() const{
    return m_time_question_isSet;
}

bool OAIQuestion::is_time_question_Valid() const{
    return m_time_question_isValid;
}

bool OAIQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_choice_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_upload_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grading.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_row_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_question.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_question.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
