/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMediaProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMediaProperties::OAIMediaProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMediaProperties::OAIMediaProperties() {
    this->initializeModel();
}

OAIMediaProperties::~OAIMediaProperties() {}

void OAIMediaProperties::initializeModel() {

    m_alignment_isSet = false;
    m_alignment_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIMediaProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMediaProperties::fromJsonObject(QJsonObject json) {

    m_alignment_isValid = ::OpenAPI::fromJsonValue(m_alignment, json[QString("alignment")]);
    m_alignment_isSet = !json[QString("alignment")].isNull() && m_alignment_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIMediaProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMediaProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_alignment_isSet) {
        obj.insert(QString("alignment"), ::OpenAPI::toJsonValue(m_alignment));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIMediaProperties::getAlignment() const {
    return m_alignment;
}
void OAIMediaProperties::setAlignment(const QString &alignment) {
    m_alignment = alignment;
    m_alignment_isSet = true;
}

bool OAIMediaProperties::is_alignment_Set() const{
    return m_alignment_isSet;
}

bool OAIMediaProperties::is_alignment_Valid() const{
    return m_alignment_isValid;
}

qint32 OAIMediaProperties::getWidth() const {
    return m_width;
}
void OAIMediaProperties::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIMediaProperties::is_width_Set() const{
    return m_width_isSet;
}

bool OAIMediaProperties::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIMediaProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alignment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMediaProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
