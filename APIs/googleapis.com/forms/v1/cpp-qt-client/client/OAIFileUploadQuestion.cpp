/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileUploadQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileUploadQuestion::OAIFileUploadQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileUploadQuestion::OAIFileUploadQuestion() {
    this->initializeModel();
}

OAIFileUploadQuestion::~OAIFileUploadQuestion() {}

void OAIFileUploadQuestion::initializeModel() {

    m_folder_id_isSet = false;
    m_folder_id_isValid = false;

    m_max_file_size_isSet = false;
    m_max_file_size_isValid = false;

    m_max_files_isSet = false;
    m_max_files_isValid = false;

    m_types_isSet = false;
    m_types_isValid = false;
}

void OAIFileUploadQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileUploadQuestion::fromJsonObject(QJsonObject json) {

    m_folder_id_isValid = ::OpenAPI::fromJsonValue(m_folder_id, json[QString("folderId")]);
    m_folder_id_isSet = !json[QString("folderId")].isNull() && m_folder_id_isValid;

    m_max_file_size_isValid = ::OpenAPI::fromJsonValue(m_max_file_size, json[QString("maxFileSize")]);
    m_max_file_size_isSet = !json[QString("maxFileSize")].isNull() && m_max_file_size_isValid;

    m_max_files_isValid = ::OpenAPI::fromJsonValue(m_max_files, json[QString("maxFiles")]);
    m_max_files_isSet = !json[QString("maxFiles")].isNull() && m_max_files_isValid;

    m_types_isValid = ::OpenAPI::fromJsonValue(m_types, json[QString("types")]);
    m_types_isSet = !json[QString("types")].isNull() && m_types_isValid;
}

QString OAIFileUploadQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileUploadQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_folder_id_isSet) {
        obj.insert(QString("folderId"), ::OpenAPI::toJsonValue(m_folder_id));
    }
    if (m_max_file_size_isSet) {
        obj.insert(QString("maxFileSize"), ::OpenAPI::toJsonValue(m_max_file_size));
    }
    if (m_max_files_isSet) {
        obj.insert(QString("maxFiles"), ::OpenAPI::toJsonValue(m_max_files));
    }
    if (m_types.size() > 0) {
        obj.insert(QString("types"), ::OpenAPI::toJsonValue(m_types));
    }
    return obj;
}

QString OAIFileUploadQuestion::getFolderId() const {
    return m_folder_id;
}
void OAIFileUploadQuestion::setFolderId(const QString &folder_id) {
    m_folder_id = folder_id;
    m_folder_id_isSet = true;
}

bool OAIFileUploadQuestion::is_folder_id_Set() const{
    return m_folder_id_isSet;
}

bool OAIFileUploadQuestion::is_folder_id_Valid() const{
    return m_folder_id_isValid;
}

QString OAIFileUploadQuestion::getMaxFileSize() const {
    return m_max_file_size;
}
void OAIFileUploadQuestion::setMaxFileSize(const QString &max_file_size) {
    m_max_file_size = max_file_size;
    m_max_file_size_isSet = true;
}

bool OAIFileUploadQuestion::is_max_file_size_Set() const{
    return m_max_file_size_isSet;
}

bool OAIFileUploadQuestion::is_max_file_size_Valid() const{
    return m_max_file_size_isValid;
}

qint32 OAIFileUploadQuestion::getMaxFiles() const {
    return m_max_files;
}
void OAIFileUploadQuestion::setMaxFiles(const qint32 &max_files) {
    m_max_files = max_files;
    m_max_files_isSet = true;
}

bool OAIFileUploadQuestion::is_max_files_Set() const{
    return m_max_files_isSet;
}

bool OAIFileUploadQuestion::is_max_files_Valid() const{
    return m_max_files_isValid;
}

QList<QString> OAIFileUploadQuestion::getTypes() const {
    return m_types;
}
void OAIFileUploadQuestion::setTypes(const QList<QString> &types) {
    m_types = types;
    m_types_isSet = true;
}

bool OAIFileUploadQuestion::is_types_Set() const{
    return m_types_isSet;
}

bool OAIFileUploadQuestion::is_types_Valid() const{
    return m_types_isValid;
}

bool OAIFileUploadQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_folder_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_files_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileUploadQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
