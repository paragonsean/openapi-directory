/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoLink.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoLink::OAIVideoLink(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoLink::OAIVideoLink() {
    this->initializeModel();
}

OAIVideoLink::~OAIVideoLink() {}

void OAIVideoLink::initializeModel() {

    m_display_text_isSet = false;
    m_display_text_isValid = false;

    m_youtube_uri_isSet = false;
    m_youtube_uri_isValid = false;
}

void OAIVideoLink::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoLink::fromJsonObject(QJsonObject json) {

    m_display_text_isValid = ::OpenAPI::fromJsonValue(m_display_text, json[QString("displayText")]);
    m_display_text_isSet = !json[QString("displayText")].isNull() && m_display_text_isValid;

    m_youtube_uri_isValid = ::OpenAPI::fromJsonValue(m_youtube_uri, json[QString("youtubeUri")]);
    m_youtube_uri_isSet = !json[QString("youtubeUri")].isNull() && m_youtube_uri_isValid;
}

QString OAIVideoLink::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoLink::asJsonObject() const {
    QJsonObject obj;
    if (m_display_text_isSet) {
        obj.insert(QString("displayText"), ::OpenAPI::toJsonValue(m_display_text));
    }
    if (m_youtube_uri_isSet) {
        obj.insert(QString("youtubeUri"), ::OpenAPI::toJsonValue(m_youtube_uri));
    }
    return obj;
}

QString OAIVideoLink::getDisplayText() const {
    return m_display_text;
}
void OAIVideoLink::setDisplayText(const QString &display_text) {
    m_display_text = display_text;
    m_display_text_isSet = true;
}

bool OAIVideoLink::is_display_text_Set() const{
    return m_display_text_isSet;
}

bool OAIVideoLink::is_display_text_Valid() const{
    return m_display_text_isValid;
}

QString OAIVideoLink::getYoutubeUri() const {
    return m_youtube_uri;
}
void OAIVideoLink::setYoutubeUri(const QString &youtube_uri) {
    m_youtube_uri = youtube_uri;
    m_youtube_uri_isSet = true;
}

bool OAIVideoLink::is_youtube_uri_Set() const{
    return m_youtube_uri_isSet;
}

bool OAIVideoLink::is_youtube_uri_Valid() const{
    return m_youtube_uri_isValid;
}

bool OAIVideoLink::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_youtube_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoLink::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
