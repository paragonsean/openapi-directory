/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestionGroupItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestionGroupItem::OAIQuestionGroupItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestionGroupItem::OAIQuestionGroupItem() {
    this->initializeModel();
}

OAIQuestionGroupItem::~OAIQuestionGroupItem() {}

void OAIQuestionGroupItem::initializeModel() {

    m_grid_isSet = false;
    m_grid_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_questions_isSet = false;
    m_questions_isValid = false;
}

void OAIQuestionGroupItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestionGroupItem::fromJsonObject(QJsonObject json) {

    m_grid_isValid = ::OpenAPI::fromJsonValue(m_grid, json[QString("grid")]);
    m_grid_isSet = !json[QString("grid")].isNull() && m_grid_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_questions_isValid = ::OpenAPI::fromJsonValue(m_questions, json[QString("questions")]);
    m_questions_isSet = !json[QString("questions")].isNull() && m_questions_isValid;
}

QString OAIQuestionGroupItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestionGroupItem::asJsonObject() const {
    QJsonObject obj;
    if (m_grid.isSet()) {
        obj.insert(QString("grid"), ::OpenAPI::toJsonValue(m_grid));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_questions.size() > 0) {
        obj.insert(QString("questions"), ::OpenAPI::toJsonValue(m_questions));
    }
    return obj;
}

OAIGrid OAIQuestionGroupItem::getGrid() const {
    return m_grid;
}
void OAIQuestionGroupItem::setGrid(const OAIGrid &grid) {
    m_grid = grid;
    m_grid_isSet = true;
}

bool OAIQuestionGroupItem::is_grid_Set() const{
    return m_grid_isSet;
}

bool OAIQuestionGroupItem::is_grid_Valid() const{
    return m_grid_isValid;
}

OAIImage OAIQuestionGroupItem::getImage() const {
    return m_image;
}
void OAIQuestionGroupItem::setImage(const OAIImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIQuestionGroupItem::is_image_Set() const{
    return m_image_isSet;
}

bool OAIQuestionGroupItem::is_image_Valid() const{
    return m_image_isValid;
}

QList<OAIQuestion> OAIQuestionGroupItem::getQuestions() const {
    return m_questions;
}
void OAIQuestionGroupItem::setQuestions(const QList<OAIQuestion> &questions) {
    m_questions = questions;
    m_questions_isSet = true;
}

bool OAIQuestionGroupItem::is_questions_Set() const{
    return m_questions_isSet;
}

bool OAIQuestionGroupItem::is_questions_Valid() const{
    return m_questions_isValid;
}

bool OAIQuestionGroupItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_grid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestionGroupItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
