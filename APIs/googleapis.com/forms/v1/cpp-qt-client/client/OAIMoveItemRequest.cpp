/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoveItemRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoveItemRequest::OAIMoveItemRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoveItemRequest::OAIMoveItemRequest() {
    this->initializeModel();
}

OAIMoveItemRequest::~OAIMoveItemRequest() {}

void OAIMoveItemRequest::initializeModel() {

    m_new_location_isSet = false;
    m_new_location_isValid = false;

    m_original_location_isSet = false;
    m_original_location_isValid = false;
}

void OAIMoveItemRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoveItemRequest::fromJsonObject(QJsonObject json) {

    m_new_location_isValid = ::OpenAPI::fromJsonValue(m_new_location, json[QString("newLocation")]);
    m_new_location_isSet = !json[QString("newLocation")].isNull() && m_new_location_isValid;

    m_original_location_isValid = ::OpenAPI::fromJsonValue(m_original_location, json[QString("originalLocation")]);
    m_original_location_isSet = !json[QString("originalLocation")].isNull() && m_original_location_isValid;
}

QString OAIMoveItemRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoveItemRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_new_location.isSet()) {
        obj.insert(QString("newLocation"), ::OpenAPI::toJsonValue(m_new_location));
    }
    if (m_original_location.isSet()) {
        obj.insert(QString("originalLocation"), ::OpenAPI::toJsonValue(m_original_location));
    }
    return obj;
}

OAILocation OAIMoveItemRequest::getNewLocation() const {
    return m_new_location;
}
void OAIMoveItemRequest::setNewLocation(const OAILocation &new_location) {
    m_new_location = new_location;
    m_new_location_isSet = true;
}

bool OAIMoveItemRequest::is_new_location_Set() const{
    return m_new_location_isSet;
}

bool OAIMoveItemRequest::is_new_location_Valid() const{
    return m_new_location_isValid;
}

OAILocation OAIMoveItemRequest::getOriginalLocation() const {
    return m_original_location;
}
void OAIMoveItemRequest::setOriginalLocation(const OAILocation &original_location) {
    m_original_location = original_location;
    m_original_location_isSet = true;
}

bool OAIMoveItemRequest::is_original_location_Set() const{
    return m_original_location_isSet;
}

bool OAIMoveItemRequest::is_original_location_Valid() const{
    return m_original_location_isValid;
}

bool OAIMoveItemRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_new_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_location.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoveItemRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
