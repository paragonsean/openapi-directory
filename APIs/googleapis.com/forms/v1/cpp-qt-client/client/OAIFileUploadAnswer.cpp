/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileUploadAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileUploadAnswer::OAIFileUploadAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileUploadAnswer::OAIFileUploadAnswer() {
    this->initializeModel();
}

OAIFileUploadAnswer::~OAIFileUploadAnswer() {}

void OAIFileUploadAnswer::initializeModel() {

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;
}

void OAIFileUploadAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileUploadAnswer::fromJsonObject(QJsonObject json) {

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;
}

QString OAIFileUploadAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileUploadAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    return obj;
}

QString OAIFileUploadAnswer::getFileId() const {
    return m_file_id;
}
void OAIFileUploadAnswer::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIFileUploadAnswer::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIFileUploadAnswer::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIFileUploadAnswer::getFileName() const {
    return m_file_name;
}
void OAIFileUploadAnswer::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIFileUploadAnswer::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIFileUploadAnswer::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QString OAIFileUploadAnswer::getMimeType() const {
    return m_mime_type;
}
void OAIFileUploadAnswer::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAIFileUploadAnswer::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAIFileUploadAnswer::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

bool OAIFileUploadAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileUploadAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
