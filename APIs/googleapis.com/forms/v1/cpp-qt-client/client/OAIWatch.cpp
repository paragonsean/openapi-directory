/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWatch::OAIWatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWatch::OAIWatch() {
    this->initializeModel();
}

OAIWatch::~OAIWatch() {}

void OAIWatch::initializeModel() {

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_error_type_isSet = false;
    m_error_type_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_expire_time_isSet = false;
    m_expire_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIWatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWatch::fromJsonObject(QJsonObject json) {

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_error_type_isValid = ::OpenAPI::fromJsonValue(m_error_type, json[QString("errorType")]);
    m_error_type_isSet = !json[QString("errorType")].isNull() && m_error_type_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_expire_time_isValid = ::OpenAPI::fromJsonValue(m_expire_time, json[QString("expireTime")]);
    m_expire_time_isSet = !json[QString("expireTime")].isNull() && m_expire_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIWatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWatch::asJsonObject() const {
    QJsonObject obj;
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_error_type_isSet) {
        obj.insert(QString("errorType"), ::OpenAPI::toJsonValue(m_error_type));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_expire_time_isSet) {
        obj.insert(QString("expireTime"), ::OpenAPI::toJsonValue(m_expire_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_target.isSet()) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIWatch::getCreateTime() const {
    return m_create_time;
}
void OAIWatch::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIWatch::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIWatch::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIWatch::getErrorType() const {
    return m_error_type;
}
void OAIWatch::setErrorType(const QString &error_type) {
    m_error_type = error_type;
    m_error_type_isSet = true;
}

bool OAIWatch::is_error_type_Set() const{
    return m_error_type_isSet;
}

bool OAIWatch::is_error_type_Valid() const{
    return m_error_type_isValid;
}

QString OAIWatch::getEventType() const {
    return m_event_type;
}
void OAIWatch::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIWatch::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIWatch::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIWatch::getExpireTime() const {
    return m_expire_time;
}
void OAIWatch::setExpireTime(const QString &expire_time) {
    m_expire_time = expire_time;
    m_expire_time_isSet = true;
}

bool OAIWatch::is_expire_time_Set() const{
    return m_expire_time_isSet;
}

bool OAIWatch::is_expire_time_Valid() const{
    return m_expire_time_isValid;
}

QString OAIWatch::getId() const {
    return m_id;
}
void OAIWatch::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWatch::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWatch::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIWatch::getState() const {
    return m_state;
}
void OAIWatch::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWatch::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWatch::is_state_Valid() const{
    return m_state_isValid;
}

OAIWatchTarget OAIWatch::getTarget() const {
    return m_target;
}
void OAIWatch::setTarget(const OAIWatchTarget &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIWatch::is_target_Set() const{
    return m_target_isSet;
}

bool OAIWatch::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIWatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expire_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
