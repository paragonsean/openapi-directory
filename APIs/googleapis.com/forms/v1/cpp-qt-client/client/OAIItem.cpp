/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIItem::OAIItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIItem::OAIItem() {
    this->initializeModel();
}

OAIItem::~OAIItem() {}

void OAIItem::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_image_item_isSet = false;
    m_image_item_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_page_break_item_isSet = false;
    m_page_break_item_isValid = false;

    m_question_group_item_isSet = false;
    m_question_group_item_isValid = false;

    m_question_item_isSet = false;
    m_question_item_isValid = false;

    m_text_item_isSet = false;
    m_text_item_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_video_item_isSet = false;
    m_video_item_isValid = false;
}

void OAIItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIItem::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_image_item_isValid = ::OpenAPI::fromJsonValue(m_image_item, json[QString("imageItem")]);
    m_image_item_isSet = !json[QString("imageItem")].isNull() && m_image_item_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_page_break_item_isValid = ::OpenAPI::fromJsonValue(m_page_break_item, json[QString("pageBreakItem")]);
    m_page_break_item_isSet = !json[QString("pageBreakItem")].isNull() && m_page_break_item_isValid;

    m_question_group_item_isValid = ::OpenAPI::fromJsonValue(m_question_group_item, json[QString("questionGroupItem")]);
    m_question_group_item_isSet = !json[QString("questionGroupItem")].isNull() && m_question_group_item_isValid;

    m_question_item_isValid = ::OpenAPI::fromJsonValue(m_question_item, json[QString("questionItem")]);
    m_question_item_isSet = !json[QString("questionItem")].isNull() && m_question_item_isValid;

    m_text_item_isValid = ::OpenAPI::fromJsonValue(m_text_item, json[QString("textItem")]);
    m_text_item_isSet = !json[QString("textItem")].isNull() && m_text_item_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_video_item_isValid = ::OpenAPI::fromJsonValue(m_video_item, json[QString("videoItem")]);
    m_video_item_isSet = !json[QString("videoItem")].isNull() && m_video_item_isValid;
}

QString OAIItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIItem::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_image_item.isSet()) {
        obj.insert(QString("imageItem"), ::OpenAPI::toJsonValue(m_image_item));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_page_break_item_isSet) {
        obj.insert(QString("pageBreakItem"), ::OpenAPI::toJsonValue(m_page_break_item));
    }
    if (m_question_group_item.isSet()) {
        obj.insert(QString("questionGroupItem"), ::OpenAPI::toJsonValue(m_question_group_item));
    }
    if (m_question_item.isSet()) {
        obj.insert(QString("questionItem"), ::OpenAPI::toJsonValue(m_question_item));
    }
    if (m_text_item_isSet) {
        obj.insert(QString("textItem"), ::OpenAPI::toJsonValue(m_text_item));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_video_item.isSet()) {
        obj.insert(QString("videoItem"), ::OpenAPI::toJsonValue(m_video_item));
    }
    return obj;
}

QString OAIItem::getDescription() const {
    return m_description;
}
void OAIItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAIItem::is_description_Valid() const{
    return m_description_isValid;
}

OAIImageItem OAIItem::getImageItem() const {
    return m_image_item;
}
void OAIItem::setImageItem(const OAIImageItem &image_item) {
    m_image_item = image_item;
    m_image_item_isSet = true;
}

bool OAIItem::is_image_item_Set() const{
    return m_image_item_isSet;
}

bool OAIItem::is_image_item_Valid() const{
    return m_image_item_isValid;
}

QString OAIItem::getItemId() const {
    return m_item_id;
}
void OAIItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

OAIObject OAIItem::getPageBreakItem() const {
    return m_page_break_item;
}
void OAIItem::setPageBreakItem(const OAIObject &page_break_item) {
    m_page_break_item = page_break_item;
    m_page_break_item_isSet = true;
}

bool OAIItem::is_page_break_item_Set() const{
    return m_page_break_item_isSet;
}

bool OAIItem::is_page_break_item_Valid() const{
    return m_page_break_item_isValid;
}

OAIQuestionGroupItem OAIItem::getQuestionGroupItem() const {
    return m_question_group_item;
}
void OAIItem::setQuestionGroupItem(const OAIQuestionGroupItem &question_group_item) {
    m_question_group_item = question_group_item;
    m_question_group_item_isSet = true;
}

bool OAIItem::is_question_group_item_Set() const{
    return m_question_group_item_isSet;
}

bool OAIItem::is_question_group_item_Valid() const{
    return m_question_group_item_isValid;
}

OAIQuestionItem OAIItem::getQuestionItem() const {
    return m_question_item;
}
void OAIItem::setQuestionItem(const OAIQuestionItem &question_item) {
    m_question_item = question_item;
    m_question_item_isSet = true;
}

bool OAIItem::is_question_item_Set() const{
    return m_question_item_isSet;
}

bool OAIItem::is_question_item_Valid() const{
    return m_question_item_isValid;
}

OAIObject OAIItem::getTextItem() const {
    return m_text_item;
}
void OAIItem::setTextItem(const OAIObject &text_item) {
    m_text_item = text_item;
    m_text_item_isSet = true;
}

bool OAIItem::is_text_item_Set() const{
    return m_text_item_isSet;
}

bool OAIItem::is_text_item_Valid() const{
    return m_text_item_isValid;
}

QString OAIItem::getTitle() const {
    return m_title;
}
void OAIItem::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIItem::is_title_Set() const{
    return m_title_isSet;
}

bool OAIItem::is_title_Valid() const{
    return m_title_isValid;
}

OAIVideoItem OAIItem::getVideoItem() const {
    return m_video_item;
}
void OAIItem::setVideoItem(const OAIVideoItem &video_item) {
    m_video_item = video_item;
    m_video_item_isSet = true;
}

bool OAIItem::is_video_item_Set() const{
    return m_video_item_isSet;
}

bool OAIItem::is_video_item_Valid() const{
    return m_video_item_isValid;
}

bool OAIItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_break_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_group_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_item.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
