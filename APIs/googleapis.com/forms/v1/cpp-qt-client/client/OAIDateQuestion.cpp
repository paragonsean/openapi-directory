/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateQuestion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateQuestion::OAIDateQuestion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateQuestion::OAIDateQuestion() {
    this->initializeModel();
}

OAIDateQuestion::~OAIDateQuestion() {}

void OAIDateQuestion::initializeModel() {

    m_include_time_isSet = false;
    m_include_time_isValid = false;

    m_include_year_isSet = false;
    m_include_year_isValid = false;
}

void OAIDateQuestion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateQuestion::fromJsonObject(QJsonObject json) {

    m_include_time_isValid = ::OpenAPI::fromJsonValue(m_include_time, json[QString("includeTime")]);
    m_include_time_isSet = !json[QString("includeTime")].isNull() && m_include_time_isValid;

    m_include_year_isValid = ::OpenAPI::fromJsonValue(m_include_year, json[QString("includeYear")]);
    m_include_year_isSet = !json[QString("includeYear")].isNull() && m_include_year_isValid;
}

QString OAIDateQuestion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateQuestion::asJsonObject() const {
    QJsonObject obj;
    if (m_include_time_isSet) {
        obj.insert(QString("includeTime"), ::OpenAPI::toJsonValue(m_include_time));
    }
    if (m_include_year_isSet) {
        obj.insert(QString("includeYear"), ::OpenAPI::toJsonValue(m_include_year));
    }
    return obj;
}

bool OAIDateQuestion::isIncludeTime() const {
    return m_include_time;
}
void OAIDateQuestion::setIncludeTime(const bool &include_time) {
    m_include_time = include_time;
    m_include_time_isSet = true;
}

bool OAIDateQuestion::is_include_time_Set() const{
    return m_include_time_isSet;
}

bool OAIDateQuestion::is_include_time_Valid() const{
    return m_include_time_isValid;
}

bool OAIDateQuestion::isIncludeYear() const {
    return m_include_year;
}
void OAIDateQuestion::setIncludeYear(const bool &include_year) {
    m_include_year = include_year;
    m_include_year_isSet = true;
}

bool OAIDateQuestion::is_include_year_Set() const{
    return m_include_year_isSet;
}

bool OAIDateQuestion::is_include_year_Valid() const{
    return m_include_year_isValid;
}

bool OAIDateQuestion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_include_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_year_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateQuestion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
