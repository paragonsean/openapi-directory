/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswer::OAIAnswer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswer::OAIAnswer() {
    this->initializeModel();
}

OAIAnswer::~OAIAnswer() {}

void OAIAnswer::initializeModel() {

    m_file_upload_answers_isSet = false;
    m_file_upload_answers_isValid = false;

    m_grade_isSet = false;
    m_grade_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_text_answers_isSet = false;
    m_text_answers_isValid = false;
}

void OAIAnswer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswer::fromJsonObject(QJsonObject json) {

    m_file_upload_answers_isValid = ::OpenAPI::fromJsonValue(m_file_upload_answers, json[QString("fileUploadAnswers")]);
    m_file_upload_answers_isSet = !json[QString("fileUploadAnswers")].isNull() && m_file_upload_answers_isValid;

    m_grade_isValid = ::OpenAPI::fromJsonValue(m_grade, json[QString("grade")]);
    m_grade_isSet = !json[QString("grade")].isNull() && m_grade_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("questionId")]);
    m_question_id_isSet = !json[QString("questionId")].isNull() && m_question_id_isValid;

    m_text_answers_isValid = ::OpenAPI::fromJsonValue(m_text_answers, json[QString("textAnswers")]);
    m_text_answers_isSet = !json[QString("textAnswers")].isNull() && m_text_answers_isValid;
}

QString OAIAnswer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswer::asJsonObject() const {
    QJsonObject obj;
    if (m_file_upload_answers.isSet()) {
        obj.insert(QString("fileUploadAnswers"), ::OpenAPI::toJsonValue(m_file_upload_answers));
    }
    if (m_grade.isSet()) {
        obj.insert(QString("grade"), ::OpenAPI::toJsonValue(m_grade));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("questionId"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_text_answers.isSet()) {
        obj.insert(QString("textAnswers"), ::OpenAPI::toJsonValue(m_text_answers));
    }
    return obj;
}

OAIFileUploadAnswers OAIAnswer::getFileUploadAnswers() const {
    return m_file_upload_answers;
}
void OAIAnswer::setFileUploadAnswers(const OAIFileUploadAnswers &file_upload_answers) {
    m_file_upload_answers = file_upload_answers;
    m_file_upload_answers_isSet = true;
}

bool OAIAnswer::is_file_upload_answers_Set() const{
    return m_file_upload_answers_isSet;
}

bool OAIAnswer::is_file_upload_answers_Valid() const{
    return m_file_upload_answers_isValid;
}

OAIGrade OAIAnswer::getGrade() const {
    return m_grade;
}
void OAIAnswer::setGrade(const OAIGrade &grade) {
    m_grade = grade;
    m_grade_isSet = true;
}

bool OAIAnswer::is_grade_Set() const{
    return m_grade_isSet;
}

bool OAIAnswer::is_grade_Valid() const{
    return m_grade_isValid;
}

QString OAIAnswer::getQuestionId() const {
    return m_question_id;
}
void OAIAnswer::setQuestionId(const QString &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIAnswer::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIAnswer::is_question_id_Valid() const{
    return m_question_id_isValid;
}

OAITextAnswers OAIAnswer::getTextAnswers() const {
    return m_text_answers;
}
void OAIAnswer::setTextAnswers(const OAITextAnswers &text_answers) {
    m_text_answers = text_answers;
    m_text_answers_isSet = true;
}

bool OAIAnswer::is_text_answers_Set() const{
    return m_text_answers_isSet;
}

bool OAIAnswer::is_text_answers_Valid() const{
    return m_text_answers_isValid;
}

bool OAIAnswer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_upload_answers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_grade.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_answers.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswer::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
