/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGrading.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGrading::OAIGrading(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGrading::OAIGrading() {
    this->initializeModel();
}

OAIGrading::~OAIGrading() {}

void OAIGrading::initializeModel() {

    m_correct_answers_isSet = false;
    m_correct_answers_isValid = false;

    m_general_feedback_isSet = false;
    m_general_feedback_isValid = false;

    m_point_value_isSet = false;
    m_point_value_isValid = false;

    m_when_right_isSet = false;
    m_when_right_isValid = false;

    m_when_wrong_isSet = false;
    m_when_wrong_isValid = false;
}

void OAIGrading::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGrading::fromJsonObject(QJsonObject json) {

    m_correct_answers_isValid = ::OpenAPI::fromJsonValue(m_correct_answers, json[QString("correctAnswers")]);
    m_correct_answers_isSet = !json[QString("correctAnswers")].isNull() && m_correct_answers_isValid;

    m_general_feedback_isValid = ::OpenAPI::fromJsonValue(m_general_feedback, json[QString("generalFeedback")]);
    m_general_feedback_isSet = !json[QString("generalFeedback")].isNull() && m_general_feedback_isValid;

    m_point_value_isValid = ::OpenAPI::fromJsonValue(m_point_value, json[QString("pointValue")]);
    m_point_value_isSet = !json[QString("pointValue")].isNull() && m_point_value_isValid;

    m_when_right_isValid = ::OpenAPI::fromJsonValue(m_when_right, json[QString("whenRight")]);
    m_when_right_isSet = !json[QString("whenRight")].isNull() && m_when_right_isValid;

    m_when_wrong_isValid = ::OpenAPI::fromJsonValue(m_when_wrong, json[QString("whenWrong")]);
    m_when_wrong_isSet = !json[QString("whenWrong")].isNull() && m_when_wrong_isValid;
}

QString OAIGrading::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGrading::asJsonObject() const {
    QJsonObject obj;
    if (m_correct_answers.isSet()) {
        obj.insert(QString("correctAnswers"), ::OpenAPI::toJsonValue(m_correct_answers));
    }
    if (m_general_feedback.isSet()) {
        obj.insert(QString("generalFeedback"), ::OpenAPI::toJsonValue(m_general_feedback));
    }
    if (m_point_value_isSet) {
        obj.insert(QString("pointValue"), ::OpenAPI::toJsonValue(m_point_value));
    }
    if (m_when_right.isSet()) {
        obj.insert(QString("whenRight"), ::OpenAPI::toJsonValue(m_when_right));
    }
    if (m_when_wrong.isSet()) {
        obj.insert(QString("whenWrong"), ::OpenAPI::toJsonValue(m_when_wrong));
    }
    return obj;
}

OAICorrectAnswers OAIGrading::getCorrectAnswers() const {
    return m_correct_answers;
}
void OAIGrading::setCorrectAnswers(const OAICorrectAnswers &correct_answers) {
    m_correct_answers = correct_answers;
    m_correct_answers_isSet = true;
}

bool OAIGrading::is_correct_answers_Set() const{
    return m_correct_answers_isSet;
}

bool OAIGrading::is_correct_answers_Valid() const{
    return m_correct_answers_isValid;
}

OAIFeedback OAIGrading::getGeneralFeedback() const {
    return m_general_feedback;
}
void OAIGrading::setGeneralFeedback(const OAIFeedback &general_feedback) {
    m_general_feedback = general_feedback;
    m_general_feedback_isSet = true;
}

bool OAIGrading::is_general_feedback_Set() const{
    return m_general_feedback_isSet;
}

bool OAIGrading::is_general_feedback_Valid() const{
    return m_general_feedback_isValid;
}

qint32 OAIGrading::getPointValue() const {
    return m_point_value;
}
void OAIGrading::setPointValue(const qint32 &point_value) {
    m_point_value = point_value;
    m_point_value_isSet = true;
}

bool OAIGrading::is_point_value_Set() const{
    return m_point_value_isSet;
}

bool OAIGrading::is_point_value_Valid() const{
    return m_point_value_isValid;
}

OAIFeedback OAIGrading::getWhenRight() const {
    return m_when_right;
}
void OAIGrading::setWhenRight(const OAIFeedback &when_right) {
    m_when_right = when_right;
    m_when_right_isSet = true;
}

bool OAIGrading::is_when_right_Set() const{
    return m_when_right_isSet;
}

bool OAIGrading::is_when_right_Valid() const{
    return m_when_right_isValid;
}

OAIFeedback OAIGrading::getWhenWrong() const {
    return m_when_wrong;
}
void OAIGrading::setWhenWrong(const OAIFeedback &when_wrong) {
    m_when_wrong = when_wrong;
    m_when_wrong_isSet = true;
}

bool OAIGrading::is_when_wrong_Set() const{
    return m_when_wrong_isSet;
}

bool OAIGrading::is_when_wrong_Valid() const{
    return m_when_wrong_isValid;
}

bool OAIGrading::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_correct_answers.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_general_feedback.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_point_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_right.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_when_wrong.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGrading::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
