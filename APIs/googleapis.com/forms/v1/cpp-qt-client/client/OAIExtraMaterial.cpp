/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExtraMaterial.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExtraMaterial::OAIExtraMaterial(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExtraMaterial::OAIExtraMaterial() {
    this->initializeModel();
}

OAIExtraMaterial::~OAIExtraMaterial() {}

void OAIExtraMaterial::initializeModel() {

    m_link_isSet = false;
    m_link_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAIExtraMaterial::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExtraMaterial::fromJsonObject(QJsonObject json) {

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAIExtraMaterial::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExtraMaterial::asJsonObject() const {
    QJsonObject obj;
    if (m_link.isSet()) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

OAITextLink OAIExtraMaterial::getLink() const {
    return m_link;
}
void OAIExtraMaterial::setLink(const OAITextLink &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIExtraMaterial::is_link_Set() const{
    return m_link_isSet;
}

bool OAIExtraMaterial::is_link_Valid() const{
    return m_link_isValid;
}

OAIVideoLink OAIExtraMaterial::getVideo() const {
    return m_video;
}
void OAIExtraMaterial::setVideo(const OAIVideoLink &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIExtraMaterial::is_video_Set() const{
    return m_video_isSet;
}

bool OAIExtraMaterial::is_video_Valid() const{
    return m_video_isValid;
}

bool OAIExtraMaterial::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExtraMaterial::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
