/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFormResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFormResponse::OAIFormResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFormResponse::OAIFormResponse() {
    this->initializeModel();
}

OAIFormResponse::~OAIFormResponse() {}

void OAIFormResponse::initializeModel() {

    m_answers_isSet = false;
    m_answers_isValid = false;

    m_create_time_isSet = false;
    m_create_time_isValid = false;

    m_form_id_isSet = false;
    m_form_id_isValid = false;

    m_last_submitted_time_isSet = false;
    m_last_submitted_time_isValid = false;

    m_respondent_email_isSet = false;
    m_respondent_email_isValid = false;

    m_response_id_isSet = false;
    m_response_id_isValid = false;

    m_total_score_isSet = false;
    m_total_score_isValid = false;
}

void OAIFormResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFormResponse::fromJsonObject(QJsonObject json) {

    m_answers_isValid = ::OpenAPI::fromJsonValue(m_answers, json[QString("answers")]);
    m_answers_isSet = !json[QString("answers")].isNull() && m_answers_isValid;

    m_create_time_isValid = ::OpenAPI::fromJsonValue(m_create_time, json[QString("createTime")]);
    m_create_time_isSet = !json[QString("createTime")].isNull() && m_create_time_isValid;

    m_form_id_isValid = ::OpenAPI::fromJsonValue(m_form_id, json[QString("formId")]);
    m_form_id_isSet = !json[QString("formId")].isNull() && m_form_id_isValid;

    m_last_submitted_time_isValid = ::OpenAPI::fromJsonValue(m_last_submitted_time, json[QString("lastSubmittedTime")]);
    m_last_submitted_time_isSet = !json[QString("lastSubmittedTime")].isNull() && m_last_submitted_time_isValid;

    m_respondent_email_isValid = ::OpenAPI::fromJsonValue(m_respondent_email, json[QString("respondentEmail")]);
    m_respondent_email_isSet = !json[QString("respondentEmail")].isNull() && m_respondent_email_isValid;

    m_response_id_isValid = ::OpenAPI::fromJsonValue(m_response_id, json[QString("responseId")]);
    m_response_id_isSet = !json[QString("responseId")].isNull() && m_response_id_isValid;

    m_total_score_isValid = ::OpenAPI::fromJsonValue(m_total_score, json[QString("totalScore")]);
    m_total_score_isSet = !json[QString("totalScore")].isNull() && m_total_score_isValid;
}

QString OAIFormResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFormResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_answers.size() > 0) {
        obj.insert(QString("answers"), ::OpenAPI::toJsonValue(m_answers));
    }
    if (m_create_time_isSet) {
        obj.insert(QString("createTime"), ::OpenAPI::toJsonValue(m_create_time));
    }
    if (m_form_id_isSet) {
        obj.insert(QString("formId"), ::OpenAPI::toJsonValue(m_form_id));
    }
    if (m_last_submitted_time_isSet) {
        obj.insert(QString("lastSubmittedTime"), ::OpenAPI::toJsonValue(m_last_submitted_time));
    }
    if (m_respondent_email_isSet) {
        obj.insert(QString("respondentEmail"), ::OpenAPI::toJsonValue(m_respondent_email));
    }
    if (m_response_id_isSet) {
        obj.insert(QString("responseId"), ::OpenAPI::toJsonValue(m_response_id));
    }
    if (m_total_score_isSet) {
        obj.insert(QString("totalScore"), ::OpenAPI::toJsonValue(m_total_score));
    }
    return obj;
}

QMap<QString, OAIAnswer> OAIFormResponse::getAnswers() const {
    return m_answers;
}
void OAIFormResponse::setAnswers(const QMap<QString, OAIAnswer> &answers) {
    m_answers = answers;
    m_answers_isSet = true;
}

bool OAIFormResponse::is_answers_Set() const{
    return m_answers_isSet;
}

bool OAIFormResponse::is_answers_Valid() const{
    return m_answers_isValid;
}

QString OAIFormResponse::getCreateTime() const {
    return m_create_time;
}
void OAIFormResponse::setCreateTime(const QString &create_time) {
    m_create_time = create_time;
    m_create_time_isSet = true;
}

bool OAIFormResponse::is_create_time_Set() const{
    return m_create_time_isSet;
}

bool OAIFormResponse::is_create_time_Valid() const{
    return m_create_time_isValid;
}

QString OAIFormResponse::getFormId() const {
    return m_form_id;
}
void OAIFormResponse::setFormId(const QString &form_id) {
    m_form_id = form_id;
    m_form_id_isSet = true;
}

bool OAIFormResponse::is_form_id_Set() const{
    return m_form_id_isSet;
}

bool OAIFormResponse::is_form_id_Valid() const{
    return m_form_id_isValid;
}

QString OAIFormResponse::getLastSubmittedTime() const {
    return m_last_submitted_time;
}
void OAIFormResponse::setLastSubmittedTime(const QString &last_submitted_time) {
    m_last_submitted_time = last_submitted_time;
    m_last_submitted_time_isSet = true;
}

bool OAIFormResponse::is_last_submitted_time_Set() const{
    return m_last_submitted_time_isSet;
}

bool OAIFormResponse::is_last_submitted_time_Valid() const{
    return m_last_submitted_time_isValid;
}

QString OAIFormResponse::getRespondentEmail() const {
    return m_respondent_email;
}
void OAIFormResponse::setRespondentEmail(const QString &respondent_email) {
    m_respondent_email = respondent_email;
    m_respondent_email_isSet = true;
}

bool OAIFormResponse::is_respondent_email_Set() const{
    return m_respondent_email_isSet;
}

bool OAIFormResponse::is_respondent_email_Valid() const{
    return m_respondent_email_isValid;
}

QString OAIFormResponse::getResponseId() const {
    return m_response_id;
}
void OAIFormResponse::setResponseId(const QString &response_id) {
    m_response_id = response_id;
    m_response_id_isSet = true;
}

bool OAIFormResponse::is_response_id_Set() const{
    return m_response_id_isSet;
}

bool OAIFormResponse::is_response_id_Valid() const{
    return m_response_id_isValid;
}

double OAIFormResponse::getTotalScore() const {
    return m_total_score;
}
void OAIFormResponse::setTotalScore(const double &total_score) {
    m_total_score = total_score;
    m_total_score_isSet = true;
}

bool OAIFormResponse::is_total_score_Set() const{
    return m_total_score_isSet;
}

bool OAIFormResponse::is_total_score_Valid() const{
    return m_total_score_isValid;
}

bool OAIFormResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_submitted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_respondent_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFormResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
