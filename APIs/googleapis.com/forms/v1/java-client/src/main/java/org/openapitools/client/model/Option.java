/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Image;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * An option for a Choice question.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Option {
  /**
   * Section navigation type.
   */
  @JsonAdapter(GoToActionEnum.Adapter.class)
  public enum GoToActionEnum {
    GO_TO_ACTION_UNSPECIFIED("GO_TO_ACTION_UNSPECIFIED"),
    
    NEXT_SECTION("NEXT_SECTION"),
    
    RESTART_FORM("RESTART_FORM"),
    
    SUBMIT_FORM("SUBMIT_FORM");

    private String value;

    GoToActionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GoToActionEnum fromValue(String value) {
      for (GoToActionEnum b : GoToActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GoToActionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GoToActionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GoToActionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GoToActionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GoToActionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GO_TO_ACTION = "goToAction";
  @SerializedName(SERIALIZED_NAME_GO_TO_ACTION)
  private GoToActionEnum goToAction;

  public static final String SERIALIZED_NAME_GO_TO_SECTION_ID = "goToSectionId";
  @SerializedName(SERIALIZED_NAME_GO_TO_SECTION_ID)
  private String goToSectionId;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private Image image;

  public static final String SERIALIZED_NAME_IS_OTHER = "isOther";
  @SerializedName(SERIALIZED_NAME_IS_OTHER)
  private Boolean isOther;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public Option() {
  }

  public Option goToAction(GoToActionEnum goToAction) {
    this.goToAction = goToAction;
    return this;
  }

  /**
   * Section navigation type.
   * @return goToAction
   */
  @javax.annotation.Nullable
  public GoToActionEnum getGoToAction() {
    return goToAction;
  }

  public void setGoToAction(GoToActionEnum goToAction) {
    this.goToAction = goToAction;
  }


  public Option goToSectionId(String goToSectionId) {
    this.goToSectionId = goToSectionId;
    return this;
  }

  /**
   * Item ID of section header to go to.
   * @return goToSectionId
   */
  @javax.annotation.Nullable
  public String getGoToSectionId() {
    return goToSectionId;
  }

  public void setGoToSectionId(String goToSectionId) {
    this.goToSectionId = goToSectionId;
  }


  public Option image(Image image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public Image getImage() {
    return image;
  }

  public void setImage(Image image) {
    this.image = image;
  }


  public Option isOther(Boolean isOther) {
    this.isOther = isOther;
    return this;
  }

  /**
   * Whether the option is \&quot;other\&quot;. Currently only applies to &#x60;RADIO&#x60; and &#x60;CHECKBOX&#x60; choice types, but is not allowed in a QuestionGroupItem.
   * @return isOther
   */
  @javax.annotation.Nullable
  public Boolean getIsOther() {
    return isOther;
  }

  public void setIsOther(Boolean isOther) {
    this.isOther = isOther;
  }


  public Option value(String value) {
    this.value = value;
    return this;
  }

  /**
   * Required. The choice as presented to the user.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Option option = (Option) o;
    return Objects.equals(this.goToAction, option.goToAction) &&
        Objects.equals(this.goToSectionId, option.goToSectionId) &&
        Objects.equals(this.image, option.image) &&
        Objects.equals(this.isOther, option.isOther) &&
        Objects.equals(this.value, option.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(goToAction, goToSectionId, image, isOther, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Option {\n");
    sb.append("    goToAction: ").append(toIndentedString(goToAction)).append("\n");
    sb.append("    goToSectionId: ").append(toIndentedString(goToSectionId)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isOther: ").append(toIndentedString(isOther)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("goToAction");
    openapiFields.add("goToSectionId");
    openapiFields.add("image");
    openapiFields.add("isOther");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Option
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Option.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Option is not found in the empty JSON string", Option.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Option.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Option` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("goToAction") != null && !jsonObj.get("goToAction").isJsonNull()) && !jsonObj.get("goToAction").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goToAction` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goToAction").toString()));
      }
      // validate the optional field `goToAction`
      if (jsonObj.get("goToAction") != null && !jsonObj.get("goToAction").isJsonNull()) {
        GoToActionEnum.validateJsonElement(jsonObj.get("goToAction"));
      }
      if ((jsonObj.get("goToSectionId") != null && !jsonObj.get("goToSectionId").isJsonNull()) && !jsonObj.get("goToSectionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `goToSectionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("goToSectionId").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        Image.validateJsonElement(jsonObj.get("image"));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Option.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Option' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Option> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Option.class));

       return (TypeAdapter<T>) new TypeAdapter<Option>() {
           @Override
           public void write(JsonWriter out, Option value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Option read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Option given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Option
   * @throws IOException if the JSON string is invalid with respect to Option
   */
  public static Option fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Option.class);
  }

  /**
   * Convert an instance of Option to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

