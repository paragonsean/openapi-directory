/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CreateItemRequest;
import org.openapitools.client.model.DeleteItemRequest;
import org.openapitools.client.model.MoveItemRequest;
import org.openapitools.client.model.UpdateFormInfoRequest;
import org.openapitools.client.model.UpdateItemRequest;
import org.openapitools.client.model.UpdateSettingsRequest;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The kinds of update requests that can be made.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Request {
  public static final String SERIALIZED_NAME_CREATE_ITEM = "createItem";
  @SerializedName(SERIALIZED_NAME_CREATE_ITEM)
  private CreateItemRequest createItem;

  public static final String SERIALIZED_NAME_DELETE_ITEM = "deleteItem";
  @SerializedName(SERIALIZED_NAME_DELETE_ITEM)
  private DeleteItemRequest deleteItem;

  public static final String SERIALIZED_NAME_MOVE_ITEM = "moveItem";
  @SerializedName(SERIALIZED_NAME_MOVE_ITEM)
  private MoveItemRequest moveItem;

  public static final String SERIALIZED_NAME_UPDATE_FORM_INFO = "updateFormInfo";
  @SerializedName(SERIALIZED_NAME_UPDATE_FORM_INFO)
  private UpdateFormInfoRequest updateFormInfo;

  public static final String SERIALIZED_NAME_UPDATE_ITEM = "updateItem";
  @SerializedName(SERIALIZED_NAME_UPDATE_ITEM)
  private UpdateItemRequest updateItem;

  public static final String SERIALIZED_NAME_UPDATE_SETTINGS = "updateSettings";
  @SerializedName(SERIALIZED_NAME_UPDATE_SETTINGS)
  private UpdateSettingsRequest updateSettings;

  public Request() {
  }

  public Request createItem(CreateItemRequest createItem) {
    this.createItem = createItem;
    return this;
  }

  /**
   * Get createItem
   * @return createItem
   */
  @javax.annotation.Nullable
  public CreateItemRequest getCreateItem() {
    return createItem;
  }

  public void setCreateItem(CreateItemRequest createItem) {
    this.createItem = createItem;
  }


  public Request deleteItem(DeleteItemRequest deleteItem) {
    this.deleteItem = deleteItem;
    return this;
  }

  /**
   * Get deleteItem
   * @return deleteItem
   */
  @javax.annotation.Nullable
  public DeleteItemRequest getDeleteItem() {
    return deleteItem;
  }

  public void setDeleteItem(DeleteItemRequest deleteItem) {
    this.deleteItem = deleteItem;
  }


  public Request moveItem(MoveItemRequest moveItem) {
    this.moveItem = moveItem;
    return this;
  }

  /**
   * Get moveItem
   * @return moveItem
   */
  @javax.annotation.Nullable
  public MoveItemRequest getMoveItem() {
    return moveItem;
  }

  public void setMoveItem(MoveItemRequest moveItem) {
    this.moveItem = moveItem;
  }


  public Request updateFormInfo(UpdateFormInfoRequest updateFormInfo) {
    this.updateFormInfo = updateFormInfo;
    return this;
  }

  /**
   * Get updateFormInfo
   * @return updateFormInfo
   */
  @javax.annotation.Nullable
  public UpdateFormInfoRequest getUpdateFormInfo() {
    return updateFormInfo;
  }

  public void setUpdateFormInfo(UpdateFormInfoRequest updateFormInfo) {
    this.updateFormInfo = updateFormInfo;
  }


  public Request updateItem(UpdateItemRequest updateItem) {
    this.updateItem = updateItem;
    return this;
  }

  /**
   * Get updateItem
   * @return updateItem
   */
  @javax.annotation.Nullable
  public UpdateItemRequest getUpdateItem() {
    return updateItem;
  }

  public void setUpdateItem(UpdateItemRequest updateItem) {
    this.updateItem = updateItem;
  }


  public Request updateSettings(UpdateSettingsRequest updateSettings) {
    this.updateSettings = updateSettings;
    return this;
  }

  /**
   * Get updateSettings
   * @return updateSettings
   */
  @javax.annotation.Nullable
  public UpdateSettingsRequest getUpdateSettings() {
    return updateSettings;
  }

  public void setUpdateSettings(UpdateSettingsRequest updateSettings) {
    this.updateSettings = updateSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.createItem, request.createItem) &&
        Objects.equals(this.deleteItem, request.deleteItem) &&
        Objects.equals(this.moveItem, request.moveItem) &&
        Objects.equals(this.updateFormInfo, request.updateFormInfo) &&
        Objects.equals(this.updateItem, request.updateItem) &&
        Objects.equals(this.updateSettings, request.updateSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createItem, deleteItem, moveItem, updateFormInfo, updateItem, updateSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    sb.append("    createItem: ").append(toIndentedString(createItem)).append("\n");
    sb.append("    deleteItem: ").append(toIndentedString(deleteItem)).append("\n");
    sb.append("    moveItem: ").append(toIndentedString(moveItem)).append("\n");
    sb.append("    updateFormInfo: ").append(toIndentedString(updateFormInfo)).append("\n");
    sb.append("    updateItem: ").append(toIndentedString(updateItem)).append("\n");
    sb.append("    updateSettings: ").append(toIndentedString(updateSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createItem");
    openapiFields.add("deleteItem");
    openapiFields.add("moveItem");
    openapiFields.add("updateFormInfo");
    openapiFields.add("updateItem");
    openapiFields.add("updateSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Request is not found in the empty JSON string", Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `createItem`
      if (jsonObj.get("createItem") != null && !jsonObj.get("createItem").isJsonNull()) {
        CreateItemRequest.validateJsonElement(jsonObj.get("createItem"));
      }
      // validate the optional field `deleteItem`
      if (jsonObj.get("deleteItem") != null && !jsonObj.get("deleteItem").isJsonNull()) {
        DeleteItemRequest.validateJsonElement(jsonObj.get("deleteItem"));
      }
      // validate the optional field `moveItem`
      if (jsonObj.get("moveItem") != null && !jsonObj.get("moveItem").isJsonNull()) {
        MoveItemRequest.validateJsonElement(jsonObj.get("moveItem"));
      }
      // validate the optional field `updateFormInfo`
      if (jsonObj.get("updateFormInfo") != null && !jsonObj.get("updateFormInfo").isJsonNull()) {
        UpdateFormInfoRequest.validateJsonElement(jsonObj.get("updateFormInfo"));
      }
      // validate the optional field `updateItem`
      if (jsonObj.get("updateItem") != null && !jsonObj.get("updateItem").isJsonNull()) {
        UpdateItemRequest.validateJsonElement(jsonObj.get("updateItem"));
      }
      // validate the optional field `updateSettings`
      if (jsonObj.get("updateSettings") != null && !jsonObj.get("updateSettings").isJsonNull()) {
        UpdateSettingsRequest.validateJsonElement(jsonObj.get("updateSettings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Request.class));

       return (TypeAdapter<T>) new TypeAdapter<Request>() {
           @Override
           public void write(JsonWriter out, Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Request
   * @throws IOException if the JSON string is invalid with respect to Request
   */
  public static Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Request.class);
  }

  /**
   * Convert an instance of Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

