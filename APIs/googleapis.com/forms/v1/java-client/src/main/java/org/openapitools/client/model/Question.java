/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ChoiceQuestion;
import org.openapitools.client.model.DateQuestion;
import org.openapitools.client.model.FileUploadQuestion;
import org.openapitools.client.model.Grading;
import org.openapitools.client.model.RowQuestion;
import org.openapitools.client.model.ScaleQuestion;
import org.openapitools.client.model.TextQuestion;
import org.openapitools.client.model.TimeQuestion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Any question. The specific type of question is known by its &#x60;kind&#x60;.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Question {
  public static final String SERIALIZED_NAME_CHOICE_QUESTION = "choiceQuestion";
  @SerializedName(SERIALIZED_NAME_CHOICE_QUESTION)
  private ChoiceQuestion choiceQuestion;

  public static final String SERIALIZED_NAME_DATE_QUESTION = "dateQuestion";
  @SerializedName(SERIALIZED_NAME_DATE_QUESTION)
  private DateQuestion dateQuestion;

  public static final String SERIALIZED_NAME_FILE_UPLOAD_QUESTION = "fileUploadQuestion";
  @SerializedName(SERIALIZED_NAME_FILE_UPLOAD_QUESTION)
  private FileUploadQuestion fileUploadQuestion;

  public static final String SERIALIZED_NAME_GRADING = "grading";
  @SerializedName(SERIALIZED_NAME_GRADING)
  private Grading grading;

  public static final String SERIALIZED_NAME_QUESTION_ID = "questionId";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  private String questionId;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private Boolean required;

  public static final String SERIALIZED_NAME_ROW_QUESTION = "rowQuestion";
  @SerializedName(SERIALIZED_NAME_ROW_QUESTION)
  private RowQuestion rowQuestion;

  public static final String SERIALIZED_NAME_SCALE_QUESTION = "scaleQuestion";
  @SerializedName(SERIALIZED_NAME_SCALE_QUESTION)
  private ScaleQuestion scaleQuestion;

  public static final String SERIALIZED_NAME_TEXT_QUESTION = "textQuestion";
  @SerializedName(SERIALIZED_NAME_TEXT_QUESTION)
  private TextQuestion textQuestion;

  public static final String SERIALIZED_NAME_TIME_QUESTION = "timeQuestion";
  @SerializedName(SERIALIZED_NAME_TIME_QUESTION)
  private TimeQuestion timeQuestion;

  public Question() {
  }

  public Question choiceQuestion(ChoiceQuestion choiceQuestion) {
    this.choiceQuestion = choiceQuestion;
    return this;
  }

  /**
   * Get choiceQuestion
   * @return choiceQuestion
   */
  @javax.annotation.Nullable
  public ChoiceQuestion getChoiceQuestion() {
    return choiceQuestion;
  }

  public void setChoiceQuestion(ChoiceQuestion choiceQuestion) {
    this.choiceQuestion = choiceQuestion;
  }


  public Question dateQuestion(DateQuestion dateQuestion) {
    this.dateQuestion = dateQuestion;
    return this;
  }

  /**
   * Get dateQuestion
   * @return dateQuestion
   */
  @javax.annotation.Nullable
  public DateQuestion getDateQuestion() {
    return dateQuestion;
  }

  public void setDateQuestion(DateQuestion dateQuestion) {
    this.dateQuestion = dateQuestion;
  }


  public Question fileUploadQuestion(FileUploadQuestion fileUploadQuestion) {
    this.fileUploadQuestion = fileUploadQuestion;
    return this;
  }

  /**
   * Get fileUploadQuestion
   * @return fileUploadQuestion
   */
  @javax.annotation.Nullable
  public FileUploadQuestion getFileUploadQuestion() {
    return fileUploadQuestion;
  }

  public void setFileUploadQuestion(FileUploadQuestion fileUploadQuestion) {
    this.fileUploadQuestion = fileUploadQuestion;
  }


  public Question grading(Grading grading) {
    this.grading = grading;
    return this;
  }

  /**
   * Get grading
   * @return grading
   */
  @javax.annotation.Nullable
  public Grading getGrading() {
    return grading;
  }

  public void setGrading(Grading grading) {
    this.grading = grading;
  }


  public Question questionId(String questionId) {
    this.questionId = questionId;
    return this;
  }

  /**
   * Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
   * @return questionId
   */
  @javax.annotation.Nullable
  public String getQuestionId() {
    return questionId;
  }

  public void setQuestionId(String questionId) {
    this.questionId = questionId;
  }


  public Question required(Boolean required) {
    this.required = required;
    return this;
  }

  /**
   * Whether the question must be answered in order for a respondent to submit their response.
   * @return required
   */
  @javax.annotation.Nullable
  public Boolean getRequired() {
    return required;
  }

  public void setRequired(Boolean required) {
    this.required = required;
  }


  public Question rowQuestion(RowQuestion rowQuestion) {
    this.rowQuestion = rowQuestion;
    return this;
  }

  /**
   * Get rowQuestion
   * @return rowQuestion
   */
  @javax.annotation.Nullable
  public RowQuestion getRowQuestion() {
    return rowQuestion;
  }

  public void setRowQuestion(RowQuestion rowQuestion) {
    this.rowQuestion = rowQuestion;
  }


  public Question scaleQuestion(ScaleQuestion scaleQuestion) {
    this.scaleQuestion = scaleQuestion;
    return this;
  }

  /**
   * Get scaleQuestion
   * @return scaleQuestion
   */
  @javax.annotation.Nullable
  public ScaleQuestion getScaleQuestion() {
    return scaleQuestion;
  }

  public void setScaleQuestion(ScaleQuestion scaleQuestion) {
    this.scaleQuestion = scaleQuestion;
  }


  public Question textQuestion(TextQuestion textQuestion) {
    this.textQuestion = textQuestion;
    return this;
  }

  /**
   * Get textQuestion
   * @return textQuestion
   */
  @javax.annotation.Nullable
  public TextQuestion getTextQuestion() {
    return textQuestion;
  }

  public void setTextQuestion(TextQuestion textQuestion) {
    this.textQuestion = textQuestion;
  }


  public Question timeQuestion(TimeQuestion timeQuestion) {
    this.timeQuestion = timeQuestion;
    return this;
  }

  /**
   * Get timeQuestion
   * @return timeQuestion
   */
  @javax.annotation.Nullable
  public TimeQuestion getTimeQuestion() {
    return timeQuestion;
  }

  public void setTimeQuestion(TimeQuestion timeQuestion) {
    this.timeQuestion = timeQuestion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Question question = (Question) o;
    return Objects.equals(this.choiceQuestion, question.choiceQuestion) &&
        Objects.equals(this.dateQuestion, question.dateQuestion) &&
        Objects.equals(this.fileUploadQuestion, question.fileUploadQuestion) &&
        Objects.equals(this.grading, question.grading) &&
        Objects.equals(this.questionId, question.questionId) &&
        Objects.equals(this.required, question.required) &&
        Objects.equals(this.rowQuestion, question.rowQuestion) &&
        Objects.equals(this.scaleQuestion, question.scaleQuestion) &&
        Objects.equals(this.textQuestion, question.textQuestion) &&
        Objects.equals(this.timeQuestion, question.timeQuestion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(choiceQuestion, dateQuestion, fileUploadQuestion, grading, questionId, required, rowQuestion, scaleQuestion, textQuestion, timeQuestion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Question {\n");
    sb.append("    choiceQuestion: ").append(toIndentedString(choiceQuestion)).append("\n");
    sb.append("    dateQuestion: ").append(toIndentedString(dateQuestion)).append("\n");
    sb.append("    fileUploadQuestion: ").append(toIndentedString(fileUploadQuestion)).append("\n");
    sb.append("    grading: ").append(toIndentedString(grading)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    rowQuestion: ").append(toIndentedString(rowQuestion)).append("\n");
    sb.append("    scaleQuestion: ").append(toIndentedString(scaleQuestion)).append("\n");
    sb.append("    textQuestion: ").append(toIndentedString(textQuestion)).append("\n");
    sb.append("    timeQuestion: ").append(toIndentedString(timeQuestion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("choiceQuestion");
    openapiFields.add("dateQuestion");
    openapiFields.add("fileUploadQuestion");
    openapiFields.add("grading");
    openapiFields.add("questionId");
    openapiFields.add("required");
    openapiFields.add("rowQuestion");
    openapiFields.add("scaleQuestion");
    openapiFields.add("textQuestion");
    openapiFields.add("timeQuestion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Question
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Question.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Question is not found in the empty JSON string", Question.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Question.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Question` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `choiceQuestion`
      if (jsonObj.get("choiceQuestion") != null && !jsonObj.get("choiceQuestion").isJsonNull()) {
        ChoiceQuestion.validateJsonElement(jsonObj.get("choiceQuestion"));
      }
      // validate the optional field `dateQuestion`
      if (jsonObj.get("dateQuestion") != null && !jsonObj.get("dateQuestion").isJsonNull()) {
        DateQuestion.validateJsonElement(jsonObj.get("dateQuestion"));
      }
      // validate the optional field `fileUploadQuestion`
      if (jsonObj.get("fileUploadQuestion") != null && !jsonObj.get("fileUploadQuestion").isJsonNull()) {
        FileUploadQuestion.validateJsonElement(jsonObj.get("fileUploadQuestion"));
      }
      // validate the optional field `grading`
      if (jsonObj.get("grading") != null && !jsonObj.get("grading").isJsonNull()) {
        Grading.validateJsonElement(jsonObj.get("grading"));
      }
      if ((jsonObj.get("questionId") != null && !jsonObj.get("questionId").isJsonNull()) && !jsonObj.get("questionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `questionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("questionId").toString()));
      }
      // validate the optional field `rowQuestion`
      if (jsonObj.get("rowQuestion") != null && !jsonObj.get("rowQuestion").isJsonNull()) {
        RowQuestion.validateJsonElement(jsonObj.get("rowQuestion"));
      }
      // validate the optional field `scaleQuestion`
      if (jsonObj.get("scaleQuestion") != null && !jsonObj.get("scaleQuestion").isJsonNull()) {
        ScaleQuestion.validateJsonElement(jsonObj.get("scaleQuestion"));
      }
      // validate the optional field `textQuestion`
      if (jsonObj.get("textQuestion") != null && !jsonObj.get("textQuestion").isJsonNull()) {
        TextQuestion.validateJsonElement(jsonObj.get("textQuestion"));
      }
      // validate the optional field `timeQuestion`
      if (jsonObj.get("timeQuestion") != null && !jsonObj.get("timeQuestion").isJsonNull()) {
        TimeQuestion.validateJsonElement(jsonObj.get("timeQuestion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Question.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Question' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Question> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Question.class));

       return (TypeAdapter<T>) new TypeAdapter<Question>() {
           @Override
           public void write(JsonWriter out, Question value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Question read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Question given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Question
   * @throws IOException if the JSON string is invalid with respect to Question
   */
  public static Question fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Question.class);
  }

  /**
   * Convert an instance of Question to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

