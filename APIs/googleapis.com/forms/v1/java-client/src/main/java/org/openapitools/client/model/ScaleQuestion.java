/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A scale question. The user has a range of numeric values to choose from.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScaleQuestion {
  public static final String SERIALIZED_NAME_HIGH = "high";
  @SerializedName(SERIALIZED_NAME_HIGH)
  private Integer high;

  public static final String SERIALIZED_NAME_HIGH_LABEL = "highLabel";
  @SerializedName(SERIALIZED_NAME_HIGH_LABEL)
  private String highLabel;

  public static final String SERIALIZED_NAME_LOW = "low";
  @SerializedName(SERIALIZED_NAME_LOW)
  private Integer low;

  public static final String SERIALIZED_NAME_LOW_LABEL = "lowLabel";
  @SerializedName(SERIALIZED_NAME_LOW_LABEL)
  private String lowLabel;

  public ScaleQuestion() {
  }

  public ScaleQuestion high(Integer high) {
    this.high = high;
    return this;
  }

  /**
   * Required. The highest possible value for the scale.
   * @return high
   */
  @javax.annotation.Nullable
  public Integer getHigh() {
    return high;
  }

  public void setHigh(Integer high) {
    this.high = high;
  }


  public ScaleQuestion highLabel(String highLabel) {
    this.highLabel = highLabel;
    return this;
  }

  /**
   * The label to display describing the highest point on the scale.
   * @return highLabel
   */
  @javax.annotation.Nullable
  public String getHighLabel() {
    return highLabel;
  }

  public void setHighLabel(String highLabel) {
    this.highLabel = highLabel;
  }


  public ScaleQuestion low(Integer low) {
    this.low = low;
    return this;
  }

  /**
   * Required. The lowest possible value for the scale.
   * @return low
   */
  @javax.annotation.Nullable
  public Integer getLow() {
    return low;
  }

  public void setLow(Integer low) {
    this.low = low;
  }


  public ScaleQuestion lowLabel(String lowLabel) {
    this.lowLabel = lowLabel;
    return this;
  }

  /**
   * The label to display describing the lowest point on the scale.
   * @return lowLabel
   */
  @javax.annotation.Nullable
  public String getLowLabel() {
    return lowLabel;
  }

  public void setLowLabel(String lowLabel) {
    this.lowLabel = lowLabel;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScaleQuestion scaleQuestion = (ScaleQuestion) o;
    return Objects.equals(this.high, scaleQuestion.high) &&
        Objects.equals(this.highLabel, scaleQuestion.highLabel) &&
        Objects.equals(this.low, scaleQuestion.low) &&
        Objects.equals(this.lowLabel, scaleQuestion.lowLabel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(high, highLabel, low, lowLabel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScaleQuestion {\n");
    sb.append("    high: ").append(toIndentedString(high)).append("\n");
    sb.append("    highLabel: ").append(toIndentedString(highLabel)).append("\n");
    sb.append("    low: ").append(toIndentedString(low)).append("\n");
    sb.append("    lowLabel: ").append(toIndentedString(lowLabel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("high");
    openapiFields.add("highLabel");
    openapiFields.add("low");
    openapiFields.add("lowLabel");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScaleQuestion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScaleQuestion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScaleQuestion is not found in the empty JSON string", ScaleQuestion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScaleQuestion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScaleQuestion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("highLabel") != null && !jsonObj.get("highLabel").isJsonNull()) && !jsonObj.get("highLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highLabel").toString()));
      }
      if ((jsonObj.get("lowLabel") != null && !jsonObj.get("lowLabel").isJsonNull()) && !jsonObj.get("lowLabel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lowLabel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lowLabel").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScaleQuestion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScaleQuestion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScaleQuestion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScaleQuestion.class));

       return (TypeAdapter<T>) new TypeAdapter<ScaleQuestion>() {
           @Override
           public void write(JsonWriter out, ScaleQuestion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScaleQuestion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScaleQuestion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScaleQuestion
   * @throws IOException if the JSON string is invalid with respect to ScaleQuestion
   */
  public static ScaleQuestion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScaleQuestion.class);
  }

  /**
   * Convert an instance of ScaleQuestion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

