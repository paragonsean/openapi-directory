/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.Answer;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A form response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FormResponse {
  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private Map<String, Answer> answers = new HashMap<>();

  public static final String SERIALIZED_NAME_CREATE_TIME = "createTime";
  @SerializedName(SERIALIZED_NAME_CREATE_TIME)
  private String createTime;

  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private String formId;

  public static final String SERIALIZED_NAME_LAST_SUBMITTED_TIME = "lastSubmittedTime";
  @SerializedName(SERIALIZED_NAME_LAST_SUBMITTED_TIME)
  private String lastSubmittedTime;

  public static final String SERIALIZED_NAME_RESPONDENT_EMAIL = "respondentEmail";
  @SerializedName(SERIALIZED_NAME_RESPONDENT_EMAIL)
  private String respondentEmail;

  public static final String SERIALIZED_NAME_RESPONSE_ID = "responseId";
  @SerializedName(SERIALIZED_NAME_RESPONSE_ID)
  private String responseId;

  public static final String SERIALIZED_NAME_TOTAL_SCORE = "totalScore";
  @SerializedName(SERIALIZED_NAME_TOTAL_SCORE)
  private Double totalScore;

  public FormResponse() {
  }

  public FormResponse(
     Map<String, Answer> answers, 
     String createTime, 
     String formId, 
     String lastSubmittedTime, 
     String respondentEmail, 
     String responseId, 
     Double totalScore
  ) {
    this();
    this.answers = answers;
    this.createTime = createTime;
    this.formId = formId;
    this.lastSubmittedTime = lastSubmittedTime;
    this.respondentEmail = respondentEmail;
    this.responseId = responseId;
    this.totalScore = totalScore;
  }

  /**
   * Output only. The actual answers to the questions, keyed by question_id.
   * @return answers
   */
  @javax.annotation.Nullable
  public Map<String, Answer> getAnswers() {
    return answers;
  }



  /**
   * Output only. Timestamp for the first time the response was submitted.
   * @return createTime
   */
  @javax.annotation.Nullable
  public String getCreateTime() {
    return createTime;
  }



  /**
   * Output only. The form ID.
   * @return formId
   */
  @javax.annotation.Nullable
  public String getFormId() {
    return formId;
  }



  /**
   * Output only. Timestamp for the most recent time the response was submitted. Does not track changes to grades.
   * @return lastSubmittedTime
   */
  @javax.annotation.Nullable
  public String getLastSubmittedTime() {
    return lastSubmittedTime;
  }



  /**
   * Output only. The email address (if collected) for the respondent.
   * @return respondentEmail
   */
  @javax.annotation.Nullable
  public String getRespondentEmail() {
    return respondentEmail;
  }



  /**
   * Output only. The response ID.
   * @return responseId
   */
  @javax.annotation.Nullable
  public String getResponseId() {
    return responseId;
  }



  /**
   * Output only. The total number of points the respondent received for their submission Only set if the form was a quiz and the response was graded. This includes points automatically awarded via autograding adjusted by any manual corrections entered by the form owner.
   * @return totalScore
   */
  @javax.annotation.Nullable
  public Double getTotalScore() {
    return totalScore;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormResponse formResponse = (FormResponse) o;
    return Objects.equals(this.answers, formResponse.answers) &&
        Objects.equals(this.createTime, formResponse.createTime) &&
        Objects.equals(this.formId, formResponse.formId) &&
        Objects.equals(this.lastSubmittedTime, formResponse.lastSubmittedTime) &&
        Objects.equals(this.respondentEmail, formResponse.respondentEmail) &&
        Objects.equals(this.responseId, formResponse.responseId) &&
        Objects.equals(this.totalScore, formResponse.totalScore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answers, createTime, formId, lastSubmittedTime, respondentEmail, responseId, totalScore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormResponse {\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    createTime: ").append(toIndentedString(createTime)).append("\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    lastSubmittedTime: ").append(toIndentedString(lastSubmittedTime)).append("\n");
    sb.append("    respondentEmail: ").append(toIndentedString(respondentEmail)).append("\n");
    sb.append("    responseId: ").append(toIndentedString(responseId)).append("\n");
    sb.append("    totalScore: ").append(toIndentedString(totalScore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answers");
    openapiFields.add("createTime");
    openapiFields.add("formId");
    openapiFields.add("lastSubmittedTime");
    openapiFields.add("respondentEmail");
    openapiFields.add("responseId");
    openapiFields.add("totalScore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormResponse is not found in the empty JSON string", FormResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("createTime") != null && !jsonObj.get("createTime").isJsonNull()) && !jsonObj.get("createTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createTime").toString()));
      }
      if ((jsonObj.get("formId") != null && !jsonObj.get("formId").isJsonNull()) && !jsonObj.get("formId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formId").toString()));
      }
      if ((jsonObj.get("lastSubmittedTime") != null && !jsonObj.get("lastSubmittedTime").isJsonNull()) && !jsonObj.get("lastSubmittedTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastSubmittedTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastSubmittedTime").toString()));
      }
      if ((jsonObj.get("respondentEmail") != null && !jsonObj.get("respondentEmail").isJsonNull()) && !jsonObj.get("respondentEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `respondentEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("respondentEmail").toString()));
      }
      if ((jsonObj.get("responseId") != null && !jsonObj.get("responseId").isJsonNull()) && !jsonObj.get("responseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<FormResponse>() {
           @Override
           public void write(JsonWriter out, FormResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormResponse
   * @throws IOException if the JSON string is invalid with respect to FormResponse
   */
  public static FormResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormResponse.class);
  }

  /**
   * Convert an instance of FormResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

