/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FormSettings;
import org.openapitools.client.model.Info;
import org.openapitools.client.model.Item;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Google Forms document. A form is created in Drive, and deleting a form or changing its access protections is done via the [Drive API](https://developers.google.com/drive/api/v3/about-sdk).
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Form {
  public static final String SERIALIZED_NAME_FORM_ID = "formId";
  @SerializedName(SERIALIZED_NAME_FORM_ID)
  private String formId;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private Info info;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<Item> items = new ArrayList<>();

  public static final String SERIALIZED_NAME_LINKED_SHEET_ID = "linkedSheetId";
  @SerializedName(SERIALIZED_NAME_LINKED_SHEET_ID)
  private String linkedSheetId;

  public static final String SERIALIZED_NAME_RESPONDER_URI = "responderUri";
  @SerializedName(SERIALIZED_NAME_RESPONDER_URI)
  private String responderUri;

  public static final String SERIALIZED_NAME_REVISION_ID = "revisionId";
  @SerializedName(SERIALIZED_NAME_REVISION_ID)
  private String revisionId;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private FormSettings settings;

  public Form() {
  }

  public Form(
     String formId, 
     String linkedSheetId, 
     String responderUri, 
     String revisionId
  ) {
    this();
    this.formId = formId;
    this.linkedSheetId = linkedSheetId;
    this.responderUri = responderUri;
    this.revisionId = revisionId;
  }

  /**
   * Output only. The form ID.
   * @return formId
   */
  @javax.annotation.Nullable
  public String getFormId() {
    return formId;
  }



  public Form info(Info info) {
    this.info = info;
    return this;
  }

  /**
   * Get info
   * @return info
   */
  @javax.annotation.Nullable
  public Info getInfo() {
    return info;
  }

  public void setInfo(Info info) {
    this.info = info;
  }


  public Form items(List<Item> items) {
    this.items = items;
    return this;
  }

  public Form addItemsItem(Item itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Required. A list of the form&#39;s items, which can include section headers, questions, embedded media, etc.
   * @return items
   */
  @javax.annotation.Nullable
  public List<Item> getItems() {
    return items;
  }

  public void setItems(List<Item> items) {
    this.items = items;
  }


  /**
   * Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).
   * @return linkedSheetId
   */
  @javax.annotation.Nullable
  public String getLinkedSheetId() {
    return linkedSheetId;
  }



  /**
   * Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.
   * @return responderUri
   */
  @javax.annotation.Nullable
  public String getResponderUri() {
    return responderUri;
  }



  /**
   * Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.
   * @return revisionId
   */
  @javax.annotation.Nullable
  public String getRevisionId() {
    return revisionId;
  }



  public Form settings(FormSettings settings) {
    this.settings = settings;
    return this;
  }

  /**
   * Get settings
   * @return settings
   */
  @javax.annotation.Nullable
  public FormSettings getSettings() {
    return settings;
  }

  public void setSettings(FormSettings settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Form form = (Form) o;
    return Objects.equals(this.formId, form.formId) &&
        Objects.equals(this.info, form.info) &&
        Objects.equals(this.items, form.items) &&
        Objects.equals(this.linkedSheetId, form.linkedSheetId) &&
        Objects.equals(this.responderUri, form.responderUri) &&
        Objects.equals(this.revisionId, form.revisionId) &&
        Objects.equals(this.settings, form.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(formId, info, items, linkedSheetId, responderUri, revisionId, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Form {\n");
    sb.append("    formId: ").append(toIndentedString(formId)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    linkedSheetId: ").append(toIndentedString(linkedSheetId)).append("\n");
    sb.append("    responderUri: ").append(toIndentedString(responderUri)).append("\n");
    sb.append("    revisionId: ").append(toIndentedString(revisionId)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("formId");
    openapiFields.add("info");
    openapiFields.add("items");
    openapiFields.add("linkedSheetId");
    openapiFields.add("responderUri");
    openapiFields.add("revisionId");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Form
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Form.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Form is not found in the empty JSON string", Form.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Form.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Form` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("formId") != null && !jsonObj.get("formId").isJsonNull()) && !jsonObj.get("formId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formId").toString()));
      }
      // validate the optional field `info`
      if (jsonObj.get("info") != null && !jsonObj.get("info").isJsonNull()) {
        Info.validateJsonElement(jsonObj.get("info"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            Item.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if ((jsonObj.get("linkedSheetId") != null && !jsonObj.get("linkedSheetId").isJsonNull()) && !jsonObj.get("linkedSheetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkedSheetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("linkedSheetId").toString()));
      }
      if ((jsonObj.get("responderUri") != null && !jsonObj.get("responderUri").isJsonNull()) && !jsonObj.get("responderUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responderUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responderUri").toString()));
      }
      if ((jsonObj.get("revisionId") != null && !jsonObj.get("revisionId").isJsonNull()) && !jsonObj.get("revisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revisionId").toString()));
      }
      // validate the optional field `settings`
      if (jsonObj.get("settings") != null && !jsonObj.get("settings").isJsonNull()) {
        FormSettings.validateJsonElement(jsonObj.get("settings"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Form.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Form' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Form> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Form.class));

       return (TypeAdapter<T>) new TypeAdapter<Form>() {
           @Override
           public void write(JsonWriter out, Form value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Form read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Form given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Form
   * @throws IOException if the JSON string is invalid with respect to Form
   */
  public static Form fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Form.class);
  }

  /**
   * Convert an instance of Form to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

