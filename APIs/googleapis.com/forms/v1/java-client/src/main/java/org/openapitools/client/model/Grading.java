/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CorrectAnswers;
import org.openapitools.client.model.Feedback;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Grading for a single question
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Grading {
  public static final String SERIALIZED_NAME_CORRECT_ANSWERS = "correctAnswers";
  @SerializedName(SERIALIZED_NAME_CORRECT_ANSWERS)
  private CorrectAnswers correctAnswers;

  public static final String SERIALIZED_NAME_GENERAL_FEEDBACK = "generalFeedback";
  @SerializedName(SERIALIZED_NAME_GENERAL_FEEDBACK)
  private Feedback generalFeedback;

  public static final String SERIALIZED_NAME_POINT_VALUE = "pointValue";
  @SerializedName(SERIALIZED_NAME_POINT_VALUE)
  private Integer pointValue;

  public static final String SERIALIZED_NAME_WHEN_RIGHT = "whenRight";
  @SerializedName(SERIALIZED_NAME_WHEN_RIGHT)
  private Feedback whenRight;

  public static final String SERIALIZED_NAME_WHEN_WRONG = "whenWrong";
  @SerializedName(SERIALIZED_NAME_WHEN_WRONG)
  private Feedback whenWrong;

  public Grading() {
  }

  public Grading correctAnswers(CorrectAnswers correctAnswers) {
    this.correctAnswers = correctAnswers;
    return this;
  }

  /**
   * Get correctAnswers
   * @return correctAnswers
   */
  @javax.annotation.Nullable
  public CorrectAnswers getCorrectAnswers() {
    return correctAnswers;
  }

  public void setCorrectAnswers(CorrectAnswers correctAnswers) {
    this.correctAnswers = correctAnswers;
  }


  public Grading generalFeedback(Feedback generalFeedback) {
    this.generalFeedback = generalFeedback;
    return this;
  }

  /**
   * Get generalFeedback
   * @return generalFeedback
   */
  @javax.annotation.Nullable
  public Feedback getGeneralFeedback() {
    return generalFeedback;
  }

  public void setGeneralFeedback(Feedback generalFeedback) {
    this.generalFeedback = generalFeedback;
  }


  public Grading pointValue(Integer pointValue) {
    this.pointValue = pointValue;
    return this;
  }

  /**
   * Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.
   * @return pointValue
   */
  @javax.annotation.Nullable
  public Integer getPointValue() {
    return pointValue;
  }

  public void setPointValue(Integer pointValue) {
    this.pointValue = pointValue;
  }


  public Grading whenRight(Feedback whenRight) {
    this.whenRight = whenRight;
    return this;
  }

  /**
   * Get whenRight
   * @return whenRight
   */
  @javax.annotation.Nullable
  public Feedback getWhenRight() {
    return whenRight;
  }

  public void setWhenRight(Feedback whenRight) {
    this.whenRight = whenRight;
  }


  public Grading whenWrong(Feedback whenWrong) {
    this.whenWrong = whenWrong;
    return this;
  }

  /**
   * Get whenWrong
   * @return whenWrong
   */
  @javax.annotation.Nullable
  public Feedback getWhenWrong() {
    return whenWrong;
  }

  public void setWhenWrong(Feedback whenWrong) {
    this.whenWrong = whenWrong;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Grading grading = (Grading) o;
    return Objects.equals(this.correctAnswers, grading.correctAnswers) &&
        Objects.equals(this.generalFeedback, grading.generalFeedback) &&
        Objects.equals(this.pointValue, grading.pointValue) &&
        Objects.equals(this.whenRight, grading.whenRight) &&
        Objects.equals(this.whenWrong, grading.whenWrong);
  }

  @Override
  public int hashCode() {
    return Objects.hash(correctAnswers, generalFeedback, pointValue, whenRight, whenWrong);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Grading {\n");
    sb.append("    correctAnswers: ").append(toIndentedString(correctAnswers)).append("\n");
    sb.append("    generalFeedback: ").append(toIndentedString(generalFeedback)).append("\n");
    sb.append("    pointValue: ").append(toIndentedString(pointValue)).append("\n");
    sb.append("    whenRight: ").append(toIndentedString(whenRight)).append("\n");
    sb.append("    whenWrong: ").append(toIndentedString(whenWrong)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("correctAnswers");
    openapiFields.add("generalFeedback");
    openapiFields.add("pointValue");
    openapiFields.add("whenRight");
    openapiFields.add("whenWrong");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Grading
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Grading.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Grading is not found in the empty JSON string", Grading.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Grading.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Grading` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `correctAnswers`
      if (jsonObj.get("correctAnswers") != null && !jsonObj.get("correctAnswers").isJsonNull()) {
        CorrectAnswers.validateJsonElement(jsonObj.get("correctAnswers"));
      }
      // validate the optional field `generalFeedback`
      if (jsonObj.get("generalFeedback") != null && !jsonObj.get("generalFeedback").isJsonNull()) {
        Feedback.validateJsonElement(jsonObj.get("generalFeedback"));
      }
      // validate the optional field `whenRight`
      if (jsonObj.get("whenRight") != null && !jsonObj.get("whenRight").isJsonNull()) {
        Feedback.validateJsonElement(jsonObj.get("whenRight"));
      }
      // validate the optional field `whenWrong`
      if (jsonObj.get("whenWrong") != null && !jsonObj.get("whenWrong").isJsonNull()) {
        Feedback.validateJsonElement(jsonObj.get("whenWrong"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Grading.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Grading' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Grading> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Grading.class));

       return (TypeAdapter<T>) new TypeAdapter<Grading>() {
           @Override
           public void write(JsonWriter out, Grading value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Grading read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Grading given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Grading
   * @throws IOException if the JSON string is invalid with respect to Grading
   */
  public static Grading fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Grading.class);
  }

  /**
   * Convert an instance of Grading to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

