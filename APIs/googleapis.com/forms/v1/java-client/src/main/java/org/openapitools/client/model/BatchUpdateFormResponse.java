/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Form;
import org.openapitools.client.model.Response;
import org.openapitools.client.model.WriteControl;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Response to a BatchUpdateFormRequest.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BatchUpdateFormResponse {
  public static final String SERIALIZED_NAME_FORM = "form";
  @SerializedName(SERIALIZED_NAME_FORM)
  private Form form;

  public static final String SERIALIZED_NAME_REPLIES = "replies";
  @SerializedName(SERIALIZED_NAME_REPLIES)
  private List<Response> replies = new ArrayList<>();

  public static final String SERIALIZED_NAME_WRITE_CONTROL = "writeControl";
  @SerializedName(SERIALIZED_NAME_WRITE_CONTROL)
  private WriteControl writeControl;

  public BatchUpdateFormResponse() {
  }

  public BatchUpdateFormResponse form(Form form) {
    this.form = form;
    return this;
  }

  /**
   * Get form
   * @return form
   */
  @javax.annotation.Nullable
  public Form getForm() {
    return form;
  }

  public void setForm(Form form) {
    this.form = form;
  }


  public BatchUpdateFormResponse replies(List<Response> replies) {
    this.replies = replies;
    return this;
  }

  public BatchUpdateFormResponse addRepliesItem(Response repliesItem) {
    if (this.replies == null) {
      this.replies = new ArrayList<>();
    }
    this.replies.add(repliesItem);
    return this;
  }

  /**
   * The reply of the updates. This maps 1:1 with the update requests, although replies to some requests may be empty.
   * @return replies
   */
  @javax.annotation.Nullable
  public List<Response> getReplies() {
    return replies;
  }

  public void setReplies(List<Response> replies) {
    this.replies = replies;
  }


  public BatchUpdateFormResponse writeControl(WriteControl writeControl) {
    this.writeControl = writeControl;
    return this;
  }

  /**
   * Get writeControl
   * @return writeControl
   */
  @javax.annotation.Nullable
  public WriteControl getWriteControl() {
    return writeControl;
  }

  public void setWriteControl(WriteControl writeControl) {
    this.writeControl = writeControl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BatchUpdateFormResponse batchUpdateFormResponse = (BatchUpdateFormResponse) o;
    return Objects.equals(this.form, batchUpdateFormResponse.form) &&
        Objects.equals(this.replies, batchUpdateFormResponse.replies) &&
        Objects.equals(this.writeControl, batchUpdateFormResponse.writeControl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(form, replies, writeControl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BatchUpdateFormResponse {\n");
    sb.append("    form: ").append(toIndentedString(form)).append("\n");
    sb.append("    replies: ").append(toIndentedString(replies)).append("\n");
    sb.append("    writeControl: ").append(toIndentedString(writeControl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("form");
    openapiFields.add("replies");
    openapiFields.add("writeControl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BatchUpdateFormResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BatchUpdateFormResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BatchUpdateFormResponse is not found in the empty JSON string", BatchUpdateFormResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BatchUpdateFormResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BatchUpdateFormResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `form`
      if (jsonObj.get("form") != null && !jsonObj.get("form").isJsonNull()) {
        Form.validateJsonElement(jsonObj.get("form"));
      }
      if (jsonObj.get("replies") != null && !jsonObj.get("replies").isJsonNull()) {
        JsonArray jsonArrayreplies = jsonObj.getAsJsonArray("replies");
        if (jsonArrayreplies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("replies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `replies` to be an array in the JSON string but got `%s`", jsonObj.get("replies").toString()));
          }

          // validate the optional field `replies` (array)
          for (int i = 0; i < jsonArrayreplies.size(); i++) {
            Response.validateJsonElement(jsonArrayreplies.get(i));
          };
        }
      }
      // validate the optional field `writeControl`
      if (jsonObj.get("writeControl") != null && !jsonObj.get("writeControl").isJsonNull()) {
        WriteControl.validateJsonElement(jsonObj.get("writeControl"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BatchUpdateFormResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BatchUpdateFormResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BatchUpdateFormResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BatchUpdateFormResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<BatchUpdateFormResponse>() {
           @Override
           public void write(JsonWriter out, BatchUpdateFormResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BatchUpdateFormResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BatchUpdateFormResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BatchUpdateFormResponse
   * @throws IOException if the JSON string is invalid with respect to BatchUpdateFormResponse
   */
  public static BatchUpdateFormResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BatchUpdateFormResponse.class);
  }

  /**
   * Convert an instance of BatchUpdateFormResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

