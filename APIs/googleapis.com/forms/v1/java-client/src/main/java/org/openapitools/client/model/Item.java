/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageItem;
import org.openapitools.client.model.QuestionGroupItem;
import org.openapitools.client.model.QuestionItem;
import org.openapitools.client.model.VideoItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A single item of the form. &#x60;kind&#x60; defines which kind of item it is.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:33:47.257037-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Item {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IMAGE_ITEM = "imageItem";
  @SerializedName(SERIALIZED_NAME_IMAGE_ITEM)
  private ImageItem imageItem;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_PAGE_BREAK_ITEM = "pageBreakItem";
  @SerializedName(SERIALIZED_NAME_PAGE_BREAK_ITEM)
  private Object pageBreakItem;

  public static final String SERIALIZED_NAME_QUESTION_GROUP_ITEM = "questionGroupItem";
  @SerializedName(SERIALIZED_NAME_QUESTION_GROUP_ITEM)
  private QuestionGroupItem questionGroupItem;

  public static final String SERIALIZED_NAME_QUESTION_ITEM = "questionItem";
  @SerializedName(SERIALIZED_NAME_QUESTION_ITEM)
  private QuestionItem questionItem;

  public static final String SERIALIZED_NAME_TEXT_ITEM = "textItem";
  @SerializedName(SERIALIZED_NAME_TEXT_ITEM)
  private Object textItem;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_VIDEO_ITEM = "videoItem";
  @SerializedName(SERIALIZED_NAME_VIDEO_ITEM)
  private VideoItem videoItem;

  public Item() {
  }

  public Item description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the item.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Item imageItem(ImageItem imageItem) {
    this.imageItem = imageItem;
    return this;
  }

  /**
   * Get imageItem
   * @return imageItem
   */
  @javax.annotation.Nullable
  public ImageItem getImageItem() {
    return imageItem;
  }

  public void setImageItem(ImageItem imageItem) {
    this.imageItem = imageItem;
  }


  public Item itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public Item pageBreakItem(Object pageBreakItem) {
    this.pageBreakItem = pageBreakItem;
    return this;
  }

  /**
   * A page break. The title and description of this item are shown at the top of the new page.
   * @return pageBreakItem
   */
  @javax.annotation.Nullable
  public Object getPageBreakItem() {
    return pageBreakItem;
  }

  public void setPageBreakItem(Object pageBreakItem) {
    this.pageBreakItem = pageBreakItem;
  }


  public Item questionGroupItem(QuestionGroupItem questionGroupItem) {
    this.questionGroupItem = questionGroupItem;
    return this;
  }

  /**
   * Get questionGroupItem
   * @return questionGroupItem
   */
  @javax.annotation.Nullable
  public QuestionGroupItem getQuestionGroupItem() {
    return questionGroupItem;
  }

  public void setQuestionGroupItem(QuestionGroupItem questionGroupItem) {
    this.questionGroupItem = questionGroupItem;
  }


  public Item questionItem(QuestionItem questionItem) {
    this.questionItem = questionItem;
    return this;
  }

  /**
   * Get questionItem
   * @return questionItem
   */
  @javax.annotation.Nullable
  public QuestionItem getQuestionItem() {
    return questionItem;
  }

  public void setQuestionItem(QuestionItem questionItem) {
    this.questionItem = questionItem;
  }


  public Item textItem(Object textItem) {
    this.textItem = textItem;
    return this;
  }

  /**
   * A text item.
   * @return textItem
   */
  @javax.annotation.Nullable
  public Object getTextItem() {
    return textItem;
  }

  public void setTextItem(Object textItem) {
    this.textItem = textItem;
  }


  public Item title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title of the item.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public Item videoItem(VideoItem videoItem) {
    this.videoItem = videoItem;
    return this;
  }

  /**
   * Get videoItem
   * @return videoItem
   */
  @javax.annotation.Nullable
  public VideoItem getVideoItem() {
    return videoItem;
  }

  public void setVideoItem(VideoItem videoItem) {
    this.videoItem = videoItem;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Item item = (Item) o;
    return Objects.equals(this.description, item.description) &&
        Objects.equals(this.imageItem, item.imageItem) &&
        Objects.equals(this.itemId, item.itemId) &&
        Objects.equals(this.pageBreakItem, item.pageBreakItem) &&
        Objects.equals(this.questionGroupItem, item.questionGroupItem) &&
        Objects.equals(this.questionItem, item.questionItem) &&
        Objects.equals(this.textItem, item.textItem) &&
        Objects.equals(this.title, item.title) &&
        Objects.equals(this.videoItem, item.videoItem);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, imageItem, itemId, pageBreakItem, questionGroupItem, questionItem, textItem, title, videoItem);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Item {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    imageItem: ").append(toIndentedString(imageItem)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    pageBreakItem: ").append(toIndentedString(pageBreakItem)).append("\n");
    sb.append("    questionGroupItem: ").append(toIndentedString(questionGroupItem)).append("\n");
    sb.append("    questionItem: ").append(toIndentedString(questionItem)).append("\n");
    sb.append("    textItem: ").append(toIndentedString(textItem)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    videoItem: ").append(toIndentedString(videoItem)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("imageItem");
    openapiFields.add("itemId");
    openapiFields.add("pageBreakItem");
    openapiFields.add("questionGroupItem");
    openapiFields.add("questionItem");
    openapiFields.add("textItem");
    openapiFields.add("title");
    openapiFields.add("videoItem");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Item
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Item.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Item is not found in the empty JSON string", Item.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Item.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Item` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `imageItem`
      if (jsonObj.get("imageItem") != null && !jsonObj.get("imageItem").isJsonNull()) {
        ImageItem.validateJsonElement(jsonObj.get("imageItem"));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // validate the optional field `questionGroupItem`
      if (jsonObj.get("questionGroupItem") != null && !jsonObj.get("questionGroupItem").isJsonNull()) {
        QuestionGroupItem.validateJsonElement(jsonObj.get("questionGroupItem"));
      }
      // validate the optional field `questionItem`
      if (jsonObj.get("questionItem") != null && !jsonObj.get("questionItem").isJsonNull()) {
        QuestionItem.validateJsonElement(jsonObj.get("questionItem"));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `videoItem`
      if (jsonObj.get("videoItem") != null && !jsonObj.get("videoItem").isJsonNull()) {
        VideoItem.validateJsonElement(jsonObj.get("videoItem"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Item.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Item' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Item> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Item.class));

       return (TypeAdapter<T>) new TypeAdapter<Item>() {
           @Override
           public void write(JsonWriter out, Item value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Item read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Item given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Item
   * @throws IOException if the JSON string is invalid with respect to Item
   */
  public static Item fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Item.class);
  }

  /**
   * Convert an instance of Item to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

