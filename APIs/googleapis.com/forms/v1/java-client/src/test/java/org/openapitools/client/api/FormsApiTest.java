/*
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.BatchUpdateFormRequest;
import org.openapitools.client.model.BatchUpdateFormResponse;
import org.openapitools.client.model.CreateWatchRequest;
import org.openapitools.client.model.Form;
import org.openapitools.client.model.FormResponse;
import org.openapitools.client.model.ListFormResponsesResponse;
import org.openapitools.client.model.ListWatchesResponse;
import org.openapitools.client.model.Watch;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FormsApi
 */
@Disabled
public class FormsApiTest {

    private final FormsApi api = new FormsApi();

    /**
     * Change the form with a batch of updates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsBatchUpdateTest() throws ApiException {
        String formId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        BatchUpdateFormRequest batchUpdateFormRequest = null;
        BatchUpdateFormResponse response = api.formsFormsBatchUpdate(formId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, batchUpdateFormRequest);
        // TODO: test validations
    }

    /**
     * Create a new form using the title given in the provided form message in the request. *Important:* Only the form.info.title and form.info.document_title fields are copied to the new form. All other fields including the form description, items and settings are disallowed. To create a new form and add items, you must first call forms.create to create an empty form with a title and (optional) document title, and then call forms.update to add the items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsCreateTest() throws ApiException {
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Form form = null;
        Form response = api.formsFormsCreate($xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, form);
        // TODO: test validations
    }

    /**
     * Get a form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsGetTest() throws ApiException {
        String formId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Form response = api.formsFormsGet(formId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Get one response from the form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsResponsesGetTest() throws ApiException {
        String formId = null;
        String responseId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FormResponse response = api.formsFormsResponsesGet(formId, responseId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List a form&#39;s responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsResponsesListTest() throws ApiException {
        String formId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListFormResponsesResponse response = api.formsFormsResponsesList(formId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Create a new watch. If a watch ID is provided, it must be unused. For each invoking project, the per form limit is one watch per Watch.EventType. A watch expires seven days after it is created (see Watch.expire_time).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsWatchesCreateTest() throws ApiException {
        String formId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CreateWatchRequest createWatchRequest = null;
        Watch response = api.formsFormsWatchesCreate(formId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, createWatchRequest);
        // TODO: test validations
    }

    /**
     * Delete a watch.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsWatchesDeleteTest() throws ApiException {
        String formId = null;
        String watchId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.formsFormsWatchesDelete(formId, watchId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Return a list of the watches owned by the invoking project. The maximum number of watches is two: For each invoker, the limit is one for each event type per form.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsWatchesListTest() throws ApiException {
        String formId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ListWatchesResponse response = api.formsFormsWatchesList(formId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Renew an existing watch for seven days. The state of the watch after renewal is &#x60;ACTIVE&#x60;, and the &#x60;expire_time&#x60; is seven days from the renewal. Renewing a watch in an error state (e.g. &#x60;SUSPENDED&#x60;) succeeds if the error is no longer present, but fail otherwise. After a watch has expired, RenewWatch returns &#x60;NOT_FOUND&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void formsFormsWatchesRenewTest() throws ApiException {
        String formId = null;
        String watchId = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Watch response = api.formsFormsWatchesRenew(formId, watchId, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

}
