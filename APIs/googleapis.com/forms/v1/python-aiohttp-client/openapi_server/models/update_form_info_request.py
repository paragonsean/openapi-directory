# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.info import Info
from openapi_server import util


class UpdateFormInfoRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: Info=None, update_mask: str=None):
        """UpdateFormInfoRequest - a model defined in OpenAPI

        :param info: The info of this UpdateFormInfoRequest.
        :param update_mask: The update_mask of this UpdateFormInfoRequest.
        """
        self.openapi_types = {
            'info': Info,
            'update_mask': str
        }

        self.attribute_map = {
            'info': 'info',
            'update_mask': 'updateMask'
        }

        self._info = info
        self._update_mask = update_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateFormInfoRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateFormInfoRequest of this UpdateFormInfoRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this UpdateFormInfoRequest.


        :return: The info of this UpdateFormInfoRequest.
        :rtype: Info
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this UpdateFormInfoRequest.


        :param info: The info of this UpdateFormInfoRequest.
        :type info: Info
        """

        self._info = info

    @property
    def update_mask(self):
        """Gets the update_mask of this UpdateFormInfoRequest.

        Required. Only values named in this mask are changed. At least one field must be specified. The root `info` is implied and should not be specified. A single `\"*\"` can be used as short-hand for updating every field.

        :return: The update_mask of this UpdateFormInfoRequest.
        :rtype: str
        """
        return self._update_mask

    @update_mask.setter
    def update_mask(self, update_mask):
        """Sets the update_mask of this UpdateFormInfoRequest.

        Required. Only values named in this mask are changed. At least one field must be specified. The root `info` is implied and should not be specified. A single `\"*\"` can be used as short-hand for updating every field.

        :param update_mask: The update_mask of this UpdateFormInfoRequest.
        :type update_mask: str
        """

        self._update_mask = update_mask
