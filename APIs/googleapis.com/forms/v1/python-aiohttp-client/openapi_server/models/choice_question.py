# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.option import Option
from openapi_server import util


class ChoiceQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, options: List[Option]=None, shuffle: bool=None, type: str=None):
        """ChoiceQuestion - a model defined in OpenAPI

        :param options: The options of this ChoiceQuestion.
        :param shuffle: The shuffle of this ChoiceQuestion.
        :param type: The type of this ChoiceQuestion.
        """
        self.openapi_types = {
            'options': List[Option],
            'shuffle': bool,
            'type': str
        }

        self.attribute_map = {
            'options': 'options',
            'shuffle': 'shuffle',
            'type': 'type'
        }

        self._options = options
        self._shuffle = shuffle
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChoiceQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ChoiceQuestion of this ChoiceQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def options(self):
        """Gets the options of this ChoiceQuestion.

        Required. List of options that a respondent must choose from.

        :return: The options of this ChoiceQuestion.
        :rtype: List[Option]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ChoiceQuestion.

        Required. List of options that a respondent must choose from.

        :param options: The options of this ChoiceQuestion.
        :type options: List[Option]
        """

        self._options = options

    @property
    def shuffle(self):
        """Gets the shuffle of this ChoiceQuestion.

        Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.

        :return: The shuffle of this ChoiceQuestion.
        :rtype: bool
        """
        return self._shuffle

    @shuffle.setter
    def shuffle(self, shuffle):
        """Sets the shuffle of this ChoiceQuestion.

        Whether the options should be displayed in random order for different instances of the quiz. This is often used to prevent cheating by respondents who might be looking at another respondent's screen, or to address bias in a survey that might be introduced by always putting the same options first or last.

        :param shuffle: The shuffle of this ChoiceQuestion.
        :type shuffle: bool
        """

        self._shuffle = shuffle

    @property
    def type(self):
        """Gets the type of this ChoiceQuestion.

        Required. The type of choice question.

        :return: The type of this ChoiceQuestion.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChoiceQuestion.

        Required. The type of choice question.

        :param type: The type of this ChoiceQuestion.
        :type type: str
        """
        allowed_values = ["CHOICE_TYPE_UNSPECIFIED", "RADIO", "CHECKBOX", "DROP_DOWN"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
