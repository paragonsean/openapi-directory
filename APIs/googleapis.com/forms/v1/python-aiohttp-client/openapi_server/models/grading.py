# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.correct_answers import CorrectAnswers
from openapi_server.models.feedback import Feedback
from openapi_server import util


class Grading(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, correct_answers: CorrectAnswers=None, general_feedback: Feedback=None, point_value: int=None, when_right: Feedback=None, when_wrong: Feedback=None):
        """Grading - a model defined in OpenAPI

        :param correct_answers: The correct_answers of this Grading.
        :param general_feedback: The general_feedback of this Grading.
        :param point_value: The point_value of this Grading.
        :param when_right: The when_right of this Grading.
        :param when_wrong: The when_wrong of this Grading.
        """
        self.openapi_types = {
            'correct_answers': CorrectAnswers,
            'general_feedback': Feedback,
            'point_value': int,
            'when_right': Feedback,
            'when_wrong': Feedback
        }

        self.attribute_map = {
            'correct_answers': 'correctAnswers',
            'general_feedback': 'generalFeedback',
            'point_value': 'pointValue',
            'when_right': 'whenRight',
            'when_wrong': 'whenWrong'
        }

        self._correct_answers = correct_answers
        self._general_feedback = general_feedback
        self._point_value = point_value
        self._when_right = when_right
        self._when_wrong = when_wrong

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Grading':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Grading of this Grading.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def correct_answers(self):
        """Gets the correct_answers of this Grading.


        :return: The correct_answers of this Grading.
        :rtype: CorrectAnswers
        """
        return self._correct_answers

    @correct_answers.setter
    def correct_answers(self, correct_answers):
        """Sets the correct_answers of this Grading.


        :param correct_answers: The correct_answers of this Grading.
        :type correct_answers: CorrectAnswers
        """

        self._correct_answers = correct_answers

    @property
    def general_feedback(self):
        """Gets the general_feedback of this Grading.


        :return: The general_feedback of this Grading.
        :rtype: Feedback
        """
        return self._general_feedback

    @general_feedback.setter
    def general_feedback(self, general_feedback):
        """Sets the general_feedback of this Grading.


        :param general_feedback: The general_feedback of this Grading.
        :type general_feedback: Feedback
        """

        self._general_feedback = general_feedback

    @property
    def point_value(self):
        """Gets the point_value of this Grading.

        Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.

        :return: The point_value of this Grading.
        :rtype: int
        """
        return self._point_value

    @point_value.setter
    def point_value(self, point_value):
        """Sets the point_value of this Grading.

        Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.

        :param point_value: The point_value of this Grading.
        :type point_value: int
        """

        self._point_value = point_value

    @property
    def when_right(self):
        """Gets the when_right of this Grading.


        :return: The when_right of this Grading.
        :rtype: Feedback
        """
        return self._when_right

    @when_right.setter
    def when_right(self, when_right):
        """Sets the when_right of this Grading.


        :param when_right: The when_right of this Grading.
        :type when_right: Feedback
        """

        self._when_right = when_right

    @property
    def when_wrong(self):
        """Gets the when_wrong of this Grading.


        :return: The when_wrong of this Grading.
        :rtype: Feedback
        """
        return self._when_wrong

    @when_wrong.setter
    def when_wrong(self, when_wrong):
        """Sets the when_wrong of this Grading.


        :param when_wrong: The when_wrong of this Grading.
        :type when_wrong: Feedback
        """

        self._when_wrong = when_wrong
