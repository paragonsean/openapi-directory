# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.form_settings import FormSettings
from openapi_server.models.info import Info
from openapi_server.models.item import Item
from openapi_server import util


class Form(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, form_id: str=None, info: Info=None, items: List[Item]=None, linked_sheet_id: str=None, responder_uri: str=None, revision_id: str=None, settings: FormSettings=None):
        """Form - a model defined in OpenAPI

        :param form_id: The form_id of this Form.
        :param info: The info of this Form.
        :param items: The items of this Form.
        :param linked_sheet_id: The linked_sheet_id of this Form.
        :param responder_uri: The responder_uri of this Form.
        :param revision_id: The revision_id of this Form.
        :param settings: The settings of this Form.
        """
        self.openapi_types = {
            'form_id': str,
            'info': Info,
            'items': List[Item],
            'linked_sheet_id': str,
            'responder_uri': str,
            'revision_id': str,
            'settings': FormSettings
        }

        self.attribute_map = {
            'form_id': 'formId',
            'info': 'info',
            'items': 'items',
            'linked_sheet_id': 'linkedSheetId',
            'responder_uri': 'responderUri',
            'revision_id': 'revisionId',
            'settings': 'settings'
        }

        self._form_id = form_id
        self._info = info
        self._items = items
        self._linked_sheet_id = linked_sheet_id
        self._responder_uri = responder_uri
        self._revision_id = revision_id
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Form':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Form of this Form.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def form_id(self):
        """Gets the form_id of this Form.

        Output only. The form ID.

        :return: The form_id of this Form.
        :rtype: str
        """
        return self._form_id

    @form_id.setter
    def form_id(self, form_id):
        """Sets the form_id of this Form.

        Output only. The form ID.

        :param form_id: The form_id of this Form.
        :type form_id: str
        """

        self._form_id = form_id

    @property
    def info(self):
        """Gets the info of this Form.


        :return: The info of this Form.
        :rtype: Info
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Form.


        :param info: The info of this Form.
        :type info: Info
        """

        self._info = info

    @property
    def items(self):
        """Gets the items of this Form.

        Required. A list of the form's items, which can include section headers, questions, embedded media, etc.

        :return: The items of this Form.
        :rtype: List[Item]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Form.

        Required. A list of the form's items, which can include section headers, questions, embedded media, etc.

        :param items: The items of this Form.
        :type items: List[Item]
        """

        self._items = items

    @property
    def linked_sheet_id(self):
        """Gets the linked_sheet_id of this Form.

        Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).

        :return: The linked_sheet_id of this Form.
        :rtype: str
        """
        return self._linked_sheet_id

    @linked_sheet_id.setter
    def linked_sheet_id(self, linked_sheet_id):
        """Sets the linked_sheet_id of this Form.

        Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).

        :param linked_sheet_id: The linked_sheet_id of this Form.
        :type linked_sheet_id: str
        """

        self._linked_sheet_id = linked_sheet_id

    @property
    def responder_uri(self):
        """Gets the responder_uri of this Form.

        Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.

        :return: The responder_uri of this Form.
        :rtype: str
        """
        return self._responder_uri

    @responder_uri.setter
    def responder_uri(self, responder_uri):
        """Sets the responder_uri of this Form.

        Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.

        :param responder_uri: The responder_uri of this Form.
        :type responder_uri: str
        """

        self._responder_uri = responder_uri

    @property
    def revision_id(self):
        """Gets the revision_id of this Form.

        Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.

        :return: The revision_id of this Form.
        :rtype: str
        """
        return self._revision_id

    @revision_id.setter
    def revision_id(self, revision_id):
        """Sets the revision_id of this Form.

        Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.

        :param revision_id: The revision_id of this Form.
        :type revision_id: str
        """

        self._revision_id = revision_id

    @property
    def settings(self):
        """Gets the settings of this Form.


        :return: The settings of this Form.
        :rtype: FormSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this Form.


        :param settings: The settings of this Form.
        :type settings: FormSettings
        """

        self._settings = settings
