# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DateQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, include_time: bool=None, include_year: bool=None):
        """DateQuestion - a model defined in OpenAPI

        :param include_time: The include_time of this DateQuestion.
        :param include_year: The include_year of this DateQuestion.
        """
        self.openapi_types = {
            'include_time': bool,
            'include_year': bool
        }

        self.attribute_map = {
            'include_time': 'includeTime',
            'include_year': 'includeYear'
        }

        self._include_time = include_time
        self._include_year = include_year

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DateQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DateQuestion of this DateQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def include_time(self):
        """Gets the include_time of this DateQuestion.

        Whether to include the time as part of the question.

        :return: The include_time of this DateQuestion.
        :rtype: bool
        """
        return self._include_time

    @include_time.setter
    def include_time(self, include_time):
        """Sets the include_time of this DateQuestion.

        Whether to include the time as part of the question.

        :param include_time: The include_time of this DateQuestion.
        :type include_time: bool
        """

        self._include_time = include_time

    @property
    def include_year(self):
        """Gets the include_year of this DateQuestion.

        Whether to include the year as part of the question.

        :return: The include_year of this DateQuestion.
        :rtype: bool
        """
        return self._include_year

    @include_year.setter
    def include_year(self, include_year):
        """Sets the include_year of this DateQuestion.

        Whether to include the year as part of the question.

        :param include_year: The include_year of this DateQuestion.
        :type include_year: bool
        """

        self._include_year = include_year
