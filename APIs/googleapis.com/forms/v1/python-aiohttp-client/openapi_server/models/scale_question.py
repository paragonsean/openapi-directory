# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScaleQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, high: int=None, high_label: str=None, low: int=None, low_label: str=None):
        """ScaleQuestion - a model defined in OpenAPI

        :param high: The high of this ScaleQuestion.
        :param high_label: The high_label of this ScaleQuestion.
        :param low: The low of this ScaleQuestion.
        :param low_label: The low_label of this ScaleQuestion.
        """
        self.openapi_types = {
            'high': int,
            'high_label': str,
            'low': int,
            'low_label': str
        }

        self.attribute_map = {
            'high': 'high',
            'high_label': 'highLabel',
            'low': 'low',
            'low_label': 'lowLabel'
        }

        self._high = high
        self._high_label = high_label
        self._low = low
        self._low_label = low_label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScaleQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScaleQuestion of this ScaleQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def high(self):
        """Gets the high of this ScaleQuestion.

        Required. The highest possible value for the scale.

        :return: The high of this ScaleQuestion.
        :rtype: int
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this ScaleQuestion.

        Required. The highest possible value for the scale.

        :param high: The high of this ScaleQuestion.
        :type high: int
        """

        self._high = high

    @property
    def high_label(self):
        """Gets the high_label of this ScaleQuestion.

        The label to display describing the highest point on the scale.

        :return: The high_label of this ScaleQuestion.
        :rtype: str
        """
        return self._high_label

    @high_label.setter
    def high_label(self, high_label):
        """Sets the high_label of this ScaleQuestion.

        The label to display describing the highest point on the scale.

        :param high_label: The high_label of this ScaleQuestion.
        :type high_label: str
        """

        self._high_label = high_label

    @property
    def low(self):
        """Gets the low of this ScaleQuestion.

        Required. The lowest possible value for the scale.

        :return: The low of this ScaleQuestion.
        :rtype: int
        """
        return self._low

    @low.setter
    def low(self, low):
        """Sets the low of this ScaleQuestion.

        Required. The lowest possible value for the scale.

        :param low: The low of this ScaleQuestion.
        :type low: int
        """

        self._low = low

    @property
    def low_label(self):
        """Gets the low_label of this ScaleQuestion.

        The label to display describing the lowest point on the scale.

        :return: The low_label of this ScaleQuestion.
        :rtype: str
        """
        return self._low_label

    @low_label.setter
    def low_label(self, low_label):
        """Sets the low_label of this ScaleQuestion.

        The label to display describing the lowest point on the scale.

        :param low_label: The low_label of this ScaleQuestion.
        :type low_label: str
        """

        self._low_label = low_label
