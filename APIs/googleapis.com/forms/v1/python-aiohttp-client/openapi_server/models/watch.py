# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.watch_target import WatchTarget
from openapi_server import util


class Watch(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, error_type: str=None, event_type: str=None, expire_time: str=None, id: str=None, state: str=None, target: WatchTarget=None):
        """Watch - a model defined in OpenAPI

        :param create_time: The create_time of this Watch.
        :param error_type: The error_type of this Watch.
        :param event_type: The event_type of this Watch.
        :param expire_time: The expire_time of this Watch.
        :param id: The id of this Watch.
        :param state: The state of this Watch.
        :param target: The target of this Watch.
        """
        self.openapi_types = {
            'create_time': str,
            'error_type': str,
            'event_type': str,
            'expire_time': str,
            'id': str,
            'state': str,
            'target': WatchTarget
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'error_type': 'errorType',
            'event_type': 'eventType',
            'expire_time': 'expireTime',
            'id': 'id',
            'state': 'state',
            'target': 'target'
        }

        self._create_time = create_time
        self._error_type = error_type
        self._event_type = event_type
        self._expire_time = expire_time
        self._id = id
        self._state = state
        self._target = target

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Watch':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Watch of this Watch.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this Watch.

        Output only. Timestamp of when this was created.

        :return: The create_time of this Watch.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Watch.

        Output only. Timestamp of when this was created.

        :param create_time: The create_time of this Watch.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def error_type(self):
        """Gets the error_type of this Watch.

        Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.

        :return: The error_type of this Watch.
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this Watch.

        Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.

        :param error_type: The error_type of this Watch.
        :type error_type: str
        """
        allowed_values = ["ERROR_TYPE_UNSPECIFIED", "PROJECT_NOT_AUTHORIZED", "NO_USER_ACCESS", "OTHER_ERRORS"]  # noqa: E501
        if error_type not in allowed_values:
            raise ValueError(
                "Invalid value for `error_type` ({0}), must be one of {1}"
                .format(error_type, allowed_values)
            )

        self._error_type = error_type

    @property
    def event_type(self):
        """Gets the event_type of this Watch.

        Required. Which event type to watch for.

        :return: The event_type of this Watch.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Watch.

        Required. Which event type to watch for.

        :param event_type: The event_type of this Watch.
        :type event_type: str
        """
        allowed_values = ["EVENT_TYPE_UNSPECIFIED", "SCHEMA", "RESPONSES"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def expire_time(self):
        """Gets the expire_time of this Watch.

        Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.

        :return: The expire_time of this Watch.
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this Watch.

        Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.

        :param expire_time: The expire_time of this Watch.
        :type expire_time: str
        """

        self._expire_time = expire_time

    @property
    def id(self):
        """Gets the id of this Watch.

        Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.

        :return: The id of this Watch.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Watch.

        Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.

        :param id: The id of this Watch.
        :type id: str
        """

        self._id = id

    @property
    def state(self):
        """Gets the state of this Watch.

        Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.

        :return: The state of this Watch.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Watch.

        Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.

        :param state: The state of this Watch.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "ACTIVE", "SUSPENDED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def target(self):
        """Gets the target of this Watch.


        :return: The target of this Watch.
        :rtype: WatchTarget
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this Watch.


        :param target: The target of this Watch.
        :type target: WatchTarget
        """

        self._target = target
