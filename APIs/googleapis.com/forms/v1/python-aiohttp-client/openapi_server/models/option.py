# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image import Image
from openapi_server import util


class Option(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, go_to_action: str=None, go_to_section_id: str=None, image: Image=None, is_other: bool=None, value: str=None):
        """Option - a model defined in OpenAPI

        :param go_to_action: The go_to_action of this Option.
        :param go_to_section_id: The go_to_section_id of this Option.
        :param image: The image of this Option.
        :param is_other: The is_other of this Option.
        :param value: The value of this Option.
        """
        self.openapi_types = {
            'go_to_action': str,
            'go_to_section_id': str,
            'image': Image,
            'is_other': bool,
            'value': str
        }

        self.attribute_map = {
            'go_to_action': 'goToAction',
            'go_to_section_id': 'goToSectionId',
            'image': 'image',
            'is_other': 'isOther',
            'value': 'value'
        }

        self._go_to_action = go_to_action
        self._go_to_section_id = go_to_section_id
        self._image = image
        self._is_other = is_other
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Option':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Option of this Option.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def go_to_action(self):
        """Gets the go_to_action of this Option.

        Section navigation type.

        :return: The go_to_action of this Option.
        :rtype: str
        """
        return self._go_to_action

    @go_to_action.setter
    def go_to_action(self, go_to_action):
        """Sets the go_to_action of this Option.

        Section navigation type.

        :param go_to_action: The go_to_action of this Option.
        :type go_to_action: str
        """
        allowed_values = ["GO_TO_ACTION_UNSPECIFIED", "NEXT_SECTION", "RESTART_FORM", "SUBMIT_FORM"]  # noqa: E501
        if go_to_action not in allowed_values:
            raise ValueError(
                "Invalid value for `go_to_action` ({0}), must be one of {1}"
                .format(go_to_action, allowed_values)
            )

        self._go_to_action = go_to_action

    @property
    def go_to_section_id(self):
        """Gets the go_to_section_id of this Option.

        Item ID of section header to go to.

        :return: The go_to_section_id of this Option.
        :rtype: str
        """
        return self._go_to_section_id

    @go_to_section_id.setter
    def go_to_section_id(self, go_to_section_id):
        """Sets the go_to_section_id of this Option.

        Item ID of section header to go to.

        :param go_to_section_id: The go_to_section_id of this Option.
        :type go_to_section_id: str
        """

        self._go_to_section_id = go_to_section_id

    @property
    def image(self):
        """Gets the image of this Option.


        :return: The image of this Option.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Option.


        :param image: The image of this Option.
        :type image: Image
        """

        self._image = image

    @property
    def is_other(self):
        """Gets the is_other of this Option.

        Whether the option is \"other\". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.

        :return: The is_other of this Option.
        :rtype: bool
        """
        return self._is_other

    @is_other.setter
    def is_other(self, is_other):
        """Sets the is_other of this Option.

        Whether the option is \"other\". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.

        :param is_other: The is_other of this Option.
        :type is_other: bool
        """

        self._is_other = is_other

    @property
    def value(self):
        """Gets the value of this Option.

        Required. The choice as presented to the user.

        :return: The value of this Option.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Option.

        Required. The choice as presented to the user.

        :param value: The value of this Option.
        :type value: str
        """

        self._value = value
