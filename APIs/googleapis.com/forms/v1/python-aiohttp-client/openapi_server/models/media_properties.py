# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MediaProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alignment: str=None, width: int=None):
        """MediaProperties - a model defined in OpenAPI

        :param alignment: The alignment of this MediaProperties.
        :param width: The width of this MediaProperties.
        """
        self.openapi_types = {
            'alignment': str,
            'width': int
        }

        self.attribute_map = {
            'alignment': 'alignment',
            'width': 'width'
        }

        self._alignment = alignment
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MediaProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MediaProperties of this MediaProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alignment(self):
        """Gets the alignment of this MediaProperties.

        Position of the media.

        :return: The alignment of this MediaProperties.
        :rtype: str
        """
        return self._alignment

    @alignment.setter
    def alignment(self, alignment):
        """Sets the alignment of this MediaProperties.

        Position of the media.

        :param alignment: The alignment of this MediaProperties.
        :type alignment: str
        """
        allowed_values = ["ALIGNMENT_UNSPECIFIED", "LEFT", "RIGHT", "CENTER"]  # noqa: E501
        if alignment not in allowed_values:
            raise ValueError(
                "Invalid value for `alignment` ({0}), must be one of {1}"
                .format(alignment, allowed_values)
            )

        self._alignment = alignment

    @property
    def width(self):
        """Gets the width of this MediaProperties.

        The width of the media in pixels. When the media is displayed, it is scaled to the smaller of this value or the width of the displayed form. The original aspect ratio of the media is preserved. If a width is not specified when the media is added to the form, it is set to the width of the media source. Width must be between 0 and 740, inclusive. Setting width to 0 or unspecified is only permitted when updating the media source.

        :return: The width of this MediaProperties.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this MediaProperties.

        The width of the media in pixels. When the media is displayed, it is scaled to the smaller of this value or the width of the displayed form. The original aspect ratio of the media is preserved. If a width is not specified when the media is added to the form, it is set to the width of the media source. Width must be between 0 and 740, inclusive. Setting width to 0 or unspecified is only permitted when updating the media source.

        :param width: The width of this MediaProperties.
        :type width: int
        """

        self._width = width
