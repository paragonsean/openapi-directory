# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_item import ImageItem
from openapi_server.models.question_group_item import QuestionGroupItem
from openapi_server.models.question_item import QuestionItem
from openapi_server.models.video_item import VideoItem
from openapi_server import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, image_item: ImageItem=None, item_id: str=None, page_break_item: object=None, question_group_item: QuestionGroupItem=None, question_item: QuestionItem=None, text_item: object=None, title: str=None, video_item: VideoItem=None):
        """Item - a model defined in OpenAPI

        :param description: The description of this Item.
        :param image_item: The image_item of this Item.
        :param item_id: The item_id of this Item.
        :param page_break_item: The page_break_item of this Item.
        :param question_group_item: The question_group_item of this Item.
        :param question_item: The question_item of this Item.
        :param text_item: The text_item of this Item.
        :param title: The title of this Item.
        :param video_item: The video_item of this Item.
        """
        self.openapi_types = {
            'description': str,
            'image_item': ImageItem,
            'item_id': str,
            'page_break_item': object,
            'question_group_item': QuestionGroupItem,
            'question_item': QuestionItem,
            'text_item': object,
            'title': str,
            'video_item': VideoItem
        }

        self.attribute_map = {
            'description': 'description',
            'image_item': 'imageItem',
            'item_id': 'itemId',
            'page_break_item': 'pageBreakItem',
            'question_group_item': 'questionGroupItem',
            'question_item': 'questionItem',
            'text_item': 'textItem',
            'title': 'title',
            'video_item': 'videoItem'
        }

        self._description = description
        self._image_item = image_item
        self._item_id = item_id
        self._page_break_item = page_break_item
        self._question_group_item = question_group_item
        self._question_item = question_item
        self._text_item = text_item
        self._title = title
        self._video_item = video_item

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Item of this Item.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Item.

        The description of the item.

        :return: The description of this Item.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Item.

        The description of the item.

        :param description: The description of this Item.
        :type description: str
        """

        self._description = description

    @property
    def image_item(self):
        """Gets the image_item of this Item.


        :return: The image_item of this Item.
        :rtype: ImageItem
        """
        return self._image_item

    @image_item.setter
    def image_item(self, image_item):
        """Sets the image_item of this Item.


        :param image_item: The image_item of this Item.
        :type image_item: ImageItem
        """

        self._image_item = image_item

    @property
    def item_id(self):
        """Gets the item_id of this Item.

        The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.

        :return: The item_id of this Item.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Item.

        The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.

        :param item_id: The item_id of this Item.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def page_break_item(self):
        """Gets the page_break_item of this Item.

        A page break. The title and description of this item are shown at the top of the new page.

        :return: The page_break_item of this Item.
        :rtype: object
        """
        return self._page_break_item

    @page_break_item.setter
    def page_break_item(self, page_break_item):
        """Sets the page_break_item of this Item.

        A page break. The title and description of this item are shown at the top of the new page.

        :param page_break_item: The page_break_item of this Item.
        :type page_break_item: object
        """

        self._page_break_item = page_break_item

    @property
    def question_group_item(self):
        """Gets the question_group_item of this Item.


        :return: The question_group_item of this Item.
        :rtype: QuestionGroupItem
        """
        return self._question_group_item

    @question_group_item.setter
    def question_group_item(self, question_group_item):
        """Sets the question_group_item of this Item.


        :param question_group_item: The question_group_item of this Item.
        :type question_group_item: QuestionGroupItem
        """

        self._question_group_item = question_group_item

    @property
    def question_item(self):
        """Gets the question_item of this Item.


        :return: The question_item of this Item.
        :rtype: QuestionItem
        """
        return self._question_item

    @question_item.setter
    def question_item(self, question_item):
        """Sets the question_item of this Item.


        :param question_item: The question_item of this Item.
        :type question_item: QuestionItem
        """

        self._question_item = question_item

    @property
    def text_item(self):
        """Gets the text_item of this Item.

        A text item.

        :return: The text_item of this Item.
        :rtype: object
        """
        return self._text_item

    @text_item.setter
    def text_item(self, text_item):
        """Sets the text_item of this Item.

        A text item.

        :param text_item: The text_item of this Item.
        :type text_item: object
        """

        self._text_item = text_item

    @property
    def title(self):
        """Gets the title of this Item.

        The title of the item.

        :return: The title of this Item.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Item.

        The title of the item.

        :param title: The title of this Item.
        :type title: str
        """

        self._title = title

    @property
    def video_item(self):
        """Gets the video_item of this Item.


        :return: The video_item of this Item.
        :rtype: VideoItem
        """
        return self._video_item

    @video_item.setter
    def video_item(self, video_item):
        """Sets the video_item of this Item.


        :param video_item: The video_item of this Item.
        :type video_item: VideoItem
        """

        self._video_item = video_item
