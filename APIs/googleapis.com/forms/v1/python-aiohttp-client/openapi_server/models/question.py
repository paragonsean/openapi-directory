# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.choice_question import ChoiceQuestion
from openapi_server.models.date_question import DateQuestion
from openapi_server.models.file_upload_question import FileUploadQuestion
from openapi_server.models.grading import Grading
from openapi_server.models.row_question import RowQuestion
from openapi_server.models.scale_question import ScaleQuestion
from openapi_server.models.text_question import TextQuestion
from openapi_server.models.time_question import TimeQuestion
from openapi_server import util


class Question(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choice_question: ChoiceQuestion=None, date_question: DateQuestion=None, file_upload_question: FileUploadQuestion=None, grading: Grading=None, question_id: str=None, required: bool=None, row_question: RowQuestion=None, scale_question: ScaleQuestion=None, text_question: TextQuestion=None, time_question: TimeQuestion=None):
        """Question - a model defined in OpenAPI

        :param choice_question: The choice_question of this Question.
        :param date_question: The date_question of this Question.
        :param file_upload_question: The file_upload_question of this Question.
        :param grading: The grading of this Question.
        :param question_id: The question_id of this Question.
        :param required: The required of this Question.
        :param row_question: The row_question of this Question.
        :param scale_question: The scale_question of this Question.
        :param text_question: The text_question of this Question.
        :param time_question: The time_question of this Question.
        """
        self.openapi_types = {
            'choice_question': ChoiceQuestion,
            'date_question': DateQuestion,
            'file_upload_question': FileUploadQuestion,
            'grading': Grading,
            'question_id': str,
            'required': bool,
            'row_question': RowQuestion,
            'scale_question': ScaleQuestion,
            'text_question': TextQuestion,
            'time_question': TimeQuestion
        }

        self.attribute_map = {
            'choice_question': 'choiceQuestion',
            'date_question': 'dateQuestion',
            'file_upload_question': 'fileUploadQuestion',
            'grading': 'grading',
            'question_id': 'questionId',
            'required': 'required',
            'row_question': 'rowQuestion',
            'scale_question': 'scaleQuestion',
            'text_question': 'textQuestion',
            'time_question': 'timeQuestion'
        }

        self._choice_question = choice_question
        self._date_question = date_question
        self._file_upload_question = file_upload_question
        self._grading = grading
        self._question_id = question_id
        self._required = required
        self._row_question = row_question
        self._scale_question = scale_question
        self._text_question = text_question
        self._time_question = time_question

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Question':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Question of this Question.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choice_question(self):
        """Gets the choice_question of this Question.


        :return: The choice_question of this Question.
        :rtype: ChoiceQuestion
        """
        return self._choice_question

    @choice_question.setter
    def choice_question(self, choice_question):
        """Sets the choice_question of this Question.


        :param choice_question: The choice_question of this Question.
        :type choice_question: ChoiceQuestion
        """

        self._choice_question = choice_question

    @property
    def date_question(self):
        """Gets the date_question of this Question.


        :return: The date_question of this Question.
        :rtype: DateQuestion
        """
        return self._date_question

    @date_question.setter
    def date_question(self, date_question):
        """Sets the date_question of this Question.


        :param date_question: The date_question of this Question.
        :type date_question: DateQuestion
        """

        self._date_question = date_question

    @property
    def file_upload_question(self):
        """Gets the file_upload_question of this Question.


        :return: The file_upload_question of this Question.
        :rtype: FileUploadQuestion
        """
        return self._file_upload_question

    @file_upload_question.setter
    def file_upload_question(self, file_upload_question):
        """Sets the file_upload_question of this Question.


        :param file_upload_question: The file_upload_question of this Question.
        :type file_upload_question: FileUploadQuestion
        """

        self._file_upload_question = file_upload_question

    @property
    def grading(self):
        """Gets the grading of this Question.


        :return: The grading of this Question.
        :rtype: Grading
        """
        return self._grading

    @grading.setter
    def grading(self, grading):
        """Sets the grading of this Question.


        :param grading: The grading of this Question.
        :type grading: Grading
        """

        self._grading = grading

    @property
    def question_id(self):
        """Gets the question_id of this Question.

        Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.

        :return: The question_id of this Question.
        :rtype: str
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this Question.

        Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.

        :param question_id: The question_id of this Question.
        :type question_id: str
        """

        self._question_id = question_id

    @property
    def required(self):
        """Gets the required of this Question.

        Whether the question must be answered in order for a respondent to submit their response.

        :return: The required of this Question.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this Question.

        Whether the question must be answered in order for a respondent to submit their response.

        :param required: The required of this Question.
        :type required: bool
        """

        self._required = required

    @property
    def row_question(self):
        """Gets the row_question of this Question.


        :return: The row_question of this Question.
        :rtype: RowQuestion
        """
        return self._row_question

    @row_question.setter
    def row_question(self, row_question):
        """Sets the row_question of this Question.


        :param row_question: The row_question of this Question.
        :type row_question: RowQuestion
        """

        self._row_question = row_question

    @property
    def scale_question(self):
        """Gets the scale_question of this Question.


        :return: The scale_question of this Question.
        :rtype: ScaleQuestion
        """
        return self._scale_question

    @scale_question.setter
    def scale_question(self, scale_question):
        """Sets the scale_question of this Question.


        :param scale_question: The scale_question of this Question.
        :type scale_question: ScaleQuestion
        """

        self._scale_question = scale_question

    @property
    def text_question(self):
        """Gets the text_question of this Question.


        :return: The text_question of this Question.
        :rtype: TextQuestion
        """
        return self._text_question

    @text_question.setter
    def text_question(self, text_question):
        """Sets the text_question of this Question.


        :param text_question: The text_question of this Question.
        :type text_question: TextQuestion
        """

        self._text_question = text_question

    @property
    def time_question(self):
        """Gets the time_question of this Question.


        :return: The time_question of this Question.
        :rtype: TimeQuestion
        """
        return self._time_question

    @time_question.setter
    def time_question(self, time_question):
        """Sets the time_question of this Question.


        :param time_question: The time_question of this Question.
        :type time_question: TimeQuestion
        """

        self._time_question = time_question
