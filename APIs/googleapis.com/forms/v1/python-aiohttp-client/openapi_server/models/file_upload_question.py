# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FileUploadQuestion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, folder_id: str=None, max_file_size: str=None, max_files: int=None, types: List[str]=None):
        """FileUploadQuestion - a model defined in OpenAPI

        :param folder_id: The folder_id of this FileUploadQuestion.
        :param max_file_size: The max_file_size of this FileUploadQuestion.
        :param max_files: The max_files of this FileUploadQuestion.
        :param types: The types of this FileUploadQuestion.
        """
        self.openapi_types = {
            'folder_id': str,
            'max_file_size': str,
            'max_files': int,
            'types': List[str]
        }

        self.attribute_map = {
            'folder_id': 'folderId',
            'max_file_size': 'maxFileSize',
            'max_files': 'maxFiles',
            'types': 'types'
        }

        self._folder_id = folder_id
        self._max_file_size = max_file_size
        self._max_files = max_files
        self._types = types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FileUploadQuestion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FileUploadQuestion of this FileUploadQuestion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def folder_id(self):
        """Gets the folder_id of this FileUploadQuestion.

        Required. The ID of the Drive folder where uploaded files are stored.

        :return: The folder_id of this FileUploadQuestion.
        :rtype: str
        """
        return self._folder_id

    @folder_id.setter
    def folder_id(self, folder_id):
        """Sets the folder_id of this FileUploadQuestion.

        Required. The ID of the Drive folder where uploaded files are stored.

        :param folder_id: The folder_id of this FileUploadQuestion.
        :type folder_id: str
        """

        self._folder_id = folder_id

    @property
    def max_file_size(self):
        """Gets the max_file_size of this FileUploadQuestion.

        Maximum number of bytes allowed for any single file uploaded to this question.

        :return: The max_file_size of this FileUploadQuestion.
        :rtype: str
        """
        return self._max_file_size

    @max_file_size.setter
    def max_file_size(self, max_file_size):
        """Sets the max_file_size of this FileUploadQuestion.

        Maximum number of bytes allowed for any single file uploaded to this question.

        :param max_file_size: The max_file_size of this FileUploadQuestion.
        :type max_file_size: str
        """

        self._max_file_size = max_file_size

    @property
    def max_files(self):
        """Gets the max_files of this FileUploadQuestion.

        Maximum number of files that can be uploaded for this question in a single response.

        :return: The max_files of this FileUploadQuestion.
        :rtype: int
        """
        return self._max_files

    @max_files.setter
    def max_files(self, max_files):
        """Sets the max_files of this FileUploadQuestion.

        Maximum number of files that can be uploaded for this question in a single response.

        :param max_files: The max_files of this FileUploadQuestion.
        :type max_files: int
        """

        self._max_files = max_files

    @property
    def types(self):
        """Gets the types of this FileUploadQuestion.

        File types accepted by this question.

        :return: The types of this FileUploadQuestion.
        :rtype: List[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this FileUploadQuestion.

        File types accepted by this question.

        :param types: The types of this FileUploadQuestion.
        :type types: List[str]
        """
        allowed_values = ["FILE_TYPE_UNSPECIFIED", "ANY", "DOCUMENT", "PRESENTATION", "SPREADSHEET", "DRAWING", "PDF", "IMAGE", "VIDEO", "AUDIO"]  # noqa: E501
        if not set(types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `types` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(types) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._types = types
