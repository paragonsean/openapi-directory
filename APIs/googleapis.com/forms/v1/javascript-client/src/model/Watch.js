/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WatchTarget from './WatchTarget';

/**
 * The Watch model module.
 * @module model/Watch
 * @version v1
 */
class Watch {
    /**
     * Constructs a new <code>Watch</code>.
     * A watch for events for a form. When the designated event happens, a notification will be published to the specified target. The notification&#39;s attributes will include a &#x60;formId&#x60; key that has the ID of the watched form and an &#x60;eventType&#x60; key that has the string of the type. Messages are sent with at-least-once delivery and are only dropped in extraordinary circumstances. Typically all notifications should be reliably delivered within a few seconds; however, in some situations notifications may be delayed. A watch expires seven days after it is created unless it is renewed with watches.renew
     * @alias module:model/Watch
     */
    constructor() { 
        
        Watch.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Watch</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Watch} obj Optional instance to populate.
     * @return {module:model/Watch} The populated <code>Watch</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Watch();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('errorType')) {
                obj['errorType'] = ApiClient.convertToType(data['errorType'], 'String');
            }
            if (data.hasOwnProperty('eventType')) {
                obj['eventType'] = ApiClient.convertToType(data['eventType'], 'String');
            }
            if (data.hasOwnProperty('expireTime')) {
                obj['expireTime'] = ApiClient.convertToType(data['expireTime'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = WatchTarget.constructFromObject(data['target']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Watch</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Watch</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['errorType'] && !(typeof data['errorType'] === 'string' || data['errorType'] instanceof String)) {
            throw new Error("Expected the field `errorType` to be a primitive type in the JSON string but got " + data['errorType']);
        }
        // ensure the json data is a string
        if (data['eventType'] && !(typeof data['eventType'] === 'string' || data['eventType'] instanceof String)) {
            throw new Error("Expected the field `eventType` to be a primitive type in the JSON string but got " + data['eventType']);
        }
        // ensure the json data is a string
        if (data['expireTime'] && !(typeof data['expireTime'] === 'string' || data['expireTime'] instanceof String)) {
            throw new Error("Expected the field `expireTime` to be a primitive type in the JSON string but got " + data['expireTime']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // validate the optional field `target`
        if (data['target']) { // data not null
          WatchTarget.validateJSON(data['target']);
        }

        return true;
    }


}



/**
 * Output only. Timestamp of when this was created.
 * @member {String} createTime
 */
Watch.prototype['createTime'] = undefined;

/**
 * Output only. The most recent error type for an attempted delivery. To begin watching the form again a call can be made to watches.renew which also clears this error information.
 * @member {module:model/Watch.ErrorTypeEnum} errorType
 */
Watch.prototype['errorType'] = undefined;

/**
 * Required. Which event type to watch for.
 * @member {module:model/Watch.EventTypeEnum} eventType
 */
Watch.prototype['eventType'] = undefined;

/**
 * Output only. Timestamp for when this will expire. Each watches.renew call resets this to seven days in the future.
 * @member {String} expireTime
 */
Watch.prototype['expireTime'] = undefined;

/**
 * Output only. The ID of this watch. See notes on CreateWatchRequest.watch_id.
 * @member {String} id
 */
Watch.prototype['id'] = undefined;

/**
 * Output only. The current state of the watch. Additional details about suspended watches can be found by checking the `error_type`.
 * @member {module:model/Watch.StateEnum} state
 */
Watch.prototype['state'] = undefined;

/**
 * @member {module:model/WatchTarget} target
 */
Watch.prototype['target'] = undefined;





/**
 * Allowed values for the <code>errorType</code> property.
 * @enum {String}
 * @readonly
 */
Watch['ErrorTypeEnum'] = {

    /**
     * value: "ERROR_TYPE_UNSPECIFIED"
     * @const
     */
    "ERROR_TYPE_UNSPECIFIED": "ERROR_TYPE_UNSPECIFIED",

    /**
     * value: "PROJECT_NOT_AUTHORIZED"
     * @const
     */
    "PROJECT_NOT_AUTHORIZED": "PROJECT_NOT_AUTHORIZED",

    /**
     * value: "NO_USER_ACCESS"
     * @const
     */
    "NO_USER_ACCESS": "NO_USER_ACCESS",

    /**
     * value: "OTHER_ERRORS"
     * @const
     */
    "OTHER_ERRORS": "OTHER_ERRORS"
};


/**
 * Allowed values for the <code>eventType</code> property.
 * @enum {String}
 * @readonly
 */
Watch['EventTypeEnum'] = {

    /**
     * value: "EVENT_TYPE_UNSPECIFIED"
     * @const
     */
    "EVENT_TYPE_UNSPECIFIED": "EVENT_TYPE_UNSPECIFIED",

    /**
     * value: "SCHEMA"
     * @const
     */
    "SCHEMA": "SCHEMA",

    /**
     * value: "RESPONSES"
     * @const
     */
    "RESPONSES": "RESPONSES"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
Watch['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "ACTIVE"
     * @const
     */
    "ACTIVE": "ACTIVE",

    /**
     * value: "SUSPENDED"
     * @const
     */
    "SUSPENDED": "SUSPENDED"
};



export default Watch;

