/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The MediaProperties model module.
 * @module model/MediaProperties
 * @version v1
 */
class MediaProperties {
    /**
     * Constructs a new <code>MediaProperties</code>.
     * Properties of the media.
     * @alias module:model/MediaProperties
     */
    constructor() { 
        
        MediaProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>MediaProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/MediaProperties} obj Optional instance to populate.
     * @return {module:model/MediaProperties} The populated <code>MediaProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new MediaProperties();

            if (data.hasOwnProperty('alignment')) {
                obj['alignment'] = ApiClient.convertToType(data['alignment'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>MediaProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>MediaProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alignment'] && !(typeof data['alignment'] === 'string' || data['alignment'] instanceof String)) {
            throw new Error("Expected the field `alignment` to be a primitive type in the JSON string but got " + data['alignment']);
        }

        return true;
    }


}



/**
 * Position of the media.
 * @member {module:model/MediaProperties.AlignmentEnum} alignment
 */
MediaProperties.prototype['alignment'] = undefined;

/**
 * The width of the media in pixels. When the media is displayed, it is scaled to the smaller of this value or the width of the displayed form. The original aspect ratio of the media is preserved. If a width is not specified when the media is added to the form, it is set to the width of the media source. Width must be between 0 and 740, inclusive. Setting width to 0 or unspecified is only permitted when updating the media source.
 * @member {Number} width
 */
MediaProperties.prototype['width'] = undefined;





/**
 * Allowed values for the <code>alignment</code> property.
 * @enum {String}
 * @readonly
 */
MediaProperties['AlignmentEnum'] = {

    /**
     * value: "ALIGNMENT_UNSPECIFIED"
     * @const
     */
    "ALIGNMENT_UNSPECIFIED": "ALIGNMENT_UNSPECIFIED",

    /**
     * value: "LEFT"
     * @const
     */
    "LEFT": "LEFT",

    /**
     * value: "RIGHT"
     * @const
     */
    "RIGHT": "RIGHT",

    /**
     * value: "CENTER"
     * @const
     */
    "CENTER": "CENTER"
};



export default MediaProperties;

