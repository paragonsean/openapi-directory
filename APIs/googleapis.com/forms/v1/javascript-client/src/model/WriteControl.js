/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WriteControl model module.
 * @module model/WriteControl
 * @version v1
 */
class WriteControl {
    /**
     * Constructs a new <code>WriteControl</code>.
     * Provides control over how write requests are executed.
     * @alias module:model/WriteControl
     */
    constructor() { 
        
        WriteControl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WriteControl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WriteControl} obj Optional instance to populate.
     * @return {module:model/WriteControl} The populated <code>WriteControl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WriteControl();

            if (data.hasOwnProperty('requiredRevisionId')) {
                obj['requiredRevisionId'] = ApiClient.convertToType(data['requiredRevisionId'], 'String');
            }
            if (data.hasOwnProperty('targetRevisionId')) {
                obj['targetRevisionId'] = ApiClient.convertToType(data['targetRevisionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WriteControl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WriteControl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['requiredRevisionId'] && !(typeof data['requiredRevisionId'] === 'string' || data['requiredRevisionId'] instanceof String)) {
            throw new Error("Expected the field `requiredRevisionId` to be a primitive type in the JSON string but got " + data['requiredRevisionId']);
        }
        // ensure the json data is a string
        if (data['targetRevisionId'] && !(typeof data['targetRevisionId'] === 'string' || data['targetRevisionId'] instanceof String)) {
            throw new Error("Expected the field `targetRevisionId` to be a primitive type in the JSON string but got " + data['targetRevisionId']);
        }

        return true;
    }


}



/**
 * The revision ID of the form that the write request is applied to. If this is not the latest revision of the form, the request is not processed and returns a 400 bad request error.
 * @member {String} requiredRevisionId
 */
WriteControl.prototype['requiredRevisionId'] = undefined;

/**
 * The target revision ID of the form that the write request is applied to. If changes have occurred after this revision, the changes in this update request are transformed against those changes. This results in a new revision of the form that incorporates both the changes in the request and the intervening changes, with the server resolving conflicting changes. The target revision ID may only be used to write to recent versions of a form. If the target revision is too far behind the latest revision, the request is not processed and returns a 400 (Bad Request Error). The request may be retried after reading the latest version of the form. In most cases a target revision ID remains valid for several minutes after it is read, but for frequently-edited forms this window may be shorter.
 * @member {String} targetRevisionId
 */
WriteControl.prototype['targetRevisionId'] = undefined;






export default WriteControl;

