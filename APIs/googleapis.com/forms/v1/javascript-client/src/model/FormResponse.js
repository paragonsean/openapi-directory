/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Answer from './Answer';

/**
 * The FormResponse model module.
 * @module model/FormResponse
 * @version v1
 */
class FormResponse {
    /**
     * Constructs a new <code>FormResponse</code>.
     * A form response.
     * @alias module:model/FormResponse
     */
    constructor() { 
        
        FormResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FormResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FormResponse} obj Optional instance to populate.
     * @return {module:model/FormResponse} The populated <code>FormResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FormResponse();

            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], {'String': Answer});
            }
            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'String');
            }
            if (data.hasOwnProperty('lastSubmittedTime')) {
                obj['lastSubmittedTime'] = ApiClient.convertToType(data['lastSubmittedTime'], 'String');
            }
            if (data.hasOwnProperty('respondentEmail')) {
                obj['respondentEmail'] = ApiClient.convertToType(data['respondentEmail'], 'String');
            }
            if (data.hasOwnProperty('responseId')) {
                obj['responseId'] = ApiClient.convertToType(data['responseId'], 'String');
            }
            if (data.hasOwnProperty('totalScore')) {
                obj['totalScore'] = ApiClient.convertToType(data['totalScore'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FormResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FormResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['formId'] && !(typeof data['formId'] === 'string' || data['formId'] instanceof String)) {
            throw new Error("Expected the field `formId` to be a primitive type in the JSON string but got " + data['formId']);
        }
        // ensure the json data is a string
        if (data['lastSubmittedTime'] && !(typeof data['lastSubmittedTime'] === 'string' || data['lastSubmittedTime'] instanceof String)) {
            throw new Error("Expected the field `lastSubmittedTime` to be a primitive type in the JSON string but got " + data['lastSubmittedTime']);
        }
        // ensure the json data is a string
        if (data['respondentEmail'] && !(typeof data['respondentEmail'] === 'string' || data['respondentEmail'] instanceof String)) {
            throw new Error("Expected the field `respondentEmail` to be a primitive type in the JSON string but got " + data['respondentEmail']);
        }
        // ensure the json data is a string
        if (data['responseId'] && !(typeof data['responseId'] === 'string' || data['responseId'] instanceof String)) {
            throw new Error("Expected the field `responseId` to be a primitive type in the JSON string but got " + data['responseId']);
        }

        return true;
    }


}



/**
 * Output only. The actual answers to the questions, keyed by question_id.
 * @member {Object.<String, module:model/Answer>} answers
 */
FormResponse.prototype['answers'] = undefined;

/**
 * Output only. Timestamp for the first time the response was submitted.
 * @member {String} createTime
 */
FormResponse.prototype['createTime'] = undefined;

/**
 * Output only. The form ID.
 * @member {String} formId
 */
FormResponse.prototype['formId'] = undefined;

/**
 * Output only. Timestamp for the most recent time the response was submitted. Does not track changes to grades.
 * @member {String} lastSubmittedTime
 */
FormResponse.prototype['lastSubmittedTime'] = undefined;

/**
 * Output only. The email address (if collected) for the respondent.
 * @member {String} respondentEmail
 */
FormResponse.prototype['respondentEmail'] = undefined;

/**
 * Output only. The response ID.
 * @member {String} responseId
 */
FormResponse.prototype['responseId'] = undefined;

/**
 * Output only. The total number of points the respondent received for their submission Only set if the form was a quiz and the response was graded. This includes points automatically awarded via autograding adjusted by any manual corrections entered by the form owner.
 * @member {Number} totalScore
 */
FormResponse.prototype['totalScore'] = undefined;






export default FormResponse;

