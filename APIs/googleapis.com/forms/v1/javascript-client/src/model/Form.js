/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FormSettings from './FormSettings';
import Info from './Info';
import Item from './Item';

/**
 * The Form model module.
 * @module model/Form
 * @version v1
 */
class Form {
    /**
     * Constructs a new <code>Form</code>.
     * A Google Forms document. A form is created in Drive, and deleting a form or changing its access protections is done via the [Drive API](https://developers.google.com/drive/api/v3/about-sdk).
     * @alias module:model/Form
     */
    constructor() { 
        
        Form.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Form</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Form} obj Optional instance to populate.
     * @return {module:model/Form} The populated <code>Form</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Form();

            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'String');
            }
            if (data.hasOwnProperty('info')) {
                obj['info'] = Info.constructFromObject(data['info']);
            }
            if (data.hasOwnProperty('items')) {
                obj['items'] = ApiClient.convertToType(data['items'], [Item]);
            }
            if (data.hasOwnProperty('linkedSheetId')) {
                obj['linkedSheetId'] = ApiClient.convertToType(data['linkedSheetId'], 'String');
            }
            if (data.hasOwnProperty('responderUri')) {
                obj['responderUri'] = ApiClient.convertToType(data['responderUri'], 'String');
            }
            if (data.hasOwnProperty('revisionId')) {
                obj['revisionId'] = ApiClient.convertToType(data['revisionId'], 'String');
            }
            if (data.hasOwnProperty('settings')) {
                obj['settings'] = FormSettings.constructFromObject(data['settings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Form</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Form</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['formId'] && !(typeof data['formId'] === 'string' || data['formId'] instanceof String)) {
            throw new Error("Expected the field `formId` to be a primitive type in the JSON string but got " + data['formId']);
        }
        // validate the optional field `info`
        if (data['info']) { // data not null
          Info.validateJSON(data['info']);
        }
        if (data['items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['items'])) {
                throw new Error("Expected the field `items` to be an array in the JSON data but got " + data['items']);
            }
            // validate the optional field `items` (array)
            for (const item of data['items']) {
                Item.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['linkedSheetId'] && !(typeof data['linkedSheetId'] === 'string' || data['linkedSheetId'] instanceof String)) {
            throw new Error("Expected the field `linkedSheetId` to be a primitive type in the JSON string but got " + data['linkedSheetId']);
        }
        // ensure the json data is a string
        if (data['responderUri'] && !(typeof data['responderUri'] === 'string' || data['responderUri'] instanceof String)) {
            throw new Error("Expected the field `responderUri` to be a primitive type in the JSON string but got " + data['responderUri']);
        }
        // ensure the json data is a string
        if (data['revisionId'] && !(typeof data['revisionId'] === 'string' || data['revisionId'] instanceof String)) {
            throw new Error("Expected the field `revisionId` to be a primitive type in the JSON string but got " + data['revisionId']);
        }
        // validate the optional field `settings`
        if (data['settings']) { // data not null
          FormSettings.validateJSON(data['settings']);
        }

        return true;
    }


}



/**
 * Output only. The form ID.
 * @member {String} formId
 */
Form.prototype['formId'] = undefined;

/**
 * @member {module:model/Info} info
 */
Form.prototype['info'] = undefined;

/**
 * Required. A list of the form's items, which can include section headers, questions, embedded media, etc.
 * @member {Array.<module:model/Item>} items
 */
Form.prototype['items'] = undefined;

/**
 * Output only. The ID of the linked Google Sheet which is accumulating responses from this Form (if such a Sheet exists).
 * @member {String} linkedSheetId
 */
Form.prototype['linkedSheetId'] = undefined;

/**
 * Output only. The form URI to share with responders. This opens a page that allows the user to submit responses but not edit the questions.
 * @member {String} responderUri
 */
Form.prototype['responderUri'] = undefined;

/**
 * Output only. The revision ID of the form. Used in the WriteControl in update requests to identify the revision on which the changes are based. The format of the revision ID may change over time, so it should be treated opaquely. A returned revision ID is only guaranteed to be valid for 24 hours after it has been returned and cannot be shared across users. If the revision ID is unchanged between calls, then the form has not changed. Conversely, a changed ID (for the same form and user) usually means the form has been updated; however, a changed ID can also be due to internal factors such as ID format changes.
 * @member {String} revisionId
 */
Form.prototype['revisionId'] = undefined;

/**
 * @member {module:model/FormSettings} settings
 */
Form.prototype['settings'] = undefined;






export default Form;

