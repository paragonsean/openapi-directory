/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CorrectAnswers from './CorrectAnswers';
import Feedback from './Feedback';

/**
 * The Grading model module.
 * @module model/Grading
 * @version v1
 */
class Grading {
    /**
     * Constructs a new <code>Grading</code>.
     * Grading for a single question
     * @alias module:model/Grading
     */
    constructor() { 
        
        Grading.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Grading</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Grading} obj Optional instance to populate.
     * @return {module:model/Grading} The populated <code>Grading</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Grading();

            if (data.hasOwnProperty('correctAnswers')) {
                obj['correctAnswers'] = CorrectAnswers.constructFromObject(data['correctAnswers']);
            }
            if (data.hasOwnProperty('generalFeedback')) {
                obj['generalFeedback'] = Feedback.constructFromObject(data['generalFeedback']);
            }
            if (data.hasOwnProperty('pointValue')) {
                obj['pointValue'] = ApiClient.convertToType(data['pointValue'], 'Number');
            }
            if (data.hasOwnProperty('whenRight')) {
                obj['whenRight'] = Feedback.constructFromObject(data['whenRight']);
            }
            if (data.hasOwnProperty('whenWrong')) {
                obj['whenWrong'] = Feedback.constructFromObject(data['whenWrong']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Grading</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Grading</code>.
     */
    static validateJSON(data) {
        // validate the optional field `correctAnswers`
        if (data['correctAnswers']) { // data not null
          CorrectAnswers.validateJSON(data['correctAnswers']);
        }
        // validate the optional field `generalFeedback`
        if (data['generalFeedback']) { // data not null
          Feedback.validateJSON(data['generalFeedback']);
        }
        // validate the optional field `whenRight`
        if (data['whenRight']) { // data not null
          Feedback.validateJSON(data['whenRight']);
        }
        // validate the optional field `whenWrong`
        if (data['whenWrong']) { // data not null
          Feedback.validateJSON(data['whenWrong']);
        }

        return true;
    }


}



/**
 * @member {module:model/CorrectAnswers} correctAnswers
 */
Grading.prototype['correctAnswers'] = undefined;

/**
 * @member {module:model/Feedback} generalFeedback
 */
Grading.prototype['generalFeedback'] = undefined;

/**
 * Required. The maximum number of points a respondent can automatically get for a correct answer. This must not be negative.
 * @member {Number} pointValue
 */
Grading.prototype['pointValue'] = undefined;

/**
 * @member {module:model/Feedback} whenRight
 */
Grading.prototype['whenRight'] = undefined;

/**
 * @member {module:model/Feedback} whenWrong
 */
Grading.prototype['whenWrong'] = undefined;






export default Grading;

