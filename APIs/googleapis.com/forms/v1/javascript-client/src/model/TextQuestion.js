/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TextQuestion model module.
 * @module model/TextQuestion
 * @version v1
 */
class TextQuestion {
    /**
     * Constructs a new <code>TextQuestion</code>.
     * A text-based question.
     * @alias module:model/TextQuestion
     */
    constructor() { 
        
        TextQuestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TextQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TextQuestion} obj Optional instance to populate.
     * @return {module:model/TextQuestion} The populated <code>TextQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TextQuestion();

            if (data.hasOwnProperty('paragraph')) {
                obj['paragraph'] = ApiClient.convertToType(data['paragraph'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TextQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TextQuestion</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Whether the question is a paragraph question or not. If not, the question is a short text question.
 * @member {Boolean} paragraph
 */
TextQuestion.prototype['paragraph'] = undefined;






export default TextQuestion;

