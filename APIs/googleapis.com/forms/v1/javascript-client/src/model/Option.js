/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Image from './Image';

/**
 * The Option model module.
 * @module model/Option
 * @version v1
 */
class Option {
    /**
     * Constructs a new <code>Option</code>.
     * An option for a Choice question.
     * @alias module:model/Option
     */
    constructor() { 
        
        Option.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Option</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Option} obj Optional instance to populate.
     * @return {module:model/Option} The populated <code>Option</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Option();

            if (data.hasOwnProperty('goToAction')) {
                obj['goToAction'] = ApiClient.convertToType(data['goToAction'], 'String');
            }
            if (data.hasOwnProperty('goToSectionId')) {
                obj['goToSectionId'] = ApiClient.convertToType(data['goToSectionId'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('isOther')) {
                obj['isOther'] = ApiClient.convertToType(data['isOther'], 'Boolean');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Option</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Option</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['goToAction'] && !(typeof data['goToAction'] === 'string' || data['goToAction'] instanceof String)) {
            throw new Error("Expected the field `goToAction` to be a primitive type in the JSON string but got " + data['goToAction']);
        }
        // ensure the json data is a string
        if (data['goToSectionId'] && !(typeof data['goToSectionId'] === 'string' || data['goToSectionId'] instanceof String)) {
            throw new Error("Expected the field `goToSectionId` to be a primitive type in the JSON string but got " + data['goToSectionId']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Section navigation type.
 * @member {module:model/Option.GoToActionEnum} goToAction
 */
Option.prototype['goToAction'] = undefined;

/**
 * Item ID of section header to go to.
 * @member {String} goToSectionId
 */
Option.prototype['goToSectionId'] = undefined;

/**
 * @member {module:model/Image} image
 */
Option.prototype['image'] = undefined;

/**
 * Whether the option is \"other\". Currently only applies to `RADIO` and `CHECKBOX` choice types, but is not allowed in a QuestionGroupItem.
 * @member {Boolean} isOther
 */
Option.prototype['isOther'] = undefined;

/**
 * Required. The choice as presented to the user.
 * @member {String} value
 */
Option.prototype['value'] = undefined;





/**
 * Allowed values for the <code>goToAction</code> property.
 * @enum {String}
 * @readonly
 */
Option['GoToActionEnum'] = {

    /**
     * value: "GO_TO_ACTION_UNSPECIFIED"
     * @const
     */
    "GO_TO_ACTION_UNSPECIFIED": "GO_TO_ACTION_UNSPECIFIED",

    /**
     * value: "NEXT_SECTION"
     * @const
     */
    "NEXT_SECTION": "NEXT_SECTION",

    /**
     * value: "RESTART_FORM"
     * @const
     */
    "RESTART_FORM": "RESTART_FORM",

    /**
     * value: "SUBMIT_FORM"
     * @const
     */
    "SUBMIT_FORM": "SUBMIT_FORM"
};



export default Option;

