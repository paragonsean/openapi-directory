/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FileUploadQuestion model module.
 * @module model/FileUploadQuestion
 * @version v1
 */
class FileUploadQuestion {
    /**
     * Constructs a new <code>FileUploadQuestion</code>.
     * A file upload question. The API currently does not support creating file upload questions.
     * @alias module:model/FileUploadQuestion
     */
    constructor() { 
        
        FileUploadQuestion.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FileUploadQuestion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FileUploadQuestion} obj Optional instance to populate.
     * @return {module:model/FileUploadQuestion} The populated <code>FileUploadQuestion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FileUploadQuestion();

            if (data.hasOwnProperty('folderId')) {
                obj['folderId'] = ApiClient.convertToType(data['folderId'], 'String');
            }
            if (data.hasOwnProperty('maxFileSize')) {
                obj['maxFileSize'] = ApiClient.convertToType(data['maxFileSize'], 'String');
            }
            if (data.hasOwnProperty('maxFiles')) {
                obj['maxFiles'] = ApiClient.convertToType(data['maxFiles'], 'Number');
            }
            if (data.hasOwnProperty('types')) {
                obj['types'] = ApiClient.convertToType(data['types'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FileUploadQuestion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FileUploadQuestion</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['folderId'] && !(typeof data['folderId'] === 'string' || data['folderId'] instanceof String)) {
            throw new Error("Expected the field `folderId` to be a primitive type in the JSON string but got " + data['folderId']);
        }
        // ensure the json data is a string
        if (data['maxFileSize'] && !(typeof data['maxFileSize'] === 'string' || data['maxFileSize'] instanceof String)) {
            throw new Error("Expected the field `maxFileSize` to be a primitive type in the JSON string but got " + data['maxFileSize']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['types'])) {
            throw new Error("Expected the field `types` to be an array in the JSON data but got " + data['types']);
        }

        return true;
    }


}



/**
 * Required. The ID of the Drive folder where uploaded files are stored.
 * @member {String} folderId
 */
FileUploadQuestion.prototype['folderId'] = undefined;

/**
 * Maximum number of bytes allowed for any single file uploaded to this question.
 * @member {String} maxFileSize
 */
FileUploadQuestion.prototype['maxFileSize'] = undefined;

/**
 * Maximum number of files that can be uploaded for this question in a single response.
 * @member {Number} maxFiles
 */
FileUploadQuestion.prototype['maxFiles'] = undefined;

/**
 * File types accepted by this question.
 * @member {Array.<module:model/FileUploadQuestion.TypesEnum>} types
 */
FileUploadQuestion.prototype['types'] = undefined;





/**
 * Allowed values for the <code>types</code> property.
 * @enum {String}
 * @readonly
 */
FileUploadQuestion['TypesEnum'] = {

    /**
     * value: "FILE_TYPE_UNSPECIFIED"
     * @const
     */
    "FILE_TYPE_UNSPECIFIED": "FILE_TYPE_UNSPECIFIED",

    /**
     * value: "ANY"
     * @const
     */
    "ANY": "ANY",

    /**
     * value: "DOCUMENT"
     * @const
     */
    "DOCUMENT": "DOCUMENT",

    /**
     * value: "PRESENTATION"
     * @const
     */
    "PRESENTATION": "PRESENTATION",

    /**
     * value: "SPREADSHEET"
     * @const
     */
    "SPREADSHEET": "SPREADSHEET",

    /**
     * value: "DRAWING"
     * @const
     */
    "DRAWING": "DRAWING",

    /**
     * value: "PDF"
     * @const
     */
    "PDF": "PDF",

    /**
     * value: "IMAGE"
     * @const
     */
    "IMAGE": "IMAGE",

    /**
     * value: "VIDEO"
     * @const
     */
    "VIDEO": "VIDEO",

    /**
     * value: "AUDIO"
     * @const
     */
    "AUDIO": "AUDIO"
};



export default FileUploadQuestion;

