/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ChoiceQuestion from './ChoiceQuestion';
import DateQuestion from './DateQuestion';
import FileUploadQuestion from './FileUploadQuestion';
import Grading from './Grading';
import RowQuestion from './RowQuestion';
import ScaleQuestion from './ScaleQuestion';
import TextQuestion from './TextQuestion';
import TimeQuestion from './TimeQuestion';

/**
 * The Question model module.
 * @module model/Question
 * @version v1
 */
class Question {
    /**
     * Constructs a new <code>Question</code>.
     * Any question. The specific type of question is known by its &#x60;kind&#x60;.
     * @alias module:model/Question
     */
    constructor() { 
        
        Question.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Question</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Question} obj Optional instance to populate.
     * @return {module:model/Question} The populated <code>Question</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Question();

            if (data.hasOwnProperty('choiceQuestion')) {
                obj['choiceQuestion'] = ChoiceQuestion.constructFromObject(data['choiceQuestion']);
            }
            if (data.hasOwnProperty('dateQuestion')) {
                obj['dateQuestion'] = DateQuestion.constructFromObject(data['dateQuestion']);
            }
            if (data.hasOwnProperty('fileUploadQuestion')) {
                obj['fileUploadQuestion'] = FileUploadQuestion.constructFromObject(data['fileUploadQuestion']);
            }
            if (data.hasOwnProperty('grading')) {
                obj['grading'] = Grading.constructFromObject(data['grading']);
            }
            if (data.hasOwnProperty('questionId')) {
                obj['questionId'] = ApiClient.convertToType(data['questionId'], 'String');
            }
            if (data.hasOwnProperty('required')) {
                obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
            }
            if (data.hasOwnProperty('rowQuestion')) {
                obj['rowQuestion'] = RowQuestion.constructFromObject(data['rowQuestion']);
            }
            if (data.hasOwnProperty('scaleQuestion')) {
                obj['scaleQuestion'] = ScaleQuestion.constructFromObject(data['scaleQuestion']);
            }
            if (data.hasOwnProperty('textQuestion')) {
                obj['textQuestion'] = TextQuestion.constructFromObject(data['textQuestion']);
            }
            if (data.hasOwnProperty('timeQuestion')) {
                obj['timeQuestion'] = TimeQuestion.constructFromObject(data['timeQuestion']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Question</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Question</code>.
     */
    static validateJSON(data) {
        // validate the optional field `choiceQuestion`
        if (data['choiceQuestion']) { // data not null
          ChoiceQuestion.validateJSON(data['choiceQuestion']);
        }
        // validate the optional field `dateQuestion`
        if (data['dateQuestion']) { // data not null
          DateQuestion.validateJSON(data['dateQuestion']);
        }
        // validate the optional field `fileUploadQuestion`
        if (data['fileUploadQuestion']) { // data not null
          FileUploadQuestion.validateJSON(data['fileUploadQuestion']);
        }
        // validate the optional field `grading`
        if (data['grading']) { // data not null
          Grading.validateJSON(data['grading']);
        }
        // ensure the json data is a string
        if (data['questionId'] && !(typeof data['questionId'] === 'string' || data['questionId'] instanceof String)) {
            throw new Error("Expected the field `questionId` to be a primitive type in the JSON string but got " + data['questionId']);
        }
        // validate the optional field `rowQuestion`
        if (data['rowQuestion']) { // data not null
          RowQuestion.validateJSON(data['rowQuestion']);
        }
        // validate the optional field `scaleQuestion`
        if (data['scaleQuestion']) { // data not null
          ScaleQuestion.validateJSON(data['scaleQuestion']);
        }
        // validate the optional field `textQuestion`
        if (data['textQuestion']) { // data not null
          TextQuestion.validateJSON(data['textQuestion']);
        }
        // validate the optional field `timeQuestion`
        if (data['timeQuestion']) { // data not null
          TimeQuestion.validateJSON(data['timeQuestion']);
        }

        return true;
    }


}



/**
 * @member {module:model/ChoiceQuestion} choiceQuestion
 */
Question.prototype['choiceQuestion'] = undefined;

/**
 * @member {module:model/DateQuestion} dateQuestion
 */
Question.prototype['dateQuestion'] = undefined;

/**
 * @member {module:model/FileUploadQuestion} fileUploadQuestion
 */
Question.prototype['fileUploadQuestion'] = undefined;

/**
 * @member {module:model/Grading} grading
 */
Question.prototype['grading'] = undefined;

/**
 * Read only. The question ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
 * @member {String} questionId
 */
Question.prototype['questionId'] = undefined;

/**
 * Whether the question must be answered in order for a respondent to submit their response.
 * @member {Boolean} required
 */
Question.prototype['required'] = undefined;

/**
 * @member {module:model/RowQuestion} rowQuestion
 */
Question.prototype['rowQuestion'] = undefined;

/**
 * @member {module:model/ScaleQuestion} scaleQuestion
 */
Question.prototype['scaleQuestion'] = undefined;

/**
 * @member {module:model/TextQuestion} textQuestion
 */
Question.prototype['textQuestion'] = undefined;

/**
 * @member {module:model/TimeQuestion} timeQuestion
 */
Question.prototype['timeQuestion'] = undefined;






export default Question;

