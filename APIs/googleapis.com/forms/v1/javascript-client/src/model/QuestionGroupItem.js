/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Grid from './Grid';
import Image from './Image';
import Question from './Question';

/**
 * The QuestionGroupItem model module.
 * @module model/QuestionGroupItem
 * @version v1
 */
class QuestionGroupItem {
    /**
     * Constructs a new <code>QuestionGroupItem</code>.
     * Defines a question that comprises multiple questions grouped together.
     * @alias module:model/QuestionGroupItem
     */
    constructor() { 
        
        QuestionGroupItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuestionGroupItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionGroupItem} obj Optional instance to populate.
     * @return {module:model/QuestionGroupItem} The populated <code>QuestionGroupItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionGroupItem();

            if (data.hasOwnProperty('grid')) {
                obj['grid'] = Grid.constructFromObject(data['grid']);
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = Image.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('questions')) {
                obj['questions'] = ApiClient.convertToType(data['questions'], [Question]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionGroupItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionGroupItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `grid`
        if (data['grid']) { // data not null
          Grid.validateJSON(data['grid']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          Image.validateJSON(data['image']);
        }
        if (data['questions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['questions'])) {
                throw new Error("Expected the field `questions` to be an array in the JSON data but got " + data['questions']);
            }
            // validate the optional field `questions` (array)
            for (const item of data['questions']) {
                Question.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {module:model/Grid} grid
 */
QuestionGroupItem.prototype['grid'] = undefined;

/**
 * @member {module:model/Image} image
 */
QuestionGroupItem.prototype['image'] = undefined;

/**
 * Required. A list of questions that belong in this question group. A question must only belong to one group. The `kind` of the group may affect what types of questions are allowed.
 * @member {Array.<module:model/Question>} questions
 */
QuestionGroupItem.prototype['questions'] = undefined;






export default QuestionGroupItem;

