/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExtraMaterial from './ExtraMaterial';

/**
 * The Feedback model module.
 * @module model/Feedback
 * @version v1
 */
class Feedback {
    /**
     * Constructs a new <code>Feedback</code>.
     * Feedback for a respondent about their response to a question.
     * @alias module:model/Feedback
     */
    constructor() { 
        
        Feedback.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Feedback</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feedback} obj Optional instance to populate.
     * @return {module:model/Feedback} The populated <code>Feedback</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feedback();

            if (data.hasOwnProperty('material')) {
                obj['material'] = ApiClient.convertToType(data['material'], [ExtraMaterial]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feedback</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feedback</code>.
     */
    static validateJSON(data) {
        if (data['material']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['material'])) {
                throw new Error("Expected the field `material` to be an array in the JSON data but got " + data['material']);
            }
            // validate the optional field `material` (array)
            for (const item of data['material']) {
                ExtraMaterial.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * Additional information provided as part of the feedback, often used to point the respondent to more reading and resources.
 * @member {Array.<module:model/ExtraMaterial>} material
 */
Feedback.prototype['material'] = undefined;

/**
 * Required. The main text of the feedback.
 * @member {String} text
 */
Feedback.prototype['text'] = undefined;






export default Feedback;

