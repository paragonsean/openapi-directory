/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FileUploadAnswers from './FileUploadAnswers';
import Grade from './Grade';
import TextAnswers from './TextAnswers';

/**
 * The Answer model module.
 * @module model/Answer
 * @version v1
 */
class Answer {
    /**
     * Constructs a new <code>Answer</code>.
     * The submitted answer for a question.
     * @alias module:model/Answer
     */
    constructor() { 
        
        Answer.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Answer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Answer} obj Optional instance to populate.
     * @return {module:model/Answer} The populated <code>Answer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Answer();

            if (data.hasOwnProperty('fileUploadAnswers')) {
                obj['fileUploadAnswers'] = FileUploadAnswers.constructFromObject(data['fileUploadAnswers']);
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = Grade.constructFromObject(data['grade']);
            }
            if (data.hasOwnProperty('questionId')) {
                obj['questionId'] = ApiClient.convertToType(data['questionId'], 'String');
            }
            if (data.hasOwnProperty('textAnswers')) {
                obj['textAnswers'] = TextAnswers.constructFromObject(data['textAnswers']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Answer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Answer</code>.
     */
    static validateJSON(data) {
        // validate the optional field `fileUploadAnswers`
        if (data['fileUploadAnswers']) { // data not null
          FileUploadAnswers.validateJSON(data['fileUploadAnswers']);
        }
        // validate the optional field `grade`
        if (data['grade']) { // data not null
          Grade.validateJSON(data['grade']);
        }
        // ensure the json data is a string
        if (data['questionId'] && !(typeof data['questionId'] === 'string' || data['questionId'] instanceof String)) {
            throw new Error("Expected the field `questionId` to be a primitive type in the JSON string but got " + data['questionId']);
        }
        // validate the optional field `textAnswers`
        if (data['textAnswers']) { // data not null
          TextAnswers.validateJSON(data['textAnswers']);
        }

        return true;
    }


}



/**
 * @member {module:model/FileUploadAnswers} fileUploadAnswers
 */
Answer.prototype['fileUploadAnswers'] = undefined;

/**
 * @member {module:model/Grade} grade
 */
Answer.prototype['grade'] = undefined;

/**
 * Output only. The question's ID. See also Question.question_id.
 * @member {String} questionId
 */
Answer.prototype['questionId'] = undefined;

/**
 * @member {module:model/TextAnswers} textAnswers
 */
Answer.prototype['textAnswers'] = undefined;






export default Answer;

