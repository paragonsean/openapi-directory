/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MediaProperties from './MediaProperties';

/**
 * The Image model module.
 * @module model/Image
 * @version v1
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * Data representing an image.
     * @alias module:model/Image
     */
    constructor() { 
        
        Image.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('altText')) {
                obj['altText'] = ApiClient.convertToType(data['altText'], 'String');
            }
            if (data.hasOwnProperty('contentUri')) {
                obj['contentUri'] = ApiClient.convertToType(data['contentUri'], 'String');
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = MediaProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('sourceUri')) {
                obj['sourceUri'] = ApiClient.convertToType(data['sourceUri'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['altText'] && !(typeof data['altText'] === 'string' || data['altText'] instanceof String)) {
            throw new Error("Expected the field `altText` to be a primitive type in the JSON string but got " + data['altText']);
        }
        // ensure the json data is a string
        if (data['contentUri'] && !(typeof data['contentUri'] === 'string' || data['contentUri'] instanceof String)) {
            throw new Error("Expected the field `contentUri` to be a primitive type in the JSON string but got " + data['contentUri']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          MediaProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['sourceUri'] && !(typeof data['sourceUri'] === 'string' || data['sourceUri'] instanceof String)) {
            throw new Error("Expected the field `sourceUri` to be a primitive type in the JSON string but got " + data['sourceUri']);
        }

        return true;
    }


}



/**
 * A description of the image that is shown on hover and read by screenreaders.
 * @member {String} altText
 */
Image.prototype['altText'] = undefined;

/**
 * Output only. A URI from which you can download the image; this is valid only for a limited time.
 * @member {String} contentUri
 */
Image.prototype['contentUri'] = undefined;

/**
 * @member {module:model/MediaProperties} properties
 */
Image.prototype['properties'] = undefined;

/**
 * Input only. The source URI is the URI used to insert the image. The source URI can be empty when fetched.
 * @member {String} sourceUri
 */
Image.prototype['sourceUri'] = undefined;






export default Image;

