/**
 * Google Forms API
 * Reads and writes Google Forms and responses.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageItem from './ImageItem';
import QuestionGroupItem from './QuestionGroupItem';
import QuestionItem from './QuestionItem';
import VideoItem from './VideoItem';

/**
 * The Item model module.
 * @module model/Item
 * @version v1
 */
class Item {
    /**
     * Constructs a new <code>Item</code>.
     * A single item of the form. &#x60;kind&#x60; defines which kind of item it is.
     * @alias module:model/Item
     */
    constructor() { 
        
        Item.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Item</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Item} obj Optional instance to populate.
     * @return {module:model/Item} The populated <code>Item</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Item();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('imageItem')) {
                obj['imageItem'] = ImageItem.constructFromObject(data['imageItem']);
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('pageBreakItem')) {
                obj['pageBreakItem'] = ApiClient.convertToType(data['pageBreakItem'], Object);
            }
            if (data.hasOwnProperty('questionGroupItem')) {
                obj['questionGroupItem'] = QuestionGroupItem.constructFromObject(data['questionGroupItem']);
            }
            if (data.hasOwnProperty('questionItem')) {
                obj['questionItem'] = QuestionItem.constructFromObject(data['questionItem']);
            }
            if (data.hasOwnProperty('textItem')) {
                obj['textItem'] = ApiClient.convertToType(data['textItem'], Object);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('videoItem')) {
                obj['videoItem'] = VideoItem.constructFromObject(data['videoItem']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Item</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Item</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `imageItem`
        if (data['imageItem']) { // data not null
          ImageItem.validateJSON(data['imageItem']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // validate the optional field `questionGroupItem`
        if (data['questionGroupItem']) { // data not null
          QuestionGroupItem.validateJSON(data['questionGroupItem']);
        }
        // validate the optional field `questionItem`
        if (data['questionItem']) { // data not null
          QuestionItem.validateJSON(data['questionItem']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // validate the optional field `videoItem`
        if (data['videoItem']) { // data not null
          VideoItem.validateJSON(data['videoItem']);
        }

        return true;
    }


}



/**
 * The description of the item.
 * @member {String} description
 */
Item.prototype['description'] = undefined;

/**
 * @member {module:model/ImageItem} imageItem
 */
Item.prototype['imageItem'] = undefined;

/**
 * The item ID. On creation, it can be provided but the ID must not be already used in the form. If not provided, a new ID is assigned.
 * @member {String} itemId
 */
Item.prototype['itemId'] = undefined;

/**
 * A page break. The title and description of this item are shown at the top of the new page.
 * @member {Object} pageBreakItem
 */
Item.prototype['pageBreakItem'] = undefined;

/**
 * @member {module:model/QuestionGroupItem} questionGroupItem
 */
Item.prototype['questionGroupItem'] = undefined;

/**
 * @member {module:model/QuestionItem} questionItem
 */
Item.prototype['questionItem'] = undefined;

/**
 * A text item.
 * @member {Object} textItem
 */
Item.prototype['textItem'] = undefined;

/**
 * The title of the item.
 * @member {String} title
 */
Item.prototype['title'] = undefined;

/**
 * @member {module:model/VideoItem} videoItem
 */
Item.prototype['videoItem'] = undefined;






export default Item;

