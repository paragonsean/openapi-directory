/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration for controlling how IPs are allocated in the GKE cluster running the Apache Airflow software.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:43.595125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IPAllocationPolicy {
  public static final String SERIALIZED_NAME_CLUSTER_IPV4_CIDR_BLOCK = "clusterIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_CLUSTER_IPV4_CIDR_BLOCK)
  private String clusterIpv4CidrBlock;

  public static final String SERIALIZED_NAME_CLUSTER_SECONDARY_RANGE_NAME = "clusterSecondaryRangeName";
  @SerializedName(SERIALIZED_NAME_CLUSTER_SECONDARY_RANGE_NAME)
  private String clusterSecondaryRangeName;

  public static final String SERIALIZED_NAME_SERVICES_IPV4_CIDR_BLOCK = "servicesIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_SERVICES_IPV4_CIDR_BLOCK)
  private String servicesIpv4CidrBlock;

  public static final String SERIALIZED_NAME_SERVICES_SECONDARY_RANGE_NAME = "servicesSecondaryRangeName";
  @SerializedName(SERIALIZED_NAME_SERVICES_SECONDARY_RANGE_NAME)
  private String servicesSecondaryRangeName;

  public static final String SERIALIZED_NAME_USE_IP_ALIASES = "useIpAliases";
  @SerializedName(SERIALIZED_NAME_USE_IP_ALIASES)
  private Boolean useIpAliases;

  public IPAllocationPolicy() {
  }

  public IPAllocationPolicy clusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
    this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
    return this;
  }

  /**
   * Optional. The IP address range used to allocate IP addresses to pods in the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when &#x60;use_ip_aliases&#x60; is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. &#x60;/14&#x60;) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. &#x60;10.96.0.0/14&#x60;) from the RFC-1918 private networks (e.g. &#x60;10.0.0.0/8&#x60;, &#x60;172.16.0.0/12&#x60;, &#x60;192.168.0.0/16&#x60;) to pick a specific range to use.
   * @return clusterIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getClusterIpv4CidrBlock() {
    return clusterIpv4CidrBlock;
  }

  public void setClusterIpv4CidrBlock(String clusterIpv4CidrBlock) {
    this.clusterIpv4CidrBlock = clusterIpv4CidrBlock;
  }


  public IPAllocationPolicy clusterSecondaryRangeName(String clusterSecondaryRangeName) {
    this.clusterSecondaryRangeName = clusterSecondaryRangeName;
    return this;
  }

  /**
   * Optional. The name of the GKE cluster&#39;s secondary range used to allocate IP addresses to pods. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when &#x60;use_ip_aliases&#x60; is true.
   * @return clusterSecondaryRangeName
   */
  @javax.annotation.Nullable
  public String getClusterSecondaryRangeName() {
    return clusterSecondaryRangeName;
  }

  public void setClusterSecondaryRangeName(String clusterSecondaryRangeName) {
    this.clusterSecondaryRangeName = clusterSecondaryRangeName;
  }


  public IPAllocationPolicy servicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
    this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
    return this;
  }

  /**
   * Optional. The IP address range of the services IP addresses in this GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when &#x60;use_ip_aliases&#x60; is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. &#x60;/14&#x60;) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. &#x60;10.96.0.0/14&#x60;) from the RFC-1918 private networks (e.g. &#x60;10.0.0.0/8&#x60;, &#x60;172.16.0.0/12&#x60;, &#x60;192.168.0.0/16&#x60;) to pick a specific range to use.
   * @return servicesIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getServicesIpv4CidrBlock() {
    return servicesIpv4CidrBlock;
  }

  public void setServicesIpv4CidrBlock(String servicesIpv4CidrBlock) {
    this.servicesIpv4CidrBlock = servicesIpv4CidrBlock;
  }


  public IPAllocationPolicy servicesSecondaryRangeName(String servicesSecondaryRangeName) {
    this.servicesSecondaryRangeName = servicesSecondaryRangeName;
    return this;
  }

  /**
   * Optional. The name of the services&#39; secondary range used to allocate IP addresses to the GKE cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when &#x60;use_ip_aliases&#x60; is true.
   * @return servicesSecondaryRangeName
   */
  @javax.annotation.Nullable
  public String getServicesSecondaryRangeName() {
    return servicesSecondaryRangeName;
  }

  public void setServicesSecondaryRangeName(String servicesSecondaryRangeName) {
    this.servicesSecondaryRangeName = servicesSecondaryRangeName;
  }


  public IPAllocationPolicy useIpAliases(Boolean useIpAliases) {
    this.useIpAliases = useIpAliases;
    return this;
  }

  /**
   * Optional. Whether or not to enable Alias IPs in the GKE cluster. If &#x60;true&#x60;, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
   * @return useIpAliases
   */
  @javax.annotation.Nullable
  public Boolean getUseIpAliases() {
    return useIpAliases;
  }

  public void setUseIpAliases(Boolean useIpAliases) {
    this.useIpAliases = useIpAliases;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IPAllocationPolicy ipAllocationPolicy = (IPAllocationPolicy) o;
    return Objects.equals(this.clusterIpv4CidrBlock, ipAllocationPolicy.clusterIpv4CidrBlock) &&
        Objects.equals(this.clusterSecondaryRangeName, ipAllocationPolicy.clusterSecondaryRangeName) &&
        Objects.equals(this.servicesIpv4CidrBlock, ipAllocationPolicy.servicesIpv4CidrBlock) &&
        Objects.equals(this.servicesSecondaryRangeName, ipAllocationPolicy.servicesSecondaryRangeName) &&
        Objects.equals(this.useIpAliases, ipAllocationPolicy.useIpAliases);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clusterIpv4CidrBlock, clusterSecondaryRangeName, servicesIpv4CidrBlock, servicesSecondaryRangeName, useIpAliases);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IPAllocationPolicy {\n");
    sb.append("    clusterIpv4CidrBlock: ").append(toIndentedString(clusterIpv4CidrBlock)).append("\n");
    sb.append("    clusterSecondaryRangeName: ").append(toIndentedString(clusterSecondaryRangeName)).append("\n");
    sb.append("    servicesIpv4CidrBlock: ").append(toIndentedString(servicesIpv4CidrBlock)).append("\n");
    sb.append("    servicesSecondaryRangeName: ").append(toIndentedString(servicesSecondaryRangeName)).append("\n");
    sb.append("    useIpAliases: ").append(toIndentedString(useIpAliases)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clusterIpv4CidrBlock");
    openapiFields.add("clusterSecondaryRangeName");
    openapiFields.add("servicesIpv4CidrBlock");
    openapiFields.add("servicesSecondaryRangeName");
    openapiFields.add("useIpAliases");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IPAllocationPolicy
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IPAllocationPolicy.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IPAllocationPolicy is not found in the empty JSON string", IPAllocationPolicy.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IPAllocationPolicy.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IPAllocationPolicy` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clusterIpv4CidrBlock") != null && !jsonObj.get("clusterIpv4CidrBlock").isJsonNull()) && !jsonObj.get("clusterIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterIpv4CidrBlock").toString()));
      }
      if ((jsonObj.get("clusterSecondaryRangeName") != null && !jsonObj.get("clusterSecondaryRangeName").isJsonNull()) && !jsonObj.get("clusterSecondaryRangeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clusterSecondaryRangeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clusterSecondaryRangeName").toString()));
      }
      if ((jsonObj.get("servicesIpv4CidrBlock") != null && !jsonObj.get("servicesIpv4CidrBlock").isJsonNull()) && !jsonObj.get("servicesIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicesIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicesIpv4CidrBlock").toString()));
      }
      if ((jsonObj.get("servicesSecondaryRangeName") != null && !jsonObj.get("servicesSecondaryRangeName").isJsonNull()) && !jsonObj.get("servicesSecondaryRangeName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `servicesSecondaryRangeName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("servicesSecondaryRangeName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IPAllocationPolicy.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IPAllocationPolicy' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IPAllocationPolicy> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IPAllocationPolicy.class));

       return (TypeAdapter<T>) new TypeAdapter<IPAllocationPolicy>() {
           @Override
           public void write(JsonWriter out, IPAllocationPolicy value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IPAllocationPolicy read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IPAllocationPolicy given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IPAllocationPolicy
   * @throws IOException if the JSON string is invalid with respect to IPAllocationPolicy
   */
  public static IPAllocationPolicy fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IPAllocationPolicy.class);
  }

  /**
   * Convert an instance of IPAllocationPolicy to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

