/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.NetworkingConfig;
import org.openapitools.client.model.PrivateClusterConfig;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The configuration information for configuring a Private IP Cloud Composer environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:43.595125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateEnvironmentConfig {
  public static final String SERIALIZED_NAME_CLOUD_COMPOSER_CONNECTION_SUBNETWORK = "cloudComposerConnectionSubnetwork";
  @SerializedName(SERIALIZED_NAME_CLOUD_COMPOSER_CONNECTION_SUBNETWORK)
  private String cloudComposerConnectionSubnetwork;

  public static final String SERIALIZED_NAME_CLOUD_COMPOSER_NETWORK_IPV4_CIDR_BLOCK = "cloudComposerNetworkIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_CLOUD_COMPOSER_NETWORK_IPV4_CIDR_BLOCK)
  private String cloudComposerNetworkIpv4CidrBlock;

  public static final String SERIALIZED_NAME_CLOUD_COMPOSER_NETWORK_IPV4_RESERVED_RANGE = "cloudComposerNetworkIpv4ReservedRange";
  @SerializedName(SERIALIZED_NAME_CLOUD_COMPOSER_NETWORK_IPV4_RESERVED_RANGE)
  private String cloudComposerNetworkIpv4ReservedRange;

  public static final String SERIALIZED_NAME_CLOUD_SQL_IPV4_CIDR_BLOCK = "cloudSqlIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_CLOUD_SQL_IPV4_CIDR_BLOCK)
  private String cloudSqlIpv4CidrBlock;

  public static final String SERIALIZED_NAME_ENABLE_PRIVATE_BUILDS_ONLY = "enablePrivateBuildsOnly";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRIVATE_BUILDS_ONLY)
  private Boolean enablePrivateBuildsOnly;

  public static final String SERIALIZED_NAME_ENABLE_PRIVATE_ENVIRONMENT = "enablePrivateEnvironment";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRIVATE_ENVIRONMENT)
  private Boolean enablePrivateEnvironment;

  public static final String SERIALIZED_NAME_ENABLE_PRIVATELY_USED_PUBLIC_IPS = "enablePrivatelyUsedPublicIps";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRIVATELY_USED_PUBLIC_IPS)
  private Boolean enablePrivatelyUsedPublicIps;

  public static final String SERIALIZED_NAME_NETWORKING_CONFIG = "networkingConfig";
  @SerializedName(SERIALIZED_NAME_NETWORKING_CONFIG)
  private NetworkingConfig networkingConfig;

  public static final String SERIALIZED_NAME_PRIVATE_CLUSTER_CONFIG = "privateClusterConfig";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CLUSTER_CONFIG)
  private PrivateClusterConfig privateClusterConfig;

  public static final String SERIALIZED_NAME_WEB_SERVER_IPV4_CIDR_BLOCK = "webServerIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_WEB_SERVER_IPV4_CIDR_BLOCK)
  private String webServerIpv4CidrBlock;

  public static final String SERIALIZED_NAME_WEB_SERVER_IPV4_RESERVED_RANGE = "webServerIpv4ReservedRange";
  @SerializedName(SERIALIZED_NAME_WEB_SERVER_IPV4_RESERVED_RANGE)
  private String webServerIpv4ReservedRange;

  public PrivateEnvironmentConfig() {
  }

  public PrivateEnvironmentConfig(
     String cloudComposerNetworkIpv4ReservedRange, 
     String webServerIpv4ReservedRange
  ) {
    this();
    this.cloudComposerNetworkIpv4ReservedRange = cloudComposerNetworkIpv4ReservedRange;
    this.webServerIpv4ReservedRange = webServerIpv4ReservedRange;
  }

  public PrivateEnvironmentConfig cloudComposerConnectionSubnetwork(String cloudComposerConnectionSubnetwork) {
    this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
    return this;
  }

  /**
   * Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
   * @return cloudComposerConnectionSubnetwork
   */
  @javax.annotation.Nullable
  public String getCloudComposerConnectionSubnetwork() {
    return cloudComposerConnectionSubnetwork;
  }

  public void setCloudComposerConnectionSubnetwork(String cloudComposerConnectionSubnetwork) {
    this.cloudComposerConnectionSubnetwork = cloudComposerConnectionSubnetwork;
  }


  public PrivateEnvironmentConfig cloudComposerNetworkIpv4CidrBlock(String cloudComposerNetworkIpv4CidrBlock) {
    this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
    return this;
  }

  /**
   * Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
   * @return cloudComposerNetworkIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getCloudComposerNetworkIpv4CidrBlock() {
    return cloudComposerNetworkIpv4CidrBlock;
  }

  public void setCloudComposerNetworkIpv4CidrBlock(String cloudComposerNetworkIpv4CidrBlock) {
    this.cloudComposerNetworkIpv4CidrBlock = cloudComposerNetworkIpv4CidrBlock;
  }


  /**
   * Output only. The IP range reserved for the tenant project&#39;s Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
   * @return cloudComposerNetworkIpv4ReservedRange
   */
  @javax.annotation.Nullable
  public String getCloudComposerNetworkIpv4ReservedRange() {
    return cloudComposerNetworkIpv4ReservedRange;
  }



  public PrivateEnvironmentConfig cloudSqlIpv4CidrBlock(String cloudSqlIpv4CidrBlock) {
    this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
    return this;
  }

  /**
   * Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from &#x60;web_server_ipv4_cidr_block&#x60;.
   * @return cloudSqlIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getCloudSqlIpv4CidrBlock() {
    return cloudSqlIpv4CidrBlock;
  }

  public void setCloudSqlIpv4CidrBlock(String cloudSqlIpv4CidrBlock) {
    this.cloudSqlIpv4CidrBlock = cloudSqlIpv4CidrBlock;
  }


  public PrivateEnvironmentConfig enablePrivateBuildsOnly(Boolean enablePrivateBuildsOnly) {
    this.enablePrivateBuildsOnly = enablePrivateBuildsOnly;
    return this;
  }

  /**
   * Optional. If &#x60;true&#x60;, builds performed during operations that install Python packages have only private connectivity to Google services (including Artifact Registry) and VPC network (if either &#x60;NodeConfig.network&#x60; and &#x60;NodeConfig.subnetwork&#x60; fields or &#x60;NodeConfig.composer_network_attachment&#x60; field are specified). If &#x60;false&#x60;, the builds also have access to the internet. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
   * @return enablePrivateBuildsOnly
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrivateBuildsOnly() {
    return enablePrivateBuildsOnly;
  }

  public void setEnablePrivateBuildsOnly(Boolean enablePrivateBuildsOnly) {
    this.enablePrivateBuildsOnly = enablePrivateBuildsOnly;
  }


  public PrivateEnvironmentConfig enablePrivateEnvironment(Boolean enablePrivateEnvironment) {
    this.enablePrivateEnvironment = enablePrivateEnvironment;
    return this;
  }

  /**
   * Optional. If &#x60;true&#x60;, a Private IP Cloud Composer environment is created. If this field is set to true, &#x60;IPAllocationPolicy.use_ip_aliases&#x60; must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
   * @return enablePrivateEnvironment
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrivateEnvironment() {
    return enablePrivateEnvironment;
  }

  public void setEnablePrivateEnvironment(Boolean enablePrivateEnvironment) {
    this.enablePrivateEnvironment = enablePrivateEnvironment;
  }


  public PrivateEnvironmentConfig enablePrivatelyUsedPublicIps(Boolean enablePrivatelyUsedPublicIps) {
    this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
    return this;
  }

  /**
   * Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for &#x60;IPAllocationPolicy.cluster_ipv4_cidr_block&#x60; and &#x60;IPAllocationPolicy.service_ipv4_cidr_block&#x60;.
   * @return enablePrivatelyUsedPublicIps
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrivatelyUsedPublicIps() {
    return enablePrivatelyUsedPublicIps;
  }

  public void setEnablePrivatelyUsedPublicIps(Boolean enablePrivatelyUsedPublicIps) {
    this.enablePrivatelyUsedPublicIps = enablePrivatelyUsedPublicIps;
  }


  public PrivateEnvironmentConfig networkingConfig(NetworkingConfig networkingConfig) {
    this.networkingConfig = networkingConfig;
    return this;
  }

  /**
   * Get networkingConfig
   * @return networkingConfig
   */
  @javax.annotation.Nullable
  public NetworkingConfig getNetworkingConfig() {
    return networkingConfig;
  }

  public void setNetworkingConfig(NetworkingConfig networkingConfig) {
    this.networkingConfig = networkingConfig;
  }


  public PrivateEnvironmentConfig privateClusterConfig(PrivateClusterConfig privateClusterConfig) {
    this.privateClusterConfig = privateClusterConfig;
    return this;
  }

  /**
   * Get privateClusterConfig
   * @return privateClusterConfig
   */
  @javax.annotation.Nullable
  public PrivateClusterConfig getPrivateClusterConfig() {
    return privateClusterConfig;
  }

  public void setPrivateClusterConfig(PrivateClusterConfig privateClusterConfig) {
    this.privateClusterConfig = privateClusterConfig;
  }


  public PrivateEnvironmentConfig webServerIpv4CidrBlock(String webServerIpv4CidrBlock) {
    this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
    return this;
  }

  /**
   * Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from &#x60;private_cluster_config.master_ipv4_cidr_block&#x60; and &#x60;cloud_sql_ipv4_cidr_block&#x60;. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
   * @return webServerIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getWebServerIpv4CidrBlock() {
    return webServerIpv4CidrBlock;
  }

  public void setWebServerIpv4CidrBlock(String webServerIpv4CidrBlock) {
    this.webServerIpv4CidrBlock = webServerIpv4CidrBlock;
  }


  /**
   * Output only. The IP range reserved for the tenant project&#39;s App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
   * @return webServerIpv4ReservedRange
   */
  @javax.annotation.Nullable
  public String getWebServerIpv4ReservedRange() {
    return webServerIpv4ReservedRange;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateEnvironmentConfig privateEnvironmentConfig = (PrivateEnvironmentConfig) o;
    return Objects.equals(this.cloudComposerConnectionSubnetwork, privateEnvironmentConfig.cloudComposerConnectionSubnetwork) &&
        Objects.equals(this.cloudComposerNetworkIpv4CidrBlock, privateEnvironmentConfig.cloudComposerNetworkIpv4CidrBlock) &&
        Objects.equals(this.cloudComposerNetworkIpv4ReservedRange, privateEnvironmentConfig.cloudComposerNetworkIpv4ReservedRange) &&
        Objects.equals(this.cloudSqlIpv4CidrBlock, privateEnvironmentConfig.cloudSqlIpv4CidrBlock) &&
        Objects.equals(this.enablePrivateBuildsOnly, privateEnvironmentConfig.enablePrivateBuildsOnly) &&
        Objects.equals(this.enablePrivateEnvironment, privateEnvironmentConfig.enablePrivateEnvironment) &&
        Objects.equals(this.enablePrivatelyUsedPublicIps, privateEnvironmentConfig.enablePrivatelyUsedPublicIps) &&
        Objects.equals(this.networkingConfig, privateEnvironmentConfig.networkingConfig) &&
        Objects.equals(this.privateClusterConfig, privateEnvironmentConfig.privateClusterConfig) &&
        Objects.equals(this.webServerIpv4CidrBlock, privateEnvironmentConfig.webServerIpv4CidrBlock) &&
        Objects.equals(this.webServerIpv4ReservedRange, privateEnvironmentConfig.webServerIpv4ReservedRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cloudComposerConnectionSubnetwork, cloudComposerNetworkIpv4CidrBlock, cloudComposerNetworkIpv4ReservedRange, cloudSqlIpv4CidrBlock, enablePrivateBuildsOnly, enablePrivateEnvironment, enablePrivatelyUsedPublicIps, networkingConfig, privateClusterConfig, webServerIpv4CidrBlock, webServerIpv4ReservedRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateEnvironmentConfig {\n");
    sb.append("    cloudComposerConnectionSubnetwork: ").append(toIndentedString(cloudComposerConnectionSubnetwork)).append("\n");
    sb.append("    cloudComposerNetworkIpv4CidrBlock: ").append(toIndentedString(cloudComposerNetworkIpv4CidrBlock)).append("\n");
    sb.append("    cloudComposerNetworkIpv4ReservedRange: ").append(toIndentedString(cloudComposerNetworkIpv4ReservedRange)).append("\n");
    sb.append("    cloudSqlIpv4CidrBlock: ").append(toIndentedString(cloudSqlIpv4CidrBlock)).append("\n");
    sb.append("    enablePrivateBuildsOnly: ").append(toIndentedString(enablePrivateBuildsOnly)).append("\n");
    sb.append("    enablePrivateEnvironment: ").append(toIndentedString(enablePrivateEnvironment)).append("\n");
    sb.append("    enablePrivatelyUsedPublicIps: ").append(toIndentedString(enablePrivatelyUsedPublicIps)).append("\n");
    sb.append("    networkingConfig: ").append(toIndentedString(networkingConfig)).append("\n");
    sb.append("    privateClusterConfig: ").append(toIndentedString(privateClusterConfig)).append("\n");
    sb.append("    webServerIpv4CidrBlock: ").append(toIndentedString(webServerIpv4CidrBlock)).append("\n");
    sb.append("    webServerIpv4ReservedRange: ").append(toIndentedString(webServerIpv4ReservedRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cloudComposerConnectionSubnetwork");
    openapiFields.add("cloudComposerNetworkIpv4CidrBlock");
    openapiFields.add("cloudComposerNetworkIpv4ReservedRange");
    openapiFields.add("cloudSqlIpv4CidrBlock");
    openapiFields.add("enablePrivateBuildsOnly");
    openapiFields.add("enablePrivateEnvironment");
    openapiFields.add("enablePrivatelyUsedPublicIps");
    openapiFields.add("networkingConfig");
    openapiFields.add("privateClusterConfig");
    openapiFields.add("webServerIpv4CidrBlock");
    openapiFields.add("webServerIpv4ReservedRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateEnvironmentConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateEnvironmentConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateEnvironmentConfig is not found in the empty JSON string", PrivateEnvironmentConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateEnvironmentConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateEnvironmentConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cloudComposerConnectionSubnetwork") != null && !jsonObj.get("cloudComposerConnectionSubnetwork").isJsonNull()) && !jsonObj.get("cloudComposerConnectionSubnetwork").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudComposerConnectionSubnetwork` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudComposerConnectionSubnetwork").toString()));
      }
      if ((jsonObj.get("cloudComposerNetworkIpv4CidrBlock") != null && !jsonObj.get("cloudComposerNetworkIpv4CidrBlock").isJsonNull()) && !jsonObj.get("cloudComposerNetworkIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudComposerNetworkIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudComposerNetworkIpv4CidrBlock").toString()));
      }
      if ((jsonObj.get("cloudComposerNetworkIpv4ReservedRange") != null && !jsonObj.get("cloudComposerNetworkIpv4ReservedRange").isJsonNull()) && !jsonObj.get("cloudComposerNetworkIpv4ReservedRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudComposerNetworkIpv4ReservedRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudComposerNetworkIpv4ReservedRange").toString()));
      }
      if ((jsonObj.get("cloudSqlIpv4CidrBlock") != null && !jsonObj.get("cloudSqlIpv4CidrBlock").isJsonNull()) && !jsonObj.get("cloudSqlIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudSqlIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudSqlIpv4CidrBlock").toString()));
      }
      // validate the optional field `networkingConfig`
      if (jsonObj.get("networkingConfig") != null && !jsonObj.get("networkingConfig").isJsonNull()) {
        NetworkingConfig.validateJsonElement(jsonObj.get("networkingConfig"));
      }
      // validate the optional field `privateClusterConfig`
      if (jsonObj.get("privateClusterConfig") != null && !jsonObj.get("privateClusterConfig").isJsonNull()) {
        PrivateClusterConfig.validateJsonElement(jsonObj.get("privateClusterConfig"));
      }
      if ((jsonObj.get("webServerIpv4CidrBlock") != null && !jsonObj.get("webServerIpv4CidrBlock").isJsonNull()) && !jsonObj.get("webServerIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webServerIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webServerIpv4CidrBlock").toString()));
      }
      if ((jsonObj.get("webServerIpv4ReservedRange") != null && !jsonObj.get("webServerIpv4ReservedRange").isJsonNull()) && !jsonObj.get("webServerIpv4ReservedRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webServerIpv4ReservedRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webServerIpv4ReservedRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateEnvironmentConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateEnvironmentConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateEnvironmentConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateEnvironmentConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateEnvironmentConfig>() {
           @Override
           public void write(JsonWriter out, PrivateEnvironmentConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateEnvironmentConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateEnvironmentConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateEnvironmentConfig
   * @throws IOException if the JSON string is invalid with respect to PrivateEnvironmentConfig
   */
  public static PrivateEnvironmentConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateEnvironmentConfig.class);
  }

  /**
   * Convert an instance of PrivateEnvironmentConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

