/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ImageVersion information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:43.595125-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageVersion {
  public static final String SERIALIZED_NAME_CREATION_DISABLED = "creationDisabled";
  @SerializedName(SERIALIZED_NAME_CREATION_DISABLED)
  private Boolean creationDisabled;

  public static final String SERIALIZED_NAME_IMAGE_VERSION_ID = "imageVersionId";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION_ID)
  private String imageVersionId;

  public static final String SERIALIZED_NAME_IS_DEFAULT = "isDefault";
  @SerializedName(SERIALIZED_NAME_IS_DEFAULT)
  private Boolean isDefault;

  public static final String SERIALIZED_NAME_RELEASE_DATE = "releaseDate";
  @SerializedName(SERIALIZED_NAME_RELEASE_DATE)
  private Date releaseDate;

  public static final String SERIALIZED_NAME_SUPPORTED_PYTHON_VERSIONS = "supportedPythonVersions";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_PYTHON_VERSIONS)
  private List<String> supportedPythonVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPGRADE_DISABLED = "upgradeDisabled";
  @SerializedName(SERIALIZED_NAME_UPGRADE_DISABLED)
  private Boolean upgradeDisabled;

  public ImageVersion() {
  }

  public ImageVersion creationDisabled(Boolean creationDisabled) {
    this.creationDisabled = creationDisabled;
    return this;
  }

  /**
   * Whether it is impossible to create an environment with the image version.
   * @return creationDisabled
   */
  @javax.annotation.Nullable
  public Boolean getCreationDisabled() {
    return creationDisabled;
  }

  public void setCreationDisabled(Boolean creationDisabled) {
    this.creationDisabled = creationDisabled;
  }


  public ImageVersion imageVersionId(String imageVersionId) {
    this.imageVersionId = imageVersionId;
    return this;
  }

  /**
   * The string identifier of the ImageVersion, in the form: \&quot;composer-x.y.z-airflow-a.b.c\&quot;
   * @return imageVersionId
   */
  @javax.annotation.Nullable
  public String getImageVersionId() {
    return imageVersionId;
  }

  public void setImageVersionId(String imageVersionId) {
    this.imageVersionId = imageVersionId;
  }


  public ImageVersion isDefault(Boolean isDefault) {
    this.isDefault = isDefault;
    return this;
  }

  /**
   * Whether this is the default ImageVersion used by Composer during environment creation if no input ImageVersion is specified.
   * @return isDefault
   */
  @javax.annotation.Nullable
  public Boolean getIsDefault() {
    return isDefault;
  }

  public void setIsDefault(Boolean isDefault) {
    this.isDefault = isDefault;
  }


  public ImageVersion releaseDate(Date releaseDate) {
    this.releaseDate = releaseDate;
    return this;
  }

  /**
   * Get releaseDate
   * @return releaseDate
   */
  @javax.annotation.Nullable
  public Date getReleaseDate() {
    return releaseDate;
  }

  public void setReleaseDate(Date releaseDate) {
    this.releaseDate = releaseDate;
  }


  public ImageVersion supportedPythonVersions(List<String> supportedPythonVersions) {
    this.supportedPythonVersions = supportedPythonVersions;
    return this;
  }

  public ImageVersion addSupportedPythonVersionsItem(String supportedPythonVersionsItem) {
    if (this.supportedPythonVersions == null) {
      this.supportedPythonVersions = new ArrayList<>();
    }
    this.supportedPythonVersions.add(supportedPythonVersionsItem);
    return this;
  }

  /**
   * supported python versions
   * @return supportedPythonVersions
   */
  @javax.annotation.Nullable
  public List<String> getSupportedPythonVersions() {
    return supportedPythonVersions;
  }

  public void setSupportedPythonVersions(List<String> supportedPythonVersions) {
    this.supportedPythonVersions = supportedPythonVersions;
  }


  public ImageVersion upgradeDisabled(Boolean upgradeDisabled) {
    this.upgradeDisabled = upgradeDisabled;
    return this;
  }

  /**
   * Whether it is impossible to upgrade an environment running with the image version.
   * @return upgradeDisabled
   */
  @javax.annotation.Nullable
  public Boolean getUpgradeDisabled() {
    return upgradeDisabled;
  }

  public void setUpgradeDisabled(Boolean upgradeDisabled) {
    this.upgradeDisabled = upgradeDisabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageVersion imageVersion = (ImageVersion) o;
    return Objects.equals(this.creationDisabled, imageVersion.creationDisabled) &&
        Objects.equals(this.imageVersionId, imageVersion.imageVersionId) &&
        Objects.equals(this.isDefault, imageVersion.isDefault) &&
        Objects.equals(this.releaseDate, imageVersion.releaseDate) &&
        Objects.equals(this.supportedPythonVersions, imageVersion.supportedPythonVersions) &&
        Objects.equals(this.upgradeDisabled, imageVersion.upgradeDisabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationDisabled, imageVersionId, isDefault, releaseDate, supportedPythonVersions, upgradeDisabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageVersion {\n");
    sb.append("    creationDisabled: ").append(toIndentedString(creationDisabled)).append("\n");
    sb.append("    imageVersionId: ").append(toIndentedString(imageVersionId)).append("\n");
    sb.append("    isDefault: ").append(toIndentedString(isDefault)).append("\n");
    sb.append("    releaseDate: ").append(toIndentedString(releaseDate)).append("\n");
    sb.append("    supportedPythonVersions: ").append(toIndentedString(supportedPythonVersions)).append("\n");
    sb.append("    upgradeDisabled: ").append(toIndentedString(upgradeDisabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationDisabled");
    openapiFields.add("imageVersionId");
    openapiFields.add("isDefault");
    openapiFields.add("releaseDate");
    openapiFields.add("supportedPythonVersions");
    openapiFields.add("upgradeDisabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageVersion is not found in the empty JSON string", ImageVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("imageVersionId") != null && !jsonObj.get("imageVersionId").isJsonNull()) && !jsonObj.get("imageVersionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageVersionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageVersionId").toString()));
      }
      // validate the optional field `releaseDate`
      if (jsonObj.get("releaseDate") != null && !jsonObj.get("releaseDate").isJsonNull()) {
        Date.validateJsonElement(jsonObj.get("releaseDate"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedPythonVersions") != null && !jsonObj.get("supportedPythonVersions").isJsonNull() && !jsonObj.get("supportedPythonVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedPythonVersions` to be an array in the JSON string but got `%s`", jsonObj.get("supportedPythonVersions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageVersion>() {
           @Override
           public void write(JsonWriter out, ImageVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageVersion
   * @throws IOException if the JSON string is invalid with respect to ImageVersion
   */
  public static ImageVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageVersion.class);
  }

  /**
   * Convert an instance of ImageVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

