/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteAirflowCommandResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteAirflowCommandResponse::OAIExecuteAirflowCommandResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteAirflowCommandResponse::OAIExecuteAirflowCommandResponse() {
    this->initializeModel();
}

OAIExecuteAirflowCommandResponse::~OAIExecuteAirflowCommandResponse() {}

void OAIExecuteAirflowCommandResponse::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_execution_id_isSet = false;
    m_execution_id_isValid = false;

    m_pod_isSet = false;
    m_pod_isValid = false;

    m_pod_namespace_isSet = false;
    m_pod_namespace_isValid = false;
}

void OAIExecuteAirflowCommandResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteAirflowCommandResponse::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_execution_id_isValid = ::OpenAPI::fromJsonValue(m_execution_id, json[QString("executionId")]);
    m_execution_id_isSet = !json[QString("executionId")].isNull() && m_execution_id_isValid;

    m_pod_isValid = ::OpenAPI::fromJsonValue(m_pod, json[QString("pod")]);
    m_pod_isSet = !json[QString("pod")].isNull() && m_pod_isValid;

    m_pod_namespace_isValid = ::OpenAPI::fromJsonValue(m_pod_namespace, json[QString("podNamespace")]);
    m_pod_namespace_isSet = !json[QString("podNamespace")].isNull() && m_pod_namespace_isValid;
}

QString OAIExecuteAirflowCommandResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteAirflowCommandResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_execution_id_isSet) {
        obj.insert(QString("executionId"), ::OpenAPI::toJsonValue(m_execution_id));
    }
    if (m_pod_isSet) {
        obj.insert(QString("pod"), ::OpenAPI::toJsonValue(m_pod));
    }
    if (m_pod_namespace_isSet) {
        obj.insert(QString("podNamespace"), ::OpenAPI::toJsonValue(m_pod_namespace));
    }
    return obj;
}

QString OAIExecuteAirflowCommandResponse::getError() const {
    return m_error;
}
void OAIExecuteAirflowCommandResponse::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIExecuteAirflowCommandResponse::is_error_Set() const{
    return m_error_isSet;
}

bool OAIExecuteAirflowCommandResponse::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIExecuteAirflowCommandResponse::getExecutionId() const {
    return m_execution_id;
}
void OAIExecuteAirflowCommandResponse::setExecutionId(const QString &execution_id) {
    m_execution_id = execution_id;
    m_execution_id_isSet = true;
}

bool OAIExecuteAirflowCommandResponse::is_execution_id_Set() const{
    return m_execution_id_isSet;
}

bool OAIExecuteAirflowCommandResponse::is_execution_id_Valid() const{
    return m_execution_id_isValid;
}

QString OAIExecuteAirflowCommandResponse::getPod() const {
    return m_pod;
}
void OAIExecuteAirflowCommandResponse::setPod(const QString &pod) {
    m_pod = pod;
    m_pod_isSet = true;
}

bool OAIExecuteAirflowCommandResponse::is_pod_Set() const{
    return m_pod_isSet;
}

bool OAIExecuteAirflowCommandResponse::is_pod_Valid() const{
    return m_pod_isValid;
}

QString OAIExecuteAirflowCommandResponse::getPodNamespace() const {
    return m_pod_namespace;
}
void OAIExecuteAirflowCommandResponse::setPodNamespace(const QString &pod_namespace) {
    m_pod_namespace = pod_namespace;
    m_pod_namespace_isSet = true;
}

bool OAIExecuteAirflowCommandResponse::is_pod_namespace_Set() const{
    return m_pod_namespace_isSet;
}

bool OAIExecuteAirflowCommandResponse::is_pod_namespace_Valid() const{
    return m_pod_namespace_isValid;
}

bool OAIExecuteAirflowCommandResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_execution_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pod_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteAirflowCommandResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
