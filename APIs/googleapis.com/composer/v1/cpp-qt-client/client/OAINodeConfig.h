/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINodeConfig.h
 *
 * The configuration information for the Kubernetes Engine nodes running the Apache Airflow software.
 */

#ifndef OAINodeConfig_H
#define OAINodeConfig_H

#include <QJsonObject>

#include "OAIIPAllocationPolicy.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIIPAllocationPolicy;

class OAINodeConfig : public OAIObject {
public:
    OAINodeConfig();
    OAINodeConfig(QString json);
    ~OAINodeConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getComposerInternalIpv4CidrBlock() const;
    void setComposerInternalIpv4CidrBlock(const QString &composer_internal_ipv4_cidr_block);
    bool is_composer_internal_ipv4_cidr_block_Set() const;
    bool is_composer_internal_ipv4_cidr_block_Valid() const;

    QString getComposerNetworkAttachment() const;
    void setComposerNetworkAttachment(const QString &composer_network_attachment);
    bool is_composer_network_attachment_Set() const;
    bool is_composer_network_attachment_Valid() const;

    qint32 getDiskSizeGb() const;
    void setDiskSizeGb(const qint32 &disk_size_gb);
    bool is_disk_size_gb_Set() const;
    bool is_disk_size_gb_Valid() const;

    bool isEnableIpMasqAgent() const;
    void setEnableIpMasqAgent(const bool &enable_ip_masq_agent);
    bool is_enable_ip_masq_agent_Set() const;
    bool is_enable_ip_masq_agent_Valid() const;

    OAIIPAllocationPolicy getIpAllocationPolicy() const;
    void setIpAllocationPolicy(const OAIIPAllocationPolicy &ip_allocation_policy);
    bool is_ip_allocation_policy_Set() const;
    bool is_ip_allocation_policy_Valid() const;

    QString getLocation() const;
    void setLocation(const QString &location);
    bool is_location_Set() const;
    bool is_location_Valid() const;

    QString getMachineType() const;
    void setMachineType(const QString &machine_type);
    bool is_machine_type_Set() const;
    bool is_machine_type_Valid() const;

    QString getNetwork() const;
    void setNetwork(const QString &network);
    bool is_network_Set() const;
    bool is_network_Valid() const;

    QList<QString> getOauthScopes() const;
    void setOauthScopes(const QList<QString> &oauth_scopes);
    bool is_oauth_scopes_Set() const;
    bool is_oauth_scopes_Valid() const;

    QString getServiceAccount() const;
    void setServiceAccount(const QString &service_account);
    bool is_service_account_Set() const;
    bool is_service_account_Valid() const;

    QString getSubnetwork() const;
    void setSubnetwork(const QString &subnetwork);
    bool is_subnetwork_Set() const;
    bool is_subnetwork_Valid() const;

    QList<QString> getTags() const;
    void setTags(const QList<QString> &tags);
    bool is_tags_Set() const;
    bool is_tags_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_composer_internal_ipv4_cidr_block;
    bool m_composer_internal_ipv4_cidr_block_isSet;
    bool m_composer_internal_ipv4_cidr_block_isValid;

    QString m_composer_network_attachment;
    bool m_composer_network_attachment_isSet;
    bool m_composer_network_attachment_isValid;

    qint32 m_disk_size_gb;
    bool m_disk_size_gb_isSet;
    bool m_disk_size_gb_isValid;

    bool m_enable_ip_masq_agent;
    bool m_enable_ip_masq_agent_isSet;
    bool m_enable_ip_masq_agent_isValid;

    OAIIPAllocationPolicy m_ip_allocation_policy;
    bool m_ip_allocation_policy_isSet;
    bool m_ip_allocation_policy_isValid;

    QString m_location;
    bool m_location_isSet;
    bool m_location_isValid;

    QString m_machine_type;
    bool m_machine_type_isSet;
    bool m_machine_type_isValid;

    QString m_network;
    bool m_network_isSet;
    bool m_network_isValid;

    QList<QString> m_oauth_scopes;
    bool m_oauth_scopes_isSet;
    bool m_oauth_scopes_isValid;

    QString m_service_account;
    bool m_service_account_isSet;
    bool m_service_account_isValid;

    QString m_subnetwork;
    bool m_subnetwork_isSet;
    bool m_subnetwork_isValid;

    QList<QString> m_tags;
    bool m_tags_isSet;
    bool m_tags_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINodeConfig)

#endif // OAINodeConfig_H
