/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkloadsConfig.h
 *
 * The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
 */

#ifndef OAIWorkloadsConfig_H
#define OAIWorkloadsConfig_H

#include <QJsonObject>

#include "OAIDagProcessorResource.h"
#include "OAISchedulerResource.h"
#include "OAITriggererResource.h"
#include "OAIWebServerResource.h"
#include "OAIWorkerResource.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDagProcessorResource;
class OAISchedulerResource;
class OAITriggererResource;
class OAIWebServerResource;
class OAIWorkerResource;

class OAIWorkloadsConfig : public OAIObject {
public:
    OAIWorkloadsConfig();
    OAIWorkloadsConfig(QString json);
    ~OAIWorkloadsConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIDagProcessorResource getDagProcessor() const;
    void setDagProcessor(const OAIDagProcessorResource &dag_processor);
    bool is_dag_processor_Set() const;
    bool is_dag_processor_Valid() const;

    OAISchedulerResource getScheduler() const;
    void setScheduler(const OAISchedulerResource &scheduler);
    bool is_scheduler_Set() const;
    bool is_scheduler_Valid() const;

    OAITriggererResource getTriggerer() const;
    void setTriggerer(const OAITriggererResource &triggerer);
    bool is_triggerer_Set() const;
    bool is_triggerer_Valid() const;

    OAIWebServerResource getWebServer() const;
    void setWebServer(const OAIWebServerResource &web_server);
    bool is_web_server_Set() const;
    bool is_web_server_Valid() const;

    OAIWorkerResource getWorker() const;
    void setWorker(const OAIWorkerResource &worker);
    bool is_worker_Set() const;
    bool is_worker_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIDagProcessorResource m_dag_processor;
    bool m_dag_processor_isSet;
    bool m_dag_processor_isValid;

    OAISchedulerResource m_scheduler;
    bool m_scheduler_isSet;
    bool m_scheduler_isValid;

    OAITriggererResource m_triggerer;
    bool m_triggerer_isSet;
    bool m_triggerer_isValid;

    OAIWebServerResource m_web_server;
    bool m_web_server_isSet;
    bool m_web_server_isValid;

    OAIWorkerResource m_worker;
    bool m_worker_isSet;
    bool m_worker_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkloadsConfig)

#endif // OAIWorkloadsConfig_H
