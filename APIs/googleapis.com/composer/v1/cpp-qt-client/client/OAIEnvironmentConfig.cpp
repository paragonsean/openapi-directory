/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEnvironmentConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEnvironmentConfig::OAIEnvironmentConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEnvironmentConfig::OAIEnvironmentConfig() {
    this->initializeModel();
}

OAIEnvironmentConfig::~OAIEnvironmentConfig() {}

void OAIEnvironmentConfig::initializeModel() {

    m_airflow_byoid_uri_isSet = false;
    m_airflow_byoid_uri_isValid = false;

    m_airflow_uri_isSet = false;
    m_airflow_uri_isValid = false;

    m_dag_gcs_prefix_isSet = false;
    m_dag_gcs_prefix_isValid = false;

    m_data_retention_config_isSet = false;
    m_data_retention_config_isValid = false;

    m_database_config_isSet = false;
    m_database_config_isValid = false;

    m_encryption_config_isSet = false;
    m_encryption_config_isValid = false;

    m_environment_size_isSet = false;
    m_environment_size_isValid = false;

    m_gke_cluster_isSet = false;
    m_gke_cluster_isValid = false;

    m_maintenance_window_isSet = false;
    m_maintenance_window_isValid = false;

    m_master_authorized_networks_config_isSet = false;
    m_master_authorized_networks_config_isValid = false;

    m_node_config_isSet = false;
    m_node_config_isValid = false;

    m_node_count_isSet = false;
    m_node_count_isValid = false;

    m_private_environment_config_isSet = false;
    m_private_environment_config_isValid = false;

    m_recovery_config_isSet = false;
    m_recovery_config_isValid = false;

    m_resilience_mode_isSet = false;
    m_resilience_mode_isValid = false;

    m_software_config_isSet = false;
    m_software_config_isValid = false;

    m_web_server_config_isSet = false;
    m_web_server_config_isValid = false;

    m_web_server_network_access_control_isSet = false;
    m_web_server_network_access_control_isValid = false;

    m_workloads_config_isSet = false;
    m_workloads_config_isValid = false;
}

void OAIEnvironmentConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEnvironmentConfig::fromJsonObject(QJsonObject json) {

    m_airflow_byoid_uri_isValid = ::OpenAPI::fromJsonValue(m_airflow_byoid_uri, json[QString("airflowByoidUri")]);
    m_airflow_byoid_uri_isSet = !json[QString("airflowByoidUri")].isNull() && m_airflow_byoid_uri_isValid;

    m_airflow_uri_isValid = ::OpenAPI::fromJsonValue(m_airflow_uri, json[QString("airflowUri")]);
    m_airflow_uri_isSet = !json[QString("airflowUri")].isNull() && m_airflow_uri_isValid;

    m_dag_gcs_prefix_isValid = ::OpenAPI::fromJsonValue(m_dag_gcs_prefix, json[QString("dagGcsPrefix")]);
    m_dag_gcs_prefix_isSet = !json[QString("dagGcsPrefix")].isNull() && m_dag_gcs_prefix_isValid;

    m_data_retention_config_isValid = ::OpenAPI::fromJsonValue(m_data_retention_config, json[QString("dataRetentionConfig")]);
    m_data_retention_config_isSet = !json[QString("dataRetentionConfig")].isNull() && m_data_retention_config_isValid;

    m_database_config_isValid = ::OpenAPI::fromJsonValue(m_database_config, json[QString("databaseConfig")]);
    m_database_config_isSet = !json[QString("databaseConfig")].isNull() && m_database_config_isValid;

    m_encryption_config_isValid = ::OpenAPI::fromJsonValue(m_encryption_config, json[QString("encryptionConfig")]);
    m_encryption_config_isSet = !json[QString("encryptionConfig")].isNull() && m_encryption_config_isValid;

    m_environment_size_isValid = ::OpenAPI::fromJsonValue(m_environment_size, json[QString("environmentSize")]);
    m_environment_size_isSet = !json[QString("environmentSize")].isNull() && m_environment_size_isValid;

    m_gke_cluster_isValid = ::OpenAPI::fromJsonValue(m_gke_cluster, json[QString("gkeCluster")]);
    m_gke_cluster_isSet = !json[QString("gkeCluster")].isNull() && m_gke_cluster_isValid;

    m_maintenance_window_isValid = ::OpenAPI::fromJsonValue(m_maintenance_window, json[QString("maintenanceWindow")]);
    m_maintenance_window_isSet = !json[QString("maintenanceWindow")].isNull() && m_maintenance_window_isValid;

    m_master_authorized_networks_config_isValid = ::OpenAPI::fromJsonValue(m_master_authorized_networks_config, json[QString("masterAuthorizedNetworksConfig")]);
    m_master_authorized_networks_config_isSet = !json[QString("masterAuthorizedNetworksConfig")].isNull() && m_master_authorized_networks_config_isValid;

    m_node_config_isValid = ::OpenAPI::fromJsonValue(m_node_config, json[QString("nodeConfig")]);
    m_node_config_isSet = !json[QString("nodeConfig")].isNull() && m_node_config_isValid;

    m_node_count_isValid = ::OpenAPI::fromJsonValue(m_node_count, json[QString("nodeCount")]);
    m_node_count_isSet = !json[QString("nodeCount")].isNull() && m_node_count_isValid;

    m_private_environment_config_isValid = ::OpenAPI::fromJsonValue(m_private_environment_config, json[QString("privateEnvironmentConfig")]);
    m_private_environment_config_isSet = !json[QString("privateEnvironmentConfig")].isNull() && m_private_environment_config_isValid;

    m_recovery_config_isValid = ::OpenAPI::fromJsonValue(m_recovery_config, json[QString("recoveryConfig")]);
    m_recovery_config_isSet = !json[QString("recoveryConfig")].isNull() && m_recovery_config_isValid;

    m_resilience_mode_isValid = ::OpenAPI::fromJsonValue(m_resilience_mode, json[QString("resilienceMode")]);
    m_resilience_mode_isSet = !json[QString("resilienceMode")].isNull() && m_resilience_mode_isValid;

    m_software_config_isValid = ::OpenAPI::fromJsonValue(m_software_config, json[QString("softwareConfig")]);
    m_software_config_isSet = !json[QString("softwareConfig")].isNull() && m_software_config_isValid;

    m_web_server_config_isValid = ::OpenAPI::fromJsonValue(m_web_server_config, json[QString("webServerConfig")]);
    m_web_server_config_isSet = !json[QString("webServerConfig")].isNull() && m_web_server_config_isValid;

    m_web_server_network_access_control_isValid = ::OpenAPI::fromJsonValue(m_web_server_network_access_control, json[QString("webServerNetworkAccessControl")]);
    m_web_server_network_access_control_isSet = !json[QString("webServerNetworkAccessControl")].isNull() && m_web_server_network_access_control_isValid;

    m_workloads_config_isValid = ::OpenAPI::fromJsonValue(m_workloads_config, json[QString("workloadsConfig")]);
    m_workloads_config_isSet = !json[QString("workloadsConfig")].isNull() && m_workloads_config_isValid;
}

QString OAIEnvironmentConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEnvironmentConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_airflow_byoid_uri_isSet) {
        obj.insert(QString("airflowByoidUri"), ::OpenAPI::toJsonValue(m_airflow_byoid_uri));
    }
    if (m_airflow_uri_isSet) {
        obj.insert(QString("airflowUri"), ::OpenAPI::toJsonValue(m_airflow_uri));
    }
    if (m_dag_gcs_prefix_isSet) {
        obj.insert(QString("dagGcsPrefix"), ::OpenAPI::toJsonValue(m_dag_gcs_prefix));
    }
    if (m_data_retention_config.isSet()) {
        obj.insert(QString("dataRetentionConfig"), ::OpenAPI::toJsonValue(m_data_retention_config));
    }
    if (m_database_config.isSet()) {
        obj.insert(QString("databaseConfig"), ::OpenAPI::toJsonValue(m_database_config));
    }
    if (m_encryption_config.isSet()) {
        obj.insert(QString("encryptionConfig"), ::OpenAPI::toJsonValue(m_encryption_config));
    }
    if (m_environment_size_isSet) {
        obj.insert(QString("environmentSize"), ::OpenAPI::toJsonValue(m_environment_size));
    }
    if (m_gke_cluster_isSet) {
        obj.insert(QString("gkeCluster"), ::OpenAPI::toJsonValue(m_gke_cluster));
    }
    if (m_maintenance_window.isSet()) {
        obj.insert(QString("maintenanceWindow"), ::OpenAPI::toJsonValue(m_maintenance_window));
    }
    if (m_master_authorized_networks_config.isSet()) {
        obj.insert(QString("masterAuthorizedNetworksConfig"), ::OpenAPI::toJsonValue(m_master_authorized_networks_config));
    }
    if (m_node_config.isSet()) {
        obj.insert(QString("nodeConfig"), ::OpenAPI::toJsonValue(m_node_config));
    }
    if (m_node_count_isSet) {
        obj.insert(QString("nodeCount"), ::OpenAPI::toJsonValue(m_node_count));
    }
    if (m_private_environment_config.isSet()) {
        obj.insert(QString("privateEnvironmentConfig"), ::OpenAPI::toJsonValue(m_private_environment_config));
    }
    if (m_recovery_config.isSet()) {
        obj.insert(QString("recoveryConfig"), ::OpenAPI::toJsonValue(m_recovery_config));
    }
    if (m_resilience_mode_isSet) {
        obj.insert(QString("resilienceMode"), ::OpenAPI::toJsonValue(m_resilience_mode));
    }
    if (m_software_config.isSet()) {
        obj.insert(QString("softwareConfig"), ::OpenAPI::toJsonValue(m_software_config));
    }
    if (m_web_server_config.isSet()) {
        obj.insert(QString("webServerConfig"), ::OpenAPI::toJsonValue(m_web_server_config));
    }
    if (m_web_server_network_access_control.isSet()) {
        obj.insert(QString("webServerNetworkAccessControl"), ::OpenAPI::toJsonValue(m_web_server_network_access_control));
    }
    if (m_workloads_config.isSet()) {
        obj.insert(QString("workloadsConfig"), ::OpenAPI::toJsonValue(m_workloads_config));
    }
    return obj;
}

QString OAIEnvironmentConfig::getAirflowByoidUri() const {
    return m_airflow_byoid_uri;
}
void OAIEnvironmentConfig::setAirflowByoidUri(const QString &airflow_byoid_uri) {
    m_airflow_byoid_uri = airflow_byoid_uri;
    m_airflow_byoid_uri_isSet = true;
}

bool OAIEnvironmentConfig::is_airflow_byoid_uri_Set() const{
    return m_airflow_byoid_uri_isSet;
}

bool OAIEnvironmentConfig::is_airflow_byoid_uri_Valid() const{
    return m_airflow_byoid_uri_isValid;
}

QString OAIEnvironmentConfig::getAirflowUri() const {
    return m_airflow_uri;
}
void OAIEnvironmentConfig::setAirflowUri(const QString &airflow_uri) {
    m_airflow_uri = airflow_uri;
    m_airflow_uri_isSet = true;
}

bool OAIEnvironmentConfig::is_airflow_uri_Set() const{
    return m_airflow_uri_isSet;
}

bool OAIEnvironmentConfig::is_airflow_uri_Valid() const{
    return m_airflow_uri_isValid;
}

QString OAIEnvironmentConfig::getDagGcsPrefix() const {
    return m_dag_gcs_prefix;
}
void OAIEnvironmentConfig::setDagGcsPrefix(const QString &dag_gcs_prefix) {
    m_dag_gcs_prefix = dag_gcs_prefix;
    m_dag_gcs_prefix_isSet = true;
}

bool OAIEnvironmentConfig::is_dag_gcs_prefix_Set() const{
    return m_dag_gcs_prefix_isSet;
}

bool OAIEnvironmentConfig::is_dag_gcs_prefix_Valid() const{
    return m_dag_gcs_prefix_isValid;
}

OAIDataRetentionConfig OAIEnvironmentConfig::getDataRetentionConfig() const {
    return m_data_retention_config;
}
void OAIEnvironmentConfig::setDataRetentionConfig(const OAIDataRetentionConfig &data_retention_config) {
    m_data_retention_config = data_retention_config;
    m_data_retention_config_isSet = true;
}

bool OAIEnvironmentConfig::is_data_retention_config_Set() const{
    return m_data_retention_config_isSet;
}

bool OAIEnvironmentConfig::is_data_retention_config_Valid() const{
    return m_data_retention_config_isValid;
}

OAIDatabaseConfig OAIEnvironmentConfig::getDatabaseConfig() const {
    return m_database_config;
}
void OAIEnvironmentConfig::setDatabaseConfig(const OAIDatabaseConfig &database_config) {
    m_database_config = database_config;
    m_database_config_isSet = true;
}

bool OAIEnvironmentConfig::is_database_config_Set() const{
    return m_database_config_isSet;
}

bool OAIEnvironmentConfig::is_database_config_Valid() const{
    return m_database_config_isValid;
}

OAIEncryptionConfig OAIEnvironmentConfig::getEncryptionConfig() const {
    return m_encryption_config;
}
void OAIEnvironmentConfig::setEncryptionConfig(const OAIEncryptionConfig &encryption_config) {
    m_encryption_config = encryption_config;
    m_encryption_config_isSet = true;
}

bool OAIEnvironmentConfig::is_encryption_config_Set() const{
    return m_encryption_config_isSet;
}

bool OAIEnvironmentConfig::is_encryption_config_Valid() const{
    return m_encryption_config_isValid;
}

QString OAIEnvironmentConfig::getEnvironmentSize() const {
    return m_environment_size;
}
void OAIEnvironmentConfig::setEnvironmentSize(const QString &environment_size) {
    m_environment_size = environment_size;
    m_environment_size_isSet = true;
}

bool OAIEnvironmentConfig::is_environment_size_Set() const{
    return m_environment_size_isSet;
}

bool OAIEnvironmentConfig::is_environment_size_Valid() const{
    return m_environment_size_isValid;
}

QString OAIEnvironmentConfig::getGkeCluster() const {
    return m_gke_cluster;
}
void OAIEnvironmentConfig::setGkeCluster(const QString &gke_cluster) {
    m_gke_cluster = gke_cluster;
    m_gke_cluster_isSet = true;
}

bool OAIEnvironmentConfig::is_gke_cluster_Set() const{
    return m_gke_cluster_isSet;
}

bool OAIEnvironmentConfig::is_gke_cluster_Valid() const{
    return m_gke_cluster_isValid;
}

OAIMaintenanceWindow OAIEnvironmentConfig::getMaintenanceWindow() const {
    return m_maintenance_window;
}
void OAIEnvironmentConfig::setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window) {
    m_maintenance_window = maintenance_window;
    m_maintenance_window_isSet = true;
}

bool OAIEnvironmentConfig::is_maintenance_window_Set() const{
    return m_maintenance_window_isSet;
}

bool OAIEnvironmentConfig::is_maintenance_window_Valid() const{
    return m_maintenance_window_isValid;
}

OAIMasterAuthorizedNetworksConfig OAIEnvironmentConfig::getMasterAuthorizedNetworksConfig() const {
    return m_master_authorized_networks_config;
}
void OAIEnvironmentConfig::setMasterAuthorizedNetworksConfig(const OAIMasterAuthorizedNetworksConfig &master_authorized_networks_config) {
    m_master_authorized_networks_config = master_authorized_networks_config;
    m_master_authorized_networks_config_isSet = true;
}

bool OAIEnvironmentConfig::is_master_authorized_networks_config_Set() const{
    return m_master_authorized_networks_config_isSet;
}

bool OAIEnvironmentConfig::is_master_authorized_networks_config_Valid() const{
    return m_master_authorized_networks_config_isValid;
}

OAINodeConfig OAIEnvironmentConfig::getNodeConfig() const {
    return m_node_config;
}
void OAIEnvironmentConfig::setNodeConfig(const OAINodeConfig &node_config) {
    m_node_config = node_config;
    m_node_config_isSet = true;
}

bool OAIEnvironmentConfig::is_node_config_Set() const{
    return m_node_config_isSet;
}

bool OAIEnvironmentConfig::is_node_config_Valid() const{
    return m_node_config_isValid;
}

qint32 OAIEnvironmentConfig::getNodeCount() const {
    return m_node_count;
}
void OAIEnvironmentConfig::setNodeCount(const qint32 &node_count) {
    m_node_count = node_count;
    m_node_count_isSet = true;
}

bool OAIEnvironmentConfig::is_node_count_Set() const{
    return m_node_count_isSet;
}

bool OAIEnvironmentConfig::is_node_count_Valid() const{
    return m_node_count_isValid;
}

OAIPrivateEnvironmentConfig OAIEnvironmentConfig::getPrivateEnvironmentConfig() const {
    return m_private_environment_config;
}
void OAIEnvironmentConfig::setPrivateEnvironmentConfig(const OAIPrivateEnvironmentConfig &private_environment_config) {
    m_private_environment_config = private_environment_config;
    m_private_environment_config_isSet = true;
}

bool OAIEnvironmentConfig::is_private_environment_config_Set() const{
    return m_private_environment_config_isSet;
}

bool OAIEnvironmentConfig::is_private_environment_config_Valid() const{
    return m_private_environment_config_isValid;
}

OAIRecoveryConfig OAIEnvironmentConfig::getRecoveryConfig() const {
    return m_recovery_config;
}
void OAIEnvironmentConfig::setRecoveryConfig(const OAIRecoveryConfig &recovery_config) {
    m_recovery_config = recovery_config;
    m_recovery_config_isSet = true;
}

bool OAIEnvironmentConfig::is_recovery_config_Set() const{
    return m_recovery_config_isSet;
}

bool OAIEnvironmentConfig::is_recovery_config_Valid() const{
    return m_recovery_config_isValid;
}

QString OAIEnvironmentConfig::getResilienceMode() const {
    return m_resilience_mode;
}
void OAIEnvironmentConfig::setResilienceMode(const QString &resilience_mode) {
    m_resilience_mode = resilience_mode;
    m_resilience_mode_isSet = true;
}

bool OAIEnvironmentConfig::is_resilience_mode_Set() const{
    return m_resilience_mode_isSet;
}

bool OAIEnvironmentConfig::is_resilience_mode_Valid() const{
    return m_resilience_mode_isValid;
}

OAISoftwareConfig OAIEnvironmentConfig::getSoftwareConfig() const {
    return m_software_config;
}
void OAIEnvironmentConfig::setSoftwareConfig(const OAISoftwareConfig &software_config) {
    m_software_config = software_config;
    m_software_config_isSet = true;
}

bool OAIEnvironmentConfig::is_software_config_Set() const{
    return m_software_config_isSet;
}

bool OAIEnvironmentConfig::is_software_config_Valid() const{
    return m_software_config_isValid;
}

OAIWebServerConfig OAIEnvironmentConfig::getWebServerConfig() const {
    return m_web_server_config;
}
void OAIEnvironmentConfig::setWebServerConfig(const OAIWebServerConfig &web_server_config) {
    m_web_server_config = web_server_config;
    m_web_server_config_isSet = true;
}

bool OAIEnvironmentConfig::is_web_server_config_Set() const{
    return m_web_server_config_isSet;
}

bool OAIEnvironmentConfig::is_web_server_config_Valid() const{
    return m_web_server_config_isValid;
}

OAIWebServerNetworkAccessControl OAIEnvironmentConfig::getWebServerNetworkAccessControl() const {
    return m_web_server_network_access_control;
}
void OAIEnvironmentConfig::setWebServerNetworkAccessControl(const OAIWebServerNetworkAccessControl &web_server_network_access_control) {
    m_web_server_network_access_control = web_server_network_access_control;
    m_web_server_network_access_control_isSet = true;
}

bool OAIEnvironmentConfig::is_web_server_network_access_control_Set() const{
    return m_web_server_network_access_control_isSet;
}

bool OAIEnvironmentConfig::is_web_server_network_access_control_Valid() const{
    return m_web_server_network_access_control_isValid;
}

OAIWorkloadsConfig OAIEnvironmentConfig::getWorkloadsConfig() const {
    return m_workloads_config;
}
void OAIEnvironmentConfig::setWorkloadsConfig(const OAIWorkloadsConfig &workloads_config) {
    m_workloads_config = workloads_config;
    m_workloads_config_isSet = true;
}

bool OAIEnvironmentConfig::is_workloads_config_Set() const{
    return m_workloads_config_isSet;
}

bool OAIEnvironmentConfig::is_workloads_config_Valid() const{
    return m_workloads_config_isValid;
}

bool OAIEnvironmentConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_airflow_byoid_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_airflow_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dag_gcs_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_retention_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_environment_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gke_cluster_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maintenance_window.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_master_authorized_networks_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_node_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_environment_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recovery_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resilience_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_software_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_server_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_server_network_access_control.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workloads_config.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEnvironmentConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
