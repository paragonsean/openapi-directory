/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledSnapshotsConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledSnapshotsConfig::OAIScheduledSnapshotsConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledSnapshotsConfig::OAIScheduledSnapshotsConfig() {
    this->initializeModel();
}

OAIScheduledSnapshotsConfig::~OAIScheduledSnapshotsConfig() {}

void OAIScheduledSnapshotsConfig::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_snapshot_creation_schedule_isSet = false;
    m_snapshot_creation_schedule_isValid = false;

    m_snapshot_location_isSet = false;
    m_snapshot_location_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIScheduledSnapshotsConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledSnapshotsConfig::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_snapshot_creation_schedule_isValid = ::OpenAPI::fromJsonValue(m_snapshot_creation_schedule, json[QString("snapshotCreationSchedule")]);
    m_snapshot_creation_schedule_isSet = !json[QString("snapshotCreationSchedule")].isNull() && m_snapshot_creation_schedule_isValid;

    m_snapshot_location_isValid = ::OpenAPI::fromJsonValue(m_snapshot_location, json[QString("snapshotLocation")]);
    m_snapshot_location_isSet = !json[QString("snapshotLocation")].isNull() && m_snapshot_location_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIScheduledSnapshotsConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledSnapshotsConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_snapshot_creation_schedule_isSet) {
        obj.insert(QString("snapshotCreationSchedule"), ::OpenAPI::toJsonValue(m_snapshot_creation_schedule));
    }
    if (m_snapshot_location_isSet) {
        obj.insert(QString("snapshotLocation"), ::OpenAPI::toJsonValue(m_snapshot_location));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

bool OAIScheduledSnapshotsConfig::isEnabled() const {
    return m_enabled;
}
void OAIScheduledSnapshotsConfig::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIScheduledSnapshotsConfig::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIScheduledSnapshotsConfig::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIScheduledSnapshotsConfig::getSnapshotCreationSchedule() const {
    return m_snapshot_creation_schedule;
}
void OAIScheduledSnapshotsConfig::setSnapshotCreationSchedule(const QString &snapshot_creation_schedule) {
    m_snapshot_creation_schedule = snapshot_creation_schedule;
    m_snapshot_creation_schedule_isSet = true;
}

bool OAIScheduledSnapshotsConfig::is_snapshot_creation_schedule_Set() const{
    return m_snapshot_creation_schedule_isSet;
}

bool OAIScheduledSnapshotsConfig::is_snapshot_creation_schedule_Valid() const{
    return m_snapshot_creation_schedule_isValid;
}

QString OAIScheduledSnapshotsConfig::getSnapshotLocation() const {
    return m_snapshot_location;
}
void OAIScheduledSnapshotsConfig::setSnapshotLocation(const QString &snapshot_location) {
    m_snapshot_location = snapshot_location;
    m_snapshot_location_isSet = true;
}

bool OAIScheduledSnapshotsConfig::is_snapshot_location_Set() const{
    return m_snapshot_location_isSet;
}

bool OAIScheduledSnapshotsConfig::is_snapshot_location_Valid() const{
    return m_snapshot_location_isValid;
}

QString OAIScheduledSnapshotsConfig::getTimeZone() const {
    return m_time_zone;
}
void OAIScheduledSnapshotsConfig::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIScheduledSnapshotsConfig::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIScheduledSnapshotsConfig::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIScheduledSnapshotsConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_creation_schedule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_snapshot_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledSnapshotsConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
