/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebServerResource.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebServerResource::OAIWebServerResource(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebServerResource::OAIWebServerResource() {
    this->initializeModel();
}

OAIWebServerResource::~OAIWebServerResource() {}

void OAIWebServerResource::initializeModel() {

    m_cpu_isSet = false;
    m_cpu_isValid = false;

    m_memory_gb_isSet = false;
    m_memory_gb_isValid = false;

    m_storage_gb_isSet = false;
    m_storage_gb_isValid = false;
}

void OAIWebServerResource::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebServerResource::fromJsonObject(QJsonObject json) {

    m_cpu_isValid = ::OpenAPI::fromJsonValue(m_cpu, json[QString("cpu")]);
    m_cpu_isSet = !json[QString("cpu")].isNull() && m_cpu_isValid;

    m_memory_gb_isValid = ::OpenAPI::fromJsonValue(m_memory_gb, json[QString("memoryGb")]);
    m_memory_gb_isSet = !json[QString("memoryGb")].isNull() && m_memory_gb_isValid;

    m_storage_gb_isValid = ::OpenAPI::fromJsonValue(m_storage_gb, json[QString("storageGb")]);
    m_storage_gb_isSet = !json[QString("storageGb")].isNull() && m_storage_gb_isValid;
}

QString OAIWebServerResource::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebServerResource::asJsonObject() const {
    QJsonObject obj;
    if (m_cpu_isSet) {
        obj.insert(QString("cpu"), ::OpenAPI::toJsonValue(m_cpu));
    }
    if (m_memory_gb_isSet) {
        obj.insert(QString("memoryGb"), ::OpenAPI::toJsonValue(m_memory_gb));
    }
    if (m_storage_gb_isSet) {
        obj.insert(QString("storageGb"), ::OpenAPI::toJsonValue(m_storage_gb));
    }
    return obj;
}

float OAIWebServerResource::getCpu() const {
    return m_cpu;
}
void OAIWebServerResource::setCpu(const float &cpu) {
    m_cpu = cpu;
    m_cpu_isSet = true;
}

bool OAIWebServerResource::is_cpu_Set() const{
    return m_cpu_isSet;
}

bool OAIWebServerResource::is_cpu_Valid() const{
    return m_cpu_isValid;
}

float OAIWebServerResource::getMemoryGb() const {
    return m_memory_gb;
}
void OAIWebServerResource::setMemoryGb(const float &memory_gb) {
    m_memory_gb = memory_gb;
    m_memory_gb_isSet = true;
}

bool OAIWebServerResource::is_memory_gb_Set() const{
    return m_memory_gb_isSet;
}

bool OAIWebServerResource::is_memory_gb_Valid() const{
    return m_memory_gb_isValid;
}

float OAIWebServerResource::getStorageGb() const {
    return m_storage_gb;
}
void OAIWebServerResource::setStorageGb(const float &storage_gb) {
    m_storage_gb = storage_gb;
    m_storage_gb_isSet = true;
}

bool OAIWebServerResource::is_storage_gb_Set() const{
    return m_storage_gb_isSet;
}

bool OAIWebServerResource::is_storage_gb_Valid() const{
    return m_storage_gb_isValid;
}

bool OAIWebServerResource::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cpu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_memory_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_gb_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebServerResource::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
