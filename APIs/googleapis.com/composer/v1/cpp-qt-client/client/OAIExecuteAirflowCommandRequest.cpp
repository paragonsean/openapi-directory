/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExecuteAirflowCommandRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExecuteAirflowCommandRequest::OAIExecuteAirflowCommandRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExecuteAirflowCommandRequest::OAIExecuteAirflowCommandRequest() {
    this->initializeModel();
}

OAIExecuteAirflowCommandRequest::~OAIExecuteAirflowCommandRequest() {}

void OAIExecuteAirflowCommandRequest::initializeModel() {

    m_command_isSet = false;
    m_command_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_subcommand_isSet = false;
    m_subcommand_isValid = false;
}

void OAIExecuteAirflowCommandRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExecuteAirflowCommandRequest::fromJsonObject(QJsonObject json) {

    m_command_isValid = ::OpenAPI::fromJsonValue(m_command, json[QString("command")]);
    m_command_isSet = !json[QString("command")].isNull() && m_command_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_subcommand_isValid = ::OpenAPI::fromJsonValue(m_subcommand, json[QString("subcommand")]);
    m_subcommand_isSet = !json[QString("subcommand")].isNull() && m_subcommand_isValid;
}

QString OAIExecuteAirflowCommandRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExecuteAirflowCommandRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_command_isSet) {
        obj.insert(QString("command"), ::OpenAPI::toJsonValue(m_command));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_subcommand_isSet) {
        obj.insert(QString("subcommand"), ::OpenAPI::toJsonValue(m_subcommand));
    }
    return obj;
}

QString OAIExecuteAirflowCommandRequest::getCommand() const {
    return m_command;
}
void OAIExecuteAirflowCommandRequest::setCommand(const QString &command) {
    m_command = command;
    m_command_isSet = true;
}

bool OAIExecuteAirflowCommandRequest::is_command_Set() const{
    return m_command_isSet;
}

bool OAIExecuteAirflowCommandRequest::is_command_Valid() const{
    return m_command_isValid;
}

QList<QString> OAIExecuteAirflowCommandRequest::getParameters() const {
    return m_parameters;
}
void OAIExecuteAirflowCommandRequest::setParameters(const QList<QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIExecuteAirflowCommandRequest::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIExecuteAirflowCommandRequest::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIExecuteAirflowCommandRequest::getSubcommand() const {
    return m_subcommand;
}
void OAIExecuteAirflowCommandRequest::setSubcommand(const QString &subcommand) {
    m_subcommand = subcommand;
    m_subcommand_isSet = true;
}

bool OAIExecuteAirflowCommandRequest::is_subcommand_Set() const{
    return m_subcommand_isSet;
}

bool OAIExecuteAirflowCommandRequest::is_subcommand_Valid() const{
    return m_subcommand_isValid;
}

bool OAIExecuteAirflowCommandRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_command_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subcommand_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExecuteAirflowCommandRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
