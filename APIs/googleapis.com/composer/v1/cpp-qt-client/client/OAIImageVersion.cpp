/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageVersion::OAIImageVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageVersion::OAIImageVersion() {
    this->initializeModel();
}

OAIImageVersion::~OAIImageVersion() {}

void OAIImageVersion::initializeModel() {

    m_creation_disabled_isSet = false;
    m_creation_disabled_isValid = false;

    m_image_version_id_isSet = false;
    m_image_version_id_isValid = false;

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_release_date_isSet = false;
    m_release_date_isValid = false;

    m_supported_python_versions_isSet = false;
    m_supported_python_versions_isValid = false;

    m_upgrade_disabled_isSet = false;
    m_upgrade_disabled_isValid = false;
}

void OAIImageVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageVersion::fromJsonObject(QJsonObject json) {

    m_creation_disabled_isValid = ::OpenAPI::fromJsonValue(m_creation_disabled, json[QString("creationDisabled")]);
    m_creation_disabled_isSet = !json[QString("creationDisabled")].isNull() && m_creation_disabled_isValid;

    m_image_version_id_isValid = ::OpenAPI::fromJsonValue(m_image_version_id, json[QString("imageVersionId")]);
    m_image_version_id_isSet = !json[QString("imageVersionId")].isNull() && m_image_version_id_isValid;

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("isDefault")]);
    m_is_default_isSet = !json[QString("isDefault")].isNull() && m_is_default_isValid;

    m_release_date_isValid = ::OpenAPI::fromJsonValue(m_release_date, json[QString("releaseDate")]);
    m_release_date_isSet = !json[QString("releaseDate")].isNull() && m_release_date_isValid;

    m_supported_python_versions_isValid = ::OpenAPI::fromJsonValue(m_supported_python_versions, json[QString("supportedPythonVersions")]);
    m_supported_python_versions_isSet = !json[QString("supportedPythonVersions")].isNull() && m_supported_python_versions_isValid;

    m_upgrade_disabled_isValid = ::OpenAPI::fromJsonValue(m_upgrade_disabled, json[QString("upgradeDisabled")]);
    m_upgrade_disabled_isSet = !json[QString("upgradeDisabled")].isNull() && m_upgrade_disabled_isValid;
}

QString OAIImageVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_disabled_isSet) {
        obj.insert(QString("creationDisabled"), ::OpenAPI::toJsonValue(m_creation_disabled));
    }
    if (m_image_version_id_isSet) {
        obj.insert(QString("imageVersionId"), ::OpenAPI::toJsonValue(m_image_version_id));
    }
    if (m_is_default_isSet) {
        obj.insert(QString("isDefault"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_release_date.isSet()) {
        obj.insert(QString("releaseDate"), ::OpenAPI::toJsonValue(m_release_date));
    }
    if (m_supported_python_versions.size() > 0) {
        obj.insert(QString("supportedPythonVersions"), ::OpenAPI::toJsonValue(m_supported_python_versions));
    }
    if (m_upgrade_disabled_isSet) {
        obj.insert(QString("upgradeDisabled"), ::OpenAPI::toJsonValue(m_upgrade_disabled));
    }
    return obj;
}

bool OAIImageVersion::isCreationDisabled() const {
    return m_creation_disabled;
}
void OAIImageVersion::setCreationDisabled(const bool &creation_disabled) {
    m_creation_disabled = creation_disabled;
    m_creation_disabled_isSet = true;
}

bool OAIImageVersion::is_creation_disabled_Set() const{
    return m_creation_disabled_isSet;
}

bool OAIImageVersion::is_creation_disabled_Valid() const{
    return m_creation_disabled_isValid;
}

QString OAIImageVersion::getImageVersionId() const {
    return m_image_version_id;
}
void OAIImageVersion::setImageVersionId(const QString &image_version_id) {
    m_image_version_id = image_version_id;
    m_image_version_id_isSet = true;
}

bool OAIImageVersion::is_image_version_id_Set() const{
    return m_image_version_id_isSet;
}

bool OAIImageVersion::is_image_version_id_Valid() const{
    return m_image_version_id_isValid;
}

bool OAIImageVersion::isIsDefault() const {
    return m_is_default;
}
void OAIImageVersion::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIImageVersion::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIImageVersion::is_is_default_Valid() const{
    return m_is_default_isValid;
}

OAIDate OAIImageVersion::getReleaseDate() const {
    return m_release_date;
}
void OAIImageVersion::setReleaseDate(const OAIDate &release_date) {
    m_release_date = release_date;
    m_release_date_isSet = true;
}

bool OAIImageVersion::is_release_date_Set() const{
    return m_release_date_isSet;
}

bool OAIImageVersion::is_release_date_Valid() const{
    return m_release_date_isValid;
}

QList<QString> OAIImageVersion::getSupportedPythonVersions() const {
    return m_supported_python_versions;
}
void OAIImageVersion::setSupportedPythonVersions(const QList<QString> &supported_python_versions) {
    m_supported_python_versions = supported_python_versions;
    m_supported_python_versions_isSet = true;
}

bool OAIImageVersion::is_supported_python_versions_Set() const{
    return m_supported_python_versions_isSet;
}

bool OAIImageVersion::is_supported_python_versions_Valid() const{
    return m_supported_python_versions_isValid;
}

bool OAIImageVersion::isUpgradeDisabled() const {
    return m_upgrade_disabled;
}
void OAIImageVersion::setUpgradeDisabled(const bool &upgrade_disabled) {
    m_upgrade_disabled = upgrade_disabled;
    m_upgrade_disabled_isSet = true;
}

bool OAIImageVersion::is_upgrade_disabled_Set() const{
    return m_upgrade_disabled_isSet;
}

bool OAIImageVersion::is_upgrade_disabled_Valid() const{
    return m_upgrade_disabled_isValid;
}

bool OAIImageVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_version_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_python_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upgrade_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
