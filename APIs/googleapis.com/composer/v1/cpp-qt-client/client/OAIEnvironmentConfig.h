/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEnvironmentConfig.h
 *
 * Configuration information for an environment.
 */

#ifndef OAIEnvironmentConfig_H
#define OAIEnvironmentConfig_H

#include <QJsonObject>

#include "OAIDataRetentionConfig.h"
#include "OAIDatabaseConfig.h"
#include "OAIEncryptionConfig.h"
#include "OAIMaintenanceWindow.h"
#include "OAIMasterAuthorizedNetworksConfig.h"
#include "OAINodeConfig.h"
#include "OAIPrivateEnvironmentConfig.h"
#include "OAIRecoveryConfig.h"
#include "OAISoftwareConfig.h"
#include "OAIWebServerConfig.h"
#include "OAIWebServerNetworkAccessControl.h"
#include "OAIWorkloadsConfig.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIDataRetentionConfig;
class OAIDatabaseConfig;
class OAIEncryptionConfig;
class OAIMaintenanceWindow;
class OAIMasterAuthorizedNetworksConfig;
class OAINodeConfig;
class OAIPrivateEnvironmentConfig;
class OAIRecoveryConfig;
class OAISoftwareConfig;
class OAIWebServerConfig;
class OAIWebServerNetworkAccessControl;
class OAIWorkloadsConfig;

class OAIEnvironmentConfig : public OAIObject {
public:
    OAIEnvironmentConfig();
    OAIEnvironmentConfig(QString json);
    ~OAIEnvironmentConfig() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAirflowByoidUri() const;
    void setAirflowByoidUri(const QString &airflow_byoid_uri);
    bool is_airflow_byoid_uri_Set() const;
    bool is_airflow_byoid_uri_Valid() const;

    QString getAirflowUri() const;
    void setAirflowUri(const QString &airflow_uri);
    bool is_airflow_uri_Set() const;
    bool is_airflow_uri_Valid() const;

    QString getDagGcsPrefix() const;
    void setDagGcsPrefix(const QString &dag_gcs_prefix);
    bool is_dag_gcs_prefix_Set() const;
    bool is_dag_gcs_prefix_Valid() const;

    OAIDataRetentionConfig getDataRetentionConfig() const;
    void setDataRetentionConfig(const OAIDataRetentionConfig &data_retention_config);
    bool is_data_retention_config_Set() const;
    bool is_data_retention_config_Valid() const;

    OAIDatabaseConfig getDatabaseConfig() const;
    void setDatabaseConfig(const OAIDatabaseConfig &database_config);
    bool is_database_config_Set() const;
    bool is_database_config_Valid() const;

    OAIEncryptionConfig getEncryptionConfig() const;
    void setEncryptionConfig(const OAIEncryptionConfig &encryption_config);
    bool is_encryption_config_Set() const;
    bool is_encryption_config_Valid() const;

    QString getEnvironmentSize() const;
    void setEnvironmentSize(const QString &environment_size);
    bool is_environment_size_Set() const;
    bool is_environment_size_Valid() const;

    QString getGkeCluster() const;
    void setGkeCluster(const QString &gke_cluster);
    bool is_gke_cluster_Set() const;
    bool is_gke_cluster_Valid() const;

    OAIMaintenanceWindow getMaintenanceWindow() const;
    void setMaintenanceWindow(const OAIMaintenanceWindow &maintenance_window);
    bool is_maintenance_window_Set() const;
    bool is_maintenance_window_Valid() const;

    OAIMasterAuthorizedNetworksConfig getMasterAuthorizedNetworksConfig() const;
    void setMasterAuthorizedNetworksConfig(const OAIMasterAuthorizedNetworksConfig &master_authorized_networks_config);
    bool is_master_authorized_networks_config_Set() const;
    bool is_master_authorized_networks_config_Valid() const;

    OAINodeConfig getNodeConfig() const;
    void setNodeConfig(const OAINodeConfig &node_config);
    bool is_node_config_Set() const;
    bool is_node_config_Valid() const;

    qint32 getNodeCount() const;
    void setNodeCount(const qint32 &node_count);
    bool is_node_count_Set() const;
    bool is_node_count_Valid() const;

    OAIPrivateEnvironmentConfig getPrivateEnvironmentConfig() const;
    void setPrivateEnvironmentConfig(const OAIPrivateEnvironmentConfig &private_environment_config);
    bool is_private_environment_config_Set() const;
    bool is_private_environment_config_Valid() const;

    OAIRecoveryConfig getRecoveryConfig() const;
    void setRecoveryConfig(const OAIRecoveryConfig &recovery_config);
    bool is_recovery_config_Set() const;
    bool is_recovery_config_Valid() const;

    QString getResilienceMode() const;
    void setResilienceMode(const QString &resilience_mode);
    bool is_resilience_mode_Set() const;
    bool is_resilience_mode_Valid() const;

    OAISoftwareConfig getSoftwareConfig() const;
    void setSoftwareConfig(const OAISoftwareConfig &software_config);
    bool is_software_config_Set() const;
    bool is_software_config_Valid() const;

    OAIWebServerConfig getWebServerConfig() const;
    void setWebServerConfig(const OAIWebServerConfig &web_server_config);
    bool is_web_server_config_Set() const;
    bool is_web_server_config_Valid() const;

    OAIWebServerNetworkAccessControl getWebServerNetworkAccessControl() const;
    void setWebServerNetworkAccessControl(const OAIWebServerNetworkAccessControl &web_server_network_access_control);
    bool is_web_server_network_access_control_Set() const;
    bool is_web_server_network_access_control_Valid() const;

    OAIWorkloadsConfig getWorkloadsConfig() const;
    void setWorkloadsConfig(const OAIWorkloadsConfig &workloads_config);
    bool is_workloads_config_Set() const;
    bool is_workloads_config_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_airflow_byoid_uri;
    bool m_airflow_byoid_uri_isSet;
    bool m_airflow_byoid_uri_isValid;

    QString m_airflow_uri;
    bool m_airflow_uri_isSet;
    bool m_airflow_uri_isValid;

    QString m_dag_gcs_prefix;
    bool m_dag_gcs_prefix_isSet;
    bool m_dag_gcs_prefix_isValid;

    OAIDataRetentionConfig m_data_retention_config;
    bool m_data_retention_config_isSet;
    bool m_data_retention_config_isValid;

    OAIDatabaseConfig m_database_config;
    bool m_database_config_isSet;
    bool m_database_config_isValid;

    OAIEncryptionConfig m_encryption_config;
    bool m_encryption_config_isSet;
    bool m_encryption_config_isValid;

    QString m_environment_size;
    bool m_environment_size_isSet;
    bool m_environment_size_isValid;

    QString m_gke_cluster;
    bool m_gke_cluster_isSet;
    bool m_gke_cluster_isValid;

    OAIMaintenanceWindow m_maintenance_window;
    bool m_maintenance_window_isSet;
    bool m_maintenance_window_isValid;

    OAIMasterAuthorizedNetworksConfig m_master_authorized_networks_config;
    bool m_master_authorized_networks_config_isSet;
    bool m_master_authorized_networks_config_isValid;

    OAINodeConfig m_node_config;
    bool m_node_config_isSet;
    bool m_node_config_isValid;

    qint32 m_node_count;
    bool m_node_count_isSet;
    bool m_node_count_isValid;

    OAIPrivateEnvironmentConfig m_private_environment_config;
    bool m_private_environment_config_isSet;
    bool m_private_environment_config_isValid;

    OAIRecoveryConfig m_recovery_config;
    bool m_recovery_config_isSet;
    bool m_recovery_config_isValid;

    QString m_resilience_mode;
    bool m_resilience_mode_isSet;
    bool m_resilience_mode_isValid;

    OAISoftwareConfig m_software_config;
    bool m_software_config_isSet;
    bool m_software_config_isValid;

    OAIWebServerConfig m_web_server_config;
    bool m_web_server_config_isSet;
    bool m_web_server_config_isValid;

    OAIWebServerNetworkAccessControl m_web_server_network_access_control;
    bool m_web_server_network_access_control_isSet;
    bool m_web_server_network_access_control_isValid;

    OAIWorkloadsConfig m_workloads_config;
    bool m_workloads_config_isSet;
    bool m_workloads_config_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEnvironmentConfig)

#endif // OAIEnvironmentConfig_H
