/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckUpgradeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckUpgradeResponse::OAICheckUpgradeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckUpgradeResponse::OAICheckUpgradeResponse() {
    this->initializeModel();
}

OAICheckUpgradeResponse::~OAICheckUpgradeResponse() {}

void OAICheckUpgradeResponse::initializeModel() {

    m_build_log_uri_isSet = false;
    m_build_log_uri_isValid = false;

    m_contains_pypi_modules_conflict_isSet = false;
    m_contains_pypi_modules_conflict_isValid = false;

    m_image_version_isSet = false;
    m_image_version_isValid = false;

    m_pypi_conflict_build_log_extract_isSet = false;
    m_pypi_conflict_build_log_extract_isValid = false;

    m_pypi_dependencies_isSet = false;
    m_pypi_dependencies_isValid = false;
}

void OAICheckUpgradeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckUpgradeResponse::fromJsonObject(QJsonObject json) {

    m_build_log_uri_isValid = ::OpenAPI::fromJsonValue(m_build_log_uri, json[QString("buildLogUri")]);
    m_build_log_uri_isSet = !json[QString("buildLogUri")].isNull() && m_build_log_uri_isValid;

    m_contains_pypi_modules_conflict_isValid = ::OpenAPI::fromJsonValue(m_contains_pypi_modules_conflict, json[QString("containsPypiModulesConflict")]);
    m_contains_pypi_modules_conflict_isSet = !json[QString("containsPypiModulesConflict")].isNull() && m_contains_pypi_modules_conflict_isValid;

    m_image_version_isValid = ::OpenAPI::fromJsonValue(m_image_version, json[QString("imageVersion")]);
    m_image_version_isSet = !json[QString("imageVersion")].isNull() && m_image_version_isValid;

    m_pypi_conflict_build_log_extract_isValid = ::OpenAPI::fromJsonValue(m_pypi_conflict_build_log_extract, json[QString("pypiConflictBuildLogExtract")]);
    m_pypi_conflict_build_log_extract_isSet = !json[QString("pypiConflictBuildLogExtract")].isNull() && m_pypi_conflict_build_log_extract_isValid;

    m_pypi_dependencies_isValid = ::OpenAPI::fromJsonValue(m_pypi_dependencies, json[QString("pypiDependencies")]);
    m_pypi_dependencies_isSet = !json[QString("pypiDependencies")].isNull() && m_pypi_dependencies_isValid;
}

QString OAICheckUpgradeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckUpgradeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_build_log_uri_isSet) {
        obj.insert(QString("buildLogUri"), ::OpenAPI::toJsonValue(m_build_log_uri));
    }
    if (m_contains_pypi_modules_conflict_isSet) {
        obj.insert(QString("containsPypiModulesConflict"), ::OpenAPI::toJsonValue(m_contains_pypi_modules_conflict));
    }
    if (m_image_version_isSet) {
        obj.insert(QString("imageVersion"), ::OpenAPI::toJsonValue(m_image_version));
    }
    if (m_pypi_conflict_build_log_extract_isSet) {
        obj.insert(QString("pypiConflictBuildLogExtract"), ::OpenAPI::toJsonValue(m_pypi_conflict_build_log_extract));
    }
    if (m_pypi_dependencies.size() > 0) {
        obj.insert(QString("pypiDependencies"), ::OpenAPI::toJsonValue(m_pypi_dependencies));
    }
    return obj;
}

QString OAICheckUpgradeResponse::getBuildLogUri() const {
    return m_build_log_uri;
}
void OAICheckUpgradeResponse::setBuildLogUri(const QString &build_log_uri) {
    m_build_log_uri = build_log_uri;
    m_build_log_uri_isSet = true;
}

bool OAICheckUpgradeResponse::is_build_log_uri_Set() const{
    return m_build_log_uri_isSet;
}

bool OAICheckUpgradeResponse::is_build_log_uri_Valid() const{
    return m_build_log_uri_isValid;
}

QString OAICheckUpgradeResponse::getContainsPypiModulesConflict() const {
    return m_contains_pypi_modules_conflict;
}
void OAICheckUpgradeResponse::setContainsPypiModulesConflict(const QString &contains_pypi_modules_conflict) {
    m_contains_pypi_modules_conflict = contains_pypi_modules_conflict;
    m_contains_pypi_modules_conflict_isSet = true;
}

bool OAICheckUpgradeResponse::is_contains_pypi_modules_conflict_Set() const{
    return m_contains_pypi_modules_conflict_isSet;
}

bool OAICheckUpgradeResponse::is_contains_pypi_modules_conflict_Valid() const{
    return m_contains_pypi_modules_conflict_isValid;
}

QString OAICheckUpgradeResponse::getImageVersion() const {
    return m_image_version;
}
void OAICheckUpgradeResponse::setImageVersion(const QString &image_version) {
    m_image_version = image_version;
    m_image_version_isSet = true;
}

bool OAICheckUpgradeResponse::is_image_version_Set() const{
    return m_image_version_isSet;
}

bool OAICheckUpgradeResponse::is_image_version_Valid() const{
    return m_image_version_isValid;
}

QString OAICheckUpgradeResponse::getPypiConflictBuildLogExtract() const {
    return m_pypi_conflict_build_log_extract;
}
void OAICheckUpgradeResponse::setPypiConflictBuildLogExtract(const QString &pypi_conflict_build_log_extract) {
    m_pypi_conflict_build_log_extract = pypi_conflict_build_log_extract;
    m_pypi_conflict_build_log_extract_isSet = true;
}

bool OAICheckUpgradeResponse::is_pypi_conflict_build_log_extract_Set() const{
    return m_pypi_conflict_build_log_extract_isSet;
}

bool OAICheckUpgradeResponse::is_pypi_conflict_build_log_extract_Valid() const{
    return m_pypi_conflict_build_log_extract_isValid;
}

QMap<QString, QString> OAICheckUpgradeResponse::getPypiDependencies() const {
    return m_pypi_dependencies;
}
void OAICheckUpgradeResponse::setPypiDependencies(const QMap<QString, QString> &pypi_dependencies) {
    m_pypi_dependencies = pypi_dependencies;
    m_pypi_dependencies_isSet = true;
}

bool OAICheckUpgradeResponse::is_pypi_dependencies_Set() const{
    return m_pypi_dependencies_isSet;
}

bool OAICheckUpgradeResponse::is_pypi_dependencies_Valid() const{
    return m_pypi_dependencies_isValid;
}

bool OAICheckUpgradeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_build_log_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contains_pypi_modules_conflict_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pypi_conflict_build_log_extract_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pypi_dependencies.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckUpgradeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
