/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIPAllocationPolicy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIPAllocationPolicy::OAIIPAllocationPolicy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIPAllocationPolicy::OAIIPAllocationPolicy() {
    this->initializeModel();
}

OAIIPAllocationPolicy::~OAIIPAllocationPolicy() {}

void OAIIPAllocationPolicy::initializeModel() {

    m_cluster_ipv4_cidr_block_isSet = false;
    m_cluster_ipv4_cidr_block_isValid = false;

    m_cluster_secondary_range_name_isSet = false;
    m_cluster_secondary_range_name_isValid = false;

    m_services_ipv4_cidr_block_isSet = false;
    m_services_ipv4_cidr_block_isValid = false;

    m_services_secondary_range_name_isSet = false;
    m_services_secondary_range_name_isValid = false;

    m_use_ip_aliases_isSet = false;
    m_use_ip_aliases_isValid = false;
}

void OAIIPAllocationPolicy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIPAllocationPolicy::fromJsonObject(QJsonObject json) {

    m_cluster_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cluster_ipv4_cidr_block, json[QString("clusterIpv4CidrBlock")]);
    m_cluster_ipv4_cidr_block_isSet = !json[QString("clusterIpv4CidrBlock")].isNull() && m_cluster_ipv4_cidr_block_isValid;

    m_cluster_secondary_range_name_isValid = ::OpenAPI::fromJsonValue(m_cluster_secondary_range_name, json[QString("clusterSecondaryRangeName")]);
    m_cluster_secondary_range_name_isSet = !json[QString("clusterSecondaryRangeName")].isNull() && m_cluster_secondary_range_name_isValid;

    m_services_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_services_ipv4_cidr_block, json[QString("servicesIpv4CidrBlock")]);
    m_services_ipv4_cidr_block_isSet = !json[QString("servicesIpv4CidrBlock")].isNull() && m_services_ipv4_cidr_block_isValid;

    m_services_secondary_range_name_isValid = ::OpenAPI::fromJsonValue(m_services_secondary_range_name, json[QString("servicesSecondaryRangeName")]);
    m_services_secondary_range_name_isSet = !json[QString("servicesSecondaryRangeName")].isNull() && m_services_secondary_range_name_isValid;

    m_use_ip_aliases_isValid = ::OpenAPI::fromJsonValue(m_use_ip_aliases, json[QString("useIpAliases")]);
    m_use_ip_aliases_isSet = !json[QString("useIpAliases")].isNull() && m_use_ip_aliases_isValid;
}

QString OAIIPAllocationPolicy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIPAllocationPolicy::asJsonObject() const {
    QJsonObject obj;
    if (m_cluster_ipv4_cidr_block_isSet) {
        obj.insert(QString("clusterIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_cluster_ipv4_cidr_block));
    }
    if (m_cluster_secondary_range_name_isSet) {
        obj.insert(QString("clusterSecondaryRangeName"), ::OpenAPI::toJsonValue(m_cluster_secondary_range_name));
    }
    if (m_services_ipv4_cidr_block_isSet) {
        obj.insert(QString("servicesIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_services_ipv4_cidr_block));
    }
    if (m_services_secondary_range_name_isSet) {
        obj.insert(QString("servicesSecondaryRangeName"), ::OpenAPI::toJsonValue(m_services_secondary_range_name));
    }
    if (m_use_ip_aliases_isSet) {
        obj.insert(QString("useIpAliases"), ::OpenAPI::toJsonValue(m_use_ip_aliases));
    }
    return obj;
}

QString OAIIPAllocationPolicy::getClusterIpv4CidrBlock() const {
    return m_cluster_ipv4_cidr_block;
}
void OAIIPAllocationPolicy::setClusterIpv4CidrBlock(const QString &cluster_ipv4_cidr_block) {
    m_cluster_ipv4_cidr_block = cluster_ipv4_cidr_block;
    m_cluster_ipv4_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_cluster_ipv4_cidr_block_Set() const{
    return m_cluster_ipv4_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_cluster_ipv4_cidr_block_Valid() const{
    return m_cluster_ipv4_cidr_block_isValid;
}

QString OAIIPAllocationPolicy::getClusterSecondaryRangeName() const {
    return m_cluster_secondary_range_name;
}
void OAIIPAllocationPolicy::setClusterSecondaryRangeName(const QString &cluster_secondary_range_name) {
    m_cluster_secondary_range_name = cluster_secondary_range_name;
    m_cluster_secondary_range_name_isSet = true;
}

bool OAIIPAllocationPolicy::is_cluster_secondary_range_name_Set() const{
    return m_cluster_secondary_range_name_isSet;
}

bool OAIIPAllocationPolicy::is_cluster_secondary_range_name_Valid() const{
    return m_cluster_secondary_range_name_isValid;
}

QString OAIIPAllocationPolicy::getServicesIpv4CidrBlock() const {
    return m_services_ipv4_cidr_block;
}
void OAIIPAllocationPolicy::setServicesIpv4CidrBlock(const QString &services_ipv4_cidr_block) {
    m_services_ipv4_cidr_block = services_ipv4_cidr_block;
    m_services_ipv4_cidr_block_isSet = true;
}

bool OAIIPAllocationPolicy::is_services_ipv4_cidr_block_Set() const{
    return m_services_ipv4_cidr_block_isSet;
}

bool OAIIPAllocationPolicy::is_services_ipv4_cidr_block_Valid() const{
    return m_services_ipv4_cidr_block_isValid;
}

QString OAIIPAllocationPolicy::getServicesSecondaryRangeName() const {
    return m_services_secondary_range_name;
}
void OAIIPAllocationPolicy::setServicesSecondaryRangeName(const QString &services_secondary_range_name) {
    m_services_secondary_range_name = services_secondary_range_name;
    m_services_secondary_range_name_isSet = true;
}

bool OAIIPAllocationPolicy::is_services_secondary_range_name_Set() const{
    return m_services_secondary_range_name_isSet;
}

bool OAIIPAllocationPolicy::is_services_secondary_range_name_Valid() const{
    return m_services_secondary_range_name_isValid;
}

bool OAIIPAllocationPolicy::isUseIpAliases() const {
    return m_use_ip_aliases;
}
void OAIIPAllocationPolicy::setUseIpAliases(const bool &use_ip_aliases) {
    m_use_ip_aliases = use_ip_aliases;
    m_use_ip_aliases_isSet = true;
}

bool OAIIPAllocationPolicy::is_use_ip_aliases_Set() const{
    return m_use_ip_aliases_isSet;
}

bool OAIIPAllocationPolicy::is_use_ip_aliases_Valid() const{
    return m_use_ip_aliases_isValid;
}

bool OAIIPAllocationPolicy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cluster_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cluster_secondary_range_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_services_secondary_range_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ip_aliases_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIPAllocationPolicy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
