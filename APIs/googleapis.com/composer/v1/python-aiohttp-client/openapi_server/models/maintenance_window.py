# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MaintenanceWindow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, recurrence: str=None, start_time: str=None):
        """MaintenanceWindow - a model defined in OpenAPI

        :param end_time: The end_time of this MaintenanceWindow.
        :param recurrence: The recurrence of this MaintenanceWindow.
        :param start_time: The start_time of this MaintenanceWindow.
        """
        self.openapi_types = {
            'end_time': str,
            'recurrence': str,
            'start_time': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'recurrence': 'recurrence',
            'start_time': 'startTime'
        }

        self._end_time = end_time
        self._recurrence = recurrence
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MaintenanceWindow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MaintenanceWindow of this MaintenanceWindow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this MaintenanceWindow.

        Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.

        :return: The end_time of this MaintenanceWindow.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this MaintenanceWindow.

        Required. Maintenance window end time. It is used only to calculate the duration of the maintenance window. The value for end-time must be in the future, relative to `start_time`.

        :param end_time: The end_time of this MaintenanceWindow.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def recurrence(self):
        """Gets the recurrence of this MaintenanceWindow.

        Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.

        :return: The recurrence of this MaintenanceWindow.
        :rtype: str
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this MaintenanceWindow.

        Required. Maintenance window recurrence. Format is a subset of [RFC-5545](https://tools.ietf.org/html/rfc5545) `RRULE`. The only allowed values for `FREQ` field are `FREQ=DAILY` and `FREQ=WEEKLY;BYDAY=...` Example values: `FREQ=WEEKLY;BYDAY=TU,WE`, `FREQ=DAILY`.

        :param recurrence: The recurrence of this MaintenanceWindow.
        :type recurrence: str
        """

        self._recurrence = recurrence

    @property
    def start_time(self):
        """Gets the start_time of this MaintenanceWindow.

        Required. Start time of the first recurrence of the maintenance window.

        :return: The start_time of this MaintenanceWindow.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this MaintenanceWindow.

        Required. Start time of the first recurrence of the maintenance window.

        :param start_time: The start_time of this MaintenanceWindow.
        :type start_time: str
        """

        self._start_time = start_time
