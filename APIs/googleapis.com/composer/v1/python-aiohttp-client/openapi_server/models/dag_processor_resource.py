# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DagProcessorResource(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, cpu: float=None, memory_gb: float=None, storage_gb: float=None):
        """DagProcessorResource - a model defined in OpenAPI

        :param count: The count of this DagProcessorResource.
        :param cpu: The cpu of this DagProcessorResource.
        :param memory_gb: The memory_gb of this DagProcessorResource.
        :param storage_gb: The storage_gb of this DagProcessorResource.
        """
        self.openapi_types = {
            'count': int,
            'cpu': float,
            'memory_gb': float,
            'storage_gb': float
        }

        self.attribute_map = {
            'count': 'count',
            'cpu': 'cpu',
            'memory_gb': 'memoryGb',
            'storage_gb': 'storageGb'
        }

        self._count = count
        self._cpu = cpu
        self._memory_gb = memory_gb
        self._storage_gb = storage_gb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DagProcessorResource':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DagProcessorResource of this DagProcessorResource.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this DagProcessorResource.

        Optional. The number of DAG processors. If not provided or set to 0, a single DAG processor instance will be created.

        :return: The count of this DagProcessorResource.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this DagProcessorResource.

        Optional. The number of DAG processors. If not provided or set to 0, a single DAG processor instance will be created.

        :param count: The count of this DagProcessorResource.
        :type count: int
        """

        self._count = count

    @property
    def cpu(self):
        """Gets the cpu of this DagProcessorResource.

        Optional. CPU request and limit for a single Airflow DAG processor replica.

        :return: The cpu of this DagProcessorResource.
        :rtype: float
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu):
        """Sets the cpu of this DagProcessorResource.

        Optional. CPU request and limit for a single Airflow DAG processor replica.

        :param cpu: The cpu of this DagProcessorResource.
        :type cpu: float
        """

        self._cpu = cpu

    @property
    def memory_gb(self):
        """Gets the memory_gb of this DagProcessorResource.

        Optional. Memory (GB) request and limit for a single Airflow DAG processor replica.

        :return: The memory_gb of this DagProcessorResource.
        :rtype: float
        """
        return self._memory_gb

    @memory_gb.setter
    def memory_gb(self, memory_gb):
        """Sets the memory_gb of this DagProcessorResource.

        Optional. Memory (GB) request and limit for a single Airflow DAG processor replica.

        :param memory_gb: The memory_gb of this DagProcessorResource.
        :type memory_gb: float
        """

        self._memory_gb = memory_gb

    @property
    def storage_gb(self):
        """Gets the storage_gb of this DagProcessorResource.

        Optional. Storage (GB) request and limit for a single Airflow DAG processor replica.

        :return: The storage_gb of this DagProcessorResource.
        :rtype: float
        """
        return self._storage_gb

    @storage_gb.setter
    def storage_gb(self, storage_gb):
        """Sets the storage_gb of this DagProcessorResource.

        Optional. Storage (GB) request and limit for a single Airflow DAG processor replica.

        :param storage_gb: The storage_gb of this DagProcessorResource.
        :type storage_gb: float
        """

        self._storage_gb = storage_gb
