# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.data_retention_config import DataRetentionConfig
from openapi_server.models.database_config import DatabaseConfig
from openapi_server.models.encryption_config import EncryptionConfig
from openapi_server.models.maintenance_window import MaintenanceWindow
from openapi_server.models.master_authorized_networks_config import MasterAuthorizedNetworksConfig
from openapi_server.models.node_config import NodeConfig
from openapi_server.models.private_environment_config import PrivateEnvironmentConfig
from openapi_server.models.recovery_config import RecoveryConfig
from openapi_server.models.software_config import SoftwareConfig
from openapi_server.models.web_server_config import WebServerConfig
from openapi_server.models.web_server_network_access_control import WebServerNetworkAccessControl
from openapi_server.models.workloads_config import WorkloadsConfig
from openapi_server import util


class EnvironmentConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airflow_byoid_uri: str=None, airflow_uri: str=None, dag_gcs_prefix: str=None, data_retention_config: DataRetentionConfig=None, database_config: DatabaseConfig=None, encryption_config: EncryptionConfig=None, environment_size: str=None, gke_cluster: str=None, maintenance_window: MaintenanceWindow=None, master_authorized_networks_config: MasterAuthorizedNetworksConfig=None, node_config: NodeConfig=None, node_count: int=None, private_environment_config: PrivateEnvironmentConfig=None, recovery_config: RecoveryConfig=None, resilience_mode: str=None, software_config: SoftwareConfig=None, web_server_config: WebServerConfig=None, web_server_network_access_control: WebServerNetworkAccessControl=None, workloads_config: WorkloadsConfig=None):
        """EnvironmentConfig - a model defined in OpenAPI

        :param airflow_byoid_uri: The airflow_byoid_uri of this EnvironmentConfig.
        :param airflow_uri: The airflow_uri of this EnvironmentConfig.
        :param dag_gcs_prefix: The dag_gcs_prefix of this EnvironmentConfig.
        :param data_retention_config: The data_retention_config of this EnvironmentConfig.
        :param database_config: The database_config of this EnvironmentConfig.
        :param encryption_config: The encryption_config of this EnvironmentConfig.
        :param environment_size: The environment_size of this EnvironmentConfig.
        :param gke_cluster: The gke_cluster of this EnvironmentConfig.
        :param maintenance_window: The maintenance_window of this EnvironmentConfig.
        :param master_authorized_networks_config: The master_authorized_networks_config of this EnvironmentConfig.
        :param node_config: The node_config of this EnvironmentConfig.
        :param node_count: The node_count of this EnvironmentConfig.
        :param private_environment_config: The private_environment_config of this EnvironmentConfig.
        :param recovery_config: The recovery_config of this EnvironmentConfig.
        :param resilience_mode: The resilience_mode of this EnvironmentConfig.
        :param software_config: The software_config of this EnvironmentConfig.
        :param web_server_config: The web_server_config of this EnvironmentConfig.
        :param web_server_network_access_control: The web_server_network_access_control of this EnvironmentConfig.
        :param workloads_config: The workloads_config of this EnvironmentConfig.
        """
        self.openapi_types = {
            'airflow_byoid_uri': str,
            'airflow_uri': str,
            'dag_gcs_prefix': str,
            'data_retention_config': DataRetentionConfig,
            'database_config': DatabaseConfig,
            'encryption_config': EncryptionConfig,
            'environment_size': str,
            'gke_cluster': str,
            'maintenance_window': MaintenanceWindow,
            'master_authorized_networks_config': MasterAuthorizedNetworksConfig,
            'node_config': NodeConfig,
            'node_count': int,
            'private_environment_config': PrivateEnvironmentConfig,
            'recovery_config': RecoveryConfig,
            'resilience_mode': str,
            'software_config': SoftwareConfig,
            'web_server_config': WebServerConfig,
            'web_server_network_access_control': WebServerNetworkAccessControl,
            'workloads_config': WorkloadsConfig
        }

        self.attribute_map = {
            'airflow_byoid_uri': 'airflowByoidUri',
            'airflow_uri': 'airflowUri',
            'dag_gcs_prefix': 'dagGcsPrefix',
            'data_retention_config': 'dataRetentionConfig',
            'database_config': 'databaseConfig',
            'encryption_config': 'encryptionConfig',
            'environment_size': 'environmentSize',
            'gke_cluster': 'gkeCluster',
            'maintenance_window': 'maintenanceWindow',
            'master_authorized_networks_config': 'masterAuthorizedNetworksConfig',
            'node_config': 'nodeConfig',
            'node_count': 'nodeCount',
            'private_environment_config': 'privateEnvironmentConfig',
            'recovery_config': 'recoveryConfig',
            'resilience_mode': 'resilienceMode',
            'software_config': 'softwareConfig',
            'web_server_config': 'webServerConfig',
            'web_server_network_access_control': 'webServerNetworkAccessControl',
            'workloads_config': 'workloadsConfig'
        }

        self._airflow_byoid_uri = airflow_byoid_uri
        self._airflow_uri = airflow_uri
        self._dag_gcs_prefix = dag_gcs_prefix
        self._data_retention_config = data_retention_config
        self._database_config = database_config
        self._encryption_config = encryption_config
        self._environment_size = environment_size
        self._gke_cluster = gke_cluster
        self._maintenance_window = maintenance_window
        self._master_authorized_networks_config = master_authorized_networks_config
        self._node_config = node_config
        self._node_count = node_count
        self._private_environment_config = private_environment_config
        self._recovery_config = recovery_config
        self._resilience_mode = resilience_mode
        self._software_config = software_config
        self._web_server_config = web_server_config
        self._web_server_network_access_control = web_server_network_access_control
        self._workloads_config = workloads_config

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EnvironmentConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EnvironmentConfig of this EnvironmentConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airflow_byoid_uri(self):
        """Gets the airflow_byoid_uri of this EnvironmentConfig.

        Output only. The 'bring your own identity' variant of the URI of the Apache Airflow Web UI hosted within this environment, to be accessed with external identities using workforce identity federation (see [Access environments with workforce identity federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).

        :return: The airflow_byoid_uri of this EnvironmentConfig.
        :rtype: str
        """
        return self._airflow_byoid_uri

    @airflow_byoid_uri.setter
    def airflow_byoid_uri(self, airflow_byoid_uri):
        """Sets the airflow_byoid_uri of this EnvironmentConfig.

        Output only. The 'bring your own identity' variant of the URI of the Apache Airflow Web UI hosted within this environment, to be accessed with external identities using workforce identity federation (see [Access environments with workforce identity federation](/composer/docs/composer-2/access-environments-with-workforce-identity-federation)).

        :param airflow_byoid_uri: The airflow_byoid_uri of this EnvironmentConfig.
        :type airflow_byoid_uri: str
        """

        self._airflow_byoid_uri = airflow_byoid_uri

    @property
    def airflow_uri(self):
        """Gets the airflow_uri of this EnvironmentConfig.

        Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).

        :return: The airflow_uri of this EnvironmentConfig.
        :rtype: str
        """
        return self._airflow_uri

    @airflow_uri.setter
    def airflow_uri(self, airflow_uri):
        """Sets the airflow_uri of this EnvironmentConfig.

        Output only. The URI of the Apache Airflow Web UI hosted within this environment (see [Airflow web interface](/composer/docs/how-to/accessing/airflow-web-interface)).

        :param airflow_uri: The airflow_uri of this EnvironmentConfig.
        :type airflow_uri: str
        """

        self._airflow_uri = airflow_uri

    @property
    def dag_gcs_prefix(self):
        """Gets the dag_gcs_prefix of this EnvironmentConfig.

        Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using \"/\"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.

        :return: The dag_gcs_prefix of this EnvironmentConfig.
        :rtype: str
        """
        return self._dag_gcs_prefix

    @dag_gcs_prefix.setter
    def dag_gcs_prefix(self, dag_gcs_prefix):
        """Sets the dag_gcs_prefix of this EnvironmentConfig.

        Output only. The Cloud Storage prefix of the DAGs for this environment. Although Cloud Storage objects reside in a flat namespace, a hierarchical file tree can be simulated using \"/\"-delimited object name prefixes. DAG objects for this environment reside in a simulated directory with the given prefix.

        :param dag_gcs_prefix: The dag_gcs_prefix of this EnvironmentConfig.
        :type dag_gcs_prefix: str
        """

        self._dag_gcs_prefix = dag_gcs_prefix

    @property
    def data_retention_config(self):
        """Gets the data_retention_config of this EnvironmentConfig.


        :return: The data_retention_config of this EnvironmentConfig.
        :rtype: DataRetentionConfig
        """
        return self._data_retention_config

    @data_retention_config.setter
    def data_retention_config(self, data_retention_config):
        """Sets the data_retention_config of this EnvironmentConfig.


        :param data_retention_config: The data_retention_config of this EnvironmentConfig.
        :type data_retention_config: DataRetentionConfig
        """

        self._data_retention_config = data_retention_config

    @property
    def database_config(self):
        """Gets the database_config of this EnvironmentConfig.


        :return: The database_config of this EnvironmentConfig.
        :rtype: DatabaseConfig
        """
        return self._database_config

    @database_config.setter
    def database_config(self, database_config):
        """Sets the database_config of this EnvironmentConfig.


        :param database_config: The database_config of this EnvironmentConfig.
        :type database_config: DatabaseConfig
        """

        self._database_config = database_config

    @property
    def encryption_config(self):
        """Gets the encryption_config of this EnvironmentConfig.


        :return: The encryption_config of this EnvironmentConfig.
        :rtype: EncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config):
        """Sets the encryption_config of this EnvironmentConfig.


        :param encryption_config: The encryption_config of this EnvironmentConfig.
        :type encryption_config: EncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def environment_size(self):
        """Gets the environment_size of this EnvironmentConfig.

        Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

        :return: The environment_size of this EnvironmentConfig.
        :rtype: str
        """
        return self._environment_size

    @environment_size.setter
    def environment_size(self, environment_size):
        """Sets the environment_size of this EnvironmentConfig.

        Optional. The size of the Cloud Composer environment. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

        :param environment_size: The environment_size of this EnvironmentConfig.
        :type environment_size: str
        """
        allowed_values = ["ENVIRONMENT_SIZE_UNSPECIFIED", "ENVIRONMENT_SIZE_SMALL", "ENVIRONMENT_SIZE_MEDIUM", "ENVIRONMENT_SIZE_LARGE"]  # noqa: E501
        if environment_size not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_size` ({0}), must be one of {1}"
                .format(environment_size, allowed_values)
            )

        self._environment_size = environment_size

    @property
    def gke_cluster(self):
        """Gets the gke_cluster of this EnvironmentConfig.

        Output only. The Kubernetes Engine cluster used to run this environment.

        :return: The gke_cluster of this EnvironmentConfig.
        :rtype: str
        """
        return self._gke_cluster

    @gke_cluster.setter
    def gke_cluster(self, gke_cluster):
        """Sets the gke_cluster of this EnvironmentConfig.

        Output only. The Kubernetes Engine cluster used to run this environment.

        :param gke_cluster: The gke_cluster of this EnvironmentConfig.
        :type gke_cluster: str
        """

        self._gke_cluster = gke_cluster

    @property
    def maintenance_window(self):
        """Gets the maintenance_window of this EnvironmentConfig.


        :return: The maintenance_window of this EnvironmentConfig.
        :rtype: MaintenanceWindow
        """
        return self._maintenance_window

    @maintenance_window.setter
    def maintenance_window(self, maintenance_window):
        """Sets the maintenance_window of this EnvironmentConfig.


        :param maintenance_window: The maintenance_window of this EnvironmentConfig.
        :type maintenance_window: MaintenanceWindow
        """

        self._maintenance_window = maintenance_window

    @property
    def master_authorized_networks_config(self):
        """Gets the master_authorized_networks_config of this EnvironmentConfig.


        :return: The master_authorized_networks_config of this EnvironmentConfig.
        :rtype: MasterAuthorizedNetworksConfig
        """
        return self._master_authorized_networks_config

    @master_authorized_networks_config.setter
    def master_authorized_networks_config(self, master_authorized_networks_config):
        """Sets the master_authorized_networks_config of this EnvironmentConfig.


        :param master_authorized_networks_config: The master_authorized_networks_config of this EnvironmentConfig.
        :type master_authorized_networks_config: MasterAuthorizedNetworksConfig
        """

        self._master_authorized_networks_config = master_authorized_networks_config

    @property
    def node_config(self):
        """Gets the node_config of this EnvironmentConfig.


        :return: The node_config of this EnvironmentConfig.
        :rtype: NodeConfig
        """
        return self._node_config

    @node_config.setter
    def node_config(self, node_config):
        """Sets the node_config of this EnvironmentConfig.


        :param node_config: The node_config of this EnvironmentConfig.
        :type node_config: NodeConfig
        """

        self._node_config = node_config

    @property
    def node_count(self):
        """Gets the node_count of this EnvironmentConfig.

        The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The node_count of this EnvironmentConfig.
        :rtype: int
        """
        return self._node_count

    @node_count.setter
    def node_count(self, node_count):
        """Sets the node_count of this EnvironmentConfig.

        The number of nodes in the Kubernetes Engine cluster that will be used to run this environment. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param node_count: The node_count of this EnvironmentConfig.
        :type node_count: int
        """

        self._node_count = node_count

    @property
    def private_environment_config(self):
        """Gets the private_environment_config of this EnvironmentConfig.


        :return: The private_environment_config of this EnvironmentConfig.
        :rtype: PrivateEnvironmentConfig
        """
        return self._private_environment_config

    @private_environment_config.setter
    def private_environment_config(self, private_environment_config):
        """Sets the private_environment_config of this EnvironmentConfig.


        :param private_environment_config: The private_environment_config of this EnvironmentConfig.
        :type private_environment_config: PrivateEnvironmentConfig
        """

        self._private_environment_config = private_environment_config

    @property
    def recovery_config(self):
        """Gets the recovery_config of this EnvironmentConfig.


        :return: The recovery_config of this EnvironmentConfig.
        :rtype: RecoveryConfig
        """
        return self._recovery_config

    @recovery_config.setter
    def recovery_config(self, recovery_config):
        """Sets the recovery_config of this EnvironmentConfig.


        :param recovery_config: The recovery_config of this EnvironmentConfig.
        :type recovery_config: RecoveryConfig
        """

        self._recovery_config = recovery_config

    @property
    def resilience_mode(self):
        """Gets the resilience_mode of this EnvironmentConfig.

        Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.

        :return: The resilience_mode of this EnvironmentConfig.
        :rtype: str
        """
        return self._resilience_mode

    @resilience_mode.setter
    def resilience_mode(self, resilience_mode):
        """Sets the resilience_mode of this EnvironmentConfig.

        Optional. Resilience mode of the Cloud Composer Environment. This field is supported for Cloud Composer environments in versions composer-2.2.0-airflow-*.*.* and newer.

        :param resilience_mode: The resilience_mode of this EnvironmentConfig.
        :type resilience_mode: str
        """
        allowed_values = ["RESILIENCE_MODE_UNSPECIFIED", "HIGH_RESILIENCE"]  # noqa: E501
        if resilience_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `resilience_mode` ({0}), must be one of {1}"
                .format(resilience_mode, allowed_values)
            )

        self._resilience_mode = resilience_mode

    @property
    def software_config(self):
        """Gets the software_config of this EnvironmentConfig.


        :return: The software_config of this EnvironmentConfig.
        :rtype: SoftwareConfig
        """
        return self._software_config

    @software_config.setter
    def software_config(self, software_config):
        """Sets the software_config of this EnvironmentConfig.


        :param software_config: The software_config of this EnvironmentConfig.
        :type software_config: SoftwareConfig
        """

        self._software_config = software_config

    @property
    def web_server_config(self):
        """Gets the web_server_config of this EnvironmentConfig.


        :return: The web_server_config of this EnvironmentConfig.
        :rtype: WebServerConfig
        """
        return self._web_server_config

    @web_server_config.setter
    def web_server_config(self, web_server_config):
        """Sets the web_server_config of this EnvironmentConfig.


        :param web_server_config: The web_server_config of this EnvironmentConfig.
        :type web_server_config: WebServerConfig
        """

        self._web_server_config = web_server_config

    @property
    def web_server_network_access_control(self):
        """Gets the web_server_network_access_control of this EnvironmentConfig.


        :return: The web_server_network_access_control of this EnvironmentConfig.
        :rtype: WebServerNetworkAccessControl
        """
        return self._web_server_network_access_control

    @web_server_network_access_control.setter
    def web_server_network_access_control(self, web_server_network_access_control):
        """Sets the web_server_network_access_control of this EnvironmentConfig.


        :param web_server_network_access_control: The web_server_network_access_control of this EnvironmentConfig.
        :type web_server_network_access_control: WebServerNetworkAccessControl
        """

        self._web_server_network_access_control = web_server_network_access_control

    @property
    def workloads_config(self):
        """Gets the workloads_config of this EnvironmentConfig.


        :return: The workloads_config of this EnvironmentConfig.
        :rtype: WorkloadsConfig
        """
        return self._workloads_config

    @workloads_config.setter
    def workloads_config(self, workloads_config):
        """Sets the workloads_config of this EnvironmentConfig.


        :param workloads_config: The workloads_config of this EnvironmentConfig.
        :type workloads_config: WorkloadsConfig
        """

        self._workloads_config = workloads_config
