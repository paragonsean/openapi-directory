# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PrivateClusterConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_private_endpoint: bool=None, master_ipv4_cidr_block: str=None, master_ipv4_reserved_range: str=None):
        """PrivateClusterConfig - a model defined in OpenAPI

        :param enable_private_endpoint: The enable_private_endpoint of this PrivateClusterConfig.
        :param master_ipv4_cidr_block: The master_ipv4_cidr_block of this PrivateClusterConfig.
        :param master_ipv4_reserved_range: The master_ipv4_reserved_range of this PrivateClusterConfig.
        """
        self.openapi_types = {
            'enable_private_endpoint': bool,
            'master_ipv4_cidr_block': str,
            'master_ipv4_reserved_range': str
        }

        self.attribute_map = {
            'enable_private_endpoint': 'enablePrivateEndpoint',
            'master_ipv4_cidr_block': 'masterIpv4CidrBlock',
            'master_ipv4_reserved_range': 'masterIpv4ReservedRange'
        }

        self._enable_private_endpoint = enable_private_endpoint
        self._master_ipv4_cidr_block = master_ipv4_cidr_block
        self._master_ipv4_reserved_range = master_ipv4_reserved_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateClusterConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateClusterConfig of this PrivateClusterConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_private_endpoint(self):
        """Gets the enable_private_endpoint of this PrivateClusterConfig.

        Optional. If `true`, access to the public endpoint of the GKE cluster is denied.

        :return: The enable_private_endpoint of this PrivateClusterConfig.
        :rtype: bool
        """
        return self._enable_private_endpoint

    @enable_private_endpoint.setter
    def enable_private_endpoint(self, enable_private_endpoint):
        """Sets the enable_private_endpoint of this PrivateClusterConfig.

        Optional. If `true`, access to the public endpoint of the GKE cluster is denied.

        :param enable_private_endpoint: The enable_private_endpoint of this PrivateClusterConfig.
        :type enable_private_endpoint: bool
        """

        self._enable_private_endpoint = enable_private_endpoint

    @property
    def master_ipv4_cidr_block(self):
        """Gets the master_ipv4_cidr_block of this PrivateClusterConfig.

        Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.

        :return: The master_ipv4_cidr_block of this PrivateClusterConfig.
        :rtype: str
        """
        return self._master_ipv4_cidr_block

    @master_ipv4_cidr_block.setter
    def master_ipv4_cidr_block(self, master_ipv4_cidr_block):
        """Sets the master_ipv4_cidr_block of this PrivateClusterConfig.

        Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.

        :param master_ipv4_cidr_block: The master_ipv4_cidr_block of this PrivateClusterConfig.
        :type master_ipv4_cidr_block: str
        """

        self._master_ipv4_cidr_block = master_ipv4_cidr_block

    @property
    def master_ipv4_reserved_range(self):
        """Gets the master_ipv4_reserved_range of this PrivateClusterConfig.

        Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.

        :return: The master_ipv4_reserved_range of this PrivateClusterConfig.
        :rtype: str
        """
        return self._master_ipv4_reserved_range

    @master_ipv4_reserved_range.setter
    def master_ipv4_reserved_range(self, master_ipv4_reserved_range):
        """Sets the master_ipv4_reserved_range of this PrivateClusterConfig.

        Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.

        :param master_ipv4_reserved_range: The master_ipv4_reserved_range of this PrivateClusterConfig.
        :type master_ipv4_reserved_range: str
        """

        self._master_ipv4_reserved_range = master_ipv4_reserved_range
