# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cloud_data_lineage_integration import CloudDataLineageIntegration
from openapi_server import util


class SoftwareConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, airflow_config_overrides: Dict[str, str]=None, cloud_data_lineage_integration: CloudDataLineageIntegration=None, env_variables: Dict[str, str]=None, image_version: str=None, pypi_packages: Dict[str, str]=None, python_version: str=None, scheduler_count: int=None, web_server_plugins_mode: str=None):
        """SoftwareConfig - a model defined in OpenAPI

        :param airflow_config_overrides: The airflow_config_overrides of this SoftwareConfig.
        :param cloud_data_lineage_integration: The cloud_data_lineage_integration of this SoftwareConfig.
        :param env_variables: The env_variables of this SoftwareConfig.
        :param image_version: The image_version of this SoftwareConfig.
        :param pypi_packages: The pypi_packages of this SoftwareConfig.
        :param python_version: The python_version of this SoftwareConfig.
        :param scheduler_count: The scheduler_count of this SoftwareConfig.
        :param web_server_plugins_mode: The web_server_plugins_mode of this SoftwareConfig.
        """
        self.openapi_types = {
            'airflow_config_overrides': Dict[str, str],
            'cloud_data_lineage_integration': CloudDataLineageIntegration,
            'env_variables': Dict[str, str],
            'image_version': str,
            'pypi_packages': Dict[str, str],
            'python_version': str,
            'scheduler_count': int,
            'web_server_plugins_mode': str
        }

        self.attribute_map = {
            'airflow_config_overrides': 'airflowConfigOverrides',
            'cloud_data_lineage_integration': 'cloudDataLineageIntegration',
            'env_variables': 'envVariables',
            'image_version': 'imageVersion',
            'pypi_packages': 'pypiPackages',
            'python_version': 'pythonVersion',
            'scheduler_count': 'schedulerCount',
            'web_server_plugins_mode': 'webServerPluginsMode'
        }

        self._airflow_config_overrides = airflow_config_overrides
        self._cloud_data_lineage_integration = cloud_data_lineage_integration
        self._env_variables = env_variables
        self._image_version = image_version
        self._pypi_packages = pypi_packages
        self._python_version = python_version
        self._scheduler_count = scheduler_count
        self._web_server_plugins_mode = web_server_plugins_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SoftwareConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SoftwareConfig of this SoftwareConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airflow_config_overrides(self):
        """Gets the airflow_config_overrides of this SoftwareConfig.

        Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.

        :return: The airflow_config_overrides of this SoftwareConfig.
        :rtype: Dict[str, str]
        """
        return self._airflow_config_overrides

    @airflow_config_overrides.setter
    def airflow_config_overrides(self, airflow_config_overrides):
        """Sets the airflow_config_overrides of this SoftwareConfig.

        Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.

        :param airflow_config_overrides: The airflow_config_overrides of this SoftwareConfig.
        :type airflow_config_overrides: Dict[str, str]
        """

        self._airflow_config_overrides = airflow_config_overrides

    @property
    def cloud_data_lineage_integration(self):
        """Gets the cloud_data_lineage_integration of this SoftwareConfig.


        :return: The cloud_data_lineage_integration of this SoftwareConfig.
        :rtype: CloudDataLineageIntegration
        """
        return self._cloud_data_lineage_integration

    @cloud_data_lineage_integration.setter
    def cloud_data_lineage_integration(self, cloud_data_lineage_integration):
        """Sets the cloud_data_lineage_integration of this SoftwareConfig.


        :param cloud_data_lineage_integration: The cloud_data_lineage_integration of this SoftwareConfig.
        :type cloud_data_lineage_integration: CloudDataLineageIntegration
        """

        self._cloud_data_lineage_integration = cloud_data_lineage_integration

    @property
    def env_variables(self):
        """Gets the env_variables of this SoftwareConfig.

        Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`

        :return: The env_variables of this SoftwareConfig.
        :rtype: Dict[str, str]
        """
        return self._env_variables

    @env_variables.setter
    def env_variables(self, env_variables):
        """Sets the env_variables of this SoftwareConfig.

        Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`

        :param env_variables: The env_variables of this SoftwareConfig.
        :type env_variables: Dict[str, str]
        """

        self._env_variables = env_variables

    @property
    def image_version(self):
        """Gets the image_version of this SoftwareConfig.

        The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).

        :return: The image_version of this SoftwareConfig.
        :rtype: str
        """
        return self._image_version

    @image_version.setter
    def image_version(self, image_version):
        """Sets the image_version of this SoftwareConfig.

        The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).

        :param image_version: The image_version of this SoftwareConfig.
        :type image_version: str
        """

        self._image_version = image_version

    @property
    def pypi_packages(self):
        """Gets the pypi_packages of this SoftwareConfig.

        Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.

        :return: The pypi_packages of this SoftwareConfig.
        :rtype: Dict[str, str]
        """
        return self._pypi_packages

    @pypi_packages.setter
    def pypi_packages(self, pypi_packages):
        """Sets the pypi_packages of this SoftwareConfig.

        Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.

        :param pypi_packages: The pypi_packages of this SoftwareConfig.
        :type pypi_packages: Dict[str, str]
        """

        self._pypi_packages = pypi_packages

    @property
    def python_version(self):
        """Gets the python_version of this SoftwareConfig.

        Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.

        :return: The python_version of this SoftwareConfig.
        :rtype: str
        """
        return self._python_version

    @python_version.setter
    def python_version(self, python_version):
        """Sets the python_version of this SoftwareConfig.

        Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.

        :param python_version: The python_version of this SoftwareConfig.
        :type python_version: str
        """

        self._python_version = python_version

    @property
    def scheduler_count(self):
        """Gets the scheduler_count of this SoftwareConfig.

        Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.

        :return: The scheduler_count of this SoftwareConfig.
        :rtype: int
        """
        return self._scheduler_count

    @scheduler_count.setter
    def scheduler_count(self, scheduler_count):
        """Sets the scheduler_count of this SoftwareConfig.

        Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.

        :param scheduler_count: The scheduler_count of this SoftwareConfig.
        :type scheduler_count: int
        """

        self._scheduler_count = scheduler_count

    @property
    def web_server_plugins_mode(self):
        """Gets the web_server_plugins_mode of this SoftwareConfig.

        Optional. Whether or not the web server uses custom plugins. If unspecified, the field defaults to `PLUGINS_ENABLED`. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :return: The web_server_plugins_mode of this SoftwareConfig.
        :rtype: str
        """
        return self._web_server_plugins_mode

    @web_server_plugins_mode.setter
    def web_server_plugins_mode(self, web_server_plugins_mode):
        """Sets the web_server_plugins_mode of this SoftwareConfig.

        Optional. Whether or not the web server uses custom plugins. If unspecified, the field defaults to `PLUGINS_ENABLED`. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :param web_server_plugins_mode: The web_server_plugins_mode of this SoftwareConfig.
        :type web_server_plugins_mode: str
        """
        allowed_values = ["WEB_SERVER_PLUGINS_MODE_UNSPECIFIED", "PLUGINS_DISABLED", "PLUGINS_ENABLED"]  # noqa: E501
        if web_server_plugins_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `web_server_plugins_mode` ({0}), must be one of {1}"
                .format(web_server_plugins_mode, allowed_values)
            )

        self._web_server_plugins_mode = web_server_plugins_mode
