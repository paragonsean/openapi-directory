# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComposerWorkloadStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, detailed_status_message: str=None, state: str=None, status_message: str=None):
        """ComposerWorkloadStatus - a model defined in OpenAPI

        :param detailed_status_message: The detailed_status_message of this ComposerWorkloadStatus.
        :param state: The state of this ComposerWorkloadStatus.
        :param status_message: The status_message of this ComposerWorkloadStatus.
        """
        self.openapi_types = {
            'detailed_status_message': str,
            'state': str,
            'status_message': str
        }

        self.attribute_map = {
            'detailed_status_message': 'detailedStatusMessage',
            'state': 'state',
            'status_message': 'statusMessage'
        }

        self._detailed_status_message = detailed_status_message
        self._state = state
        self._status_message = status_message

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComposerWorkloadStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComposerWorkloadStatus of this ComposerWorkloadStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def detailed_status_message(self):
        """Gets the detailed_status_message of this ComposerWorkloadStatus.

        Output only. Detailed message of the status.

        :return: The detailed_status_message of this ComposerWorkloadStatus.
        :rtype: str
        """
        return self._detailed_status_message

    @detailed_status_message.setter
    def detailed_status_message(self, detailed_status_message):
        """Sets the detailed_status_message of this ComposerWorkloadStatus.

        Output only. Detailed message of the status.

        :param detailed_status_message: The detailed_status_message of this ComposerWorkloadStatus.
        :type detailed_status_message: str
        """

        self._detailed_status_message = detailed_status_message

    @property
    def state(self):
        """Gets the state of this ComposerWorkloadStatus.

        Output only. Workload state.

        :return: The state of this ComposerWorkloadStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ComposerWorkloadStatus.

        Output only. Workload state.

        :param state: The state of this ComposerWorkloadStatus.
        :type state: str
        """
        allowed_values = ["COMPOSER_WORKLOAD_STATE_UNSPECIFIED", "PENDING", "OK", "WARNING", "ERROR", "SUCCEEDED", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def status_message(self):
        """Gets the status_message of this ComposerWorkloadStatus.

        Output only. Text to provide more descriptive status.

        :return: The status_message of this ComposerWorkloadStatus.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ComposerWorkloadStatus.

        Output only. Text to provide more descriptive status.

        :param status_message: The status_message of this ComposerWorkloadStatus.
        :type status_message: str
        """

        self._status_message = status_message
