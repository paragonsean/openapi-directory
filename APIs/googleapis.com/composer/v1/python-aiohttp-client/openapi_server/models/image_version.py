# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.model_date import ModelDate
from openapi_server import util


class ImageVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_disabled: bool=None, image_version_id: str=None, is_default: bool=None, release_date: ModelDate=None, supported_python_versions: List[str]=None, upgrade_disabled: bool=None):
        """ImageVersion - a model defined in OpenAPI

        :param creation_disabled: The creation_disabled of this ImageVersion.
        :param image_version_id: The image_version_id of this ImageVersion.
        :param is_default: The is_default of this ImageVersion.
        :param release_date: The release_date of this ImageVersion.
        :param supported_python_versions: The supported_python_versions of this ImageVersion.
        :param upgrade_disabled: The upgrade_disabled of this ImageVersion.
        """
        self.openapi_types = {
            'creation_disabled': bool,
            'image_version_id': str,
            'is_default': bool,
            'release_date': ModelDate,
            'supported_python_versions': List[str],
            'upgrade_disabled': bool
        }

        self.attribute_map = {
            'creation_disabled': 'creationDisabled',
            'image_version_id': 'imageVersionId',
            'is_default': 'isDefault',
            'release_date': 'releaseDate',
            'supported_python_versions': 'supportedPythonVersions',
            'upgrade_disabled': 'upgradeDisabled'
        }

        self._creation_disabled = creation_disabled
        self._image_version_id = image_version_id
        self._is_default = is_default
        self._release_date = release_date
        self._supported_python_versions = supported_python_versions
        self._upgrade_disabled = upgrade_disabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageVersion of this ImageVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_disabled(self):
        """Gets the creation_disabled of this ImageVersion.

        Whether it is impossible to create an environment with the image version.

        :return: The creation_disabled of this ImageVersion.
        :rtype: bool
        """
        return self._creation_disabled

    @creation_disabled.setter
    def creation_disabled(self, creation_disabled):
        """Sets the creation_disabled of this ImageVersion.

        Whether it is impossible to create an environment with the image version.

        :param creation_disabled: The creation_disabled of this ImageVersion.
        :type creation_disabled: bool
        """

        self._creation_disabled = creation_disabled

    @property
    def image_version_id(self):
        """Gets the image_version_id of this ImageVersion.

        The string identifier of the ImageVersion, in the form: \"composer-x.y.z-airflow-a.b.c\"

        :return: The image_version_id of this ImageVersion.
        :rtype: str
        """
        return self._image_version_id

    @image_version_id.setter
    def image_version_id(self, image_version_id):
        """Sets the image_version_id of this ImageVersion.

        The string identifier of the ImageVersion, in the form: \"composer-x.y.z-airflow-a.b.c\"

        :param image_version_id: The image_version_id of this ImageVersion.
        :type image_version_id: str
        """

        self._image_version_id = image_version_id

    @property
    def is_default(self):
        """Gets the is_default of this ImageVersion.

        Whether this is the default ImageVersion used by Composer during environment creation if no input ImageVersion is specified.

        :return: The is_default of this ImageVersion.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ImageVersion.

        Whether this is the default ImageVersion used by Composer during environment creation if no input ImageVersion is specified.

        :param is_default: The is_default of this ImageVersion.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def release_date(self):
        """Gets the release_date of this ImageVersion.


        :return: The release_date of this ImageVersion.
        :rtype: ModelDate
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this ImageVersion.


        :param release_date: The release_date of this ImageVersion.
        :type release_date: ModelDate
        """

        self._release_date = release_date

    @property
    def supported_python_versions(self):
        """Gets the supported_python_versions of this ImageVersion.

        supported python versions

        :return: The supported_python_versions of this ImageVersion.
        :rtype: List[str]
        """
        return self._supported_python_versions

    @supported_python_versions.setter
    def supported_python_versions(self, supported_python_versions):
        """Sets the supported_python_versions of this ImageVersion.

        supported python versions

        :param supported_python_versions: The supported_python_versions of this ImageVersion.
        :type supported_python_versions: List[str]
        """

        self._supported_python_versions = supported_python_versions

    @property
    def upgrade_disabled(self):
        """Gets the upgrade_disabled of this ImageVersion.

        Whether it is impossible to upgrade an environment running with the image version.

        :return: The upgrade_disabled of this ImageVersion.
        :rtype: bool
        """
        return self._upgrade_disabled

    @upgrade_disabled.setter
    def upgrade_disabled(self, upgrade_disabled):
        """Sets the upgrade_disabled of this ImageVersion.

        Whether it is impossible to upgrade an environment running with the image version.

        :param upgrade_disabled: The upgrade_disabled of this ImageVersion.
        :type upgrade_disabled: bool
        """

        self._upgrade_disabled = upgrade_disabled
