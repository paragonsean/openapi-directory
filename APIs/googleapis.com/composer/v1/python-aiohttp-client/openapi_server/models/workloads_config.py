# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dag_processor_resource import DagProcessorResource
from openapi_server.models.scheduler_resource import SchedulerResource
from openapi_server.models.triggerer_resource import TriggererResource
from openapi_server.models.web_server_resource import WebServerResource
from openapi_server.models.worker_resource import WorkerResource
from openapi_server import util


class WorkloadsConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dag_processor: DagProcessorResource=None, scheduler: SchedulerResource=None, triggerer: TriggererResource=None, web_server: WebServerResource=None, worker: WorkerResource=None):
        """WorkloadsConfig - a model defined in OpenAPI

        :param dag_processor: The dag_processor of this WorkloadsConfig.
        :param scheduler: The scheduler of this WorkloadsConfig.
        :param triggerer: The triggerer of this WorkloadsConfig.
        :param web_server: The web_server of this WorkloadsConfig.
        :param worker: The worker of this WorkloadsConfig.
        """
        self.openapi_types = {
            'dag_processor': DagProcessorResource,
            'scheduler': SchedulerResource,
            'triggerer': TriggererResource,
            'web_server': WebServerResource,
            'worker': WorkerResource
        }

        self.attribute_map = {
            'dag_processor': 'dagProcessor',
            'scheduler': 'scheduler',
            'triggerer': 'triggerer',
            'web_server': 'webServer',
            'worker': 'worker'
        }

        self._dag_processor = dag_processor
        self._scheduler = scheduler
        self._triggerer = triggerer
        self._web_server = web_server
        self._worker = worker

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkloadsConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkloadsConfig of this WorkloadsConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dag_processor(self):
        """Gets the dag_processor of this WorkloadsConfig.


        :return: The dag_processor of this WorkloadsConfig.
        :rtype: DagProcessorResource
        """
        return self._dag_processor

    @dag_processor.setter
    def dag_processor(self, dag_processor):
        """Sets the dag_processor of this WorkloadsConfig.


        :param dag_processor: The dag_processor of this WorkloadsConfig.
        :type dag_processor: DagProcessorResource
        """

        self._dag_processor = dag_processor

    @property
    def scheduler(self):
        """Gets the scheduler of this WorkloadsConfig.


        :return: The scheduler of this WorkloadsConfig.
        :rtype: SchedulerResource
        """
        return self._scheduler

    @scheduler.setter
    def scheduler(self, scheduler):
        """Sets the scheduler of this WorkloadsConfig.


        :param scheduler: The scheduler of this WorkloadsConfig.
        :type scheduler: SchedulerResource
        """

        self._scheduler = scheduler

    @property
    def triggerer(self):
        """Gets the triggerer of this WorkloadsConfig.


        :return: The triggerer of this WorkloadsConfig.
        :rtype: TriggererResource
        """
        return self._triggerer

    @triggerer.setter
    def triggerer(self, triggerer):
        """Sets the triggerer of this WorkloadsConfig.


        :param triggerer: The triggerer of this WorkloadsConfig.
        :type triggerer: TriggererResource
        """

        self._triggerer = triggerer

    @property
    def web_server(self):
        """Gets the web_server of this WorkloadsConfig.


        :return: The web_server of this WorkloadsConfig.
        :rtype: WebServerResource
        """
        return self._web_server

    @web_server.setter
    def web_server(self, web_server):
        """Sets the web_server of this WorkloadsConfig.


        :param web_server: The web_server of this WorkloadsConfig.
        :type web_server: WebServerResource
        """

        self._web_server = web_server

    @property
    def worker(self):
        """Gets the worker of this WorkloadsConfig.


        :return: The worker of this WorkloadsConfig.
        :rtype: WorkerResource
        """
        return self._worker

    @worker.setter
    def worker(self, worker):
        """Sets the worker of this WorkloadsConfig.


        :param worker: The worker of this WorkloadsConfig.
        :type worker: WorkerResource
        """

        self._worker = worker
