/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NetworkingConfig model module.
 * @module model/NetworkingConfig
 * @version v1
 */
class NetworkingConfig {
    /**
     * Constructs a new <code>NetworkingConfig</code>.
     * Configuration options for networking connections in the Composer 2 environment.
     * @alias module:model/NetworkingConfig
     */
    constructor() { 
        
        NetworkingConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkingConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkingConfig} obj Optional instance to populate.
     * @return {module:model/NetworkingConfig} The populated <code>NetworkingConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkingConfig();

            if (data.hasOwnProperty('connectionType')) {
                obj['connectionType'] = ApiClient.convertToType(data['connectionType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkingConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkingConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['connectionType'] && !(typeof data['connectionType'] === 'string' || data['connectionType'] instanceof String)) {
            throw new Error("Expected the field `connectionType` to be a primitive type in the JSON string but got " + data['connectionType']);
        }

        return true;
    }


}



/**
 * Optional. Indicates the user requested specifc connection type between Tenant and Customer projects. You cannot set networking connection type in public IP environment.
 * @member {module:model/NetworkingConfig.ConnectionTypeEnum} connectionType
 */
NetworkingConfig.prototype['connectionType'] = undefined;





/**
 * Allowed values for the <code>connectionType</code> property.
 * @enum {String}
 * @readonly
 */
NetworkingConfig['ConnectionTypeEnum'] = {

    /**
     * value: "CONNECTION_TYPE_UNSPECIFIED"
     * @const
     */
    "CONNECTION_TYPE_UNSPECIFIED": "CONNECTION_TYPE_UNSPECIFIED",

    /**
     * value: "VPC_PEERING"
     * @const
     */
    "VPC_PEERING": "VPC_PEERING",

    /**
     * value: "PRIVATE_SERVICE_CONNECT"
     * @const
     */
    "PRIVATE_SERVICE_CONNECT": "PRIVATE_SERVICE_CONNECT"
};



export default NetworkingConfig;

