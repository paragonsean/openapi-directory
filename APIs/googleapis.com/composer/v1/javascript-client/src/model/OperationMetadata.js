/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The OperationMetadata model module.
 * @module model/OperationMetadata
 * @version v1
 */
class OperationMetadata {
    /**
     * Constructs a new <code>OperationMetadata</code>.
     * Metadata describing an operation.
     * @alias module:model/OperationMetadata
     */
    constructor() { 
        
        OperationMetadata.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>OperationMetadata</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OperationMetadata} obj Optional instance to populate.
     * @return {module:model/OperationMetadata} The populated <code>OperationMetadata</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OperationMetadata();

            if (data.hasOwnProperty('createTime')) {
                obj['createTime'] = ApiClient.convertToType(data['createTime'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'String');
            }
            if (data.hasOwnProperty('operationType')) {
                obj['operationType'] = ApiClient.convertToType(data['operationType'], 'String');
            }
            if (data.hasOwnProperty('resource')) {
                obj['resource'] = ApiClient.convertToType(data['resource'], 'String');
            }
            if (data.hasOwnProperty('resourceUuid')) {
                obj['resourceUuid'] = ApiClient.convertToType(data['resourceUuid'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OperationMetadata</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OperationMetadata</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['createTime'] && !(typeof data['createTime'] === 'string' || data['createTime'] instanceof String)) {
            throw new Error("Expected the field `createTime` to be a primitive type in the JSON string but got " + data['createTime']);
        }
        // ensure the json data is a string
        if (data['endTime'] && !(typeof data['endTime'] === 'string' || data['endTime'] instanceof String)) {
            throw new Error("Expected the field `endTime` to be a primitive type in the JSON string but got " + data['endTime']);
        }
        // ensure the json data is a string
        if (data['operationType'] && !(typeof data['operationType'] === 'string' || data['operationType'] instanceof String)) {
            throw new Error("Expected the field `operationType` to be a primitive type in the JSON string but got " + data['operationType']);
        }
        // ensure the json data is a string
        if (data['resource'] && !(typeof data['resource'] === 'string' || data['resource'] instanceof String)) {
            throw new Error("Expected the field `resource` to be a primitive type in the JSON string but got " + data['resource']);
        }
        // ensure the json data is a string
        if (data['resourceUuid'] && !(typeof data['resourceUuid'] === 'string' || data['resourceUuid'] instanceof String)) {
            throw new Error("Expected the field `resourceUuid` to be a primitive type in the JSON string but got " + data['resourceUuid']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}



/**
 * Output only. The time the operation was submitted to the server.
 * @member {String} createTime
 */
OperationMetadata.prototype['createTime'] = undefined;

/**
 * Output only. The time when the operation terminated, regardless of its success. This field is unset if the operation is still ongoing.
 * @member {String} endTime
 */
OperationMetadata.prototype['endTime'] = undefined;

/**
 * Output only. The type of operation being performed.
 * @member {module:model/OperationMetadata.OperationTypeEnum} operationType
 */
OperationMetadata.prototype['operationType'] = undefined;

/**
 * Output only. The resource being operated on, as a [relative resource name]( /apis/design/resource_names#relative_resource_name).
 * @member {String} resource
 */
OperationMetadata.prototype['resource'] = undefined;

/**
 * Output only. The UUID of the resource being operated on.
 * @member {String} resourceUuid
 */
OperationMetadata.prototype['resourceUuid'] = undefined;

/**
 * Output only. The current operation state.
 * @member {module:model/OperationMetadata.StateEnum} state
 */
OperationMetadata.prototype['state'] = undefined;





/**
 * Allowed values for the <code>operationType</code> property.
 * @enum {String}
 * @readonly
 */
OperationMetadata['OperationTypeEnum'] = {

    /**
     * value: "TYPE_UNSPECIFIED"
     * @const
     */
    "TYPE_UNSPECIFIED": "TYPE_UNSPECIFIED",

    /**
     * value: "CREATE"
     * @const
     */
    "CREATE": "CREATE",

    /**
     * value: "DELETE"
     * @const
     */
    "DELETE": "DELETE",

    /**
     * value: "UPDATE"
     * @const
     */
    "UPDATE": "UPDATE",

    /**
     * value: "CHECK"
     * @const
     */
    "CHECK": "CHECK",

    /**
     * value: "SAVE_SNAPSHOT"
     * @const
     */
    "SAVE_SNAPSHOT": "SAVE_SNAPSHOT",

    /**
     * value: "LOAD_SNAPSHOT"
     * @const
     */
    "LOAD_SNAPSHOT": "LOAD_SNAPSHOT",

    /**
     * value: "DATABASE_FAILOVER"
     * @const
     */
    "DATABASE_FAILOVER": "DATABASE_FAILOVER"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
OperationMetadata['StateEnum'] = {

    /**
     * value: "STATE_UNSPECIFIED"
     * @const
     */
    "STATE_UNSPECIFIED": "STATE_UNSPECIFIED",

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "RUNNING"
     * @const
     */
    "RUNNING": "RUNNING",

    /**
     * value: "SUCCEEDED"
     * @const
     */
    "SUCCEEDED": "SUCCEEDED",

    /**
     * value: "SUCCESSFUL"
     * @const
     */
    "SUCCESSFUL": "SUCCESSFUL",

    /**
     * value: "FAILED"
     * @const
     */
    "FAILED": "FAILED"
};



export default OperationMetadata;

