/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CloudDataLineageIntegration from './CloudDataLineageIntegration';

/**
 * The SoftwareConfig model module.
 * @module model/SoftwareConfig
 * @version v1
 */
class SoftwareConfig {
    /**
     * Constructs a new <code>SoftwareConfig</code>.
     * Specifies the selection and configuration of software inside the environment.
     * @alias module:model/SoftwareConfig
     */
    constructor() { 
        
        SoftwareConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SoftwareConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SoftwareConfig} obj Optional instance to populate.
     * @return {module:model/SoftwareConfig} The populated <code>SoftwareConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SoftwareConfig();

            if (data.hasOwnProperty('airflowConfigOverrides')) {
                obj['airflowConfigOverrides'] = ApiClient.convertToType(data['airflowConfigOverrides'], {'String': 'String'});
            }
            if (data.hasOwnProperty('cloudDataLineageIntegration')) {
                obj['cloudDataLineageIntegration'] = CloudDataLineageIntegration.constructFromObject(data['cloudDataLineageIntegration']);
            }
            if (data.hasOwnProperty('envVariables')) {
                obj['envVariables'] = ApiClient.convertToType(data['envVariables'], {'String': 'String'});
            }
            if (data.hasOwnProperty('imageVersion')) {
                obj['imageVersion'] = ApiClient.convertToType(data['imageVersion'], 'String');
            }
            if (data.hasOwnProperty('pypiPackages')) {
                obj['pypiPackages'] = ApiClient.convertToType(data['pypiPackages'], {'String': 'String'});
            }
            if (data.hasOwnProperty('pythonVersion')) {
                obj['pythonVersion'] = ApiClient.convertToType(data['pythonVersion'], 'String');
            }
            if (data.hasOwnProperty('schedulerCount')) {
                obj['schedulerCount'] = ApiClient.convertToType(data['schedulerCount'], 'Number');
            }
            if (data.hasOwnProperty('webServerPluginsMode')) {
                obj['webServerPluginsMode'] = ApiClient.convertToType(data['webServerPluginsMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SoftwareConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SoftwareConfig</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cloudDataLineageIntegration`
        if (data['cloudDataLineageIntegration']) { // data not null
          CloudDataLineageIntegration.validateJSON(data['cloudDataLineageIntegration']);
        }
        // ensure the json data is a string
        if (data['imageVersion'] && !(typeof data['imageVersion'] === 'string' || data['imageVersion'] instanceof String)) {
            throw new Error("Expected the field `imageVersion` to be a primitive type in the JSON string but got " + data['imageVersion']);
        }
        // ensure the json data is a string
        if (data['pythonVersion'] && !(typeof data['pythonVersion'] === 'string' || data['pythonVersion'] instanceof String)) {
            throw new Error("Expected the field `pythonVersion` to be a primitive type in the JSON string but got " + data['pythonVersion']);
        }
        // ensure the json data is a string
        if (data['webServerPluginsMode'] && !(typeof data['webServerPluginsMode'] === 'string' || data['webServerPluginsMode'] instanceof String)) {
            throw new Error("Expected the field `webServerPluginsMode` to be a primitive type in the JSON string but got " + data['webServerPluginsMode']);
        }

        return true;
    }


}



/**
 * Optional. Apache Airflow configuration properties to override. Property keys contain the section and property names, separated by a hyphen, for example \"core-dags_are_paused_at_creation\". Section names must not contain hyphens (\"-\"), opening square brackets (\"[\"), or closing square brackets (\"]\"). The property name must not be empty and must not contain an equals sign (\"=\") or semicolon (\";\"). Section and property names must not contain a period (\".\"). Apache Airflow configuration property names must be written in [snake_case](https://en.wikipedia.org/wiki/Snake_case). Property values can contain any character, and can be written in any lower/upper case format. Certain Apache Airflow configuration property values are [blocked](/composer/docs/concepts/airflow-configurations), and cannot be overridden.
 * @member {Object.<String, String>} airflowConfigOverrides
 */
SoftwareConfig.prototype['airflowConfigOverrides'] = undefined;

/**
 * @member {module:model/CloudDataLineageIntegration} cloudDataLineageIntegration
 */
SoftwareConfig.prototype['cloudDataLineageIntegration'] = undefined;

/**
 * Optional. Additional environment variables to provide to the Apache Airflow scheduler, worker, and webserver processes. Environment variable names must match the regular expression `a-zA-Z_*`. They cannot specify Apache Airflow software configuration overrides (they cannot match the regular expression `AIRFLOW__[A-Z0-9_]+__[A-Z0-9_]+`), and they cannot match any of the following reserved names: * `AIRFLOW_HOME` * `C_FORCE_ROOT` * `CONTAINER_NAME` * `DAGS_FOLDER` * `GCP_PROJECT` * `GCS_BUCKET` * `GKE_CLUSTER_NAME` * `SQL_DATABASE` * `SQL_INSTANCE` * `SQL_PASSWORD` * `SQL_PROJECT` * `SQL_REGION` * `SQL_USER`
 * @member {Object.<String, String>} envVariables
 */
SoftwareConfig.prototype['envVariables'] = undefined;

/**
 * The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
 * @member {String} imageVersion
 */
SoftwareConfig.prototype['imageVersion'] = undefined;

/**
 * Optional. Custom Python Package Index (PyPI) packages to be installed in the environment. Keys refer to the lowercase package name such as \"numpy\" and values are the lowercase extras and version specifier such as \"==1.12.0\", \"[devel,gcp_api]\", or \"[devel]>=1.8.2, <1.9.2\". To specify a package without pinning it to a version specifier, use the empty string as the value.
 * @member {Object.<String, String>} pypiPackages
 */
SoftwareConfig.prototype['pypiPackages'] = undefined;

/**
 * Optional. The major version of Python used to run the Apache Airflow scheduler, worker, and webserver processes. Can be set to '2' or '3'. If not specified, the default is '3'. Cannot be updated. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use Python major version 3.
 * @member {String} pythonVersion
 */
SoftwareConfig.prototype['pythonVersion'] = undefined;

/**
 * Optional. The number of schedulers for Airflow. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-2.*.*.
 * @member {Number} schedulerCount
 */
SoftwareConfig.prototype['schedulerCount'] = undefined;

/**
 * Optional. Whether or not the web server uses custom plugins. If unspecified, the field defaults to `PLUGINS_ENABLED`. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
 * @member {module:model/SoftwareConfig.WebServerPluginsModeEnum} webServerPluginsMode
 */
SoftwareConfig.prototype['webServerPluginsMode'] = undefined;





/**
 * Allowed values for the <code>webServerPluginsMode</code> property.
 * @enum {String}
 * @readonly
 */
SoftwareConfig['WebServerPluginsModeEnum'] = {

    /**
     * value: "WEB_SERVER_PLUGINS_MODE_UNSPECIFIED"
     * @const
     */
    "WEB_SERVER_PLUGINS_MODE_UNSPECIFIED": "WEB_SERVER_PLUGINS_MODE_UNSPECIFIED",

    /**
     * value: "PLUGINS_DISABLED"
     * @const
     */
    "PLUGINS_DISABLED": "PLUGINS_DISABLED",

    /**
     * value: "PLUGINS_ENABLED"
     * @const
     */
    "PLUGINS_ENABLED": "PLUGINS_ENABLED"
};



export default SoftwareConfig;

