/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PrivateClusterConfig model module.
 * @module model/PrivateClusterConfig
 * @version v1
 */
class PrivateClusterConfig {
    /**
     * Constructs a new <code>PrivateClusterConfig</code>.
     * Configuration options for the private GKE cluster in a Cloud Composer environment.
     * @alias module:model/PrivateClusterConfig
     */
    constructor() { 
        
        PrivateClusterConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateClusterConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateClusterConfig} obj Optional instance to populate.
     * @return {module:model/PrivateClusterConfig} The populated <code>PrivateClusterConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateClusterConfig();

            if (data.hasOwnProperty('enablePrivateEndpoint')) {
                obj['enablePrivateEndpoint'] = ApiClient.convertToType(data['enablePrivateEndpoint'], 'Boolean');
            }
            if (data.hasOwnProperty('masterIpv4CidrBlock')) {
                obj['masterIpv4CidrBlock'] = ApiClient.convertToType(data['masterIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('masterIpv4ReservedRange')) {
                obj['masterIpv4ReservedRange'] = ApiClient.convertToType(data['masterIpv4ReservedRange'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateClusterConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateClusterConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['masterIpv4CidrBlock'] && !(typeof data['masterIpv4CidrBlock'] === 'string' || data['masterIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `masterIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['masterIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['masterIpv4ReservedRange'] && !(typeof data['masterIpv4ReservedRange'] === 'string' || data['masterIpv4ReservedRange'] instanceof String)) {
            throw new Error("Expected the field `masterIpv4ReservedRange` to be a primitive type in the JSON string but got " + data['masterIpv4ReservedRange']);
        }

        return true;
    }


}



/**
 * Optional. If `true`, access to the public endpoint of the GKE cluster is denied.
 * @member {Boolean} enablePrivateEndpoint
 */
PrivateClusterConfig.prototype['enablePrivateEndpoint'] = undefined;

/**
 * Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of '172.16.0.0/23' is used.
 * @member {String} masterIpv4CidrBlock
 */
PrivateClusterConfig.prototype['masterIpv4CidrBlock'] = undefined;

/**
 * Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the GKE cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster's network.
 * @member {String} masterIpv4ReservedRange
 */
PrivateClusterConfig.prototype['masterIpv4ReservedRange'] = undefined;






export default PrivateClusterConfig;

