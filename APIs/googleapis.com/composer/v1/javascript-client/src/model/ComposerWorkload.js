/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ComposerWorkloadStatus from './ComposerWorkloadStatus';

/**
 * The ComposerWorkload model module.
 * @module model/ComposerWorkload
 * @version v1
 */
class ComposerWorkload {
    /**
     * Constructs a new <code>ComposerWorkload</code>.
     * Information about a single workload.
     * @alias module:model/ComposerWorkload
     */
    constructor() { 
        
        ComposerWorkload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ComposerWorkload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ComposerWorkload} obj Optional instance to populate.
     * @return {module:model/ComposerWorkload} The populated <code>ComposerWorkload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ComposerWorkload();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ComposerWorkloadStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ComposerWorkload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ComposerWorkload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `status`
        if (data['status']) { // data not null
          ComposerWorkloadStatus.validateJSON(data['status']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Name of a workload.
 * @member {String} name
 */
ComposerWorkload.prototype['name'] = undefined;

/**
 * @member {module:model/ComposerWorkloadStatus} status
 */
ComposerWorkload.prototype['status'] = undefined;

/**
 * Type of a workload.
 * @member {module:model/ComposerWorkload.TypeEnum} type
 */
ComposerWorkload.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
ComposerWorkload['TypeEnum'] = {

    /**
     * value: "COMPOSER_WORKLOAD_TYPE_UNSPECIFIED"
     * @const
     */
    "COMPOSER_WORKLOAD_TYPE_UNSPECIFIED": "COMPOSER_WORKLOAD_TYPE_UNSPECIFIED",

    /**
     * value: "CELERY_WORKER"
     * @const
     */
    "CELERY_WORKER": "CELERY_WORKER",

    /**
     * value: "KUBERNETES_WORKER"
     * @const
     */
    "KUBERNETES_WORKER": "KUBERNETES_WORKER",

    /**
     * value: "KUBERNETES_OPERATOR_POD"
     * @const
     */
    "KUBERNETES_OPERATOR_POD": "KUBERNETES_OPERATOR_POD",

    /**
     * value: "SCHEDULER"
     * @const
     */
    "SCHEDULER": "SCHEDULER",

    /**
     * value: "DAG_PROCESSOR"
     * @const
     */
    "DAG_PROCESSOR": "DAG_PROCESSOR",

    /**
     * value: "TRIGGERER"
     * @const
     */
    "TRIGGERER": "TRIGGERER",

    /**
     * value: "WEB_SERVER"
     * @const
     */
    "WEB_SERVER": "WEB_SERVER",

    /**
     * value: "REDIS"
     * @const
     */
    "REDIS": "REDIS"
};



export default ComposerWorkload;

