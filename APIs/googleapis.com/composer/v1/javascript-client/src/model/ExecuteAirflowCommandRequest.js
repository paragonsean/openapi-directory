/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ExecuteAirflowCommandRequest model module.
 * @module model/ExecuteAirflowCommandRequest
 * @version v1
 */
class ExecuteAirflowCommandRequest {
    /**
     * Constructs a new <code>ExecuteAirflowCommandRequest</code>.
     * Execute Airflow Command request.
     * @alias module:model/ExecuteAirflowCommandRequest
     */
    constructor() { 
        
        ExecuteAirflowCommandRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExecuteAirflowCommandRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExecuteAirflowCommandRequest} obj Optional instance to populate.
     * @return {module:model/ExecuteAirflowCommandRequest} The populated <code>ExecuteAirflowCommandRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExecuteAirflowCommandRequest();

            if (data.hasOwnProperty('command')) {
                obj['command'] = ApiClient.convertToType(data['command'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], ['String']);
            }
            if (data.hasOwnProperty('subcommand')) {
                obj['subcommand'] = ApiClient.convertToType(data['subcommand'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExecuteAirflowCommandRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExecuteAirflowCommandRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['command'] && !(typeof data['command'] === 'string' || data['command'] instanceof String)) {
            throw new Error("Expected the field `command` to be a primitive type in the JSON string but got " + data['command']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parameters'])) {
            throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
        }
        // ensure the json data is a string
        if (data['subcommand'] && !(typeof data['subcommand'] === 'string' || data['subcommand'] instanceof String)) {
            throw new Error("Expected the field `subcommand` to be a primitive type in the JSON string but got " + data['subcommand']);
        }

        return true;
    }


}



/**
 * Airflow command.
 * @member {String} command
 */
ExecuteAirflowCommandRequest.prototype['command'] = undefined;

/**
 * Parameters for the Airflow command/subcommand as an array of arguments. It may contain positional arguments like `[\"my-dag-id\"]`, key-value parameters like `[\"--foo=bar\"]` or `[\"--foo\",\"bar\"]`, or other flags like `[\"-f\"]`.
 * @member {Array.<String>} parameters
 */
ExecuteAirflowCommandRequest.prototype['parameters'] = undefined;

/**
 * Airflow subcommand.
 * @member {String} subcommand
 */
ExecuteAirflowCommandRequest.prototype['subcommand'] = undefined;






export default ExecuteAirflowCommandRequest;

