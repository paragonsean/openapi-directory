/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.CloudComposerApi);
  }
}(this, function(expect, CloudComposerApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new CloudComposerApi.EnvironmentConfig();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EnvironmentConfig', function() {
    it('should create an instance of EnvironmentConfig', function() {
      // uncomment below and update the code to test EnvironmentConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be.a(CloudComposerApi.EnvironmentConfig);
    });

    it('should have the property airflowByoidUri (base name: "airflowByoidUri")', function() {
      // uncomment below and update the code to test the property airflowByoidUri
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property airflowUri (base name: "airflowUri")', function() {
      // uncomment below and update the code to test the property airflowUri
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property dagGcsPrefix (base name: "dagGcsPrefix")', function() {
      // uncomment below and update the code to test the property dagGcsPrefix
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property dataRetentionConfig (base name: "dataRetentionConfig")', function() {
      // uncomment below and update the code to test the property dataRetentionConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property databaseConfig (base name: "databaseConfig")', function() {
      // uncomment below and update the code to test the property databaseConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property encryptionConfig (base name: "encryptionConfig")', function() {
      // uncomment below and update the code to test the property encryptionConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property environmentSize (base name: "environmentSize")', function() {
      // uncomment below and update the code to test the property environmentSize
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property gkeCluster (base name: "gkeCluster")', function() {
      // uncomment below and update the code to test the property gkeCluster
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property maintenanceWindow (base name: "maintenanceWindow")', function() {
      // uncomment below and update the code to test the property maintenanceWindow
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property masterAuthorizedNetworksConfig (base name: "masterAuthorizedNetworksConfig")', function() {
      // uncomment below and update the code to test the property masterAuthorizedNetworksConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property nodeConfig (base name: "nodeConfig")', function() {
      // uncomment below and update the code to test the property nodeConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property nodeCount (base name: "nodeCount")', function() {
      // uncomment below and update the code to test the property nodeCount
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property privateEnvironmentConfig (base name: "privateEnvironmentConfig")', function() {
      // uncomment below and update the code to test the property privateEnvironmentConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property recoveryConfig (base name: "recoveryConfig")', function() {
      // uncomment below and update the code to test the property recoveryConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property resilienceMode (base name: "resilienceMode")', function() {
      // uncomment below and update the code to test the property resilienceMode
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property softwareConfig (base name: "softwareConfig")', function() {
      // uncomment below and update the code to test the property softwareConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property webServerConfig (base name: "webServerConfig")', function() {
      // uncomment below and update the code to test the property webServerConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property webServerNetworkAccessControl (base name: "webServerNetworkAccessControl")', function() {
      // uncomment below and update the code to test the property webServerNetworkAccessControl
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

    it('should have the property workloadsConfig (base name: "workloadsConfig")', function() {
      // uncomment below and update the code to test the property workloadsConfig
      //var instance = new CloudComposerApi.EnvironmentConfig();
      //expect(instance).to.be();
    });

  });

}));
