/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request to load a snapshot into a Cloud Composer environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:41.703333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoadSnapshotRequest {
  public static final String SERIALIZED_NAME_SKIP_AIRFLOW_OVERRIDES_SETTING = "skipAirflowOverridesSetting";
  @SerializedName(SERIALIZED_NAME_SKIP_AIRFLOW_OVERRIDES_SETTING)
  private Boolean skipAirflowOverridesSetting;

  public static final String SERIALIZED_NAME_SKIP_ENVIRONMENT_VARIABLES_SETTING = "skipEnvironmentVariablesSetting";
  @SerializedName(SERIALIZED_NAME_SKIP_ENVIRONMENT_VARIABLES_SETTING)
  private Boolean skipEnvironmentVariablesSetting;

  public static final String SERIALIZED_NAME_SKIP_GCS_DATA_COPYING = "skipGcsDataCopying";
  @SerializedName(SERIALIZED_NAME_SKIP_GCS_DATA_COPYING)
  private Boolean skipGcsDataCopying;

  public static final String SERIALIZED_NAME_SKIP_PYPI_PACKAGES_INSTALLATION = "skipPypiPackagesInstallation";
  @SerializedName(SERIALIZED_NAME_SKIP_PYPI_PACKAGES_INSTALLATION)
  private Boolean skipPypiPackagesInstallation;

  public static final String SERIALIZED_NAME_SNAPSHOT_PATH = "snapshotPath";
  @SerializedName(SERIALIZED_NAME_SNAPSHOT_PATH)
  private String snapshotPath;

  public LoadSnapshotRequest() {
  }

  public LoadSnapshotRequest skipAirflowOverridesSetting(Boolean skipAirflowOverridesSetting) {
    this.skipAirflowOverridesSetting = skipAirflowOverridesSetting;
    return this;
  }

  /**
   * Whether or not to skip setting Airflow overrides when loading the environment&#39;s state.
   * @return skipAirflowOverridesSetting
   */
  @javax.annotation.Nullable
  public Boolean getSkipAirflowOverridesSetting() {
    return skipAirflowOverridesSetting;
  }

  public void setSkipAirflowOverridesSetting(Boolean skipAirflowOverridesSetting) {
    this.skipAirflowOverridesSetting = skipAirflowOverridesSetting;
  }


  public LoadSnapshotRequest skipEnvironmentVariablesSetting(Boolean skipEnvironmentVariablesSetting) {
    this.skipEnvironmentVariablesSetting = skipEnvironmentVariablesSetting;
    return this;
  }

  /**
   * Whether or not to skip setting environment variables when loading the environment&#39;s state.
   * @return skipEnvironmentVariablesSetting
   */
  @javax.annotation.Nullable
  public Boolean getSkipEnvironmentVariablesSetting() {
    return skipEnvironmentVariablesSetting;
  }

  public void setSkipEnvironmentVariablesSetting(Boolean skipEnvironmentVariablesSetting) {
    this.skipEnvironmentVariablesSetting = skipEnvironmentVariablesSetting;
  }


  public LoadSnapshotRequest skipGcsDataCopying(Boolean skipGcsDataCopying) {
    this.skipGcsDataCopying = skipGcsDataCopying;
    return this;
  }

  /**
   * Whether or not to skip copying Cloud Storage data when loading the environment&#39;s state.
   * @return skipGcsDataCopying
   */
  @javax.annotation.Nullable
  public Boolean getSkipGcsDataCopying() {
    return skipGcsDataCopying;
  }

  public void setSkipGcsDataCopying(Boolean skipGcsDataCopying) {
    this.skipGcsDataCopying = skipGcsDataCopying;
  }


  public LoadSnapshotRequest skipPypiPackagesInstallation(Boolean skipPypiPackagesInstallation) {
    this.skipPypiPackagesInstallation = skipPypiPackagesInstallation;
    return this;
  }

  /**
   * Whether or not to skip installing Pypi packages when loading the environment&#39;s state.
   * @return skipPypiPackagesInstallation
   */
  @javax.annotation.Nullable
  public Boolean getSkipPypiPackagesInstallation() {
    return skipPypiPackagesInstallation;
  }

  public void setSkipPypiPackagesInstallation(Boolean skipPypiPackagesInstallation) {
    this.skipPypiPackagesInstallation = skipPypiPackagesInstallation;
  }


  public LoadSnapshotRequest snapshotPath(String snapshotPath) {
    this.snapshotPath = snapshotPath;
    return this;
  }

  /**
   * A Cloud Storage path to a snapshot to load, e.g.: \&quot;gs://my-bucket/snapshots/project_location_environment_timestamp\&quot;.
   * @return snapshotPath
   */
  @javax.annotation.Nullable
  public String getSnapshotPath() {
    return snapshotPath;
  }

  public void setSnapshotPath(String snapshotPath) {
    this.snapshotPath = snapshotPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoadSnapshotRequest loadSnapshotRequest = (LoadSnapshotRequest) o;
    return Objects.equals(this.skipAirflowOverridesSetting, loadSnapshotRequest.skipAirflowOverridesSetting) &&
        Objects.equals(this.skipEnvironmentVariablesSetting, loadSnapshotRequest.skipEnvironmentVariablesSetting) &&
        Objects.equals(this.skipGcsDataCopying, loadSnapshotRequest.skipGcsDataCopying) &&
        Objects.equals(this.skipPypiPackagesInstallation, loadSnapshotRequest.skipPypiPackagesInstallation) &&
        Objects.equals(this.snapshotPath, loadSnapshotRequest.snapshotPath);
  }

  @Override
  public int hashCode() {
    return Objects.hash(skipAirflowOverridesSetting, skipEnvironmentVariablesSetting, skipGcsDataCopying, skipPypiPackagesInstallation, snapshotPath);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoadSnapshotRequest {\n");
    sb.append("    skipAirflowOverridesSetting: ").append(toIndentedString(skipAirflowOverridesSetting)).append("\n");
    sb.append("    skipEnvironmentVariablesSetting: ").append(toIndentedString(skipEnvironmentVariablesSetting)).append("\n");
    sb.append("    skipGcsDataCopying: ").append(toIndentedString(skipGcsDataCopying)).append("\n");
    sb.append("    skipPypiPackagesInstallation: ").append(toIndentedString(skipPypiPackagesInstallation)).append("\n");
    sb.append("    snapshotPath: ").append(toIndentedString(snapshotPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("skipAirflowOverridesSetting");
    openapiFields.add("skipEnvironmentVariablesSetting");
    openapiFields.add("skipGcsDataCopying");
    openapiFields.add("skipPypiPackagesInstallation");
    openapiFields.add("snapshotPath");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoadSnapshotRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoadSnapshotRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoadSnapshotRequest is not found in the empty JSON string", LoadSnapshotRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoadSnapshotRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoadSnapshotRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("snapshotPath") != null && !jsonObj.get("snapshotPath").isJsonNull()) && !jsonObj.get("snapshotPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snapshotPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snapshotPath").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoadSnapshotRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoadSnapshotRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoadSnapshotRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoadSnapshotRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<LoadSnapshotRequest>() {
           @Override
           public void write(JsonWriter out, LoadSnapshotRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoadSnapshotRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoadSnapshotRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoadSnapshotRequest
   * @throws IOException if the JSON string is invalid with respect to LoadSnapshotRequest
   */
  public static LoadSnapshotRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoadSnapshotRequest.class);
  }

  /**
   * Convert an instance of LoadSnapshotRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

