/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DagProcessorResource;
import org.openapitools.client.model.SchedulerResource;
import org.openapitools.client.model.TriggererResource;
import org.openapitools.client.model.WebServerResource;
import org.openapitools.client.model.WorkerResource;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Kubernetes workloads configuration for GKE cluster associated with the Cloud Composer environment. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:41.703333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkloadsConfig {
  public static final String SERIALIZED_NAME_DAG_PROCESSOR = "dagProcessor";
  @SerializedName(SERIALIZED_NAME_DAG_PROCESSOR)
  private DagProcessorResource dagProcessor;

  public static final String SERIALIZED_NAME_SCHEDULER = "scheduler";
  @SerializedName(SERIALIZED_NAME_SCHEDULER)
  private SchedulerResource scheduler;

  public static final String SERIALIZED_NAME_TRIGGERER = "triggerer";
  @SerializedName(SERIALIZED_NAME_TRIGGERER)
  private TriggererResource triggerer;

  public static final String SERIALIZED_NAME_WEB_SERVER = "webServer";
  @SerializedName(SERIALIZED_NAME_WEB_SERVER)
  private WebServerResource webServer;

  public static final String SERIALIZED_NAME_WORKER = "worker";
  @SerializedName(SERIALIZED_NAME_WORKER)
  private WorkerResource worker;

  public WorkloadsConfig() {
  }

  public WorkloadsConfig dagProcessor(DagProcessorResource dagProcessor) {
    this.dagProcessor = dagProcessor;
    return this;
  }

  /**
   * Get dagProcessor
   * @return dagProcessor
   */
  @javax.annotation.Nullable
  public DagProcessorResource getDagProcessor() {
    return dagProcessor;
  }

  public void setDagProcessor(DagProcessorResource dagProcessor) {
    this.dagProcessor = dagProcessor;
  }


  public WorkloadsConfig scheduler(SchedulerResource scheduler) {
    this.scheduler = scheduler;
    return this;
  }

  /**
   * Get scheduler
   * @return scheduler
   */
  @javax.annotation.Nullable
  public SchedulerResource getScheduler() {
    return scheduler;
  }

  public void setScheduler(SchedulerResource scheduler) {
    this.scheduler = scheduler;
  }


  public WorkloadsConfig triggerer(TriggererResource triggerer) {
    this.triggerer = triggerer;
    return this;
  }

  /**
   * Get triggerer
   * @return triggerer
   */
  @javax.annotation.Nullable
  public TriggererResource getTriggerer() {
    return triggerer;
  }

  public void setTriggerer(TriggererResource triggerer) {
    this.triggerer = triggerer;
  }


  public WorkloadsConfig webServer(WebServerResource webServer) {
    this.webServer = webServer;
    return this;
  }

  /**
   * Get webServer
   * @return webServer
   */
  @javax.annotation.Nullable
  public WebServerResource getWebServer() {
    return webServer;
  }

  public void setWebServer(WebServerResource webServer) {
    this.webServer = webServer;
  }


  public WorkloadsConfig worker(WorkerResource worker) {
    this.worker = worker;
    return this;
  }

  /**
   * Get worker
   * @return worker
   */
  @javax.annotation.Nullable
  public WorkerResource getWorker() {
    return worker;
  }

  public void setWorker(WorkerResource worker) {
    this.worker = worker;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkloadsConfig workloadsConfig = (WorkloadsConfig) o;
    return Objects.equals(this.dagProcessor, workloadsConfig.dagProcessor) &&
        Objects.equals(this.scheduler, workloadsConfig.scheduler) &&
        Objects.equals(this.triggerer, workloadsConfig.triggerer) &&
        Objects.equals(this.webServer, workloadsConfig.webServer) &&
        Objects.equals(this.worker, workloadsConfig.worker);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dagProcessor, scheduler, triggerer, webServer, worker);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkloadsConfig {\n");
    sb.append("    dagProcessor: ").append(toIndentedString(dagProcessor)).append("\n");
    sb.append("    scheduler: ").append(toIndentedString(scheduler)).append("\n");
    sb.append("    triggerer: ").append(toIndentedString(triggerer)).append("\n");
    sb.append("    webServer: ").append(toIndentedString(webServer)).append("\n");
    sb.append("    worker: ").append(toIndentedString(worker)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dagProcessor");
    openapiFields.add("scheduler");
    openapiFields.add("triggerer");
    openapiFields.add("webServer");
    openapiFields.add("worker");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkloadsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkloadsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkloadsConfig is not found in the empty JSON string", WorkloadsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkloadsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkloadsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `dagProcessor`
      if (jsonObj.get("dagProcessor") != null && !jsonObj.get("dagProcessor").isJsonNull()) {
        DagProcessorResource.validateJsonElement(jsonObj.get("dagProcessor"));
      }
      // validate the optional field `scheduler`
      if (jsonObj.get("scheduler") != null && !jsonObj.get("scheduler").isJsonNull()) {
        SchedulerResource.validateJsonElement(jsonObj.get("scheduler"));
      }
      // validate the optional field `triggerer`
      if (jsonObj.get("triggerer") != null && !jsonObj.get("triggerer").isJsonNull()) {
        TriggererResource.validateJsonElement(jsonObj.get("triggerer"));
      }
      // validate the optional field `webServer`
      if (jsonObj.get("webServer") != null && !jsonObj.get("webServer").isJsonNull()) {
        WebServerResource.validateJsonElement(jsonObj.get("webServer"));
      }
      // validate the optional field `worker`
      if (jsonObj.get("worker") != null && !jsonObj.get("worker").isJsonNull()) {
        WorkerResource.validateJsonElement(jsonObj.get("worker"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkloadsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkloadsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkloadsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkloadsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkloadsConfig>() {
           @Override
           public void write(JsonWriter out, WorkloadsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkloadsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkloadsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkloadsConfig
   * @throws IOException if the JSON string is invalid with respect to WorkloadsConfig
   */
  public static WorkloadsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkloadsConfig.class);
  }

  /**
   * Convert an instance of WorkloadsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

