/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CidrBlock;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration options for the master authorized networks feature. Enabled master authorized networks will disallow all external traffic to access Kubernetes master through HTTPS except traffic from the given CIDR blocks, Google Compute Engine Public IPs and Google Prod IPs.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:41.703333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MasterAuthorizedNetworksConfig {
  public static final String SERIALIZED_NAME_CIDR_BLOCKS = "cidrBlocks";
  @SerializedName(SERIALIZED_NAME_CIDR_BLOCKS)
  private List<CidrBlock> cidrBlocks = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public MasterAuthorizedNetworksConfig() {
  }

  public MasterAuthorizedNetworksConfig cidrBlocks(List<CidrBlock> cidrBlocks) {
    this.cidrBlocks = cidrBlocks;
    return this;
  }

  public MasterAuthorizedNetworksConfig addCidrBlocksItem(CidrBlock cidrBlocksItem) {
    if (this.cidrBlocks == null) {
      this.cidrBlocks = new ArrayList<>();
    }
    this.cidrBlocks.add(cidrBlocksItem);
    return this;
  }

  /**
   * Up to 50 external networks that could access Kubernetes master through HTTPS.
   * @return cidrBlocks
   */
  @javax.annotation.Nullable
  public List<CidrBlock> getCidrBlocks() {
    return cidrBlocks;
  }

  public void setCidrBlocks(List<CidrBlock> cidrBlocks) {
    this.cidrBlocks = cidrBlocks;
  }


  public MasterAuthorizedNetworksConfig enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Whether or not master authorized networks feature is enabled.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MasterAuthorizedNetworksConfig masterAuthorizedNetworksConfig = (MasterAuthorizedNetworksConfig) o;
    return Objects.equals(this.cidrBlocks, masterAuthorizedNetworksConfig.cidrBlocks) &&
        Objects.equals(this.enabled, masterAuthorizedNetworksConfig.enabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cidrBlocks, enabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MasterAuthorizedNetworksConfig {\n");
    sb.append("    cidrBlocks: ").append(toIndentedString(cidrBlocks)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cidrBlocks");
    openapiFields.add("enabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MasterAuthorizedNetworksConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MasterAuthorizedNetworksConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MasterAuthorizedNetworksConfig is not found in the empty JSON string", MasterAuthorizedNetworksConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MasterAuthorizedNetworksConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MasterAuthorizedNetworksConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("cidrBlocks") != null && !jsonObj.get("cidrBlocks").isJsonNull()) {
        JsonArray jsonArraycidrBlocks = jsonObj.getAsJsonArray("cidrBlocks");
        if (jsonArraycidrBlocks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cidrBlocks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cidrBlocks` to be an array in the JSON string but got `%s`", jsonObj.get("cidrBlocks").toString()));
          }

          // validate the optional field `cidrBlocks` (array)
          for (int i = 0; i < jsonArraycidrBlocks.size(); i++) {
            CidrBlock.validateJsonElement(jsonArraycidrBlocks.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MasterAuthorizedNetworksConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MasterAuthorizedNetworksConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MasterAuthorizedNetworksConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MasterAuthorizedNetworksConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<MasterAuthorizedNetworksConfig>() {
           @Override
           public void write(JsonWriter out, MasterAuthorizedNetworksConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MasterAuthorizedNetworksConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MasterAuthorizedNetworksConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MasterAuthorizedNetworksConfig
   * @throws IOException if the JSON string is invalid with respect to MasterAuthorizedNetworksConfig
   */
  public static MasterAuthorizedNetworksConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MasterAuthorizedNetworksConfig.class);
  }

  /**
   * Convert an instance of MasterAuthorizedNetworksConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

