/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Message containing information about the result of an upgrade check operation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:41.703333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CheckUpgradeResponse {
  public static final String SERIALIZED_NAME_BUILD_LOG_URI = "buildLogUri";
  @SerializedName(SERIALIZED_NAME_BUILD_LOG_URI)
  private String buildLogUri;

  /**
   * Output only. Whether build has succeeded or failed on modules conflicts.
   */
  @JsonAdapter(ContainsPypiModulesConflictEnum.Adapter.class)
  public enum ContainsPypiModulesConflictEnum {
    CONFLICT_RESULT_UNSPECIFIED("CONFLICT_RESULT_UNSPECIFIED"),
    
    CONFLICT("CONFLICT"),
    
    NO_CONFLICT("NO_CONFLICT");

    private String value;

    ContainsPypiModulesConflictEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContainsPypiModulesConflictEnum fromValue(String value) {
      for (ContainsPypiModulesConflictEnum b : ContainsPypiModulesConflictEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContainsPypiModulesConflictEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContainsPypiModulesConflictEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContainsPypiModulesConflictEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContainsPypiModulesConflictEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ContainsPypiModulesConflictEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTAINS_PYPI_MODULES_CONFLICT = "containsPypiModulesConflict";
  @SerializedName(SERIALIZED_NAME_CONTAINS_PYPI_MODULES_CONFLICT)
  private ContainsPypiModulesConflictEnum containsPypiModulesConflict;

  public static final String SERIALIZED_NAME_IMAGE_VERSION = "imageVersion";
  @SerializedName(SERIALIZED_NAME_IMAGE_VERSION)
  private String imageVersion;

  public static final String SERIALIZED_NAME_PYPI_CONFLICT_BUILD_LOG_EXTRACT = "pypiConflictBuildLogExtract";
  @SerializedName(SERIALIZED_NAME_PYPI_CONFLICT_BUILD_LOG_EXTRACT)
  private String pypiConflictBuildLogExtract;

  public static final String SERIALIZED_NAME_PYPI_DEPENDENCIES = "pypiDependencies";
  @SerializedName(SERIALIZED_NAME_PYPI_DEPENDENCIES)
  private Map<String, String> pypiDependencies = new HashMap<>();

  public CheckUpgradeResponse() {
  }

  public CheckUpgradeResponse(
     String buildLogUri, 
     ContainsPypiModulesConflictEnum containsPypiModulesConflict, 
     String pypiConflictBuildLogExtract
  ) {
    this();
    this.buildLogUri = buildLogUri;
    this.containsPypiModulesConflict = containsPypiModulesConflict;
    this.pypiConflictBuildLogExtract = pypiConflictBuildLogExtract;
  }

  /**
   * Output only. Url for a docker build log of an upgraded image.
   * @return buildLogUri
   */
  @javax.annotation.Nullable
  public String getBuildLogUri() {
    return buildLogUri;
  }



  /**
   * Output only. Whether build has succeeded or failed on modules conflicts.
   * @return containsPypiModulesConflict
   */
  @javax.annotation.Nullable
  public ContainsPypiModulesConflictEnum getContainsPypiModulesConflict() {
    return containsPypiModulesConflict;
  }



  public CheckUpgradeResponse imageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
    return this;
  }

  /**
   * Composer image for which the build was happening.
   * @return imageVersion
   */
  @javax.annotation.Nullable
  public String getImageVersion() {
    return imageVersion;
  }

  public void setImageVersion(String imageVersion) {
    this.imageVersion = imageVersion;
  }


  /**
   * Output only. Extract from a docker image build log containing information about pypi modules conflicts.
   * @return pypiConflictBuildLogExtract
   */
  @javax.annotation.Nullable
  public String getPypiConflictBuildLogExtract() {
    return pypiConflictBuildLogExtract;
  }



  public CheckUpgradeResponse pypiDependencies(Map<String, String> pypiDependencies) {
    this.pypiDependencies = pypiDependencies;
    return this;
  }

  public CheckUpgradeResponse putPypiDependenciesItem(String key, String pypiDependenciesItem) {
    if (this.pypiDependencies == null) {
      this.pypiDependencies = new HashMap<>();
    }
    this.pypiDependencies.put(key, pypiDependenciesItem);
    return this;
  }

  /**
   * Pypi dependencies specified in the environment configuration, at the time when the build was triggered.
   * @return pypiDependencies
   */
  @javax.annotation.Nullable
  public Map<String, String> getPypiDependencies() {
    return pypiDependencies;
  }

  public void setPypiDependencies(Map<String, String> pypiDependencies) {
    this.pypiDependencies = pypiDependencies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckUpgradeResponse checkUpgradeResponse = (CheckUpgradeResponse) o;
    return Objects.equals(this.buildLogUri, checkUpgradeResponse.buildLogUri) &&
        Objects.equals(this.containsPypiModulesConflict, checkUpgradeResponse.containsPypiModulesConflict) &&
        Objects.equals(this.imageVersion, checkUpgradeResponse.imageVersion) &&
        Objects.equals(this.pypiConflictBuildLogExtract, checkUpgradeResponse.pypiConflictBuildLogExtract) &&
        Objects.equals(this.pypiDependencies, checkUpgradeResponse.pypiDependencies);
  }

  @Override
  public int hashCode() {
    return Objects.hash(buildLogUri, containsPypiModulesConflict, imageVersion, pypiConflictBuildLogExtract, pypiDependencies);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckUpgradeResponse {\n");
    sb.append("    buildLogUri: ").append(toIndentedString(buildLogUri)).append("\n");
    sb.append("    containsPypiModulesConflict: ").append(toIndentedString(containsPypiModulesConflict)).append("\n");
    sb.append("    imageVersion: ").append(toIndentedString(imageVersion)).append("\n");
    sb.append("    pypiConflictBuildLogExtract: ").append(toIndentedString(pypiConflictBuildLogExtract)).append("\n");
    sb.append("    pypiDependencies: ").append(toIndentedString(pypiDependencies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("buildLogUri");
    openapiFields.add("containsPypiModulesConflict");
    openapiFields.add("imageVersion");
    openapiFields.add("pypiConflictBuildLogExtract");
    openapiFields.add("pypiDependencies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckUpgradeResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CheckUpgradeResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckUpgradeResponse is not found in the empty JSON string", CheckUpgradeResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckUpgradeResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckUpgradeResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("buildLogUri") != null && !jsonObj.get("buildLogUri").isJsonNull()) && !jsonObj.get("buildLogUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buildLogUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buildLogUri").toString()));
      }
      if ((jsonObj.get("containsPypiModulesConflict") != null && !jsonObj.get("containsPypiModulesConflict").isJsonNull()) && !jsonObj.get("containsPypiModulesConflict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `containsPypiModulesConflict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("containsPypiModulesConflict").toString()));
      }
      // validate the optional field `containsPypiModulesConflict`
      if (jsonObj.get("containsPypiModulesConflict") != null && !jsonObj.get("containsPypiModulesConflict").isJsonNull()) {
        ContainsPypiModulesConflictEnum.validateJsonElement(jsonObj.get("containsPypiModulesConflict"));
      }
      if ((jsonObj.get("imageVersion") != null && !jsonObj.get("imageVersion").isJsonNull()) && !jsonObj.get("imageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageVersion").toString()));
      }
      if ((jsonObj.get("pypiConflictBuildLogExtract") != null && !jsonObj.get("pypiConflictBuildLogExtract").isJsonNull()) && !jsonObj.get("pypiConflictBuildLogExtract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pypiConflictBuildLogExtract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pypiConflictBuildLogExtract").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckUpgradeResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckUpgradeResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckUpgradeResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckUpgradeResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckUpgradeResponse>() {
           @Override
           public void write(JsonWriter out, CheckUpgradeResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckUpgradeResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckUpgradeResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckUpgradeResponse
   * @throws IOException if the JSON string is invalid with respect to CheckUpgradeResponse
   */
  public static CheckUpgradeResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckUpgradeResponse.class);
  }

  /**
   * Convert an instance of CheckUpgradeResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

