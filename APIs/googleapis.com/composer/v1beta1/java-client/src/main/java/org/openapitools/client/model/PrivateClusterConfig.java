/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Configuration options for the private GKE cluster in a Cloud Composer environment.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:37:41.703333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PrivateClusterConfig {
  public static final String SERIALIZED_NAME_ENABLE_PRIVATE_ENDPOINT = "enablePrivateEndpoint";
  @SerializedName(SERIALIZED_NAME_ENABLE_PRIVATE_ENDPOINT)
  private Boolean enablePrivateEndpoint;

  public static final String SERIALIZED_NAME_MASTER_IPV4_CIDR_BLOCK = "masterIpv4CidrBlock";
  @SerializedName(SERIALIZED_NAME_MASTER_IPV4_CIDR_BLOCK)
  private String masterIpv4CidrBlock;

  public static final String SERIALIZED_NAME_MASTER_IPV4_RESERVED_RANGE = "masterIpv4ReservedRange";
  @SerializedName(SERIALIZED_NAME_MASTER_IPV4_RESERVED_RANGE)
  private String masterIpv4ReservedRange;

  public PrivateClusterConfig() {
  }

  public PrivateClusterConfig(
     String masterIpv4ReservedRange
  ) {
    this();
    this.masterIpv4ReservedRange = masterIpv4ReservedRange;
  }

  public PrivateClusterConfig enablePrivateEndpoint(Boolean enablePrivateEndpoint) {
    this.enablePrivateEndpoint = enablePrivateEndpoint;
    return this;
  }

  /**
   * Optional. If &#x60;true&#x60;, access to the public endpoint of the GKE cluster is denied.
   * @return enablePrivateEndpoint
   */
  @javax.annotation.Nullable
  public Boolean getEnablePrivateEndpoint() {
    return enablePrivateEndpoint;
  }

  public void setEnablePrivateEndpoint(Boolean enablePrivateEndpoint) {
    this.enablePrivateEndpoint = enablePrivateEndpoint;
  }


  public PrivateClusterConfig masterIpv4CidrBlock(String masterIpv4CidrBlock) {
    this.masterIpv4CidrBlock = masterIpv4CidrBlock;
    return this;
  }

  /**
   * Optional. The CIDR block from which IPv4 range for GKE master will be reserved. If left blank, the default value of &#39;172.16.0.0/23&#39; is used.
   * @return masterIpv4CidrBlock
   */
  @javax.annotation.Nullable
  public String getMasterIpv4CidrBlock() {
    return masterIpv4CidrBlock;
  }

  public void setMasterIpv4CidrBlock(String masterIpv4CidrBlock) {
    this.masterIpv4CidrBlock = masterIpv4CidrBlock;
  }


  /**
   * Output only. The IP range in CIDR notation to use for the hosted master network. This range is used for assigning internal IP addresses to the cluster master or set of masters and to the internal load balancer virtual IP. This range must not overlap with any other ranges in use within the cluster&#39;s network.
   * @return masterIpv4ReservedRange
   */
  @javax.annotation.Nullable
  public String getMasterIpv4ReservedRange() {
    return masterIpv4ReservedRange;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PrivateClusterConfig privateClusterConfig = (PrivateClusterConfig) o;
    return Objects.equals(this.enablePrivateEndpoint, privateClusterConfig.enablePrivateEndpoint) &&
        Objects.equals(this.masterIpv4CidrBlock, privateClusterConfig.masterIpv4CidrBlock) &&
        Objects.equals(this.masterIpv4ReservedRange, privateClusterConfig.masterIpv4ReservedRange);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enablePrivateEndpoint, masterIpv4CidrBlock, masterIpv4ReservedRange);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PrivateClusterConfig {\n");
    sb.append("    enablePrivateEndpoint: ").append(toIndentedString(enablePrivateEndpoint)).append("\n");
    sb.append("    masterIpv4CidrBlock: ").append(toIndentedString(masterIpv4CidrBlock)).append("\n");
    sb.append("    masterIpv4ReservedRange: ").append(toIndentedString(masterIpv4ReservedRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enablePrivateEndpoint");
    openapiFields.add("masterIpv4CidrBlock");
    openapiFields.add("masterIpv4ReservedRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PrivateClusterConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PrivateClusterConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PrivateClusterConfig is not found in the empty JSON string", PrivateClusterConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PrivateClusterConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PrivateClusterConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("masterIpv4CidrBlock") != null && !jsonObj.get("masterIpv4CidrBlock").isJsonNull()) && !jsonObj.get("masterIpv4CidrBlock").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterIpv4CidrBlock` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterIpv4CidrBlock").toString()));
      }
      if ((jsonObj.get("masterIpv4ReservedRange") != null && !jsonObj.get("masterIpv4ReservedRange").isJsonNull()) && !jsonObj.get("masterIpv4ReservedRange").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `masterIpv4ReservedRange` to be a primitive type in the JSON string but got `%s`", jsonObj.get("masterIpv4ReservedRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PrivateClusterConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PrivateClusterConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PrivateClusterConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PrivateClusterConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<PrivateClusterConfig>() {
           @Override
           public void write(JsonWriter out, PrivateClusterConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PrivateClusterConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PrivateClusterConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PrivateClusterConfig
   * @throws IOException if the JSON string is invalid with respect to PrivateClusterConfig
   */
  public static PrivateClusterConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PrivateClusterConfig.class);
  }

  /**
   * Convert an instance of PrivateClusterConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

