/*
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckUpgradeRequest;
import org.openapitools.client.model.Environment;
import org.openapitools.client.model.ExecuteAirflowCommandRequest;
import org.openapitools.client.model.ExecuteAirflowCommandResponse;
import org.openapitools.client.model.FetchDatabasePropertiesResponse;
import org.openapitools.client.model.ListEnvironmentsResponse;
import org.openapitools.client.model.ListImageVersionsResponse;
import org.openapitools.client.model.ListOperationsResponse;
import org.openapitools.client.model.ListUserWorkloadsConfigMapsResponse;
import org.openapitools.client.model.ListUserWorkloadsSecretsResponse;
import org.openapitools.client.model.ListWorkloadsResponse;
import org.openapitools.client.model.LoadSnapshotRequest;
import org.openapitools.client.model.Operation;
import org.openapitools.client.model.PollAirflowCommandRequest;
import org.openapitools.client.model.PollAirflowCommandResponse;
import org.openapitools.client.model.SaveSnapshotRequest;
import org.openapitools.client.model.StopAirflowCommandRequest;
import org.openapitools.client.model.StopAirflowCommandResponse;
import org.openapitools.client.model.UserWorkloadsConfigMap;
import org.openapitools.client.model.UserWorkloadsSecret;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectsApi
 */
@Disabled
public class ProjectsApiTest {

    private final ProjectsApi api = new ProjectsApi();

    /**
     * Check if an upgrade operation on the environment will succeed. In case of problems detailed info can be found in the returned Operation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsCheckUpgradeTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        CheckUpgradeRequest checkUpgradeRequest = null;
        Operation response = api.composerProjectsLocationsEnvironmentsCheckUpgrade(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, checkUpgradeRequest);
        // TODO: test validations
    }

    /**
     * Create a new environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Environment environment = null;
        Operation response = api.composerProjectsLocationsEnvironmentsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, environment);
        // TODO: test validations
    }

    /**
     * Triggers database failover (only for highly resilient environments).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsDatabaseFailoverTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.composerProjectsLocationsEnvironmentsDatabaseFailover(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Executes Airflow CLI command.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsExecuteAirflowCommandTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        ExecuteAirflowCommandRequest executeAirflowCommandRequest = null;
        ExecuteAirflowCommandResponse response = api.composerProjectsLocationsEnvironmentsExecuteAirflowCommand(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, executeAirflowCommandRequest);
        // TODO: test validations
    }

    /**
     * Fetches database properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsFetchDatabasePropertiesTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        FetchDatabasePropertiesResponse response = api.composerProjectsLocationsEnvironmentsFetchDatabaseProperties(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * List environments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListEnvironmentsResponse response = api.composerProjectsLocationsEnvironmentsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Loads a snapshot of a Cloud Composer environment. As a result of this operation, a snapshot of environment&#39;s specified in LoadSnapshotRequest is loaded into the environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsLoadSnapshotTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        LoadSnapshotRequest loadSnapshotRequest = null;
        Operation response = api.composerProjectsLocationsEnvironmentsLoadSnapshot(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, loadSnapshotRequest);
        // TODO: test validations
    }

    /**
     * Update an environment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsPatchTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String updateMask = null;
        Environment environment = null;
        Operation response = api.composerProjectsLocationsEnvironmentsPatch(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, updateMask, environment);
        // TODO: test validations
    }

    /**
     * Polls Airflow CLI command execution and fetches logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsPollAirflowCommandTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        PollAirflowCommandRequest pollAirflowCommandRequest = null;
        PollAirflowCommandResponse response = api.composerProjectsLocationsEnvironmentsPollAirflowCommand(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pollAirflowCommandRequest);
        // TODO: test validations
    }

    /**
     * Restart Airflow web server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsRestartWebServerTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object body = null;
        Operation response = api.composerProjectsLocationsEnvironmentsRestartWebServer(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, body);
        // TODO: test validations
    }

    /**
     * Creates a snapshots of a Cloud Composer environment. As a result of this operation, snapshot of environment&#39;s state is stored in a location specified in the SaveSnapshotRequest.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsSaveSnapshotTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        SaveSnapshotRequest saveSnapshotRequest = null;
        Operation response = api.composerProjectsLocationsEnvironmentsSaveSnapshot(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, saveSnapshotRequest);
        // TODO: test validations
    }

    /**
     * Stops Airflow CLI command execution.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsStopAirflowCommandTest() throws ApiException {
        String environment = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        StopAirflowCommandRequest stopAirflowCommandRequest = null;
        StopAirflowCommandResponse response = api.composerProjectsLocationsEnvironmentsStopAirflowCommand(environment, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, stopAirflowCommandRequest);
        // TODO: test validations
    }

    /**
     * Creates a user workloads ConfigMap. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsUserWorkloadsConfigMapsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserWorkloadsConfigMap userWorkloadsConfigMap = null;
        UserWorkloadsConfigMap response = api.composerProjectsLocationsEnvironmentsUserWorkloadsConfigMapsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userWorkloadsConfigMap);
        // TODO: test validations
    }

    /**
     * Lists user workloads ConfigMaps. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsUserWorkloadsConfigMapsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListUserWorkloadsConfigMapsResponse response = api.composerProjectsLocationsEnvironmentsUserWorkloadsConfigMapsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Creates a user workloads Secret. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsUserWorkloadsSecretsCreateTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserWorkloadsSecret userWorkloadsSecret = null;
        UserWorkloadsSecret response = api.composerProjectsLocationsEnvironmentsUserWorkloadsSecretsCreate(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userWorkloadsSecret);
        // TODO: test validations
    }

    /**
     * Lists user workloads Secrets. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsUserWorkloadsSecretsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Integer pageSize = null;
        String pageToken = null;
        ListUserWorkloadsSecretsResponse response = api.composerProjectsLocationsEnvironmentsUserWorkloadsSecretsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Updates a user workloads Secret. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsUserWorkloadsSecretsUpdateTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        UserWorkloadsSecret userWorkloadsSecret = null;
        UserWorkloadsSecret response = api.composerProjectsLocationsEnvironmentsUserWorkloadsSecretsUpdate(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, userWorkloadsSecret);
        // TODO: test validations
    }

    /**
     * Lists workloads in a Cloud Composer environment. Workload is a unit that runs a single Composer component. This method is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsEnvironmentsWorkloadsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListWorkloadsResponse response = api.composerProjectsLocationsEnvironmentsWorkloadsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * List ImageVersions for provided location.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsImageVersionsListTest() throws ApiException {
        String parent = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Boolean includePastReleases = null;
        Integer pageSize = null;
        String pageToken = null;
        ListImageVersionsResponse response = api.composerProjectsLocationsImageVersionsList(parent, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, includePastReleases, pageSize, pageToken);
        // TODO: test validations
    }

    /**
     * Deletes a long-running operation. This method indicates that the client is no longer interested in the operation result. It does not cancel the operation. If the server doesn&#39;t support this method, it returns &#x60;google.rpc.Code.UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsOperationsDeleteTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Object response = api.composerProjectsLocationsOperationsDelete(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Gets the latest state of a long-running operation. Clients can use this method to poll the operation result at intervals as recommended by the API service.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsOperationsGetTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        Operation response = api.composerProjectsLocationsOperationsGet(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType);
        // TODO: test validations
    }

    /**
     * Lists operations that match the specified filter in the request. If the server doesn&#39;t support this method, it returns &#x60;UNIMPLEMENTED&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void composerProjectsLocationsOperationsListTest() throws ApiException {
        String name = null;
        String $xgafv = null;
        String accessToken = null;
        String alt = null;
        String paramCallback = null;
        String fields = null;
        String key = null;
        String oauthToken = null;
        Boolean prettyPrint = null;
        String quotaUser = null;
        String uploadProtocol = null;
        String uploadType = null;
        String filter = null;
        Integer pageSize = null;
        String pageToken = null;
        ListOperationsResponse response = api.composerProjectsLocationsOperationsList(name, $xgafv, accessToken, alt, paramCallback, fields, key, oauthToken, prettyPrint, quotaUser, uploadProtocol, uploadType, filter, pageSize, pageToken);
        // TODO: test validations
    }

}
