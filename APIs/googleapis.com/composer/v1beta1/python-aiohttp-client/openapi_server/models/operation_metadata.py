# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create_time: str=None, end_time: str=None, operation_type: str=None, resource: str=None, resource_uuid: str=None, state: str=None):
        """OperationMetadata - a model defined in OpenAPI

        :param create_time: The create_time of this OperationMetadata.
        :param end_time: The end_time of this OperationMetadata.
        :param operation_type: The operation_type of this OperationMetadata.
        :param resource: The resource of this OperationMetadata.
        :param resource_uuid: The resource_uuid of this OperationMetadata.
        :param state: The state of this OperationMetadata.
        """
        self.openapi_types = {
            'create_time': str,
            'end_time': str,
            'operation_type': str,
            'resource': str,
            'resource_uuid': str,
            'state': str
        }

        self.attribute_map = {
            'create_time': 'createTime',
            'end_time': 'endTime',
            'operation_type': 'operationType',
            'resource': 'resource',
            'resource_uuid': 'resourceUuid',
            'state': 'state'
        }

        self._create_time = create_time
        self._end_time = end_time
        self._operation_type = operation_type
        self._resource = resource
        self._resource_uuid = resource_uuid
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationMetadata of this OperationMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create_time(self):
        """Gets the create_time of this OperationMetadata.

        Output only. The time the operation was submitted to the server.

        :return: The create_time of this OperationMetadata.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this OperationMetadata.

        Output only. The time the operation was submitted to the server.

        :param create_time: The create_time of this OperationMetadata.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def end_time(self):
        """Gets the end_time of this OperationMetadata.

        Output only. The time when the operation terminated, regardless of its success. This field is unset if the operation is still ongoing.

        :return: The end_time of this OperationMetadata.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this OperationMetadata.

        Output only. The time when the operation terminated, regardless of its success. This field is unset if the operation is still ongoing.

        :param end_time: The end_time of this OperationMetadata.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def operation_type(self):
        """Gets the operation_type of this OperationMetadata.

        Output only. The type of operation being performed.

        :return: The operation_type of this OperationMetadata.
        :rtype: str
        """
        return self._operation_type

    @operation_type.setter
    def operation_type(self, operation_type):
        """Sets the operation_type of this OperationMetadata.

        Output only. The type of operation being performed.

        :param operation_type: The operation_type of this OperationMetadata.
        :type operation_type: str
        """
        allowed_values = ["TYPE_UNSPECIFIED", "CREATE", "DELETE", "UPDATE", "CHECK", "SAVE_SNAPSHOT", "LOAD_SNAPSHOT", "DATABASE_FAILOVER"]  # noqa: E501
        if operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `operation_type` ({0}), must be one of {1}"
                .format(operation_type, allowed_values)
            )

        self._operation_type = operation_type

    @property
    def resource(self):
        """Gets the resource of this OperationMetadata.

        Output only. The resource being operated on, as a [relative resource name]( /apis/design/resource_names#relative_resource_name).

        :return: The resource of this OperationMetadata.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this OperationMetadata.

        Output only. The resource being operated on, as a [relative resource name]( /apis/design/resource_names#relative_resource_name).

        :param resource: The resource of this OperationMetadata.
        :type resource: str
        """

        self._resource = resource

    @property
    def resource_uuid(self):
        """Gets the resource_uuid of this OperationMetadata.

        Output only. The UUID of the resource being operated on.

        :return: The resource_uuid of this OperationMetadata.
        :rtype: str
        """
        return self._resource_uuid

    @resource_uuid.setter
    def resource_uuid(self, resource_uuid):
        """Sets the resource_uuid of this OperationMetadata.

        Output only. The UUID of the resource being operated on.

        :param resource_uuid: The resource_uuid of this OperationMetadata.
        :type resource_uuid: str
        """

        self._resource_uuid = resource_uuid

    @property
    def state(self):
        """Gets the state of this OperationMetadata.

        Output only. The current operation state.

        :return: The state of this OperationMetadata.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this OperationMetadata.

        Output only. The current operation state.

        :param state: The state of this OperationMetadata.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "PENDING", "RUNNING", "SUCCESSFUL", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
