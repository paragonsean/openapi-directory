# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CheckUpgradeResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, build_log_uri: str=None, contains_pypi_modules_conflict: str=None, image_version: str=None, pypi_conflict_build_log_extract: str=None, pypi_dependencies: Dict[str, str]=None):
        """CheckUpgradeResponse - a model defined in OpenAPI

        :param build_log_uri: The build_log_uri of this CheckUpgradeResponse.
        :param contains_pypi_modules_conflict: The contains_pypi_modules_conflict of this CheckUpgradeResponse.
        :param image_version: The image_version of this CheckUpgradeResponse.
        :param pypi_conflict_build_log_extract: The pypi_conflict_build_log_extract of this CheckUpgradeResponse.
        :param pypi_dependencies: The pypi_dependencies of this CheckUpgradeResponse.
        """
        self.openapi_types = {
            'build_log_uri': str,
            'contains_pypi_modules_conflict': str,
            'image_version': str,
            'pypi_conflict_build_log_extract': str,
            'pypi_dependencies': Dict[str, str]
        }

        self.attribute_map = {
            'build_log_uri': 'buildLogUri',
            'contains_pypi_modules_conflict': 'containsPypiModulesConflict',
            'image_version': 'imageVersion',
            'pypi_conflict_build_log_extract': 'pypiConflictBuildLogExtract',
            'pypi_dependencies': 'pypiDependencies'
        }

        self._build_log_uri = build_log_uri
        self._contains_pypi_modules_conflict = contains_pypi_modules_conflict
        self._image_version = image_version
        self._pypi_conflict_build_log_extract = pypi_conflict_build_log_extract
        self._pypi_dependencies = pypi_dependencies

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CheckUpgradeResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CheckUpgradeResponse of this CheckUpgradeResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def build_log_uri(self):
        """Gets the build_log_uri of this CheckUpgradeResponse.

        Output only. Url for a docker build log of an upgraded image.

        :return: The build_log_uri of this CheckUpgradeResponse.
        :rtype: str
        """
        return self._build_log_uri

    @build_log_uri.setter
    def build_log_uri(self, build_log_uri):
        """Sets the build_log_uri of this CheckUpgradeResponse.

        Output only. Url for a docker build log of an upgraded image.

        :param build_log_uri: The build_log_uri of this CheckUpgradeResponse.
        :type build_log_uri: str
        """

        self._build_log_uri = build_log_uri

    @property
    def contains_pypi_modules_conflict(self):
        """Gets the contains_pypi_modules_conflict of this CheckUpgradeResponse.

        Output only. Whether build has succeeded or failed on modules conflicts.

        :return: The contains_pypi_modules_conflict of this CheckUpgradeResponse.
        :rtype: str
        """
        return self._contains_pypi_modules_conflict

    @contains_pypi_modules_conflict.setter
    def contains_pypi_modules_conflict(self, contains_pypi_modules_conflict):
        """Sets the contains_pypi_modules_conflict of this CheckUpgradeResponse.

        Output only. Whether build has succeeded or failed on modules conflicts.

        :param contains_pypi_modules_conflict: The contains_pypi_modules_conflict of this CheckUpgradeResponse.
        :type contains_pypi_modules_conflict: str
        """
        allowed_values = ["CONFLICT_RESULT_UNSPECIFIED", "CONFLICT", "NO_CONFLICT"]  # noqa: E501
        if contains_pypi_modules_conflict not in allowed_values:
            raise ValueError(
                "Invalid value for `contains_pypi_modules_conflict` ({0}), must be one of {1}"
                .format(contains_pypi_modules_conflict, allowed_values)
            )

        self._contains_pypi_modules_conflict = contains_pypi_modules_conflict

    @property
    def image_version(self):
        """Gets the image_version of this CheckUpgradeResponse.

        Composer image for which the build was happening.

        :return: The image_version of this CheckUpgradeResponse.
        :rtype: str
        """
        return self._image_version

    @image_version.setter
    def image_version(self, image_version):
        """Sets the image_version of this CheckUpgradeResponse.

        Composer image for which the build was happening.

        :param image_version: The image_version of this CheckUpgradeResponse.
        :type image_version: str
        """

        self._image_version = image_version

    @property
    def pypi_conflict_build_log_extract(self):
        """Gets the pypi_conflict_build_log_extract of this CheckUpgradeResponse.

        Output only. Extract from a docker image build log containing information about pypi modules conflicts.

        :return: The pypi_conflict_build_log_extract of this CheckUpgradeResponse.
        :rtype: str
        """
        return self._pypi_conflict_build_log_extract

    @pypi_conflict_build_log_extract.setter
    def pypi_conflict_build_log_extract(self, pypi_conflict_build_log_extract):
        """Sets the pypi_conflict_build_log_extract of this CheckUpgradeResponse.

        Output only. Extract from a docker image build log containing information about pypi modules conflicts.

        :param pypi_conflict_build_log_extract: The pypi_conflict_build_log_extract of this CheckUpgradeResponse.
        :type pypi_conflict_build_log_extract: str
        """

        self._pypi_conflict_build_log_extract = pypi_conflict_build_log_extract

    @property
    def pypi_dependencies(self):
        """Gets the pypi_dependencies of this CheckUpgradeResponse.

        Pypi dependencies specified in the environment configuration, at the time when the build was triggered.

        :return: The pypi_dependencies of this CheckUpgradeResponse.
        :rtype: Dict[str, str]
        """
        return self._pypi_dependencies

    @pypi_dependencies.setter
    def pypi_dependencies(self, pypi_dependencies):
        """Sets the pypi_dependencies of this CheckUpgradeResponse.

        Pypi dependencies specified in the environment configuration, at the time when the build was triggered.

        :param pypi_dependencies: The pypi_dependencies of this CheckUpgradeResponse.
        :type pypi_dependencies: Dict[str, str]
        """

        self._pypi_dependencies = pypi_dependencies
