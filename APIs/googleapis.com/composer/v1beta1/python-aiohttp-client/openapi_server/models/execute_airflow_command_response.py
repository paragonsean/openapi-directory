# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteAirflowCommandResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: str=None, execution_id: str=None, pod: str=None, pod_namespace: str=None):
        """ExecuteAirflowCommandResponse - a model defined in OpenAPI

        :param error: The error of this ExecuteAirflowCommandResponse.
        :param execution_id: The execution_id of this ExecuteAirflowCommandResponse.
        :param pod: The pod of this ExecuteAirflowCommandResponse.
        :param pod_namespace: The pod_namespace of this ExecuteAirflowCommandResponse.
        """
        self.openapi_types = {
            'error': str,
            'execution_id': str,
            'pod': str,
            'pod_namespace': str
        }

        self.attribute_map = {
            'error': 'error',
            'execution_id': 'executionId',
            'pod': 'pod',
            'pod_namespace': 'podNamespace'
        }

        self._error = error
        self._execution_id = execution_id
        self._pod = pod
        self._pod_namespace = pod_namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteAirflowCommandResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteAirflowCommandResponse of this ExecuteAirflowCommandResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this ExecuteAirflowCommandResponse.

        Error message. Empty if there was no error.

        :return: The error of this ExecuteAirflowCommandResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ExecuteAirflowCommandResponse.

        Error message. Empty if there was no error.

        :param error: The error of this ExecuteAirflowCommandResponse.
        :type error: str
        """

        self._error = error

    @property
    def execution_id(self):
        """Gets the execution_id of this ExecuteAirflowCommandResponse.

        The unique ID of the command execution for polling.

        :return: The execution_id of this ExecuteAirflowCommandResponse.
        :rtype: str
        """
        return self._execution_id

    @execution_id.setter
    def execution_id(self, execution_id):
        """Sets the execution_id of this ExecuteAirflowCommandResponse.

        The unique ID of the command execution for polling.

        :param execution_id: The execution_id of this ExecuteAirflowCommandResponse.
        :type execution_id: str
        """

        self._execution_id = execution_id

    @property
    def pod(self):
        """Gets the pod of this ExecuteAirflowCommandResponse.

        The name of the pod where the command is executed.

        :return: The pod of this ExecuteAirflowCommandResponse.
        :rtype: str
        """
        return self._pod

    @pod.setter
    def pod(self, pod):
        """Sets the pod of this ExecuteAirflowCommandResponse.

        The name of the pod where the command is executed.

        :param pod: The pod of this ExecuteAirflowCommandResponse.
        :type pod: str
        """

        self._pod = pod

    @property
    def pod_namespace(self):
        """Gets the pod_namespace of this ExecuteAirflowCommandResponse.

        The namespace of the pod where the command is executed.

        :return: The pod_namespace of this ExecuteAirflowCommandResponse.
        :rtype: str
        """
        return self._pod_namespace

    @pod_namespace.setter
    def pod_namespace(self, pod_namespace):
        """Sets the pod_namespace of this ExecuteAirflowCommandResponse.

        The namespace of the pod where the command is executed.

        :param pod_namespace: The pod_namespace of this ExecuteAirflowCommandResponse.
        :type pod_namespace: str
        """

        self._pod_namespace = pod_namespace
