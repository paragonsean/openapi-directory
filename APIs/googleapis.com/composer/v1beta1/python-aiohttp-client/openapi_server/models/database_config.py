# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DatabaseConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, machine_type: str=None, zone: str=None):
        """DatabaseConfig - a model defined in OpenAPI

        :param machine_type: The machine_type of this DatabaseConfig.
        :param zone: The zone of this DatabaseConfig.
        """
        self.openapi_types = {
            'machine_type': str,
            'zone': str
        }

        self.attribute_map = {
            'machine_type': 'machineType',
            'zone': 'zone'
        }

        self._machine_type = machine_type
        self._zone = zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DatabaseConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DatabaseConfig of this DatabaseConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def machine_type(self):
        """Gets the machine_type of this DatabaseConfig.

        Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The machine_type of this DatabaseConfig.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this DatabaseConfig.

        Optional. Cloud SQL machine type used by Airflow database. It has to be one of: db-n1-standard-2, db-n1-standard-4, db-n1-standard-8 or db-n1-standard-16. If not specified, db-n1-standard-2 will be used. Supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param machine_type: The machine_type of this DatabaseConfig.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def zone(self):
        """Gets the zone of this DatabaseConfig.

        Optional. The Compute Engine zone where the Airflow database is created. If zone is provided, it must be in the region selected for the environment. If zone is not provided, a zone is automatically selected. The zone can only be set during environment creation. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.*.

        :return: The zone of this DatabaseConfig.
        :rtype: str
        """
        return self._zone

    @zone.setter
    def zone(self, zone):
        """Sets the zone of this DatabaseConfig.

        Optional. The Compute Engine zone where the Airflow database is created. If zone is provided, it must be in the region selected for the environment. If zone is not provided, a zone is automatically selected. The zone can only be set during environment creation. Supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.*.

        :param zone: The zone of this DatabaseConfig.
        :type zone: str
        """

        self._zone = zone
