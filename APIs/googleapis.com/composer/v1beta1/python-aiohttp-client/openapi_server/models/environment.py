# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.environment_config import EnvironmentConfig
from openapi_server.models.storage_config import StorageConfig
from openapi_server import util


class Environment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config: EnvironmentConfig=None, create_time: str=None, labels: Dict[str, str]=None, name: str=None, satisfies_pzs: bool=None, state: str=None, storage_config: StorageConfig=None, update_time: str=None, uuid: str=None):
        """Environment - a model defined in OpenAPI

        :param config: The config of this Environment.
        :param create_time: The create_time of this Environment.
        :param labels: The labels of this Environment.
        :param name: The name of this Environment.
        :param satisfies_pzs: The satisfies_pzs of this Environment.
        :param state: The state of this Environment.
        :param storage_config: The storage_config of this Environment.
        :param update_time: The update_time of this Environment.
        :param uuid: The uuid of this Environment.
        """
        self.openapi_types = {
            'config': EnvironmentConfig,
            'create_time': str,
            'labels': Dict[str, str],
            'name': str,
            'satisfies_pzs': bool,
            'state': str,
            'storage_config': StorageConfig,
            'update_time': str,
            'uuid': str
        }

        self.attribute_map = {
            'config': 'config',
            'create_time': 'createTime',
            'labels': 'labels',
            'name': 'name',
            'satisfies_pzs': 'satisfiesPzs',
            'state': 'state',
            'storage_config': 'storageConfig',
            'update_time': 'updateTime',
            'uuid': 'uuid'
        }

        self._config = config
        self._create_time = create_time
        self._labels = labels
        self._name = name
        self._satisfies_pzs = satisfies_pzs
        self._state = state
        self._storage_config = storage_config
        self._update_time = update_time
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Environment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Environment of this Environment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self):
        """Gets the config of this Environment.


        :return: The config of this Environment.
        :rtype: EnvironmentConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """Sets the config of this Environment.


        :param config: The config of this Environment.
        :type config: EnvironmentConfig
        """

        self._config = config

    @property
    def create_time(self):
        """Gets the create_time of this Environment.

        Output only. The time at which this environment was created.

        :return: The create_time of this Environment.
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this Environment.

        Output only. The time at which this environment was created.

        :param create_time: The create_time of this Environment.
        :type create_time: str
        """

        self._create_time = create_time

    @property
    def labels(self):
        """Gets the labels of this Environment.

        Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.

        :return: The labels of this Environment.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this Environment.

        Optional. User-defined labels for this environment. The labels map can contain no more than 64 entries. Entries of the labels map are UTF8 strings that comply with the following restrictions: * Keys must conform to regexp: \\p{Ll}\\p{Lo}{0,62} * Values must conform to regexp: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63} * Both keys and values are additionally constrained to be <= 128 bytes in size.

        :param labels: The labels of this Environment.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self):
        """Gets the name of this Environment.

        The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Environment.

        The resource name of the environment, in the form: \"projects/{projectId}/locations/{locationId}/environments/{environmentId}\" EnvironmentId must start with a lowercase letter followed by up to 63 lowercase letters, numbers, or hyphens, and cannot end with a hyphen.

        :param name: The name of this Environment.
        :type name: str
        """

        self._name = name

    @property
    def satisfies_pzs(self):
        """Gets the satisfies_pzs of this Environment.

        Output only. Reserved for future use.

        :return: The satisfies_pzs of this Environment.
        :rtype: bool
        """
        return self._satisfies_pzs

    @satisfies_pzs.setter
    def satisfies_pzs(self, satisfies_pzs):
        """Sets the satisfies_pzs of this Environment.

        Output only. Reserved for future use.

        :param satisfies_pzs: The satisfies_pzs of this Environment.
        :type satisfies_pzs: bool
        """

        self._satisfies_pzs = satisfies_pzs

    @property
    def state(self):
        """Gets the state of this Environment.

        The current state of the environment.

        :return: The state of this Environment.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Environment.

        The current state of the environment.

        :param state: The state of this Environment.
        :type state: str
        """
        allowed_values = ["STATE_UNSPECIFIED", "CREATING", "RUNNING", "UPDATING", "DELETING", "ERROR"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def storage_config(self):
        """Gets the storage_config of this Environment.


        :return: The storage_config of this Environment.
        :rtype: StorageConfig
        """
        return self._storage_config

    @storage_config.setter
    def storage_config(self, storage_config):
        """Sets the storage_config of this Environment.


        :param storage_config: The storage_config of this Environment.
        :type storage_config: StorageConfig
        """

        self._storage_config = storage_config

    @property
    def update_time(self):
        """Gets the update_time of this Environment.

        Output only. The time at which this environment was last modified.

        :return: The update_time of this Environment.
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this Environment.

        Output only. The time at which this environment was last modified.

        :param update_time: The update_time of this Environment.
        :type update_time: str
        """

        self._update_time = update_time

    @property
    def uuid(self):
        """Gets the uuid of this Environment.

        Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created.

        :return: The uuid of this Environment.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Environment.

        Output only. The UUID (Universally Unique IDentifier) associated with this environment. This value is generated when the environment is created.

        :param uuid: The uuid of this Environment.
        :type uuid: str
        """

        self._uuid = uuid
