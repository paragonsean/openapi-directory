# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskLogsRetentionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_mode: str=None):
        """TaskLogsRetentionConfig - a model defined in OpenAPI

        :param storage_mode: The storage_mode of this TaskLogsRetentionConfig.
        """
        self.openapi_types = {
            'storage_mode': str
        }

        self.attribute_map = {
            'storage_mode': 'storageMode'
        }

        self._storage_mode = storage_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaskLogsRetentionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TaskLogsRetentionConfig of this TaskLogsRetentionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_mode(self):
        """Gets the storage_mode of this TaskLogsRetentionConfig.

        Optional. The mode of storage for Airflow workers task logs. For details, see go/composer-store-task-logs-in-cloud-logging-only-design-doc

        :return: The storage_mode of this TaskLogsRetentionConfig.
        :rtype: str
        """
        return self._storage_mode

    @storage_mode.setter
    def storage_mode(self, storage_mode):
        """Sets the storage_mode of this TaskLogsRetentionConfig.

        Optional. The mode of storage for Airflow workers task logs. For details, see go/composer-store-task-logs-in-cloud-logging-only-design-doc

        :param storage_mode: The storage_mode of this TaskLogsRetentionConfig.
        :type storage_mode: str
        """
        allowed_values = ["TASK_LOGS_STORAGE_MODE_UNSPECIFIED", "CLOUD_LOGGING_AND_CLOUD_STORAGE", "CLOUD_LOGGING_ONLY"]  # noqa: E501
        if storage_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_mode` ({0}), must be one of {1}"
                .format(storage_mode, allowed_values)
            )

        self._storage_mode = storage_mode
