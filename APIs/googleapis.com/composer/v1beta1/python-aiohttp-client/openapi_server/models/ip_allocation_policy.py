# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IPAllocationPolicy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cluster_ipv4_cidr_block: str=None, cluster_secondary_range_name: str=None, services_ipv4_cidr_block: str=None, services_secondary_range_name: str=None, use_ip_aliases: bool=None):
        """IPAllocationPolicy - a model defined in OpenAPI

        :param cluster_ipv4_cidr_block: The cluster_ipv4_cidr_block of this IPAllocationPolicy.
        :param cluster_secondary_range_name: The cluster_secondary_range_name of this IPAllocationPolicy.
        :param services_ipv4_cidr_block: The services_ipv4_cidr_block of this IPAllocationPolicy.
        :param services_secondary_range_name: The services_secondary_range_name of this IPAllocationPolicy.
        :param use_ip_aliases: The use_ip_aliases of this IPAllocationPolicy.
        """
        self.openapi_types = {
            'cluster_ipv4_cidr_block': str,
            'cluster_secondary_range_name': str,
            'services_ipv4_cidr_block': str,
            'services_secondary_range_name': str,
            'use_ip_aliases': bool
        }

        self.attribute_map = {
            'cluster_ipv4_cidr_block': 'clusterIpv4CidrBlock',
            'cluster_secondary_range_name': 'clusterSecondaryRangeName',
            'services_ipv4_cidr_block': 'servicesIpv4CidrBlock',
            'services_secondary_range_name': 'servicesSecondaryRangeName',
            'use_ip_aliases': 'useIpAliases'
        }

        self._cluster_ipv4_cidr_block = cluster_ipv4_cidr_block
        self._cluster_secondary_range_name = cluster_secondary_range_name
        self._services_ipv4_cidr_block = services_ipv4_cidr_block
        self._services_secondary_range_name = services_secondary_range_name
        self._use_ip_aliases = use_ip_aliases

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IPAllocationPolicy':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IPAllocationPolicy of this IPAllocationPolicy.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cluster_ipv4_cidr_block(self):
        """Gets the cluster_ipv4_cidr_block of this IPAllocationPolicy.

        Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.

        :return: The cluster_ipv4_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._cluster_ipv4_cidr_block

    @cluster_ipv4_cidr_block.setter
    def cluster_ipv4_cidr_block(self, cluster_ipv4_cidr_block):
        """Sets the cluster_ipv4_cidr_block of this IPAllocationPolicy.

        Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.

        :param cluster_ipv4_cidr_block: The cluster_ipv4_cidr_block of this IPAllocationPolicy.
        :type cluster_ipv4_cidr_block: str
        """

        self._cluster_ipv4_cidr_block = cluster_ipv4_cidr_block

    @property
    def cluster_secondary_range_name(self):
        """Gets the cluster_secondary_range_name of this IPAllocationPolicy.

        Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.

        :return: The cluster_secondary_range_name of this IPAllocationPolicy.
        :rtype: str
        """
        return self._cluster_secondary_range_name

    @cluster_secondary_range_name.setter
    def cluster_secondary_range_name(self, cluster_secondary_range_name):
        """Sets the cluster_secondary_range_name of this IPAllocationPolicy.

        Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.

        :param cluster_secondary_range_name: The cluster_secondary_range_name of this IPAllocationPolicy.
        :type cluster_secondary_range_name: str
        """

        self._cluster_secondary_range_name = cluster_secondary_range_name

    @property
    def services_ipv4_cidr_block(self):
        """Gets the services_ipv4_cidr_block of this IPAllocationPolicy.

        Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.

        :return: The services_ipv4_cidr_block of this IPAllocationPolicy.
        :rtype: str
        """
        return self._services_ipv4_cidr_block

    @services_ipv4_cidr_block.setter
    def services_ipv4_cidr_block(self, services_ipv4_cidr_block):
        """Sets the services_ipv4_cidr_block of this IPAllocationPolicy.

        Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.

        :param services_ipv4_cidr_block: The services_ipv4_cidr_block of this IPAllocationPolicy.
        :type services_ipv4_cidr_block: str
        """

        self._services_ipv4_cidr_block = services_ipv4_cidr_block

    @property
    def services_secondary_range_name(self):
        """Gets the services_secondary_range_name of this IPAllocationPolicy.

        Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.

        :return: The services_secondary_range_name of this IPAllocationPolicy.
        :rtype: str
        """
        return self._services_secondary_range_name

    @services_secondary_range_name.setter
    def services_secondary_range_name(self, services_secondary_range_name):
        """Sets the services_secondary_range_name of this IPAllocationPolicy.

        Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.

        :param services_secondary_range_name: The services_secondary_range_name of this IPAllocationPolicy.
        :type services_secondary_range_name: str
        """

        self._services_secondary_range_name = services_secondary_range_name

    @property
    def use_ip_aliases(self):
        """Gets the use_ip_aliases of this IPAllocationPolicy.

        Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.

        :return: The use_ip_aliases of this IPAllocationPolicy.
        :rtype: bool
        """
        return self._use_ip_aliases

    @use_ip_aliases.setter
    def use_ip_aliases(self, use_ip_aliases):
        """Sets the use_ip_aliases of this IPAllocationPolicy.

        Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.

        :param use_ip_aliases: The use_ip_aliases of this IPAllocationPolicy.
        :type use_ip_aliases: bool
        """

        self._use_ip_aliases = use_ip_aliases
