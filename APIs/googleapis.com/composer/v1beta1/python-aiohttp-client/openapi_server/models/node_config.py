# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_allocation_policy import IPAllocationPolicy
from openapi_server import util


class NodeConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, composer_internal_ipv4_cidr_block: str=None, composer_network_attachment: str=None, disk_size_gb: int=None, enable_ip_masq_agent: bool=None, ip_allocation_policy: IPAllocationPolicy=None, location: str=None, machine_type: str=None, max_pods_per_node: int=None, network: str=None, oauth_scopes: List[str]=None, service_account: str=None, subnetwork: str=None, tags: List[str]=None):
        """NodeConfig - a model defined in OpenAPI

        :param composer_internal_ipv4_cidr_block: The composer_internal_ipv4_cidr_block of this NodeConfig.
        :param composer_network_attachment: The composer_network_attachment of this NodeConfig.
        :param disk_size_gb: The disk_size_gb of this NodeConfig.
        :param enable_ip_masq_agent: The enable_ip_masq_agent of this NodeConfig.
        :param ip_allocation_policy: The ip_allocation_policy of this NodeConfig.
        :param location: The location of this NodeConfig.
        :param machine_type: The machine_type of this NodeConfig.
        :param max_pods_per_node: The max_pods_per_node of this NodeConfig.
        :param network: The network of this NodeConfig.
        :param oauth_scopes: The oauth_scopes of this NodeConfig.
        :param service_account: The service_account of this NodeConfig.
        :param subnetwork: The subnetwork of this NodeConfig.
        :param tags: The tags of this NodeConfig.
        """
        self.openapi_types = {
            'composer_internal_ipv4_cidr_block': str,
            'composer_network_attachment': str,
            'disk_size_gb': int,
            'enable_ip_masq_agent': bool,
            'ip_allocation_policy': IPAllocationPolicy,
            'location': str,
            'machine_type': str,
            'max_pods_per_node': int,
            'network': str,
            'oauth_scopes': List[str],
            'service_account': str,
            'subnetwork': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'composer_internal_ipv4_cidr_block': 'composerInternalIpv4CidrBlock',
            'composer_network_attachment': 'composerNetworkAttachment',
            'disk_size_gb': 'diskSizeGb',
            'enable_ip_masq_agent': 'enableIpMasqAgent',
            'ip_allocation_policy': 'ipAllocationPolicy',
            'location': 'location',
            'machine_type': 'machineType',
            'max_pods_per_node': 'maxPodsPerNode',
            'network': 'network',
            'oauth_scopes': 'oauthScopes',
            'service_account': 'serviceAccount',
            'subnetwork': 'subnetwork',
            'tags': 'tags'
        }

        self._composer_internal_ipv4_cidr_block = composer_internal_ipv4_cidr_block
        self._composer_network_attachment = composer_network_attachment
        self._disk_size_gb = disk_size_gb
        self._enable_ip_masq_agent = enable_ip_masq_agent
        self._ip_allocation_policy = ip_allocation_policy
        self._location = location
        self._machine_type = machine_type
        self._max_pods_per_node = max_pods_per_node
        self._network = network
        self._oauth_scopes = oauth_scopes
        self._service_account = service_account
        self._subnetwork = subnetwork
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NodeConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NodeConfig of this NodeConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def composer_internal_ipv4_cidr_block(self):
        """Gets the composer_internal_ipv4_cidr_block of this NodeConfig.

        Optional. The IP range in CIDR notation to use internally by Cloud Composer. IP addresses are not reserved - and the same range can be used by multiple Cloud Composer environments. In case of overlap, IPs from this range will not be accessible in the user's VPC network. Cannot be updated. If not specified, the default value of '100.64.128.0/20' is used. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :return: The composer_internal_ipv4_cidr_block of this NodeConfig.
        :rtype: str
        """
        return self._composer_internal_ipv4_cidr_block

    @composer_internal_ipv4_cidr_block.setter
    def composer_internal_ipv4_cidr_block(self, composer_internal_ipv4_cidr_block):
        """Sets the composer_internal_ipv4_cidr_block of this NodeConfig.

        Optional. The IP range in CIDR notation to use internally by Cloud Composer. IP addresses are not reserved - and the same range can be used by multiple Cloud Composer environments. In case of overlap, IPs from this range will not be accessible in the user's VPC network. Cannot be updated. If not specified, the default value of '100.64.128.0/20' is used. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :param composer_internal_ipv4_cidr_block: The composer_internal_ipv4_cidr_block of this NodeConfig.
        :type composer_internal_ipv4_cidr_block: str
        """

        self._composer_internal_ipv4_cidr_block = composer_internal_ipv4_cidr_block

    @property
    def composer_network_attachment(self):
        """Gets the composer_network_attachment of this NodeConfig.

        Optional. Network Attachment that Cloud Composer environment is connected to, which provides connectivity with a user's VPC network. Takes precedence over network and subnetwork settings. If not provided, but network and subnetwork are defined during environment, it will be provisioned. If not provided and network and subnetwork are also empty, then connectivity to user's VPC network is disabled. Network attachment must be provided in format projects/{project}/regions/{region}/networkAttachments/{networkAttachment}. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :return: The composer_network_attachment of this NodeConfig.
        :rtype: str
        """
        return self._composer_network_attachment

    @composer_network_attachment.setter
    def composer_network_attachment(self, composer_network_attachment):
        """Sets the composer_network_attachment of this NodeConfig.

        Optional. Network Attachment that Cloud Composer environment is connected to, which provides connectivity with a user's VPC network. Takes precedence over network and subnetwork settings. If not provided, but network and subnetwork are defined during environment, it will be provisioned. If not provided and network and subnetwork are also empty, then connectivity to user's VPC network is disabled. Network attachment must be provided in format projects/{project}/regions/{region}/networkAttachments/{networkAttachment}. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :param composer_network_attachment: The composer_network_attachment of this NodeConfig.
        :type composer_network_attachment: str
        """

        self._composer_network_attachment = composer_network_attachment

    @property
    def disk_size_gb(self):
        """Gets the disk_size_gb of this NodeConfig.

        Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The disk_size_gb of this NodeConfig.
        :rtype: int
        """
        return self._disk_size_gb

    @disk_size_gb.setter
    def disk_size_gb(self, disk_size_gb):
        """Sets the disk_size_gb of this NodeConfig.

        Optional. The disk size in GB used for node VMs. Minimum size is 30GB. If unspecified, defaults to 100GB. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param disk_size_gb: The disk_size_gb of this NodeConfig.
        :type disk_size_gb: int
        """

        self._disk_size_gb = disk_size_gb

    @property
    def enable_ip_masq_agent(self):
        """Gets the enable_ip_masq_agent of this NodeConfig.

        Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent

        :return: The enable_ip_masq_agent of this NodeConfig.
        :rtype: bool
        """
        return self._enable_ip_masq_agent

    @enable_ip_masq_agent.setter
    def enable_ip_masq_agent(self, enable_ip_masq_agent):
        """Sets the enable_ip_masq_agent of this NodeConfig.

        Optional. Deploys 'ip-masq-agent' daemon set in the GKE cluster and defines nonMasqueradeCIDRs equals to pod IP range so IP masquerading is used for all destination addresses, except between pods traffic. See: https://cloud.google.com/kubernetes-engine/docs/how-to/ip-masquerade-agent

        :param enable_ip_masq_agent: The enable_ip_masq_agent of this NodeConfig.
        :type enable_ip_masq_agent: bool
        """

        self._enable_ip_masq_agent = enable_ip_masq_agent

    @property
    def ip_allocation_policy(self):
        """Gets the ip_allocation_policy of this NodeConfig.


        :return: The ip_allocation_policy of this NodeConfig.
        :rtype: IPAllocationPolicy
        """
        return self._ip_allocation_policy

    @ip_allocation_policy.setter
    def ip_allocation_policy(self, ip_allocation_policy):
        """Sets the ip_allocation_policy of this NodeConfig.


        :param ip_allocation_policy: The ip_allocation_policy of this NodeConfig.
        :type ip_allocation_policy: IPAllocationPolicy
        """

        self._ip_allocation_policy = ip_allocation_policy

    @property
    def location(self):
        """Gets the location of this NodeConfig.

        Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}\". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The location of this NodeConfig.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this NodeConfig.

        Optional. The Compute Engine [zone](/compute/docs/regions-zones) in which to deploy the VMs used to run the Apache Airflow software, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}\". This `location` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.machineType` are specified, `nodeConfig.machineType` must belong to this `location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If only one field (`location` or `nodeConfig.machineType`) is specified, the location information from the specified field will be propagated to the unspecified field. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param location: The location of this NodeConfig.
        :type location: str
        """

        self._location = location

    @property
    def machine_type(self):
        """Gets the machine_type of this NodeConfig.

        Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}\". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to \"n1-standard-1\". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The machine_type of this NodeConfig.
        :rtype: str
        """
        return self._machine_type

    @machine_type.setter
    def machine_type(self, machine_type):
        """Sets the machine_type of this NodeConfig.

        Optional. The Compute Engine [machine type](/compute/docs/machine-types) used for cluster instances, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/zones/{zoneId}/machineTypes/{machineTypeId}\". The `machineType` must belong to the enclosing environment's project and location. If both this field and `nodeConfig.location` are specified, this `machineType` must belong to the `nodeConfig.location`; if both are unspecified, the service will pick a zone in the Compute Engine region corresponding to the Cloud Composer location, and propagate that choice to both fields. If exactly one of this field and `nodeConfig.location` is specified, the location information from the specified field will be propagated to the unspecified field. The `machineTypeId` must not be a [shared-core machine type](/compute/docs/machine-types#sharedcore). If this field is unspecified, the `machineTypeId` defaults to \"n1-standard-1\". This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param machine_type: The machine_type of this NodeConfig.
        :type machine_type: str
        """

        self._machine_type = machine_type

    @property
    def max_pods_per_node(self):
        """Gets the max_pods_per_node of this NodeConfig.

        Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default \"Maximum Pods per Node\" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The max_pods_per_node of this NodeConfig.
        :rtype: int
        """
        return self._max_pods_per_node

    @max_pods_per_node.setter
    def max_pods_per_node(self, max_pods_per_node):
        """Sets the max_pods_per_node of this NodeConfig.

        Optional. The maximum number of pods per node in the Cloud Composer GKE cluster. The value must be between 8 and 110 and it can be set only if the environment is VPC-native. The default value is 32. Values of this field will be propagated both to the `default-pool` node pool of the newly created GKE cluster, and to the default \"Maximum Pods per Node\" value which is used for newly created node pools if their value is not explicitly set during node pool creation. For more information, see [Optimizing IP address allocation] (https://cloud.google.com/kubernetes-engine/docs/how-to/flexible-pod-cidr). Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param max_pods_per_node: The max_pods_per_node of this NodeConfig.
        :type max_pods_per_node: int
        """

        self._max_pods_per_node = max_pods_per_node

    @property
    def network(self):
        """Gets the network of this NodeConfig.

        Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/global/networks/{networkId}\". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.

        :return: The network of this NodeConfig.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this NodeConfig.

        Optional. The Compute Engine network to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/global/networks/{networkId}\". If unspecified, the default network in the environment's project is used. If a [Custom Subnet Network](/vpc/docs/vpc#vpc_networks_and_subnets) is provided, `nodeConfig.subnetwork` must also be provided. For [Shared VPC](/vpc/docs/shared-vpc) subnetwork requirements, see `nodeConfig.subnetwork`.

        :param network: The network of this NodeConfig.
        :type network: str
        """

        self._network = network

    @property
    def oauth_scopes(self):
        """Gets the oauth_scopes of this NodeConfig.

        Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to [\"https://www.googleapis.com/auth/cloud-platform\"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The oauth_scopes of this NodeConfig.
        :rtype: List[str]
        """
        return self._oauth_scopes

    @oauth_scopes.setter
    def oauth_scopes(self, oauth_scopes):
        """Sets the oauth_scopes of this NodeConfig.

        Optional. The set of Google API scopes to be made available on all node VMs. If `oauth_scopes` is empty, defaults to [\"https://www.googleapis.com/auth/cloud-platform\"]. Cannot be updated. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param oauth_scopes: The oauth_scopes of this NodeConfig.
        :type oauth_scopes: List[str]
        """

        self._oauth_scopes = oauth_scopes

    @property
    def service_account(self):
        """Gets the service_account of this NodeConfig.

        Optional. The Google Cloud Platform Service Account to be used by the workloads. If a service account is not specified, the \"default\" Compute Engine service account is used. Cannot be updated.

        :return: The service_account of this NodeConfig.
        :rtype: str
        """
        return self._service_account

    @service_account.setter
    def service_account(self, service_account):
        """Sets the service_account of this NodeConfig.

        Optional. The Google Cloud Platform Service Account to be used by the workloads. If a service account is not specified, the \"default\" Compute Engine service account is used. Cannot be updated.

        :param service_account: The service_account of this NodeConfig.
        :type service_account: str
        """

        self._service_account = service_account

    @property
    def subnetwork(self):
        """Gets the subnetwork of this NodeConfig.

        Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}\" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.

        :return: The subnetwork of this NodeConfig.
        :rtype: str
        """
        return self._subnetwork

    @subnetwork.setter
    def subnetwork(self, subnetwork):
        """Sets the subnetwork of this NodeConfig.

        Optional. The Compute Engine subnetwork to be used for machine communications, specified as a [relative resource name](/apis/design/resource_names#relative_resource_name). For example: \"projects/{projectId}/regions/{regionId}/subnetworks/{subnetworkId}\" If a subnetwork is provided, `nodeConfig.network` must also be provided, and the subnetwork must belong to the enclosing environment's project and location.

        :param subnetwork: The subnetwork of this NodeConfig.
        :type subnetwork: str
        """

        self._subnetwork = subnetwork

    @property
    def tags(self):
        """Gets the tags of this NodeConfig.

        Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.

        :return: The tags of this NodeConfig.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NodeConfig.

        Optional. The list of instance tags applied to all node VMs. Tags are used to identify valid sources or targets for network firewalls. Each tag within the list must comply with [RFC1035](https://www.ietf.org/rfc/rfc1035.txt). Cannot be updated.

        :param tags: The tags of this NodeConfig.
        :type tags: List[str]
        """

        self._tags = tags
