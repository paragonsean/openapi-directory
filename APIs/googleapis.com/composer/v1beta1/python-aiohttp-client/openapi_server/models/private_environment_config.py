# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.networking_config import NetworkingConfig
from openapi_server.models.private_cluster_config import PrivateClusterConfig
from openapi_server import util


class PrivateEnvironmentConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cloud_composer_connection_subnetwork: str=None, cloud_composer_network_ipv4_cidr_block: str=None, cloud_composer_network_ipv4_reserved_range: str=None, cloud_sql_ipv4_cidr_block: str=None, enable_private_builds_only: bool=None, enable_private_environment: bool=None, enable_privately_used_public_ips: bool=None, networking_config: NetworkingConfig=None, private_cluster_config: PrivateClusterConfig=None, web_server_ipv4_cidr_block: str=None, web_server_ipv4_reserved_range: str=None):
        """PrivateEnvironmentConfig - a model defined in OpenAPI

        :param cloud_composer_connection_subnetwork: The cloud_composer_connection_subnetwork of this PrivateEnvironmentConfig.
        :param cloud_composer_network_ipv4_cidr_block: The cloud_composer_network_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :param cloud_composer_network_ipv4_reserved_range: The cloud_composer_network_ipv4_reserved_range of this PrivateEnvironmentConfig.
        :param cloud_sql_ipv4_cidr_block: The cloud_sql_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :param enable_private_builds_only: The enable_private_builds_only of this PrivateEnvironmentConfig.
        :param enable_private_environment: The enable_private_environment of this PrivateEnvironmentConfig.
        :param enable_privately_used_public_ips: The enable_privately_used_public_ips of this PrivateEnvironmentConfig.
        :param networking_config: The networking_config of this PrivateEnvironmentConfig.
        :param private_cluster_config: The private_cluster_config of this PrivateEnvironmentConfig.
        :param web_server_ipv4_cidr_block: The web_server_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :param web_server_ipv4_reserved_range: The web_server_ipv4_reserved_range of this PrivateEnvironmentConfig.
        """
        self.openapi_types = {
            'cloud_composer_connection_subnetwork': str,
            'cloud_composer_network_ipv4_cidr_block': str,
            'cloud_composer_network_ipv4_reserved_range': str,
            'cloud_sql_ipv4_cidr_block': str,
            'enable_private_builds_only': bool,
            'enable_private_environment': bool,
            'enable_privately_used_public_ips': bool,
            'networking_config': NetworkingConfig,
            'private_cluster_config': PrivateClusterConfig,
            'web_server_ipv4_cidr_block': str,
            'web_server_ipv4_reserved_range': str
        }

        self.attribute_map = {
            'cloud_composer_connection_subnetwork': 'cloudComposerConnectionSubnetwork',
            'cloud_composer_network_ipv4_cidr_block': 'cloudComposerNetworkIpv4CidrBlock',
            'cloud_composer_network_ipv4_reserved_range': 'cloudComposerNetworkIpv4ReservedRange',
            'cloud_sql_ipv4_cidr_block': 'cloudSqlIpv4CidrBlock',
            'enable_private_builds_only': 'enablePrivateBuildsOnly',
            'enable_private_environment': 'enablePrivateEnvironment',
            'enable_privately_used_public_ips': 'enablePrivatelyUsedPublicIps',
            'networking_config': 'networkingConfig',
            'private_cluster_config': 'privateClusterConfig',
            'web_server_ipv4_cidr_block': 'webServerIpv4CidrBlock',
            'web_server_ipv4_reserved_range': 'webServerIpv4ReservedRange'
        }

        self._cloud_composer_connection_subnetwork = cloud_composer_connection_subnetwork
        self._cloud_composer_network_ipv4_cidr_block = cloud_composer_network_ipv4_cidr_block
        self._cloud_composer_network_ipv4_reserved_range = cloud_composer_network_ipv4_reserved_range
        self._cloud_sql_ipv4_cidr_block = cloud_sql_ipv4_cidr_block
        self._enable_private_builds_only = enable_private_builds_only
        self._enable_private_environment = enable_private_environment
        self._enable_privately_used_public_ips = enable_privately_used_public_ips
        self._networking_config = networking_config
        self._private_cluster_config = private_cluster_config
        self._web_server_ipv4_cidr_block = web_server_ipv4_cidr_block
        self._web_server_ipv4_reserved_range = web_server_ipv4_reserved_range

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PrivateEnvironmentConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PrivateEnvironmentConfig of this PrivateEnvironmentConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_composer_connection_subnetwork(self):
        """Gets the cloud_composer_connection_subnetwork of this PrivateEnvironmentConfig.

        Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.

        :return: The cloud_composer_connection_subnetwork of this PrivateEnvironmentConfig.
        :rtype: str
        """
        return self._cloud_composer_connection_subnetwork

    @cloud_composer_connection_subnetwork.setter
    def cloud_composer_connection_subnetwork(self, cloud_composer_connection_subnetwork):
        """Sets the cloud_composer_connection_subnetwork of this PrivateEnvironmentConfig.

        Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.

        :param cloud_composer_connection_subnetwork: The cloud_composer_connection_subnetwork of this PrivateEnvironmentConfig.
        :type cloud_composer_connection_subnetwork: str
        """

        self._cloud_composer_connection_subnetwork = cloud_composer_connection_subnetwork

    @property
    def cloud_composer_network_ipv4_cidr_block(self):
        """Gets the cloud_composer_network_ipv4_cidr_block of this PrivateEnvironmentConfig.

        Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

        :return: The cloud_composer_network_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :rtype: str
        """
        return self._cloud_composer_network_ipv4_cidr_block

    @cloud_composer_network_ipv4_cidr_block.setter
    def cloud_composer_network_ipv4_cidr_block(self, cloud_composer_network_ipv4_cidr_block):
        """Sets the cloud_composer_network_ipv4_cidr_block of this PrivateEnvironmentConfig.

        Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

        :param cloud_composer_network_ipv4_cidr_block: The cloud_composer_network_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :type cloud_composer_network_ipv4_cidr_block: str
        """

        self._cloud_composer_network_ipv4_cidr_block = cloud_composer_network_ipv4_cidr_block

    @property
    def cloud_composer_network_ipv4_reserved_range(self):
        """Gets the cloud_composer_network_ipv4_reserved_range of this PrivateEnvironmentConfig.

        Output only. The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

        :return: The cloud_composer_network_ipv4_reserved_range of this PrivateEnvironmentConfig.
        :rtype: str
        """
        return self._cloud_composer_network_ipv4_reserved_range

    @cloud_composer_network_ipv4_reserved_range.setter
    def cloud_composer_network_ipv4_reserved_range(self, cloud_composer_network_ipv4_reserved_range):
        """Sets the cloud_composer_network_ipv4_reserved_range of this PrivateEnvironmentConfig.

        Output only. The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.

        :param cloud_composer_network_ipv4_reserved_range: The cloud_composer_network_ipv4_reserved_range of this PrivateEnvironmentConfig.
        :type cloud_composer_network_ipv4_reserved_range: str
        """

        self._cloud_composer_network_ipv4_reserved_range = cloud_composer_network_ipv4_reserved_range

    @property
    def cloud_sql_ipv4_cidr_block(self):
        """Gets the cloud_sql_ipv4_cidr_block of this PrivateEnvironmentConfig.

        Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block

        :return: The cloud_sql_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :rtype: str
        """
        return self._cloud_sql_ipv4_cidr_block

    @cloud_sql_ipv4_cidr_block.setter
    def cloud_sql_ipv4_cidr_block(self, cloud_sql_ipv4_cidr_block):
        """Sets the cloud_sql_ipv4_cidr_block of this PrivateEnvironmentConfig.

        Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block

        :param cloud_sql_ipv4_cidr_block: The cloud_sql_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :type cloud_sql_ipv4_cidr_block: str
        """

        self._cloud_sql_ipv4_cidr_block = cloud_sql_ipv4_cidr_block

    @property
    def enable_private_builds_only(self):
        """Gets the enable_private_builds_only of this PrivateEnvironmentConfig.

        Optional. If `true`, builds performed during operations that install Python packages have only private connectivity to Google services (including Artifact Registry) and VPC network (if either `NodeConfig.network` and `NodeConfig.subnetwork` fields or `NodeConfig.composer_network_attachment` field are specified). If `false`, the builds also have access to the internet. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :return: The enable_private_builds_only of this PrivateEnvironmentConfig.
        :rtype: bool
        """
        return self._enable_private_builds_only

    @enable_private_builds_only.setter
    def enable_private_builds_only(self, enable_private_builds_only):
        """Sets the enable_private_builds_only of this PrivateEnvironmentConfig.

        Optional. If `true`, builds performed during operations that install Python packages have only private connectivity to Google services (including Artifact Registry) and VPC network (if either `NodeConfig.network` and `NodeConfig.subnetwork` fields or `NodeConfig.composer_network_attachment` field are specified). If `false`, the builds also have access to the internet. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.

        :param enable_private_builds_only: The enable_private_builds_only of this PrivateEnvironmentConfig.
        :type enable_private_builds_only: bool
        """

        self._enable_private_builds_only = enable_private_builds_only

    @property
    def enable_private_environment(self):
        """Gets the enable_private_environment of this PrivateEnvironmentConfig.

        Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The enable_private_environment of this PrivateEnvironmentConfig.
        :rtype: bool
        """
        return self._enable_private_environment

    @enable_private_environment.setter
    def enable_private_environment(self, enable_private_environment):
        """Sets the enable_private_environment of this PrivateEnvironmentConfig.

        Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param enable_private_environment: The enable_private_environment of this PrivateEnvironmentConfig.
        :type enable_private_environment: bool
        """

        self._enable_private_environment = enable_private_environment

    @property
    def enable_privately_used_public_ips(self):
        """Gets the enable_privately_used_public_ips of this PrivateEnvironmentConfig.

        Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.

        :return: The enable_privately_used_public_ips of this PrivateEnvironmentConfig.
        :rtype: bool
        """
        return self._enable_privately_used_public_ips

    @enable_privately_used_public_ips.setter
    def enable_privately_used_public_ips(self, enable_privately_used_public_ips):
        """Sets the enable_privately_used_public_ips of this PrivateEnvironmentConfig.

        Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.

        :param enable_privately_used_public_ips: The enable_privately_used_public_ips of this PrivateEnvironmentConfig.
        :type enable_privately_used_public_ips: bool
        """

        self._enable_privately_used_public_ips = enable_privately_used_public_ips

    @property
    def networking_config(self):
        """Gets the networking_config of this PrivateEnvironmentConfig.


        :return: The networking_config of this PrivateEnvironmentConfig.
        :rtype: NetworkingConfig
        """
        return self._networking_config

    @networking_config.setter
    def networking_config(self, networking_config):
        """Sets the networking_config of this PrivateEnvironmentConfig.


        :param networking_config: The networking_config of this PrivateEnvironmentConfig.
        :type networking_config: NetworkingConfig
        """

        self._networking_config = networking_config

    @property
    def private_cluster_config(self):
        """Gets the private_cluster_config of this PrivateEnvironmentConfig.


        :return: The private_cluster_config of this PrivateEnvironmentConfig.
        :rtype: PrivateClusterConfig
        """
        return self._private_cluster_config

    @private_cluster_config.setter
    def private_cluster_config(self, private_cluster_config):
        """Sets the private_cluster_config of this PrivateEnvironmentConfig.


        :param private_cluster_config: The private_cluster_config of this PrivateEnvironmentConfig.
        :type private_cluster_config: PrivateClusterConfig
        """

        self._private_cluster_config = private_cluster_config

    @property
    def web_server_ipv4_cidr_block(self):
        """Gets the web_server_ipv4_cidr_block of this PrivateEnvironmentConfig.

        Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The web_server_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :rtype: str
        """
        return self._web_server_ipv4_cidr_block

    @web_server_ipv4_cidr_block.setter
    def web_server_ipv4_cidr_block(self, web_server_ipv4_cidr_block):
        """Sets the web_server_ipv4_cidr_block of this PrivateEnvironmentConfig.

        Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param web_server_ipv4_cidr_block: The web_server_ipv4_cidr_block of this PrivateEnvironmentConfig.
        :type web_server_ipv4_cidr_block: str
        """

        self._web_server_ipv4_cidr_block = web_server_ipv4_cidr_block

    @property
    def web_server_ipv4_reserved_range(self):
        """Gets the web_server_ipv4_reserved_range of this PrivateEnvironmentConfig.

        Output only. The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :return: The web_server_ipv4_reserved_range of this PrivateEnvironmentConfig.
        :rtype: str
        """
        return self._web_server_ipv4_reserved_range

    @web_server_ipv4_reserved_range.setter
    def web_server_ipv4_reserved_range(self, web_server_ipv4_reserved_range):
        """Sets the web_server_ipv4_reserved_range of this PrivateEnvironmentConfig.

        Output only. The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.

        :param web_server_ipv4_reserved_range: The web_server_ipv4_reserved_range of this PrivateEnvironmentConfig.
        :type web_server_ipv4_reserved_range: str
        """

        self._web_server_ipv4_reserved_range = web_server_ipv4_reserved_range
