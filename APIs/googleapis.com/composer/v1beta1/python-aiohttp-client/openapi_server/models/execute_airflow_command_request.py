# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteAirflowCommandRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command: str=None, parameters: List[str]=None, subcommand: str=None):
        """ExecuteAirflowCommandRequest - a model defined in OpenAPI

        :param command: The command of this ExecuteAirflowCommandRequest.
        :param parameters: The parameters of this ExecuteAirflowCommandRequest.
        :param subcommand: The subcommand of this ExecuteAirflowCommandRequest.
        """
        self.openapi_types = {
            'command': str,
            'parameters': List[str],
            'subcommand': str
        }

        self.attribute_map = {
            'command': 'command',
            'parameters': 'parameters',
            'subcommand': 'subcommand'
        }

        self._command = command
        self._parameters = parameters
        self._subcommand = subcommand

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExecuteAirflowCommandRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExecuteAirflowCommandRequest of this ExecuteAirflowCommandRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self):
        """Gets the command of this ExecuteAirflowCommandRequest.

        Airflow command.

        :return: The command of this ExecuteAirflowCommandRequest.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command):
        """Sets the command of this ExecuteAirflowCommandRequest.

        Airflow command.

        :param command: The command of this ExecuteAirflowCommandRequest.
        :type command: str
        """

        self._command = command

    @property
    def parameters(self):
        """Gets the parameters of this ExecuteAirflowCommandRequest.

        Parameters for the Airflow command/subcommand as an array of arguments. It may contain positional arguments like `[\"my-dag-id\"]`, key-value parameters like `[\"--foo=bar\"]` or `[\"--foo\",\"bar\"]`, or other flags like `[\"-f\"]`.

        :return: The parameters of this ExecuteAirflowCommandRequest.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ExecuteAirflowCommandRequest.

        Parameters for the Airflow command/subcommand as an array of arguments. It may contain positional arguments like `[\"my-dag-id\"]`, key-value parameters like `[\"--foo=bar\"]` or `[\"--foo\",\"bar\"]`, or other flags like `[\"-f\"]`.

        :param parameters: The parameters of this ExecuteAirflowCommandRequest.
        :type parameters: List[str]
        """

        self._parameters = parameters

    @property
    def subcommand(self):
        """Gets the subcommand of this ExecuteAirflowCommandRequest.

        Airflow subcommand.

        :return: The subcommand of this ExecuteAirflowCommandRequest.
        :rtype: str
        """
        return self._subcommand

    @subcommand.setter
    def subcommand(self, subcommand):
        """Sets the subcommand of this ExecuteAirflowCommandRequest.

        Airflow subcommand.

        :param subcommand: The subcommand of this ExecuteAirflowCommandRequest.
        :type subcommand: str
        """

        self._subcommand = subcommand
