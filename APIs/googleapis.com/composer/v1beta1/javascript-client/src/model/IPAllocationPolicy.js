/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IPAllocationPolicy model module.
 * @module model/IPAllocationPolicy
 * @version v1beta1
 */
class IPAllocationPolicy {
    /**
     * Constructs a new <code>IPAllocationPolicy</code>.
     * Configuration for controlling how IPs are allocated in the GKE cluster.
     * @alias module:model/IPAllocationPolicy
     */
    constructor() { 
        
        IPAllocationPolicy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IPAllocationPolicy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IPAllocationPolicy} obj Optional instance to populate.
     * @return {module:model/IPAllocationPolicy} The populated <code>IPAllocationPolicy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IPAllocationPolicy();

            if (data.hasOwnProperty('clusterIpv4CidrBlock')) {
                obj['clusterIpv4CidrBlock'] = ApiClient.convertToType(data['clusterIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('clusterSecondaryRangeName')) {
                obj['clusterSecondaryRangeName'] = ApiClient.convertToType(data['clusterSecondaryRangeName'], 'String');
            }
            if (data.hasOwnProperty('servicesIpv4CidrBlock')) {
                obj['servicesIpv4CidrBlock'] = ApiClient.convertToType(data['servicesIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('servicesSecondaryRangeName')) {
                obj['servicesSecondaryRangeName'] = ApiClient.convertToType(data['servicesSecondaryRangeName'], 'String');
            }
            if (data.hasOwnProperty('useIpAliases')) {
                obj['useIpAliases'] = ApiClient.convertToType(data['useIpAliases'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IPAllocationPolicy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IPAllocationPolicy</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clusterIpv4CidrBlock'] && !(typeof data['clusterIpv4CidrBlock'] === 'string' || data['clusterIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `clusterIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['clusterIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['clusterSecondaryRangeName'] && !(typeof data['clusterSecondaryRangeName'] === 'string' || data['clusterSecondaryRangeName'] instanceof String)) {
            throw new Error("Expected the field `clusterSecondaryRangeName` to be a primitive type in the JSON string but got " + data['clusterSecondaryRangeName']);
        }
        // ensure the json data is a string
        if (data['servicesIpv4CidrBlock'] && !(typeof data['servicesIpv4CidrBlock'] === 'string' || data['servicesIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `servicesIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['servicesIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['servicesSecondaryRangeName'] && !(typeof data['servicesSecondaryRangeName'] === 'string' || data['servicesSecondaryRangeName'] instanceof String)) {
            throw new Error("Expected the field `servicesSecondaryRangeName` to be a primitive type in the JSON string but got " + data['servicesSecondaryRangeName']);
        }

        return true;
    }


}



/**
 * Optional. The IP address range used to allocate IP addresses to pods in the cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both.
 * @member {String} clusterIpv4CidrBlock
 */
IPAllocationPolicy.prototype['clusterIpv4CidrBlock'] = undefined;

/**
 * Optional. The name of the cluster's secondary range used to allocate IP addresses to pods. Specify either `cluster_secondary_range_name` or `cluster_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
 * @member {String} clusterSecondaryRangeName
 */
IPAllocationPolicy.prototype['clusterSecondaryRangeName'] = undefined;

/**
 * Optional. The IP address range of the services IP addresses in this cluster. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true. Set to blank to have GKE choose a range with the default size. Set to /netmask (e.g. `/14`) to have GKE choose a range with a specific netmask. Set to a [CIDR](https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing) notation (e.g. `10.96.0.0/14`) from the RFC-1918 private networks (e.g. `10.0.0.0/8`, `172.16.0.0/12`, `192.168.0.0/16`) to pick a specific range to use. Specify `services_secondary_range_name` or `services_ipv4_cidr_block` but not both.
 * @member {String} servicesIpv4CidrBlock
 */
IPAllocationPolicy.prototype['servicesIpv4CidrBlock'] = undefined;

/**
 * Optional. The name of the services' secondary range used to allocate IP addresses to the cluster. Specify either `services_secondary_range_name` or `services_ipv4_cidr_block` but not both. For Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*, this field is applicable only when `use_ip_aliases` is true.
 * @member {String} servicesSecondaryRangeName
 */
IPAllocationPolicy.prototype['servicesSecondaryRangeName'] = undefined;

/**
 * Optional. Whether or not to enable Alias IPs in the GKE cluster. If `true`, a VPC-native cluster is created. This field is only supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*. Environments in newer versions always use VPC-native GKE clusters.
 * @member {Boolean} useIpAliases
 */
IPAllocationPolicy.prototype['useIpAliases'] = undefined;






export default IPAllocationPolicy;

