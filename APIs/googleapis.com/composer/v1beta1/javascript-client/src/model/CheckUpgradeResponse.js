/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckUpgradeResponse model module.
 * @module model/CheckUpgradeResponse
 * @version v1beta1
 */
class CheckUpgradeResponse {
    /**
     * Constructs a new <code>CheckUpgradeResponse</code>.
     * Message containing information about the result of an upgrade check operation.
     * @alias module:model/CheckUpgradeResponse
     */
    constructor() { 
        
        CheckUpgradeResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckUpgradeResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckUpgradeResponse} obj Optional instance to populate.
     * @return {module:model/CheckUpgradeResponse} The populated <code>CheckUpgradeResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckUpgradeResponse();

            if (data.hasOwnProperty('buildLogUri')) {
                obj['buildLogUri'] = ApiClient.convertToType(data['buildLogUri'], 'String');
            }
            if (data.hasOwnProperty('containsPypiModulesConflict')) {
                obj['containsPypiModulesConflict'] = ApiClient.convertToType(data['containsPypiModulesConflict'], 'String');
            }
            if (data.hasOwnProperty('imageVersion')) {
                obj['imageVersion'] = ApiClient.convertToType(data['imageVersion'], 'String');
            }
            if (data.hasOwnProperty('pypiConflictBuildLogExtract')) {
                obj['pypiConflictBuildLogExtract'] = ApiClient.convertToType(data['pypiConflictBuildLogExtract'], 'String');
            }
            if (data.hasOwnProperty('pypiDependencies')) {
                obj['pypiDependencies'] = ApiClient.convertToType(data['pypiDependencies'], {'String': 'String'});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckUpgradeResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckUpgradeResponse</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['buildLogUri'] && !(typeof data['buildLogUri'] === 'string' || data['buildLogUri'] instanceof String)) {
            throw new Error("Expected the field `buildLogUri` to be a primitive type in the JSON string but got " + data['buildLogUri']);
        }
        // ensure the json data is a string
        if (data['containsPypiModulesConflict'] && !(typeof data['containsPypiModulesConflict'] === 'string' || data['containsPypiModulesConflict'] instanceof String)) {
            throw new Error("Expected the field `containsPypiModulesConflict` to be a primitive type in the JSON string but got " + data['containsPypiModulesConflict']);
        }
        // ensure the json data is a string
        if (data['imageVersion'] && !(typeof data['imageVersion'] === 'string' || data['imageVersion'] instanceof String)) {
            throw new Error("Expected the field `imageVersion` to be a primitive type in the JSON string but got " + data['imageVersion']);
        }
        // ensure the json data is a string
        if (data['pypiConflictBuildLogExtract'] && !(typeof data['pypiConflictBuildLogExtract'] === 'string' || data['pypiConflictBuildLogExtract'] instanceof String)) {
            throw new Error("Expected the field `pypiConflictBuildLogExtract` to be a primitive type in the JSON string but got " + data['pypiConflictBuildLogExtract']);
        }

        return true;
    }


}



/**
 * Output only. Url for a docker build log of an upgraded image.
 * @member {String} buildLogUri
 */
CheckUpgradeResponse.prototype['buildLogUri'] = undefined;

/**
 * Output only. Whether build has succeeded or failed on modules conflicts.
 * @member {module:model/CheckUpgradeResponse.ContainsPypiModulesConflictEnum} containsPypiModulesConflict
 */
CheckUpgradeResponse.prototype['containsPypiModulesConflict'] = undefined;

/**
 * Composer image for which the build was happening.
 * @member {String} imageVersion
 */
CheckUpgradeResponse.prototype['imageVersion'] = undefined;

/**
 * Output only. Extract from a docker image build log containing information about pypi modules conflicts.
 * @member {String} pypiConflictBuildLogExtract
 */
CheckUpgradeResponse.prototype['pypiConflictBuildLogExtract'] = undefined;

/**
 * Pypi dependencies specified in the environment configuration, at the time when the build was triggered.
 * @member {Object.<String, String>} pypiDependencies
 */
CheckUpgradeResponse.prototype['pypiDependencies'] = undefined;





/**
 * Allowed values for the <code>containsPypiModulesConflict</code> property.
 * @enum {String}
 * @readonly
 */
CheckUpgradeResponse['ContainsPypiModulesConflictEnum'] = {

    /**
     * value: "CONFLICT_RESULT_UNSPECIFIED"
     * @const
     */
    "CONFLICT_RESULT_UNSPECIFIED": "CONFLICT_RESULT_UNSPECIFIED",

    /**
     * value: "CONFLICT"
     * @const
     */
    "CONFLICT": "CONFLICT",

    /**
     * value: "NO_CONFLICT"
     * @const
     */
    "NO_CONFLICT": "NO_CONFLICT"
};



export default CheckUpgradeResponse;

