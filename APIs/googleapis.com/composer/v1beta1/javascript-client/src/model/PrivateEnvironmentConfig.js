/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import NetworkingConfig from './NetworkingConfig';
import PrivateClusterConfig from './PrivateClusterConfig';

/**
 * The PrivateEnvironmentConfig model module.
 * @module model/PrivateEnvironmentConfig
 * @version v1beta1
 */
class PrivateEnvironmentConfig {
    /**
     * Constructs a new <code>PrivateEnvironmentConfig</code>.
     * The configuration information for configuring a Private IP Cloud Composer environment.
     * @alias module:model/PrivateEnvironmentConfig
     */
    constructor() { 
        
        PrivateEnvironmentConfig.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PrivateEnvironmentConfig</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PrivateEnvironmentConfig} obj Optional instance to populate.
     * @return {module:model/PrivateEnvironmentConfig} The populated <code>PrivateEnvironmentConfig</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PrivateEnvironmentConfig();

            if (data.hasOwnProperty('cloudComposerConnectionSubnetwork')) {
                obj['cloudComposerConnectionSubnetwork'] = ApiClient.convertToType(data['cloudComposerConnectionSubnetwork'], 'String');
            }
            if (data.hasOwnProperty('cloudComposerNetworkIpv4CidrBlock')) {
                obj['cloudComposerNetworkIpv4CidrBlock'] = ApiClient.convertToType(data['cloudComposerNetworkIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('cloudComposerNetworkIpv4ReservedRange')) {
                obj['cloudComposerNetworkIpv4ReservedRange'] = ApiClient.convertToType(data['cloudComposerNetworkIpv4ReservedRange'], 'String');
            }
            if (data.hasOwnProperty('cloudSqlIpv4CidrBlock')) {
                obj['cloudSqlIpv4CidrBlock'] = ApiClient.convertToType(data['cloudSqlIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('enablePrivateBuildsOnly')) {
                obj['enablePrivateBuildsOnly'] = ApiClient.convertToType(data['enablePrivateBuildsOnly'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePrivateEnvironment')) {
                obj['enablePrivateEnvironment'] = ApiClient.convertToType(data['enablePrivateEnvironment'], 'Boolean');
            }
            if (data.hasOwnProperty('enablePrivatelyUsedPublicIps')) {
                obj['enablePrivatelyUsedPublicIps'] = ApiClient.convertToType(data['enablePrivatelyUsedPublicIps'], 'Boolean');
            }
            if (data.hasOwnProperty('networkingConfig')) {
                obj['networkingConfig'] = NetworkingConfig.constructFromObject(data['networkingConfig']);
            }
            if (data.hasOwnProperty('privateClusterConfig')) {
                obj['privateClusterConfig'] = PrivateClusterConfig.constructFromObject(data['privateClusterConfig']);
            }
            if (data.hasOwnProperty('webServerIpv4CidrBlock')) {
                obj['webServerIpv4CidrBlock'] = ApiClient.convertToType(data['webServerIpv4CidrBlock'], 'String');
            }
            if (data.hasOwnProperty('webServerIpv4ReservedRange')) {
                obj['webServerIpv4ReservedRange'] = ApiClient.convertToType(data['webServerIpv4ReservedRange'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PrivateEnvironmentConfig</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PrivateEnvironmentConfig</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['cloudComposerConnectionSubnetwork'] && !(typeof data['cloudComposerConnectionSubnetwork'] === 'string' || data['cloudComposerConnectionSubnetwork'] instanceof String)) {
            throw new Error("Expected the field `cloudComposerConnectionSubnetwork` to be a primitive type in the JSON string but got " + data['cloudComposerConnectionSubnetwork']);
        }
        // ensure the json data is a string
        if (data['cloudComposerNetworkIpv4CidrBlock'] && !(typeof data['cloudComposerNetworkIpv4CidrBlock'] === 'string' || data['cloudComposerNetworkIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `cloudComposerNetworkIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['cloudComposerNetworkIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['cloudComposerNetworkIpv4ReservedRange'] && !(typeof data['cloudComposerNetworkIpv4ReservedRange'] === 'string' || data['cloudComposerNetworkIpv4ReservedRange'] instanceof String)) {
            throw new Error("Expected the field `cloudComposerNetworkIpv4ReservedRange` to be a primitive type in the JSON string but got " + data['cloudComposerNetworkIpv4ReservedRange']);
        }
        // ensure the json data is a string
        if (data['cloudSqlIpv4CidrBlock'] && !(typeof data['cloudSqlIpv4CidrBlock'] === 'string' || data['cloudSqlIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `cloudSqlIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['cloudSqlIpv4CidrBlock']);
        }
        // validate the optional field `networkingConfig`
        if (data['networkingConfig']) { // data not null
          NetworkingConfig.validateJSON(data['networkingConfig']);
        }
        // validate the optional field `privateClusterConfig`
        if (data['privateClusterConfig']) { // data not null
          PrivateClusterConfig.validateJSON(data['privateClusterConfig']);
        }
        // ensure the json data is a string
        if (data['webServerIpv4CidrBlock'] && !(typeof data['webServerIpv4CidrBlock'] === 'string' || data['webServerIpv4CidrBlock'] instanceof String)) {
            throw new Error("Expected the field `webServerIpv4CidrBlock` to be a primitive type in the JSON string but got " + data['webServerIpv4CidrBlock']);
        }
        // ensure the json data is a string
        if (data['webServerIpv4ReservedRange'] && !(typeof data['webServerIpv4ReservedRange'] === 'string' || data['webServerIpv4ReservedRange'] instanceof String)) {
            throw new Error("Expected the field `webServerIpv4ReservedRange` to be a primitive type in the JSON string but got " + data['webServerIpv4ReservedRange']);
        }

        return true;
    }


}



/**
 * Optional. When specified, the environment will use Private Service Connect instead of VPC peerings to connect to Cloud SQL in the Tenant Project, and the PSC endpoint in the Customer Project will use an IP address from this subnetwork.
 * @member {String} cloudComposerConnectionSubnetwork
 */
PrivateEnvironmentConfig.prototype['cloudComposerConnectionSubnetwork'] = undefined;

/**
 * Optional. The CIDR block from which IP range for Cloud Composer Network in tenant project will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
 * @member {String} cloudComposerNetworkIpv4CidrBlock
 */
PrivateEnvironmentConfig.prototype['cloudComposerNetworkIpv4CidrBlock'] = undefined;

/**
 * Output only. The IP range reserved for the tenant project's Cloud Composer network. This field is supported for Cloud Composer environments in versions composer-2.*.*-airflow-*.*.* and newer.
 * @member {String} cloudComposerNetworkIpv4ReservedRange
 */
PrivateEnvironmentConfig.prototype['cloudComposerNetworkIpv4ReservedRange'] = undefined;

/**
 * Optional. The CIDR block from which IP range in tenant project will be reserved for Cloud SQL. Needs to be disjoint from web_server_ipv4_cidr_block
 * @member {String} cloudSqlIpv4CidrBlock
 */
PrivateEnvironmentConfig.prototype['cloudSqlIpv4CidrBlock'] = undefined;

/**
 * Optional. If `true`, builds performed during operations that install Python packages have only private connectivity to Google services (including Artifact Registry) and VPC network (if either `NodeConfig.network` and `NodeConfig.subnetwork` fields or `NodeConfig.composer_network_attachment` field are specified). If `false`, the builds also have access to the internet. This field is supported for Cloud Composer environments in versions composer-3.*.*-airflow-*.*.* and newer.
 * @member {Boolean} enablePrivateBuildsOnly
 */
PrivateEnvironmentConfig.prototype['enablePrivateBuildsOnly'] = undefined;

/**
 * Optional. If `true`, a Private IP Cloud Composer environment is created. If this field is set to true, `IPAllocationPolicy.use_ip_aliases` must be set to true for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
 * @member {Boolean} enablePrivateEnvironment
 */
PrivateEnvironmentConfig.prototype['enablePrivateEnvironment'] = undefined;

/**
 * Optional. When enabled, IPs from public (non-RFC1918) ranges can be used for `IPAllocationPolicy.cluster_ipv4_cidr_block` and `IPAllocationPolicy.service_ipv4_cidr_block`.
 * @member {Boolean} enablePrivatelyUsedPublicIps
 */
PrivateEnvironmentConfig.prototype['enablePrivatelyUsedPublicIps'] = undefined;

/**
 * @member {module:model/NetworkingConfig} networkingConfig
 */
PrivateEnvironmentConfig.prototype['networkingConfig'] = undefined;

/**
 * @member {module:model/PrivateClusterConfig} privateClusterConfig
 */
PrivateEnvironmentConfig.prototype['privateClusterConfig'] = undefined;

/**
 * Optional. The CIDR block from which IP range for web server will be reserved. Needs to be disjoint from private_cluster_config.master_ipv4_cidr_block and cloud_sql_ipv4_cidr_block. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
 * @member {String} webServerIpv4CidrBlock
 */
PrivateEnvironmentConfig.prototype['webServerIpv4CidrBlock'] = undefined;

/**
 * Output only. The IP range reserved for the tenant project's App Engine VMs. This field is supported for Cloud Composer environments in versions composer-1.*.*-airflow-*.*.*.
 * @member {String} webServerIpv4ReservedRange
 */
PrivateEnvironmentConfig.prototype['webServerIpv4ReservedRange'] = undefined;






export default PrivateEnvironmentConfig;

