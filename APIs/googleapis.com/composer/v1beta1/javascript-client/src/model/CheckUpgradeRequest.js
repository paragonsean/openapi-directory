/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckUpgradeRequest model module.
 * @module model/CheckUpgradeRequest
 * @version v1beta1
 */
class CheckUpgradeRequest {
    /**
     * Constructs a new <code>CheckUpgradeRequest</code>.
     * Request to check whether image upgrade will succeed.
     * @alias module:model/CheckUpgradeRequest
     */
    constructor() { 
        
        CheckUpgradeRequest.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckUpgradeRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckUpgradeRequest} obj Optional instance to populate.
     * @return {module:model/CheckUpgradeRequest} The populated <code>CheckUpgradeRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckUpgradeRequest();

            if (data.hasOwnProperty('imageVersion')) {
                obj['imageVersion'] = ApiClient.convertToType(data['imageVersion'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckUpgradeRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckUpgradeRequest</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['imageVersion'] && !(typeof data['imageVersion'] === 'string' || data['imageVersion'] instanceof String)) {
            throw new Error("Expected the field `imageVersion` to be a primitive type in the JSON string but got " + data['imageVersion']);
        }

        return true;
    }


}



/**
 * The version of the software running in the environment. This encapsulates both the version of Cloud Composer functionality and the version of Apache Airflow. It must match the regular expression `composer-([0-9]+(\\.[0-9]+\\.[0-9]+(-preview\\.[0-9]+)?)?|latest)-airflow-([0-9]+(\\.[0-9]+(\\.[0-9]+)?)?)`. When used as input, the server also checks if the provided version is supported and denies the request for an unsupported version. The Cloud Composer portion of the image version is a full [semantic version](https://semver.org), or an alias in the form of major version number or `latest`. When an alias is provided, the server replaces it with the current Cloud Composer version that satisfies the alias. The Apache Airflow portion of the image version is a full semantic version that points to one of the supported Apache Airflow versions, or an alias in the form of only major or major.minor versions specified. When an alias is provided, the server replaces it with the latest Apache Airflow version that satisfies the alias and is supported in the given Cloud Composer version. In all cases, the resolved image version is stored in the same field. See also [version list](/composer/docs/concepts/versioning/composer-versions) and [versioning overview](/composer/docs/concepts/versioning/composer-versioning-overview).
 * @member {String} imageVersion
 */
CheckUpgradeRequest.prototype['imageVersion'] = undefined;






export default CheckUpgradeRequest;

