/**
 * Cloud Composer API
 * Manages Apache Airflow environments on Google Cloud Platform.
 *
 * The version of the OpenAPI document: v1beta1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateEnvironmentConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateEnvironmentConfig::OAIPrivateEnvironmentConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateEnvironmentConfig::OAIPrivateEnvironmentConfig() {
    this->initializeModel();
}

OAIPrivateEnvironmentConfig::~OAIPrivateEnvironmentConfig() {}

void OAIPrivateEnvironmentConfig::initializeModel() {

    m_cloud_composer_connection_subnetwork_isSet = false;
    m_cloud_composer_connection_subnetwork_isValid = false;

    m_cloud_composer_network_ipv4_cidr_block_isSet = false;
    m_cloud_composer_network_ipv4_cidr_block_isValid = false;

    m_cloud_composer_network_ipv4_reserved_range_isSet = false;
    m_cloud_composer_network_ipv4_reserved_range_isValid = false;

    m_cloud_sql_ipv4_cidr_block_isSet = false;
    m_cloud_sql_ipv4_cidr_block_isValid = false;

    m_enable_private_builds_only_isSet = false;
    m_enable_private_builds_only_isValid = false;

    m_enable_private_environment_isSet = false;
    m_enable_private_environment_isValid = false;

    m_enable_privately_used_public_ips_isSet = false;
    m_enable_privately_used_public_ips_isValid = false;

    m_networking_config_isSet = false;
    m_networking_config_isValid = false;

    m_private_cluster_config_isSet = false;
    m_private_cluster_config_isValid = false;

    m_web_server_ipv4_cidr_block_isSet = false;
    m_web_server_ipv4_cidr_block_isValid = false;

    m_web_server_ipv4_reserved_range_isSet = false;
    m_web_server_ipv4_reserved_range_isValid = false;
}

void OAIPrivateEnvironmentConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateEnvironmentConfig::fromJsonObject(QJsonObject json) {

    m_cloud_composer_connection_subnetwork_isValid = ::OpenAPI::fromJsonValue(m_cloud_composer_connection_subnetwork, json[QString("cloudComposerConnectionSubnetwork")]);
    m_cloud_composer_connection_subnetwork_isSet = !json[QString("cloudComposerConnectionSubnetwork")].isNull() && m_cloud_composer_connection_subnetwork_isValid;

    m_cloud_composer_network_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cloud_composer_network_ipv4_cidr_block, json[QString("cloudComposerNetworkIpv4CidrBlock")]);
    m_cloud_composer_network_ipv4_cidr_block_isSet = !json[QString("cloudComposerNetworkIpv4CidrBlock")].isNull() && m_cloud_composer_network_ipv4_cidr_block_isValid;

    m_cloud_composer_network_ipv4_reserved_range_isValid = ::OpenAPI::fromJsonValue(m_cloud_composer_network_ipv4_reserved_range, json[QString("cloudComposerNetworkIpv4ReservedRange")]);
    m_cloud_composer_network_ipv4_reserved_range_isSet = !json[QString("cloudComposerNetworkIpv4ReservedRange")].isNull() && m_cloud_composer_network_ipv4_reserved_range_isValid;

    m_cloud_sql_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_cloud_sql_ipv4_cidr_block, json[QString("cloudSqlIpv4CidrBlock")]);
    m_cloud_sql_ipv4_cidr_block_isSet = !json[QString("cloudSqlIpv4CidrBlock")].isNull() && m_cloud_sql_ipv4_cidr_block_isValid;

    m_enable_private_builds_only_isValid = ::OpenAPI::fromJsonValue(m_enable_private_builds_only, json[QString("enablePrivateBuildsOnly")]);
    m_enable_private_builds_only_isSet = !json[QString("enablePrivateBuildsOnly")].isNull() && m_enable_private_builds_only_isValid;

    m_enable_private_environment_isValid = ::OpenAPI::fromJsonValue(m_enable_private_environment, json[QString("enablePrivateEnvironment")]);
    m_enable_private_environment_isSet = !json[QString("enablePrivateEnvironment")].isNull() && m_enable_private_environment_isValid;

    m_enable_privately_used_public_ips_isValid = ::OpenAPI::fromJsonValue(m_enable_privately_used_public_ips, json[QString("enablePrivatelyUsedPublicIps")]);
    m_enable_privately_used_public_ips_isSet = !json[QString("enablePrivatelyUsedPublicIps")].isNull() && m_enable_privately_used_public_ips_isValid;

    m_networking_config_isValid = ::OpenAPI::fromJsonValue(m_networking_config, json[QString("networkingConfig")]);
    m_networking_config_isSet = !json[QString("networkingConfig")].isNull() && m_networking_config_isValid;

    m_private_cluster_config_isValid = ::OpenAPI::fromJsonValue(m_private_cluster_config, json[QString("privateClusterConfig")]);
    m_private_cluster_config_isSet = !json[QString("privateClusterConfig")].isNull() && m_private_cluster_config_isValid;

    m_web_server_ipv4_cidr_block_isValid = ::OpenAPI::fromJsonValue(m_web_server_ipv4_cidr_block, json[QString("webServerIpv4CidrBlock")]);
    m_web_server_ipv4_cidr_block_isSet = !json[QString("webServerIpv4CidrBlock")].isNull() && m_web_server_ipv4_cidr_block_isValid;

    m_web_server_ipv4_reserved_range_isValid = ::OpenAPI::fromJsonValue(m_web_server_ipv4_reserved_range, json[QString("webServerIpv4ReservedRange")]);
    m_web_server_ipv4_reserved_range_isSet = !json[QString("webServerIpv4ReservedRange")].isNull() && m_web_server_ipv4_reserved_range_isValid;
}

QString OAIPrivateEnvironmentConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateEnvironmentConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cloud_composer_connection_subnetwork_isSet) {
        obj.insert(QString("cloudComposerConnectionSubnetwork"), ::OpenAPI::toJsonValue(m_cloud_composer_connection_subnetwork));
    }
    if (m_cloud_composer_network_ipv4_cidr_block_isSet) {
        obj.insert(QString("cloudComposerNetworkIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_cloud_composer_network_ipv4_cidr_block));
    }
    if (m_cloud_composer_network_ipv4_reserved_range_isSet) {
        obj.insert(QString("cloudComposerNetworkIpv4ReservedRange"), ::OpenAPI::toJsonValue(m_cloud_composer_network_ipv4_reserved_range));
    }
    if (m_cloud_sql_ipv4_cidr_block_isSet) {
        obj.insert(QString("cloudSqlIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_cloud_sql_ipv4_cidr_block));
    }
    if (m_enable_private_builds_only_isSet) {
        obj.insert(QString("enablePrivateBuildsOnly"), ::OpenAPI::toJsonValue(m_enable_private_builds_only));
    }
    if (m_enable_private_environment_isSet) {
        obj.insert(QString("enablePrivateEnvironment"), ::OpenAPI::toJsonValue(m_enable_private_environment));
    }
    if (m_enable_privately_used_public_ips_isSet) {
        obj.insert(QString("enablePrivatelyUsedPublicIps"), ::OpenAPI::toJsonValue(m_enable_privately_used_public_ips));
    }
    if (m_networking_config.isSet()) {
        obj.insert(QString("networkingConfig"), ::OpenAPI::toJsonValue(m_networking_config));
    }
    if (m_private_cluster_config.isSet()) {
        obj.insert(QString("privateClusterConfig"), ::OpenAPI::toJsonValue(m_private_cluster_config));
    }
    if (m_web_server_ipv4_cidr_block_isSet) {
        obj.insert(QString("webServerIpv4CidrBlock"), ::OpenAPI::toJsonValue(m_web_server_ipv4_cidr_block));
    }
    if (m_web_server_ipv4_reserved_range_isSet) {
        obj.insert(QString("webServerIpv4ReservedRange"), ::OpenAPI::toJsonValue(m_web_server_ipv4_reserved_range));
    }
    return obj;
}

QString OAIPrivateEnvironmentConfig::getCloudComposerConnectionSubnetwork() const {
    return m_cloud_composer_connection_subnetwork;
}
void OAIPrivateEnvironmentConfig::setCloudComposerConnectionSubnetwork(const QString &cloud_composer_connection_subnetwork) {
    m_cloud_composer_connection_subnetwork = cloud_composer_connection_subnetwork;
    m_cloud_composer_connection_subnetwork_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_cloud_composer_connection_subnetwork_Set() const{
    return m_cloud_composer_connection_subnetwork_isSet;
}

bool OAIPrivateEnvironmentConfig::is_cloud_composer_connection_subnetwork_Valid() const{
    return m_cloud_composer_connection_subnetwork_isValid;
}

QString OAIPrivateEnvironmentConfig::getCloudComposerNetworkIpv4CidrBlock() const {
    return m_cloud_composer_network_ipv4_cidr_block;
}
void OAIPrivateEnvironmentConfig::setCloudComposerNetworkIpv4CidrBlock(const QString &cloud_composer_network_ipv4_cidr_block) {
    m_cloud_composer_network_ipv4_cidr_block = cloud_composer_network_ipv4_cidr_block;
    m_cloud_composer_network_ipv4_cidr_block_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_cloud_composer_network_ipv4_cidr_block_Set() const{
    return m_cloud_composer_network_ipv4_cidr_block_isSet;
}

bool OAIPrivateEnvironmentConfig::is_cloud_composer_network_ipv4_cidr_block_Valid() const{
    return m_cloud_composer_network_ipv4_cidr_block_isValid;
}

QString OAIPrivateEnvironmentConfig::getCloudComposerNetworkIpv4ReservedRange() const {
    return m_cloud_composer_network_ipv4_reserved_range;
}
void OAIPrivateEnvironmentConfig::setCloudComposerNetworkIpv4ReservedRange(const QString &cloud_composer_network_ipv4_reserved_range) {
    m_cloud_composer_network_ipv4_reserved_range = cloud_composer_network_ipv4_reserved_range;
    m_cloud_composer_network_ipv4_reserved_range_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_cloud_composer_network_ipv4_reserved_range_Set() const{
    return m_cloud_composer_network_ipv4_reserved_range_isSet;
}

bool OAIPrivateEnvironmentConfig::is_cloud_composer_network_ipv4_reserved_range_Valid() const{
    return m_cloud_composer_network_ipv4_reserved_range_isValid;
}

QString OAIPrivateEnvironmentConfig::getCloudSqlIpv4CidrBlock() const {
    return m_cloud_sql_ipv4_cidr_block;
}
void OAIPrivateEnvironmentConfig::setCloudSqlIpv4CidrBlock(const QString &cloud_sql_ipv4_cidr_block) {
    m_cloud_sql_ipv4_cidr_block = cloud_sql_ipv4_cidr_block;
    m_cloud_sql_ipv4_cidr_block_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_cloud_sql_ipv4_cidr_block_Set() const{
    return m_cloud_sql_ipv4_cidr_block_isSet;
}

bool OAIPrivateEnvironmentConfig::is_cloud_sql_ipv4_cidr_block_Valid() const{
    return m_cloud_sql_ipv4_cidr_block_isValid;
}

bool OAIPrivateEnvironmentConfig::isEnablePrivateBuildsOnly() const {
    return m_enable_private_builds_only;
}
void OAIPrivateEnvironmentConfig::setEnablePrivateBuildsOnly(const bool &enable_private_builds_only) {
    m_enable_private_builds_only = enable_private_builds_only;
    m_enable_private_builds_only_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_enable_private_builds_only_Set() const{
    return m_enable_private_builds_only_isSet;
}

bool OAIPrivateEnvironmentConfig::is_enable_private_builds_only_Valid() const{
    return m_enable_private_builds_only_isValid;
}

bool OAIPrivateEnvironmentConfig::isEnablePrivateEnvironment() const {
    return m_enable_private_environment;
}
void OAIPrivateEnvironmentConfig::setEnablePrivateEnvironment(const bool &enable_private_environment) {
    m_enable_private_environment = enable_private_environment;
    m_enable_private_environment_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_enable_private_environment_Set() const{
    return m_enable_private_environment_isSet;
}

bool OAIPrivateEnvironmentConfig::is_enable_private_environment_Valid() const{
    return m_enable_private_environment_isValid;
}

bool OAIPrivateEnvironmentConfig::isEnablePrivatelyUsedPublicIps() const {
    return m_enable_privately_used_public_ips;
}
void OAIPrivateEnvironmentConfig::setEnablePrivatelyUsedPublicIps(const bool &enable_privately_used_public_ips) {
    m_enable_privately_used_public_ips = enable_privately_used_public_ips;
    m_enable_privately_used_public_ips_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_enable_privately_used_public_ips_Set() const{
    return m_enable_privately_used_public_ips_isSet;
}

bool OAIPrivateEnvironmentConfig::is_enable_privately_used_public_ips_Valid() const{
    return m_enable_privately_used_public_ips_isValid;
}

OAINetworkingConfig OAIPrivateEnvironmentConfig::getNetworkingConfig() const {
    return m_networking_config;
}
void OAIPrivateEnvironmentConfig::setNetworkingConfig(const OAINetworkingConfig &networking_config) {
    m_networking_config = networking_config;
    m_networking_config_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_networking_config_Set() const{
    return m_networking_config_isSet;
}

bool OAIPrivateEnvironmentConfig::is_networking_config_Valid() const{
    return m_networking_config_isValid;
}

OAIPrivateClusterConfig OAIPrivateEnvironmentConfig::getPrivateClusterConfig() const {
    return m_private_cluster_config;
}
void OAIPrivateEnvironmentConfig::setPrivateClusterConfig(const OAIPrivateClusterConfig &private_cluster_config) {
    m_private_cluster_config = private_cluster_config;
    m_private_cluster_config_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_private_cluster_config_Set() const{
    return m_private_cluster_config_isSet;
}

bool OAIPrivateEnvironmentConfig::is_private_cluster_config_Valid() const{
    return m_private_cluster_config_isValid;
}

QString OAIPrivateEnvironmentConfig::getWebServerIpv4CidrBlock() const {
    return m_web_server_ipv4_cidr_block;
}
void OAIPrivateEnvironmentConfig::setWebServerIpv4CidrBlock(const QString &web_server_ipv4_cidr_block) {
    m_web_server_ipv4_cidr_block = web_server_ipv4_cidr_block;
    m_web_server_ipv4_cidr_block_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_web_server_ipv4_cidr_block_Set() const{
    return m_web_server_ipv4_cidr_block_isSet;
}

bool OAIPrivateEnvironmentConfig::is_web_server_ipv4_cidr_block_Valid() const{
    return m_web_server_ipv4_cidr_block_isValid;
}

QString OAIPrivateEnvironmentConfig::getWebServerIpv4ReservedRange() const {
    return m_web_server_ipv4_reserved_range;
}
void OAIPrivateEnvironmentConfig::setWebServerIpv4ReservedRange(const QString &web_server_ipv4_reserved_range) {
    m_web_server_ipv4_reserved_range = web_server_ipv4_reserved_range;
    m_web_server_ipv4_reserved_range_isSet = true;
}

bool OAIPrivateEnvironmentConfig::is_web_server_ipv4_reserved_range_Set() const{
    return m_web_server_ipv4_reserved_range_isSet;
}

bool OAIPrivateEnvironmentConfig::is_web_server_ipv4_reserved_range_Valid() const{
    return m_web_server_ipv4_reserved_range_isValid;
}

bool OAIPrivateEnvironmentConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cloud_composer_connection_subnetwork_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_composer_network_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_composer_network_ipv4_reserved_range_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_sql_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_private_builds_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_private_environment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_privately_used_public_ips_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_networking_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cluster_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_server_ipv4_cidr_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_web_server_ipv4_reserved_range_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateEnvironmentConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
